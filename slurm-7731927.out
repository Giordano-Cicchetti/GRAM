NODELIST=lrdn3124
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
1
230


DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:29:46 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:29:46 - INFO - __main__ -   ==================model_configs==================

09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_model_type : vast
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_frozen_vision : False
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_frozen_audio : False
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_checkpointing : True
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_contra_dim : 512
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_beam_size : 3
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_captioner_mode : False
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_generate_nums : 1
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_max_vision_sample_num : 2
09/16/2024 23:29:46 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/16/2024 23:29:46 - INFO - __main__ -   ==================run_configs==================

09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_checkpoint : 
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneVolume512batchlossonlyvolume4Mod150k
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_optim : adamw
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_resume : False
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_seed : 50
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_fp16 : True
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_bf16 : False
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_zero_shot : False
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_new_lr : 0
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_new_params_name : []
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_valid_freq : 10
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_first_eval : True
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_save_best : True
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_pin_mem : True
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_use_ddp : False
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_mode : training
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_log_steps : 100
09/16/2024 23:29:46 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/16/2024 23:29:46 - INFO - __main__ -   ==================data_configs==================

09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations150k.json
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 2
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 512
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tva
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/16/2024 23:29:46 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/16/2024 23:29:50 - INFO - __main__ -   finetune_area Using clip mean and std.
09/16/2024 23:29:50 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 149153 labelsci sono 149153 labelsci sono 149153 labels

ci sono 149153 labels

09/16/2024 23:30:54 - INFO - __main__ -   Create Dataset finetune_area Success
09/16/2024 23:30:54 - INFO - __main__ -    loader ret%tv%ta--finetune_area , ratio 1455 , bs_pergpu 128, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/16/2024 23:30:56 - INFO - __main__ -   current idx Y6ZqQLFmpGU.39 from finetune_area returns wrong image/video, use 22588 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/16/2024 23:30:57 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/16/2024 23:30:57 - INFO - __main__ -   msrvtt_ret transforms crop_flip
ci sono 884 labelsci sono 884 labels
ci sono 884 labels
ci sono 884 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(

09/16/2024 23:30:58 - INFO - __main__ -   Create Dataset msrvtt_ret Success
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/16/2024 23:31:00 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:31:00 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:31:00 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:31:00 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d402a12380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f59da4040] mmco: unref short failure
[h264 @ 0x559f59da4040] mmco: unref short failure
[h264 @ 0x559f5a02a180] mmco: unref short failure
[h264 @ 0x559f5a09f180] mmco: unref short failure
09/16/2024 23:31:50 - INFO - __main__ -   current idx d018IFLZh_8.4 from finetune_area returns wrong image/video, use 33167 instead.
[h264 @ 0x55d4024aa580] mmco: unref short failure
[h264 @ 0x55d4024aa580] mmco: unref short failure
[h264 @ 0x55927e2c1680] mmco: unref short failure
09/16/2024 23:31:57 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:32:00 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:32:03 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:32:07 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:32:12 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:32:12 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:32:14 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:32:14 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:32:15 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:32:16 - INFO - __main__ -   current idx 1-hr71oylIM.38 from finetune_area returns wrong image/video, use 143728 instead.
09/16/2024 23:32:16 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:32:19 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:32:21 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
[h264 @ 0x559f5a01e180] mmco: unref short failure
09/16/2024 23:32:26 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/16/2024 23:32:26 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/16/2024 23:32:27 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x555f28b0b6c0] mmco: unref short failure
[h264 @ 0x555f28b0b6c0] mmco: unref short failure
[h264 @ 0x555f28b0b6c0] mmco: unref short failure
[h264 @ 0x55d407121f80] mmco: unref short failure
[h264 @ 0x55d407121f80] mmco: unref short failure
09/16/2024 23:32:31 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x55d407121f80] mmco: unref short failure
[h264 @ 0x55d407121f80] mmco: unref short failure
[h264 @ 0x55d407121f80] mmco: unref short failure
[h264 @ 0x55d407121f80] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.value.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'cls.predictions.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.value.bias', 'cls.predictions.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.value.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.query.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.key.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.query.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.weight', 'cls.predictions.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'cls.predictions.transform.dense.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.query.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'cls.predictions.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.value.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.10.crossattention.output.dense.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x555f26139680] mmco: unref short failure
[h264 @ 0x555f26139680] mmco: unref short failure
[h264 @ 0x559f5cc45340] mmco: unref short failure
[h264 @ 0x55d4029f1900] mmco: unref short failure
[h264 @ 0x55d4029f1900] mmco: unref short failure
[h264 @ 0x559f59903480] mmco: unref short failure
[h264 @ 0x559f59903480] mmco: unref short failure
09/16/2024 23:32:57 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/16/2024 23:32:57 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
[h264 @ 0x5592854cb7c0] mmco: unref short failure
[h264 @ 0x5592854cb7c0] mmco: unref short failure
[h264 @ 0x555f28753780] mmco: unref short failure
[h264 @ 0x555f28753780] mmco: unref short failure
09/16/2024 23:33:03 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/16/2024 23:33:03 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x559f5cc2df80] mmco: unref short failure
[h264 @ 0x559f5cc2df80] mmco: unref short failure
[h264 @ 0x555f26ad4400] mmco: unref short failure
[h264 @ 0x555f26ad4400] mmco: unref short failure
[h264 @ 0x559f625913c0] mmco: unref short failure
[h264 @ 0x559f625913c0] mmco: unref short failure
09/16/2024 23:33:09 - INFO - __main__ -   ==================learning_rate_settings==================

09/16/2024 23:33:09 - INFO - __main__ -     basic_lr : 2e-05
09/16/2024 23:33:09 - INFO - __main__ -     clip_lr_visual : 5e-07
09/16/2024 23:33:09 - INFO - __main__ -     clip_lr_visual_len : 245
09/16/2024 23:33:09 - INFO - __main__ -     new_lr : 0
09/16/2024 23:33:09 - INFO - __main__ -     new_params_name: []
09/16/2024 23:33:09 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/16/2024 23:33:09 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555f2b270d00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555f27188b00] mmco: unref short failure
[h264 @ 0x555f27188b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f5a2cec80] mmco: unref short failure
[h264 @ 0x559f5a2cec80] mmco: unref short failure
[h264 @ 0x555f2997dd00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f60fbe540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55927e31c680] mmco: unref short failure
[h264 @ 0x55927fb612c0] mmco: unref short failure
[h264 @ 0x55927fb612c0] mmco: unref short failure
[h264 @ 0x555f27735d00] mmco: unref short failure
[h264 @ 0x555f27735d00] mmco: unref short failure
[h264 @ 0x55d4084c6c80] mmco: unref short failure
[h264 @ 0x555f2ec49d40] mmco: unref short failure
[h264 @ 0x555f2ec49d40] mmco: unref short failure
[h264 @ 0x555f26a74480] mmco: unref short failure
[h264 @ 0x559285ec59c0] mmco: unref short failure
[h264 @ 0x559f5d3ccac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x555f2d8e7a40] mmco: unref short failure
[h264 @ 0x555f2d8e7a40] mmco: unref short failure
[h264 @ 0x55927ee44640] mmco: unref short failure
[h264 @ 0x559f63429dc0] mmco: unref short failure
[h264 @ 0x555f2ce86d80] mmco: unref short failure
[h264 @ 0x555f2ce86d80] mmco: unref short failure
[h264 @ 0x555f2a834000] mmco: unref short failure
[h264 @ 0x555f281a8400] mmco: unref short failure
[h264 @ 0x55d406cf1f00] mmco: unref short failure
[h264 @ 0x55d406cf1f00] mmco: unref short failure
[h264 @ 0x555f27f84980] mmco: unref short failure
[h264 @ 0x555f27f84980] mmco: unref short failure
[h264 @ 0x555f27f84980] mmco: unref short failure
[h264 @ 0x55d40e4beec0] mmco: unref short failure
[h264 @ 0x55d40e4beec0] mmco: unref short failure
[h264 @ 0x559f5f5bfb40] mmco: unref short failure
[h264 @ 0x559f5f5bfb40] mmco: unref short failure
09/16/2024 23:35:22 - INFO - __main__ -   current idx GH7kTACMcMI.49 from finetune_area returns wrong image/video, use 146838 instead.
[h264 @ 0x55928a929440] mmco: unref short failure
[h264 @ 0x55928a929440] mmco: unref short failure
09/16/2024 23:35:27 - INFO - __main__ -   current idx bVHcVa51-ds.15 from finetune_area returns wrong image/video, use 75222 instead.
[h264 @ 0x555f29cccd00] mmco: unref short failure
[h264 @ 0x555f29cccd00] mmco: unref short failure
[h264 @ 0x55927ec58fc0] mmco: unref short failure
[h264 @ 0x55d4072e0840] mmco: unref short failure
[h264 @ 0x559f5bd01b00] mmco: unref short failure
[h264 @ 0x559f5bd01b00] mmco: unref short failure
[h264 @ 0x559f5bd01b00] mmco: unref short failure
[h264 @ 0x559f5bd01b00] mmco: unref short failure
[h264 @ 0x55d40ab9b080] mmco: unref short failure
[h264 @ 0x55d40ab9b080] mmco: unref short failure
[h264 @ 0x559286d96640] mmco: unref short failure
[h264 @ 0x559f6b3e3c40] mmco: unref short failure
[h264 @ 0x559f6b3e3c40] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  1%|          | 2/221 [00:00<00:27,  8.10it/s]  1%|▏         | 3/221 [00:00<00:34,  6.30it/s]  2%|▏         | 4/221 [00:00<00:29,  7.26it/s]  3%|▎         | 6/221 [00:00<00:22,  9.58it/s]  4%|▎         | 8/221 [00:00<00:24,  8.69it/s]  5%|▍         | 10/221 [00:01<00:22,  9.19it/s]  5%|▍         | 11/221 [00:01<00:24,  8.71it/s]  5%|▌         | 12/221 [00:03<02:18,  1.51it/s]  6%|▋         | 14/221 [00:04<01:34,  2.20it/s]  7%|▋         | 15/221 [00:04<01:21,  2.54it/s]  7%|▋         | 16/221 [00:04<01:07,  3.06it/s]  8%|▊         | 17/221 [00:04<01:03,  3.19it/s]  8%|▊         | 18/221 [00:04<00:56,  3.62it/s]  9%|▊         | 19/221 [00:04<00:47,  4.26it/s]  9%|▉         | 20/221 [00:05<00:41,  4.83it/s] 10%|▉         | 21/221 [00:05<00:39,  5.05it/s][h264 @ 0x559f66a7a340] mmco: unref short failure
[h264 @ 0x559f66a7a340] mmco: unref short failure
[h264 @ 0x555f2e459780] mmco: unref short failure
[h264 @ 0x555f2e459780] mmco: unref short failure
 10%|▉         | 22/221 [00:09<04:58,  1.50s/it] 10%|█         | 23/221 [00:09<03:35,  1.09s/it] 11%|█▏        | 25/221 [00:10<02:05,  1.56it/s] 12%|█▏        | 26/221 [00:10<01:41,  1.92it/s] 13%|█▎        | 28/221 [00:10<01:07,  2.87it/s] 14%|█▎        | 30/221 [00:10<00:48,  3.96it/s] 14%|█▍        | 31/221 [00:10<00:43,  4.40it/s] 15%|█▍        | 33/221 [00:11<00:35,  5.27it/s] 15%|█▌        | 34/221 [00:11<00:33,  5.51it/s] 16%|█▌        | 35/221 [00:11<00:35,  5.25it/s] 17%|█▋        | 37/221 [00:11<00:29,  6.21it/s] 17%|█▋        | 38/221 [00:11<00:27,  6.71it/s] 18%|█▊        | 39/221 [00:11<00:25,  7.05it/s] 18%|█▊        | 40/221 [00:12<00:24,  7.35it/s] 19%|█▉        | 42/221 [00:12<00:21,  8.40it/s] 19%|█▉        | 43/221 [00:12<00:20,  8.73it/s] 20%|██        | 45/221 [00:12<00:32,  5.41it/s][h264 @ 0x55d406bc9ac0] mmco: unref short failure
[h264 @ 0x55d406bc9ac0] mmco: unref short failure
 21%|██        | 46/221 [00:13<00:31,  5.48it/s][h264 @ 0x555f2ce9a440] mmco: unref short failure
[h264 @ 0x555f2ce9a440] mmco: unref short failure
[h264 @ 0x559f68c8f9c0] mmco: unref short failure
[h264 @ 0x559f68c8f9c0] mmco: unref short failure
 21%|██▏       | 47/221 [00:17<03:42,  1.28s/it] 22%|██▏       | 48/221 [00:18<02:52,  1.01it/s] 22%|██▏       | 49/221 [00:18<02:10,  1.32it/s] 23%|██▎       | 50/221 [00:18<01:40,  1.71it/s] 23%|██▎       | 51/221 [00:18<01:17,  2.21it/s] 24%|██▎       | 52/221 [00:18<01:00,  2.81it/s] 24%|██▍       | 53/221 [00:18<00:47,  3.52it/s] 24%|██▍       | 54/221 [00:22<03:49,  1.37s/it][h264 @ 0x559f5a1a04c0] mmco: unref short failure
[h264 @ 0x559f5a1a04c0] mmco: unref short failure
 25%|██▍       | 55/221 [00:24<03:55,  1.42s/it] 25%|██▌       | 56/221 [00:24<02:49,  1.03s/it] 26%|██▌       | 57/221 [00:24<02:04,  1.32it/s] 27%|██▋       | 59/221 [00:24<01:13,  2.22it/s] 27%|██▋       | 60/221 [00:24<01:01,  2.63it/s] 28%|██▊       | 61/221 [00:24<00:49,  3.23it/s] 29%|██▊       | 63/221 [00:25<00:34,  4.61it/s] 29%|██▉       | 64/221 [00:25<00:29,  5.27it/s] 29%|██▉       | 65/221 [00:25<00:26,  5.95it/s] 30%|██▉       | 66/221 [00:30<03:39,  1.42s/it] 30%|███       | 67/221 [00:30<02:50,  1.10s/it] 31%|███       | 68/221 [00:30<02:06,  1.21it/s] 31%|███       | 69/221 [00:30<01:37,  1.56it/s] 32%|███▏      | 70/221 [00:30<01:14,  2.03it/s] 32%|███▏      | 71/221 [00:30<00:58,  2.57it/s] 33%|███▎      | 72/221 [00:31<00:45,  3.25it/s] 33%|███▎      | 73/221 [00:31<00:37,  3.98it/s] 33%|███▎      | 74/221 [00:31<00:31,  4.70it/s] 34%|███▍      | 75/221 [00:31<00:27,  5.28it/s] 34%|███▍      | 76/221 [00:31<00:23,  6.13it/s]09/16/2024 23:36:23 - INFO - __main__ -   current idx -c6ksbh044A.74 from finetune_area returns wrong image/video, use 116655 instead.
 35%|███▌      | 78/221 [00:31<00:18,  7.60it/s] 36%|███▌      | 79/221 [00:32<00:25,  5.65it/s] 37%|███▋      | 81/221 [00:32<00:21,  6.65it/s] 37%|███▋      | 82/221 [00:32<00:22,  6.13it/s] 38%|███▊      | 83/221 [00:32<00:22,  6.23it/s] 38%|███▊      | 84/221 [00:32<00:22,  6.21it/s] 38%|███▊      | 85/221 [00:33<00:23,  5.77it/s] 39%|███▉      | 86/221 [00:33<00:24,  5.45it/s] 39%|███▉      | 87/221 [00:33<00:26,  5.14it/s] 40%|███▉      | 88/221 [00:33<00:30,  4.39it/s] 40%|████      | 89/221 [00:34<00:31,  4.21it/s] 41%|████      | 90/221 [00:34<00:27,  4.85it/s] 41%|████      | 91/221 [00:34<00:22,  5.71it/s] 42%|████▏     | 92/221 [00:34<00:20,  6.33it/s] 42%|████▏     | 93/221 [00:34<00:29,  4.29it/s] 43%|████▎     | 95/221 [00:34<00:22,  5.70it/s] 43%|████▎     | 96/221 [00:35<00:23,  5.31it/s] 44%|████▍     | 98/221 [00:35<00:18,  6.68it/s] 45%|████▌     | 100/221 [00:35<00:15,  7.94it/s] 46%|████▌     | 102/221 [00:35<00:13,  8.59it/s] 47%|████▋     | 104/221 [00:35<00:13,  8.87it/s] 48%|████▊     | 105/221 [00:36<00:15,  7.69it/s] 48%|████▊     | 106/221 [00:36<00:24,  4.68it/s] 48%|████▊     | 107/221 [00:36<00:21,  5.34it/s] 49%|████▉     | 109/221 [00:36<00:16,  6.72it/s] 50%|█████     | 111/221 [00:37<00:17,  6.34it/s] 51%|█████     | 112/221 [00:37<00:17,  6.39it/s] 51%|█████     | 113/221 [00:37<00:19,  5.57it/s] 52%|█████▏    | 114/221 [00:37<00:17,  5.97it/s] 52%|█████▏    | 115/221 [00:38<00:16,  6.24it/s][h264 @ 0x555f2bc20b80] mmco: unref short failure
[h264 @ 0x555f2bc20b80] mmco: unref short failure
[h264 @ 0x55d4054bb500] mmco: unref short failure
 52%|█████▏    | 116/221 [00:43<02:36,  1.49s/it] 53%|█████▎    | 117/221 [00:43<02:01,  1.17s/it] 53%|█████▎    | 118/221 [00:43<01:29,  1.15it/s] 54%|█████▍    | 120/221 [00:43<00:53,  1.91it/s] 55%|█████▌    | 122/221 [00:43<00:35,  2.79it/s] 56%|█████▌    | 124/221 [00:44<00:27,  3.58it/s] 57%|█████▋    | 125/221 [00:44<00:27,  3.43it/s] 57%|█████▋    | 126/221 [00:45<00:31,  3.02it/s] 57%|█████▋    | 127/221 [00:45<00:30,  3.07it/s] 58%|█████▊    | 128/221 [00:45<00:32,  2.85it/s] 58%|█████▊    | 129/221 [00:46<00:29,  3.12it/s] 59%|█████▉    | 130/221 [00:46<00:25,  3.53it/s] 59%|█████▉    | 131/221 [00:46<00:21,  4.22it/s] 60%|█████▉    | 132/221 [00:46<00:18,  4.71it/s] 60%|██████    | 133/221 [00:46<00:19,  4.45it/s] 61%|██████    | 134/221 [00:46<00:19,  4.42it/s] 61%|██████    | 135/221 [00:48<00:50,  1.71it/s] 62%|██████▏   | 136/221 [00:48<00:48,  1.74it/s][h264 @ 0x55d4032ec080] mmco: unref short failure
[h264 @ 0x55d4032ec080] mmco: unref short failure
 62%|██████▏   | 137/221 [00:51<01:36,  1.14s/it] 62%|██████▏   | 138/221 [00:51<01:13,  1.12it/s] 63%|██████▎   | 139/221 [00:52<01:02,  1.31it/s] 63%|██████▎   | 140/221 [00:52<00:49,  1.63it/s] 64%|██████▍   | 141/221 [00:52<00:40,  1.96it/s] 64%|██████▍   | 142/221 [00:53<00:35,  2.21it/s] 65%|██████▍   | 143/221 [00:53<00:31,  2.44it/s] 65%|██████▌   | 144/221 [00:53<00:27,  2.81it/s] 66%|██████▌   | 145/221 [00:53<00:22,  3.45it/s] 66%|██████▌   | 146/221 [00:53<00:17,  4.27it/s] 67%|██████▋   | 147/221 [00:53<00:14,  5.12it/s] 67%|██████▋   | 148/221 [00:54<00:14,  4.93it/s] 67%|██████▋   | 149/221 [00:54<00:12,  5.67it/s] 68%|██████▊   | 150/221 [00:54<00:16,  4.34it/s] 68%|██████▊   | 151/221 [00:54<00:17,  4.08it/s] 69%|██████▉   | 152/221 [00:55<00:16,  4.30it/s][h264 @ 0x559f5a1a7940] mmco: unref short failure
 70%|██████▉   | 154/221 [00:55<00:13,  5.07it/s] 70%|███████   | 155/221 [00:55<00:12,  5.41it/s][h264 @ 0x555f30cbc280] mmco: unref short failure
[h264 @ 0x555f30cbc280] mmco: unref short failure
09/16/2024 23:36:49 - INFO - __main__ -   current idx b1Hz-jQ4IM0.8 from finetune_area returns wrong image/video, use 94887 instead.
 71%|███████   | 156/221 [01:00<01:35,  1.46s/it] 71%|███████   | 157/221 [01:00<01:10,  1.11s/it] 72%|███████▏  | 159/221 [01:00<00:40,  1.51it/s] 73%|███████▎  | 161/221 [01:01<00:26,  2.26it/s]09/16/2024 23:36:52 - INFO - __main__ -   current idx BYYoxWKlR3E.11 from finetune_area returns wrong image/video, use 37956 instead.
 73%|███████▎  | 162/221 [01:01<00:23,  2.53it/s] 74%|███████▍  | 163/221 [01:01<00:20,  2.85it/s][h264 @ 0x55927ff6e300] mmco: unref short failure
 75%|███████▍  | 165/221 [01:07<01:14,  1.32s/it] 76%|███████▌  | 167/221 [01:09<01:10,  1.31s/it] 76%|███████▌  | 168/221 [01:09<00:56,  1.06s/it] 76%|███████▋  | 169/221 [01:10<00:47,  1.10it/s] 77%|███████▋  | 170/221 [01:10<00:37,  1.37it/s] 77%|███████▋  | 171/221 [01:10<00:29,  1.69it/s] 78%|███████▊  | 173/221 [01:10<00:18,  2.64it/s] 79%|███████▊  | 174/221 [01:10<00:15,  3.10it/s] 79%|███████▉  | 175/221 [01:11<00:17,  2.62it/s] 80%|████████  | 177/221 [01:11<00:11,  3.71it/s] 81%|████████  | 178/221 [01:13<00:24,  1.76it/s] 81%|████████▏ | 180/221 [01:13<00:16,  2.47it/s] 82%|████████▏ | 181/221 [01:13<00:14,  2.84it/s] 82%|████████▏ | 182/221 [01:13<00:11,  3.33it/s] 83%|████████▎ | 183/221 [01:13<00:09,  3.93it/s] 84%|████████▎ | 185/221 [01:14<00:07,  5.02it/s] 84%|████████▍ | 186/221 [01:14<00:10,  3.44it/s] 85%|████████▌ | 188/221 [01:15<00:07,  4.61it/s] 86%|████████▌ | 189/221 [01:15<00:06,  4.98it/s] 86%|████████▌ | 190/221 [01:15<00:09,  3.39it/s] 86%|████████▋ | 191/221 [01:15<00:07,  3.87it/s] 87%|████████▋ | 192/221 [01:16<00:06,  4.43it/s] 87%|████████▋ | 193/221 [01:16<00:08,  3.34it/s] 88%|████████▊ | 195/221 [01:16<00:05,  4.49it/s] 89%|████████▊ | 196/221 [01:16<00:04,  5.08it/s] 90%|████████▉ | 198/221 [01:17<00:03,  6.56it/s] 90%|█████████ | 199/221 [01:17<00:03,  6.09it/s] 90%|█████████ | 200/221 [01:17<00:03,  5.58it/s] 91%|█████████ | 201/221 [01:17<00:03,  5.31it/s] 91%|█████████▏| 202/221 [01:17<00:03,  5.01it/s] 92%|█████████▏| 203/221 [01:18<00:03,  4.68it/s] 92%|█████████▏| 204/221 [01:18<00:03,  5.31it/s] 93%|█████████▎| 205/221 [01:18<00:03,  5.22it/s] 93%|█████████▎| 206/221 [01:18<00:02,  5.84it/s] 94%|█████████▎| 207/221 [01:18<00:02,  6.40it/s] 94%|█████████▍| 208/221 [01:19<00:02,  5.58it/s] 95%|█████████▍| 209/221 [01:19<00:03,  3.74it/s] 95%|█████████▌| 210/221 [01:19<00:02,  4.42it/s] 95%|█████████▌| 211/221 [01:19<00:01,  5.11it/s] 96%|█████████▌| 212/221 [01:20<00:03,  3.00it/s] 96%|█████████▋| 213/221 [01:20<00:02,  2.72it/s] 97%|█████████▋| 215/221 [01:21<00:01,  4.25it/s] 98%|█████████▊| 216/221 [01:22<00:03,  1.52it/s] 98%|█████████▊| 217/221 [01:23<00:02,  1.93it/s] 99%|█████████▊| 218/221 [01:23<00:01,  2.45it/s][h264 @ 0x55d402562a00] mmco: unref short failure
[h264 @ 0x555f26af2980] mmco: unref short failure
[h264 @ 0x555f26af2980] mmco: unref short failure
[h264 @ 0x55d402562a00] mmco: unref short failure
[h264 @ 0x55d402449080] mmco: unref short failure
[h264 @ 0x55d402449080] mmco: unref short failure
[h264 @ 0x5592893b9a00] mmco: unref short failure
[h264 @ 0x5592893b9a00] mmco: unref short failure
[h264 @ 0x555f342bbb40] mmco: unref short failure
 99%|█████████▉| 219/221 [01:28<00:03,  1.72s/it]100%|█████████▉| 220/221 [01:28<00:00,  2.49it/s]
[h264 @ 0x55927ec0ed00] mmco: unref short failure
[h264 @ 0x55927ec0ed00] mmco: unref short failure
[h264 @ 0x55927ec0ed00] mmco: unref short failure
[h264 @ 0x55927ec0ed00] mmco: unref short failure
[h264 @ 0x55d4133c5300] mmco: unref short failure
[h264 @ 0x55d4133c5300] mmco: unref short failure
[h264 @ 0x559f5c749100] mmco: unref short failure
[h264 @ 0x559f5f5e0a80] mmco: unref short failure
[h264 @ 0x559f5f5e0a80] mmco: unref short failure
09/16/2024 23:37:30 - INFO - __main__ -   current idx KX0TpgJdepY.11 from finetune_area returns wrong image/video, use 84519 instead.
[h264 @ 0x559f5b8fee40] mmco: unref short failure
[h264 @ 0x559f5b8fee40] mmco: unref short failure
[h264 @ 0x559f5e3982c0] mmco: unref short failure
[h264 @ 0x55d4030ca180] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<01:26,  2.54it/s]  1%|          | 2/221 [00:00<01:19,  2.76it/s]  1%|▏         | 3/221 [00:01<01:22,  2.64it/s]  2%|▏         | 4/221 [00:01<01:29,  2.42it/s]  2%|▏         | 5/221 [00:01<01:25,  2.52it/s]  3%|▎         | 6/221 [00:02<01:22,  2.61it/s]  3%|▎         | 7/221 [00:02<01:17,  2.74it/s]  4%|▎         | 8/221 [00:02<01:15,  2.84it/s]  4%|▍         | 9/221 [00:03<01:12,  2.92it/s]  5%|▍         | 10/221 [00:03<01:15,  2.81it/s]  5%|▍         | 11/221 [00:04<01:15,  2.76it/s]  5%|▌         | 12/221 [00:04<01:13,  2.83it/s][h264 @ 0x555f2ba49980] mmco: unref short failure
[h264 @ 0x555f2ba49980] mmco: unref short failure
  6%|▌         | 13/221 [00:04<01:12,  2.86it/s][h264 @ 0x555f26af0a80] mmco: unref short failure
  6%|▋         | 14/221 [00:05<01:10,  2.92it/s]  7%|▋         | 15/221 [00:05<01:09,  2.97it/s]  7%|▋         | 16/221 [00:05<01:12,  2.82it/s]  8%|▊         | 17/221 [00:06<01:12,  2.82it/s]  8%|▊         | 18/221 [00:06<01:09,  2.92it/s]  9%|▊         | 19/221 [00:06<01:08,  2.96it/s]  9%|▉         | 20/221 [00:07<01:06,  3.01it/s] 10%|▉         | 21/221 [00:07<01:05,  3.05it/s] 10%|▉         | 22/221 [00:07<01:16,  2.61it/s] 10%|█         | 23/221 [00:08<01:15,  2.63it/s] 11%|█         | 24/221 [00:08<01:13,  2.66it/s] 11%|█▏        | 25/221 [00:09<01:12,  2.69it/s] 12%|█▏        | 26/221 [00:09<01:09,  2.80it/s] 12%|█▏        | 27/221 [00:09<01:07,  2.88it/s] 13%|█▎        | 28/221 [00:10<01:07,  2.88it/s] 13%|█▎        | 29/221 [00:10<01:07,  2.86it/s] 14%|█▎        | 30/221 [00:10<01:10,  2.70it/s] 14%|█▍        | 31/221 [00:11<01:11,  2.67it/s] 14%|█▍        | 32/221 [00:11<01:08,  2.77it/s] 15%|█▍        | 33/221 [00:11<01:06,  2.85it/s] 15%|█▌        | 34/221 [00:12<01:04,  2.92it/s] 16%|█▌        | 35/221 [00:12<01:04,  2.88it/s] 16%|█▋        | 36/221 [00:12<01:06,  2.80it/s] 17%|█▋        | 37/221 [00:13<01:03,  2.90it/s] 17%|█▋        | 38/221 [00:13<01:04,  2.84it/s] 18%|█▊        | 39/221 [00:13<01:01,  2.94it/s] 18%|█▊        | 40/221 [00:14<01:02,  2.92it/s] 19%|█▊        | 41/221 [00:14<01:01,  2.91it/s] 19%|█▉        | 42/221 [00:14<01:02,  2.88it/s] 19%|█▉        | 43/221 [00:15<01:13,  2.41it/s] 20%|█▉        | 44/221 [00:15<01:08,  2.60it/s][h264 @ 0x559286d8a0c0] mmco: unref short failure
[h264 @ 0x559286d8a0c0] mmco: unref short failure
[h264 @ 0x559286d8a0c0] mmco: unref short failure
[h264 @ 0x559286d8a0c0] mmco: unref short failure
 20%|██        | 45/221 [00:16<01:05,  2.69it/s] 21%|██        | 46/221 [00:16<01:03,  2.77it/s] 21%|██▏       | 47/221 [00:16<01:00,  2.86it/s] 22%|██▏       | 48/221 [00:17<01:01,  2.82it/s] 22%|██▏       | 49/221 [00:17<01:01,  2.79it/s] 23%|██▎       | 50/221 [00:17<00:59,  2.85it/s] 23%|██▎       | 51/221 [00:18<00:57,  2.93it/s] 24%|██▎       | 52/221 [00:18<00:57,  2.93it/s] 24%|██▍       | 53/221 [00:18<00:58,  2.85it/s] 24%|██▍       | 54/221 [00:19<00:59,  2.82it/s] 25%|██▍       | 55/221 [00:19<01:01,  2.68it/s] 25%|██▌       | 56/221 [00:20<00:58,  2.80it/s] 26%|██▌       | 57/221 [00:20<00:57,  2.85it/s]09/16/2024 23:37:52 - INFO - __main__ -   current idx f2vz8YAFQms.52 from finetune_area returns wrong image/video, use 139708 instead.
 26%|██▌       | 58/221 [00:20<00:55,  2.94it/s] 27%|██▋       | 59/221 [00:21<00:55,  2.94it/s] 27%|██▋       | 60/221 [00:21<00:53,  3.01it/s] 28%|██▊       | 61/221 [00:21<00:53,  2.98it/s] 28%|██▊       | 62/221 [00:21<00:51,  3.08it/s] 29%|██▊       | 63/221 [00:22<00:51,  3.08it/s] 29%|██▉       | 64/221 [00:22<00:50,  3.10it/s] 29%|██▉       | 65/221 [00:22<00:51,  3.05it/s] 30%|██▉       | 66/221 [00:23<00:52,  2.96it/s] 30%|███       | 67/221 [00:23<00:51,  3.02it/s] 31%|███       | 68/221 [00:23<00:50,  3.06it/s] 31%|███       | 69/221 [00:24<00:49,  3.07it/s] 32%|███▏      | 70/221 [00:24<00:49,  3.07it/s] 32%|███▏      | 71/221 [00:25<00:54,  2.78it/s] 33%|███▎      | 72/221 [00:25<00:54,  2.71it/s] 33%|███▎      | 73/221 [00:25<00:53,  2.75it/s] 33%|███▎      | 74/221 [00:26<00:51,  2.87it/s] 34%|███▍      | 75/221 [00:26<00:49,  2.96it/s] 34%|███▍      | 76/221 [00:26<00:48,  2.96it/s] 35%|███▍      | 77/221 [00:27<00:48,  2.96it/s] 35%|███▌      | 78/221 [00:27<00:48,  2.94it/s] 36%|███▌      | 79/221 [00:27<00:49,  2.86it/s] 36%|███▌      | 80/221 [00:28<00:47,  2.95it/s] 37%|███▋      | 81/221 [00:28<00:46,  2.99it/s] 37%|███▋      | 82/221 [00:28<00:45,  3.03it/s] 38%|███▊      | 83/221 [00:29<00:44,  3.08it/s] 38%|███▊      | 84/221 [00:29<00:45,  2.99it/s] 38%|███▊      | 85/221 [00:29<00:45,  3.01it/s] 39%|███▉      | 86/221 [00:30<00:45,  2.97it/s] 39%|███▉      | 87/221 [00:30<00:47,  2.83it/s] 40%|███▉      | 88/221 [00:30<00:49,  2.66it/s] 40%|████      | 89/221 [00:31<00:49,  2.69it/s] 41%|████      | 90/221 [00:31<00:49,  2.66it/s] 41%|████      | 91/221 [00:32<00:47,  2.75it/s] 42%|████▏     | 92/221 [00:32<00:47,  2.72it/s] 42%|████▏     | 93/221 [00:32<00:45,  2.84it/s] 43%|████▎     | 94/221 [00:33<00:44,  2.87it/s] 43%|████▎     | 95/221 [00:33<00:42,  2.94it/s] 43%|████▎     | 96/221 [00:33<00:43,  2.86it/s] 44%|████▍     | 97/221 [00:34<00:43,  2.85it/s] 44%|████▍     | 98/221 [00:34<00:41,  2.94it/s] 45%|████▍     | 99/221 [00:34<00:41,  2.92it/s] 45%|████▌     | 100/221 [00:35<00:40,  2.96it/s] 46%|████▌     | 101/221 [00:35<00:40,  2.94it/s] 46%|████▌     | 102/221 [00:35<00:41,  2.89it/s] 47%|████▋     | 103/221 [00:36<00:41,  2.83it/s] 47%|████▋     | 104/221 [00:36<00:42,  2.78it/s] 48%|████▊     | 105/221 [00:36<00:40,  2.86it/s] 48%|████▊     | 106/221 [00:37<00:39,  2.94it/s][h264 @ 0x559f5aeeccc0] mmco: unref short failure
[h264 @ 0x559f5aeeccc0] mmco: unref short failure
 48%|████▊     | 107/221 [00:37<00:39,  2.90it/s] 49%|████▉     | 108/221 [00:37<00:39,  2.87it/s] 49%|████▉     | 109/221 [00:38<00:41,  2.71it/s] 50%|████▉     | 110/221 [00:38<00:41,  2.69it/s] 50%|█████     | 111/221 [00:39<00:41,  2.67it/s] 51%|█████     | 112/221 [00:39<00:39,  2.79it/s] 51%|█████     | 113/221 [00:39<00:37,  2.86it/s][h264 @ 0x55927e48e780] mmco: unref short failure
 52%|█████▏    | 114/221 [00:40<00:36,  2.91it/s] 52%|█████▏    | 115/221 [00:40<00:35,  2.96it/s] 52%|█████▏    | 116/221 [00:40<00:35,  2.98it/s][h264 @ 0x55927e2f0a40] mmco: unref short failure
[h264 @ 0x55927e2f0a40] mmco: unref short failure
 53%|█████▎    | 117/221 [00:41<00:37,  2.79it/s] 53%|█████▎    | 118/221 [00:41<00:39,  2.61it/s] 54%|█████▍    | 119/221 [00:41<00:37,  2.75it/s] 54%|█████▍    | 120/221 [00:42<00:35,  2.82it/s] 55%|█████▍    | 121/221 [00:42<00:34,  2.90it/s] 55%|█████▌    | 122/221 [00:42<00:33,  2.91it/s] 56%|█████▌    | 123/221 [00:43<00:35,  2.73it/s] 56%|█████▌    | 124/221 [00:43<00:36,  2.62it/s] 57%|█████▋    | 125/221 [00:44<00:35,  2.73it/s] 57%|█████▋    | 126/221 [00:44<00:33,  2.84it/s] 57%|█████▋    | 127/221 [00:44<00:34,  2.76it/s] 58%|█████▊    | 128/221 [00:45<00:34,  2.71it/s] 58%|█████▊    | 129/221 [00:45<00:34,  2.67it/s] 59%|█████▉    | 130/221 [00:45<00:32,  2.81it/s] 59%|█████▉    | 131/221 [00:46<00:32,  2.78it/s] 60%|█████▉    | 132/221 [00:46<00:30,  2.87it/s] 60%|██████    | 133/221 [00:46<00:30,  2.90it/s] 61%|██████    | 134/221 [00:47<00:31,  2.76it/s] 61%|██████    | 135/221 [00:47<00:30,  2.82it/s] 62%|██████▏   | 136/221 [00:47<00:30,  2.81it/s] 62%|██████▏   | 137/221 [00:48<00:29,  2.89it/s] 62%|██████▏   | 138/221 [00:48<00:27,  2.99it/s] 63%|██████▎   | 139/221 [00:48<00:28,  2.91it/s] 63%|██████▎   | 140/221 [00:49<00:30,  2.68it/s] 64%|██████▍   | 141/221 [00:49<00:28,  2.78it/s] 64%|██████▍   | 142/221 [00:50<00:27,  2.86it/s] 65%|██████▍   | 143/221 [00:50<00:26,  2.92it/s] 65%|██████▌   | 144/221 [00:50<00:25,  2.98it/s] 66%|██████▌   | 145/221 [00:51<00:25,  2.97it/s] 66%|██████▌   | 146/221 [00:51<00:26,  2.85it/s] 67%|██████▋   | 147/221 [00:51<00:25,  2.91it/s] 67%|██████▋   | 148/221 [00:52<00:25,  2.84it/s] 67%|██████▋   | 149/221 [00:52<00:25,  2.88it/s] 68%|██████▊   | 150/221 [00:52<00:23,  2.96it/s] 68%|██████▊   | 151/221 [00:53<00:23,  2.99it/s][h264 @ 0x559f65d67240] mmco: unref short failure
[h264 @ 0x559f65d67240] mmco: unref short failure
 69%|██████▉   | 152/221 [00:53<00:22,  3.05it/s] 69%|██████▉   | 153/221 [00:53<00:22,  3.07it/s] 70%|██████▉   | 154/221 [00:54<00:22,  2.96it/s] 70%|███████   | 155/221 [00:54<00:23,  2.80it/s][h264 @ 0x559290d271c0] mmco: unref short failure
[h264 @ 0x559290d271c0] mmco: unref short failure
 71%|███████   | 156/221 [00:54<00:23,  2.73it/s] 71%|███████   | 157/221 [00:55<00:22,  2.80it/s] 71%|███████▏  | 158/221 [00:55<00:22,  2.79it/s] 72%|███████▏  | 159/221 [00:55<00:22,  2.76it/s] 72%|███████▏  | 160/221 [00:56<00:22,  2.69it/s] 73%|███████▎  | 161/221 [00:56<00:21,  2.74it/s] 73%|███████▎  | 162/221 [00:57<00:21,  2.78it/s] 74%|███████▍  | 163/221 [00:57<00:21,  2.65it/s] 74%|███████▍  | 164/221 [00:57<00:20,  2.74it/s] 75%|███████▍  | 165/221 [00:58<00:19,  2.85it/s] 75%|███████▌  | 166/221 [00:58<00:20,  2.73it/s] 76%|███████▌  | 167/221 [00:58<00:19,  2.71it/s] 76%|███████▌  | 168/221 [00:59<00:19,  2.73it/s] 76%|███████▋  | 169/221 [00:59<00:18,  2.79it/s] 77%|███████▋  | 170/221 [00:59<00:18,  2.81it/s] 77%|███████▋  | 171/221 [01:00<00:17,  2.89it/s]09/16/2024 23:38:32 - INFO - __main__ -   current idx QzpF1yDPHf0.29 from finetune_area returns wrong image/video, use 15888 instead.
 78%|███████▊  | 172/221 [01:00<00:17,  2.86it/s] 78%|███████▊  | 173/221 [01:00<00:16,  2.92it/s] 79%|███████▊  | 174/221 [01:01<00:15,  2.94it/s] 79%|███████▉  | 175/221 [01:01<00:16,  2.87it/s] 80%|███████▉  | 176/221 [01:01<00:15,  2.90it/s] 80%|████████  | 177/221 [01:02<00:14,  2.95it/s] 81%|████████  | 178/221 [01:02<00:14,  2.97it/s] 81%|████████  | 179/221 [01:03<00:15,  2.78it/s] 81%|████████▏ | 180/221 [01:03<00:14,  2.84it/s] 82%|████████▏ | 181/221 [01:03<00:14,  2.80it/s] 82%|████████▏ | 182/221 [01:04<00:13,  2.88it/s] 83%|████████▎ | 183/221 [01:04<00:13,  2.83it/s] 83%|████████▎ | 184/221 [01:04<00:12,  2.92it/s] 84%|████████▎ | 185/221 [01:05<00:11,  3.04it/s] 84%|████████▍ | 186/221 [01:05<00:11,  3.02it/s] 85%|████████▍ | 187/221 [01:05<00:11,  3.04it/s] 85%|████████▌ | 188/221 [01:06<00:10,  3.09it/s] 86%|████████▌ | 189/221 [01:06<00:10,  3.01it/s][h264 @ 0x55d40b4ca740] mmco: unref short failure
[h264 @ 0x55d40b4ca740] mmco: unref short failure
 86%|████████▌ | 190/221 [01:06<00:10,  2.86it/s] 86%|████████▋ | 191/221 [01:07<00:10,  2.93it/s] 87%|████████▋ | 192/221 [01:07<00:09,  2.94it/s] 87%|████████▋ | 193/221 [01:07<00:10,  2.63it/s][h264 @ 0x555f350a3580] mmco: unref short failure
[h264 @ 0x555f350a3580] mmco: unref short failure
 88%|████████▊ | 194/221 [01:08<00:10,  2.63it/s] 88%|████████▊ | 195/221 [01:08<00:09,  2.75it/s] 89%|████████▊ | 196/221 [01:08<00:09,  2.73it/s] 89%|████████▉ | 197/221 [01:09<00:08,  2.69it/s] 90%|████████▉ | 198/221 [01:09<00:08,  2.83it/s] 90%|█████████ | 199/221 [01:10<00:07,  2.86it/s] 90%|█████████ | 200/221 [01:10<00:07,  2.94it/s] 91%|█████████ | 201/221 [01:10<00:07,  2.74it/s] 91%|█████████▏| 202/221 [01:11<00:06,  2.80it/s] 92%|█████████▏| 203/221 [01:11<00:06,  2.84it/s] 92%|█████████▏| 204/221 [01:11<00:06,  2.81it/s] 93%|█████████▎| 205/221 [01:12<00:05,  2.86it/s] 93%|█████████▎| 206/221 [01:12<00:05,  2.81it/s] 94%|█████████▎| 207/221 [01:12<00:04,  2.81it/s] 94%|█████████▍| 208/221 [01:13<00:04,  2.80it/s] 95%|█████████▍| 209/221 [01:13<00:04,  2.77it/s] 95%|█████████▌| 210/221 [01:13<00:04,  2.75it/s] 95%|█████████▌| 211/221 [01:14<00:03,  2.78it/s] 96%|█████████▌| 212/221 [01:14<00:03,  2.87it/s] 96%|█████████▋| 213/221 [01:14<00:02,  2.87it/s] 97%|█████████▋| 214/221 [01:15<00:02,  2.73it/s] 97%|█████████▋| 215/221 [01:15<00:02,  2.74it/s] 98%|█████████▊| 216/221 [01:16<00:01,  2.68it/s] 98%|█████████▊| 217/221 [01:16<00:01,  2.67it/s] 99%|█████████▊| 218/221 [01:16<00:01,  2.72it/s] 99%|█████████▉| 219/221 [01:17<00:00,  2.76it/s]100%|█████████▉| 220/221 [01:17<00:00,  2.79it/s]100%|██████████| 221/221 [01:17<00:00,  2.81it/s]100%|██████████| 221/221 [01:17<00:00,  2.84it/s]
09/16/2024 23:38:57 - INFO - __main__ -   current idx XgAp7Dp862o.1 from finetune_area returns wrong image/video, use 52697 instead.
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<01:19,  2.76it/s]  1%|          | 2/221 [00:00<01:33,  2.34it/s]  1%|▏         | 3/221 [00:01<01:52,  1.94it/s]  2%|▏         | 4/221 [00:01<01:49,  1.99it/s]  2%|▏         | 5/221 [00:02<01:28,  2.44it/s]  3%|▎         | 6/221 [00:02<01:10,  3.04it/s]  3%|▎         | 7/221 [00:02<01:03,  3.39it/s]  4%|▎         | 8/221 [00:02<01:00,  3.49it/s]  4%|▍         | 9/221 [00:03<01:32,  2.30it/s]  5%|▍         | 10/221 [00:04<01:31,  2.30it/s]  5%|▍         | 11/221 [00:04<01:44,  2.01it/s]  5%|▌         | 12/221 [00:05<01:35,  2.20it/s]  6%|▌         | 13/221 [00:05<01:52,  1.85it/s]  6%|▋         | 14/221 [00:06<01:34,  2.19it/s]  7%|▋         | 15/221 [00:06<01:27,  2.35it/s]  7%|▋         | 16/221 [00:06<01:18,  2.63it/s]  8%|▊         | 17/221 [00:07<01:29,  2.27it/s]  8%|▊         | 18/221 [00:07<01:29,  2.27it/s]  9%|▊         | 19/221 [00:07<01:20,  2.50it/s]  9%|▉         | 20/221 [00:08<01:34,  2.13it/s] 10%|▉         | 21/221 [00:08<01:27,  2.28it/s] 10%|▉         | 22/221 [00:09<01:27,  2.26it/s] 10%|█         | 23/221 [00:09<01:13,  2.68it/s] 11%|█         | 24/221 [00:09<01:08,  2.86it/s] 11%|█▏        | 25/221 [00:10<01:03,  3.11it/s] 12%|█▏        | 26/221 [00:10<00:55,  3.51it/s] 12%|█▏        | 27/221 [00:10<01:00,  3.21it/s][h264 @ 0x555f33cb0240] mmco: unref short failure
[h264 @ 0x555f33cb0240] mmco: unref short failure
 13%|█▎        | 28/221 [00:11<01:02,  3.08it/s] 13%|█▎        | 29/221 [00:11<01:21,  2.36it/s] 14%|█▎        | 30/221 [00:12<01:08,  2.79it/s] 14%|█▍        | 31/221 [00:12<01:00,  3.15it/s] 14%|█▍        | 32/221 [00:12<01:04,  2.92it/s] 15%|█▍        | 33/221 [00:12<01:01,  3.04it/s] 15%|█▌        | 34/221 [00:13<01:04,  2.88it/s] 16%|█▌        | 35/221 [00:13<00:56,  3.29it/s] 16%|█▋        | 36/221 [00:13<00:59,  3.10it/s] 17%|█▋        | 37/221 [00:14<01:01,  3.01it/s] 17%|█▋        | 38/221 [00:14<00:55,  3.29it/s] 18%|█▊        | 39/221 [00:14<00:50,  3.64it/s][h264 @ 0x55d404ff2040] mmco: unref short failure
 18%|█▊        | 40/221 [00:15<00:54,  3.34it/s] 19%|█▊        | 41/221 [00:15<00:53,  3.39it/s] 19%|█▉        | 42/221 [00:15<00:48,  3.66it/s] 19%|█▉        | 43/221 [00:15<00:53,  3.35it/s][h264 @ 0x555f3977e900] mmco: unref short failure
[h264 @ 0x555f3977e900] mmco: unref short failure
[h264 @ 0x555f3977e900] mmco: unref short failure
[h264 @ 0x555f3977e900] mmco: unref short failure
 20%|█▉        | 44/221 [00:16<00:52,  3.39it/s] 20%|██        | 45/221 [00:17<01:19,  2.21it/s] 21%|██        | 46/221 [00:17<01:20,  2.18it/s] 21%|██▏       | 47/221 [00:17<01:06,  2.63it/s] 22%|██▏       | 48/221 [00:17<00:59,  2.92it/s] 22%|██▏       | 49/221 [00:18<00:51,  3.33it/s] 23%|██▎       | 50/221 [00:18<00:58,  2.90it/s] 23%|██▎       | 51/221 [00:18<00:52,  3.21it/s] 24%|██▎       | 52/221 [00:19<00:48,  3.48it/s] 24%|██▍       | 53/221 [00:19<01:01,  2.73it/s] 24%|██▍       | 54/221 [00:19<00:57,  2.91it/s] 25%|██▍       | 55/221 [00:20<00:53,  3.12it/s] 25%|██▌       | 56/221 [00:20<00:52,  3.14it/s] 26%|██▌       | 57/221 [00:20<01:00,  2.72it/s] 26%|██▌       | 58/221 [00:21<00:50,  3.22it/s] 27%|██▋       | 59/221 [00:21<00:48,  3.33it/s] 27%|██▋       | 60/221 [00:21<00:46,  3.49it/s] 28%|██▊       | 61/221 [00:22<00:51,  3.08it/s] 28%|██▊       | 62/221 [00:22<00:46,  3.44it/s] 29%|██▊       | 63/221 [00:22<00:47,  3.35it/s] 29%|██▉       | 64/221 [00:22<00:40,  3.83it/s][h264 @ 0x55928eeff380] mmco: unref short failure
[h264 @ 0x55928eeff380] mmco: unref short failure
[h264 @ 0x55928eeff380] mmco: unref short failure
[h264 @ 0x55928eeff380] mmco: unref short failure
 29%|██▉       | 65/221 [00:23<00:44,  3.53it/s] 30%|██▉       | 66/221 [00:23<00:47,  3.24it/s] 30%|███       | 67/221 [00:23<00:51,  2.99it/s] 31%|███       | 68/221 [00:24<00:54,  2.82it/s][h264 @ 0x55d4174e3940] mmco: unref short failure
[h264 @ 0x55d4174e3940] mmco: unref short failure
 31%|███       | 69/221 [00:25<01:16,  1.97it/s][h264 @ 0x555f2d1b12c0] mmco: unref short failure
 32%|███▏      | 70/221 [00:25<01:09,  2.17it/s] 32%|███▏      | 71/221 [00:25<01:10,  2.14it/s] 33%|███▎      | 72/221 [00:26<01:03,  2.36it/s] 33%|███▎      | 73/221 [00:26<00:56,  2.64it/s] 33%|███▎      | 74/221 [00:26<00:47,  3.08it/s] 34%|███▍      | 75/221 [00:27<00:49,  2.95it/s] 34%|███▍      | 76/221 [00:27<00:49,  2.96it/s] 35%|███▍      | 77/221 [00:27<00:43,  3.30it/s] 35%|███▌      | 78/221 [00:28<00:49,  2.91it/s] 36%|███▌      | 79/221 [00:28<00:45,  3.13it/s] 36%|███▌      | 80/221 [00:28<00:45,  3.12it/s] 37%|███▋      | 81/221 [00:28<00:41,  3.33it/s] 37%|███▋      | 82/221 [00:29<00:49,  2.81it/s] 38%|███▊      | 83/221 [00:29<00:46,  2.99it/s] 38%|███▊      | 84/221 [00:30<00:50,  2.73it/s] 38%|███▊      | 85/221 [00:30<00:53,  2.52it/s] 39%|███▉      | 86/221 [00:30<00:47,  2.85it/s] 39%|███▉      | 87/221 [00:31<00:53,  2.50it/s] 40%|███▉      | 88/221 [00:31<00:46,  2.84it/s] 40%|████      | 89/221 [00:32<00:55,  2.39it/s] 41%|████      | 90/221 [00:32<00:55,  2.37it/s] 41%|████      | 91/221 [00:32<00:44,  2.91it/s] 42%|████▏     | 92/221 [00:33<00:40,  3.22it/s] 42%|████▏     | 93/221 [00:33<00:48,  2.65it/s] 43%|████▎     | 94/221 [00:33<00:45,  2.82it/s][h264 @ 0x55928fedb880] mmco: unref short failure
[h264 @ 0x55928fedb880] mmco: unref short failure
 43%|████▎     | 95/221 [00:34<01:05,  1.91it/s][h264 @ 0x55928fedb880] mmco: unref short failure
[h264 @ 0x55928fedb880] mmco: unref short failure
 43%|████▎     | 96/221 [00:35<00:59,  2.11it/s] 44%|████▍     | 97/221 [00:35<01:03,  1.96it/s] 44%|████▍     | 98/221 [00:36<00:54,  2.26it/s] 45%|████▍     | 99/221 [00:36<00:50,  2.43it/s] 45%|████▌     | 100/221 [00:36<00:52,  2.30it/s] 46%|████▌     | 101/221 [00:37<00:46,  2.60it/s] 46%|████▌     | 102/221 [00:37<00:44,  2.67it/s] 47%|████▋     | 103/221 [00:37<00:38,  3.04it/s] 48%|████▊     | 105/221 [00:38<00:30,  3.82it/s] 48%|████▊     | 106/221 [00:38<00:36,  3.17it/s] 48%|████▊     | 107/221 [00:38<00:29,  3.84it/s] 49%|████▉     | 108/221 [00:38<00:24,  4.58it/s] 49%|████▉     | 109/221 [00:39<00:25,  4.44it/s] 50%|████▉     | 110/221 [00:39<00:28,  3.84it/s] 50%|█████     | 111/221 [00:39<00:30,  3.66it/s] 51%|█████     | 112/221 [00:40<00:36,  3.02it/s] 51%|█████     | 113/221 [00:40<00:36,  2.98it/s] 52%|█████▏    | 114/221 [00:40<00:30,  3.52it/s] 52%|█████▏    | 115/221 [00:40<00:24,  4.32it/s][h264 @ 0x555f27328d80] mmco: unref short failure
 52%|█████▏    | 116/221 [00:41<00:26,  3.93it/s] 53%|█████▎    | 117/221 [00:41<00:27,  3.79it/s][h264 @ 0x559f64fa8d40] mmco: unref short failure
[h264 @ 0x559f64fa8d40] mmco: unref short failure
 53%|█████▎    | 118/221 [00:41<00:27,  3.71it/s] 54%|█████▍    | 119/221 [00:42<00:33,  3.04it/s] 54%|█████▍    | 120/221 [00:42<00:38,  2.61it/s] 55%|█████▍    | 121/221 [00:43<00:39,  2.54it/s] 55%|█████▌    | 122/221 [00:43<00:45,  2.17it/s] 56%|█████▌    | 123/221 [00:43<00:38,  2.54it/s] 56%|█████▌    | 124/221 [00:44<00:45,  2.13it/s] 57%|█████▋    | 125/221 [00:45<00:50,  1.91it/s] 57%|█████▋    | 126/221 [00:45<00:44,  2.13it/s] 57%|█████▋    | 127/221 [00:45<00:40,  2.30it/s] 58%|█████▊    | 128/221 [00:46<00:37,  2.51it/s] 58%|█████▊    | 129/221 [00:46<00:30,  3.05it/s] 59%|█████▉    | 130/221 [00:46<00:28,  3.25it/s] 59%|█████▉    | 131/221 [00:46<00:24,  3.66it/s] 60%|█████▉    | 132/221 [00:47<00:31,  2.84it/s] 60%|██████    | 133/221 [00:47<00:37,  2.32it/s] 61%|██████    | 134/221 [00:48<00:35,  2.47it/s] 61%|██████    | 135/221 [00:48<00:30,  2.83it/s] 62%|██████▏   | 136/221 [00:48<00:31,  2.66it/s] 62%|██████▏   | 137/221 [00:49<00:30,  2.79it/s] 62%|██████▏   | 138/221 [00:49<00:30,  2.72it/s] 63%|██████▎   | 139/221 [00:50<00:48,  1.70it/s] 63%|██████▎   | 140/221 [00:51<00:40,  2.00it/s] 64%|██████▍   | 141/221 [00:51<00:38,  2.08it/s] 64%|██████▍   | 142/221 [00:52<00:38,  2.03it/s][h264 @ 0x55d40e3e60c0] mmco: unref short failure
 65%|██████▍   | 143/221 [00:52<00:36,  2.12it/s] 65%|██████▌   | 144/221 [00:52<00:33,  2.29it/s][h264 @ 0x55927e4fae40] mmco: unref short failure
[h264 @ 0x55927e4fae40] mmco: unref short failure
 66%|██████▌   | 145/221 [00:53<00:34,  2.20it/s] 66%|██████▌   | 146/221 [00:53<00:32,  2.34it/s] 67%|██████▋   | 147/221 [00:53<00:27,  2.66it/s] 67%|██████▋   | 148/221 [00:55<00:43,  1.69it/s] 67%|██████▋   | 149/221 [00:55<00:35,  2.03it/s] 68%|██████▊   | 150/221 [00:55<00:29,  2.37it/s] 68%|██████▊   | 151/221 [00:56<00:42,  1.64it/s] 69%|██████▉   | 152/221 [00:57<00:46,  1.49it/s] 69%|██████▉   | 153/221 [00:57<00:40,  1.69it/s] 70%|██████▉   | 154/221 [00:58<00:32,  2.06it/s] 70%|███████   | 155/221 [00:58<00:29,  2.25it/s] 71%|███████   | 156/221 [00:58<00:27,  2.39it/s] 71%|███████   | 157/221 [00:59<00:25,  2.55it/s] 71%|███████▏  | 158/221 [00:59<00:25,  2.48it/s] 72%|███████▏  | 159/221 [00:59<00:22,  2.71it/s] 72%|███████▏  | 160/221 [01:00<00:23,  2.58it/s] 73%|███████▎  | 161/221 [01:00<00:18,  3.17it/s] 73%|███████▎  | 162/221 [01:00<00:16,  3.62it/s] 74%|███████▍  | 163/221 [01:00<00:15,  3.72it/s] 74%|███████▍  | 164/221 [01:01<00:15,  3.66it/s] 75%|███████▍  | 165/221 [01:01<00:15,  3.69it/s] 75%|███████▌  | 166/221 [01:01<00:19,  2.80it/s][h264 @ 0x55928e0a89c0] mmco: unref short failure
 76%|███████▌  | 167/221 [01:02<00:17,  3.01it/s] 76%|███████▌  | 168/221 [01:02<00:18,  2.90it/s] 76%|███████▋  | 169/221 [01:02<00:14,  3.58it/s] 77%|███████▋  | 170/221 [01:03<00:18,  2.80it/s] 77%|███████▋  | 171/221 [01:03<00:19,  2.62it/s] 78%|███████▊  | 172/221 [01:03<00:16,  2.99it/s] 78%|███████▊  | 173/221 [01:04<00:16,  2.95it/s] 79%|███████▊  | 174/221 [01:04<00:17,  2.67it/s] 79%|███████▉  | 175/221 [01:05<00:17,  2.58it/s] 80%|███████▉  | 176/221 [01:05<00:15,  2.94it/s] 80%|████████  | 177/221 [01:05<00:12,  3.46it/s] 81%|████████  | 178/221 [01:06<00:18,  2.35it/s] 81%|████████  | 179/221 [01:06<00:16,  2.47it/s] 81%|████████▏ | 180/221 [01:06<00:13,  2.98it/s] 82%|████████▏ | 181/221 [01:07<00:14,  2.74it/s] 82%|████████▏ | 182/221 [01:07<00:11,  3.26it/s] 83%|████████▎ | 183/221 [01:07<00:11,  3.30it/s] 83%|████████▎ | 184/221 [01:08<00:12,  2.89it/s] 84%|████████▎ | 185/221 [01:08<00:13,  2.58it/s] 84%|████████▍ | 186/221 [01:09<00:16,  2.17it/s] 85%|████████▍ | 187/221 [01:09<00:12,  2.78it/s] 85%|████████▌ | 188/221 [01:09<00:10,  3.00it/s] 86%|████████▌ | 189/221 [01:09<00:09,  3.32it/s] 86%|████████▌ | 190/221 [01:10<00:10,  3.07it/s] 86%|████████▋ | 191/221 [01:10<00:08,  3.70it/s] 87%|████████▋ | 192/221 [01:10<00:08,  3.48it/s] 87%|████████▋ | 193/221 [01:11<00:09,  3.02it/s] 88%|████████▊ | 194/221 [01:11<00:09,  2.83it/s] 88%|████████▊ | 195/221 [01:11<00:08,  3.03it/s] 89%|████████▊ | 196/221 [01:12<00:10,  2.49it/s] 89%|████████▉ | 197/221 [01:12<00:08,  2.87it/s] 90%|████████▉ | 198/221 [01:12<00:07,  2.93it/s] 90%|█████████ | 199/221 [01:13<00:06,  3.41it/s] 90%|█████████ | 200/221 [01:13<00:05,  3.72it/s] 91%|█████████ | 201/221 [01:13<00:04,  4.38it/s] 91%|█████████▏| 202/221 [01:13<00:04,  4.31it/s] 92%|█████████▏| 203/221 [01:14<00:04,  3.78it/s][h264 @ 0x559f5b23ee00] mmco: unref short failure
 92%|█████████▏| 204/221 [01:14<00:05,  3.22it/s] 93%|█████████▎| 205/221 [01:14<00:04,  3.29it/s] 93%|█████████▎| 206/221 [01:15<00:04,  3.12it/s] 94%|█████████▎| 207/221 [01:15<00:05,  2.63it/s] 94%|█████████▍| 208/221 [01:15<00:04,  3.24it/s] 95%|█████████▍| 209/221 [01:16<00:03,  3.33it/s] 95%|█████████▌| 210/221 [01:16<00:03,  2.85it/s] 95%|█████████▌| 211/221 [01:17<00:03,  2.59it/s] 96%|█████████▌| 212/221 [01:17<00:03,  2.60it/s] 96%|█████████▋| 213/221 [01:17<00:02,  2.72it/s] 97%|█████████▋| 214/221 [01:18<00:03,  2.29it/s] 97%|█████████▋| 215/221 [01:18<00:02,  2.33it/s] 98%|█████████▊| 216/221 [01:19<00:02,  2.26it/s] 98%|█████████▊| 217/221 [01:19<00:01,  2.17it/s] 99%|█████████▊| 218/221 [01:20<00:01,  1.92it/s] 99%|█████████▉| 219/221 [01:20<00:01,  1.93it/s]100%|█████████▉| 220/221 [01:21<00:00,  2.19it/s]100%|██████████| 221/221 [01:21<00:00,  2.20it/s]100%|██████████| 221/221 [01:21<00:00,  2.71it/s]
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_forward========

09/16/2024 23:40:21 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/43.1/50.6', 'area_ravg': 39.3}
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_backard========

09/16/2024 23:40:21 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/64.7/75.1', 'forward_ravg': 57.7}
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video========

09/16/2024 23:40:21 - INFO - __main__ -   {'area_video_r1': 33.3, 'area_video_recall': '33.3/64.4/75.9', 'area_video_ravg': 57.8}
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itm_area========

09/16/2024 23:40:21 - INFO - __main__ -   {'area_video_r1': 47.2, 'area_video_recall': '47.2/66.7/72.6', 'area_video_ravg': 62.2, 'area_video_back_r1': 43.9, 'area_video_back_recall': '43.9/68.9/78.2', 'area_video_back_ravg': 63.7}
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itc_tva========

09/16/2024 23:40:21 - INFO - __main__ -   {'video_r1': 35.7, 'video_recall': '35.7/63.6/72.5', 'video_ravg': 57.3}
09/16/2024 23:40:21 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itm_tva========

09/16/2024 23:40:21 - INFO - __main__ -   {'video_r1': 49.3, 'video_recall': '49.3/70.8/80.0', 'video_ravg': 66.7}
  0%|          | 0/1455 [00:00<?, ?it/s][h264 @ 0x555f33cdd5c0] mmco: unref short failure
[h264 @ 0x55927eb224c0] mmco: unref short failure
[h264 @ 0x555f31c02e00] mmco: unref short failure
[h264 @ 0x55d410657600] mmco: unref short failure
[h264 @ 0x559f62d66e00] mmco: unref short failure
[h264 @ 0x559f62d66e00] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 1/1455 [00:21<8:47:32, 21.77s/it][h264 @ 0x55d404ff1dc0] mmco: unref short failure
[h264 @ 0x55d404ff1dc0] mmco: unref short failure
  0%|          | 2/1455 [00:30<5:43:12, 14.17s/it]  0%|          | 3/1455 [00:38<4:37:48, 11.48s/it][h264 @ 0x555f27bacc40] mmco: unref short failure
[h264 @ 0x555f27bacc40] mmco: unref short failure
  0%|          | 4/1455 [00:47<4:05:34, 10.15s/it][h264 @ 0x55929175fcc0] mmco: unref short failure
[h264 @ 0x55929175fcc0] mmco: unref short failure
[h264 @ 0x555f2aef4140] mmco: unref short failure
  0%|          | 5/1455 [00:55<3:50:53,  9.55s/it]  0%|          | 6/1455 [01:03<3:41:18,  9.16s/it][h264 @ 0x559f6fa4c600] mmco: unref short failure
[h264 @ 0x559f6fa4c600] mmco: unref short failure
[h264 @ 0x555f33d62540] mmco: unref short failure
  0%|          | 7/1455 [01:12<3:33:15,  8.84s/it][h264 @ 0x5592811c2d80] mmco: unref short failure
[h264 @ 0x559f6161e700] mmco: unref short failure
[h264 @ 0x559f6161e700] mmco: unref short failure
09/16/2024 23:41:41 - INFO - __main__ -   current idx IcQG8e_UOeA.24 from finetune_area returns wrong image/video, use 3769 instead.
[h264 @ 0x555f3ff12480] mmco: unref short failure
[h264 @ 0x555f3ff12480] mmco: unref short failure
[h264 @ 0x559295431300] mmco: unref short failure
[h264 @ 0x559f6a732600] mmco: unref short failure
[h264 @ 0x559f6a732600] mmco: unref short failure
[h264 @ 0x559f61255480] mmco: unref short failure
[h264 @ 0x559f5cbc9480] mmco: unref short failure
[h264 @ 0x559f5cbc9480] mmco: unref short failure
[h264 @ 0x5592828d9680] mmco: unref short failure
[h264 @ 0x559f5aecf240] mmco: unref short failure
[h264 @ 0x559f5aecf240] mmco: unref short failure
[h264 @ 0x559f5aecf240] mmco: unref short failure
[h264 @ 0x559f5aecf240] mmco: unref short failure
[h264 @ 0x55927f5c0800] mmco: unref short failure
  1%|          | 8/1455 [02:07<9:32:02, 23.72s/it][h264 @ 0x559f6ac409c0] mmco: unref short failure
[h264 @ 0x559f6ac409c0] mmco: unref short failure
[h264 @ 0x55927fdc6f00] mmco: unref short failure
[h264 @ 0x55927fdc6f00] mmco: unref short failure
[h264 @ 0x55929b42a4c0] mmco: unref short failure
  1%|          | 9/1455 [02:17<7:45:53, 19.33s/it][h264 @ 0x559290d9df40] mmco: unref short failure
  1%|          | 10/1455 [02:26<6:27:22, 16.08s/it][h264 @ 0x5592965dda00] mmco: unref short failure
[h264 @ 0x5592965dda00] mmco: unref short failure
[h264 @ 0x55d4114081c0] mmco: unref short failure
[h264 @ 0x559285e3c300] mmco: unref short failure
  1%|          | 11/1455 [02:35<5:34:34, 13.90s/it][h264 @ 0x5592878540c0] mmco: unref short failure
[h264 @ 0x5592878540c0] mmco: unref short failure
[h264 @ 0x55d41cf6ae00] mmco: unref short failure
[h264 @ 0x55d41cf6ae00] mmco: unref short failure
[h264 @ 0x55d41cf6ae00] mmco: unref short failure
[h264 @ 0x55d41cf6ae00] mmco: unref short failure
[h264 @ 0x559f5a27ccc0] mmco: unref short failure
[h264 @ 0x55d40a798d80] mmco: unref short failure
  1%|          | 12/1455 [02:43<4:55:40, 12.29s/it][h264 @ 0x555f3cd2ee40] mmco: unref short failure
[h264 @ 0x555f3cd2ee40] mmco: unref short failure
[h264 @ 0x559290dfdcc0] mmco: unref short failure
[h264 @ 0x559290dfdcc0] mmco: unref short failure
  1%|          | 13/1455 [02:52<4:32:46, 11.35s/it][h264 @ 0x55d407188080] mmco: unref short failure
[h264 @ 0x55d407188080] mmco: unref short failure
[h264 @ 0x559f69a59000] mmco: unref short failure
[h264 @ 0x559f69a59000] mmco: unref short failure
[h264 @ 0x555f2a482a00] mmco: unref short failure
  1%|          | 14/1455 [03:02<4:19:45, 10.82s/it][h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
[h264 @ 0x559f650226c0] mmco: unref short failure
  1%|          | 15/1455 [03:10<4:01:48, 10.08s/it]09/16/2024 23:43:35 - INFO - __main__ -   current idx fQszS3V8sxI.1 from finetune_area returns wrong image/video, use 61765 instead.
[h264 @ 0x559f5a2761c0] mmco: unref short failure
[h264 @ 0x559f5a2761c0] mmco: unref short failure
[h264 @ 0x559f6dab9880] mmco: unref short failure
[h264 @ 0x559f6dab9880] mmco: unref short failure
09/16/2024 23:43:46 - INFO - __main__ -   current idx gy0BKAObQyw.14 from finetune_area returns wrong image/video, use 107857 instead.
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x559f5aa43380] mmco: unref short failure
[h264 @ 0x555f37075280] mmco: unref short failure
[h264 @ 0x555f37075280] mmco: unref short failure
[h264 @ 0x55d410fef500] mmco: unref short failure
[h264 @ 0x555f29596980] mmco: unref short failure
[h264 @ 0x555f29596980] mmco: unref short failure
[h264 @ 0x555f3f5feb00] mmco: unref short failure
[h264 @ 0x555f3f5feb00] mmco: unref short failure
[h264 @ 0x55d40735f480] mmco: unref short failure
[h264 @ 0x55d40735f480] mmco: unref short failure
[h264 @ 0x555f2de728c0] mmco: unref short failure
[h264 @ 0x555f2de728c0] mmco: unref short failure
[h264 @ 0x559f6b547ac0] mmco: unref short failure
[h264 @ 0x559f6b547ac0] mmco: unref short failure
09/16/2024 23:44:54 - INFO - __main__ -   current idx HnCSd-QjKvs.136 from finetune_area returns wrong image/video, use 127420 instead.
[h264 @ 0x5592867af1c0] mmco: unref short failure
[h264 @ 0x5592867af1c0] mmco: unref short failure
09/16/2024 23:45:06 - INFO - __main__ -   current idx zpVEmyBr_Hg.14 from finetune_area returns wrong image/video, use 140438 instead.
[h264 @ 0x55927e2da900] mmco: unref short failure
[h264 @ 0x55927e2da900] mmco: unref short failure
[h264 @ 0x555f26ae1840] mmco: unref short failure
[h264 @ 0x555f26ae1840] mmco: unref short failure
[h264 @ 0x55928c603e40] mmco: unref short failure
[h264 @ 0x55928c603e40] mmco: unref short failure
[h264 @ 0x555f2cfba340] mmco: unref short failure
[h264 @ 0x5592859947c0] mmco: unref short failure
[h264 @ 0x5592859947c0] mmco: unref short failure
[h264 @ 0x55928f10de40] mmco: unref short failure
[h264 @ 0x55928f10de40] mmco: unref short failure
[h264 @ 0x55928ec9b180] mmco: unref short failure
[h264 @ 0x55928ec9b180] mmco: unref short failure
[h264 @ 0x559f77647540] mmco: unref short failure
[h264 @ 0x559f77647540] mmco: unref short failure
[h264 @ 0x559f77647540] mmco: unref short failure
[h264 @ 0x559f77647540] mmco: unref short failure
[h264 @ 0x559f77647540] mmco: unref short failure
[h264 @ 0x55d40f8cb980] mmco: unref short failure
[h264 @ 0x559f7c74fa80] mmco: unref short failure
[h264 @ 0x559f6a4d7480] mmco: unref short failure
[h264 @ 0x5592828e1540] mmco: unref short failure
[h264 @ 0x559293cfda40] mmco: unref short failure
[h264 @ 0x559293cfda40] mmco: unref short failure
[h264 @ 0x559293cfda40] mmco: unref short failure
[h264 @ 0x559293cfda40] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f29c47180] mmco: unref short failure
[h264 @ 0x555f2a3b3f80] mmco: unref short failure
[h264 @ 0x559291c5ad00] mmco: unref short failure
[h264 @ 0x559291c5ad00] mmco: unref short failure
[h264 @ 0x55928e0a4b00] mmco: unref short failure
[h264 @ 0x555f3fa3ffc0] mmco: unref short failure
[h264 @ 0x5592969cc6c0] mmco: unref short failure
09/16/2024 23:47:07 - INFO - __main__ -   current idx bcmbKN1aIOU.40 from finetune_area returns wrong image/video, use 14244 instead.
[h264 @ 0x559f775ad700] mmco: unref short failure
[h264 @ 0x559f775ad700] mmco: unref short failure
[h264 @ 0x559f775ad700] mmco: unref short failure
[h264 @ 0x559f775ad700] mmco: unref short failure
[h264 @ 0x555f398f9600] mmco: unref short failure
[h264 @ 0x555f398f9600] mmco: unref short failure
  1%|          | 16/1455 [06:54<29:45:39, 74.45s/it]  1%|          | 17/1455 [07:04<21:57:52, 54.99s/it]  1%|          | 18/1455 [07:13<16:25:21, 41.14s/it][h264 @ 0x555f3a4f1c40] mmco: unref short failure
[h264 @ 0x555f3a4f1c40] mmco: unref short failure
[h264 @ 0x55d417556ac0] mmco: unref short failure
[h264 @ 0x559f6203ab00] mmco: unref short failure
  1%|▏         | 19/1455 [07:23<12:40:41, 31.78s/it][h264 @ 0x559f62b16040] mmco: unref short failure
  1%|▏         | 20/1455 [07:32<9:54:13, 24.85s/it] [h264 @ 0x55d41fa1f500] mmco: unref short failure
[h264 @ 0x55d41fa1f500] mmco: unref short failure
[h264 @ 0x55d41fa1f500] mmco: unref short failure
[h264 @ 0x55d41fa1f500] mmco: unref short failure
[h264 @ 0x55d41fa1f500] mmco: unref short failure
  1%|▏         | 21/1455 [07:41<8:01:00, 20.13s/it][h264 @ 0x55d4114d5600] mmco: unref short failure
[h264 @ 0x55d4114d5600] mmco: unref short failure
[h264 @ 0x55d4114d5600] mmco: unref short failure
[h264 @ 0x55d4114d5600] mmco: unref short failure
  2%|▏         | 22/1455 [07:49<6:38:31, 16.69s/it]  2%|▏         | 23/1455 [07:58<5:40:47, 14.28s/it][h264 @ 0x55929c6aa940] mmco: unref short failure
[h264 @ 0x555f3e3e4300] mmco: unref short failure
[h264 @ 0x555f40012880] mmco: unref short failure
[h264 @ 0x555f40012880] mmco: unref short failure
[h264 @ 0x555f40012880] mmco: unref short failure
[h264 @ 0x555f40012880] mmco: unref short failure
[h264 @ 0x55d40e1c1c40] mmco: unref short failure
[h264 @ 0x55d40e1c1c40] mmco: unref short failure
[h264 @ 0x555f27b73700] mmco: unref short failure
09/16/2024 23:49:21 - INFO - __main__ -   current idx 3_mqkjCXK8E.83 from finetune_area returns wrong image/video, use 79675 instead.
[h264 @ 0x559f72839240] mmco: unref short failure
[h264 @ 0x559f72839240] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x559f64066b80] mmco: unref short failure
[h264 @ 0x55928e7232c0] mmco: unref short failure
[h264 @ 0x555f2bfb41c0] mmco: unref short failure
[h264 @ 0x555f2bfb41c0] mmco: unref short failure
[h264 @ 0x55d419dc1b00] mmco: unref short failure
[h264 @ 0x55d419dc1b00] mmco: unref short failure
[h264 @ 0x55927e7bb040] mmco: unref short failure
[h264 @ 0x559f6084b500] mmco: unref short failure
[h264 @ 0x559f6084b500] mmco: unref short failure
[h264 @ 0x55d41a812e40] mmco: unref short failure
[h264 @ 0x55d41a812e40] mmco: unref short failure
[h264 @ 0x559285c93600] mmco: unref short failure
[h264 @ 0x555f2ab08980] mmco: unref short failure
[h264 @ 0x555f2ab08980] mmco: unref short failure
[h264 @ 0x559f6dd88900] mmco: unref short failure
[h264 @ 0x55927e7b2e80] mmco: unref short failure
[h264 @ 0x555f4c419300] mmco: unref short failure
[h264 @ 0x555f4c4215c0] mmco: unref short failure
[h264 @ 0x555f4c4215c0] mmco: unref short failure
[h264 @ 0x555f4bff24c0] mmco: unref short failure
[h264 @ 0x555f4bff24c0] mmco: unref short failure
[h264 @ 0x559f728bfd00] mmco: unref short failure
[h264 @ 0x559f728bfd00] mmco: unref short failure
[h264 @ 0x559285c93800] mmco: unref short failure
[h264 @ 0x555f48085640] mmco: unref short failure
[h264 @ 0x555f48085640] mmco: unref short failure
[h264 @ 0x55d41f3a1a40] mmco: unref short failure
[h264 @ 0x55d41f3a1a40] mmco: unref short failure
[h264 @ 0x55d417573740] mmco: unref short failure
[h264 @ 0x55d425b72280] mmco: unref short failure
[h264 @ 0x55d419ed8940] mmco: unref short failure
[h264 @ 0x55d419ed8940] mmco: unref short failure
[h264 @ 0x559f69313500] mmco: unref short failure
[h264 @ 0x5592969b8080] mmco: unref short failure
[h264 @ 0x5592969b8080] mmco: unref short failure
[h264 @ 0x559f66797300] mmco: unref short failure
[h264 @ 0x559f66797300] mmco: unref short failure
[h264 @ 0x555f40e561c0] mmco: unref short failure
[h264 @ 0x555f40e561c0] mmco: unref short failure
[h264 @ 0x555f27b73b80] mmco: unref short failure
[h264 @ 0x55928e3b27c0] mmco: unref short failure
[h264 @ 0x55929126e380] mmco: unref short failure
[h264 @ 0x55929126e380] mmco: unref short failure
[h264 @ 0x55929126e380] mmco: unref short failure
[h264 @ 0x55929126e380] mmco: unref short failure
  2%|▏         | 24/1455 [11:45<30:59:24, 77.96s/it][h264 @ 0x555f34e49140] mmco: unref short failure
[h264 @ 0x555f34e49140] mmco: unref short failure
[h264 @ 0x55929e4b9a00] mmco: unref short failure
[h264 @ 0x55929e4b9a00] mmco: unref short failure
[h264 @ 0x559f6d349ec0] mmco: unref short failure
[h264 @ 0x559f6d349ec0] mmco: unref short failure
  2%|▏         | 25/1455 [11:54<22:47:54, 57.39s/it][h264 @ 0x559298a3ad80] mmco: unref short failure
  2%|▏         | 26/1455 [12:02<16:57:40, 42.73s/it]  2%|▏         | 27/1455 [12:11<12:54:34, 32.55s/it][h264 @ 0x55d41599bf40] mmco: unref short failure
[h264 @ 0x55d41599bf40] mmco: unref short failure
  2%|▏         | 28/1455 [12:20<10:03:21, 25.37s/it][h264 @ 0x555f436a7f40] mmco: unref short failure
[h264 @ 0x55d413ff5440] mmco: unref short failure
[h264 @ 0x55d40926f380] mmco: unref short failure
  2%|▏         | 29/1455 [12:30<8:12:44, 20.73s/it] [h264 @ 0x555f4a933380] mmco: unref short failure
[h264 @ 0x555f4a933380] mmco: unref short failure
[h264 @ 0x555f4a933380] mmco: unref short failure
[h264 @ 0x559f5cbb1540] mmco: unref short failure
[h264 @ 0x559f5cbb1540] mmco: unref short failure
  2%|▏         | 30/1455 [12:39<6:49:09, 17.23s/it][h264 @ 0x559283a92880] mmco: unref short failure
[h264 @ 0x559283a92880] mmco: unref short failure
[h264 @ 0x555f2d58f140] mmco: unref short failure
  2%|▏         | 31/1455 [12:48<5:51:36, 14.82s/it]09/16/2024 23:53:12 - INFO - __main__ -   current idx 6mjP2GVtPHA.82 from finetune_area returns wrong image/video, use 54853 instead.
[h264 @ 0x55929bdc2380] mmco: unref short failure
[h264 @ 0x55929bdc2380] mmco: unref short failure
[h264 @ 0x55929bdc2380] mmco: unref short failure
[h264 @ 0x55d407187540] mmco: unref short failure
[h264 @ 0x559f5a008b00] mmco: unref short failure
[h264 @ 0x55d4194e37c0] mmco: unref short failure
[h264 @ 0x55d4194e37c0] mmco: unref short failure
[h264 @ 0x555f32db34c0] mmco: unref short failure
09/16/2024 23:53:43 - INFO - __main__ -   current idx LGB6ZEjGm7Q.29 from finetune_area returns wrong image/video, use 126679 instead.
[h264 @ 0x5592937d6000] mmco: unref short failure
[h264 @ 0x5592937d6000] mmco: unref short failure
[h264 @ 0x555f46126640] mmco: unref short failure
[h264 @ 0x559f7c73f0c0] mmco: unref short failure
[h264 @ 0x559f7d6c0040] mmco: unref short failure
[h264 @ 0x559f7d6c0040] mmco: unref short failure
[h264 @ 0x5592837b1f00] mmco: unref short failure
[h264 @ 0x559293415480] mmco: unref short failure
[h264 @ 0x559293415480] mmco: unref short failure
09/16/2024 23:54:15 - INFO - __main__ -   current idx Lzt-UMekcLY.51 from finetune_area returns wrong image/video, use 16286 instead.
[h264 @ 0x555f4720dcc0] mmco: unref short failure
[h264 @ 0x5592991ed0c0] mmco: unref short failure
[h264 @ 0x5592991ed0c0] mmco: unref short failure
[h264 @ 0x559f6155e980] mmco: unref short failure
[h264 @ 0x559f60b8e7c0] mmco: unref short failure
[h264 @ 0x559f62cedb00] mmco: unref short failure
[h264 @ 0x55d41de189c0] mmco: unref short failure
[h264 @ 0x55d41de189c0] mmco: unref short failure
[h264 @ 0x55d419494680] mmco: unref short failure
[h264 @ 0x55d419494680] mmco: unref short failure
[h264 @ 0x559f77ce5480] mmco: unref short failure
[h264 @ 0x559f61341940] mmco: unref short failure
[h264 @ 0x559f61341940] mmco: unref short failure
[h264 @ 0x55d41fc68b80] mmco: unref short failure
[h264 @ 0x55d41fc68b80] mmco: unref short failure
[h264 @ 0x55d41fc68b80] mmco: unref short failure
[h264 @ 0x55d41fc68b80] mmco: unref short failure
[h264 @ 0x555f33434d00] mmco: unref short failure
[h264 @ 0x559281645140] mmco: unref short failure
09/16/2024 23:55:46 - INFO - __main__ -   current idx DnpQpBpq4-8.30 from finetune_area returns wrong image/video, use 135460 instead.
[h264 @ 0x559f746bd700] mmco: unref short failure
[h264 @ 0x559f746bd700] mmco: unref short failure
[h264 @ 0x55d40e6e9b40] mmco: unref short failure
[h264 @ 0x55d423f03200] mmco: unref short failure
[h264 @ 0x559f712aee80] mmco: unref short failure
[h264 @ 0x559f712aee80] mmco: unref short failure
[h264 @ 0x559f712aee80] mmco: unref short failure
[h264 @ 0x559f712aee80] mmco: unref short failure
[h264 @ 0x559f712aee80] mmco: unref short failure
[h264 @ 0x559293102c40] mmco: unref short failure
[h264 @ 0x55927ec2f040] mmco: unref short failure
[h264 @ 0x55927ec2f040] mmco: unref short failure
[h264 @ 0x55d418191d80] mmco: unref short failure
[h264 @ 0x55d418191d80] mmco: unref short failure
09/16/2024 23:56:29 - INFO - __main__ -   current idx AqyH6qo2WI0.9 from finetune_area returns wrong image/video, use 69952 instead.
[h264 @ 0x555f335f5640] mmco: unref short failure
09/16/2024 23:56:33 - INFO - __main__ -   current idx Yn3caOZk6dk.38 from finetune_area returns wrong image/video, use 138302 instead.
[mov,mp4,m4a,3gp,3g2,mj2 @ 0x559f80e11a80] moov atom not found
[h264 @ 0x55d4274a4740] mmco: unref short failure
[h264 @ 0x55d4274a4740] mmco: unref short failure
[h264 @ 0x559293e35f00] mmco: unref short failure
  2%|▏         | 32/1455 [16:33<30:46:19, 77.85s/it][h264 @ 0x555f28620a00] mmco: unref short failure
[h264 @ 0x555f28620a00] mmco: unref short failure
[h264 @ 0x555f28620a00] mmco: unref short failure
[h264 @ 0x5592987b8c00] mmco: unref short failure
[h264 @ 0x55d42b346580] mmco: unref short failure
[h264 @ 0x55d42b346580] mmco: unref short failure
  2%|▏         | 33/1455 [16:47<23:09:52, 58.64s/it]  2%|▏         | 34/1455 [16:56<17:16:53, 43.78s/it][h264 @ 0x55d4115aaec0] mmco: unref short failure
[h264 @ 0x559280cded00] mmco: unref short failure
  2%|▏         | 35/1455 [17:04<13:06:02, 33.21s/it][h264 @ 0x555f45b7e240] mmco: unref short failure
[h264 @ 0x555f45b7e240] mmco: unref short failure
  2%|▏         | 36/1455 [17:13<10:10:03, 25.80s/it][h264 @ 0x55d41655f000] mmco: unref short failure
[h264 @ 0x5592a30d03c0] mmco: unref short failure
[h264 @ 0x5592a30d03c0] mmco: unref short failure
  3%|▎         | 37/1455 [17:22<8:08:48, 20.68s/it]   3%|▎         | 38/1455 [17:31<6:48:11, 17.28s/it][h264 @ 0x559f6b6d4c00] mmco: unref short failure
[h264 @ 0x55d42d100500] mmco: unref short failure
[h264 @ 0x55d42d100500] mmco: unref short failure
  3%|▎         | 39/1455 [17:40<5:47:23, 14.72s/it][h264 @ 0x5592842aec40] mmco: unref short failure
[h264 @ 0x5592842aec40] mmco: unref short failure
[h264 @ 0x5592842aec40] mmco: unref short failure
09/16/2024 23:58:03 - INFO - __main__ -   current idx 1cJZfRW1WbY.33 from finetune_area returns wrong image/video, use 67963 instead.
[h264 @ 0x555f4abf3840] mmco: unref short failure
[h264 @ 0x555f4abf3840] mmco: unref short failure
[h264 @ 0x555f4abf3840] mmco: unref short failure
[h264 @ 0x555f4abf3840] mmco: unref short failure
[h264 @ 0x55d427e9d300] mmco: unref short failure
[h264 @ 0x55d427e9d300] mmco: unref short failure
[h264 @ 0x555f484e6c00] mmco: unref short failure
[h264 @ 0x555f484e6c00] mmco: unref short failure
[h264 @ 0x559f7a8bb0c0] mmco: unref short failure
[h264 @ 0x55d42d4be4c0] mmco: unref short failure
[h264 @ 0x55d42d4be4c0] mmco: unref short failure
[h264 @ 0x555f26856cc0] mmco: unref short failure
[h264 @ 0x555f3973d5c0] mmco: unref short failure
[h264 @ 0x559f7c0d3900] mmco: unref short failure
[h264 @ 0x559f7c0d3900] mmco: unref short failure
[h264 @ 0x559f7c0d3900] mmco: unref short failure
[h264 @ 0x555f3aa98ac0] mmco: unref short failure
[h264 @ 0x55d4143b1100] mmco: unref short failure
[h264 @ 0x55d4143b1100] mmco: unref short failure
09/16/2024 23:58:40 - INFO - __main__ -   current idx bhKtsohT-Xg.14 from finetune_area returns wrong image/video, use 147006 instead.
[h264 @ 0x55928ff5d3c0] mmco: unref short failure
[h264 @ 0x55928ff5d3c0] mmco: unref short failure
[h264 @ 0x5592a7b67900] mmco: unref short failure
[h264 @ 0x5592a7b67900] mmco: unref short failure
09/16/2024 23:58:58 - INFO - __main__ -   current idx cLYenAzoWwo.8 from finetune_area returns wrong image/video, use 21051 instead.
[h264 @ 0x559f6fece480] mmco: unref short failure
[h264 @ 0x559f78831e40] mmco: unref short failure
[h264 @ 0x559f71004b80] mmco: unref short failure
[h264 @ 0x559f71004b80] mmco: unref short failure
[h264 @ 0x55d410ae7140] mmco: unref short failure
[h264 @ 0x55d4202dc3c0] mmco: unref short failure
[h264 @ 0x55d4202dc3c0] mmco: unref short failure
[h264 @ 0x555f2fb4b240] mmco: unref short failure
[h264 @ 0x555f2fb4b240] mmco: unref short failure
[h264 @ 0x559f60377740] mmco: unref short failure
09/16/2024 23:59:54 - INFO - __main__ -   current idx UGjfq2kyBqs.34 from finetune_area returns wrong image/video, use 32223 instead.
[h264 @ 0x559288288680] mmco: unref short failure
[h264 @ 0x55d407c84980] mmco: unref short failure
[h264 @ 0x55d407c84980] mmco: unref short failure
[h264 @ 0x559290a07dc0] mmco: unref short failure
[h264 @ 0x559290a07dc0] mmco: unref short failure
[h264 @ 0x559290a07dc0] mmco: unref short failure
[h264 @ 0x55d414000100] mmco: unref short failure
[h264 @ 0x555f34d8bac0] mmco: unref short failure
[h264 @ 0x555f34d8bac0] mmco: unref short failure
[h264 @ 0x55929c7eb8c0] mmco: unref short failure
[h264 @ 0x55929c7eb8c0] mmco: unref short failure
[h264 @ 0x555f2e9b1a00] mmco: unref short failure
[h264 @ 0x5592ae7e6f00] mmco: unref short failure
[h264 @ 0x5592ae7e6f00] mmco: unref short failure
[h264 @ 0x559292d0bc40] mmco: unref short failure
[h264 @ 0x559f73793100] mmco: unref short failure
[h264 @ 0x559f73793100] mmco: unref short failure
[h264 @ 0x5592a3835440] mmco: unref short failure
[h264 @ 0x559f8030a7c0] mmco: unref short failure
[h264 @ 0x559f8030a7c0] mmco: unref short failure
[h264 @ 0x55d4202dbb00] mmco: unref short failure
09/17/2024 00:01:47 - INFO - __main__ -   current idx dYEsNlBENWc.3 from finetune_area returns wrong image/video, use 127317 instead.
[h264 @ 0x5592a30659c0] mmco: unref short failure
[h264 @ 0x5592a30659c0] mmco: unref short failure
  3%|▎         | 40/1455 [21:32<31:26:36, 80.00s/it][h264 @ 0x5592a73f1140] mmco: unref short failure
  3%|▎         | 41/1455 [21:41<23:01:25, 58.62s/it][h264 @ 0x55d40da93040] mmco: unref short failure
[h264 @ 0x55d40da93040] mmco: unref short failure
[h264 @ 0x5592ab80e040] mmco: unref short failure
[h264 @ 0x5592ab80e040] mmco: unref short failure
[h264 @ 0x5592ab80e040] mmco: unref short failure
[h264 @ 0x5592ab80e040] mmco: unref short failure
[h264 @ 0x555f51387180] mmco: unref short failure
[h264 @ 0x555f51387180] mmco: unref short failure
[h264 @ 0x55d407024c80] mmco: unref short failure
[h264 @ 0x55d407024c80] mmco: unref short failure
[h264 @ 0x55d407024c80] mmco: unref short failure
[h264 @ 0x55d407024c80] mmco: unref short failure
  3%|▎         | 42/1455 [21:54<17:42:22, 45.11s/it][h264 @ 0x55d4252376c0] mmco: unref short failure
[h264 @ 0x55d4252376c0] mmco: unref short failure
[h264 @ 0x555f46d9cc00] mmco: unref short failure
[h264 @ 0x555f3a9da5c0] mmco: unref short failure
[h264 @ 0x555f3a9da5c0] mmco: unref short failure
  3%|▎         | 43/1455 [22:03<13:24:35, 34.19s/it][h264 @ 0x55929a21d800] mmco: unref short failure
  3%|▎         | 44/1455 [22:11<10:21:32, 26.43s/it]  3%|▎         | 45/1455 [22:20<8:14:05, 21.03s/it] [h264 @ 0x55929e3f9f40] mmco: unref short failure
[h264 @ 0x55929e3f9f40] mmco: unref short failure
[h264 @ 0x559f84ae2e40] mmco: unref short failure
[h264 @ 0x5592a30657c0] mmco: unref short failure
[h264 @ 0x5592a30657c0] mmco: unref short failure
  3%|▎         | 46/1455 [22:29<6:46:26, 17.31s/it][h264 @ 0x559f8c1f3100] mmco: unref short failure
[h264 @ 0x559f8c1f3100] mmco: unref short failure
  3%|▎         | 47/1455 [22:37<5:47:06, 14.79s/it][h264 @ 0x5592a0db7e40] mmco: unref short failure
[h264 @ 0x5592a0db7e40] mmco: unref short failure
[h264 @ 0x5592a0db7e40] mmco: unref short failure
[h264 @ 0x5592a0db7e40] mmco: unref short failure
[h264 @ 0x5592a9594b80] mmco: unref short failure
[h264 @ 0x5592a9594b80] mmco: unref short failure
[h264 @ 0x555f3f6df140] mmco: unref short failure
[h264 @ 0x555f3f6df140] mmco: unref short failure
[h264 @ 0x559f6f2b4600] mmco: unref short failure
[h264 @ 0x559f6f2b4600] mmco: unref short failure
[h264 @ 0x559f6f2b4600] mmco: unref short failure
[h264 @ 0x559f6f2b4600] mmco: unref short failure
[h264 @ 0x555f2866a000] mmco: unref short failure
[h264 @ 0x555f48cfaf40] mmco: unref short failure
[h264 @ 0x555f48cfaf40] mmco: unref short failure
[h264 @ 0x559f5f7ba080] mmco: unref short failure
[h264 @ 0x559f5f7ba080] mmco: unref short failure
[h264 @ 0x559f5f7ba080] mmco: unref short failure
[h264 @ 0x559f5f7ba080] mmco: unref short failure
[h264 @ 0x559f79bd8180] mmco: unref short failure
[h264 @ 0x559f5fd33340] mmco: unref short failure
[h264 @ 0x559f5fd33340] mmco: unref short failure
[h264 @ 0x559f6c6d8980] mmco: unref short failure
[h264 @ 0x559f7f143f40] mmco: unref short failure
[h264 @ 0x559f7f143f40] mmco: unref short failure
[h264 @ 0x559f7f143f40] mmco: unref short failure
[h264 @ 0x559f7f143f40] mmco: unref short failure
[h264 @ 0x55d402c7a300] mmco: unref short failure
[h264 @ 0x55d402c7a300] mmco: unref short failure
[h264 @ 0x5592a2a407c0] mmco: unref short failure
[h264 @ 0x559f598a6e80] mmco: unref short failure
[h264 @ 0x555f4e183e40] mmco: unref short failure
[h264 @ 0x555f4e183e40] mmco: unref short failure
[h264 @ 0x555f4e183e40] mmco: unref short failure
[h264 @ 0x555f4e183e40] mmco: unref short failure
[h264 @ 0x555f44f0a7c0] mmco: unref short failure
[h264 @ 0x555f44f0a7c0] mmco: unref short failure
[h264 @ 0x5592a64bda00] mmco: unref short failure
[h264 @ 0x5592a64bda00] mmco: unref short failure
[h264 @ 0x555f4fe8ed80] mmco: unref short failure
[h264 @ 0x555f4fe8ed80] mmco: unref short failure
[h264 @ 0x555f4f51efc0] mmco: unref short failure
[h264 @ 0x555f4f51efc0] mmco: unref short failure
[h264 @ 0x555f4f51efc0] mmco: unref short failure
[h264 @ 0x555f4f51efc0] mmco: unref short failure
[h264 @ 0x559f6717c940] mmco: unref short failure
[h264 @ 0x559f6717c940] mmco: unref short failure
not have audios GAwav3sZcGw.4
[h264 @ 0x5592982c8dc0] mmco: unref short failure
[h264 @ 0x5592982c8dc0] mmco: unref short failure
[h264 @ 0x559f8237aa40] mmco: unref short failure
[h264 @ 0x555f43128e00] mmco: unref short failure
[h264 @ 0x555f43128e00] mmco: unref short failure
[h264 @ 0x559281ccdf80] mmco: unref short failure
[h264 @ 0x559281ccdf80] mmco: unref short failure
[h264 @ 0x55d41fe0bfc0] mmco: unref short failure
[h264 @ 0x55d41fe0bfc0] mmco: unref short failure
[h264 @ 0x55d41fe0bfc0] mmco: unref short failure
[h264 @ 0x55d41fe0bfc0] mmco: unref short failure
[h264 @ 0x559f7d488340] mmco: unref short failure
[h264 @ 0x559f7d488340] mmco: unref short failure
[h264 @ 0x559f6a7a7100] mmco: unref short failure
[h264 @ 0x559f6a7a7100] mmco: unref short failure
[h264 @ 0x559f6a7a7100] mmco: unref short failure
[h264 @ 0x555f4225e9c0] mmco: unref short failure
[h264 @ 0x559f670d0c40] mmco: unref short failure
09/17/2024 00:05:31 - INFO - __main__ -   current idx NK2f7abMxq4.56 from finetune_area returns wrong image/video, use 19733 instead.
[h264 @ 0x555f28adae00] mmco: unref short failure
[h264 @ 0x555f28adae00] mmco: unref short failure
09/17/2024 00:05:34 - INFO - __main__ -   current idx JRTVXn0PfXQ.11 from finetune_area returns wrong image/video, use 90278 instead.
[h264 @ 0x559285430f80] mmco: unref short failure
[h264 @ 0x559f5c125800] mmco: unref short failure
[h264 @ 0x559f82c12ec0] mmco: unref short failure
[h264 @ 0x559f82c12ec0] mmco: unref short failure
[h264 @ 0x559f6fa73bc0] mmco: unref short failure
[h264 @ 0x55d40c49cc40] mmco: unref short failure
[h264 @ 0x55d40c49cc40] mmco: unref short failure
[h264 @ 0x559f66efee00] mmco: unref short failure
[h264 @ 0x559f66efee00] mmco: unref short failure
[h264 @ 0x55d417e07040] mmco: unref short failure
[h264 @ 0x559f6930fb00] mmco: unref short failure
[h264 @ 0x559f6930fb00] mmco: unref short failure
[h264 @ 0x555f28609800] mmco: unref short failure
[h264 @ 0x555f28609800] mmco: unref short failure
[h264 @ 0x555f2c154b40] mmco: unref short failure
[h264 @ 0x555f2c154b40] mmco: unref short failure
09/17/2024 00:06:22 - INFO - __main__ -   current idx AXNTPfihw4Y.36 from finetune_area returns wrong image/video, use 110024 instead.
[h264 @ 0x555f45148500] mmco: unref short failure
[h264 @ 0x555f45148500] mmco: unref short failure
[h264 @ 0x559f857212c0] mmco: unref short failure
09/17/2024 00:06:28 - INFO - __main__ -   current idx fGbJT-U6ymc.18 from finetune_area returns wrong image/video, use 132525 instead.
  3%|▎         | 48/1455 [26:08<28:43:27, 73.49s/it][h264 @ 0x559f73a7ff80] mmco: unref short failure
[h264 @ 0x559f73a7ff80] mmco: unref short failure
[h264 @ 0x559286bc1580] mmco: unref short failure
[h264 @ 0x559f69b78f00] mmco: unref short failure
[h264 @ 0x559f69b78f00] mmco: unref short failure
  3%|▎         | 49/1455 [26:24<21:58:06, 56.25s/it]09/17/2024 00:06:46 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 00:06:46 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x555f564149c0] mmco: unref short failure
[h264 @ 0x555f564149c0] mmco: unref short failure
[h264 @ 0x555f564149c0] mmco: unref short failure
[h264 @ 0x555f564149c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d42534f5c0] mmco: unref short failure
[h264 @ 0x55d42534f5c0] mmco: unref short failure
[h264 @ 0x55d42534f5c0] mmco: unref short failure
[h264 @ 0x55d42534f5c0] mmco: unref short failure
[h264 @ 0x559f8320ef00] mmco: unref short failure
[h264 @ 0x559f8320ef00] mmco: unref short failure
[h264 @ 0x555f47d6d900] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d435a4e9c0] mmco: unref short failure
[h264 @ 0x55d40df88900] mmco: unref short failure
[h264 @ 0x5592aa4faac0] mmco: unref short failure
[h264 @ 0x5592aa4faac0] mmco: unref short failure
[h264 @ 0x55d421e512c0] mmco: unref short failure
[h264 @ 0x555f33bf0e80] mmco: unref short failure
[h264 @ 0x555f4d3c0ac0] mmco: unref short failure
[h264 @ 0x555f4d3c0ac0] mmco: unref short failure
[h264 @ 0x559f61442f00] mmco: unref short failure
[h264 @ 0x559f61442f00] mmco: unref short failure
[h264 @ 0x559f87892940] mmco: unref short failure
[h264 @ 0x555f4a9a11c0] mmco: unref short failure
[h264 @ 0x55d41fe0bdc0] mmco: unref short failure
[h264 @ 0x55d41fe0bdc0] mmco: unref short failure
[h264 @ 0x55d41fe0bdc0] mmco: unref short failure
[h264 @ 0x55d42ffe4340] mmco: unref short failure
[h264 @ 0x55d42ffe4340] mmco: unref short failure
[h264 @ 0x555f57d36400] mmco: unref short failure
[h264 @ 0x555f57d36400] mmco: unref short failure
[h264 @ 0x555f272e0700] mmco: unref short failure
[h264 @ 0x555f272e0700] mmco: unref short failure
09/17/2024 00:09:00 - INFO - __main__ -   current idx M28z2aVJm9M.7 from finetune_area returns wrong image/video, use 58707 instead.
[h264 @ 0x559294f92ac0] mmco: unref short failure
[h264 @ 0x555f47373e00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:34,  6.46it/s][A[h264 @ 0x555f51a52e40] mmco: unref short failure
[h264 @ 0x555f51a52e40] mmco: unref short failure

  1%|          | 2/221 [00:00<01:08,  3.18it/s][A
  1%|▏         | 3/221 [00:00<01:17,  2.83it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.75it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.64it/s][A
  3%|▎         | 6/221 [00:01<00:38,  5.57it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.15it/s][A
  4%|▎         | 8/221 [00:01<00:45,  4.71it/s][A
  4%|▍         | 9/221 [00:01<00:42,  5.01it/s][A
  5%|▍         | 10/221 [00:02<00:37,  5.67it/s][A
  5%|▍         | 11/221 [00:02<00:39,  5.34it/s][A
  5%|▌         | 12/221 [00:02<01:01,  3.39it/s][A
  6%|▌         | 13/221 [00:03<00:50,  4.09it/s][A
  6%|▋         | 14/221 [00:03<00:45,  4.55it/s][A
  7%|▋         | 15/221 [00:03<00:42,  4.81it/s][A
  7%|▋         | 16/221 [00:03<00:49,  4.10it/s][A
  8%|▊         | 17/221 [00:04<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:04<01:02,  3.25it/s][A
  9%|▊         | 19/221 [00:04<00:58,  3.47it/s][A
  9%|▉         | 20/221 [00:04<00:48,  4.14it/s][A
 10%|▉         | 21/221 [00:05<00:51,  3.92it/s][A
 10%|▉         | 22/221 [00:06<01:54,  1.73it/s][A
 10%|█         | 23/221 [00:06<01:27,  2.25it/s][A
 11%|█         | 24/221 [00:06<01:07,  2.91it/s][A
 11%|█▏        | 25/221 [00:06<01:00,  3.26it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:07<00:54,  3.53it/s][A
 13%|█▎        | 28/221 [00:07<01:00,  3.21it/s][A
 13%|█▎        | 29/221 [00:07<00:53,  3.60it/s][A
 14%|█▎        | 30/221 [00:08<00:44,  4.29it/s][A
 14%|█▍        | 31/221 [00:08<00:44,  4.30it/s][A
 15%|█▍        | 33/221 [00:08<00:34,  5.50it/s][A
 16%|█▌        | 35/221 [00:08<00:30,  6.10it/s][A
 16%|█▋        | 36/221 [00:08<00:28,  6.58it/s][A
 17%|█▋        | 37/221 [00:09<00:32,  5.63it/s][A
 17%|█▋        | 38/221 [00:09<00:39,  4.60it/s][A
 18%|█▊        | 39/221 [00:09<00:34,  5.21it/s][A
 18%|█▊        | 40/221 [00:09<00:32,  5.52it/s][A
 19%|█▊        | 41/221 [00:09<00:29,  6.19it/s][A
 19%|█▉        | 42/221 [00:10<00:41,  4.27it/s][A
 19%|█▉        | 43/221 [00:10<00:36,  4.82it/s][A
 20%|█▉        | 44/221 [00:10<00:31,  5.59it/s][A
 20%|██        | 45/221 [00:11<00:50,  3.51it/s][A
 21%|██        | 46/221 [00:11<00:51,  3.41it/s][A
 21%|██▏       | 47/221 [00:16<04:41,  1.62s/it][A
 22%|██▏       | 48/221 [00:16<03:27,  1.20s/it][A
 22%|██▏       | 49/221 [00:16<02:36,  1.10it/s][A
 23%|██▎       | 50/221 [00:16<01:56,  1.47it/s][A
 23%|██▎       | 51/221 [00:16<01:28,  1.92it/s][A
 24%|██▎       | 52/221 [00:17<01:11,  2.37it/s][A
 24%|██▍       | 53/221 [00:17<00:59,  2.83it/s][A[h264 @ 0x559296efbf80] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<02:10,  1.28it/s][A
 25%|██▍       | 55/221 [00:19<01:57,  1.42it/s][A
 25%|██▌       | 56/221 [00:20<01:39,  1.65it/s][A
 26%|██▌       | 57/221 [00:20<01:20,  2.04it/s][A
 26%|██▌       | 58/221 [00:20<01:05,  2.50it/s][A
 27%|██▋       | 59/221 [00:20<00:57,  2.83it/s][A
 27%|██▋       | 60/221 [00:21<01:04,  2.52it/s][A
 28%|██▊       | 61/221 [00:21<00:53,  2.99it/s][A
 28%|██▊       | 62/221 [00:21<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:21<00:38,  4.05it/s][A
 29%|██▉       | 64/221 [00:21<00:35,  4.48it/s][A
 29%|██▉       | 65/221 [00:21<00:29,  5.24it/s][A
 30%|██▉       | 66/221 [00:23<01:20,  1.92it/s][A
 30%|███       | 67/221 [00:23<01:09,  2.21it/s][A
 31%|███       | 68/221 [00:23<00:58,  2.62it/s][A
 31%|███       | 69/221 [00:24<01:02,  2.43it/s][A
 32%|███▏      | 70/221 [00:24<00:50,  2.98it/s][A
 32%|███▏      | 71/221 [00:24<00:41,  3.60it/s][A
 33%|███▎      | 72/221 [00:24<00:41,  3.57it/s][A
 33%|███▎      | 73/221 [00:25<00:50,  2.94it/s][A
 33%|███▎      | 74/221 [00:25<00:41,  3.53it/s][A
 34%|███▍      | 75/221 [00:25<00:40,  3.60it/s][A[h264 @ 0x559f5a61c440] mmco: unref short failure

 34%|███▍      | 76/221 [00:25<00:37,  3.91it/s][A
[h264 @ 0x559298d08800] mmco: unref short failure
 35%|███▍      | 77/221 [00:26<00:35,  4.10it/s][A
 35%|███▌      | 78/221 [00:26<00:31,  4.56it/s][A
 36%|███▌      | 79/221 [00:26<00:38,  3.68it/s][A
 36%|███▌      | 80/221 [00:26<00:33,  4.25it/s][A
 37%|███▋      | 81/221 [00:27<00:33,  4.22it/s][A
 37%|███▋      | 82/221 [00:27<00:35,  3.94it/s][A
 38%|███▊      | 83/221 [00:27<00:32,  4.30it/s][A
 38%|███▊      | 84/221 [00:27<00:28,  4.85it/s][A
 38%|███▊      | 85/221 [00:27<00:24,  5.57it/s][A
 39%|███▉      | 86/221 [00:28<00:23,  5.82it/s][A
 39%|███▉      | 87/221 [00:28<00:28,  4.63it/s][A[h264 @ 0x55928a15ec00] mmco: unref short failure

 40%|███▉      | 88/221 [00:28<00:36,  3.65it/s][A
 40%|████      | 89/221 [00:29<00:36,  3.60it/s][A[h264 @ 0x559f6716d400] mmco: unref short failure

 41%|████      | 90/221 [00:29<00:31,  4.19it/s][A
 42%|████▏     | 92/221 [00:29<00:24,  5.29it/s][A
 42%|████▏     | 93/221 [00:29<00:31,  4.03it/s][A
 43%|████▎     | 94/221 [00:30<00:30,  4.18it/s][A
 43%|████▎     | 95/221 [00:30<00:32,  3.94it/s][A
 43%|████▎     | 96/221 [00:30<00:42,  2.94it/s][A
 44%|████▍     | 97/221 [00:31<00:40,  3.07it/s][A
 44%|████▍     | 98/221 [00:31<00:41,  2.99it/s][A
 45%|████▍     | 99/221 [00:31<00:37,  3.26it/s][A
 45%|████▌     | 100/221 [00:32<00:34,  3.46it/s][A
 46%|████▌     | 101/221 [00:32<00:32,  3.68it/s][A
 46%|████▌     | 102/221 [00:32<00:33,  3.60it/s][A
 47%|████▋     | 103/221 [00:32<00:28,  4.15it/s][A
 47%|████▋     | 104/221 [00:32<00:24,  4.82it/s][A
 48%|████▊     | 105/221 [00:33<00:23,  4.86it/s][A
 48%|████▊     | 106/221 [00:33<00:32,  3.57it/s][A
 48%|████▊     | 107/221 [00:33<00:29,  3.91it/s][A
 49%|████▉     | 108/221 [00:33<00:24,  4.60it/s][A
 49%|████▉     | 109/221 [00:34<00:22,  4.98it/s][A
 50%|████▉     | 110/221 [00:34<00:21,  5.16it/s][A
 50%|█████     | 111/221 [00:34<00:26,  4.17it/s][A
 51%|█████     | 112/221 [00:34<00:23,  4.63it/s][A
 51%|█████     | 113/221 [00:34<00:21,  4.98it/s][A
 52%|█████▏    | 115/221 [00:35<00:16,  6.35it/s][A
 52%|█████▏    | 116/221 [00:39<02:03,  1.17s/it][A
 53%|█████▎    | 117/221 [00:39<01:38,  1.06it/s][A
 53%|█████▎    | 118/221 [00:39<01:17,  1.33it/s][A
 54%|█████▍    | 119/221 [00:40<01:01,  1.65it/s][A
 54%|█████▍    | 120/221 [00:40<00:49,  2.03it/s][A
 55%|█████▍    | 121/221 [00:40<00:39,  2.56it/s][A
 55%|█████▌    | 122/221 [00:40<00:34,  2.90it/s][A[h264 @ 0x559f5d727900] mmco: unref short failure

 56%|█████▌    | 123/221 [00:40<00:29,  3.28it/s][A
 56%|█████▌    | 124/221 [00:41<00:28,  3.45it/s][A
 57%|█████▋    | 125/221 [00:41<00:35,  2.71it/s][A
 57%|█████▋    | 126/221 [00:42<00:33,  2.80it/s][A
 57%|█████▋    | 127/221 [00:43<00:57,  1.63it/s][A
 58%|█████▊    | 128/221 [00:44<01:03,  1.47it/s][A
 58%|█████▊    | 129/221 [00:44<00:50,  1.83it/s][A
 59%|█████▉    | 130/221 [00:44<00:37,  2.41it/s][A
 59%|█████▉    | 131/221 [00:44<00:29,  3.08it/s][A
 60%|█████▉    | 132/221 [00:45<00:35,  2.50it/s][A
 60%|██████    | 133/221 [00:45<00:31,  2.78it/s][A
 61%|██████    | 134/221 [00:45<00:35,  2.45it/s][A
 61%|██████    | 135/221 [00:46<00:38,  2.23it/s][A
 62%|██████▏   | 136/221 [00:47<00:48,  1.77it/s][A[h264 @ 0x55929b504380] mmco: unref short failure

 62%|██████▏   | 137/221 [00:50<01:56,  1.38s/it][A
 62%|██████▏   | 138/221 [00:51<01:34,  1.13s/it][A
 63%|██████▎   | 139/221 [00:52<01:38,  1.20s/it][A
 63%|██████▎   | 140/221 [00:52<01:17,  1.04it/s][A
 64%|██████▍   | 141/221 [00:53<01:07,  1.19it/s][A
 64%|██████▍   | 142/221 [00:53<00:57,  1.37it/s][A
 65%|██████▍   | 143/221 [00:54<00:46,  1.67it/s][A
 65%|██████▌   | 144/221 [00:54<00:35,  2.18it/s][A[h264 @ 0x555f3a48df00] mmco: unref short failure

 66%|██████▌   | 145/221 [00:54<00:28,  2.71it/s][A
 66%|██████▌   | 146/221 [00:54<00:21,  3.44it/s][A
 67%|██████▋   | 147/221 [00:54<00:22,  3.27it/s][A
 67%|██████▋   | 148/221 [00:55<00:29,  2.49it/s][A
 67%|██████▋   | 149/221 [00:55<00:24,  2.91it/s][A
 68%|██████▊   | 150/221 [00:55<00:19,  3.66it/s][A
 68%|██████▊   | 151/221 [00:56<00:18,  3.81it/s][A
 69%|██████▉   | 152/221 [00:56<00:24,  2.85it/s][A
 69%|██████▉   | 153/221 [00:56<00:22,  3.05it/s][A
 70%|██████▉   | 154/221 [00:57<00:20,  3.30it/s][A
 70%|███████   | 155/221 [00:57<00:16,  4.02it/s][A
 71%|███████   | 156/221 [00:57<00:15,  4.18it/s][A[h264 @ 0x55d435b220c0] mmco: unref short failure
[h264 @ 0x55d435b220c0] mmco: unref short failure

 71%|███████   | 157/221 [01:02<01:43,  1.62s/it][A
 71%|███████▏  | 158/221 [01:02<01:17,  1.23s/it][A
 72%|███████▏  | 159/221 [01:02<00:55,  1.11it/s][A
 72%|███████▏  | 160/221 [01:03<00:41,  1.48it/s][A
 73%|███████▎  | 161/221 [01:03<00:31,  1.92it/s][A
 73%|███████▎  | 162/221 [01:03<00:23,  2.51it/s][A
 74%|███████▍  | 163/221 [01:03<00:21,  2.70it/s][A
 74%|███████▍  | 164/221 [01:03<00:17,  3.18it/s][A
 75%|███████▍  | 165/221 [01:03<00:14,  3.76it/s][A
 75%|███████▌  | 166/221 [01:08<01:24,  1.54s/it][A
 76%|███████▌  | 167/221 [01:08<00:59,  1.11s/it][A
 76%|███████▌  | 168/221 [01:11<01:29,  1.69s/it][A
 76%|███████▋  | 169/221 [01:11<01:03,  1.22s/it][A
 77%|███████▋  | 170/221 [01:12<00:49,  1.04it/s][A
 77%|███████▋  | 171/221 [01:12<00:44,  1.13it/s][A
 78%|███████▊  | 172/221 [01:12<00:33,  1.48it/s][A
 78%|███████▊  | 173/221 [01:13<00:26,  1.78it/s][A
 79%|███████▊  | 174/221 [01:13<00:19,  2.36it/s][A
 79%|███████▉  | 175/221 [01:13<00:16,  2.77it/s][A
 80%|███████▉  | 176/221 [01:13<00:13,  3.23it/s][A
 80%|████████  | 177/221 [01:14<00:13,  3.34it/s][A
 81%|████████  | 178/221 [01:14<00:17,  2.51it/s][A
 81%|████████  | 179/221 [01:17<00:43,  1.05s/it][A
 81%|████████▏ | 180/221 [01:17<00:31,  1.31it/s][A
 82%|████████▏ | 182/221 [01:17<00:18,  2.07it/s][A
 83%|████████▎ | 183/221 [01:17<00:16,  2.25it/s][A
 83%|████████▎ | 184/221 [01:18<00:15,  2.39it/s][A
 84%|████████▎ | 185/221 [01:18<00:13,  2.66it/s][A
 84%|████████▍ | 186/221 [01:18<00:12,  2.76it/s][A
 85%|████████▍ | 187/221 [01:19<00:10,  3.12it/s][A
 85%|████████▌ | 188/221 [01:19<00:09,  3.44it/s][A
 86%|████████▌ | 189/221 [01:19<00:08,  3.68it/s][A
 86%|████████▌ | 190/221 [01:19<00:08,  3.70it/s][A
 86%|████████▋ | 191/221 [01:19<00:06,  4.55it/s][A
 87%|████████▋ | 192/221 [01:20<00:05,  5.24it/s][A
 87%|████████▋ | 193/221 [01:20<00:05,  5.23it/s][A
 88%|████████▊ | 194/221 [01:20<00:06,  3.96it/s][A
 88%|████████▊ | 195/221 [01:20<00:05,  4.44it/s][A
 89%|████████▊ | 196/221 [01:20<00:04,  5.09it/s][A
 89%|████████▉ | 197/221 [01:21<00:04,  5.81it/s][A
 90%|████████▉ | 198/221 [01:21<00:03,  6.23it/s][A
 90%|█████████ | 199/221 [01:21<00:04,  5.37it/s][A
 90%|█████████ | 200/221 [01:21<00:04,  4.79it/s][A
 91%|█████████ | 201/221 [01:21<00:03,  5.02it/s][A
 91%|█████████▏| 202/221 [01:22<00:03,  5.00it/s][A
 92%|█████████▏| 203/221 [01:22<00:03,  4.61it/s][A
 92%|█████████▏| 204/221 [01:22<00:03,  4.99it/s][A
 93%|█████████▎| 205/221 [01:22<00:03,  4.74it/s][A[h264 @ 0x555f54081680] mmco: unref short failure

 93%|█████████▎| 206/221 [01:23<00:03,  4.09it/s][A
 94%|█████████▍| 208/221 [01:23<00:02,  4.83it/s][A
 95%|█████████▍| 209/221 [01:23<00:02,  4.88it/s][A
 95%|█████████▌| 211/221 [01:24<00:02,  4.42it/s][A
 96%|█████████▌| 212/221 [01:24<00:02,  4.27it/s][A
 96%|█████████▋| 213/221 [01:24<00:01,  4.74it/s][A
 97%|█████████▋| 214/221 [01:24<00:01,  4.35it/s][A
 97%|█████████▋| 215/221 [01:24<00:01,  4.45it/s][A
 98%|█████████▊| 216/221 [01:25<00:01,  3.88it/s][A
 98%|█████████▊| 217/221 [01:29<00:05,  1.40s/it][A
 99%|█████████▊| 218/221 [01:29<00:03,  1.04s/it][A
 99%|█████████▉| 219/221 [01:30<00:01,  1.17it/s][A
100%|█████████▉| 220/221 [01:33<00:01,  1.73s/it][A
100%|██████████| 221/221 [01:34<00:00,  1.26s/it][A100%|██████████| 221/221 [01:34<00:00,  2.35it/s]
09/17/2024 00:10:41 - INFO - __main__ -   current idx BYJeo2oa0SU.13 from finetune_area returns wrong image/video, use 142604 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:23,  2.62it/s][A
  1%|          | 2/221 [00:00<01:15,  2.90it/s][A
  1%|▏         | 3/221 [00:01<01:13,  2.97it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.86it/s][A
  2%|▏         | 5/221 [00:01<01:15,  2.86it/s][A
  3%|▎         | 6/221 [00:02<01:12,  2.98it/s][A
  3%|▎         | 7/221 [00:02<01:14,  2.87it/s][A
  4%|▎         | 8/221 [00:02<01:23,  2.55it/s][A
  4%|▍         | 9/221 [00:03<01:25,  2.47it/s][A
  5%|▍         | 10/221 [00:03<01:23,  2.52it/s][A
  5%|▍         | 11/221 [00:04<01:20,  2.61it/s][A
  5%|▌         | 12/221 [00:04<01:16,  2.73it/s][A
  6%|▌         | 13/221 [00:04<01:15,  2.74it/s][A
  6%|▋         | 14/221 [00:05<01:14,  2.77it/s][A
  7%|▋         | 15/221 [00:05<01:15,  2.74it/s][A
  7%|▋         | 16/221 [00:05<01:14,  2.77it/s][A
  8%|▊         | 17/221 [00:06<01:12,  2.80it/s][A
  8%|▊         | 18/221 [00:06<01:11,  2.84it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.93it/s][A
  9%|▉         | 20/221 [00:07<01:08,  2.93it/s][A
 10%|▉         | 21/221 [00:07<01:07,  2.97it/s][A
 10%|▉         | 22/221 [00:07<01:09,  2.86it/s][A
 10%|█         | 23/221 [00:08<01:10,  2.80it/s][A
 11%|█         | 24/221 [00:08<01:10,  2.79it/s][A
 11%|█▏        | 25/221 [00:09<01:14,  2.63it/s][A
 12%|█▏        | 26/221 [00:09<01:14,  2.62it/s][A
 12%|█▏        | 27/221 [00:09<01:13,  2.63it/s][A
 13%|█▎        | 28/221 [00:10<01:09,  2.76it/s][A[h264 @ 0x559f83d28040] mmco: unref short failure
[h264 @ 0x559f83d28040] mmco: unref short failure

 13%|█▎        | 29/221 [00:10<01:07,  2.86it/s][A
 14%|█▎        | 30/221 [00:10<01:07,  2.81it/s][A09/17/2024 00:10:59 - INFO - __main__ -   current idx UqfcB6M8FA4.49 from finetune_area returns wrong image/video, use 41732 instead.

 14%|█▍        | 31/221 [00:11<01:16,  2.48it/s][A
 14%|█▍        | 32/221 [00:12<01:28,  2.14it/s][A
 15%|█▍        | 33/221 [00:12<01:39,  1.89it/s][A
 15%|█▌        | 34/221 [00:13<01:33,  2.00it/s][A
 16%|█▌        | 35/221 [00:13<01:36,  1.92it/s][A
 16%|█▋        | 36/221 [00:14<01:34,  1.96it/s][A[h264 @ 0x555f3aeb2bc0] mmco: unref short failure
[h264 @ 0x55d403fc4c80] mmco: unref short failure
[h264 @ 0x55d403fc4c80] mmco: unref short failure

 17%|█▋        | 37/221 [00:14<01:23,  2.19it/s][A[h264 @ 0x55d403fc4c80] mmco: unref short failure
[h264 @ 0x55d403fc4c80] mmco: unref short failure

 17%|█▋        | 38/221 [00:14<01:16,  2.39it/s][A
 18%|█▊        | 39/221 [00:15<01:12,  2.53it/s][A
 18%|█▊        | 40/221 [00:15<01:07,  2.67it/s][A
 19%|█▊        | 41/221 [00:15<01:05,  2.74it/s][A
 19%|█▉        | 42/221 [00:16<01:05,  2.72it/s][A
 19%|█▉        | 43/221 [00:16<01:02,  2.84it/s][A
 20%|█▉        | 44/221 [00:16<01:00,  2.92it/s][A
 20%|██        | 45/221 [00:17<00:59,  2.98it/s][A
 21%|██        | 46/221 [00:17<01:00,  2.87it/s][A
 21%|██▏       | 47/221 [00:17<01:00,  2.89it/s][A
 22%|██▏       | 48/221 [00:18<00:58,  2.95it/s][A
 22%|██▏       | 49/221 [00:18<00:58,  2.95it/s][A
 23%|██▎       | 50/221 [00:18<00:59,  2.87it/s][A
 23%|██▎       | 51/221 [00:19<01:01,  2.76it/s][A
 24%|██▎       | 52/221 [00:19<00:59,  2.85it/s][A
 24%|██▍       | 53/221 [00:19<00:57,  2.91it/s][A
 24%|██▍       | 54/221 [00:20<00:57,  2.93it/s][A
 25%|██▍       | 55/221 [00:20<00:56,  2.95it/s][A
 25%|██▌       | 56/221 [00:20<00:54,  3.00it/s][A
 26%|██▌       | 57/221 [00:21<00:54,  3.01it/s][A
 26%|██▌       | 58/221 [00:21<00:56,  2.89it/s][A
 27%|██▋       | 59/221 [00:22<01:00,  2.69it/s][A
 27%|██▋       | 60/221 [00:22<01:01,  2.64it/s][A
 28%|██▊       | 61/221 [00:22<00:57,  2.77it/s][A
 28%|██▊       | 62/221 [00:23<00:56,  2.82it/s][A
 29%|██▊       | 63/221 [00:23<00:57,  2.76it/s][A
 29%|██▉       | 64/221 [00:23<00:57,  2.72it/s][A
 29%|██▉       | 65/221 [00:24<00:54,  2.84it/s][A
 30%|██▉       | 66/221 [00:24<01:01,  2.54it/s][A
 30%|███       | 67/221 [00:25<00:57,  2.68it/s][A[h264 @ 0x555f496f17c0] mmco: unref short failure
[h264 @ 0x555f496f17c0] mmco: unref short failure

 31%|███       | 68/221 [00:25<00:56,  2.73it/s][A
 31%|███       | 69/221 [00:25<00:53,  2.83it/s][A
 32%|███▏      | 70/221 [00:26<00:52,  2.87it/s][A
 32%|███▏      | 71/221 [00:26<00:52,  2.84it/s][A[h264 @ 0x55d41ea6adc0] mmco: unref short failure

 33%|███▎      | 72/221 [00:26<00:53,  2.78it/s][A
 33%|███▎      | 73/221 [00:27<00:53,  2.77it/s][A
 33%|███▎      | 74/221 [00:27<00:52,  2.78it/s][A
 34%|███▍      | 75/221 [00:27<00:51,  2.82it/s][A
 34%|███▍      | 76/221 [00:28<00:50,  2.90it/s][A[h264 @ 0x55929012f5c0] mmco: unref short failure

 35%|███▍      | 77/221 [00:28<00:50,  2.86it/s][A
 35%|███▌      | 78/221 [00:28<00:48,  2.95it/s][A
 36%|███▌      | 79/221 [00:29<00:54,  2.59it/s][A
 36%|███▌      | 80/221 [00:29<00:55,  2.55it/s][A
 37%|███▋      | 81/221 [00:30<00:52,  2.69it/s][A
 37%|███▋      | 82/221 [00:30<00:49,  2.79it/s][A
 38%|███▊      | 83/221 [00:30<00:48,  2.85it/s][A
 38%|███▊      | 84/221 [00:31<00:46,  2.92it/s][A
 38%|███▊      | 85/221 [00:31<00:46,  2.94it/s][A
 39%|███▉      | 86/221 [00:31<00:49,  2.75it/s][A
 39%|███▉      | 87/221 [00:32<00:49,  2.70it/s][A
 40%|███▉      | 88/221 [00:32<00:48,  2.74it/s][A
 40%|████      | 89/221 [00:32<00:46,  2.82it/s][A
 41%|████      | 90/221 [00:33<00:46,  2.80it/s][A
 41%|████      | 91/221 [00:33<00:48,  2.67it/s][A
 42%|████▏     | 92/221 [00:33<00:46,  2.76it/s][A
 42%|████▏     | 93/221 [00:34<00:44,  2.85it/s][A
 43%|████▎     | 94/221 [00:34<00:43,  2.92it/s][A
 43%|████▎     | 95/221 [00:34<00:42,  2.98it/s][A
 43%|████▎     | 96/221 [00:35<00:42,  2.97it/s][A
 44%|████▍     | 97/221 [00:35<00:42,  2.92it/s][A
 44%|████▍     | 98/221 [00:35<00:42,  2.93it/s][A
 45%|████▍     | 99/221 [00:36<00:40,  2.99it/s][A
 45%|████▌     | 100/221 [00:36<00:40,  2.97it/s][A
 46%|████▌     | 101/221 [00:36<00:40,  3.00it/s][A
 46%|████▌     | 102/221 [00:37<00:39,  3.02it/s][A
 47%|████▋     | 103/221 [00:37<00:39,  3.01it/s][A
 47%|████▋     | 104/221 [00:37<00:38,  3.03it/s][A
 48%|████▊     | 105/221 [00:38<00:40,  2.87it/s][A
 48%|████▊     | 106/221 [00:38<00:39,  2.93it/s][A
 48%|████▊     | 107/221 [00:38<00:38,  2.96it/s][A
 49%|████▉     | 108/221 [00:39<00:38,  2.95it/s][A
 49%|████▉     | 109/221 [00:39<00:42,  2.61it/s][A
 50%|████▉     | 110/221 [00:40<00:40,  2.71it/s][A
 50%|█████     | 111/221 [00:40<00:40,  2.74it/s][A
 51%|█████     | 112/221 [00:40<00:43,  2.50it/s][A
 51%|█████     | 113/221 [00:41<00:42,  2.51it/s][A
 52%|█████▏    | 114/221 [00:41<00:41,  2.60it/s][A
 52%|█████▏    | 115/221 [00:42<00:39,  2.71it/s][A
 52%|█████▏    | 116/221 [00:42<00:37,  2.79it/s][A
 53%|█████▎    | 117/221 [00:42<00:37,  2.79it/s][A
 53%|█████▎    | 118/221 [00:43<00:36,  2.82it/s][A
 54%|█████▍    | 119/221 [00:43<00:35,  2.88it/s][A
 54%|█████▍    | 120/221 [00:43<00:34,  2.96it/s][A[h264 @ 0x559f7355ce80] mmco: unref short failure
[h264 @ 0x559f7355ce80] mmco: unref short failure

 55%|█████▍    | 121/221 [00:44<00:32,  3.04it/s][A
 55%|█████▌    | 122/221 [00:44<00:33,  2.95it/s][A
 56%|█████▌    | 123/221 [00:44<00:32,  2.97it/s][A
 56%|█████▌    | 124/221 [00:45<00:34,  2.82it/s][A
 57%|█████▋    | 125/221 [00:45<00:34,  2.78it/s][A[h264 @ 0x55d42cb5fb40] mmco: unref short failure
[h264 @ 0x55d42cb5fb40] mmco: unref short failure

 57%|█████▋    | 126/221 [00:45<00:33,  2.80it/s][A[h264 @ 0x5592a6ea01c0] mmco: unref short failure
[h264 @ 0x5592a6ea01c0] mmco: unref short failure

 57%|█████▋    | 127/221 [00:46<00:34,  2.69it/s][A
 58%|█████▊    | 128/221 [00:46<00:33,  2.80it/s][A
 58%|█████▊    | 129/221 [00:46<00:33,  2.79it/s][A
 59%|█████▉    | 130/221 [00:47<00:31,  2.86it/s][A
 59%|█████▉    | 131/221 [00:47<00:30,  2.94it/s][A09/17/2024 00:11:35 - INFO - __main__ -   current idx c0na5aaBMBE.58 from finetune_area returns wrong image/video, use 66176 instead.

 60%|█████▉    | 132/221 [00:47<00:31,  2.84it/s][A
 60%|██████    | 133/221 [00:48<00:32,  2.73it/s][A
 61%|██████    | 134/221 [00:48<00:30,  2.83it/s][A
 61%|██████    | 135/221 [00:49<00:30,  2.85it/s][A
 62%|██████▏   | 136/221 [00:49<00:30,  2.81it/s][A
 62%|██████▏   | 137/221 [00:49<00:29,  2.89it/s][A
 62%|██████▏   | 138/221 [00:50<00:28,  2.95it/s][A
 63%|██████▎   | 139/221 [00:50<00:27,  2.97it/s][A
 63%|██████▎   | 140/221 [00:50<00:27,  2.91it/s][A
 64%|██████▍   | 141/221 [00:51<00:27,  2.93it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  2.95it/s][A
 65%|██████▍   | 143/221 [00:51<00:26,  2.96it/s][A
 65%|██████▌   | 144/221 [00:52<00:26,  2.86it/s][A
 66%|██████▌   | 145/221 [00:52<00:25,  2.93it/s][A
 66%|██████▌   | 146/221 [00:52<00:26,  2.88it/s][A
 67%|██████▋   | 147/221 [00:53<00:25,  2.94it/s][A
 67%|██████▋   | 148/221 [00:53<00:24,  3.00it/s][A
 67%|██████▋   | 149/221 [00:53<00:23,  3.05it/s][A
 68%|██████▊   | 150/221 [00:54<00:23,  2.97it/s][A09/17/2024 00:11:42 - INFO - __main__ -   current idx 1DPLzfs419g.3 from finetune_area returns wrong image/video, use 3158 instead.

 68%|██████▊   | 151/221 [00:54<00:24,  2.84it/s][A
 69%|██████▉   | 152/221 [00:54<00:23,  2.96it/s][A
 69%|██████▉   | 153/221 [00:55<00:22,  3.03it/s][A
 70%|██████▉   | 154/221 [00:55<00:21,  3.10it/s][A
 70%|███████   | 155/221 [00:55<00:22,  2.95it/s][A
 71%|███████   | 156/221 [00:56<00:22,  2.86it/s][A
 71%|███████   | 157/221 [00:58<00:59,  1.07it/s][A
 71%|███████▏  | 158/221 [00:58<00:47,  1.33it/s][A
 72%|███████▏  | 159/221 [00:59<00:39,  1.59it/s][A[h264 @ 0x55d42caaabc0] mmco: unref short failure

 72%|███████▏  | 160/221 [00:59<00:32,  1.87it/s][A
 73%|███████▎  | 161/221 [00:59<00:28,  2.10it/s][A
 73%|███████▎  | 162/221 [01:00<00:25,  2.27it/s][A
 74%|███████▍  | 163/221 [01:00<00:25,  2.25it/s][A
 74%|███████▍  | 164/221 [01:01<00:24,  2.34it/s][A
 75%|███████▍  | 165/221 [01:01<00:22,  2.44it/s][A
 75%|███████▌  | 166/221 [01:01<00:21,  2.59it/s][A
 76%|███████▌  | 167/221 [01:02<00:19,  2.72it/s][A
 76%|███████▌  | 168/221 [01:02<00:18,  2.84it/s][A
 76%|███████▋  | 169/221 [01:02<00:17,  2.90it/s][A
 77%|███████▋  | 170/221 [01:03<00:18,  2.83it/s][A
 77%|███████▋  | 171/221 [01:03<00:16,  2.94it/s][A
 78%|███████▊  | 172/221 [01:03<00:16,  3.01it/s][A
 78%|███████▊  | 173/221 [01:04<00:16,  2.95it/s][A
 79%|███████▊  | 174/221 [01:04<00:15,  2.98it/s][A
 79%|███████▉  | 175/221 [01:04<00:15,  3.03it/s][A
 80%|███████▉  | 176/221 [01:05<00:18,  2.40it/s][A
 80%|████████  | 177/221 [01:05<00:17,  2.59it/s][A
 81%|████████  | 178/221 [01:05<00:15,  2.74it/s][A
 81%|████████  | 179/221 [01:06<00:14,  2.82it/s][A
 81%|████████▏ | 180/221 [01:06<00:14,  2.78it/s][A
 82%|████████▏ | 181/221 [01:06<00:13,  2.91it/s][A
 82%|████████▏ | 182/221 [01:07<00:13,  2.92it/s][A
 83%|████████▎ | 183/221 [01:07<00:12,  2.98it/s][A
 83%|████████▎ | 184/221 [01:07<00:12,  2.88it/s][A
 84%|████████▎ | 185/221 [01:08<00:12,  2.90it/s][A
 84%|████████▍ | 186/221 [01:08<00:12,  2.90it/s][A
 85%|████████▍ | 187/221 [01:08<00:11,  3.01it/s][A
 85%|████████▌ | 188/221 [01:09<00:11,  2.97it/s][A
 86%|████████▌ | 189/221 [01:09<00:10,  2.96it/s][A
 86%|████████▌ | 190/221 [01:10<00:10,  2.91it/s][A[h264 @ 0x55d41e616600] mmco: unref short failure

 86%|████████▋ | 191/221 [01:10<00:10,  2.82it/s][A
 87%|████████▋ | 192/221 [01:10<00:10,  2.86it/s][A
 87%|████████▋ | 193/221 [01:11<00:09,  2.95it/s][A[h264 @ 0x559f802d5440] mmco: unref short failure

 88%|████████▊ | 194/221 [01:11<00:09,  2.92it/s][A
 88%|████████▊ | 195/221 [01:11<00:09,  2.75it/s][A
 89%|████████▊ | 196/221 [01:12<00:09,  2.72it/s][A
 89%|████████▉ | 197/221 [01:12<00:08,  2.69it/s][A
 90%|████████▉ | 198/221 [01:12<00:08,  2.66it/s][A[h264 @ 0x555f2be2cd40] mmco: unref short failure

 90%|█████████ | 199/221 [01:13<00:08,  2.68it/s][A
 90%|█████████ | 200/221 [01:13<00:07,  2.69it/s][A
 91%|█████████ | 201/221 [01:14<00:07,  2.61it/s][A
 91%|█████████▏| 202/221 [01:14<00:06,  2.73it/s][A[h264 @ 0x5592abc3f100] mmco: unref short failure
[h264 @ 0x5592abc3f100] mmco: unref short failure

 92%|█████████▏| 203/221 [01:14<00:06,  2.79it/s][A[h264 @ 0x5592978a07c0] mmco: unref short failure
[h264 @ 0x5592978a07c0] mmco: unref short failure

 92%|█████████▏| 204/221 [01:15<00:05,  2.89it/s][A
 93%|█████████▎| 205/221 [01:15<00:06,  2.42it/s][A
 93%|█████████▎| 206/221 [01:15<00:05,  2.64it/s][A
 94%|█████████▎| 207/221 [01:16<00:05,  2.77it/s][A
 94%|█████████▍| 208/221 [01:16<00:04,  2.83it/s][A
 95%|█████████▍| 209/221 [01:16<00:04,  2.92it/s][A
 95%|█████████▌| 210/221 [01:17<00:03,  3.00it/s][A
 95%|█████████▌| 211/221 [01:17<00:03,  2.97it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  3.07it/s][A
 96%|█████████▋| 213/221 [01:18<00:02,  3.16it/s][A
 97%|█████████▋| 214/221 [01:18<00:02,  3.18it/s][A
 97%|█████████▋| 215/221 [01:18<00:01,  3.15it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  3.17it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  3.19it/s][A
 99%|█████████▊| 218/221 [01:19<00:00,  3.25it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  3.20it/s][A[h264 @ 0x555f519c29c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:20<00:00,  3.15it/s][A
100%|██████████| 221/221 [01:20<00:00,  3.18it/s][A100%|██████████| 221/221 [01:20<00:00,  2.74it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.40it/s][A
  1%|          | 2/221 [00:00<01:15,  2.91it/s][A
  1%|▏         | 3/221 [00:01<01:33,  2.33it/s][A
  2%|▏         | 4/221 [00:01<01:10,  3.09it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<00:58,  3.68it/s][A
  3%|▎         | 7/221 [00:02<01:06,  3.22it/s][A
  4%|▎         | 8/221 [00:02<01:08,  3.11it/s][A
  4%|▍         | 9/221 [00:03<01:21,  2.61it/s][A
  5%|▍         | 10/221 [00:03<01:31,  2.31it/s][A
  5%|▍         | 11/221 [00:03<01:25,  2.44it/s][A
  5%|▌         | 12/221 [00:04<01:17,  2.70it/s][A
  6%|▌         | 13/221 [00:04<01:28,  2.35it/s][A
  6%|▋         | 14/221 [00:05<01:19,  2.60it/s][A
  7%|▋         | 15/221 [00:05<01:21,  2.54it/s][A
  7%|▋         | 16/221 [00:05<01:25,  2.40it/s][A
  8%|▊         | 17/221 [00:06<01:29,  2.27it/s][A
  8%|▊         | 18/221 [00:06<01:21,  2.50it/s][A
  9%|▊         | 19/221 [00:07<01:16,  2.64it/s][A
  9%|▉         | 20/221 [00:07<01:02,  3.22it/s][A
 10%|▉         | 21/221 [00:07<00:53,  3.72it/s][A
 10%|▉         | 22/221 [00:07<00:51,  3.88it/s][A
 10%|█         | 23/221 [00:07<00:44,  4.47it/s][A
 11%|█         | 24/221 [00:07<00:41,  4.80it/s][A
 11%|█▏        | 25/221 [00:08<00:42,  4.65it/s][A
 12%|█▏        | 26/221 [00:08<00:41,  4.68it/s][A
 12%|█▏        | 27/221 [00:08<00:42,  4.51it/s][A
 13%|█▎        | 28/221 [00:08<00:48,  3.94it/s][A[h264 @ 0x55d42bd00a80] mmco: unref short failure
[h264 @ 0x55d42bd00a80] mmco: unref short failure

 13%|█▎        | 29/221 [00:09<01:03,  3.03it/s][A
 14%|█▎        | 30/221 [00:09<01:05,  2.91it/s][A
 14%|█▍        | 31/221 [00:10<01:00,  3.13it/s][A
 14%|█▍        | 32/221 [00:10<01:05,  2.88it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.35it/s][A
 15%|█▌        | 34/221 [00:10<00:48,  3.82it/s][A
 16%|█▌        | 35/221 [00:11<00:42,  4.39it/s][A
 16%|█▋        | 36/221 [00:11<00:51,  3.58it/s][A
 17%|█▋        | 37/221 [00:11<00:50,  3.65it/s][A
 17%|█▋        | 38/221 [00:12<00:52,  3.51it/s][A
 18%|█▊        | 39/221 [00:12<00:49,  3.68it/s][A
 18%|█▊        | 40/221 [00:12<00:48,  3.75it/s][A
 19%|█▊        | 41/221 [00:12<00:46,  3.85it/s][A
 19%|█▉        | 42/221 [00:12<00:42,  4.25it/s][A
 19%|█▉        | 43/221 [00:13<00:46,  3.80it/s][A
 20%|█▉        | 44/221 [00:13<00:44,  3.99it/s][A
 20%|██        | 45/221 [00:13<00:57,  3.04it/s][A[h264 @ 0x559f89b5ab00] mmco: unref short failure
[h264 @ 0x559f89b5ab00] mmco: unref short failure

 21%|██        | 46/221 [00:14<01:00,  2.90it/s][A
 21%|██▏       | 47/221 [00:14<00:54,  3.20it/s][A
 22%|██▏       | 49/221 [00:14<00:36,  4.72it/s][A
 23%|██▎       | 50/221 [00:15<00:48,  3.51it/s][A
 23%|██▎       | 51/221 [00:15<00:46,  3.67it/s][A
 24%|██▎       | 52/221 [00:15<00:42,  3.94it/s][A
 24%|██▍       | 53/221 [00:16<00:47,  3.51it/s][A
 24%|██▍       | 54/221 [00:16<00:45,  3.70it/s][A
 25%|██▍       | 55/221 [00:16<00:40,  4.13it/s][A
 25%|██▌       | 56/221 [00:16<00:41,  4.00it/s][A
 26%|██▌       | 57/221 [00:17<00:44,  3.71it/s][A
 26%|██▌       | 58/221 [00:17<00:37,  4.31it/s][A
 27%|██▋       | 59/221 [00:17<00:37,  4.31it/s][A
 27%|██▋       | 60/221 [00:17<00:33,  4.81it/s][A
 28%|██▊       | 61/221 [00:17<00:35,  4.48it/s][A
 28%|██▊       | 62/221 [00:18<00:39,  3.99it/s][A
 29%|██▊       | 63/221 [00:18<00:38,  4.13it/s][A
 29%|██▉       | 64/221 [00:18<00:39,  3.94it/s][A
 29%|██▉       | 65/221 [00:18<00:36,  4.23it/s][A
 30%|██▉       | 66/221 [00:19<00:43,  3.58it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.40it/s][A
 31%|███       | 68/221 [00:20<00:52,  2.91it/s][A
 31%|███       | 69/221 [00:20<01:07,  2.24it/s][A
 32%|███▏      | 70/221 [00:20<00:58,  2.60it/s][A
 32%|███▏      | 71/221 [00:21<00:54,  2.76it/s][A
 33%|███▎      | 72/221 [00:21<00:54,  2.72it/s][A
 33%|███▎      | 73/221 [00:22<00:54,  2.70it/s][A
 33%|███▎      | 74/221 [00:22<00:45,  3.21it/s][A[h264 @ 0x555f42bcbe40] mmco: unref short failure

 34%|███▍      | 75/221 [00:22<00:48,  3.01it/s][A
 34%|███▍      | 76/221 [00:23<00:51,  2.84it/s][A
 35%|███▍      | 77/221 [00:23<00:44,  3.22it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.28it/s][A
 36%|███▌      | 79/221 [00:23<00:38,  3.71it/s][A
 36%|███▌      | 80/221 [00:24<00:40,  3.50it/s][A
 37%|███▋      | 81/221 [00:24<00:36,  3.80it/s][A
 37%|███▋      | 82/221 [00:24<00:37,  3.68it/s][A
 38%|███▊      | 83/221 [00:24<00:32,  4.21it/s][A
 38%|███▊      | 84/221 [00:25<00:46,  2.95it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.33it/s][A
 39%|███▉      | 86/221 [00:25<00:37,  3.59it/s][A
 39%|███▉      | 87/221 [00:26<00:45,  2.98it/s][A
 40%|███▉      | 88/221 [00:26<00:47,  2.82it/s][A
 40%|████      | 89/221 [00:27<00:51,  2.56it/s][A
 41%|████      | 90/221 [00:27<00:50,  2.59it/s][A
 41%|████      | 91/221 [00:27<00:40,  3.19it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.25it/s][A
 42%|████▏     | 93/221 [00:28<00:39,  3.23it/s][A
 43%|████▎     | 94/221 [00:28<00:41,  3.03it/s][A
 43%|████▎     | 95/221 [00:29<00:58,  2.17it/s][A
 43%|████▎     | 96/221 [00:29<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:30<00:54,  2.30it/s][A
 44%|████▍     | 98/221 [00:30<01:01,  2.01it/s][A
 45%|████▍     | 99/221 [00:31<00:53,  2.26it/s][A[h264 @ 0x555f334e4340] mmco: unref short failure
[h264 @ 0x555f334e4340] mmco: unref short failure

 45%|████▌     | 100/221 [00:31<00:55,  2.19it/s][A
 46%|████▌     | 101/221 [00:31<00:50,  2.38it/s][A
 46%|████▌     | 102/221 [00:32<00:46,  2.56it/s][A
 47%|████▋     | 103/221 [00:32<00:39,  3.01it/s][A
 48%|████▊     | 105/221 [00:32<00:31,  3.68it/s][A
 48%|████▊     | 106/221 [00:33<00:34,  3.34it/s][A
 48%|████▊     | 107/221 [00:33<00:31,  3.65it/s][A
 49%|████▉     | 108/221 [00:33<00:27,  4.17it/s][A
 49%|████▉     | 109/221 [00:33<00:26,  4.19it/s][A
 50%|████▉     | 110/221 [00:34<00:25,  4.37it/s][A
 50%|█████     | 111/221 [00:34<00:28,  3.83it/s][A
 51%|█████     | 112/221 [00:34<00:30,  3.58it/s][A
 51%|█████     | 113/221 [00:34<00:28,  3.75it/s][A
 52%|█████▏    | 114/221 [00:35<00:23,  4.53it/s][A
 52%|█████▏    | 115/221 [00:35<00:21,  4.84it/s][A
 52%|█████▏    | 116/221 [00:35<00:21,  4.85it/s][A
 53%|█████▎    | 117/221 [00:35<00:22,  4.64it/s][A
 53%|█████▎    | 118/221 [00:35<00:25,  4.06it/s][A
 54%|█████▍    | 119/221 [00:36<00:31,  3.24it/s][A
 54%|█████▍    | 120/221 [00:36<00:30,  3.31it/s][A
 55%|█████▍    | 121/221 [00:37<00:30,  3.26it/s][A
 55%|█████▌    | 122/221 [00:37<00:33,  2.98it/s][A
 56%|█████▌    | 123/221 [00:37<00:29,  3.34it/s][A
 56%|█████▌    | 124/221 [00:38<00:34,  2.79it/s][A
 57%|█████▋    | 125/221 [00:38<00:35,  2.68it/s][A
 57%|█████▋    | 126/221 [00:38<00:32,  2.92it/s][A
 57%|█████▋    | 127/221 [00:39<00:33,  2.83it/s][A[h264 @ 0x559f89b5ad80] mmco: unref short failure

 58%|█████▊    | 128/221 [00:39<00:30,  3.06it/s][A
 58%|█████▊    | 129/221 [00:39<00:24,  3.68it/s][A
 59%|█████▉    | 130/221 [00:39<00:27,  3.31it/s][A
 59%|█████▉    | 131/221 [00:40<00:24,  3.61it/s][A
 60%|█████▉    | 132/221 [00:40<00:33,  2.68it/s][A
 60%|██████    | 133/221 [00:41<00:30,  2.90it/s][A
 61%|██████    | 134/221 [00:41<00:31,  2.74it/s][A
 61%|██████    | 135/221 [00:41<00:26,  3.19it/s][A
 62%|██████▏   | 136/221 [00:42<00:27,  3.12it/s][A
 62%|██████▏   | 137/221 [00:42<00:26,  3.22it/s][A
 62%|██████▏   | 138/221 [00:42<00:24,  3.45it/s][A
 63%|██████▎   | 139/221 [00:42<00:26,  3.11it/s][A[h264 @ 0x55928d3536c0] mmco: unref short failure
[h264 @ 0x55928d3536c0] mmco: unref short failure

 63%|██████▎   | 140/221 [00:43<00:23,  3.38it/s][A[h264 @ 0x559f7df6a9c0] mmco: unref short failure

 64%|██████▍   | 141/221 [00:43<00:23,  3.38it/s][A[h264 @ 0x55d42472a480] mmco: unref short failure
[h264 @ 0x55d42472a480] mmco: unref short failure

 64%|██████▍   | 142/221 [00:43<00:22,  3.58it/s][A
 65%|██████▍   | 143/221 [00:44<00:23,  3.26it/s][A
 65%|██████▌   | 144/221 [00:44<00:21,  3.56it/s][A
 66%|██████▌   | 145/221 [00:44<00:26,  2.83it/s][A
 66%|██████▌   | 146/221 [00:45<00:23,  3.14it/s][A
 67%|██████▋   | 147/221 [00:45<00:19,  3.84it/s][A
 67%|██████▋   | 148/221 [00:46<00:31,  2.31it/s][A
 67%|██████▋   | 149/221 [00:46<00:28,  2.54it/s][A
 68%|██████▊   | 150/221 [00:46<00:27,  2.56it/s][A
 68%|██████▊   | 151/221 [00:47<00:35,  1.95it/s][A
 69%|██████▉   | 152/221 [00:47<00:33,  2.05it/s][A
 69%|██████▉   | 153/221 [00:48<00:27,  2.43it/s][A
 70%|██████▉   | 154/221 [00:48<00:23,  2.81it/s][A
 70%|███████   | 155/221 [00:48<00:20,  3.16it/s][A
 71%|███████   | 156/221 [00:48<00:19,  3.34it/s][A
 71%|███████   | 157/221 [00:49<00:19,  3.36it/s][A
 71%|███████▏  | 158/221 [00:49<00:18,  3.33it/s][A
 72%|███████▏  | 159/221 [00:49<00:16,  3.78it/s][A
 72%|███████▏  | 160/221 [00:49<00:15,  3.84it/s][A
 73%|███████▎  | 162/221 [00:50<00:10,  5.67it/s][A
 74%|███████▍  | 163/221 [00:50<00:10,  5.31it/s][A
 74%|███████▍  | 164/221 [00:50<00:11,  4.86it/s][A[h264 @ 0x55d41726adc0] mmco: unref short failure
[h264 @ 0x55d41726adc0] mmco: unref short failure

 75%|███████▍  | 165/221 [00:50<00:14,  3.84it/s][A
 75%|███████▌  | 166/221 [00:51<00:15,  3.48it/s][A
 76%|███████▌  | 167/221 [00:51<00:14,  3.64it/s][A
 76%|███████▌  | 168/221 [00:51<00:14,  3.57it/s][A
 76%|███████▋  | 169/221 [00:51<00:12,  4.24it/s][A
 77%|███████▋  | 170/221 [00:52<00:13,  3.89it/s][A[h264 @ 0x555f4be87280] mmco: unref short failure
[h264 @ 0x555f4be87280] mmco: unref short failure

 77%|███████▋  | 171/221 [00:52<00:18,  2.70it/s][A
 78%|███████▊  | 172/221 [00:53<00:17,  2.82it/s][A
 78%|███████▊  | 173/221 [00:53<00:17,  2.74it/s][A
 79%|███████▊  | 174/221 [00:53<00:14,  3.21it/s][A
 79%|███████▉  | 175/221 [00:54<00:14,  3.29it/s][A
 80%|███████▉  | 176/221 [00:54<00:11,  3.96it/s][A
 80%|████████  | 177/221 [00:54<00:11,  3.82it/s][A
 81%|████████  | 178/221 [00:55<00:17,  2.51it/s][A
 81%|████████  | 179/221 [00:55<00:15,  2.63it/s][A
 82%|████████▏ | 181/221 [00:55<00:11,  3.59it/s][A
 82%|████████▏ | 182/221 [00:56<00:10,  3.80it/s][A
 83%|████████▎ | 183/221 [00:56<00:10,  3.53it/s][A
 83%|████████▎ | 184/221 [00:56<00:11,  3.19it/s][A
 84%|████████▎ | 185/221 [00:56<00:09,  3.68it/s][A
 84%|████████▍ | 186/221 [00:57<00:11,  3.03it/s][A
 85%|████████▍ | 187/221 [00:57<00:09,  3.62it/s][A
 85%|████████▌ | 188/221 [00:57<00:08,  3.83it/s][A
 86%|████████▌ | 189/221 [00:58<00:08,  3.91it/s][A
 86%|████████▌ | 190/221 [00:58<00:08,  3.51it/s][A
 86%|████████▋ | 191/221 [00:58<00:07,  4.17it/s][A
 87%|████████▋ | 192/221 [00:58<00:07,  4.07it/s][A
 87%|████████▋ | 193/221 [00:59<00:08,  3.43it/s][A
 88%|████████▊ | 194/221 [00:59<00:08,  3.14it/s][A
 88%|████████▊ | 195/221 [00:59<00:08,  3.14it/s][A
 89%|████████▊ | 196/221 [01:00<00:08,  3.06it/s][A
 89%|████████▉ | 197/221 [01:00<00:07,  3.18it/s][A
 90%|████████▉ | 198/221 [01:00<00:07,  3.08it/s][A
 90%|█████████ | 199/221 [01:01<00:06,  3.23it/s][A
 90%|█████████ | 200/221 [01:01<00:05,  3.62it/s][A
 91%|█████████ | 201/221 [01:01<00:05,  3.84it/s][A
 91%|█████████▏| 202/221 [01:01<00:04,  4.06it/s][A
 92%|█████████▏| 203/221 [01:02<00:04,  3.85it/s][A
 92%|█████████▏| 204/221 [01:02<00:03,  4.49it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.95it/s][A
 93%|█████████▎| 206/221 [01:02<00:04,  3.65it/s][A
 94%|█████████▎| 207/221 [01:03<00:04,  3.32it/s][A
 94%|█████████▍| 208/221 [01:03<00:03,  3.32it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.48it/s][A
 95%|█████████▌| 210/221 [01:04<00:03,  3.58it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  3.58it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.35it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.57it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.26it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  3.28it/s][A
 98%|█████████▊| 217/221 [01:06<00:01,  2.93it/s][A
 99%|█████████▊| 218/221 [01:06<00:01,  2.72it/s][A
 99%|█████████▉| 219/221 [01:07<00:00,  2.50it/s][A
100%|█████████▉| 220/221 [01:07<00:00,  2.91it/s][A
100%|██████████| 221/221 [01:07<00:00,  2.83it/s][A100%|██████████| 221/221 [01:07<00:00,  3.26it/s]
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'area_r1': 38.8, 'area_recall': '38.8/64.6/73.1', 'area_ravg': 58.8}
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'forward_r1': 37.2, 'forward_recall': '37.2/66.4/76.9', 'forward_ravg': 60.2}
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/68.3/77.3', 'area_video_ravg': 61.0}
09/17/2024 00:13:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/17/2024 00:13:21 - INFO - __main__ -   {'area_video_r1': 37.6, 'area_video_recall': '37.6/68.3/77.3', 'area_video_ravg': 61.0}
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'area_video_r1': 50.8, 'area_video_recall': '50.8/72.3/81.9', 'area_video_ravg': 68.3, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/71.5/80.4', 'area_video_back_ravg': 66.8}
09/17/2024 00:13:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 49=======

09/17/2024 00:13:21 - INFO - __main__ -   {'area_video_r1': 50.8, 'area_video_recall': '50.8/72.3/81.9', 'area_video_ravg': 68.3, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/71.5/80.4', 'area_video_back_ravg': 66.8}
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'video_r1': 35.3, 'video_recall': '35.3/66.5/75.2', 'video_ravg': 59.0}
09/17/2024 00:13:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 49=======

09/17/2024 00:13:21 - INFO - __main__ -   {'video_r1': 35.3, 'video_recall': '35.3/66.5/75.2', 'video_ravg': 59.0}
09/17/2024 00:13:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 49--===========

09/17/2024 00:13:21 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/70.9/79.6', 'video_ravg': 67.1}
09/17/2024 00:13:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 49=======

09/17/2024 00:13:21 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/70.9/79.6', 'video_ravg': 67.1}
[h264 @ 0x55d417836ac0] mmco: unref short failure
[h264 @ 0x55d417836ac0] mmco: unref short failure
[h264 @ 0x559f8aa27300] mmco: unref short failure
[h264 @ 0x559f8aa27300] mmco: unref short failure
[h264 @ 0x55928ba196c0] mmco: unref short failure
[h264 @ 0x5592a20e2840] mmco: unref short failure
[h264 @ 0x5592a20e2840] mmco: unref short failure
[h264 @ 0x55d4099777c0] mmco: unref short failure
09/17/2024 00:14:16 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.010800029151141644, 'loss_ret%tv%ta--finetune_area/loss_area': 4.077942371368408, 'loss_ret%tv%ta--finetune_area/total_loss': 4.088742256164551}
[h264 @ 0x55d416d26800] mmco: unref short failure
  3%|▎         | 50/1455 [33:59<68:38:22, 175.87s/it]  4%|▎         | 51/1455 [34:06<48:50:10, 125.22s/it][h264 @ 0x555f4831a480] mmco: unref short failure
  4%|▎         | 52/1455 [34:13<35:01:21, 89.87s/it] [h264 @ 0x559f7c6b3c40] mmco: unref short failure
[h264 @ 0x555f490aec40] mmco: unref short failure
[h264 @ 0x55929be6cf80] mmco: unref short failure
[h264 @ 0x55929be6cf80] mmco: unref short failure
[h264 @ 0x55928eb9f100] mmco: unref short failure
  4%|▎         | 53/1455 [34:21<25:23:36, 65.20s/it]  4%|▎         | 54/1455 [34:29<18:39:18, 47.94s/it][h264 @ 0x559f61222dc0] mmco: unref short failure
[h264 @ 0x555f29255f40] mmco: unref short failure
[h264 @ 0x559f797dd7c0] mmco: unref short failure
  4%|▍         | 55/1455 [34:37<14:00:57, 36.04s/it]  4%|▍         | 56/1455 [34:45<10:46:33, 27.73s/it][h264 @ 0x55927e944180] mmco: unref short failure
[h264 @ 0x55927e944180] mmco: unref short failure
  4%|▍         | 57/1455 [34:55<8:37:59, 22.23s/it] [h264 @ 0x55929d0acb00] mmco: unref short failure
[h264 @ 0x55929d0acb00] mmco: unref short failure
09/17/2024 00:15:24 - INFO - __main__ -   current idx 6_p3rXnYE3Y.137 from finetune_area returns wrong image/video, use 112544 instead.
  4%|▍         | 58/1455 [35:03<7:02:16, 18.14s/it][h264 @ 0x5592aa743740] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
[h264 @ 0x55d41b2c4d40] mmco: unref short failure
  4%|▍         | 59/1455 [35:12<5:58:29, 15.41s/it][h264 @ 0x555f328f8380] mmco: unref short failure
[h264 @ 0x555f328f8380] mmco: unref short failure
[h264 @ 0x555f328f8380] mmco: unref short failure
[h264 @ 0x555f328f8380] mmco: unref short failure
  4%|▍         | 60/1455 [35:21<5:12:30, 13.44s/it][h264 @ 0x5592a7e6df80] mmco: unref short failure
[h264 @ 0x5592a7e6df80] mmco: unref short failure
[h264 @ 0x55929f6c46c0] mmco: unref short failure
[h264 @ 0x55d42f7ae6c0] mmco: unref short failure
[h264 @ 0x55d42f7ae6c0] mmco: unref short failure
  4%|▍         | 61/1455 [35:30<4:37:34, 11.95s/it]  4%|▍         | 62/1455 [35:38<4:13:12, 10.91s/it]  4%|▍         | 63/1455 [35:47<4:00:33, 10.37s/it]  4%|▍         | 64/1455 [35:56<3:48:47,  9.87s/it][h264 @ 0x559f77ce5940] mmco: unref short failure
  4%|▍         | 65/1455 [36:04<3:38:23,  9.43s/it][h264 @ 0x555f31286d80] mmco: unref short failure
[h264 @ 0x555f369aa1c0] mmco: unref short failure
[h264 @ 0x555f369aa1c0] mmco: unref short failure
[h264 @ 0x559286682440] mmco: unref short failure
[h264 @ 0x5592a353bec0] mmco: unref short failure
[h264 @ 0x5592a353bec0] mmco: unref short failure
[h264 @ 0x555f5e5f3d80] mmco: unref short failure
[h264 @ 0x555f4a5d5300] mmco: unref short failure
[h264 @ 0x55928b2c6040] mmco: unref short failure
[h264 @ 0x55928b2c6040] mmco: unref short failure
[h264 @ 0x55d413657a80] mmco: unref short failure
[h264 @ 0x55d413657a80] mmco: unref short failure
[h264 @ 0x55d413657a80] mmco: unref short failure
[h264 @ 0x55d413657a80] mmco: unref short failure
[h264 @ 0x559f6e757500] mmco: unref short failure
[h264 @ 0x559f6e757500] mmco: unref short failure
[h264 @ 0x555f5b514140] mmco: unref short failure
[h264 @ 0x555f5b514140] mmco: unref short failure
[h264 @ 0x559f8321b980] mmco: unref short failure
[h264 @ 0x559f8321b980] mmco: unref short failure
[h264 @ 0x559f8321b980] mmco: unref short failure
[h264 @ 0x559f8209b800] mmco: unref short failure
[h264 @ 0x55d40d7c8500] mmco: unref short failure
[h264 @ 0x55d40d7c8500] mmco: unref short failure
[h264 @ 0x5592a5628e00] mmco: unref short failure
[h264 @ 0x559f5d56b5c0] mmco: unref short failure
[h264 @ 0x559f5d56b5c0] mmco: unref short failure
[h264 @ 0x55d41b2c51c0] mmco: unref short failure
[h264 @ 0x559f6bb770c0] mmco: unref short failure
[h264 @ 0x559f6bb770c0] mmco: unref short failure
[h264 @ 0x555f38463140] mmco: unref short failure
[h264 @ 0x559f7dab4180] mmco: unref short failure
[h264 @ 0x55d4364fb540] mmco: unref short failure
[h264 @ 0x55d4364fb540] mmco: unref short failure
[h264 @ 0x5592af1ee700] mmco: unref short failure
[h264 @ 0x5592af1ee700] mmco: unref short failure
[h264 @ 0x5592af1ee700] mmco: unref short failure
[h264 @ 0x5592af1ee700] mmco: unref short failure
[h264 @ 0x5592af1ee700] mmco: unref short failure
[h264 @ 0x55927e1f2540] mmco: unref short failure
[h264 @ 0x5592a00bd3c0] mmco: unref short failure
[h264 @ 0x5592a00bd3c0] mmco: unref short failure
[h264 @ 0x5592a00bd3c0] mmco: unref short failure
  5%|▍         | 66/1455 [37:59<15:50:19, 41.05s/it]09/17/2024 00:18:27 - INFO - __main__ -   current idx MVC6nKCrOgI.12 from finetune_area returns wrong image/video, use 146516 instead.
09/17/2024 00:18:30 - INFO - __main__ -   current idx fwdyHxHBek4.10 from finetune_area returns wrong image/video, use 98069 instead.
[h264 @ 0x559f81d3d780] mmco: unref short failure
[h264 @ 0x559f81d3d780] mmco: unref short failure
[h264 @ 0x55927dc45940] mmco: unref short failure
[h264 @ 0x55929d481080] mmco: unref short failure
09/17/2024 00:18:58 - INFO - __main__ -   current idx Xlq5RVCHKWg.8 from finetune_area returns wrong image/video, use 129870 instead.
09/17/2024 00:19:02 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 3831 instead.
[h264 @ 0x559f8925f840] mmco: unref short failure
  5%|▍         | 67/1455 [38:43<16:07:50, 41.84s/it][h264 @ 0x555f35942080] mmco: unref short failure
[h264 @ 0x555f35942080] mmco: unref short failure
[h264 @ 0x555f35942080] mmco: unref short failure
[h264 @ 0x555f35942080] mmco: unref short failure
[h264 @ 0x555f35942080] mmco: unref short failure
[h264 @ 0x555f4d709d00] mmco: unref short failure
[h264 @ 0x555f4d709d00] mmco: unref short failure
09/17/2024 00:19:13 - INFO - __main__ -   current idx dIAiCVZ5tEo.28 from finetune_area returns wrong image/video, use 130239 instead.
  5%|▍         | 68/1455 [38:52<12:21:23, 32.07s/it][h264 @ 0x555f265c6bc0] mmco: unref short failure
[h264 @ 0x555f265c6bc0] mmco: unref short failure
[h264 @ 0x555f4a55eb80] mmco: unref short failure
[h264 @ 0x555f4a55eb80] mmco: unref short failure
[h264 @ 0x55927e357440] mmco: unref short failure
[h264 @ 0x55927e357440] mmco: unref short failure
  5%|▍         | 69/1455 [39:28<12:46:45, 33.19s/it]  5%|▍         | 70/1455 [39:37<10:01:06, 26.04s/it]  5%|▍         | 71/1455 [39:46<7:59:56, 20.81s/it]   5%|▍         | 72/1455 [39:55<6:39:48, 17.35s/it][h264 @ 0x559f908061c0] mmco: unref short failure
[h264 @ 0x559f908061c0] mmco: unref short failure
  5%|▌         | 73/1455 [40:04<5:38:43, 14.71s/it][h264 @ 0x559294f6f440] mmco: unref short failure
[h264 @ 0x559f80739080] mmco: unref short failure
[h264 @ 0x559f80739080] mmco: unref short failure
[h264 @ 0x559f721c9f40] mmco: unref short failure
09/17/2024 00:20:45 - INFO - __main__ -   current idx gtp43VGk4b0.59 from finetune_area returns wrong image/video, use 12424 instead.
[h264 @ 0x55d433cb8240] mmco: unref short failure
[h264 @ 0x55d433cb8240] mmco: unref short failure
[h264 @ 0x555f42519f80] mmco: unref short failure
[h264 @ 0x555f42519f80] mmco: unref short failure
[h264 @ 0x559f84bf5140] mmco: unref short failure
[h264 @ 0x559f85f1c840] mmco: unref short failure
[h264 @ 0x559281dff240] mmco: unref short failure
[h264 @ 0x559281dff240] mmco: unref short failure
[h264 @ 0x55d414f96cc0] mmco: unref short failure
[h264 @ 0x55d414f96cc0] mmco: unref short failure
[h264 @ 0x55d414f96cc0] mmco: unref short failure
[h264 @ 0x55d414f96cc0] mmco: unref short failure
[h264 @ 0x559293e353c0] mmco: unref short failure
[h264 @ 0x559293e353c0] mmco: unref short failure
[h264 @ 0x559f79f1d300] mmco: unref short failure
[h264 @ 0x559f79f1d300] mmco: unref short failure
[h264 @ 0x55929543e6c0] mmco: unref short failure
[h264 @ 0x55d421718540] mmco: unref short failure
[h264 @ 0x55d421718540] mmco: unref short failure
[h264 @ 0x5592a1c83b40] mmco: unref short failure
[h264 @ 0x5592a1c83b40] mmco: unref short failure
[h264 @ 0x55927e0bb200] mmco: unref short failure
[h264 @ 0x55927e0bb200] mmco: unref short failure
[h264 @ 0x559f598f9e40] mmco: unref short failure
[h264 @ 0x559f598f9e40] mmco: unref short failure
[h264 @ 0x555f4903c440] mmco: unref short failure
[h264 @ 0x555f4903c440] mmco: unref short failure
[h264 @ 0x559f599a2bc0] mmco: unref short failure
[h264 @ 0x559f599a2bc0] mmco: unref short failure
[h264 @ 0x559f8aa27700] mmco: unref short failure
[h264 @ 0x559f905e79c0] mmco: unref short failure
[h264 @ 0x559f905e79c0] mmco: unref short failure
[h264 @ 0x555f556f9340] mmco: unref short failure
[h264 @ 0x55d40d3d41c0] mmco: unref short failure
[h264 @ 0x55d40d3d41c0] mmco: unref short failure
[h264 @ 0x55d40d3d41c0] mmco: unref short failure
[h264 @ 0x55d40d3d41c0] mmco: unref short failure
[h264 @ 0x5592a366c3c0] mmco: unref short failure
[h264 @ 0x5592a366c3c0] mmco: unref short failure
[h264 @ 0x559f8a9aca00] mmco: unref short failure
09/17/2024 00:22:37 - INFO - __main__ -   current idx 7rNZakrnk74.48 from finetune_area returns wrong image/video, use 103551 instead.
[h264 @ 0x55d42a503d00] mmco: unref short failure
[h264 @ 0x55d42a503d00] mmco: unref short failure
[h264 @ 0x555f4a2b3f40] mmco: unref short failure
[h264 @ 0x555f4a2b3f40] mmco: unref short failure
[h264 @ 0x5592ab5e2c00] mmco: unref short failure
  5%|▌         | 74/1455 [42:57<23:54:47, 62.34s/it][h264 @ 0x559f7d077340] mmco: unref short failure
[h264 @ 0x559f7d077340] mmco: unref short failure
[h264 @ 0x559f5e0bf900] mmco: unref short failure
09/17/2024 00:23:23 - INFO - __main__ -   current idx DYY8KovKO3M.52 from finetune_area returns wrong image/video, use 94988 instead.
[h264 @ 0x55d4342ec9c0] mmco: unref short failure
09/17/2024 00:23:50 - INFO - __main__ -   current idx 3xMq89jLDYE.29 from finetune_area returns wrong image/video, use 23610 instead.
[h264 @ 0x5592a18a7dc0] mmco: unref short failure
[h264 @ 0x5592a18a7dc0] mmco: unref short failure
[h264 @ 0x55d431656380] mmco: unref short failure
[h264 @ 0x55929b163400] mmco: unref short failure
[h264 @ 0x55d403fe2500] mmco: unref short failure
[h264 @ 0x559287ad1880] mmco: unref short failure
[h264 @ 0x55d42a4ccf80] mmco: unref short failure
[h264 @ 0x559281a7e2c0] mmco: unref short failure
[h264 @ 0x559281a7e2c0] mmco: unref short failure
[h264 @ 0x5592a4791d00] mmco: unref short failure
[h264 @ 0x555f25c221c0] mmco: unref short failure
[h264 @ 0x555f25c221c0] mmco: unref short failure
  5%|▌         | 75/1455 [43:54<23:18:04, 60.79s/it][h264 @ 0x559f85568100] mmco: unref short failure
[h264 @ 0x559f85568100] mmco: unref short failure
[h264 @ 0x55929543e240] mmco: unref short failure
[h264 @ 0x5592a3665e40] mmco: unref short failure
09/17/2024 00:24:24 - INFO - __main__ -   current idx dMEgMG6TS3c.6 from finetune_area returns wrong image/video, use 104114 instead.
  5%|▌         | 76/1455 [44:04<17:24:41, 45.45s/it][h264 @ 0x555f4ee568c0] mmco: unref short failure
[h264 @ 0x555f4ee568c0] mmco: unref short failure
[h264 @ 0x555f58fe4d40] mmco: unref short failure
[h264 @ 0x555f58fe4d40] mmco: unref short failure
[h264 @ 0x555f58fe4d40] mmco: unref short failure
[h264 @ 0x555f58fe4d40] mmco: unref short failure
09/17/2024 00:24:31 - INFO - __main__ -   current idx rGthtRZl8B0.21 from finetune_area returns wrong image/video, use 50672 instead.
[h264 @ 0x55d431f3ec80] mmco: unref short failure
[h264 @ 0x559f5ad33e80] mmco: unref short failure
[h264 @ 0x559f5ad33e80] mmco: unref short failure
[h264 @ 0x559f5a057000] mmco: unref short failure
[h264 @ 0x555f26643240] mmco: unref short failure
  5%|▌         | 77/1455 [44:52<17:40:51, 46.19s/it]  5%|▌         | 78/1455 [45:01<13:25:22, 35.09s/it][h264 @ 0x555f502fc4c0] mmco: unref short failure
[h264 @ 0x555f502fc4c0] mmco: unref short failure
[h264 @ 0x555f33386b00] mmco: unref short failure
[h264 @ 0x555f33386b00] mmco: unref short failure
[h264 @ 0x5592a875e5c0] mmco: unref short failure
[h264 @ 0x5592a875e5c0] mmco: unref short failure
[h264 @ 0x559f7c8e64c0] mmco: unref short failure
[h264 @ 0x559f7c8e64c0] mmco: unref short failure
  5%|▌         | 79/1455 [45:09<10:20:58, 27.08s/it][h264 @ 0x559f5d054500] mmco: unref short failure
[h264 @ 0x559f5d054500] mmco: unref short failure
09/17/2024 00:25:36 - INFO - __main__ -   current idx nCOpzvA0wgE.12 from finetune_area returns wrong image/video, use 140700 instead.
[h264 @ 0x55d408471600] mmco: unref short failure
[h264 @ 0x55d408471600] mmco: unref short failure
[h264 @ 0x55d41343c940] mmco: unref short failure
[h264 @ 0x55d41343c940] mmco: unref short failure
[h264 @ 0x559f5d71dbc0] mmco: unref short failure
[h264 @ 0x55d4178f4580] mmco: unref short failure
[h264 @ 0x55d4178f4580] mmco: unref short failure
[h264 @ 0x559280504180] mmco: unref short failure
[h264 @ 0x559f8fb64a40] mmco: unref short failure
[h264 @ 0x559f8fb64a40] mmco: unref short failure
[h264 @ 0x559f8fb64a40] mmco: unref short failure
[h264 @ 0x559f8fb64a40] mmco: unref short failure
[h264 @ 0x559f8b7b17c0] mmco: unref short failure
[h264 @ 0x559f8b7b17c0] mmco: unref short failure
[h264 @ 0x559f8b7b17c0] mmco: unref short failure
[h264 @ 0x559f8b7b17c0] mmco: unref short failure
[h264 @ 0x555f36961700] mmco: unref short failure
[h264 @ 0x555f36961700] mmco: unref short failure
[h264 @ 0x559294f6f640] mmco: unref short failure
[h264 @ 0x559294f6f640] mmco: unref short failure
09/17/2024 00:26:32 - INFO - __main__ -   current idx 7OpYRTupJJ0.44 from finetune_area returns wrong image/video, use 143088 instead.
[h264 @ 0x559f697a9a40] mmco: unref short failure
[h264 @ 0x559292edde00] mmco: unref short failure
[h264 @ 0x55d40376c4c0] mmco: unref short failure
[h264 @ 0x55d4375e8700] mmco: unref short failure
[h264 @ 0x55d4375e8700] mmco: unref short failure
[h264 @ 0x5592ac971600] mmco: unref short failure
[h264 @ 0x5592ac971600] mmco: unref short failure
[h264 @ 0x55d410bb7240] mmco: unref short failure
[h264 @ 0x55d4119ac040] mmco: unref short failure
[h264 @ 0x55d4119ac040] mmco: unref short failure
[h264 @ 0x5592ab39cb40] mmco: unref short failure
[h264 @ 0x5592ab39cb40] mmco: unref short failure
  5%|▌         | 80/1455 [47:07<20:39:41, 54.10s/it][h264 @ 0x5592ad109fc0] mmco: unref short failure
[h264 @ 0x5592ad109fc0] mmco: unref short failure
[h264 @ 0x55d438e23180] mmco: unref short failure
[h264 @ 0x55d438e23180] mmco: unref short failure
  6%|▌         | 81/1455 [47:16<15:31:27, 40.67s/it][h264 @ 0x555f5639a1c0] mmco: unref short failure
[h264 @ 0x555f5639a1c0] mmco: unref short failure
[h264 @ 0x555f5639a1c0] mmco: unref short failure
[h264 @ 0x555f5639a1c0] mmco: unref short failure
[h264 @ 0x55929b15ea00] mmco: unref short failure
[h264 @ 0x55929b15ea00] mmco: unref short failure
[h264 @ 0x5592844e1900] mmco: unref short failure
[h264 @ 0x5592844e1900] mmco: unref short failure
[h264 @ 0x5592844e1900] mmco: unref short failure
[h264 @ 0x555f25c21d40] mmco: unref short failure
[h264 @ 0x555f25c21d40] mmco: unref short failure
[h264 @ 0x555f25c21d40] mmco: unref short failure
[h264 @ 0x555f25c21d40] mmco: unref short failure
[h264 @ 0x55d433929580] mmco: unref short failure
[h264 @ 0x555f28b77400] mmco: unref short failure
[h264 @ 0x555f28b77400] mmco: unref short failure
[h264 @ 0x55d402930600] mmco: unref short failure
[h264 @ 0x55d402930600] mmco: unref short failure
[h264 @ 0x55d434241980] mmco: unref short failure
[h264 @ 0x55d434241980] mmco: unref short failure
  6%|▌         | 82/1455 [48:04<16:20:24, 42.84s/it][h264 @ 0x55d4318af000] mmco: unref short failure
[h264 @ 0x55d4318af000] mmco: unref short failure
[h264 @ 0x55d403777600] mmco: unref short failure
[h264 @ 0x559f5c122e00] mmco: unref short failure
[h264 @ 0x559f5c122e00] mmco: unref short failure
[h264 @ 0x559f5c122e00] mmco: unref short failure
[h264 @ 0x559f5c122e00] mmco: unref short failure
[h264 @ 0x55d402ff6a40] mmco: unref short failure
[h264 @ 0x55d402ff6a40] mmco: unref short failure
[h264 @ 0x55d402ff6a40] mmco: unref short failure
[h264 @ 0x559f5a059280] mmco: unref short failure
[h264 @ 0x559f5a059280] mmco: unref short failure
[h264 @ 0x55d41343d280] mmco: unref short failure
[h264 @ 0x55d41343d280] mmco: unref short failure
[h264 @ 0x55d402665900] mmco: unref short failure
[h264 @ 0x559f59e38a00] mmco: unref short failure
[h264 @ 0x55d4318af400] mmco: unref short failure
[h264 @ 0x55d4318af400] mmco: unref short failure
[h264 @ 0x559f686acdc0] mmco: unref short failure
[h264 @ 0x55d41ac83280] mmco: unref short failure
[h264 @ 0x55d41ac83280] mmco: unref short failure
[h264 @ 0x559f84c7d6c0] mmco: unref short failure
[h264 @ 0x559f84c7d6c0] mmco: unref short failure
[h264 @ 0x5592a46c6ac0] mmco: unref short failure
[h264 @ 0x5592a46c6ac0] mmco: unref short failure
[h264 @ 0x559f8791f5c0] mmco: unref short failure
[h264 @ 0x559f8791f5c0] mmco: unref short failure
09/17/2024 00:29:18 - INFO - __main__ -   current idx 6wN4IYAiKIg.70 from finetune_area returns wrong image/video, use 36022 instead.
  6%|▌         | 83/1455 [49:00<17:50:01, 46.79s/it][h264 @ 0x55927fb5ebc0] mmco: unref short failure
  6%|▌         | 84/1455 [49:09<13:31:32, 35.52s/it][h264 @ 0x555f3e70e6c0] mmco: unref short failure
[h264 @ 0x555f3e70e6c0] mmco: unref short failure
[h264 @ 0x55927f30ebc0] mmco: unref short failure
[h264 @ 0x555f381f5c80] mmco: unref short failure
[h264 @ 0x555f381f5c80] mmco: unref short failure
09/17/2024 00:29:47 - INFO - __main__ -   current idx Yy-gLEskjRc.46 from finetune_area returns wrong image/video, use 78565 instead.
[h264 @ 0x55d402954dc0] mmco: unref short failure
[h264 @ 0x55d402954dc0] mmco: unref short failure
[h264 @ 0x559f7d6a4f80] mmco: unref short failure
[h264 @ 0x55d40d3d4440] mmco: unref short failure
[h264 @ 0x55d40d3d4440] mmco: unref short failure
[h264 @ 0x555f266d2a00] mmco: unref short failure
[h264 @ 0x555f266d2a00] mmco: unref short failure
[h264 @ 0x5592ac13d880] mmco: unref short failure
[h264 @ 0x5592ac13d880] mmco: unref short failure
  6%|▌         | 85/1455 [49:53<14:29:12, 38.07s/it][h264 @ 0x555f369ec140] mmco: unref short failure
[h264 @ 0x55d4178f4cc0] mmco: unref short failure
[h264 @ 0x55d4178f4cc0] mmco: unref short failure
  6%|▌         | 86/1455 [50:02<11:11:23, 29.43s/it]09/17/2024 00:30:25 - INFO - __main__ -   current idx cdG0MaKc36M.46 from finetune_area returns wrong image/video, use 114247 instead.
[h264 @ 0x55d40706ae40] mmco: unref short failure
[h264 @ 0x555f321a60c0] mmco: unref short failure
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f5a75a4c0] mmco: unref short failure
[h264 @ 0x555f5a75a4c0] mmco: unref short failure
  6%|▌         | 87/1455 [50:11<8:51:59, 23.33s/it] [h264 @ 0x555f5a75a4c0] mmco: unref short failure
[h264 @ 0x555f5a75a4c0] mmco: unref short failure
[h264 @ 0x555f4fd4a4c0] mmco: unref short failure
[h264 @ 0x559f8ef61740] mmco: unref short failure
[h264 @ 0x559f6e954a00] mmco: unref short failure
[h264 @ 0x55d42f74cf80] mmco: unref short failure
[h264 @ 0x55d42f74cf80] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x555f29fe0000] mmco: unref short failure
[h264 @ 0x55d41c434200] mmco: unref short failure
[h264 @ 0x559294e4b8c0] mmco: unref short failure
[h264 @ 0x559294e4b8c0] mmco: unref short failure
[h264 @ 0x555f5699aa00] mmco: unref short failure
[h264 @ 0x555f5699aa00] mmco: unref short failure
[h264 @ 0x559299eed680] mmco: unref short failure
[h264 @ 0x55927eba6dc0] mmco: unref short failure
[h264 @ 0x55927eba6dc0] mmco: unref short failure
[h264 @ 0x55927eba6dc0] mmco: unref short failure
[h264 @ 0x55927eba6dc0] mmco: unref short failure
[h264 @ 0x555f39221c40] mmco: unref short failure
[h264 @ 0x559f85f06b00] mmco: unref short failure
[h264 @ 0x559f85f06b00] mmco: unref short failure
[h264 @ 0x55d421718300] mmco: unref short failure
[h264 @ 0x55d421718300] mmco: unref short failure
[h264 @ 0x55d417d1ad00] mmco: unref short failure
[h264 @ 0x55d417d1ad00] mmco: unref short failure
[h264 @ 0x559f5aadc540] mmco: unref short failure
[h264 @ 0x559f5aadc540] mmco: unref short failure
[h264 @ 0x559f5aadc540] mmco: unref short failure
[h264 @ 0x559f6103a8c0] mmco: unref short failure
[h264 @ 0x559f6103a8c0] mmco: unref short failure
[h264 @ 0x559f72855ac0] mmco: unref short failure
[h264 @ 0x559f72855ac0] mmco: unref short failure
[h264 @ 0x555f2dc16ec0] mmco: unref short failure
[h264 @ 0x555f2dc16ec0] mmco: unref short failure
[h264 @ 0x559f7854d1c0] mmco: unref short failure
[h264 @ 0x559f7854d1c0] mmco: unref short failure
  6%|▌         | 88/1455 [52:11<19:45:58, 52.05s/it][h264 @ 0x55929558ed80] mmco: unref short failure
[h264 @ 0x55d422e06c40] mmco: unref short failure
[h264 @ 0x55d422e06c40] mmco: unref short failure
  6%|▌         | 89/1455 [52:19<14:49:23, 39.07s/it][h264 @ 0x5592af80a740] mmco: unref short failure
[h264 @ 0x5592af80a740] mmco: unref short failure
[h264 @ 0x559f80813880] mmco: unref short failure
[h264 @ 0x559f5b8bb100] mmco: unref short failure
[h264 @ 0x559f5b8bb100] mmco: unref short failure
[h264 @ 0x55927f30e4c0] mmco: unref short failure
[h264 @ 0x55927f30e4c0] mmco: unref short failure
[h264 @ 0x559f6d7bd0c0] mmco: unref short failure
[h264 @ 0x55d42fe5d600] mmco: unref short failure
  6%|▌         | 90/1455 [53:06<15:43:37, 41.48s/it][h264 @ 0x555f282e2c40] mmco: unref short failure
[h264 @ 0x555f282e2c40] mmco: unref short failure
09/17/2024 00:33:38 - INFO - __main__ -   current idx eYV2bd-oyoQ.13 from finetune_area returns wrong image/video, use 23496 instead.
[h264 @ 0x55927f313d00] mmco: unref short failure
[h264 @ 0x55927f313d00] mmco: unref short failure
[h264 @ 0x55927f313d00] mmco: unref short failure
[h264 @ 0x55927f313d00] mmco: unref short failure
[h264 @ 0x559280e960c0] mmco: unref short failure
[h264 @ 0x559280e960c0] mmco: unref short failure
[h264 @ 0x55929d18f580] mmco: unref short failure
[h264 @ 0x559290704140] mmco: unref short failure
[h264 @ 0x559290704140] mmco: unref short failure
[h264 @ 0x559290704140] mmco: unref short failure
[h264 @ 0x559290704140] mmco: unref short failure
[h264 @ 0x559f5a1ae2c0] mmco: unref short failure
not have audios 8-qwaveiHMM.3
  6%|▋         | 91/1455 [54:03<17:27:26, 46.08s/it]  6%|▋         | 92/1455 [54:12<13:12:36, 34.89s/it][h264 @ 0x559f61ab4600] mmco: unref short failure
[h264 @ 0x559f61ab4600] mmco: unref short failure
[h264 @ 0x559f61ab4600] mmco: unref short failure
[h264 @ 0x555f326f6e80] mmco: unref short failure
[h264 @ 0x555f326f6e80] mmco: unref short failure
[h264 @ 0x55d4342ecc40] mmco: unref short failure
[h264 @ 0x55d40366a7c0] mmco: unref short failure
[h264 @ 0x55d40366a7c0] mmco: unref short failure
[h264 @ 0x559f82e50500] mmco: unref short failure
[h264 @ 0x559f74ad5f40] mmco: unref short failure
[h264 @ 0x559f74ad5f40] mmco: unref short failure
  6%|▋         | 93/1455 [54:46<13:02:39, 34.48s/it][h264 @ 0x5592864c30c0] mmco: unref short failure
[h264 @ 0x5592864c30c0] mmco: unref short failure
09/17/2024 00:35:10 - INFO - __main__ -   current idx 988Ksd7axRY.8 from finetune_area returns wrong image/video, use 61128 instead.
[h264 @ 0x555f3bb98f00] mmco: unref short failure
[h264 @ 0x555f3bb98f00] mmco: unref short failure
[h264 @ 0x555f3bb98f00] mmco: unref short failure
[h264 @ 0x555f3bb98f00] mmco: unref short failure
[h264 @ 0x55d407105fc0] mmco: unref short failure
  6%|▋         | 94/1455 [54:54<10:04:40, 26.66s/it][h264 @ 0x559f6b2cd400] mmco: unref short failure
09/17/2024 00:35:20 - INFO - __main__ -   current idx 9W2zPcc4Kl8.5 from finetune_area returns wrong image/video, use 32821 instead.
  7%|▋         | 95/1455 [55:03<8:07:07, 21.49s/it] 09/17/2024 00:35:25 - INFO - __main__ -   current idx 6oFC5O_u-SI.107 from finetune_area returns wrong image/video, use 118102 instead.
[h264 @ 0x55929d95b5c0] mmco: unref short failure
[h264 @ 0x55928f7fbb40] mmco: unref short failure
[h264 @ 0x55928db52e40] mmco: unref short failure
[h264 @ 0x55928db52e40] mmco: unref short failure
[h264 @ 0x555f279b2740] mmco: unref short failure
[h264 @ 0x555f279b2740] mmco: unref short failure
[h264 @ 0x559f73094e00] mmco: unref short failure
[h264 @ 0x559f73094e00] mmco: unref short failure
[h264 @ 0x55927e022b80] mmco: unref short failure
[h264 @ 0x5592b0853680] mmco: unref short failure
[h264 @ 0x555f502fcbc0] mmco: unref short failure
[h264 @ 0x559f8e9e5600] mmco: unref short failure
[h264 @ 0x555f2d5a7280] mmco: unref short failure
[h264 @ 0x555f2b7a0e00] mmco: unref short failure
[h264 @ 0x555f2b7a0e00] mmco: unref short failure
[h264 @ 0x55d4342ec300] mmco: unref short failure
[h264 @ 0x559f8226edc0] mmco: unref short failure
[h264 @ 0x5592a96056c0] mmco: unref short failure
[h264 @ 0x5592a96056c0] mmco: unref short failure
[h264 @ 0x555f30b7dac0] mmco: unref short failure
[h264 @ 0x555f30b7dac0] mmco: unref short failure
[h264 @ 0x5592a96056c0] mmco: unref short failure
[h264 @ 0x5592a96056c0] mmco: unref short failure
[h264 @ 0x559f5ddcb580] mmco: unref short failure
[h264 @ 0x559f5ddcb580] mmco: unref short failure
[h264 @ 0x555f2b7a0980] mmco: unref short failure
[h264 @ 0x5592abc3ec40] mmco: unref short failure
[h264 @ 0x5592abc3ec40] mmco: unref short failure
[h264 @ 0x55d424318200] mmco: unref short failure
[h264 @ 0x555f26b45680] mmco: unref short failure
[h264 @ 0x555f26b45680] mmco: unref short failure
[h264 @ 0x559f706da680] mmco: unref short failure
[h264 @ 0x559f62803940] mmco: unref short failure
[h264 @ 0x555f29608d00] mmco: unref short failure
[h264 @ 0x555f29608d00] mmco: unref short failure
[h264 @ 0x559f6fa2f640] mmco: unref short failure
[h264 @ 0x55d4284539c0] mmco: unref short failure
[h264 @ 0x55928428e2c0] mmco: unref short failure
[h264 @ 0x55928428e2c0] mmco: unref short failure
[h264 @ 0x559f7330aec0] mmco: unref short failure
[h264 @ 0x559f7330aec0] mmco: unref short failure
[h264 @ 0x559f8390d840] mmco: unref short failure
[h264 @ 0x55d407105d40] mmco: unref short failure
[h264 @ 0x55d407105d40] mmco: unref short failure
  7%|▋         | 96/1455 [57:16<20:44:05, 54.93s/it][h264 @ 0x559288ab66c0] mmco: unref short failure
[h264 @ 0x559f5b8baf00] mmco: unref short failure
[h264 @ 0x559f5b8baf00] mmco: unref short failure
  7%|▋         | 97/1455 [57:25<15:32:00, 41.18s/it][h264 @ 0x555f4fd4a980] mmco: unref short failure
[h264 @ 0x555f4fd4a980] mmco: unref short failure
[h264 @ 0x55928f7fc280] mmco: unref short failure
[h264 @ 0x55928f7fc280] mmco: unref short failure
[h264 @ 0x55d413442800] mmco: unref short failure
[h264 @ 0x55d413442800] mmco: unref short failure
[h264 @ 0x5592a18da900] mmco: unref short failure
[h264 @ 0x5592a18da900] mmco: unref short failure
[h264 @ 0x559f59f47cc0] mmco: unref short failure
  7%|▋         | 98/1455 [58:09<15:48:54, 41.96s/it][h264 @ 0x55d4324995c0] mmco: unref short failure
[h264 @ 0x55d4324995c0] mmco: unref short failure
[h264 @ 0x559f5a0bb6c0] mmco: unref short failure
[h264 @ 0x55d4220a3640] mmco: unref short failure
[h264 @ 0x55d4220a3640] mmco: unref short failure
[h264 @ 0x5592a23be180] mmco: unref short failure
[h264 @ 0x5592a23be180] mmco: unref short failure
[h264 @ 0x559f5a233940] mmco: unref short failure
  7%|▋         | 99/1455 [58:58<16:34:28, 44.00s/it]09/17/2024 00:39:20 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 00:39:20 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f61f434c0] mmco: unref short failure
[h264 @ 0x55929b42e000] mmco: unref short failure
[h264 @ 0x55929b42e000] mmco: unref short failure
09/17/2024 00:39:40 - INFO - __main__ -   current idx bdHJRIWkgos.39 from finetune_area returns wrong image/video, use 53009 instead.
not have audios 7wavFXW3AFw.7
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f8070c340] mmco: unref short failure
[h264 @ 0x559f8070c340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555f31b943c0] mmco: unref short failure
[h264 @ 0x555f31b943c0] mmco: unref short failure
[h264 @ 0x555f2a8255c0] mmco: unref short failure
[h264 @ 0x555f2a8255c0] mmco: unref short failure
[h264 @ 0x555f2a8255c0] mmco: unref short failure
[h264 @ 0x555f2a8255c0] mmco: unref short failure
[h264 @ 0x559f62803e00] mmco: unref short failure
[h264 @ 0x559f62803e00] mmco: unref short failure
[h264 @ 0x55d41b2158c0] mmco: unref short failure
[h264 @ 0x55d415cd9280] mmco: unref short failure
[h264 @ 0x55d415cd9280] mmco: unref short failure
[h264 @ 0x55927fdb5800] mmco: unref short failure
[h264 @ 0x55927fdb5800] mmco: unref short failure
09/17/2024 00:41:34 - INFO - __main__ -   current idx 0GZSfBuhf6Y.63 from finetune_area returns wrong image/video, use 95559 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:01,  1.82it/s][A
  1%|          | 2/221 [00:00<01:44,  2.09it/s][A
  1%|▏         | 3/221 [00:01<01:43,  2.10it/s][A
  2%|▏         | 4/221 [00:01<01:19,  2.72it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 6/221 [00:02<00:57,  3.75it/s][A
  3%|▎         | 7/221 [00:02<00:53,  4.00it/s][A
  4%|▎         | 8/221 [00:02<00:52,  4.09it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.80it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A
  5%|▍         | 11/221 [00:03<01:08,  3.08it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.21it/s][A[h264 @ 0x559f8033b140] mmco: unref short failure
[h264 @ 0x559f8033b140] mmco: unref short failure

  6%|▌         | 13/221 [00:04<00:57,  3.61it/s][A
  6%|▋         | 14/221 [00:04<00:55,  3.73it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.75it/s][A
  7%|▋         | 16/221 [00:05<01:08,  2.98it/s][A
  8%|▊         | 17/221 [00:05<01:25,  2.37it/s][A
  8%|▊         | 18/221 [00:06<01:18,  2.60it/s][A
  9%|▊         | 19/221 [00:06<01:04,  3.14it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.61it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.42it/s][A
 10%|▉         | 22/221 [00:07<01:07,  2.95it/s][A
 11%|█         | 24/221 [00:07<00:48,  4.05it/s][A
 11%|█▏        | 25/221 [00:07<00:47,  4.09it/s][A
 12%|█▏        | 26/221 [00:08<00:55,  3.51it/s][A[h264 @ 0x555f50ccb9c0] mmco: unref short failure
[h264 @ 0x555f50ccb9c0] mmco: unref short failure

 13%|█▎        | 28/221 [00:08<01:01,  3.12it/s][A
 13%|█▎        | 29/221 [00:09<01:02,  3.06it/s][A
 14%|█▎        | 30/221 [00:09<01:06,  2.88it/s][A
 14%|█▍        | 31/221 [00:09<01:03,  3.01it/s][A
 15%|█▍        | 33/221 [00:10<00:46,  4.01it/s][A
 16%|█▌        | 35/221 [00:10<00:39,  4.70it/s][A
 16%|█▋        | 36/221 [00:10<00:49,  3.74it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.34it/s][A
 17%|█▋        | 38/221 [00:11<01:00,  3.05it/s][A
 18%|█▊        | 39/221 [00:11<00:51,  3.51it/s][A
 18%|█▊        | 40/221 [00:12<00:51,  3.49it/s][A
 19%|█▊        | 41/221 [00:12<00:50,  3.56it/s][A
 19%|█▉        | 42/221 [00:12<01:04,  2.77it/s][A
 19%|█▉        | 43/221 [00:13<00:55,  3.22it/s][A
 20%|█▉        | 44/221 [00:13<00:51,  3.41it/s][A
 20%|██        | 45/221 [00:13<01:02,  2.82it/s][A
 21%|██        | 46/221 [00:14<00:54,  3.21it/s][A[h264 @ 0x559f8390dd00] mmco: unref short failure
[h264 @ 0x559f8390dd00] mmco: unref short failure
[h264 @ 0x559f8390dd00] mmco: unref short failure

 21%|██▏       | 47/221 [00:14<01:12,  2.41it/s][A
 22%|██▏       | 48/221 [00:15<01:03,  2.72it/s][A
 22%|██▏       | 49/221 [00:15<00:59,  2.87it/s][A
 23%|██▎       | 50/221 [00:15<00:57,  2.95it/s][A
 23%|██▎       | 51/221 [00:15<00:52,  3.24it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.32it/s][A
 24%|██▍       | 53/221 [00:16<00:44,  3.76it/s][A
 24%|██▍       | 54/221 [00:17<01:31,  1.83it/s][A
 25%|██▍       | 55/221 [00:17<01:24,  1.96it/s][A
 25%|██▌       | 56/221 [00:18<01:06,  2.46it/s][A
 26%|██▌       | 57/221 [00:18<00:57,  2.85it/s][A
 26%|██▌       | 58/221 [00:18<00:48,  3.35it/s][A
 27%|██▋       | 59/221 [00:18<00:42,  3.81it/s][A
 27%|██▋       | 60/221 [00:19<01:19,  2.04it/s][A
 28%|██▊       | 61/221 [00:20<01:11,  2.25it/s][A
 28%|██▊       | 62/221 [00:20<01:10,  2.27it/s][A
 29%|██▊       | 63/221 [00:20<01:01,  2.58it/s][A
 29%|██▉       | 64/221 [00:21<01:10,  2.22it/s][A
 29%|██▉       | 65/221 [00:21<00:59,  2.61it/s][A
 30%|██▉       | 66/221 [00:22<01:01,  2.50it/s][A
 30%|███       | 67/221 [00:22<00:52,  2.96it/s][A
 31%|███       | 68/221 [00:22<00:44,  3.45it/s][A
 31%|███       | 69/221 [00:23<01:11,  2.14it/s][A
 32%|███▏      | 70/221 [00:23<01:11,  2.12it/s][A
 32%|███▏      | 71/221 [00:24<01:08,  2.18it/s][A[h264 @ 0x559f6b886600] mmco: unref short failure

 33%|███▎      | 72/221 [00:24<01:11,  2.09it/s][A
 33%|███▎      | 73/221 [00:25<01:10,  2.09it/s][A
 33%|███▎      | 74/221 [00:25<00:55,  2.63it/s][A
 34%|███▍      | 75/221 [00:25<00:58,  2.51it/s][A
 34%|███▍      | 76/221 [00:26<00:50,  2.87it/s][A
 35%|███▍      | 77/221 [00:26<00:53,  2.67it/s][A
 35%|███▌      | 78/221 [00:26<00:48,  2.96it/s][A
 36%|███▌      | 79/221 [00:27<00:56,  2.52it/s][A
 36%|███▌      | 80/221 [00:27<00:50,  2.80it/s][A
 37%|███▋      | 81/221 [00:27<00:50,  2.77it/s][A
 37%|███▋      | 82/221 [00:28<00:50,  2.76it/s][A
 38%|███▊      | 83/221 [00:28<00:55,  2.47it/s][A
 38%|███▊      | 84/221 [00:29<00:52,  2.60it/s][A
 38%|███▊      | 85/221 [00:29<00:46,  2.94it/s][A
 39%|███▉      | 86/221 [00:29<00:40,  3.36it/s][A
 39%|███▉      | 87/221 [00:30<01:10,  1.91it/s][A
 40%|███▉      | 88/221 [00:31<01:16,  1.74it/s][A
 40%|████      | 89/221 [00:31<01:04,  2.03it/s][A
 41%|████      | 90/221 [00:31<00:57,  2.28it/s][A
 41%|████      | 91/221 [00:32<00:47,  2.74it/s][A
 42%|████▏     | 92/221 [00:32<00:41,  3.09it/s][A
 42%|████▏     | 93/221 [00:32<00:48,  2.63it/s][A
 43%|████▎     | 94/221 [00:33<00:45,  2.80it/s][A
 43%|████▎     | 95/221 [00:33<00:44,  2.81it/s][A
 43%|████▎     | 96/221 [00:34<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:34<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:35<01:01,  2.01it/s][A
 45%|████▍     | 99/221 [00:35<00:52,  2.33it/s][A
 45%|████▌     | 100/221 [00:35<00:47,  2.57it/s][A
 46%|████▌     | 101/221 [00:36<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:36<00:48,  2.47it/s][A
 47%|████▋     | 103/221 [00:36<00:38,  3.07it/s][A
 47%|████▋     | 104/221 [00:37<00:38,  3.02it/s][A
 48%|████▊     | 105/221 [00:37<00:37,  3.06it/s][A
 48%|████▊     | 106/221 [00:38<00:58,  1.96it/s][A
 48%|████▊     | 107/221 [00:38<00:54,  2.10it/s][A
 49%|████▉     | 108/221 [00:39<00:49,  2.27it/s][A
 49%|████▉     | 109/221 [00:39<00:48,  2.29it/s][A
 50%|████▉     | 110/221 [00:39<00:43,  2.54it/s][A
 50%|█████     | 111/221 [00:40<00:46,  2.34it/s][A
 51%|█████     | 112/221 [00:40<00:47,  2.28it/s][A
 51%|█████     | 113/221 [00:41<00:45,  2.38it/s][A
 52%|█████▏    | 114/221 [00:41<00:38,  2.79it/s][A
 52%|█████▏    | 115/221 [00:41<00:35,  3.03it/s][A[h264 @ 0x555f2b62b0c0] mmco: unref short failure
[h264 @ 0x555f2b62b0c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:42<00:44,  2.34it/s][A
 53%|█████▎    | 117/221 [00:42<00:43,  2.40it/s][A
 53%|█████▎    | 118/221 [00:42<00:38,  2.69it/s][A
 54%|█████▍    | 119/221 [00:43<00:37,  2.70it/s][A
 54%|█████▍    | 120/221 [00:43<00:30,  3.26it/s][A
 55%|█████▍    | 121/221 [00:43<00:25,  3.93it/s][A
 55%|█████▌    | 122/221 [00:43<00:27,  3.58it/s][A
 56%|█████▌    | 123/221 [00:44<00:25,  3.82it/s][A
 56%|█████▌    | 124/221 [00:44<00:30,  3.20it/s][A
 57%|█████▋    | 125/221 [00:45<00:37,  2.58it/s][A
 57%|█████▋    | 126/221 [00:45<00:35,  2.65it/s][A
 57%|█████▋    | 127/221 [00:46<01:04,  1.45it/s][A[h264 @ 0x5592ab5d9880] mmco: unref short failure

 58%|█████▊    | 128/221 [00:47<00:56,  1.63it/s][A
 58%|█████▊    | 129/221 [00:47<00:43,  2.11it/s][A
 59%|█████▉    | 130/221 [00:47<00:35,  2.53it/s][A
 59%|█████▉    | 131/221 [00:47<00:32,  2.78it/s][A
 60%|█████▉    | 132/221 [00:49<00:55,  1.60it/s][A
 60%|██████    | 133/221 [00:49<00:51,  1.71it/s][A
 61%|██████    | 134/221 [00:50<00:56,  1.54it/s][A
 61%|██████    | 135/221 [00:51<00:58,  1.47it/s][A
 62%|██████▏   | 136/221 [00:51<00:50,  1.70it/s][A
 62%|██████▏   | 137/221 [00:51<00:42,  1.96it/s][A
 62%|██████▏   | 138/221 [00:52<00:40,  2.03it/s][A
 63%|██████▎   | 139/221 [00:53<00:47,  1.72it/s][A
 63%|██████▎   | 140/221 [00:53<00:42,  1.89it/s][A
 64%|██████▍   | 141/221 [00:53<00:37,  2.13it/s][A
 64%|██████▍   | 142/221 [00:54<00:34,  2.31it/s][A
 65%|██████▍   | 143/221 [00:54<00:33,  2.30it/s][A
 65%|██████▌   | 144/221 [00:55<00:31,  2.41it/s][A
 66%|██████▌   | 145/221 [00:55<00:24,  3.06it/s][A
 66%|██████▌   | 146/221 [00:55<00:19,  3.77it/s][A
 67%|██████▋   | 147/221 [00:55<00:21,  3.49it/s][A
 67%|██████▋   | 148/221 [00:56<00:25,  2.88it/s][A
 67%|██████▋   | 149/221 [00:56<00:29,  2.45it/s][A
 68%|██████▊   | 150/221 [00:56<00:25,  2.82it/s][A
 68%|██████▊   | 151/221 [00:57<00:31,  2.20it/s][A
 69%|██████▉   | 152/221 [00:58<00:44,  1.55it/s][A
 69%|██████▉   | 153/221 [00:58<00:33,  2.00it/s][A
 70%|██████▉   | 154/221 [00:59<00:29,  2.29it/s][A
 70%|███████   | 155/221 [00:59<00:25,  2.59it/s][A
 71%|███████   | 156/221 [00:59<00:25,  2.55it/s][A
 71%|███████   | 157/221 [01:00<00:28,  2.27it/s][A
 71%|███████▏  | 158/221 [01:00<00:25,  2.47it/s][A
 72%|███████▏  | 159/221 [01:00<00:21,  2.94it/s][A
 72%|███████▏  | 160/221 [01:01<00:19,  3.16it/s][A
 73%|███████▎  | 161/221 [01:01<00:16,  3.53it/s][A
 73%|███████▎  | 162/221 [01:01<00:14,  4.08it/s][A
 74%|███████▍  | 163/221 [01:01<00:16,  3.59it/s][A
 74%|███████▍  | 164/221 [01:02<00:16,  3.46it/s][A
 75%|███████▍  | 165/221 [01:02<00:15,  3.71it/s][A
 75%|███████▌  | 166/221 [01:02<00:17,  3.13it/s][A
 76%|███████▌  | 167/221 [01:03<00:15,  3.48it/s][A
 76%|███████▌  | 168/221 [01:03<00:21,  2.52it/s][A
 76%|███████▋  | 169/221 [01:03<00:16,  3.08it/s][A
 77%|███████▋  | 170/221 [01:04<00:15,  3.23it/s][A
 77%|███████▋  | 171/221 [01:04<00:18,  2.72it/s][A
 78%|███████▊  | 172/221 [01:04<00:16,  3.04it/s][A
 78%|███████▊  | 173/221 [01:05<00:18,  2.67it/s][A
 79%|███████▊  | 174/221 [01:05<00:16,  2.92it/s][A
 79%|███████▉  | 175/221 [01:05<00:15,  2.99it/s][A
 80%|███████▉  | 176/221 [01:06<00:13,  3.43it/s][A
 80%|████████  | 177/221 [01:06<00:12,  3.66it/s][A
 81%|████████  | 178/221 [01:07<00:19,  2.23it/s][A
 81%|████████  | 179/221 [01:07<00:18,  2.27it/s][A
 81%|████████▏ | 180/221 [01:07<00:14,  2.76it/s][A
 82%|████████▏ | 182/221 [01:08<00:11,  3.49it/s][A
 83%|████████▎ | 183/221 [01:08<00:12,  3.12it/s][A
 83%|████████▎ | 184/221 [01:09<00:13,  2.78it/s][A
 84%|████████▍ | 186/221 [01:09<00:12,  2.83it/s][A
 85%|████████▍ | 187/221 [01:10<00:11,  3.01it/s][A
 85%|████████▌ | 188/221 [01:10<00:10,  3.04it/s][A
 86%|████████▌ | 189/221 [01:10<00:11,  2.83it/s][A
 86%|████████▌ | 190/221 [01:11<00:11,  2.68it/s][A
 86%|████████▋ | 191/221 [01:11<00:10,  2.93it/s][A
 87%|████████▋ | 192/221 [01:11<00:10,  2.79it/s][A
 87%|████████▋ | 193/221 [01:12<00:09,  3.01it/s][A[h264 @ 0x55927e9a3700] mmco: unref short failure
09/17/2024 00:42:49 - INFO - __main__ -   current idx bYqphpDyeRQ.22 from finetune_area returns wrong image/video, use 23718 instead.

 88%|████████▊ | 194/221 [01:14<00:23,  1.16it/s][A[h264 @ 0x559280849780] mmco: unref short failure

 88%|████████▊ | 195/221 [01:14<00:17,  1.47it/s][A
 89%|████████▊ | 196/221 [01:14<00:14,  1.78it/s][A
 89%|████████▉ | 197/221 [01:15<00:12,  1.99it/s][A[h264 @ 0x55d411071e00] mmco: unref short failure
[h264 @ 0x55d411071e00] mmco: unref short failure

 90%|████████▉ | 198/221 [01:15<00:09,  2.32it/s][A[h264 @ 0x559f599b5140] mmco: unref short failure

 90%|█████████ | 199/221 [01:15<00:09,  2.42it/s][A
 90%|█████████ | 200/221 [01:16<00:07,  2.67it/s][A
 91%|█████████ | 201/221 [01:16<00:07,  2.79it/s][A
 91%|█████████▏| 202/221 [01:16<00:07,  2.70it/s][A[h264 @ 0x555f286abb80] mmco: unref short failure
[h264 @ 0x555f286abb80] mmco: unref short failure

 92%|█████████▏| 203/221 [01:17<00:06,  2.82it/s][A
 92%|█████████▏| 204/221 [01:17<00:05,  3.14it/s][A
 93%|█████████▎| 205/221 [01:17<00:04,  3.32it/s][A[h264 @ 0x559f77bf8b80] mmco: unref short failure

 93%|█████████▎| 206/221 [01:18<00:05,  2.65it/s][A
 94%|█████████▎| 207/221 [01:18<00:04,  3.28it/s][A
 94%|█████████▍| 208/221 [01:18<00:04,  3.01it/s][A
 95%|█████████▍| 209/221 [01:18<00:03,  3.10it/s][A
 95%|█████████▌| 210/221 [01:19<00:02,  3.84it/s][A
 95%|█████████▌| 211/221 [01:19<00:03,  3.23it/s][A
 96%|█████████▌| 212/221 [01:19<00:02,  3.32it/s][A
 96%|█████████▋| 213/221 [01:20<00:02,  3.12it/s][A
 97%|█████████▋| 214/221 [01:20<00:02,  2.39it/s][A
 97%|█████████▋| 215/221 [01:21<00:02,  2.83it/s][A
 98%|█████████▊| 216/221 [01:21<00:01,  2.85it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  2.57it/s][A
 99%|█████████▊| 218/221 [01:22<00:01,  2.43it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.56it/s][A
100%|█████████▉| 220/221 [01:23<00:00,  2.01it/s][A
100%|██████████| 221/221 [01:23<00:00,  2.49it/s][A100%|██████████| 221/221 [01:23<00:00,  2.64it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:52,  1.95it/s][A
  1%|          | 2/221 [00:00<01:44,  2.09it/s][A
  1%|▏         | 3/221 [00:01<01:33,  2.34it/s][A
  2%|▏         | 4/221 [00:01<01:28,  2.45it/s][A
  2%|▏         | 5/221 [00:02<01:24,  2.56it/s][A
  3%|▎         | 6/221 [00:02<01:20,  2.67it/s][A[h264 @ 0x559299eed8c0] mmco: unref short failure
[h264 @ 0x559299eed8c0] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:19,  2.70it/s][A
  4%|▎         | 8/221 [00:03<01:17,  2.75it/s][A
  4%|▍         | 9/221 [00:03<01:16,  2.77it/s][A
  5%|▍         | 10/221 [00:03<01:15,  2.81it/s][A
  5%|▍         | 11/221 [00:04<01:13,  2.87it/s][A
  5%|▌         | 12/221 [00:04<01:14,  2.79it/s][A
  6%|▌         | 13/221 [00:04<01:14,  2.78it/s][A
  6%|▋         | 14/221 [00:05<01:12,  2.85it/s][A
  7%|▋         | 15/221 [00:05<01:11,  2.90it/s][A
  7%|▋         | 16/221 [00:05<01:11,  2.89it/s][A
  8%|▊         | 17/221 [00:06<01:09,  2.95it/s][A
  8%|▊         | 18/221 [00:06<01:10,  2.86it/s][A
  9%|▊         | 19/221 [00:07<01:12,  2.78it/s][A
  9%|▉         | 20/221 [00:07<01:11,  2.81it/s][A
 10%|▉         | 21/221 [00:07<01:09,  2.88it/s][A
 10%|▉         | 22/221 [00:07<01:08,  2.92it/s][A
 10%|█         | 23/221 [00:08<01:08,  2.91it/s][A
 11%|█         | 24/221 [00:08<01:09,  2.83it/s][A
 11%|█▏        | 25/221 [00:09<01:12,  2.71it/s][A
 12%|█▏        | 26/221 [00:09<01:10,  2.78it/s][A
 12%|█▏        | 27/221 [00:09<01:06,  2.91it/s][A
 13%|█▎        | 28/221 [00:10<01:08,  2.81it/s][A
 13%|█▎        | 29/221 [00:10<01:10,  2.72it/s][A
 14%|█▎        | 30/221 [00:10<01:10,  2.73it/s][A
 14%|█▍        | 31/221 [00:11<01:08,  2.79it/s][A
 14%|█▍        | 32/221 [00:11<01:06,  2.82it/s][A
 15%|█▍        | 33/221 [00:11<01:06,  2.81it/s][A
 15%|█▌        | 34/221 [00:12<01:09,  2.69it/s][A
 16%|█▌        | 35/221 [00:12<01:09,  2.69it/s][A
 16%|█▋        | 36/221 [00:13<01:07,  2.74it/s][A
 17%|█▋        | 37/221 [00:13<01:05,  2.81it/s][A
 17%|█▋        | 38/221 [00:13<01:02,  2.91it/s][A
 18%|█▊        | 39/221 [00:14<01:03,  2.88it/s][A
 18%|█▊        | 40/221 [00:14<01:05,  2.76it/s][A
 19%|█▊        | 41/221 [00:14<01:06,  2.71it/s][A
 19%|█▉        | 42/221 [00:15<01:03,  2.83it/s][A
 19%|█▉        | 43/221 [00:15<01:01,  2.88it/s][A
 20%|█▉        | 44/221 [00:15<01:00,  2.91it/s][A
 20%|██        | 45/221 [00:16<01:01,  2.84it/s][A
 21%|██        | 46/221 [00:16<01:00,  2.89it/s][A
 21%|██▏       | 47/221 [00:16<00:58,  2.99it/s][A[h264 @ 0x555f30736b40] mmco: unref short failure

 22%|██▏       | 48/221 [00:17<00:58,  2.97it/s][A
 22%|██▏       | 49/221 [00:17<00:58,  2.92it/s][A
 23%|██▎       | 50/221 [00:17<00:59,  2.89it/s][A
 23%|██▎       | 51/221 [00:18<00:57,  2.97it/s][A
 24%|██▎       | 52/221 [00:18<00:56,  3.00it/s][A
 24%|██▍       | 53/221 [00:18<00:55,  3.02it/s][A
 24%|██▍       | 54/221 [00:19<00:53,  3.10it/s][A
 25%|██▍       | 55/221 [00:19<00:54,  3.03it/s][A[h264 @ 0x55d40bd3c040] mmco: unref short failure
[h264 @ 0x55d40bd3c040] mmco: unref short failure

 25%|██▌       | 56/221 [00:19<00:57,  2.86it/s][A
 26%|██▌       | 57/221 [00:20<00:56,  2.90it/s][A
 26%|██▌       | 58/221 [00:20<00:58,  2.77it/s][A
 27%|██▋       | 59/221 [00:21<00:56,  2.86it/s][A
 27%|██▋       | 60/221 [00:21<00:55,  2.88it/s][A
 28%|██▊       | 61/221 [00:21<00:54,  2.91it/s][A
 28%|██▊       | 62/221 [00:21<00:53,  2.99it/s][A
 29%|██▊       | 63/221 [00:22<00:52,  3.02it/s][A
 29%|██▉       | 64/221 [00:22<00:56,  2.76it/s][A
 29%|██▉       | 65/221 [00:23<00:54,  2.85it/s][A
 30%|██▉       | 66/221 [00:23<00:55,  2.82it/s][A
 30%|███       | 67/221 [00:23<00:53,  2.88it/s][A
 31%|███       | 68/221 [00:24<00:52,  2.91it/s][A
 31%|███       | 69/221 [00:24<00:53,  2.85it/s][A
 32%|███▏      | 70/221 [00:24<00:52,  2.89it/s][A
 32%|███▏      | 71/221 [00:25<00:51,  2.89it/s][A
 33%|███▎      | 72/221 [00:25<00:50,  2.94it/s][A
 33%|███▎      | 73/221 [00:25<00:49,  2.97it/s][A
 33%|███▎      | 74/221 [00:26<00:48,  3.01it/s][A
 34%|███▍      | 75/221 [00:26<00:50,  2.90it/s][A
 34%|███▍      | 76/221 [00:26<00:50,  2.88it/s][A
 35%|███▍      | 77/221 [00:27<00:48,  2.96it/s][A
 35%|███▌      | 78/221 [00:27<00:51,  2.77it/s][A
 36%|███▌      | 79/221 [00:27<00:50,  2.81it/s][A
 36%|███▌      | 80/221 [00:28<00:49,  2.88it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.88it/s][A
 37%|███▋      | 82/221 [00:28<00:47,  2.90it/s][A
 38%|███▊      | 83/221 [00:29<00:47,  2.93it/s][A
 38%|███▊      | 84/221 [00:29<00:46,  2.93it/s][A
 38%|███▊      | 85/221 [00:29<00:45,  2.96it/s][A
 39%|███▉      | 86/221 [00:30<00:49,  2.74it/s][A
 39%|███▉      | 87/221 [00:30<00:47,  2.79it/s][A
 40%|███▉      | 88/221 [00:31<00:46,  2.86it/s][A
 40%|████      | 89/221 [00:31<00:45,  2.93it/s][A
 41%|████      | 90/221 [00:31<00:44,  2.92it/s][A
 41%|████      | 91/221 [00:32<00:43,  2.96it/s][A
 42%|████▏     | 92/221 [00:32<00:43,  2.99it/s][A
 42%|████▏     | 93/221 [00:32<00:42,  3.01it/s][A
 43%|████▎     | 94/221 [00:33<00:41,  3.03it/s][A
 43%|████▎     | 95/221 [00:33<00:41,  3.05it/s][A
 43%|████▎     | 96/221 [00:33<00:40,  3.09it/s][A
 44%|████▍     | 97/221 [00:33<00:40,  3.03it/s][A
 44%|████▍     | 98/221 [00:34<00:40,  3.06it/s][A
 45%|████▍     | 99/221 [00:34<00:43,  2.80it/s][A
 45%|████▌     | 100/221 [00:35<00:44,  2.72it/s][A
 46%|████▌     | 101/221 [00:35<00:42,  2.82it/s][A
 46%|████▌     | 102/221 [00:35<00:41,  2.85it/s][A
 47%|████▋     | 103/221 [00:36<00:41,  2.85it/s][A
 47%|████▋     | 104/221 [00:36<00:40,  2.90it/s][A
 48%|████▊     | 105/221 [00:36<00:39,  2.91it/s][A
 48%|████▊     | 106/221 [00:37<00:38,  2.96it/s][A
 48%|████▊     | 107/221 [00:37<00:39,  2.92it/s][A
 49%|████▉     | 108/221 [00:37<00:38,  2.97it/s][A
 49%|████▉     | 109/221 [00:38<00:37,  2.95it/s][A
 50%|████▉     | 110/221 [00:38<00:37,  2.99it/s][A
 50%|█████     | 111/221 [00:38<00:36,  3.04it/s][A
 51%|█████     | 112/221 [00:39<00:35,  3.08it/s][A
 51%|█████     | 113/221 [00:39<00:38,  2.82it/s][A
 52%|█████▏    | 114/221 [00:39<00:37,  2.86it/s][A[h264 @ 0x559f5c3f5b00] mmco: unref short failure
[h264 @ 0x559f5c3f5b00] mmco: unref short failure

 52%|█████▏    | 115/221 [00:40<00:37,  2.81it/s][A
 52%|█████▏    | 116/221 [00:40<00:36,  2.89it/s][A
 53%|█████▎    | 117/221 [00:40<00:35,  2.92it/s][A
 53%|█████▎    | 118/221 [00:41<00:34,  2.96it/s][A
 54%|█████▍    | 119/221 [00:41<00:34,  2.95it/s][A
 54%|█████▍    | 120/221 [00:41<00:34,  2.97it/s][A
 55%|█████▍    | 121/221 [00:42<00:33,  3.00it/s][A[h264 @ 0x555f266fbb40] mmco: unref short failure

 55%|█████▌    | 122/221 [00:42<00:33,  2.97it/s][A
 56%|█████▌    | 123/221 [00:42<00:33,  2.90it/s][A
 56%|█████▌    | 124/221 [00:43<00:34,  2.81it/s][A
 57%|█████▋    | 125/221 [00:43<00:34,  2.75it/s][A
 57%|█████▋    | 126/221 [00:44<00:33,  2.83it/s][A
 57%|█████▋    | 127/221 [00:44<00:32,  2.85it/s][A
 58%|█████▊    | 128/221 [00:44<00:32,  2.87it/s][A
 58%|█████▊    | 129/221 [00:45<00:31,  2.89it/s][A
 59%|█████▉    | 130/221 [00:45<00:31,  2.88it/s][A
 59%|█████▉    | 131/221 [00:45<00:31,  2.85it/s][A
 60%|█████▉    | 132/221 [00:46<00:30,  2.88it/s][A
 60%|██████    | 133/221 [00:46<00:30,  2.86it/s][A
 61%|██████    | 134/221 [00:46<00:29,  2.91it/s][A
 61%|██████    | 135/221 [00:47<00:29,  2.94it/s][A
 62%|██████▏   | 136/221 [00:47<00:29,  2.86it/s][A
 62%|██████▏   | 137/221 [00:47<00:29,  2.90it/s][A
 62%|██████▏   | 138/221 [00:48<00:28,  2.96it/s][A
 63%|██████▎   | 139/221 [00:48<00:27,  3.00it/s][A
 63%|██████▎   | 140/221 [00:48<00:28,  2.89it/s][A
 64%|██████▍   | 141/221 [00:49<00:27,  2.88it/s][A
 64%|██████▍   | 142/221 [00:49<00:26,  2.95it/s][A
 65%|██████▍   | 143/221 [00:49<00:26,  3.00it/s][A
 65%|██████▌   | 144/221 [00:50<00:25,  3.04it/s][A
 66%|██████▌   | 145/221 [00:50<00:25,  2.99it/s][A
 66%|██████▌   | 146/221 [00:50<00:24,  3.03it/s][A
 67%|██████▋   | 147/221 [00:51<00:24,  3.04it/s][A
 67%|██████▋   | 148/221 [00:51<00:23,  3.05it/s][A
 67%|██████▋   | 149/221 [00:51<00:23,  3.08it/s][A
 68%|██████▊   | 150/221 [00:52<00:23,  3.08it/s][A
 68%|██████▊   | 151/221 [00:52<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:52<00:23,  2.94it/s][A
 69%|██████▉   | 153/221 [00:53<00:23,  2.95it/s][A
 70%|██████▉   | 154/221 [00:53<00:22,  2.94it/s][A
 70%|███████   | 155/221 [00:53<00:22,  2.98it/s][A
 71%|███████   | 156/221 [00:54<00:21,  3.02it/s][A
 71%|███████   | 157/221 [00:54<00:21,  2.96it/s][A
 71%|███████▏  | 158/221 [00:54<00:21,  2.93it/s][A
 72%|███████▏  | 159/221 [00:55<00:20,  3.00it/s][A
 72%|███████▏  | 160/221 [00:55<00:20,  2.99it/s][A
 73%|███████▎  | 161/221 [00:55<00:20,  2.97it/s][A
 73%|███████▎  | 162/221 [00:56<00:19,  3.02it/s][A
 74%|███████▍  | 163/221 [00:56<00:19,  2.95it/s][A
 74%|███████▍  | 164/221 [00:56<00:19,  2.98it/s][A
 75%|███████▍  | 165/221 [00:57<00:18,  2.96it/s][A[h264 @ 0x555f2ee54ec0] mmco: unref short failure
[h264 @ 0x555f2ee54ec0] mmco: unref short failure

 75%|███████▌  | 166/221 [00:57<00:18,  2.98it/s][A
 76%|███████▌  | 167/221 [00:57<00:17,  3.04it/s][A
 76%|███████▌  | 168/221 [00:58<00:17,  3.04it/s][A
 76%|███████▋  | 169/221 [00:58<00:18,  2.82it/s][A
 77%|███████▋  | 170/221 [00:58<00:18,  2.83it/s][A
 77%|███████▋  | 171/221 [00:59<00:17,  2.93it/s][A
 78%|███████▊  | 172/221 [00:59<00:17,  2.74it/s][A
 78%|███████▊  | 173/221 [01:00<00:17,  2.78it/s][A
 79%|███████▊  | 174/221 [01:00<00:16,  2.77it/s][A
 79%|███████▉  | 175/221 [01:00<00:16,  2.86it/s][A
 80%|███████▉  | 176/221 [01:01<00:15,  2.88it/s][A
 80%|████████  | 177/221 [01:01<00:14,  2.94it/s][A
 81%|████████  | 178/221 [01:01<00:16,  2.63it/s][A
 81%|████████  | 179/221 [01:02<00:16,  2.57it/s][A
 81%|████████▏ | 180/221 [01:02<00:16,  2.52it/s][A
 82%|████████▏ | 181/221 [01:02<00:14,  2.67it/s][A
 82%|████████▏ | 182/221 [01:03<00:15,  2.53it/s][A[h264 @ 0x559f61f436c0] mmco: unref short failure
[h264 @ 0x559f61f436c0] mmco: unref short failure

 83%|████████▎ | 183/221 [01:03<00:14,  2.58it/s][A
 83%|████████▎ | 184/221 [01:04<00:14,  2.55it/s][A
 84%|████████▎ | 185/221 [01:04<00:14,  2.44it/s][A
 84%|████████▍ | 186/221 [01:05<00:13,  2.56it/s][A
 85%|████████▍ | 187/221 [01:05<00:13,  2.49it/s][A
 85%|████████▌ | 188/221 [01:05<00:12,  2.63it/s][A[h264 @ 0x559f8a5f2f40] mmco: unref short failure

 86%|████████▌ | 189/221 [01:06<00:11,  2.69it/s][A
 86%|████████▌ | 190/221 [01:06<00:11,  2.74it/s][A[h264 @ 0x55d416cc8b80] mmco: unref short failure
[h264 @ 0x55d416cc8b80] mmco: unref short failure

 86%|████████▋ | 191/221 [01:06<00:11,  2.68it/s][A
 87%|████████▋ | 192/221 [01:07<00:10,  2.74it/s][A
 87%|████████▋ | 193/221 [01:07<00:09,  2.85it/s][A
 88%|████████▊ | 194/221 [01:07<00:09,  2.88it/s][A[h264 @ 0x55929b163400] mmco: unref short failure

 88%|████████▊ | 195/221 [01:08<00:08,  2.94it/s][A
 89%|████████▊ | 196/221 [01:08<00:09,  2.76it/s][A
 89%|████████▉ | 197/221 [01:08<00:08,  2.86it/s][A
 90%|████████▉ | 198/221 [01:09<00:08,  2.85it/s][A
 90%|█████████ | 199/221 [01:09<00:07,  2.96it/s][A[h264 @ 0x555f50ccb300] mmco: unref short failure

 90%|█████████ | 200/221 [01:09<00:06,  3.00it/s][A
 91%|█████████ | 201/221 [01:10<00:06,  3.03it/s][A
 91%|█████████▏| 202/221 [01:10<00:06,  3.03it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.06it/s][A
 92%|█████████▏| 204/221 [01:11<00:05,  3.10it/s][A
 93%|█████████▎| 205/221 [01:11<00:05,  3.07it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.98it/s][A
 94%|█████████▎| 207/221 [01:12<00:04,  2.97it/s][A
 94%|█████████▍| 208/221 [01:12<00:04,  2.97it/s][A
 95%|█████████▍| 209/221 [01:12<00:04,  2.96it/s][A
 95%|█████████▌| 210/221 [01:13<00:03,  2.93it/s][A
 95%|█████████▌| 211/221 [01:13<00:03,  2.85it/s][A
 96%|█████████▌| 212/221 [01:13<00:03,  2.92it/s][A
 96%|█████████▋| 213/221 [01:14<00:02,  2.73it/s][A
 97%|█████████▋| 214/221 [01:14<00:02,  2.75it/s][A
 97%|█████████▋| 215/221 [01:15<00:02,  2.74it/s][A
 98%|█████████▊| 216/221 [01:15<00:01,  2.67it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  2.74it/s][A
 99%|█████████▊| 218/221 [01:16<00:01,  2.85it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  2.82it/s][A
100%|█████████▉| 220/221 [01:16<00:00,  2.87it/s][A[h264 @ 0x559f64f3e300] mmco: unref short failure
[h264 @ 0x559f64f3e300] mmco: unref short failure

100%|██████████| 221/221 [01:17<00:00,  2.75it/s][A100%|██████████| 221/221 [01:17<00:00,  2.86it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:36,  6.11it/s][A[h264 @ 0x55928d3d4f00] mmco: unref short failure
[h264 @ 0x55928d3d4f00] mmco: unref short failure

  1%|          | 2/221 [00:00<01:00,  3.60it/s][A
  1%|▏         | 3/221 [00:01<01:41,  2.16it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.95it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 6/221 [00:01<00:59,  3.62it/s][A
  3%|▎         | 7/221 [00:02<00:55,  3.89it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.41it/s][A
  4%|▍         | 9/221 [00:02<01:14,  2.85it/s][A
  5%|▍         | 10/221 [00:03<01:33,  2.26it/s][A
  5%|▍         | 11/221 [00:03<01:29,  2.36it/s][A
  5%|▌         | 12/221 [00:04<01:17,  2.71it/s][A
  6%|▌         | 13/221 [00:04<01:27,  2.37it/s][A
  6%|▋         | 14/221 [00:05<01:21,  2.53it/s][A
  7%|▋         | 15/221 [00:05<01:33,  2.20it/s][A
  7%|▋         | 16/221 [00:05<01:26,  2.37it/s][A
  8%|▊         | 17/221 [00:06<01:31,  2.24it/s][A
  8%|▊         | 18/221 [00:06<01:24,  2.39it/s][A[h264 @ 0x5592854c02c0] mmco: unref short failure

  9%|▊         | 19/221 [00:07<01:19,  2.54it/s][A
  9%|▉         | 20/221 [00:07<01:04,  3.10it/s][A
 10%|▉         | 21/221 [00:07<00:57,  3.47it/s][A
 10%|▉         | 22/221 [00:07<00:50,  3.96it/s][A
 10%|█         | 23/221 [00:07<00:43,  4.50it/s][A
 11%|█         | 24/221 [00:08<00:40,  4.83it/s][A
 11%|█▏        | 25/221 [00:08<00:47,  4.17it/s][A[h264 @ 0x5592953e4740] mmco: unref short failure
[h264 @ 0x5592953e4740] mmco: unref short failure
[h264 @ 0x5592953e4740] mmco: unref short failure

 12%|█▏        | 26/221 [00:08<00:56,  3.43it/s][A
 12%|█▏        | 27/221 [00:09<00:54,  3.53it/s][A[h264 @ 0x55927e75db00] mmco: unref short failure

 13%|█▎        | 28/221 [00:09<01:06,  2.92it/s][A
 13%|█▎        | 29/221 [00:09<01:02,  3.05it/s][A
 14%|█▎        | 30/221 [00:10<01:05,  2.91it/s][A
 14%|█▍        | 31/221 [00:10<01:03,  2.99it/s][A
 14%|█▍        | 32/221 [00:10<01:04,  2.93it/s][A
 15%|█▍        | 33/221 [00:11<00:58,  3.19it/s][A
 15%|█▌        | 34/221 [00:11<00:52,  3.57it/s][A
 16%|█▌        | 35/221 [00:11<00:44,  4.17it/s][A
 16%|█▋        | 36/221 [00:12<01:03,  2.93it/s][A
 17%|█▋        | 37/221 [00:12<01:00,  3.02it/s][A
 17%|█▋        | 38/221 [00:12<01:02,  2.90it/s][A
 18%|█▊        | 39/221 [00:12<00:52,  3.47it/s][A
 18%|█▊        | 40/221 [00:13<00:56,  3.22it/s][A
 19%|█▊        | 41/221 [00:13<00:55,  3.25it/s][A
 19%|█▉        | 42/221 [00:13<00:52,  3.41it/s][A
 19%|█▉        | 43/221 [00:14<00:58,  3.05it/s][A
 20%|█▉        | 44/221 [00:14<00:50,  3.51it/s][A
 20%|██        | 45/221 [00:14<00:54,  3.21it/s][A
 21%|██        | 46/221 [00:15<00:56,  3.08it/s][A
 21%|██▏       | 47/221 [00:15<00:49,  3.54it/s][A
 22%|██▏       | 48/221 [00:15<00:40,  4.27it/s][A
 22%|██▏       | 49/221 [00:15<00:34,  5.02it/s][A09/17/2024 00:44:51 - INFO - __main__ -   current idx TXPcr1HyKkY.54 from finetune_area returns wrong image/video, use 115844 instead.

 23%|██▎       | 50/221 [00:16<00:55,  3.11it/s][A
 23%|██▎       | 51/221 [00:16<00:53,  3.18it/s][A
 24%|██▎       | 52/221 [00:16<00:46,  3.65it/s][A
 24%|██▍       | 53/221 [00:17<00:55,  3.02it/s][A
 24%|██▍       | 54/221 [00:17<00:53,  3.14it/s][A
 25%|██▍       | 55/221 [00:17<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:17<00:47,  3.50it/s][A
 26%|██▌       | 57/221 [00:18<00:47,  3.47it/s][A
 26%|██▌       | 58/221 [00:18<00:39,  4.15it/s][A[h264 @ 0x555f3f1638c0] mmco: unref short failure
[h264 @ 0x555f3f1638c0] mmco: unref short failure

 27%|██▋       | 59/221 [00:18<00:42,  3.78it/s][A
 27%|██▋       | 60/221 [00:19<00:49,  3.25it/s][A
 28%|██▊       | 61/221 [00:19<00:51,  3.11it/s][A
 28%|██▊       | 62/221 [00:19<00:55,  2.85it/s][A
 29%|██▊       | 63/221 [00:19<00:45,  3.45it/s][A
 29%|██▉       | 64/221 [00:20<00:48,  3.21it/s][A
 29%|██▉       | 65/221 [00:20<00:42,  3.67it/s][A
 30%|██▉       | 66/221 [00:20<00:45,  3.44it/s][A
 30%|███       | 67/221 [00:21<00:49,  3.13it/s][A
 31%|███       | 68/221 [00:21<00:44,  3.44it/s][A
 31%|███       | 69/221 [00:21<00:56,  2.71it/s][A
 32%|███▏      | 70/221 [00:22<00:49,  3.03it/s][A
 32%|███▏      | 71/221 [00:22<00:51,  2.94it/s][A
 33%|███▎      | 72/221 [00:23<01:01,  2.42it/s][A[h264 @ 0x555f2a640180] mmco: unref short failure
[h264 @ 0x555f2a640180] mmco: unref short failure

 33%|███▎      | 73/221 [00:23<00:57,  2.57it/s][A
 33%|███▎      | 74/221 [00:23<00:47,  3.09it/s][A
 34%|███▍      | 75/221 [00:24<00:53,  2.71it/s][A
 34%|███▍      | 76/221 [00:24<00:51,  2.81it/s][A
 35%|███▍      | 77/221 [00:24<00:49,  2.93it/s][A
 35%|███▌      | 78/221 [00:25<00:45,  3.17it/s][A[h264 @ 0x555f59c76840] mmco: unref short failure

 36%|███▌      | 79/221 [00:25<00:43,  3.29it/s][A
 36%|███▌      | 80/221 [00:25<00:40,  3.44it/s][A
 37%|███▋      | 81/221 [00:25<00:42,  3.29it/s][A
 37%|███▋      | 82/221 [00:26<00:39,  3.56it/s][A
 38%|███▊      | 83/221 [00:26<00:32,  4.18it/s][A
 38%|███▊      | 84/221 [00:26<00:41,  3.28it/s][A
 38%|███▊      | 85/221 [00:26<00:36,  3.76it/s][A
 39%|███▉      | 86/221 [00:27<00:34,  3.92it/s][A[h264 @ 0x555f263040c0] mmco: unref short failure
[h264 @ 0x555f263040c0] mmco: unref short failure

 39%|███▉      | 87/221 [00:27<00:42,  3.17it/s][A
 40%|███▉      | 88/221 [00:28<00:49,  2.67it/s][A
 40%|████      | 89/221 [00:28<00:56,  2.34it/s][A
 41%|████      | 90/221 [00:29<00:56,  2.32it/s][A
 41%|████      | 91/221 [00:29<00:48,  2.70it/s][A
 42%|████▏     | 92/221 [00:29<00:44,  2.90it/s][A
 42%|████▏     | 93/221 [00:30<00:48,  2.67it/s][A
 43%|████▎     | 94/221 [00:30<00:41,  3.07it/s][A[h264 @ 0x5592b1e40ac0] mmco: unref short failure

 43%|████▎     | 95/221 [00:31<00:57,  2.18it/s][A
 43%|████▎     | 96/221 [00:31<00:55,  2.25it/s][A
 44%|████▍     | 97/221 [00:31<00:55,  2.23it/s][A
 44%|████▍     | 98/221 [00:32<00:58,  2.12it/s][A
 45%|████▍     | 99/221 [00:32<00:54,  2.23it/s][A
 45%|████▌     | 100/221 [00:33<00:55,  2.19it/s][A
 46%|████▌     | 101/221 [00:33<00:58,  2.07it/s][A
 46%|████▌     | 102/221 [00:34<00:50,  2.37it/s][A
 47%|████▋     | 103/221 [00:34<00:40,  2.94it/s][A
 47%|████▋     | 104/221 [00:34<00:31,  3.68it/s][A
 48%|████▊     | 105/221 [00:34<00:34,  3.35it/s][A
 48%|████▊     | 106/221 [00:35<00:37,  3.06it/s][A
 48%|████▊     | 107/221 [00:35<00:34,  3.28it/s][A
 49%|████▉     | 108/221 [00:35<00:38,  2.94it/s][A
 49%|████▉     | 109/221 [00:36<00:38,  2.90it/s][A
 50%|████▉     | 110/221 [00:36<00:35,  3.12it/s][A
 50%|█████     | 111/221 [00:36<00:40,  2.75it/s][A
 51%|█████     | 112/221 [00:37<00:38,  2.83it/s][A
 51%|█████     | 113/221 [00:37<00:35,  3.02it/s][A
 52%|█████▏    | 115/221 [00:37<00:26,  3.98it/s][A
 52%|█████▏    | 116/221 [00:38<00:25,  4.11it/s][A
 53%|█████▎    | 117/221 [00:38<00:25,  4.10it/s][A
 53%|█████▎    | 118/221 [00:38<00:28,  3.56it/s][A
 54%|█████▍    | 119/221 [00:39<00:33,  3.06it/s][A
 54%|█████▍    | 120/221 [00:39<00:32,  3.12it/s][A
 55%|█████▍    | 121/221 [00:39<00:37,  2.70it/s][A
 55%|█████▌    | 122/221 [00:40<00:39,  2.50it/s][A
 56%|█████▌    | 123/221 [00:40<00:36,  2.72it/s][A
 56%|█████▌    | 124/221 [00:41<00:37,  2.58it/s][A
 57%|█████▋    | 125/221 [00:41<00:40,  2.37it/s][A
 57%|█████▋    | 126/221 [00:41<00:33,  2.86it/s][A
 57%|█████▋    | 127/221 [00:42<00:38,  2.43it/s][A
 58%|█████▊    | 128/221 [00:42<00:35,  2.65it/s][A
 58%|█████▊    | 129/221 [00:42<00:28,  3.25it/s][A
 59%|█████▉    | 130/221 [00:43<00:28,  3.18it/s][A
 59%|█████▉    | 131/221 [00:43<00:25,  3.51it/s][A
 60%|█████▉    | 132/221 [00:43<00:32,  2.72it/s][A
 60%|██████    | 133/221 [00:44<00:30,  2.87it/s][A
 61%|██████    | 134/221 [00:44<00:36,  2.38it/s][A
 61%|██████    | 135/221 [00:45<00:32,  2.63it/s][A
 62%|██████▏   | 136/221 [00:45<00:32,  2.65it/s][A
 62%|██████▏   | 137/221 [00:45<00:29,  2.81it/s][A[h264 @ 0x5592a1d3ee00] mmco: unref short failure
[h264 @ 0x5592a1d3ee00] mmco: unref short failure

 62%|██████▏   | 138/221 [00:46<00:27,  2.98it/s][A
 63%|██████▎   | 139/221 [00:46<00:29,  2.75it/s][A
 63%|██████▎   | 140/221 [00:46<00:28,  2.85it/s][A
 64%|██████▍   | 141/221 [00:47<00:30,  2.61it/s][A
 64%|██████▍   | 142/221 [00:47<00:28,  2.80it/s][A
 65%|██████▍   | 143/221 [00:47<00:25,  3.02it/s][A
 65%|██████▌   | 144/221 [00:48<00:23,  3.23it/s][A
 66%|██████▌   | 145/221 [00:48<00:24,  3.09it/s][A
 66%|██████▌   | 146/221 [00:48<00:22,  3.28it/s][A
 67%|██████▋   | 147/221 [00:48<00:19,  3.76it/s][A
 67%|██████▋   | 148/221 [00:50<00:39,  1.83it/s][A
 67%|██████▋   | 149/221 [00:50<00:33,  2.18it/s][A
 68%|██████▊   | 150/221 [00:50<00:28,  2.49it/s][A[h264 @ 0x5592a9501780] mmco: unref short failure
[h264 @ 0x5592a9501780] mmco: unref short failure
[h264 @ 0x555f356e8280] mmco: unref short failure
[h264 @ 0x555f356e8280] mmco: unref short failure

 68%|██████▊   | 151/221 [00:51<00:45,  1.55it/s][A
 69%|██████▉   | 152/221 [00:52<00:41,  1.64it/s][A
 69%|██████▉   | 153/221 [00:52<00:35,  1.93it/s][A
 70%|██████▉   | 154/221 [00:53<00:32,  2.05it/s][A
 70%|███████   | 155/221 [00:53<00:27,  2.44it/s][A
 71%|███████   | 156/221 [00:53<00:25,  2.57it/s][A09/17/2024 00:45:29 - INFO - __main__ -   current idx 1wUrnDB1U9c.8 from finetune_area returns wrong image/video, use 78853 instead.

 71%|███████   | 157/221 [00:53<00:22,  2.81it/s][A[h264 @ 0x559f8f0a0b00] mmco: unref short failure

 71%|███████▏  | 158/221 [00:54<00:24,  2.62it/s][A
 72%|███████▏  | 159/221 [00:54<00:21,  2.93it/s][A
 72%|███████▏  | 160/221 [00:54<00:21,  2.84it/s][A[h264 @ 0x559f7c2c1040] mmco: unref short failure
[h264 @ 0x559f7c2c1040] mmco: unref short failure
[h264 @ 0x555f34025900] mmco: unref short failure

 73%|███████▎  | 162/221 [00:55<00:13,  4.31it/s][A
 74%|███████▍  | 163/221 [00:55<00:13,  4.15it/s][A
 74%|███████▍  | 164/221 [00:55<00:13,  4.16it/s][A
 75%|███████▍  | 165/221 [00:55<00:13,  4.07it/s][A
 75%|███████▌  | 166/221 [00:56<00:15,  3.65it/s][A
 76%|███████▌  | 167/221 [00:56<00:12,  4.31it/s][A
 76%|███████▌  | 168/221 [00:56<00:13,  4.02it/s][A
 76%|███████▋  | 169/221 [00:56<00:11,  4.40it/s][A
 77%|███████▋  | 170/221 [00:57<00:13,  3.74it/s][A
 77%|███████▋  | 171/221 [00:57<00:18,  2.68it/s][A
 78%|███████▊  | 172/221 [00:58<00:16,  2.90it/s][A
 78%|███████▊  | 173/221 [00:58<00:17,  2.80it/s][A
 79%|███████▊  | 174/221 [00:58<00:14,  3.33it/s][A
 79%|███████▉  | 175/221 [00:59<00:15,  3.03it/s][A
 80%|███████▉  | 176/221 [00:59<00:14,  3.13it/s][A
 80%|████████  | 177/221 [00:59<00:15,  2.93it/s][A
 81%|████████  | 178/221 [01:00<00:19,  2.18it/s][A
 81%|████████  | 179/221 [01:00<00:18,  2.29it/s][A
 81%|████████▏ | 180/221 [01:00<00:13,  2.95it/s][A
 82%|████████▏ | 181/221 [01:01<00:11,  3.57it/s][A
 82%|████████▏ | 182/221 [01:01<00:11,  3.48it/s][A
 83%|████████▎ | 183/221 [01:01<00:10,  3.51it/s][A
 83%|████████▎ | 184/221 [01:02<00:12,  2.92it/s][A
 84%|████████▍ | 186/221 [01:02<00:10,  3.38it/s][A09/17/2024 00:45:38 - INFO - __main__ -   current idx yYJt_XCcAsY.15 from finetune_area returns wrong image/video, use 97507 instead.

 85%|████████▍ | 187/221 [01:02<00:09,  3.69it/s][A
 85%|████████▌ | 188/221 [01:03<00:08,  3.93it/s][A
 86%|████████▌ | 189/221 [01:03<00:08,  3.93it/s][A
 86%|████████▌ | 190/221 [01:03<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [01:03<00:07,  3.90it/s][A
 87%|████████▋ | 192/221 [01:04<00:08,  3.34it/s][A
 87%|████████▋ | 193/221 [01:04<00:08,  3.20it/s][A
 88%|████████▊ | 194/221 [01:05<00:11,  2.40it/s][A
 88%|████████▊ | 195/221 [01:05<00:11,  2.17it/s][A
 89%|████████▊ | 196/221 [01:06<00:11,  2.25it/s][A
 89%|████████▉ | 197/221 [01:07<00:12,  1.85it/s][A
 90%|████████▉ | 198/221 [01:07<00:10,  2.20it/s][A
 90%|█████████ | 199/221 [01:07<00:08,  2.60it/s][A
 90%|█████████ | 200/221 [01:07<00:06,  3.09it/s][A
 91%|█████████ | 201/221 [01:07<00:05,  3.36it/s][A[h264 @ 0x55d404645ec0] mmco: unref short failure
[h264 @ 0x55d404645ec0] mmco: unref short failure

 91%|█████████▏| 202/221 [01:08<00:06,  3.13it/s][A
 92%|█████████▏| 203/221 [01:08<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:08<00:04,  3.77it/s][A
 93%|█████████▎| 205/221 [01:09<00:04,  3.67it/s][A
 93%|█████████▎| 206/221 [01:09<00:04,  3.03it/s][A
 94%|█████████▎| 207/221 [01:09<00:04,  3.16it/s][A
 94%|█████████▍| 208/221 [01:10<00:04,  3.11it/s][A
 95%|█████████▍| 209/221 [01:10<00:03,  3.13it/s][A
 95%|█████████▌| 210/221 [01:10<00:03,  3.66it/s][A
 95%|█████████▌| 211/221 [01:10<00:02,  3.53it/s][A
 96%|█████████▌| 212/221 [01:11<00:02,  3.27it/s][A
 96%|█████████▋| 213/221 [01:11<00:02,  3.47it/s][A
 97%|█████████▋| 214/221 [01:11<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:12<00:01,  3.07it/s][A
 98%|█████████▊| 216/221 [01:12<00:01,  3.25it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  3.03it/s][A
 99%|█████████▊| 218/221 [01:13<00:01,  2.46it/s][A
 99%|█████████▉| 219/221 [01:13<00:00,  2.60it/s][A
100%|█████████▉| 220/221 [01:13<00:00,  3.07it/s][A
100%|██████████| 221/221 [01:14<00:00,  3.31it/s][A100%|██████████| 221/221 [01:14<00:00,  2.98it/s]
09/17/2024 00:45:50 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'area_r1': 43.7, 'area_recall': '43.7/70.6/80.1', 'area_ravg': 64.8}
09/17/2024 00:45:51 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'forward_r1': 37.6, 'forward_recall': '37.6/65.7/76.1', 'forward_ravg': 59.8}
09/17/2024 00:45:51 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'area_video_r1': 37.9, 'area_video_recall': '37.9/65.8/75.9', 'area_video_ravg': 59.9}
09/17/2024 00:45:51 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 99=======

09/17/2024 00:45:51 - INFO - __main__ -   {'area_video_r1': 37.9, 'area_video_recall': '37.9/65.8/75.9', 'area_video_ravg': 59.9}
09/17/2024 00:45:51 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'area_video_r1': 50.9, 'area_video_recall': '50.9/75.0/83.9', 'area_video_ravg': 69.9, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/73.2/79.9', 'area_video_back_ravg': 67.6}
09/17/2024 00:45:51 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 99=======

09/17/2024 00:45:51 - INFO - __main__ -   {'area_video_r1': 50.9, 'area_video_recall': '50.9/75.0/83.9', 'area_video_ravg': 69.9, 'area_video_back_r1': 49.8, 'area_video_back_recall': '49.8/73.2/79.9', 'area_video_back_ravg': 67.6}
09/17/2024 00:45:51 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'video_r1': 35.7, 'video_recall': '35.7/66.1/75.6', 'video_ravg': 59.1}
09/17/2024 00:45:51 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 99=======

09/17/2024 00:45:51 - INFO - __main__ -   {'video_r1': 35.7, 'video_recall': '35.7/66.1/75.6', 'video_ravg': 59.1}
09/17/2024 00:45:51 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 99--===========

09/17/2024 00:45:51 - INFO - __main__ -   {'video_r1': 50.5, 'video_recall': '50.5/74.3/82.9', 'video_ravg': 69.2}
09/17/2024 00:45:51 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 49=======

09/17/2024 00:45:51 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/70.9/79.6', 'video_ravg': 67.1}
[h264 @ 0x5592896d8d00] mmco: unref short failure
[h264 @ 0x5592896d8d00] mmco: unref short failure
[h264 @ 0x5592896d8d00] mmco: unref short failure
[h264 @ 0x555f56eaf940] mmco: unref short failure
[h264 @ 0x555f56eaf940] mmco: unref short failure
[h264 @ 0x555f56eaf940] mmco: unref short failure
[h264 @ 0x555f56eaf940] mmco: unref short failure
[h264 @ 0x559f5aa130c0] mmco: unref short failure
[h264 @ 0x559f8c131f40] mmco: unref short failure
[h264 @ 0x559f8c131f40] mmco: unref short failure
[h264 @ 0x559f8c131f40] mmco: unref short failure
[h264 @ 0x559f8c131f40] mmco: unref short failure
[h264 @ 0x559f5c5639c0] mmco: unref short failure
[h264 @ 0x55928e6ced80] mmco: unref short failure
[h264 @ 0x55d40ef6eb80] mmco: unref short failure
[h264 @ 0x55d40ef6eb80] mmco: unref short failure
[h264 @ 0x55d40ef6eb80] mmco: unref short failure
[h264 @ 0x55d40a675380] mmco: unref short failure
[h264 @ 0x55d404de7980] mmco: unref short failure
[h264 @ 0x55d412ae9640] mmco: unref short failure
[h264 @ 0x55d412ae9640] mmco: unref short failure
[h264 @ 0x55d433717180] mmco: unref short failure
[h264 @ 0x55d433717180] mmco: unref short failure
09/17/2024 00:46:58 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.012376675382256508, 'loss_ret%tv%ta--finetune_area/loss_area': 2.9282727241516113, 'loss_ret%tv%ta--finetune_area/total_loss': 2.9406495094299316}
[h264 @ 0x559f70428980] mmco: unref short failure
  7%|▋         | 100/1455 [1:06:41<63:51:05, 169.64s/it]  7%|▋         | 101/1455 [1:06:48<45:30:10, 120.98s/it]  7%|▋         | 102/1455 [1:06:55<32:38:09, 86.84s/it]   7%|▋         | 103/1455 [1:07:03<23:39:14, 62.98s/it][h264 @ 0x55927e3b1dc0] mmco: unref short failure
[h264 @ 0x55927e3b1dc0] mmco: unref short failure
[h264 @ 0x55927e3b1dc0] mmco: unref short failure
[h264 @ 0x55927e3b1dc0] mmco: unref short failure
  7%|▋         | 104/1455 [1:07:11<17:25:52, 46.45s/it][h264 @ 0x555f2b949440] mmco: unref short failure
[h264 @ 0x555f2b949440] mmco: unref short failure
[h264 @ 0x5592aade8600] mmco: unref short failure
[h264 @ 0x5592aade8600] mmco: unref short failure
  7%|▋         | 105/1455 [1:07:19<13:07:02, 34.98s/it][h264 @ 0x5592b1d03680] mmco: unref short failure
[h264 @ 0x5592b1d03680] mmco: unref short failure
  7%|▋         | 106/1455 [1:07:28<10:10:55, 27.17s/it][h264 @ 0x55928607b440] mmco: unref short failure
  7%|▋         | 107/1455 [1:07:37<8:10:24, 21.83s/it] [h264 @ 0x5592936c9900] mmco: unref short failure
[h264 @ 0x5592936c9900] mmco: unref short failure
  7%|▋         | 108/1455 [1:07:46<6:40:49, 17.85s/it][h264 @ 0x5592a08bf240] mmco: unref short failure
[h264 @ 0x5592a08bf240] mmco: unref short failure
  7%|▋         | 109/1455 [1:07:54<5:39:22, 15.13s/it][h264 @ 0x55d428dc3ec0] mmco: unref short failure
[h264 @ 0x55d428dc3ec0] mmco: unref short failure
  8%|▊         | 110/1455 [1:08:04<4:58:54, 13.33s/it][h264 @ 0x55d434a005c0] mmco: unref short failure
[h264 @ 0x55d434a005c0] mmco: unref short failure
  8%|▊         | 111/1455 [1:08:13<4:30:44, 12.09s/it][h264 @ 0x55928a79ac00] mmco: unref short failure
[h264 @ 0x55928a79ac00] mmco: unref short failure
  8%|▊         | 112/1455 [1:08:22<4:12:13, 11.27s/it][h264 @ 0x55927f483bc0] mmco: unref short failure
[h264 @ 0x559f85614780] mmco: unref short failure
[h264 @ 0x559f85614780] mmco: unref short failure
[h264 @ 0x559f85614780] mmco: unref short failure
[h264 @ 0x559f85614780] mmco: unref short failure
[h264 @ 0x559f85614780] mmco: unref short failure
  8%|▊         | 113/1455 [1:08:31<3:55:00, 10.51s/it][h264 @ 0x5592a9db1840] mmco: unref short failure
  8%|▊         | 114/1455 [1:08:41<3:49:31, 10.27s/it]09/17/2024 00:49:05 - INFO - __main__ -   current idx kZsPqzB36mk.13 from finetune_area returns wrong image/video, use 109316 instead.
[h264 @ 0x559f6fa2f840] mmco: unref short failure
[h264 @ 0x559f6fa2f840] mmco: unref short failure
[h264 @ 0x559f6fa2f840] mmco: unref short failure
[h264 @ 0x555f31b79e80] mmco: unref short failure
  8%|▊         | 115/1455 [1:08:50<3:40:24,  9.87s/it][h264 @ 0x555f50da0bc0] mmco: unref short failure
[h264 @ 0x555f50da0bc0] mmco: unref short failure
[h264 @ 0x555f2be53a00] mmco: unref short failure
[h264 @ 0x555f2be53a00] mmco: unref short failure
09/17/2024 00:49:28 - INFO - __main__ -   current idx Zsx1-4aJ4ys.28 from finetune_area returns wrong image/video, use 139857 instead.
[h264 @ 0x555f306b0c00] mmco: unref short failure
[h264 @ 0x555f306b0c00] mmco: unref short failure
[h264 @ 0x55929fdb4e80] mmco: unref short failure
[h264 @ 0x55929fdb4e80] mmco: unref short failure
[h264 @ 0x55929fdb4e80] mmco: unref short failure
[h264 @ 0x555f4edf6280] mmco: unref short failure
[h264 @ 0x555f4edf6280] mmco: unref short failure
[h264 @ 0x555f4be2d600] mmco: unref short failure
[h264 @ 0x555f4be2d600] mmco: unref short failure
[h264 @ 0x555f58e2fd00] mmco: unref short failure
[h264 @ 0x555f58e2fd00] mmco: unref short failure
[h264 @ 0x55d409099d80] mmco: unref short failure
[h264 @ 0x55d409099d80] mmco: unref short failure
[h264 @ 0x555f3cbaa100] mmco: unref short failure
[h264 @ 0x555f3cbaa100] mmco: unref short failure
[h264 @ 0x555f2e88ee80] mmco: unref short failure
[h264 @ 0x559f85695a00] mmco: unref short failure
[h264 @ 0x559f5979f2c0] mmco: unref short failure
[h264 @ 0x559f5979f2c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x555f4e1844c0] mmco: unref short failure
[h264 @ 0x55927db1eec0] mmco: unref short failure
[h264 @ 0x55d419aff740] mmco: unref short failure
[h264 @ 0x55d419aff740] mmco: unref short failure
[h264 @ 0x559f5db75d00] mmco: unref short failure
[h264 @ 0x555f4be2cf40] mmco: unref short failure
[h264 @ 0x555f4be2cf40] mmco: unref short failure
[h264 @ 0x555f4be2cf40] mmco: unref short failure
[h264 @ 0x555f3a80e440] mmco: unref short failure
[h264 @ 0x55928fd6fac0] mmco: unref short failure
[h264 @ 0x55928fd6fac0] mmco: unref short failure
09/17/2024 00:50:32 - INFO - __main__ -   current idx gtt8O0yuAiA.7 from finetune_area returns wrong image/video, use 64300 instead.
[h264 @ 0x55d4343826c0] mmco: unref short failure
[h264 @ 0x55d4343826c0] mmco: unref short failure
[h264 @ 0x559f884cb100] mmco: unref short failure
[h264 @ 0x559f884cb100] mmco: unref short failure
09/17/2024 00:51:09 - INFO - __main__ -   current idx Q_Kn3yzSJ5w.69 from finetune_area returns wrong image/video, use 41141 instead.
[h264 @ 0x559f5c563500] mmco: unref short failure
[h264 @ 0x559f5c563500] mmco: unref short failure
[h264 @ 0x555f41de1500] mmco: unref short failure
[h264 @ 0x555f41de1500] mmco: unref short failure
[h264 @ 0x559f5a9b9500] mmco: unref short failure
[h264 @ 0x559f5a9b9500] mmco: unref short failure
[h264 @ 0x55d40bca7840] mmco: unref short failure
  8%|▊         | 116/1455 [1:10:57<16:46:09, 45.09s/it][h264 @ 0x55928282b180] mmco: unref short failure
[h264 @ 0x55928282b180] mmco: unref short failure
[h264 @ 0x555f55f9ce00] mmco: unref short failure
  8%|▊         | 117/1455 [1:11:15<13:47:18, 37.10s/it][h264 @ 0x559293a857c0] mmco: unref short failure
[h264 @ 0x5592835064c0] mmco: unref short failure
[h264 @ 0x5592835064c0] mmco: unref short failure
[h264 @ 0x559f599aed40] mmco: unref short failure
[h264 @ 0x559f8aa27980] mmco: unref short failure
[h264 @ 0x559f8aa27980] mmco: unref short failure
[h264 @ 0x55929c06a640] mmco: unref short failure
[h264 @ 0x55929c06a640] mmco: unref short failure
[h264 @ 0x55d413721c00] mmco: unref short failure
[h264 @ 0x55d413721c00] mmco: unref short failure
[h264 @ 0x559280858c80] mmco: unref short failure
[h264 @ 0x559280858c80] mmco: unref short failure
[h264 @ 0x559282224380] mmco: unref short failure
[h264 @ 0x559282224380] mmco: unref short failure
  8%|▊         | 118/1455 [1:11:48<13:15:40, 35.71s/it][h264 @ 0x555f5a33be00] mmco: unref short failure
[h264 @ 0x555f5a33be00] mmco: unref short failure
  8%|▊         | 119/1455 [1:11:56<10:14:39, 27.60s/it][h264 @ 0x55d416deef40] mmco: unref short failure
[h264 @ 0x55d416deef40] mmco: unref short failure
[h264 @ 0x55927ff62280] mmco: unref short failure
  8%|▊         | 120/1455 [1:12:06<8:13:26, 22.18s/it]   8%|▊         | 121/1455 [1:12:25<7:55:01, 21.37s/it][h264 @ 0x55d414ef2d40] mmco: unref short failure
[h264 @ 0x55d414ef2d40] mmco: unref short failure
[h264 @ 0x555f26720680] mmco: unref short failure
[h264 @ 0x559296e3b4c0] mmco: unref short failure
[h264 @ 0x55928ee7ac80] mmco: unref short failure
[h264 @ 0x55928ee7ac80] mmco: unref short failure
  8%|▊         | 122/1455 [1:12:51<8:20:40, 22.54s/it][h264 @ 0x555f3d706ec0] mmco: unref short failure
[h264 @ 0x555f3d706ec0] mmco: unref short failure
[h264 @ 0x555f4fa54f40] mmco: unref short failure
[h264 @ 0x555f4fa54f40] mmco: unref short failure
[h264 @ 0x555f44a2a100] mmco: unref short failure
  8%|▊         | 123/1455 [1:13:00<6:49:57, 18.47s/it][h264 @ 0x555f29686040] mmco: unref short failure
[h264 @ 0x555f29686040] mmco: unref short failure
[h264 @ 0x559f59c6d880] mmco: unref short failure
[h264 @ 0x559f59c6d880] mmco: unref short failure
[h264 @ 0x555f3cbaa780] mmco: unref short failure
[h264 @ 0x555f3cbaa780] mmco: unref short failure
[h264 @ 0x55d4061b9d40] mmco: unref short failure
[h264 @ 0x55d4061b9d40] mmco: unref short failure
[h264 @ 0x559295c3b740] mmco: unref short failure
[h264 @ 0x555f3b417500] mmco: unref short failure
[h264 @ 0x55927f04d700] mmco: unref short failure
[h264 @ 0x55d40da383c0] mmco: unref short failure
[h264 @ 0x55d40da383c0] mmco: unref short failure
[h264 @ 0x559284197c80] mmco: unref short failure
[h264 @ 0x559284197c80] mmco: unref short failure
[h264 @ 0x55d40550b700] mmco: unref short failure
[h264 @ 0x55d40550b700] mmco: unref short failure
[h264 @ 0x5592a5950c40] mmco: unref short failure
[h264 @ 0x555f2ee63a40] mmco: unref short failure
[h264 @ 0x555f2ee63a40] mmco: unref short failure
[h264 @ 0x555f2c733440] mmco: unref short failure
[h264 @ 0x555f2c733440] mmco: unref short failure
[h264 @ 0x559f7e943540] mmco: unref short failure
[h264 @ 0x559f7e943540] mmco: unref short failure
[h264 @ 0x559f5e8e4b00] mmco: unref short failure
[h264 @ 0x555f40c5eb80] mmco: unref short failure
[h264 @ 0x555f40c5eb80] mmco: unref short failure
[h264 @ 0x55d405a742c0] mmco: unref short failure
[h264 @ 0x55d405a742c0] mmco: unref short failure
[h264 @ 0x55d405a742c0] mmco: unref short failure
[h264 @ 0x55d405a742c0] mmco: unref short failure
09/17/2024 00:54:50 - INFO - __main__ -   current idx 4DqZp71UU3o.53 from finetune_area returns wrong image/video, use 23779 instead.
[h264 @ 0x55929c06a640] mmco: unref short failure
[h264 @ 0x55d40655b280] mmco: unref short failure
[h264 @ 0x55d40655b280] mmco: unref short failure
09/17/2024 00:55:00 - INFO - __main__ -   current idx 66BbxK8sJjM.10 from finetune_area returns wrong image/video, use 1913 instead.
[h264 @ 0x559f59f77bc0] mmco: unref short failure
[h264 @ 0x559f59f77bc0] mmco: unref short failure
[h264 @ 0x559f6d798bc0] mmco: unref short failure
[h264 @ 0x559f6d798bc0] mmco: unref short failure
09/17/2024 00:55:23 - INFO - __main__ -   current idx uFCptSipOAs.53 from finetune_area returns wrong image/video, use 76687 instead.
[h264 @ 0x55d4098a1480] mmco: unref short failure
[h264 @ 0x55d4098a1480] mmco: unref short failure
[h264 @ 0x55d4040b2780] mmco: unref short failure
[h264 @ 0x55d4040b2780] mmco: unref short failure
[h264 @ 0x559f67c3fd40] mmco: unref short failure
[h264 @ 0x555f50077780] mmco: unref short failure
[h264 @ 0x559f66a77f80] mmco: unref short failure
[h264 @ 0x555f30ac6200] mmco: unref short failure
[h264 @ 0x559289aaf440] mmco: unref short failure
  9%|▊         | 124/1455 [1:15:51<23:44:47, 64.23s/it][h264 @ 0x559289a47640] mmco: unref short failure
[h264 @ 0x55d4137f86c0] mmco: unref short failure
[h264 @ 0x555f4dd16940] mmco: unref short failure
[h264 @ 0x55d4044372c0] mmco: unref short failure
[h264 @ 0x55d4044372c0] mmco: unref short failure
09/17/2024 00:56:24 - INFO - __main__ -   current idx G_BESfJVLFg.1 from finetune_area returns wrong image/video, use 110049 instead.
  9%|▊         | 125/1455 [1:16:08<18:35:17, 50.31s/it]09/17/2024 00:56:30 - INFO - __main__ -   current idx 9Ralave0cFg.16 from finetune_area returns wrong image/video, use 31953 instead.
[h264 @ 0x559f807a2440] mmco: unref short failure
09/17/2024 00:56:35 - INFO - __main__ -   current idx hvDXjC-_7uo.11 from finetune_area returns wrong image/video, use 90044 instead.
[h264 @ 0x555f293ce080] mmco: unref short failure
[h264 @ 0x555f58e2fd00] mmco: unref short failure
[h264 @ 0x555f58e2fd00] mmco: unref short failure
[h264 @ 0x55d40269e480] mmco: unref short failure
[h264 @ 0x55d40269e480] mmco: unref short failure
[h264 @ 0x555f27aaea00] mmco: unref short failure
[h264 @ 0x559f6008fac0] mmco: unref short failure
  9%|▊         | 126/1455 [1:16:40<16:27:45, 44.59s/it]09/17/2024 00:57:05 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 131128 instead.
[h264 @ 0x559f5a1d8a40] mmco: unref short failure
[h264 @ 0x55d415366d40] mmco: unref short failure
[h264 @ 0x555f5a1f4840] mmco: unref short failure
[h264 @ 0x555f5a1f4840] mmco: unref short failure
[h264 @ 0x555f5a1f4840] mmco: unref short failure
[h264 @ 0x555f5a1f4840] mmco: unref short failure
  9%|▊         | 127/1455 [1:16:56<13:16:30, 35.99s/it][h264 @ 0x55d428c044c0] mmco: unref short failure
[h264 @ 0x55d428c044c0] mmco: unref short failure
[h264 @ 0x559f608eb6c0] mmco: unref short failure
[h264 @ 0x559f608eb6c0] mmco: unref short failure
[h264 @ 0x559f608eb6c0] mmco: unref short failure
[h264 @ 0x559f608eb6c0] mmco: unref short failure
[h264 @ 0x559f5a1d8800] mmco: unref short failure
[h264 @ 0x559f5a1d8800] mmco: unref short failure
[h264 @ 0x55927f2059c0] mmco: unref short failure
[h264 @ 0x55927f2059c0] mmco: unref short failure
[h264 @ 0x55927f2059c0] mmco: unref short failure
[h264 @ 0x55927f2059c0] mmco: unref short failure
  9%|▉         | 128/1455 [1:17:04<10:13:59, 27.76s/it][h264 @ 0x55d4340da940] mmco: unref short failure
[h264 @ 0x55d4340da940] mmco: unref short failure
[h264 @ 0x55d4097e22c0] mmco: unref short failure
[h264 @ 0x559f60643080] mmco: unref short failure
  9%|▉         | 129/1455 [1:17:13<8:09:01, 22.13s/it] [h264 @ 0x555f5707e500] mmco: unref short failure
[h264 @ 0x555f5707e500] mmco: unref short failure
[h264 @ 0x555f5707e500] mmco: unref short failure
[h264 @ 0x555f5707e500] mmco: unref short failure
[h264 @ 0x55d421aeeb40] mmco: unref short failure
[h264 @ 0x555f36110600] mmco: unref short failure
[h264 @ 0x555f36110600] mmco: unref short failure
[h264 @ 0x555f261f2700] mmco: unref short failure
[h264 @ 0x55d416deeb40] mmco: unref short failure
  9%|▉         | 130/1455 [1:17:48<9:32:14, 25.91s/it][h264 @ 0x555f32067f80] mmco: unref short failure
  9%|▉         | 131/1455 [1:17:57<7:37:06, 20.71s/it][h264 @ 0x555f28f1afc0] mmco: unref short failure
[h264 @ 0x555f28f1afc0] mmco: unref short failure
[h264 @ 0x5592936c9480] mmco: unref short failure
[h264 @ 0x5592936c9480] mmco: unref short failure
[h264 @ 0x5592af3b4540] mmco: unref short failure
[h264 @ 0x555f3fa435c0] mmco: unref short failure
[h264 @ 0x55d415cf6d80] mmco: unref short failure
[h264 @ 0x555f3f0cf240] mmco: unref short failure
[h264 @ 0x559f63140080] mmco: unref short failure
[h264 @ 0x559f77b99a80] mmco: unref short failure
[h264 @ 0x559f77b99a80] mmco: unref short failure
[h264 @ 0x555f32579840] mmco: unref short failure
[h264 @ 0x555f32579840] mmco: unref short failure
[h264 @ 0x55d4220ca700] mmco: unref short failure
[h264 @ 0x55d4220ca700] mmco: unref short failure
[h264 @ 0x55928c1d7100] mmco: unref short failure
[h264 @ 0x55928c1d7100] mmco: unref short failure
[h264 @ 0x55d4085a4200] mmco: unref short failure
[h264 @ 0x55d4085a4200] mmco: unref short failure
[h264 @ 0x559f877d7680] mmco: unref short failure
[h264 @ 0x559f5b83ee40] mmco: unref short failure
[h264 @ 0x559f691ffcc0] mmco: unref short failure
[h264 @ 0x559f691ffcc0] mmco: unref short failure
[h264 @ 0x55d406cbe1c0] mmco: unref short failure
[h264 @ 0x55928171b580] mmco: unref short failure
[h264 @ 0x5592a2eb30c0] mmco: unref short failure
09/17/2024 00:59:45 - INFO - __main__ -   current idx TXiTVBVNPyE.67 from finetune_area returns wrong image/video, use 71090 instead.
[h264 @ 0x55d419524780] mmco: unref short failure
[h264 @ 0x55d419524780] mmco: unref short failure
[h264 @ 0x5592859df540] mmco: unref short failure
[h264 @ 0x55928b918900] mmco: unref short failure
[h264 @ 0x55d40d3d3d80] mmco: unref short failure
[h264 @ 0x55d40d3d3d80] mmco: unref short failure
[h264 @ 0x55d40d3d3d80] mmco: unref short failure
[h264 @ 0x55d40d3d3d80] mmco: unref short failure
[h264 @ 0x555f2d5a6fc0] mmco: unref short failure
[h264 @ 0x555f3e281000] mmco: unref short failure
[h264 @ 0x55d403700000] mmco: unref short failure
09/17/2024 01:00:31 - INFO - __main__ -   current idx 8XNjcDFNZzM.6 from finetune_area returns wrong image/video, use 118130 instead.
[h264 @ 0x555f4c187200] mmco: unref short failure
[h264 @ 0x55d416746c40] mmco: unref short failure
[h264 @ 0x55d416746c40] mmco: unref short failure
[h264 @ 0x55d42521e140] mmco: unref short failure
[h264 @ 0x55d42521e140] mmco: unref short failure
[h264 @ 0x55d403e2ed40] mmco: unref short failure
[h264 @ 0x55d403e2ed40] mmco: unref short failure
[h264 @ 0x559f69f41dc0] mmco: unref short failure
[h264 @ 0x559f69f41dc0] mmco: unref short failure
[h264 @ 0x559f69f41dc0] mmco: unref short failure
[h264 @ 0x5592a2820c00] mmco: unref short failure
[h264 @ 0x5592a2820c00] mmco: unref short failure
[h264 @ 0x5592a2820c00] mmco: unref short failure
  9%|▉         | 132/1455 [1:20:46<24:00:27, 65.33s/it][h264 @ 0x555f3f0d5100] mmco: unref short failure
[h264 @ 0x555f3f0d5100] mmco: unref short failure
[h264 @ 0x5592a243dd80] mmco: unref short failure
[h264 @ 0x5592a243dd80] mmco: unref short failure
[h264 @ 0x5592933f5b80] mmco: unref short failure
  9%|▉         | 133/1455 [1:21:00<18:17:15, 49.80s/it][h264 @ 0x555f4fc76c00] mmco: unref short failure
[h264 @ 0x555f4fc76c00] mmco: unref short failure
not have audios xrsV4ybwavc.40
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f53933340] mmco: unref short failure
[h264 @ 0x555f497bcb40] mmco: unref short failure
[h264 @ 0x555f28007a40] mmco: unref short failure
  9%|▉         | 134/1455 [1:21:32<16:20:28, 44.53s/it][h264 @ 0x55929f8c1600] mmco: unref short failure
[h264 @ 0x5592a2eb30c0] mmco: unref short failure
[h264 @ 0x559f629dba80] mmco: unref short failure
[h264 @ 0x559f721ca140] mmco: unref short failure
  9%|▉         | 135/1455 [1:21:43<12:43:04, 34.69s/it]  9%|▉         | 136/1455 [1:21:55<10:12:25, 27.86s/it]  9%|▉         | 137/1455 [1:22:05<8:12:36, 22.43s/it] [h264 @ 0x559f787c6680] mmco: unref short failure
[h264 @ 0x55d412714740] mmco: unref short failure
[h264 @ 0x559f748e2480] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x559f6b6832c0] mmco: unref short failure
[h264 @ 0x55d410521480] mmco: unref short failure
[h264 @ 0x55d410521480] mmco: unref short failure
[h264 @ 0x5592a00bcf80] mmco: unref short failure
[h264 @ 0x5592827e6cc0] mmco: unref short failure
[h264 @ 0x5592827e6cc0] mmco: unref short failure
09/17/2024 01:03:01 - INFO - __main__ -   current idx 4VH9UPwnHCQ.1 from finetune_area returns wrong image/video, use 73536 instead.
  9%|▉         | 138/1455 [1:22:51<10:48:45, 29.56s/it][h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x559f8b9a2f80] mmco: unref short failure
[h264 @ 0x555f25fb5b80] mmco: unref short failure
[h264 @ 0x555f25fb5b80] mmco: unref short failure
 10%|▉         | 139/1455 [1:23:01<8:36:50, 23.56s/it] [h264 @ 0x55d419717680] mmco: unref short failure
[h264 @ 0x555f338c9d40] mmco: unref short failure
[h264 @ 0x559285367dc0] mmco: unref short failure
[h264 @ 0x559285367dc0] mmco: unref short failure
[h264 @ 0x559286009400] mmco: unref short failure
[h264 @ 0x55d4061e6b80] mmco: unref short failure
[h264 @ 0x55d4061e6b80] mmco: unref short failure
[h264 @ 0x55d4061e6b80] mmco: unref short failure
[h264 @ 0x55d4061e6b80] mmco: unref short failure
[h264 @ 0x559296e6d900] mmco: unref short failure
[h264 @ 0x559296e6d900] mmco: unref short failure
[h264 @ 0x55d405a06800] mmco: unref short failure
[h264 @ 0x55d405a06800] mmco: unref short failure
[h264 @ 0x55d405a06800] mmco: unref short failure
[h264 @ 0x555f26b427c0] mmco: unref short failure
[h264 @ 0x555f26b427c0] mmco: unref short failure
[h264 @ 0x55d41d5f3e80] mmco: unref short failure
[h264 @ 0x555f26b427c0] mmco: unref short failure
[h264 @ 0x559f5f6aff40] mmco: unref short failure
[h264 @ 0x555f3d09ebc0] mmco: unref short failure
[h264 @ 0x555f3d09ebc0] mmco: unref short failure
[h264 @ 0x55d41d9cd780] mmco: unref short failure
[h264 @ 0x55d41d9cd780] mmco: unref short failure
[h264 @ 0x555f56290340] mmco: unref short failure
[h264 @ 0x555f549f7f00] mmco: unref short failure
[h264 @ 0x555f549f7f00] mmco: unref short failure
[h264 @ 0x5592946cebc0] mmco: unref short failure
[h264 @ 0x5592946cebc0] mmco: unref short failure
[h264 @ 0x5592946cebc0] mmco: unref short failure
[h264 @ 0x55d438a312c0] mmco: unref short failure
[h264 @ 0x55d438a312c0] mmco: unref short failure
[h264 @ 0x55d438a312c0] mmco: unref short failure
[h264 @ 0x559f5c7a40c0] mmco: unref short failure
[h264 @ 0x55d41a962bc0] mmco: unref short failure
[h264 @ 0x55d41a962bc0] mmco: unref short failure
[h264 @ 0x559f6bdc8d40] mmco: unref short failure
09/17/2024 01:05:14 - INFO - __main__ -   current idx aKaIctkC1IU.24 from finetune_area returns wrong image/video, use 115195 instead.
[h264 @ 0x555f2a8bce00] mmco: unref short failure
[h264 @ 0x555f501c7d00] mmco: unref short failure
[h264 @ 0x559f5bcd63c0] mmco: unref short failure
[h264 @ 0x559f5bcd63c0] mmco: unref short failure
[h264 @ 0x559f7a24d240] mmco: unref short failure
[h264 @ 0x55928746bb00] mmco: unref short failure
[h264 @ 0x55928746bb00] mmco: unref short failure
[h264 @ 0x559f6d70f080] mmco: unref short failure
[h264 @ 0x559f6d70f080] mmco: unref short failure
[h264 @ 0x55929e33c340] mmco: unref short failure
[h264 @ 0x55929e33c340] mmco: unref short failure
[h264 @ 0x559f81adacc0] mmco: unref short failure
09/17/2024 01:05:58 - INFO - __main__ -   current idx edpFNTpJidw.6 from finetune_area returns wrong image/video, use 68509 instead.
 10%|▉         | 140/1455 [1:25:37<23:10:23, 63.44s/it][h264 @ 0x555f30aa3580] mmco: unref short failure
[h264 @ 0x555f30aa3580] mmco: unref short failure
[h264 @ 0x555f30aa3580] mmco: unref short failure
[h264 @ 0x555f30aa3580] mmco: unref short failure
[h264 @ 0x5592a150c2c0] mmco: unref short failure
 10%|▉         | 141/1455 [1:25:56<18:15:53, 50.04s/it]09/17/2024 01:06:21 - INFO - __main__ -   current idx Wirilsgk0qk.51 from finetune_area returns wrong image/video, use 145799 instead.
[h264 @ 0x55929b4f9300] mmco: unref short failure
[h264 @ 0x55929b4f9300] mmco: unref short failure
[h264 @ 0x559f8849f400] mmco: unref short failure
[h264 @ 0x559f8849f400] mmco: unref short failure
[h264 @ 0x559285367fc0] mmco: unref short failure
[h264 @ 0x559285367fc0] mmco: unref short failure
[h264 @ 0x55d41c55dc80] mmco: unref short failure
[h264 @ 0x55d41c55dc80] mmco: unref short failure
[h264 @ 0x5592a96991c0] mmco: unref short failure
[h264 @ 0x5592a96991c0] mmco: unref short failure
[h264 @ 0x55d42fbbcb80] mmco: unref short failure
[h264 @ 0x55d42fbbcb80] mmco: unref short failure
[h264 @ 0x559f64b90440] mmco: unref short failure
[h264 @ 0x559f64b90440] mmco: unref short failure
[h264 @ 0x559f64b90440] mmco: unref short failure
[h264 @ 0x559f64b90440] mmco: unref short failure
 10%|▉         | 142/1455 [1:26:36<17:04:59, 46.84s/it][h264 @ 0x559f77e2e2c0] mmco: unref short failure
[h264 @ 0x559f8bc09b00] mmco: unref short failure
[h264 @ 0x559f8bc09b00] mmco: unref short failure
 10%|▉         | 143/1455 [1:26:45<12:55:51, 35.48s/it] 10%|▉         | 144/1455 [1:26:56<10:17:46, 28.27s/it][h264 @ 0x555f34887980] mmco: unref short failure
[h264 @ 0x555f34887980] mmco: unref short failure
[h264 @ 0x555f34887980] mmco: unref short failure
[h264 @ 0x555f34887980] mmco: unref short failure
 10%|▉         | 145/1455 [1:27:05<8:08:43, 22.38s/it] [h264 @ 0x559f62579500] mmco: unref short failure
[h264 @ 0x559f62579500] mmco: unref short failure
[h264 @ 0x555f29744140] mmco: unref short failure
09/17/2024 01:07:40 - INFO - __main__ -   current idx -H9yXYU9VP4.53 from finetune_area returns wrong image/video, use 102097 instead.
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
[h264 @ 0x55d40afc6700] mmco: unref short failure
09/17/2024 01:07:47 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 52033 instead.
[h264 @ 0x555f320c4980] mmco: unref short failure
[h264 @ 0x5592802c8d80] mmco: unref short failure
[h264 @ 0x55927f9991c0] mmco: unref short failure
[h264 @ 0x55927f9991c0] mmco: unref short failure
 10%|█         | 146/1455 [1:27:39<9:24:39, 25.88s/it][h264 @ 0x5592946d81c0] mmco: unref short failure
 10%|█         | 147/1455 [1:27:47<7:30:58, 20.69s/it][h264 @ 0x55d4240c4a40] mmco: unref short failure
[h264 @ 0x55d4240c4a40] mmco: unref short failure
[h264 @ 0x555f39c45a80] mmco: unref short failure
[h264 @ 0x555f39c45a80] mmco: unref short failure
[h264 @ 0x555f39c45a80] mmco: unref short failure
[h264 @ 0x555f39c45a80] mmco: unref short failure
[h264 @ 0x555f31a1b180] mmco: unref short failure
[h264 @ 0x559f7afafd40] mmco: unref short failure
[h264 @ 0x559f7afafd40] mmco: unref short failure
[h264 @ 0x555f28a7f2c0] mmco: unref short failure
[h264 @ 0x555f28a7f2c0] mmco: unref short failure
[h264 @ 0x55929f8c1600] mmco: unref short failure
[h264 @ 0x55929f8c1600] mmco: unref short failure
[h264 @ 0x55929f8c1600] mmco: unref short failure
[h264 @ 0x55929f8c1600] mmco: unref short failure
[h264 @ 0x5592a867e200] mmco: unref short failure
[h264 @ 0x5592968e2540] mmco: unref short failure
[h264 @ 0x55d4323c1080] mmco: unref short failure
[h264 @ 0x555f5a8d1000] mmco: unref short failure
[h264 @ 0x555f5a8d1000] mmco: unref short failure
[h264 @ 0x55928a71fcc0] mmco: unref short failure
[h264 @ 0x55928a71fcc0] mmco: unref short failure
[h264 @ 0x555f50f65300] mmco: unref short failure
[h264 @ 0x555f50f65300] mmco: unref short failure
[h264 @ 0x55d42d035e40] mmco: unref short failure
[h264 @ 0x559f78b29880] mmco: unref short failure
[h264 @ 0x559f78b29880] mmco: unref short failure
[h264 @ 0x559f78b29880] mmco: unref short failure
[h264 @ 0x559f78b29880] mmco: unref short failure
[h264 @ 0x559f7c9bbc00] mmco: unref short failure
[h264 @ 0x55d4120d16c0] mmco: unref short failure
[h264 @ 0x55d4120d16c0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x559f7a54e980] mmco: unref short failure
[h264 @ 0x559f7a54e980] mmco: unref short failure
[h264 @ 0x55d40e868840] mmco: unref short failure
[h264 @ 0x55d41c55de80] mmco: unref short failure
[h264 @ 0x55d41c55de80] mmco: unref short failure
[h264 @ 0x55d431643ec0] mmco: unref short failure
[h264 @ 0x55d431643ec0] mmco: unref short failure
[h264 @ 0x559f75dccc00] mmco: unref short failure
[h264 @ 0x55929e9ad800] mmco: unref short failure
[h264 @ 0x55929e9ad800] mmco: unref short failure
[h264 @ 0x55d42d38a840] mmco: unref short failure
[h264 @ 0x559f7db90a00] mmco: unref short failure
[h264 @ 0x55929c80b740] mmco: unref short failure
09/17/2024 01:09:47 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 117288 instead.
[h264 @ 0x559f8203d040] mmco: unref short failure
[h264 @ 0x559f7db90a00] mmco: unref short failure
[h264 @ 0x559f7db90a00] mmco: unref short failure
[h264 @ 0x559f787c6d00] mmco: unref short failure
[h264 @ 0x559f787c6d00] mmco: unref short failure
[h264 @ 0x559f6ba1fdc0] mmco: unref short failure
[h264 @ 0x555f4f43a8c0] mmco: unref short failure
[h264 @ 0x55d41d9cd580] mmco: unref short failure
[h264 @ 0x55d41d9cd580] mmco: unref short failure
[h264 @ 0x559f81163580] mmco: unref short failure
[h264 @ 0x559f81163580] mmco: unref short failure
[h264 @ 0x55d420278bc0] mmco: unref short failure
[h264 @ 0x55d420278bc0] mmco: unref short failure
[h264 @ 0x55928f2041c0] mmco: unref short failure
[h264 @ 0x555f4de3bb40] mmco: unref short failure
[h264 @ 0x555f4de3bb40] mmco: unref short failure
[h264 @ 0x555f4de3bb40] mmco: unref short failure
[h264 @ 0x555f4de3bb40] mmco: unref short failure
[h264 @ 0x55929342e4c0] mmco: unref short failure
[h264 @ 0x55929342e4c0] mmco: unref short failure
 10%|█         | 148/1455 [1:30:34<23:25:08, 64.51s/it][h264 @ 0x555f2a3f9180] mmco: unref short failure
[h264 @ 0x555f2a3f9180] mmco: unref short failure
[h264 @ 0x55d40e4a5b80] mmco: unref short failure
[h264 @ 0x55d40e4a5b80] mmco: unref short failure
[h264 @ 0x55d40a78a1c0] mmco: unref short failure
 10%|█         | 149/1455 [1:30:44<17:26:28, 48.08s/it]09/17/2024 01:11:05 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 01:11:05 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f599c7ac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f599c7ac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559f683cba40] mmco: unref short failure
[h264 @ 0x559f683cba40] mmco: unref short failure
[h264 @ 0x559f683cba40] mmco: unref short failure
[h264 @ 0x559f683cba40] mmco: unref short failure
[h264 @ 0x559f78eeaa00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d42718e400] mmco: unref short failure
[h264 @ 0x55d42718e400] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559299cd5880] mmco: unref short failure
[h264 @ 0x559299cd5880] mmco: unref short failure
[h264 @ 0x55d4291e6d00] mmco: unref short failure
[h264 @ 0x55d4291e6d00] mmco: unref short failure
[h264 @ 0x559f5f6dff00] mmco: unref short failure
[h264 @ 0x55929c3cf4c0] mmco: unref short failure
[h264 @ 0x55929c3cf4c0] mmco: unref short failure
[h264 @ 0x555f3a3ad200] mmco: unref short failure
[h264 @ 0x555f3a3ad200] mmco: unref short failure
[h264 @ 0x5592b2eb04c0] mmco: unref short failure
[h264 @ 0x5592b2eb04c0] mmco: unref short failure
[h264 @ 0x555f3f742840] mmco: unref short failure
[h264 @ 0x555f3f742840] mmco: unref short failure
09/17/2024 01:12:56 - INFO - __main__ -   current idx 0mdFhko5-lk.77 from finetune_area returns wrong image/video, use 133786 instead.
[h264 @ 0x555f3e2b4640] mmco: unref short failure
[h264 @ 0x555f3f742840] mmco: unref short failure
[h264 @ 0x559f72f553c0] mmco: unref short failure
[h264 @ 0x555f4580a7c0] mmco: unref short failure
[h264 @ 0x55d419162740] mmco: unref short failure
[h264 @ 0x55d419162740] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:32,  2.39it/s][A
  1%|          | 2/221 [00:00<01:31,  2.40it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.44it/s][A
  2%|▏         | 4/221 [00:01<01:10,  3.09it/s][A
  2%|▏         | 5/221 [00:01<00:58,  3.71it/s][A
  3%|▎         | 6/221 [00:01<00:54,  3.92it/s][A
  3%|▎         | 7/221 [00:02<00:56,  3.76it/s][A
  4%|▎         | 8/221 [00:02<00:55,  3.87it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.34it/s][A
  5%|▍         | 10/221 [00:03<01:26,  2.45it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.10it/s][A
  5%|▌         | 12/221 [00:03<01:10,  2.94it/s][A[h264 @ 0x55d4033c76c0] mmco: unref short failure

  6%|▌         | 13/221 [00:04<01:05,  3.17it/s][A
  6%|▋         | 14/221 [00:04<01:07,  3.08it/s][A[h264 @ 0x55928e8cd100] mmco: unref short failure
[h264 @ 0x55928e8cd100] mmco: unref short failure

  7%|▋         | 15/221 [00:04<01:10,  2.94it/s][A
  7%|▋         | 16/221 [00:05<01:14,  2.74it/s][A
  8%|▊         | 17/221 [00:05<01:28,  2.29it/s][A
  8%|▊         | 18/221 [00:06<01:24,  2.39it/s][A
  9%|▊         | 19/221 [00:06<01:10,  2.85it/s][A[h264 @ 0x559f6fb4f680] mmco: unref short failure
[h264 @ 0x559f6fb4f680] mmco: unref short failure

  9%|▉         | 20/221 [00:06<00:57,  3.51it/s][A
 10%|▉         | 21/221 [00:07<01:04,  3.11it/s][A
 10%|▉         | 22/221 [00:07<01:09,  2.88it/s][A
 10%|█         | 23/221 [00:07<00:54,  3.66it/s][A
 11%|█         | 24/221 [00:07<00:47,  4.13it/s][A
 11%|█▏        | 25/221 [00:07<00:44,  4.44it/s][A
 12%|█▏        | 26/221 [00:08<00:55,  3.52it/s][A
 12%|█▏        | 27/221 [00:08<00:51,  3.75it/s][A
 13%|█▎        | 28/221 [00:09<01:18,  2.45it/s][A
 13%|█▎        | 29/221 [00:09<01:11,  2.70it/s][A
 14%|█▎        | 30/221 [00:09<01:05,  2.92it/s][A
 14%|█▍        | 31/221 [00:10<01:05,  2.91it/s][A
 14%|█▍        | 32/221 [00:10<00:52,  3.61it/s][A
 15%|█▍        | 33/221 [00:10<00:45,  4.16it/s][A
 15%|█▌        | 34/221 [00:10<00:38,  4.82it/s][A
 16%|█▌        | 35/221 [00:10<00:41,  4.45it/s][A
 16%|█▋        | 36/221 [00:11<00:56,  3.26it/s][A
 17%|█▋        | 37/221 [00:11<01:00,  3.03it/s][A
 17%|█▋        | 38/221 [00:12<01:06,  2.73it/s][A
 18%|█▊        | 39/221 [00:12<00:52,  3.44it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.34it/s][A
 19%|█▊        | 41/221 [00:12<00:46,  3.83it/s][A09/17/2024 01:13:39 - INFO - __main__ -   current idx U2DBfiveIQ0.26 from finetune_area returns wrong image/video, use 127111 instead.
[h264 @ 0x559f8210b280] mmco: unref short failure
[h264 @ 0x559f8210b280] mmco: unref short failure

 19%|█▉        | 42/221 [00:13<01:05,  2.71it/s][A
 19%|█▉        | 43/221 [00:13<01:03,  2.82it/s][A
 20%|█▉        | 44/221 [00:14<00:58,  3.03it/s][A
 20%|██        | 45/221 [00:14<01:08,  2.59it/s][A
 21%|██        | 46/221 [00:14<01:10,  2.49it/s][A
 21%|██▏       | 47/221 [00:15<01:17,  2.26it/s][A
 22%|██▏       | 48/221 [00:15<01:01,  2.81it/s][A
 22%|██▏       | 49/221 [00:16<01:03,  2.70it/s][A
 23%|██▎       | 50/221 [00:16<01:01,  2.79it/s][A
 23%|██▎       | 51/221 [00:16<00:53,  3.19it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.37it/s][A
 24%|██▍       | 53/221 [00:17<00:44,  3.75it/s][A[h264 @ 0x559f85ccd580] mmco: unref short failure
[h264 @ 0x559f85ccd580] mmco: unref short failure
[h264 @ 0x559f85ccd580] mmco: unref short failure
[h264 @ 0x559f85ccd580] mmco: unref short failure

 24%|██▍       | 54/221 [00:18<01:58,  1.41it/s][A
 25%|██▍       | 55/221 [00:19<01:41,  1.63it/s][A
 25%|██▌       | 56/221 [00:19<01:18,  2.09it/s][A
 26%|██▌       | 57/221 [00:19<01:09,  2.37it/s][A
 26%|██▌       | 58/221 [00:19<00:55,  2.94it/s][A
 27%|██▋       | 59/221 [00:19<00:47,  3.38it/s][A
 27%|██▋       | 60/221 [00:20<01:17,  2.07it/s][A
 28%|██▊       | 61/221 [00:21<01:07,  2.36it/s][A
 28%|██▊       | 62/221 [00:21<01:06,  2.38it/s][A
 29%|██▊       | 63/221 [00:21<00:56,  2.81it/s][A
 29%|██▉       | 64/221 [00:22<00:59,  2.63it/s][A
 29%|██▉       | 65/221 [00:22<00:48,  3.22it/s][A
 30%|██▉       | 66/221 [00:22<00:59,  2.60it/s][A
 30%|███       | 67/221 [00:23<00:55,  2.76it/s][A
 31%|███       | 68/221 [00:23<00:48,  3.15it/s][A
 31%|███       | 69/221 [00:24<01:09,  2.19it/s][A
 32%|███▏      | 70/221 [00:24<00:57,  2.61it/s][A
 32%|███▏      | 71/221 [00:24<00:51,  2.90it/s][A
 33%|███▎      | 72/221 [00:25<00:52,  2.84it/s][A
 33%|███▎      | 73/221 [00:25<00:58,  2.51it/s][A
 33%|███▎      | 74/221 [00:25<00:46,  3.16it/s][A
 34%|███▍      | 75/221 [00:26<00:48,  3.04it/s][A
 34%|███▍      | 76/221 [00:26<00:42,  3.44it/s][A
 35%|███▍      | 77/221 [00:26<00:48,  2.94it/s][A
 35%|███▌      | 78/221 [00:26<00:39,  3.62it/s][A
 36%|███▌      | 79/221 [00:27<00:51,  2.74it/s][A
 36%|███▌      | 80/221 [00:27<00:45,  3.09it/s][A
 37%|███▋      | 81/221 [00:27<00:44,  3.13it/s][A
 37%|███▋      | 82/221 [00:28<00:51,  2.70it/s][A
 38%|███▊      | 83/221 [00:28<00:51,  2.67it/s][A
 38%|███▊      | 84/221 [00:29<00:45,  3.01it/s][A
 38%|███▊      | 85/221 [00:29<00:37,  3.66it/s][A
 39%|███▉      | 86/221 [00:29<00:34,  3.86it/s][A
 39%|███▉      | 87/221 [00:30<01:01,  2.18it/s][A
 40%|███▉      | 88/221 [00:31<01:17,  1.72it/s][A
 40%|████      | 89/221 [00:31<01:05,  2.02it/s][A
 41%|████      | 90/221 [00:31<00:54,  2.41it/s][A
 41%|████      | 91/221 [00:31<00:43,  2.98it/s][A
 42%|████▏     | 92/221 [00:32<00:40,  3.20it/s][A[h264 @ 0x555f3ad8da40] mmco: unref short failure
[h264 @ 0x555f3ad8da40] mmco: unref short failure
[h264 @ 0x555f3ad8da40] mmco: unref short failure
[h264 @ 0x555f3ad8da40] mmco: unref short failure

 42%|████▏     | 93/221 [00:32<00:45,  2.84it/s][A
 43%|████▎     | 94/221 [00:32<00:40,  3.11it/s][A
 43%|████▎     | 95/221 [00:33<00:38,  3.28it/s][A
 43%|████▎     | 96/221 [00:33<00:56,  2.21it/s][A
 44%|████▍     | 97/221 [00:34<00:48,  2.54it/s][A
 44%|████▍     | 98/221 [00:34<00:53,  2.31it/s][A
 45%|████▍     | 99/221 [00:34<00:45,  2.67it/s][A09/17/2024 01:14:01 - INFO - __main__ -   current idx QRr-nFmU9s8.3 from finetune_area returns wrong image/video, use 20606 instead.

 45%|████▌     | 100/221 [00:35<00:41,  2.90it/s][A
 46%|████▌     | 101/221 [00:35<00:37,  3.21it/s][A
 46%|████▌     | 102/221 [00:36<00:47,  2.48it/s][A
 47%|████▋     | 103/221 [00:36<00:37,  3.16it/s][A
 47%|████▋     | 104/221 [00:36<00:34,  3.35it/s][A
 48%|████▊     | 105/221 [00:36<00:37,  3.11it/s][A
 48%|████▊     | 106/221 [00:37<00:50,  2.26it/s][A
 48%|████▊     | 107/221 [00:37<00:41,  2.76it/s][A[h264 @ 0x55928e7d11c0] mmco: unref short failure
[h264 @ 0x55928e7d11c0] mmco: unref short failure

 49%|████▉     | 108/221 [00:38<00:39,  2.84it/s][A
 49%|████▉     | 109/221 [00:38<00:34,  3.23it/s][A
 50%|████▉     | 110/221 [00:38<00:29,  3.80it/s][A
 50%|█████     | 111/221 [00:38<00:38,  2.86it/s][A
 51%|█████     | 112/221 [00:39<00:34,  3.17it/s][A
 51%|█████     | 113/221 [00:39<00:34,  3.17it/s][A
 52%|█████▏    | 115/221 [00:39<00:22,  4.68it/s][A
 52%|█████▏    | 116/221 [00:40<00:35,  2.93it/s][A
 53%|█████▎    | 117/221 [00:40<00:36,  2.87it/s][A
 53%|█████▎    | 118/221 [00:41<00:36,  2.83it/s][A
 54%|█████▍    | 119/221 [00:41<00:42,  2.39it/s][A
 54%|█████▍    | 120/221 [00:42<00:38,  2.62it/s][A
 55%|█████▍    | 121/221 [00:42<00:33,  2.99it/s][A
 55%|█████▌    | 122/221 [00:42<00:31,  3.13it/s][A
 56%|█████▌    | 123/221 [00:42<00:26,  3.68it/s][A
 56%|█████▌    | 124/221 [00:42<00:27,  3.53it/s][A[h264 @ 0x555f48ca4800] mmco: unref short failure
[h264 @ 0x555f48ca4800] mmco: unref short failure
[h264 @ 0x5592aa4a0740] mmco: unref short failure

 57%|█████▋    | 125/221 [00:43<00:35,  2.69it/s][A
 57%|█████▋    | 126/221 [00:43<00:31,  3.02it/s][A[h264 @ 0x55d4265cb640] mmco: unref short failure

 57%|█████▋    | 127/221 [00:45<01:09,  1.34it/s][A
 58%|█████▊    | 128/221 [00:45<00:59,  1.55it/s][A
 58%|█████▊    | 129/221 [00:46<00:45,  2.01it/s][A
 59%|█████▉    | 130/221 [00:46<00:38,  2.36it/s][A
 59%|█████▉    | 131/221 [00:46<00:32,  2.77it/s][A
 60%|█████▉    | 132/221 [00:47<00:47,  1.89it/s][A
 60%|██████    | 133/221 [00:47<00:44,  1.96it/s][A
 61%|██████    | 134/221 [00:48<00:49,  1.77it/s][A
 61%|██████    | 135/221 [00:48<00:38,  2.21it/s][A
 62%|██████▏   | 136/221 [00:49<00:36,  2.34it/s][A
 62%|██████▏   | 137/221 [00:49<00:36,  2.32it/s][A
 62%|██████▏   | 138/221 [00:50<00:35,  2.31it/s][A
 63%|██████▎   | 139/221 [00:50<00:41,  1.96it/s][A
 63%|██████▎   | 140/221 [00:51<00:36,  2.20it/s][A
 64%|██████▍   | 141/221 [00:51<00:32,  2.49it/s][A
 64%|██████▍   | 142/221 [00:51<00:29,  2.67it/s][A
 65%|██████▍   | 143/221 [00:52<00:29,  2.63it/s][A
 65%|██████▌   | 144/221 [00:52<00:27,  2.78it/s][A
 66%|██████▌   | 145/221 [00:52<00:22,  3.39it/s][A
 66%|██████▌   | 146/221 [00:52<00:17,  4.20it/s][A[h264 @ 0x55d412cd8500] mmco: unref short failure
[h264 @ 0x55d412cd8500] mmco: unref short failure

 67%|██████▋   | 147/221 [00:52<00:18,  3.94it/s][A
 67%|██████▋   | 148/221 [00:53<00:20,  3.50it/s][A
 67%|██████▋   | 149/221 [00:53<00:23,  3.06it/s][A
 68%|██████▊   | 150/221 [00:53<00:20,  3.41it/s][A
 68%|██████▊   | 151/221 [00:54<00:28,  2.49it/s][A
 69%|██████▉   | 152/221 [00:55<00:45,  1.51it/s][A
 69%|██████▉   | 153/221 [00:56<00:36,  1.87it/s][A
 70%|██████▉   | 154/221 [00:56<00:30,  2.19it/s][A
 70%|███████   | 155/221 [00:56<00:28,  2.34it/s][A
 71%|███████   | 156/221 [00:57<00:30,  2.11it/s][A[h264 @ 0x555f39c3ccc0] mmco: unref short failure
[h264 @ 0x555f39c3ccc0] mmco: unref short failure

 71%|███████   | 157/221 [00:57<00:29,  2.14it/s][A
 71%|███████▏  | 158/221 [00:58<00:26,  2.37it/s][A
 72%|███████▏  | 159/221 [00:58<00:22,  2.78it/s][A
 72%|███████▏  | 160/221 [00:58<00:21,  2.90it/s][A
 73%|███████▎  | 161/221 [00:58<00:16,  3.64it/s][A
 73%|███████▎  | 162/221 [00:58<00:14,  4.21it/s][A
 74%|███████▍  | 163/221 [00:59<00:14,  3.95it/s][A
 74%|███████▍  | 164/221 [00:59<00:14,  3.95it/s][A
 75%|███████▍  | 165/221 [00:59<00:14,  3.93it/s][A
 75%|███████▌  | 166/221 [01:00<00:17,  3.23it/s][A
 76%|███████▌  | 167/221 [01:00<00:14,  3.76it/s][A
 76%|███████▌  | 168/221 [01:00<00:20,  2.62it/s][A
 76%|███████▋  | 169/221 [01:01<00:16,  3.14it/s][A
 77%|███████▋  | 170/221 [01:01<00:16,  3.14it/s][A
 77%|███████▋  | 171/221 [01:01<00:17,  2.81it/s][A
 78%|███████▊  | 172/221 [01:02<00:16,  3.01it/s][A
 78%|███████▊  | 173/221 [01:02<00:17,  2.77it/s][A09/17/2024 01:14:29 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 124008 instead.

 79%|███████▊  | 174/221 [01:02<00:15,  3.10it/s][A
 79%|███████▉  | 175/221 [01:03<00:15,  3.03it/s][A
 80%|███████▉  | 176/221 [01:03<00:13,  3.36it/s][A
 80%|████████  | 177/221 [01:03<00:12,  3.65it/s][A
 81%|████████  | 178/221 [01:04<00:16,  2.63it/s][A
 81%|████████  | 179/221 [01:04<00:16,  2.48it/s][A09/17/2024 01:14:31 - INFO - __main__ -   current idx 1Ubj2kIiKMw.71 from finetune_area returns wrong image/video, use 55474 instead.

 81%|████████▏ | 180/221 [01:04<00:15,  2.73it/s][A
 82%|████████▏ | 181/221 [01:05<00:12,  3.09it/s][A
 82%|████████▏ | 182/221 [01:05<00:12,  3.19it/s][A
 83%|████████▎ | 183/221 [01:05<00:11,  3.31it/s][A
 83%|████████▎ | 184/221 [01:06<00:11,  3.24it/s][A
 84%|████████▎ | 185/221 [01:06<00:09,  3.83it/s][A
 84%|████████▍ | 186/221 [01:06<00:09,  3.68it/s][A
 85%|████████▍ | 187/221 [01:06<00:09,  3.46it/s][A
 85%|████████▌ | 188/221 [01:07<00:08,  3.68it/s][A
 86%|████████▌ | 189/221 [01:07<00:09,  3.26it/s][A
 86%|████████▌ | 190/221 [01:07<00:11,  2.80it/s][A[h264 @ 0x5592968da300] mmco: unref short failure
[h264 @ 0x5592968da300] mmco: unref short failure

 86%|████████▋ | 191/221 [01:08<00:08,  3.41it/s][A
 87%|████████▋ | 192/221 [01:08<00:08,  3.39it/s][A
 87%|████████▋ | 193/221 [01:08<00:06,  4.09it/s][A
 88%|████████▊ | 194/221 [01:09<00:15,  1.69it/s][A
 88%|████████▊ | 195/221 [01:10<00:12,  2.08it/s][A
 89%|████████▊ | 196/221 [01:10<00:10,  2.33it/s][A
 89%|████████▉ | 197/221 [01:10<00:10,  2.39it/s][A
 90%|████████▉ | 198/221 [01:11<00:09,  2.54it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.85it/s][A
 90%|█████████ | 200/221 [01:11<00:06,  3.22it/s][A[h264 @ 0x555f3623b5c0] mmco: unref short failure
[h264 @ 0x555f3623b5c0] mmco: unref short failure

 91%|█████████ | 201/221 [01:13<00:17,  1.12it/s][A
 91%|█████████▏| 202/221 [01:14<00:13,  1.38it/s][A
 92%|█████████▏| 203/221 [01:14<00:10,  1.69it/s][A
 92%|█████████▏| 204/221 [01:14<00:08,  2.06it/s][A
 93%|█████████▎| 205/221 [01:14<00:06,  2.56it/s][A
 93%|█████████▎| 206/221 [01:15<00:07,  2.03it/s][A
 94%|█████████▍| 208/221 [01:16<00:04,  2.72it/s][A
 95%|█████████▍| 209/221 [01:16<00:04,  2.92it/s][A
 95%|█████████▌| 210/221 [01:16<00:03,  3.28it/s][A
 95%|█████████▌| 211/221 [01:16<00:03,  2.94it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  3.05it/s][A
 96%|█████████▋| 213/221 [01:17<00:02,  3.34it/s][A[h264 @ 0x559f908ce280] mmco: unref short failure
[h264 @ 0x559f908ce280] mmco: unref short failure

 97%|█████████▋| 214/221 [01:18<00:02,  2.43it/s][A
 97%|█████████▋| 215/221 [01:18<00:02,  2.74it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  2.79it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.64it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.66it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.64it/s][A
100%|█████████▉| 220/221 [01:21<00:00,  1.69it/s][A
100%|██████████| 221/221 [01:21<00:00,  2.13it/s][A100%|██████████| 221/221 [01:21<00:00,  2.72it/s]
[h264 @ 0x555f58d78f80] mmco: unref short failure
[h264 @ 0x555f58d78f80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:17,  2.84it/s][A
  1%|          | 2/221 [00:00<01:24,  2.59it/s][A
  1%|▏         | 3/221 [00:01<01:23,  2.60it/s][A
  2%|▏         | 4/221 [00:01<01:19,  2.73it/s][A
  2%|▏         | 5/221 [00:01<01:15,  2.85it/s][A
  3%|▎         | 6/221 [00:02<01:13,  2.92it/s][A
  3%|▎         | 7/221 [00:02<01:12,  2.96it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.84it/s][A
  4%|▍         | 9/221 [00:03<01:15,  2.79it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.88it/s][A
  5%|▍         | 11/221 [00:03<01:11,  2.93it/s][A
  5%|▌         | 12/221 [00:04<01:10,  2.97it/s][A
  6%|▌         | 13/221 [00:04<01:09,  2.98it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.89it/s][A
  7%|▋         | 15/221 [00:05<01:14,  2.77it/s][A
  7%|▋         | 16/221 [00:05<01:14,  2.75it/s][A
  8%|▊         | 17/221 [00:05<01:12,  2.81it/s][A
  8%|▊         | 18/221 [00:06<01:09,  2.91it/s][A
  9%|▊         | 19/221 [00:06<01:09,  2.91it/s][A
  9%|▉         | 20/221 [00:07<01:09,  2.90it/s][A
 10%|▉         | 21/221 [00:07<01:11,  2.80it/s][A
 10%|▉         | 22/221 [00:07<01:10,  2.80it/s][A[h264 @ 0x55929f61b400] mmco: unref short failure
[h264 @ 0x55929f61b400] mmco: unref short failure

 10%|█         | 23/221 [00:08<01:09,  2.85it/s][A
 11%|█         | 24/221 [00:08<01:07,  2.93it/s][A
 11%|█▏        | 25/221 [00:08<01:06,  2.94it/s][A
 12%|█▏        | 26/221 [00:09<01:07,  2.90it/s][A
 12%|█▏        | 27/221 [00:09<01:06,  2.92it/s][A
 13%|█▎        | 28/221 [00:09<01:11,  2.71it/s][A
 13%|█▎        | 29/221 [00:10<01:10,  2.72it/s][A
 14%|█▎        | 30/221 [00:10<01:12,  2.62it/s][A
 14%|█▍        | 31/221 [00:11<01:13,  2.57it/s][A
 14%|█▍        | 32/221 [00:11<01:11,  2.63it/s][A
 15%|█▍        | 33/221 [00:11<01:12,  2.59it/s][A
 15%|█▌        | 34/221 [00:12<01:16,  2.43it/s][A
 16%|█▌        | 35/221 [00:12<01:31,  2.04it/s][A
 16%|█▋        | 36/221 [00:13<01:24,  2.19it/s][A[h264 @ 0x555f48e80a00] mmco: unref short failure
[h264 @ 0x555f48e80a00] mmco: unref short failure

 17%|█▋        | 37/221 [00:13<01:16,  2.40it/s][A
 17%|█▋        | 38/221 [00:13<01:11,  2.55it/s][A
 18%|█▊        | 39/221 [00:14<01:07,  2.68it/s][A
 18%|█▊        | 40/221 [00:14<01:05,  2.76it/s][A
 19%|█▊        | 41/221 [00:15<01:10,  2.56it/s][A
 19%|█▉        | 42/221 [00:15<01:10,  2.55it/s][A
 19%|█▉        | 43/221 [00:15<01:09,  2.56it/s][A
 20%|█▉        | 44/221 [00:16<01:09,  2.55it/s][A
 20%|██        | 45/221 [00:16<01:05,  2.68it/s][A
 21%|██        | 46/221 [00:16<01:03,  2.75it/s][A
 21%|██▏       | 47/221 [00:17<01:05,  2.67it/s][A
 22%|██▏       | 48/221 [00:17<01:03,  2.74it/s][A
 22%|██▏       | 49/221 [00:18<01:01,  2.81it/s][A[h264 @ 0x555f4c392a00] mmco: unref short failure
[h264 @ 0x555f4c392a00] mmco: unref short failure

 23%|██▎       | 50/221 [00:18<00:59,  2.85it/s][A
 23%|██▎       | 51/221 [00:18<00:58,  2.92it/s][A
 24%|██▎       | 52/221 [00:19<00:58,  2.91it/s][A
 24%|██▍       | 53/221 [00:19<00:57,  2.90it/s][A
 24%|██▍       | 54/221 [00:19<00:56,  2.95it/s][A
 25%|██▍       | 55/221 [00:20<00:56,  2.94it/s][A
 25%|██▌       | 56/221 [00:20<00:59,  2.76it/s][A
 26%|██▌       | 57/221 [00:20<00:57,  2.85it/s][A
 26%|██▌       | 58/221 [00:21<00:56,  2.91it/s][A
 27%|██▋       | 59/221 [00:21<00:55,  2.94it/s][A
 27%|██▋       | 60/221 [00:21<00:54,  2.95it/s][A
 28%|██▊       | 61/221 [00:22<00:53,  3.00it/s][A
 28%|██▊       | 62/221 [00:22<00:52,  3.02it/s][A
 29%|██▊       | 63/221 [00:22<00:52,  3.02it/s][A
 29%|██▉       | 64/221 [00:23<00:51,  3.04it/s][A
 29%|██▉       | 65/221 [00:23<00:52,  2.99it/s][A
 30%|██▉       | 66/221 [00:23<00:53,  2.89it/s][A
 30%|███       | 67/221 [00:24<00:54,  2.82it/s][A
 31%|███       | 68/221 [00:24<00:53,  2.85it/s][A
 31%|███       | 69/221 [00:24<00:52,  2.92it/s][A
 32%|███▏      | 70/221 [00:25<00:50,  2.97it/s][A
 32%|███▏      | 71/221 [00:25<00:49,  3.06it/s][A
 33%|███▎      | 72/221 [00:25<00:50,  2.93it/s][A[h264 @ 0x55928e6e1040] mmco: unref short failure

 33%|███▎      | 73/221 [00:26<00:51,  2.90it/s][A
 33%|███▎      | 74/221 [00:26<00:49,  2.97it/s][A
 34%|███▍      | 75/221 [00:26<00:50,  2.89it/s][A
 34%|███▍      | 76/221 [00:27<00:49,  2.92it/s][A
 35%|███▍      | 77/221 [00:27<00:50,  2.87it/s][A
 35%|███▌      | 78/221 [00:27<00:49,  2.89it/s][A
 36%|███▌      | 79/221 [00:28<00:49,  2.88it/s][A[h264 @ 0x559f8210b280] mmco: unref short failure
[h264 @ 0x559f8210b280] mmco: unref short failure

 36%|███▌      | 80/221 [00:28<00:49,  2.85it/s][A09/17/2024 01:15:26 - INFO - __main__ -   current idx hDAA1fIvxDY.2 from finetune_area returns wrong image/video, use 75099 instead.
09/17/2024 01:15:26 - INFO - __main__ -   current idx KPOxRziYDzs.2 from finetune_area returns wrong image/video, use 71231 instead.

 37%|███▋      | 81/221 [00:29<00:52,  2.67it/s][A
 37%|███▋      | 82/221 [00:29<00:50,  2.77it/s][A
 38%|███▊      | 83/221 [00:29<00:48,  2.86it/s][A[h264 @ 0x55d408781340] mmco: unref short failure
[h264 @ 0x55d408781340] mmco: unref short failure

 38%|███▊      | 84/221 [00:30<00:47,  2.88it/s][A
 38%|███▊      | 85/221 [00:30<00:46,  2.90it/s][A
 39%|███▉      | 86/221 [00:30<00:46,  2.90it/s][A
 39%|███▉      | 87/221 [00:31<00:46,  2.87it/s][A[h264 @ 0x559f7e04e5c0] mmco: unref short failure
[h264 @ 0x559f7e04e5c0] mmco: unref short failure

 40%|███▉      | 88/221 [00:31<00:47,  2.80it/s][A
 40%|████      | 89/221 [00:31<00:46,  2.85it/s][A
 41%|████      | 90/221 [00:32<00:44,  2.94it/s][A
 41%|████      | 91/221 [00:32<00:45,  2.84it/s][A
 42%|████▏     | 92/221 [00:32<00:46,  2.79it/s][A[h264 @ 0x55d41d4c93c0] mmco: unref short failure
[h264 @ 0x55d41d4c93c0] mmco: unref short failure

 42%|████▏     | 93/221 [00:33<00:46,  2.76it/s][A
 43%|████▎     | 94/221 [00:33<00:47,  2.66it/s][A
 43%|████▎     | 95/221 [00:33<00:44,  2.80it/s][A
 43%|████▎     | 96/221 [00:34<00:43,  2.86it/s][A
 44%|████▍     | 97/221 [00:34<00:44,  2.79it/s][A
 44%|████▍     | 98/221 [00:35<00:43,  2.85it/s][A
 45%|████▍     | 99/221 [00:35<00:44,  2.72it/s][A
 45%|████▌     | 100/221 [00:35<00:44,  2.71it/s][A
 46%|████▌     | 101/221 [00:36<00:46,  2.60it/s][A
 46%|████▌     | 102/221 [00:36<00:44,  2.70it/s][A
 47%|████▋     | 103/221 [00:36<00:42,  2.77it/s][A[h264 @ 0x55d40242d380] mmco: unref short failure
[h264 @ 0x55d40242d380] mmco: unref short failure

 47%|████▋     | 104/221 [00:37<00:41,  2.84it/s][A
 48%|████▊     | 105/221 [00:37<00:41,  2.82it/s][A
 48%|████▊     | 106/221 [00:37<00:41,  2.77it/s][A
 48%|████▊     | 107/221 [00:38<00:42,  2.65it/s][A
 49%|████▉     | 108/221 [00:38<00:41,  2.69it/s][A
 49%|████▉     | 109/221 [00:39<00:40,  2.78it/s][A
 50%|████▉     | 110/221 [00:39<00:38,  2.88it/s][A
 50%|█████     | 111/221 [00:39<00:38,  2.87it/s][A
 51%|█████     | 112/221 [00:40<00:39,  2.79it/s][A
 51%|█████     | 113/221 [00:40<00:38,  2.81it/s][A
 52%|█████▏    | 114/221 [00:40<00:39,  2.74it/s][A
 52%|█████▏    | 115/221 [00:41<00:37,  2.83it/s][A
 52%|█████▏    | 116/221 [00:41<00:35,  2.92it/s][A
 53%|█████▎    | 117/221 [00:41<00:34,  2.98it/s][A
 53%|█████▎    | 118/221 [00:42<00:34,  2.95it/s][A
 54%|█████▍    | 119/221 [00:42<00:35,  2.83it/s][A
 54%|█████▍    | 120/221 [00:42<00:35,  2.84it/s][A
 55%|█████▍    | 121/221 [00:43<00:34,  2.91it/s][A
 55%|█████▌    | 122/221 [00:43<00:33,  2.93it/s][A
 56%|█████▌    | 123/221 [00:43<00:33,  2.95it/s][A
 56%|█████▌    | 124/221 [00:44<00:32,  2.95it/s][A
 57%|█████▋    | 125/221 [00:44<00:32,  2.95it/s][A[h264 @ 0x559f59e38100] mmco: unref short failure
[h264 @ 0x559f59e38100] mmco: unref short failure

 57%|█████▋    | 126/221 [00:44<00:32,  2.92it/s][A
 57%|█████▋    | 127/221 [00:45<00:31,  2.97it/s][A
 58%|█████▊    | 128/221 [00:45<00:31,  2.95it/s][A
 58%|█████▊    | 129/221 [00:45<00:30,  2.98it/s][A
 59%|█████▉    | 130/221 [00:46<00:30,  2.99it/s][A
 59%|█████▉    | 131/221 [00:46<00:31,  2.90it/s][A[h264 @ 0x55d4156b7400] mmco: unref short failure

 60%|█████▉    | 132/221 [00:46<00:30,  2.88it/s][A[h264 @ 0x559f86bfabc0] mmco: unref short failure
[h264 @ 0x559f86bfabc0] mmco: unref short failure
[h264 @ 0x559f86bfabc0] mmco: unref short failure
[h264 @ 0x559f86bfabc0] mmco: unref short failure

 60%|██████    | 133/221 [00:47<00:30,  2.86it/s][A
 61%|██████    | 134/221 [00:47<00:30,  2.90it/s][A
 61%|██████    | 135/221 [00:48<00:30,  2.86it/s][A
 62%|██████▏   | 136/221 [00:48<00:29,  2.87it/s][A
 62%|██████▏   | 137/221 [00:48<00:28,  2.94it/s][A
 62%|██████▏   | 138/221 [00:49<00:27,  3.00it/s][A
 63%|██████▎   | 139/221 [00:49<00:28,  2.91it/s][A
 63%|██████▎   | 140/221 [00:49<00:29,  2.76it/s][A
 64%|██████▍   | 141/221 [00:50<00:28,  2.79it/s][A
 64%|██████▍   | 142/221 [00:50<00:27,  2.83it/s][A
 65%|██████▍   | 143/221 [00:50<00:27,  2.81it/s][A
 65%|██████▌   | 144/221 [00:51<00:28,  2.69it/s][A
 66%|██████▌   | 145/221 [00:51<00:27,  2.77it/s][A
 66%|██████▌   | 146/221 [00:51<00:27,  2.77it/s][A
 67%|██████▋   | 147/221 [00:52<00:26,  2.77it/s][A
 67%|██████▋   | 148/221 [00:52<00:25,  2.84it/s][A
 67%|██████▋   | 149/221 [00:52<00:25,  2.86it/s][A
 68%|██████▊   | 150/221 [00:53<00:24,  2.85it/s][A
 68%|██████▊   | 151/221 [00:53<00:24,  2.91it/s][A
 69%|██████▉   | 152/221 [00:53<00:23,  2.98it/s][A
 69%|██████▉   | 153/221 [00:54<00:23,  2.93it/s][A
 70%|██████▉   | 154/221 [00:54<00:23,  2.89it/s][A
 70%|███████   | 155/221 [00:55<00:22,  2.97it/s][A
 71%|███████   | 156/221 [00:55<00:23,  2.81it/s][A[h264 @ 0x559f64ec63c0] mmco: unref short failure
[h264 @ 0x559f64ec63c0] mmco: unref short failure

 71%|███████   | 157/221 [00:55<00:25,  2.53it/s][A
 71%|███████▏  | 158/221 [00:56<00:26,  2.41it/s][A
 72%|███████▏  | 159/221 [00:56<00:25,  2.45it/s][A
 72%|███████▏  | 160/221 [00:57<00:25,  2.43it/s][A
 73%|███████▎  | 161/221 [00:57<00:24,  2.49it/s][A[h264 @ 0x555f3e290840] mmco: unref short failure
[h264 @ 0x555f3e290840] mmco: unref short failure

 73%|███████▎  | 162/221 [00:58<00:23,  2.46it/s][A
 74%|███████▍  | 163/221 [00:58<00:24,  2.33it/s][A
 74%|███████▍  | 164/221 [00:58<00:22,  2.52it/s][A
 75%|███████▍  | 165/221 [00:59<00:21,  2.66it/s][A
 75%|███████▌  | 166/221 [00:59<00:19,  2.79it/s][A
 76%|███████▌  | 167/221 [00:59<00:18,  2.85it/s][A
 76%|███████▌  | 168/221 [01:00<00:19,  2.78it/s][A[h264 @ 0x555f5a3f4c00] mmco: unref short failure
[h264 @ 0x555f5a3f4c00] mmco: unref short failure

 76%|███████▋  | 169/221 [01:00<00:18,  2.75it/s][A
 77%|███████▋  | 170/221 [01:00<00:18,  2.79it/s][A
 77%|███████▋  | 171/221 [01:01<00:17,  2.83it/s][A
 78%|███████▊  | 172/221 [01:01<00:17,  2.83it/s][A
 78%|███████▊  | 173/221 [01:01<00:18,  2.64it/s][A
 79%|███████▊  | 174/221 [01:02<00:17,  2.69it/s][A
 79%|███████▉  | 175/221 [01:02<00:16,  2.76it/s][A
 80%|███████▉  | 176/221 [01:03<00:15,  2.83it/s][A[h264 @ 0x559f8210b280] mmco: unref short failure
[h264 @ 0x559f8210b280] mmco: unref short failure

 80%|████████  | 177/221 [01:03<00:15,  2.91it/s][A[h264 @ 0x559f6c4e4040] mmco: unref short failure

 81%|████████  | 178/221 [01:03<00:15,  2.84it/s][A
 81%|████████  | 179/221 [01:04<00:14,  2.91it/s][A
 81%|████████▏ | 180/221 [01:04<00:13,  2.94it/s][A
 82%|████████▏ | 181/221 [01:04<00:13,  2.97it/s][A
 82%|████████▏ | 182/221 [01:05<00:13,  2.96it/s][A
 83%|████████▎ | 183/221 [01:05<00:12,  2.93it/s][A
 83%|████████▎ | 184/221 [01:05<00:12,  2.91it/s][A
 84%|████████▎ | 185/221 [01:06<00:12,  2.95it/s][A
 84%|████████▍ | 186/221 [01:06<00:11,  2.92it/s][A
 85%|████████▍ | 187/221 [01:06<00:11,  2.86it/s][A
 85%|████████▌ | 188/221 [01:07<00:12,  2.73it/s][A
 86%|████████▌ | 189/221 [01:07<00:11,  2.78it/s][A
 86%|████████▌ | 190/221 [01:07<00:10,  2.82it/s][A
 86%|████████▋ | 191/221 [01:08<00:10,  2.89it/s][A
 87%|████████▋ | 192/221 [01:08<00:09,  2.91it/s][A
 87%|████████▋ | 193/221 [01:08<00:09,  2.97it/s][A
 88%|████████▊ | 194/221 [01:09<00:08,  3.02it/s][A
 88%|████████▊ | 195/221 [01:09<00:09,  2.81it/s][A[h264 @ 0x55d43467f6c0] mmco: unref short failure
[h264 @ 0x55d43467f6c0] mmco: unref short failure

 89%|████████▊ | 196/221 [01:10<00:09,  2.67it/s][A
 89%|████████▉ | 197/221 [01:10<00:08,  2.75it/s][A
 90%|████████▉ | 198/221 [01:10<00:08,  2.83it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.87it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.90it/s][A
 91%|█████████ | 201/221 [01:11<00:06,  2.98it/s][A
 91%|█████████▏| 202/221 [01:11<00:06,  3.03it/s][A
 92%|█████████▏| 203/221 [01:12<00:05,  3.02it/s][A[h264 @ 0x55d41a944d00] mmco: unref short failure

 92%|█████████▏| 204/221 [01:12<00:05,  2.98it/s][A
 93%|█████████▎| 205/221 [01:12<00:05,  3.01it/s][A
 93%|█████████▎| 206/221 [01:13<00:04,  3.02it/s][A
 94%|█████████▎| 207/221 [01:13<00:04,  3.06it/s][A
 94%|█████████▍| 208/221 [01:13<00:04,  3.06it/s][A
 95%|█████████▍| 209/221 [01:14<00:03,  3.06it/s][A
 95%|█████████▌| 210/221 [01:14<00:03,  2.88it/s][A
 95%|█████████▌| 211/221 [01:15<00:03,  2.89it/s][A
 96%|█████████▌| 212/221 [01:15<00:03,  2.88it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  2.90it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  2.89it/s][A
 97%|█████████▋| 215/221 [01:16<00:02,  2.69it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  2.73it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.82it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.83it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.66it/s][A
100%|█████████▉| 220/221 [01:18<00:00,  2.76it/s][A
100%|██████████| 221/221 [01:18<00:00,  2.86it/s][A100%|██████████| 221/221 [01:18<00:00,  2.81it/s]
[h264 @ 0x555f286118c0] mmco: unref short failure
[h264 @ 0x555f286118c0] mmco: unref short failure
[h264 @ 0x555f286118c0] mmco: unref short failure
[h264 @ 0x555f286118c0] mmco: unref short failure

[h264 @ 0x555f286118c0] mmco: unref short failure
[h264 @ 0x555f286118c0] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:41,  5.32it/s][A[h264 @ 0x55d4156b7600] mmco: unref short failure
[h264 @ 0x55d4156b7600] mmco: unref short failure

  1%|          | 2/221 [00:00<01:05,  3.34it/s][A
  1%|▏         | 3/221 [00:01<01:37,  2.24it/s][A
  2%|▏         | 4/221 [00:01<01:14,  2.93it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.36it/s][A
  3%|▎         | 6/221 [00:01<00:59,  3.61it/s][A
  3%|▎         | 7/221 [00:02<01:00,  3.54it/s][A[h264 @ 0x559f683bd5c0] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:03,  3.37it/s][A
  4%|▍         | 9/221 [00:02<01:19,  2.67it/s][A
  5%|▍         | 10/221 [00:03<01:39,  2.11it/s][A
  5%|▍         | 11/221 [00:04<01:33,  2.25it/s][A
  5%|▌         | 12/221 [00:04<01:22,  2.53it/s][A[h264 @ 0x55d408781340] mmco: unref short failure
[h264 @ 0x555f4ff19100] mmco: unref short failure

  6%|▌         | 13/221 [00:04<01:37,  2.13it/s][A
  6%|▋         | 14/221 [00:05<01:23,  2.49it/s][A
  7%|▋         | 15/221 [00:05<01:24,  2.43it/s][A
  7%|▋         | 16/221 [00:05<01:16,  2.68it/s][A
  8%|▊         | 17/221 [00:06<01:24,  2.41it/s][A
  8%|▊         | 18/221 [00:06<01:21,  2.48it/s][A
  9%|▊         | 19/221 [00:07<01:08,  2.95it/s][A
  9%|▉         | 20/221 [00:07<01:00,  3.31it/s][A
 10%|▉         | 21/221 [00:07<00:52,  3.82it/s][A
 10%|▉         | 22/221 [00:07<00:48,  4.07it/s][A
 10%|█         | 23/221 [00:07<00:42,  4.63it/s][A
 11%|█         | 24/221 [00:07<00:38,  5.10it/s][A
 11%|█▏        | 25/221 [00:08<00:43,  4.54it/s][A
 12%|█▏        | 26/221 [00:08<00:53,  3.64it/s][A
 12%|█▏        | 27/221 [00:08<00:48,  4.03it/s][A
 13%|█▎        | 28/221 [00:09<01:08,  2.82it/s][A
 13%|█▎        | 29/221 [00:09<01:10,  2.72it/s][A
 14%|█▎        | 30/221 [00:10<01:13,  2.62it/s][A
 14%|█▍        | 31/221 [00:10<01:14,  2.55it/s][A
 14%|█▍        | 32/221 [00:10<01:09,  2.72it/s][A
 15%|█▍        | 33/221 [00:11<01:03,  2.96it/s][A
 15%|█▌        | 34/221 [00:11<01:00,  3.09it/s][A
 16%|█▌        | 35/221 [00:11<00:54,  3.43it/s][A
 16%|█▋        | 36/221 [00:12<01:24,  2.20it/s][A
 17%|█▋        | 37/221 [00:12<01:19,  2.31it/s][A
 17%|█▋        | 38/221 [00:13<01:17,  2.36it/s][A
 18%|█▊        | 39/221 [00:13<01:01,  2.94it/s][A
 18%|█▊        | 40/221 [00:13<01:04,  2.82it/s][A[h264 @ 0x55927e1ac380] mmco: unref short failure

 19%|█▊        | 41/221 [00:14<00:59,  3.02it/s][A
 19%|█▉        | 42/221 [00:14<00:55,  3.23it/s][A
 19%|█▉        | 43/221 [00:15<01:14,  2.38it/s][A
 20%|█▉        | 44/221 [00:15<01:07,  2.61it/s][A
 20%|██        | 45/221 [00:15<01:07,  2.60it/s][A
 21%|██        | 46/221 [00:16<01:06,  2.65it/s][A
 21%|██▏       | 47/221 [00:16<00:55,  3.15it/s][A
 22%|██▏       | 48/221 [00:16<00:44,  3.86it/s][A
 22%|██▏       | 49/221 [00:16<00:41,  4.12it/s][A
 23%|██▎       | 50/221 [00:17<00:52,  3.25it/s][A
 23%|██▎       | 51/221 [00:17<00:51,  3.29it/s][A[h264 @ 0x55929ff3c4c0] mmco: unref short failure
[h264 @ 0x55929ff3c4c0] mmco: unref short failure
[h264 @ 0x55d40daca2c0] mmco: unref short failure

 24%|██▎       | 52/221 [00:17<00:43,  3.86it/s][A[h264 @ 0x55d40daca2c0] mmco: unref short failure

 24%|██▍       | 53/221 [00:17<00:49,  3.36it/s][A
 24%|██▍       | 54/221 [00:18<00:49,  3.37it/s][A
 25%|██▍       | 55/221 [00:18<00:44,  3.70it/s][A
 25%|██▌       | 56/221 [00:18<00:46,  3.53it/s][A
 26%|██▌       | 57/221 [00:19<00:52,  3.15it/s][A
 26%|██▌       | 58/221 [00:19<00:42,  3.82it/s][A
 27%|██▋       | 59/221 [00:19<00:44,  3.61it/s][A
 27%|██▋       | 60/221 [00:19<00:42,  3.83it/s][A
 28%|██▊       | 61/221 [00:20<00:42,  3.80it/s][A[h264 @ 0x559295380d00] mmco: unref short failure

 28%|██▊       | 62/221 [00:20<00:45,  3.53it/s][A
 29%|██▊       | 63/221 [00:20<00:38,  4.09it/s][A
 29%|██▉       | 64/221 [00:20<00:42,  3.70it/s][A
 29%|██▉       | 65/221 [00:21<00:41,  3.74it/s][A
 30%|██▉       | 66/221 [00:21<00:47,  3.25it/s][A
 30%|███       | 67/221 [00:22<00:56,  2.73it/s][A
 31%|███       | 68/221 [00:22<00:49,  3.12it/s][A
 31%|███       | 69/221 [00:22<01:01,  2.48it/s][A
 32%|███▏      | 70/221 [00:23<00:57,  2.62it/s][A
 32%|███▏      | 71/221 [00:23<00:58,  2.55it/s][A
 33%|███▎      | 72/221 [00:24<01:05,  2.28it/s][A
 33%|███▎      | 73/221 [00:24<01:00,  2.46it/s][A
 33%|███▎      | 74/221 [00:24<00:52,  2.77it/s][A
 34%|███▍      | 75/221 [00:25<00:56,  2.58it/s][A
 34%|███▍      | 76/221 [00:25<00:50,  2.89it/s][A
 35%|███▍      | 77/221 [00:25<00:52,  2.75it/s][A
 35%|███▌      | 78/221 [00:26<00:47,  3.02it/s][A
 36%|███▌      | 79/221 [00:26<00:48,  2.90it/s][A
 36%|███▌      | 80/221 [00:26<00:44,  3.19it/s][A
 37%|███▋      | 81/221 [00:27<00:48,  2.87it/s][A
 37%|███▋      | 82/221 [00:27<00:45,  3.07it/s][A
 38%|███▊      | 83/221 [00:27<00:36,  3.73it/s][A
 38%|███▊      | 84/221 [00:27<00:37,  3.70it/s][A
 38%|███▊      | 85/221 [00:27<00:32,  4.17it/s][A[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure

 39%|███▉      | 86/221 [00:28<00:29,  4.59it/s][A[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure

 39%|███▉      | 87/221 [00:28<00:43,  3.08it/s][A
 40%|███▉      | 88/221 [00:29<00:48,  2.73it/s][A[h264 @ 0x55929ff3c6c0] mmco: unref short failure
[h264 @ 0x55929ff3c6c0] mmco: unref short failure

 40%|████      | 89/221 [00:29<00:54,  2.42it/s][A[h264 @ 0x5592876a4ec0] mmco: unref short failure
[h264 @ 0x5592876a4ec0] mmco: unref short failure

 41%|████      | 90/221 [00:30<00:58,  2.25it/s][A
 41%|████      | 91/221 [00:30<00:50,  2.58it/s][A
 42%|████▏     | 92/221 [00:30<00:45,  2.81it/s][A
 42%|████▏     | 93/221 [00:31<00:47,  2.69it/s][A
 43%|████▎     | 94/221 [00:31<00:44,  2.86it/s][A
 43%|████▎     | 95/221 [00:32<00:55,  2.28it/s][A
 43%|████▎     | 96/221 [00:32<00:58,  2.12it/s][A
 44%|████▍     | 97/221 [00:32<00:51,  2.40it/s][A
 44%|████▍     | 98/221 [00:33<00:50,  2.42it/s][A
 45%|████▍     | 99/221 [00:33<00:47,  2.55it/s][A[h264 @ 0x55d412cd8300] mmco: unref short failure
[h264 @ 0x55d412cd8300] mmco: unref short failure

 45%|████▌     | 100/221 [00:34<00:44,  2.72it/s][A
 46%|████▌     | 101/221 [00:34<00:52,  2.30it/s][A
 46%|████▌     | 102/221 [00:34<00:46,  2.56it/s][A
 47%|████▋     | 103/221 [00:35<00:38,  3.04it/s][A
 47%|████▋     | 104/221 [00:35<00:31,  3.76it/s][A
 48%|████▊     | 105/221 [00:35<00:33,  3.50it/s][A
 48%|████▊     | 106/221 [00:35<00:38,  3.00it/s][A
 48%|████▊     | 107/221 [00:36<00:32,  3.48it/s][A
 49%|████▉     | 108/221 [00:36<00:37,  3.02it/s][A
 49%|████▉     | 109/221 [00:36<00:39,  2.83it/s][A
 50%|████▉     | 110/221 [00:37<00:34,  3.22it/s][A
 50%|█████     | 111/221 [00:37<00:37,  2.92it/s][A
 51%|█████     | 112/221 [00:37<00:37,  2.91it/s][A
 51%|█████     | 113/221 [00:38<00:35,  3.01it/s][A
 52%|█████▏    | 114/221 [00:38<00:29,  3.63it/s][A
 52%|█████▏    | 115/221 [00:38<00:31,  3.33it/s][A[h264 @ 0x559f872a4d40] mmco: unref short failure

 52%|█████▏    | 116/221 [00:39<00:35,  2.99it/s][A
 53%|█████▎    | 117/221 [00:39<00:32,  3.23it/s][A
 53%|█████▎    | 118/221 [00:39<00:35,  2.93it/s][A
 54%|█████▍    | 119/221 [00:40<00:40,  2.50it/s][A
 54%|█████▍    | 120/221 [00:40<00:40,  2.52it/s][A
 55%|█████▍    | 121/221 [00:41<00:39,  2.52it/s][A
 55%|█████▌    | 122/221 [00:41<00:35,  2.77it/s][A
 56%|█████▌    | 123/221 [00:41<00:31,  3.09it/s][A
 56%|█████▌    | 124/221 [00:42<00:36,  2.65it/s][A
 57%|█████▋    | 125/221 [00:42<00:42,  2.24it/s][A
 57%|█████▋    | 126/221 [00:43<00:42,  2.23it/s][A[h264 @ 0x55d41dc7fd00] mmco: unref short failure

 57%|█████▋    | 127/221 [00:43<00:46,  2.04it/s][A
 58%|█████▊    | 128/221 [00:44<00:38,  2.39it/s][A
 58%|█████▊    | 129/221 [00:44<00:31,  2.95it/s][A
 59%|█████▉    | 130/221 [00:44<00:27,  3.28it/s][A
 59%|█████▉    | 131/221 [00:44<00:26,  3.36it/s][A
 60%|█████▉    | 132/221 [00:45<00:38,  2.32it/s][A
 60%|██████    | 133/221 [00:46<00:41,  2.12it/s][A
 61%|██████    | 134/221 [00:46<00:49,  1.77it/s][A
 61%|██████    | 135/221 [00:47<00:39,  2.20it/s][A
 62%|██████▏   | 136/221 [00:47<00:37,  2.26it/s][A
 62%|██████▏   | 137/221 [00:47<00:32,  2.57it/s][A
 62%|██████▏   | 138/221 [00:48<00:29,  2.83it/s][A
 63%|██████▎   | 139/221 [00:48<00:29,  2.82it/s][A
 63%|██████▎   | 140/221 [00:48<00:26,  3.02it/s][A
 64%|██████▍   | 141/221 [00:48<00:25,  3.17it/s][A[h264 @ 0x559f8f0c24c0] mmco: unref short failure
[h264 @ 0x559f8f0c24c0] mmco: unref short failure

 64%|██████▍   | 142/221 [00:49<00:24,  3.28it/s][A
 65%|██████▍   | 143/221 [00:49<00:24,  3.21it/s][A
 65%|██████▌   | 144/221 [00:49<00:21,  3.56it/s][A
 66%|██████▌   | 145/221 [00:50<00:23,  3.17it/s][A
 66%|██████▌   | 146/221 [00:50<00:22,  3.31it/s][A
 67%|██████▋   | 147/221 [00:50<00:20,  3.58it/s][A
 67%|██████▋   | 148/221 [00:51<00:24,  2.96it/s][A
 67%|██████▋   | 149/221 [00:51<00:22,  3.19it/s][A
 68%|██████▊   | 150/221 [00:51<00:21,  3.36it/s][A[h264 @ 0x55d4309f0ec0] mmco: unref short failure
[h264 @ 0x55d4309f0ec0] mmco: unref short failure

 68%|██████▊   | 151/221 [00:52<00:42,  1.66it/s][A
 69%|██████▉   | 152/221 [00:53<00:48,  1.42it/s][A
 69%|██████▉   | 153/221 [00:54<00:38,  1.75it/s][A
 70%|██████▉   | 154/221 [00:54<00:33,  2.02it/s][A
 70%|███████   | 155/221 [00:54<00:29,  2.23it/s][A
 71%|███████   | 156/221 [00:55<00:29,  2.22it/s][A
 71%|███████   | 157/221 [00:55<00:25,  2.52it/s][A
 71%|███████▏  | 158/221 [00:56<00:31,  2.03it/s][A[h264 @ 0x559f89ead500] mmco: unref short failure

 72%|███████▏  | 159/221 [00:56<00:25,  2.46it/s][A
 72%|███████▏  | 160/221 [00:57<00:27,  2.19it/s][A
 73%|███████▎  | 161/221 [00:57<00:21,  2.80it/s][A
 73%|███████▎  | 162/221 [00:57<00:17,  3.33it/s][A
 74%|███████▍  | 163/221 [00:57<00:16,  3.53it/s][A
 74%|███████▍  | 164/221 [00:57<00:15,  3.73it/s][A
 75%|███████▍  | 165/221 [00:58<00:14,  3.86it/s][A
 75%|███████▌  | 166/221 [00:58<00:16,  3.28it/s][A
 76%|███████▌  | 167/221 [00:58<00:13,  4.02it/s][A
 76%|███████▌  | 168/221 [00:58<00:13,  3.88it/s][A
 76%|███████▋  | 169/221 [00:58<00:11,  4.49it/s][A
 77%|███████▋  | 170/221 [00:59<00:13,  3.66it/s][A
 77%|███████▋  | 171/221 [00:59<00:18,  2.68it/s][A[h264 @ 0x559f705cbd00] mmco: unref short failure
[h264 @ 0x559f705cbd00] mmco: unref short failure

 78%|███████▊  | 172/221 [01:00<00:19,  2.57it/s][A[h264 @ 0x559f705cbd00] mmco: unref short failure
[h264 @ 0x559f705cbd00] mmco: unref short failure

 78%|███████▊  | 173/221 [01:00<00:19,  2.44it/s][A
 79%|███████▊  | 174/221 [01:01<00:15,  2.99it/s][A[h264 @ 0x559f705cbd00] mmco: unref short failure
[h264 @ 0x559f705cbd00] mmco: unref short failure

 79%|███████▉  | 175/221 [01:01<00:16,  2.87it/s][A
 80%|███████▉  | 176/221 [01:01<00:13,  3.36it/s][A
 80%|████████  | 177/221 [01:01<00:13,  3.21it/s][A
 81%|████████  | 178/221 [01:02<00:18,  2.32it/s][A
 81%|████████  | 179/221 [01:03<00:18,  2.32it/s][A
 81%|████████▏ | 180/221 [01:03<00:14,  2.90it/s][A
 82%|████████▏ | 181/221 [01:03<00:11,  3.49it/s][A
 82%|████████▏ | 182/221 [01:03<00:11,  3.53it/s][A
 83%|████████▎ | 183/221 [01:03<00:11,  3.40it/s][A
 83%|████████▎ | 184/221 [01:04<00:11,  3.18it/s][A
 84%|████████▎ | 185/221 [01:04<00:09,  3.89it/s][A
 84%|████████▍ | 186/221 [01:04<00:10,  3.43it/s][A
 85%|████████▍ | 187/221 [01:04<00:08,  3.86it/s][A
 85%|████████▌ | 188/221 [01:05<00:08,  3.98it/s][A
 86%|████████▌ | 189/221 [01:05<00:07,  4.18it/s][A
 86%|████████▌ | 190/221 [01:05<00:09,  3.33it/s][A
 86%|████████▋ | 191/221 [01:06<00:08,  3.49it/s][A
 87%|████████▋ | 192/221 [01:06<00:09,  3.08it/s][A
 87%|████████▋ | 193/221 [01:06<00:09,  2.99it/s][A[h264 @ 0x559f8f0c24c0] mmco: unref short failure
[h264 @ 0x559f8f0c24c0] mmco: unref short failure

 88%|████████▊ | 194/221 [01:07<00:11,  2.38it/s][A
 88%|████████▊ | 195/221 [01:07<00:09,  2.62it/s][A
 89%|████████▊ | 196/221 [01:08<00:11,  2.22it/s][A
 89%|████████▉ | 197/221 [01:09<00:12,  1.85it/s][A
 90%|████████▉ | 198/221 [01:09<00:11,  2.03it/s][A
 90%|█████████ | 199/221 [01:09<00:08,  2.44it/s][A[h264 @ 0x55928b9ac940] mmco: unref short failure
[h264 @ 0x555f2e1183c0] mmco: unref short failure
[h264 @ 0x555f2e1183c0] mmco: unref short failure

 90%|█████████ | 200/221 [01:09<00:07,  2.88it/s][A
 91%|█████████ | 201/221 [01:10<00:05,  3.41it/s][A
 91%|█████████▏| 202/221 [01:10<00:06,  3.02it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.13it/s][A
 92%|█████████▏| 204/221 [01:11<00:05,  3.28it/s][A
 93%|█████████▎| 205/221 [01:11<00:04,  3.28it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.62it/s][A
 94%|█████████▎| 207/221 [01:12<00:04,  2.84it/s][A[h264 @ 0x559f89ead500] mmco: unref short failure
[h264 @ 0x559f89ead500] mmco: unref short failure
[h264 @ 0x559f89ead500] mmco: unref short failure
[h264 @ 0x559f89ead500] mmco: unref short failure
[h264 @ 0x559f89ead500] mmco: unref short failure
[h264 @ 0x559f89ead500] mmco: unref short failure

 94%|█████████▍| 208/221 [01:12<00:05,  2.44it/s][A
 95%|█████████▍| 209/221 [01:13<00:05,  2.27it/s][A
 95%|█████████▌| 210/221 [01:13<00:04,  2.63it/s][A
 95%|█████████▌| 211/221 [01:13<00:03,  2.70it/s][A
 96%|█████████▌| 212/221 [01:14<00:03,  2.63it/s][A
 96%|█████████▋| 213/221 [01:14<00:02,  2.72it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  2.35it/s][A
 97%|█████████▋| 215/221 [01:15<00:02,  2.38it/s][A[h264 @ 0x5592a6bd8800] mmco: unref short failure
[h264 @ 0x5592a6bd8800] mmco: unref short failure

 98%|█████████▊| 216/221 [01:15<00:01,  2.56it/s][A09/17/2024 01:17:40 - INFO - __main__ -   current idx 9lm2wYzoyd4.69 from finetune_area returns wrong image/video, use 84565 instead.

 98%|█████████▊| 217/221 [01:16<00:01,  2.53it/s][A
 99%|█████████▊| 218/221 [01:16<00:01,  2.32it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.53it/s][A
100%|█████████▉| 220/221 [01:17<00:00,  2.94it/s][A
100%|██████████| 221/221 [01:17<00:00,  2.74it/s][A100%|██████████| 221/221 [01:17<00:00,  2.84it/s]
[h264 @ 0x55d42f7b0700] mmco: unref short failure
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'area_r1': 43.3, 'area_recall': '43.3/70.7/78.5', 'area_ravg': 64.2}
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'forward_r1': 39.8, 'forward_recall': '39.8/66.6/76.5', 'forward_ravg': 61.0}
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/67.4/79.3', 'area_video_ravg': 62.0}
09/17/2024 01:17:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 149=======

09/17/2024 01:17:44 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/67.4/79.3', 'area_video_ravg': 62.0}
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/73.8/82.2', 'area_video_ravg': 69.0, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/71.5/79.5', 'area_video_back_ravg': 66.5}
09/17/2024 01:17:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 149=======

09/17/2024 01:17:44 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/73.8/82.2', 'area_video_ravg': 69.0, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/71.5/79.5', 'area_video_back_ravg': 66.5}
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 01:17:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 01:17:44 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 01:17:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 149--===========

09/17/2024 01:17:44 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/73.8/82.0', 'video_ravg': 69.1}
09/17/2024 01:17:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 149=======

09/17/2024 01:17:44 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/73.8/82.0', 'video_ravg': 69.1}
[h264 @ 0x559f59e38100] mmco: unref short failure
[h264 @ 0x555f4ff19100] mmco: unref short failure
[h264 @ 0x55d41df98840] mmco: unref short failure
[h264 @ 0x55d41df98840] mmco: unref short failure
[h264 @ 0x555f4fa9c680] mmco: unref short failure
[h264 @ 0x555f4fa9c680] mmco: unref short failure
[h264 @ 0x555f4f223740] mmco: unref short failure
[h264 @ 0x559f7e92ec00] mmco: unref short failure
[h264 @ 0x559f7e92ec00] mmco: unref short failure
[h264 @ 0x559f6fa74b00] mmco: unref short failure
[h264 @ 0x559f6fa74b00] mmco: unref short failure
[h264 @ 0x555f26f8bb00] mmco: unref short failure
[h264 @ 0x555f5708ec40] mmco: unref short failure
[h264 @ 0x555f35975d00] mmco: unref short failure
09/17/2024 01:19:07 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.01242043636739254, 'loss_ret%tv%ta--finetune_area/loss_area': 2.9664385318756104, 'loss_ret%tv%ta--finetune_area/total_loss': 2.9788589477539062}
 10%|█         | 150/1455 [1:38:50<65:07:24, 179.65s/it][h264 @ 0x555f533b7d40] mmco: unref short failure
[h264 @ 0x555f533b7d40] mmco: unref short failure
[h264 @ 0x555f4d0478c0] mmco: unref short failure
 10%|█         | 151/1455 [1:38:58<46:21:19, 127.98s/it][h264 @ 0x559f8f0c24c0] mmco: unref short failure
[h264 @ 0x559f8f0c24c0] mmco: unref short failure
 10%|█         | 152/1455 [1:39:05<33:14:11, 91.83s/it]  11%|█         | 153/1455 [1:39:13<24:07:33, 66.71s/it][h264 @ 0x5592aa4a4b40] mmco: unref short failure
09/17/2024 01:19:41 - INFO - __main__ -   current idx _4-lJ7UF30Y.22 from finetune_area returns wrong image/video, use 73408 instead.
 11%|█         | 154/1455 [1:39:22<17:45:42, 49.15s/it][h264 @ 0x555f58314380] mmco: unref short failure
[h264 @ 0x555f58314380] mmco: unref short failure
[h264 @ 0x559f59e38100] mmco: unref short failure
[h264 @ 0x559f758408c0] mmco: unref short failure
[h264 @ 0x559295ebd700] mmco: unref short failure
[h264 @ 0x559295ebd700] mmco: unref short failure
[h264 @ 0x559295ebd700] mmco: unref short failure
[h264 @ 0x559295ebd700] mmco: unref short failure
 11%|█         | 155/1455 [1:39:30<13:23:06, 37.07s/it][h264 @ 0x55d428db37c0] mmco: unref short failure
[h264 @ 0x55d428db37c0] mmco: unref short failure
 11%|█         | 156/1455 [1:39:39<10:15:51, 28.45s/it][h264 @ 0x55d414c6fe00] mmco: unref short failure
[h264 @ 0x55d414c6fe00] mmco: unref short failure
[h264 @ 0x559f7a58b000] mmco: unref short failure
[h264 @ 0x559f7a58b000] mmco: unref short failure
 11%|█         | 157/1455 [1:39:48<8:10:06, 22.66s/it] [h264 @ 0x555f40323800] mmco: unref short failure
[h264 @ 0x555f40323800] mmco: unref short failure
 11%|█         | 158/1455 [1:39:57<6:39:15, 18.47s/it][h264 @ 0x555f5637ccc0] mmco: unref short failure
[h264 @ 0x555f5637ccc0] mmco: unref short failure
[h264 @ 0x55927e183240] mmco: unref short failure
[h264 @ 0x55927e183240] mmco: unref short failure
[h264 @ 0x5592800cdfc0] mmco: unref short failure
[h264 @ 0x5592800cdfc0] mmco: unref short failure
[h264 @ 0x559f6bd116c0] mmco: unref short failure
[h264 @ 0x559f6bd116c0] mmco: unref short failure
[h264 @ 0x559f6bd116c0] mmco: unref short failure
 11%|█         | 159/1455 [1:40:07<5:43:31, 15.90s/it] 11%|█         | 160/1455 [1:40:16<5:01:23, 13.96s/it][h264 @ 0x555f27f32140] mmco: unref short failure
[h264 @ 0x5592a43aec00] mmco: unref short failure
 11%|█         | 161/1455 [1:40:25<4:30:57, 12.56s/it] 11%|█         | 162/1455 [1:40:37<4:23:12, 12.21s/it][h264 @ 0x555f3a533bc0] mmco: unref short failure
 11%|█         | 163/1455 [1:40:46<4:05:33, 11.40s/it][h264 @ 0x559f8787dd40] mmco: unref short failure
 11%|█▏        | 164/1455 [1:40:55<3:46:07, 10.51s/it][h264 @ 0x555f2baecb80] mmco: unref short failure
[h264 @ 0x555f2baecb80] mmco: unref short failure
[h264 @ 0x5592800cdfc0] mmco: unref short failure
[h264 @ 0x5592800cdfc0] mmco: unref short failure
[h264 @ 0x559283b128c0] mmco: unref short failure
 11%|█▏        | 165/1455 [1:41:04<3:36:19, 10.06s/it][h264 @ 0x559f6482ac00] mmco: unref short failure
[h264 @ 0x5592b6033440] mmco: unref short failure
[h264 @ 0x5592b6033440] mmco: unref short failure
[h264 @ 0x55928bde8280] mmco: unref short failure
[h264 @ 0x55928bde8280] mmco: unref short failure
[h264 @ 0x55928bde8280] mmco: unref short failure
[h264 @ 0x55d410d80ac0] mmco: unref short failure
[h264 @ 0x55d410d80ac0] mmco: unref short failure
[h264 @ 0x559289f50440] mmco: unref short failure
[h264 @ 0x559289f50440] mmco: unref short failure
[h264 @ 0x559f5ba12540] mmco: unref short failure
[h264 @ 0x55927e9547c0] mmco: unref short failure
[h264 @ 0x55927e9547c0] mmco: unref short failure
[h264 @ 0x55d41b2123c0] mmco: unref short failure
[h264 @ 0x55d41b2123c0] mmco: unref short failure
[h264 @ 0x559f87c65240] mmco: unref short failure
[h264 @ 0x5592ab926540] mmco: unref short failure
[h264 @ 0x5592ab926540] mmco: unref short failure
[h264 @ 0x559f7f568700] mmco: unref short failure
[h264 @ 0x559f75e2c680] mmco: unref short failure
[h264 @ 0x559f75e2c680] mmco: unref short failure
[h264 @ 0x559f75e2c680] mmco: unref short failure
[h264 @ 0x559f75e2c680] mmco: unref short failure
[h264 @ 0x555f47b74240] mmco: unref short failure
[h264 @ 0x555f47b74240] mmco: unref short failure
[h264 @ 0x5592828c8080] mmco: unref short failure
[h264 @ 0x5592828c8080] mmco: unref short failure
[h264 @ 0x55d437cff480] mmco: unref short failure
[h264 @ 0x55d437cff480] mmco: unref short failure
[h264 @ 0x55d437cff480] mmco: unref short failure
[h264 @ 0x55d43d450d80] mmco: unref short failure
[h264 @ 0x55d43d450d80] mmco: unref short failure
[h264 @ 0x555f47164100] mmco: unref short failure
[h264 @ 0x559f6fb4f680] mmco: unref short failure
[h264 @ 0x559f6fb4f680] mmco: unref short failure
[h264 @ 0x559f66a24a40] mmco: unref short failure
[h264 @ 0x559f82e49100] mmco: unref short failure
[h264 @ 0x559f82e49100] mmco: unref short failure
[h264 @ 0x555f4d11a540] mmco: unref short failure
[h264 @ 0x555f4d11a540] mmco: unref short failure
[h264 @ 0x555f28e8edc0] mmco: unref short failure
[h264 @ 0x555f28e8edc0] mmco: unref short failure
[h264 @ 0x555f533b7d40] mmco: unref short failure
[h264 @ 0x559f5bc83f40] mmco: unref short failure
[h264 @ 0x559f85ccd580] mmco: unref short failure
[h264 @ 0x55928bde1600] mmco: unref short failure
[h264 @ 0x55928da9b740] mmco: unref short failure
[h264 @ 0x55928da9b740] mmco: unref short failure
[h264 @ 0x55928da9b740] mmco: unref short failure
[h264 @ 0x55928da9b740] mmco: unref short failure
09/17/2024 01:22:51 - INFO - __main__ -   current idx NplowkZTvc0.7 from finetune_area returns wrong image/video, use 62862 instead.
[h264 @ 0x559f87ec1480] mmco: unref short failure
[h264 @ 0x55928139b980] mmco: unref short failure
[h264 @ 0x55928139b980] mmco: unref short failure
09/17/2024 01:22:56 - INFO - __main__ -   current idx MuqZDGESIMY.30 from finetune_area returns wrong image/video, use 2400 instead.
[h264 @ 0x55929edab6c0] mmco: unref short failure
[h264 @ 0x55929edab6c0] mmco: unref short failure
[h264 @ 0x55929fdede40] mmco: unref short failure
[h264 @ 0x55929fdede40] mmco: unref short failure
09/17/2024 01:23:07 - INFO - __main__ -   current idx DTaJjznuY74.20 from finetune_area returns wrong image/video, use 75174 instead.
[h264 @ 0x55928bde1600] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x559f71ce2880] mmco: unref short failure
[h264 @ 0x55d40f3f89c0] mmco: unref short failure
[h264 @ 0x555f3c182bc0] mmco: unref short failure
[h264 @ 0x555f3c182bc0] mmco: unref short failure
[h264 @ 0x5592a8fafe80] mmco: unref short failure
[h264 @ 0x5592a8fafe80] mmco: unref short failure
 11%|█▏        | 166/1455 [1:43:29<18:06:19, 50.57s/it][h264 @ 0x559f72861d40] mmco: unref short failure
 11%|█▏        | 167/1455 [1:43:38<13:37:06, 38.06s/it][h264 @ 0x559f63f2c3c0] mmco: unref short failure
09/17/2024 01:24:07 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 148404 instead.
 12%|█▏        | 168/1455 [1:43:53<11:10:54, 31.28s/it][h264 @ 0x555f5e6fd800] mmco: unref short failure
[h264 @ 0x555f5e6fd800] mmco: unref short failure
[h264 @ 0x5592a07a21c0] mmco: unref short failure
[h264 @ 0x5592a07a21c0] mmco: unref short failure
[h264 @ 0x5592a6bd8800] mmco: unref short failure
[h264 @ 0x5592a6bd8800] mmco: unref short failure
[h264 @ 0x559f7fe98800] mmco: unref short failure
[h264 @ 0x559f7fe98800] mmco: unref short failure
[h264 @ 0x559f7fe98800] mmco: unref short failure
[h264 @ 0x559f7fe98800] mmco: unref short failure
 12%|█▏        | 169/1455 [1:44:15<10:09:09, 28.42s/it] 12%|█▏        | 170/1455 [1:44:23<8:01:09, 22.47s/it] [h264 @ 0x559f748e0e40] mmco: unref short failure
[h264 @ 0x559f748e0e40] mmco: unref short failure
[h264 @ 0x555f3683bb80] mmco: unref short failure
[h264 @ 0x555f3683bb80] mmco: unref short failure
 12%|█▏        | 171/1455 [1:44:34<6:43:55, 18.88s/it][h264 @ 0x559f8764f9c0] mmco: unref short failure
[h264 @ 0x559f8764f9c0] mmco: unref short failure
 12%|█▏        | 172/1455 [1:44:47<6:06:52, 17.16s/it][h264 @ 0x555f26f5e880] mmco: unref short failure
[h264 @ 0x555f26f5e880] mmco: unref short failure
 12%|█▏        | 173/1455 [1:44:57<5:19:06, 14.94s/it][h264 @ 0x555f36b623c0] mmco: unref short failure
[h264 @ 0x555f36b623c0] mmco: unref short failure
[h264 @ 0x559f748e3900] mmco: unref short failure
[h264 @ 0x555f35fac9c0] mmco: unref short failure
[h264 @ 0x555f35fac9c0] mmco: unref short failure
[h264 @ 0x559297d8a180] mmco: unref short failure
[h264 @ 0x559297d8a180] mmco: unref short failure
[h264 @ 0x559f63f2c3c0] mmco: unref short failure
[h264 @ 0x559f7c4041c0] mmco: unref short failure
[h264 @ 0x559f7c4041c0] mmco: unref short failure
[h264 @ 0x55d437457680] mmco: unref short failure
[h264 @ 0x559283b128c0] mmco: unref short failure
[h264 @ 0x55928bce5180] mmco: unref short failure
[h264 @ 0x559f662f1e40] mmco: unref short failure
09/17/2024 01:26:45 - INFO - __main__ -   current idx DhOkpvuskU4.32 from finetune_area returns wrong image/video, use 11016 instead.
[h264 @ 0x555f27246580] mmco: unref short failure
[h264 @ 0x555f27246580] mmco: unref short failure
[h264 @ 0x559f744af000] mmco: unref short failure
09/17/2024 01:27:02 - INFO - __main__ -   current idx 1HAnFYVSFkk.3 from finetune_area returns wrong image/video, use 34763 instead.
[h264 @ 0x55d40f751580] mmco: unref short failure
[h264 @ 0x55d40f751580] mmco: unref short failure
[h264 @ 0x555f5ea07580] mmco: unref short failure
[h264 @ 0x555f3b5ff680] mmco: unref short failure
[h264 @ 0x55d41712c580] mmco: unref short failure
[h264 @ 0x55d42d36dbc0] mmco: unref short failure
[h264 @ 0x55d4027b8900] mmco: unref short failure
[h264 @ 0x55927f655c00] mmco: unref short failure
[h264 @ 0x555f49dd3680] mmco: unref short failure
[h264 @ 0x555f49dd3680] mmco: unref short failure
[h264 @ 0x555f49dd3680] mmco: unref short failure
[h264 @ 0x555f49dd3680] mmco: unref short failure
[h264 @ 0x555f34b94b80] mmco: unref short failure
[h264 @ 0x555f34b94b80] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
09/17/2024 01:28:10 - INFO - __main__ -   current idx T9SsQafdxnY.19 from finetune_area returns wrong image/video, use 119717 instead.
[h264 @ 0x559f6476bec0] mmco: unref short failure
[h264 @ 0x559f6476bec0] mmco: unref short failure
[h264 @ 0x559286f6e480] mmco: unref short failure
[h264 @ 0x5592898fbb40] mmco: unref short failure
[h264 @ 0x5592898fbb40] mmco: unref short failure
[h264 @ 0x5592898fbb40] mmco: unref short failure
[h264 @ 0x5592898fbb40] mmco: unref short failure
[h264 @ 0x555f49dd3680] mmco: unref short failure
[h264 @ 0x55d40d071e80] mmco: unref short failure
[h264 @ 0x559f63f2c3c0] mmco: unref short failure
[h264 @ 0x559f63f2c3c0] mmco: unref short failure
 12%|█▏        | 174/1455 [1:48:17<25:05:54, 70.53s/it][h264 @ 0x55d42ab5eb40] mmco: unref short failure
[h264 @ 0x55d42ab5eb40] mmco: unref short failure
[h264 @ 0x559285375f40] mmco: unref short failure
[h264 @ 0x559285375f40] mmco: unref short failure
 12%|█▏        | 175/1455 [1:48:32<19:07:20, 53.78s/it][h264 @ 0x559f8b8820c0] mmco: unref short failure
[h264 @ 0x559f8b8820c0] mmco: unref short failure
 12%|█▏        | 176/1455 [1:48:43<14:34:53, 41.04s/it][h264 @ 0x55d4195c3840] mmco: unref short failure
[h264 @ 0x5592a3ab6b80] mmco: unref short failure
[h264 @ 0x5592a3ab6b80] mmco: unref short failure
[h264 @ 0x5592ae72cd40] mmco: unref short failure
[h264 @ 0x5592ae72cd40] mmco: unref short failure
[h264 @ 0x5592ae72cd40] mmco: unref short failure
[h264 @ 0x55d437618ec0] mmco: unref short failure
[h264 @ 0x55d437618ec0] mmco: unref short failure
[h264 @ 0x559f5a2d96c0] mmco: unref short failure
[h264 @ 0x559f5a2d96c0] mmco: unref short failure
[h264 @ 0x555f4a84d940] mmco: unref short failure
[h264 @ 0x555f4a84d940] mmco: unref short failure
 12%|█▏        | 177/1455 [1:49:20<14:05:11, 39.68s/it][h264 @ 0x559f5b8fe100] mmco: unref short failure
[h264 @ 0x559f5b8fe100] mmco: unref short failure
[h264 @ 0x559f5b8fe100] mmco: unref short failure
[h264 @ 0x559f5b8fe100] mmco: unref short failure
 12%|█▏        | 178/1455 [1:49:28<10:46:57, 30.40s/it][h264 @ 0x559f8b1833c0] mmco: unref short failure
 12%|█▏        | 179/1455 [1:49:39<8:37:59, 24.36s/it]  12%|█▏        | 180/1455 [1:49:47<6:58:07, 19.68s/it]09/17/2024 01:30:10 - INFO - __main__ -   current idx Qvo7ULfoowQ.43 from finetune_area returns wrong image/video, use 80805 instead.
 12%|█▏        | 181/1455 [1:49:56<5:47:41, 16.37s/it][h264 @ 0x555f27c23540] mmco: unref short failure
[h264 @ 0x555f4211ccc0] mmco: unref short failure
09/17/2024 01:30:23 - INFO - __main__ -   current idx R8HHCsDQ1cs.27 from finetune_area returns wrong image/video, use 27658 instead.
[h264 @ 0x559f72d80640] mmco: unref short failure
[h264 @ 0x559f72d80640] mmco: unref short failure
[h264 @ 0x559f72d80640] mmco: unref short failure
[h264 @ 0x559f72d80640] mmco: unref short failure
[h264 @ 0x55d4046c14c0] mmco: unref short failure
[h264 @ 0x55d4046c14c0] mmco: unref short failure
[h264 @ 0x555f2f7c8000] mmco: unref short failure
[h264 @ 0x555f2f7c8000] mmco: unref short failure
[h264 @ 0x55d4174ad180] mmco: unref short failure
[h264 @ 0x55d4174ad180] mmco: unref short failure
[h264 @ 0x55d40a8d59c0] mmco: unref short failure
[h264 @ 0x55d40fbe1940] mmco: unref short failure
[h264 @ 0x5592923f1480] mmco: unref short failure
[h264 @ 0x559f5a52c240] mmco: unref short failure
[h264 @ 0x55d40261cc00] mmco: unref short failure
[h264 @ 0x559f8d58b800] mmco: unref short failure
[h264 @ 0x559f8d58b800] mmco: unref short failure
[h264 @ 0x559f63f58b80] mmco: unref short failure
[h264 @ 0x559f63f58b80] mmco: unref short failure
[h264 @ 0x55d42464bf80] mmco: unref short failure
[h264 @ 0x55d42464bf80] mmco: unref short failure
[h264 @ 0x555f582faf80] mmco: unref short failure
[h264 @ 0x555f582faf80] mmco: unref short failure
[h264 @ 0x555f3f160c00] mmco: unref short failure
[h264 @ 0x555f3f160c00] mmco: unref short failure
[h264 @ 0x55d412fcff80] mmco: unref short failure
[h264 @ 0x559f5a3b6dc0] mmco: unref short failure
[h264 @ 0x559f5a3b6dc0] mmco: unref short failure
09/17/2024 01:31:58 - INFO - __main__ -   current idx ybadhoHjH4Q.28 from finetune_area returns wrong image/video, use 102136 instead.
[h264 @ 0x555f27c23540] mmco: unref short failure
[h264 @ 0x55d4043ea7c0] mmco: unref short failure
[h264 @ 0x55d4043ea7c0] mmco: unref short failure
[h264 @ 0x555f3a82dd80] mmco: unref short failure
[h264 @ 0x555f3a82dd80] mmco: unref short failure
[av1 @ 0x555f4b5fbb40] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f4b5fbb40] Failed to get pixel format.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f4b5fbb40] Failed to get pixel format.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f4b5fbb40] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Missing Sequence Header.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[av1 @ 0x555f2f7c8000] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555f2f7c8000] Failed to get pixel format.
[h264 @ 0x55d407e25a80] mmco: unref short failure
[h264 @ 0x55d407e25a80] mmco: unref short failure
[h264 @ 0x555f27e54440] mmco: unref short failure
[h264 @ 0x555f27e54440] mmco: unref short failure
[h264 @ 0x555f27e54440] mmco: unref short failure
[h264 @ 0x555f27e54440] mmco: unref short failure
[h264 @ 0x55d41060f180] mmco: unref short failure
[h264 @ 0x559f62b29e40] mmco: unref short failure
[h264 @ 0x559f62b29e40] mmco: unref short failure
[h264 @ 0x555f5b413480] mmco: unref short failure
[h264 @ 0x555f5b413480] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d42b8a2ac0] mmco: unref short failure
[h264 @ 0x55d42b8a2ac0] mmco: unref short failure
[h264 @ 0x559295f95a80] mmco: unref short failure
[h264 @ 0x559295f95a80] mmco: unref short failure
[h264 @ 0x55928b9ee640] mmco: unref short failure
[h264 @ 0x55d42b8a2ac0] mmco: unref short failure
[h264 @ 0x55d42b8a2ac0] mmco: unref short failure
[h264 @ 0x559f5de9bac0] mmco: unref short failure
[h264 @ 0x559f5de9bac0] mmco: unref short failure
[h264 @ 0x559f5de9bac0] mmco: unref short failure
[h264 @ 0x559f5de9bac0] mmco: unref short failure
[h264 @ 0x559f5de9bac0] mmco: unref short failure
09/17/2024 01:32:51 - INFO - __main__ -   current idx 3bpzUtvVmrY.16 from finetune_area returns wrong image/video, use 127993 instead.
[h264 @ 0x555f5e56a6c0] mmco: unref short failure
[h264 @ 0x555f5e56a6c0] mmco: unref short failure
[h264 @ 0x55d40aff3640] mmco: unref short failure
[h264 @ 0x55d40aff3640] mmco: unref short failure
[h264 @ 0x55d40aff3640] mmco: unref short failure
[h264 @ 0x55927e9c5180] mmco: unref short failure
[h264 @ 0x55927e9c5180] mmco: unref short failure
[h264 @ 0x55d4088dbc40] mmco: unref short failure
[h264 @ 0x55d4088dbc40] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x559f910c4dc0] mmco: unref short failure
[h264 @ 0x55927f26f900] mmco: unref short failure
[h264 @ 0x55927f26f900] mmco: unref short failure
09/17/2024 01:33:23 - INFO - __main__ -   current idx WwLGb5RDcG0.21 from finetune_area returns wrong image/video, use 7438 instead.
 13%|█▎        | 182/1455 [1:53:09<24:33:40, 69.46s/it]09/17/2024 01:33:33 - INFO - __main__ -   current idx JZAjDUTk1oc.91 from finetune_area returns wrong image/video, use 114029 instead.
[h264 @ 0x55d4088dbc40] mmco: unref short failure
[h264 @ 0x55d4088dbc40] mmco: unref short failure
[h264 @ 0x559f619bf300] mmco: unref short failure
[h264 @ 0x559f619bf300] mmco: unref short failure
[h264 @ 0x555f2828f3c0] mmco: unref short failure
[h264 @ 0x5592a9696440] mmco: unref short failure
[h264 @ 0x55d410c3c580] mmco: unref short failure
[h264 @ 0x55d403beab40] mmco: unref short failure
 13%|█▎        | 183/1455 [1:53:34<19:50:18, 56.15s/it][h264 @ 0x55d40715bcc0] mmco: unref short failure
[h264 @ 0x55d40715bcc0] mmco: unref short failure
[h264 @ 0x55d4043ea7c0] mmco: unref short failure
09/17/2024 01:34:06 - INFO - __main__ -   current idx _-um52MYvA8.26 from finetune_area returns wrong image/video, use 93393 instead.
 13%|█▎        | 184/1455 [1:53:46<15:05:05, 42.73s/it][h264 @ 0x55929e4a4900] mmco: unref short failure
[h264 @ 0x55929e4a4900] mmco: unref short failure
[h264 @ 0x559f74493680] mmco: unref short failure
[h264 @ 0x559f74493680] mmco: unref short failure
[h264 @ 0x559f74493680] mmco: unref short failure
[h264 @ 0x559f74493680] mmco: unref short failure
[h264 @ 0x55928889ff00] mmco: unref short failure
[h264 @ 0x555f26e5d780] mmco: unref short failure
[h264 @ 0x555f26e5d780] mmco: unref short failure
[h264 @ 0x555f4dcf1e80] mmco: unref short failure
[h264 @ 0x555f4dcf1e80] mmco: unref short failure
[h264 @ 0x559f5c76bec0] mmco: unref short failure
[h264 @ 0x559f5c76bec0] mmco: unref short failure
 13%|█▎        | 185/1455 [1:54:17<13:49:52, 39.21s/it][h264 @ 0x555f505867c0] mmco: unref short failure
[h264 @ 0x555f505867c0] mmco: unref short failure
[h264 @ 0x555f505867c0] mmco: unref short failure
[h264 @ 0x555f505867c0] mmco: unref short failure
[h264 @ 0x555f3f125dc0] mmco: unref short failure
[h264 @ 0x555f3f125dc0] mmco: unref short failure
[h264 @ 0x5592866148c0] mmco: unref short failure
[h264 @ 0x55928c31a440] mmco: unref short failure
[h264 @ 0x55928c31a440] mmco: unref short failure
[h264 @ 0x55928c31a440] mmco: unref short failure
[h264 @ 0x55928c31a440] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
[h264 @ 0x55d408ec5340] mmco: unref short failure
 13%|█▎        | 186/1455 [1:54:26<10:38:47, 30.20s/it][h264 @ 0x55927f7ca2c0] mmco: unref short failure
[h264 @ 0x55927f7ca2c0] mmco: unref short failure
 13%|█▎        | 187/1455 [1:54:35<8:26:27, 23.96s/it] [h264 @ 0x55d4173a4500] mmco: unref short failure
09/17/2024 01:35:02 - INFO - __main__ -   current idx VIh8Li4uUFk.0 from finetune_area returns wrong image/video, use 24830 instead.
 13%|█▎        | 188/1455 [1:54:46<7:02:04, 19.99s/it][h264 @ 0x555f2a5d8fc0] mmco: unref short failure
[h264 @ 0x555f2a5d8fc0] mmco: unref short failure
[h264 @ 0x55d42919b200] mmco: unref short failure
[h264 @ 0x55d42919b200] mmco: unref short failure
[h264 @ 0x559f7f38f640] mmco: unref short failure
[h264 @ 0x559f7f38f640] mmco: unref short failure
 13%|█▎        | 189/1455 [1:55:01<6:28:24, 18.41s/it][h264 @ 0x5592867c6d40] mmco: unref short failure
[h264 @ 0x5592867c6d40] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x55d403244f80] mmco: unref short failure
[h264 @ 0x555f2828f3c0] mmco: unref short failure
[h264 @ 0x555f2828f3c0] mmco: unref short failure
[h264 @ 0x55927f7ca2c0] mmco: unref short failure
[h264 @ 0x55d4318af880] mmco: unref short failure
[h264 @ 0x55d4318af880] mmco: unref short failure
[h264 @ 0x559f5cf17280] mmco: unref short failure
[h264 @ 0x559f5cf17280] mmco: unref short failure
[h264 @ 0x55d42fce7180] mmco: unref short failure
[h264 @ 0x55d42fce7180] mmco: unref short failure
[h264 @ 0x555f461566c0] mmco: unref short failure
[h264 @ 0x559f62dd71c0] mmco: unref short failure
[h264 @ 0x559f62dd71c0] mmco: unref short failure
[h264 @ 0x55d404334bc0] mmco: unref short failure
[h264 @ 0x55d404334bc0] mmco: unref short failure
[h264 @ 0x559f599a32c0] mmco: unref short failure
[h264 @ 0x559f5ae8a3c0] mmco: unref short failure
[h264 @ 0x555f2dc66e40] mmco: unref short failure
[h264 @ 0x555f2dc66e40] mmco: unref short failure
[h264 @ 0x55d42fce7180] mmco: unref short failure
[h264 @ 0x55d42fce7180] mmco: unref short failure
[h264 @ 0x555f49653bc0] mmco: unref short failure
[h264 @ 0x555f49653bc0] mmco: unref short failure
09/17/2024 01:36:18 - INFO - __main__ -   current idx budftLR432g.60 from finetune_area returns wrong image/video, use 42906 instead.
[h264 @ 0x55d41b0b6380] mmco: unref short failure
09/17/2024 01:36:30 - INFO - __main__ -   current idx ulxAF450jro.5 from finetune_area returns wrong image/video, use 25649 instead.
[h264 @ 0x555f2e116800] mmco: unref short failure
[h264 @ 0x559f6be78880] mmco: unref short failure
[h264 @ 0x559f6be78880] mmco: unref short failure
[h264 @ 0x559f6be78880] mmco: unref short failure
[h264 @ 0x559f6be78880] mmco: unref short failure
[h264 @ 0x555f2dc66e40] mmco: unref short failure
[h264 @ 0x555f2dc66e40] mmco: unref short failure
[h264 @ 0x559f5abeb580] mmco: unref short failure
[h264 @ 0x559f5abeb580] mmco: unref short failure
[h264 @ 0x55d42fce7180] mmco: unref short failure
[h264 @ 0x55d41378a640] mmco: unref short failure
[h264 @ 0x555f2dc66e40] mmco: unref short failure
[h264 @ 0x559f5b8fe100] mmco: unref short failure
[h264 @ 0x559287a39380] mmco: unref short failure
[h264 @ 0x559287a39380] mmco: unref short failure
[h264 @ 0x559f5a52c240] mmco: unref short failure
[h264 @ 0x559f5a52c240] mmco: unref short failure
[h264 @ 0x559f6bdb4bc0] mmco: unref short failure
[h264 @ 0x559f6bdb4bc0] mmco: unref short failure
[h264 @ 0x559f6bdb4bc0] mmco: unref short failure
[h264 @ 0x559f6bdb4bc0] mmco: unref short failure
09/17/2024 01:37:34 - INFO - __main__ -   current idx cUO419RDXpY.18 from finetune_area returns wrong image/video, use 119487 instead.
[h264 @ 0x55929ff46640] mmco: unref short failure
[h264 @ 0x55929ff46640] mmco: unref short failure
[h264 @ 0x559286af5080] mmco: unref short failure
[h264 @ 0x559292484380] mmco: unref short failure
09/17/2024 01:37:57 - INFO - __main__ -   current idx aan7-sOxqOc.37 from finetune_area returns wrong image/video, use 87721 instead.
[h264 @ 0x55d4338b7940] mmco: unref short failure
[h264 @ 0x55d4338b7940] mmco: unref short failure
[h264 @ 0x55928516fc40] mmco: unref short failure
[h264 @ 0x55928516fc40] mmco: unref short failure
[h264 @ 0x555f2f48fc00] mmco: unref short failure
[h264 @ 0x555f2f48fc00] mmco: unref short failure
[h264 @ 0x555f29ca9600] mmco: unref short failure
[h264 @ 0x555f29ca9600] mmco: unref short failure
[h264 @ 0x55d417334180] mmco: unref short failure
[h264 @ 0x55d417334180] mmco: unref short failure
 13%|█▎        | 190/1455 [1:58:06<24:00:40, 68.33s/it][h264 @ 0x55d4208c1940] mmco: unref short failure
[h264 @ 0x5592baa3d0c0] mmco: unref short failure
[h264 @ 0x5592baa3d0c0] mmco: unref short failure
09/17/2024 01:38:34 - INFO - __main__ -   current idx bFHOzJ5hSFg.79 from finetune_area returns wrong image/video, use 107838 instead.
[h264 @ 0x559285cfef80] mmco: unref short failure
[h264 @ 0x55d42b61ab80] mmco: unref short failure
[h264 @ 0x55d42b61ab80] mmco: unref short failure
[h264 @ 0x555f513634c0] mmco: unref short failure
[h264 @ 0x559f59ff0380] mmco: unref short failure
[h264 @ 0x559f59ff0380] mmco: unref short failure
[h264 @ 0x559290e2f6c0] mmco: unref short failure
[h264 @ 0x55d43118bd80] mmco: unref short failure
 13%|█▎        | 191/1455 [1:58:38<20:12:55, 57.58s/it][h264 @ 0x559f59ff0380] mmco: unref short failure
[h264 @ 0x559f59ff0380] mmco: unref short failure
[h264 @ 0x55d433548440] mmco: unref short failure
[h264 @ 0x55d433548440] mmco: unref short failure
09/17/2024 01:39:15 - INFO - __main__ -   current idx eBDMGQmep9I.8 from finetune_area returns wrong image/video, use 45268 instead.
 13%|█▎        | 192/1455 [1:58:56<16:03:16, 45.76s/it][h264 @ 0x559f619d5440] mmco: unref short failure
[h264 @ 0x559f619d5440] mmco: unref short failure
[h264 @ 0x559f944aaa40] mmco: unref short failure
 13%|█▎        | 193/1455 [1:59:11<12:45:24, 36.39s/it][h264 @ 0x55d40d071e80] mmco: unref short failure
[h264 @ 0x55d40d071e80] mmco: unref short failure
[h264 @ 0x55d40d071e80] mmco: unref short failure
[h264 @ 0x55d40d071e80] mmco: unref short failure
 13%|█▎        | 194/1455 [1:59:19<9:47:12, 27.94s/it]  13%|█▎        | 195/1455 [1:59:27<7:43:10, 22.06s/it][h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f777b1400] mmco: unref short failure
[h264 @ 0x559f59ff0380] mmco: unref short failure
[h264 @ 0x559f59ff0380] mmco: unref short failure
 13%|█▎        | 196/1455 [1:59:39<6:35:52, 18.87s/it]09/17/2024 01:40:05 - INFO - __main__ -   current idx YSb87fytH2o.16 from finetune_area returns wrong image/video, use 40288 instead.
 14%|█▎        | 197/1455 [1:59:48<5:35:49, 16.02s/it][h264 @ 0x55d405557ec0] mmco: unref short failure
[h264 @ 0x55d405557ec0] mmco: unref short failure
[h264 @ 0x559f5a3b6dc0] mmco: unref short failure
[h264 @ 0x559f5a3b6dc0] mmco: unref short failure
[h264 @ 0x55d40ac51380] mmco: unref short failure
[h264 @ 0x5592901d3180] mmco: unref short failure
[h264 @ 0x555f33b9c800] mmco: unref short failure
[h264 @ 0x55d419b4f240] mmco: unref short failure
[h264 @ 0x5592ac9c1f80] mmco: unref short failure
[h264 @ 0x5592ac9c1f80] mmco: unref short failure
[h264 @ 0x55928d63dfc0] mmco: unref short failure
[h264 @ 0x55928d63dfc0] mmco: unref short failure
[h264 @ 0x559f6e2b7880] mmco: unref short failure
[h264 @ 0x55d42d15dc40] mmco: unref short failure
[h264 @ 0x55d42d15dc40] mmco: unref short failure
[h264 @ 0x55929540b240] mmco: unref short failure
[h264 @ 0x55929540b240] mmco: unref short failure
[h264 @ 0x555f3c131040] mmco: unref short failure
[h264 @ 0x55929a749f00] mmco: unref short failure
[h264 @ 0x559f683bd5c0] mmco: unref short failure
[h264 @ 0x559f683bd5c0] mmco: unref short failure
[h264 @ 0x55929118cec0] mmco: unref short failure
[h264 @ 0x55929118cec0] mmco: unref short failure
[h264 @ 0x55d4141e1e00] mmco: unref short failure
[h264 @ 0x55d4141e1e00] mmco: unref short failure
[h264 @ 0x559f67088240] mmco: unref short failure
[h264 @ 0x559f67088240] mmco: unref short failure
[h264 @ 0x55927f6e8080] mmco: unref short failure
[h264 @ 0x55d4204a6480] mmco: unref short failure
[h264 @ 0x55d4204a6480] mmco: unref short failure
[h264 @ 0x559f63043700] mmco: unref short failure
[h264 @ 0x559f63043700] mmco: unref short failure
[h264 @ 0x55d42dec06c0] mmco: unref short failure
[h264 @ 0x55d42dec06c0] mmco: unref short failure
[h264 @ 0x559f6bc0d640] mmco: unref short failure
[h264 @ 0x559f6bc0d640] mmco: unref short failure
[h264 @ 0x55d40715bcc0] mmco: unref short failure
[h264 @ 0x55d40715bcc0] mmco: unref short failure
[h264 @ 0x55d40715bcc0] mmco: unref short failure
[h264 @ 0x559282899340] mmco: unref short failure
[h264 @ 0x559282899340] mmco: unref short failure
[h264 @ 0x559f5bd4db40] mmco: unref short failure
[h264 @ 0x559f5bd4db40] mmco: unref short failure
[h264 @ 0x559f851de400] mmco: unref short failure
[h264 @ 0x559f851de400] mmco: unref short failure
[h264 @ 0x559f851de400] mmco: unref short failure
[h264 @ 0x559f851de400] mmco: unref short failure
[h264 @ 0x555f261a0d00] mmco: unref short failure
[h264 @ 0x555f261a0d00] mmco: unref short failure
[h264 @ 0x55d4335d5d80] mmco: unref short failure
[h264 @ 0x55d436d30d40] mmco: unref short failure
[h264 @ 0x55d436d30d40] mmco: unref short failure
[h264 @ 0x555f2831ba40] mmco: unref short failure
[h264 @ 0x555f2831ba40] mmco: unref short failure
[h264 @ 0x559f8d69a440] mmco: unref short failure
[h264 @ 0x559297cc6680] mmco: unref short failure
[h264 @ 0x559297cc6680] mmco: unref short failure
[h264 @ 0x559f83bcca00] mmco: unref short failure
[h264 @ 0x55d40d5cbcc0] mmco: unref short failure
[h264 @ 0x55d40d5cbcc0] mmco: unref short failure
[h264 @ 0x55d40f3ff640] mmco: unref short failure
[h264 @ 0x55d40f3ff640] mmco: unref short failure
[h264 @ 0x555f58802c80] mmco: unref short failure
[h264 @ 0x555f58802c80] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x55d403f6a680] mmco: unref short failure
[h264 @ 0x555f4299bcc0] mmco: unref short failure
[h264 @ 0x555f2bc51a80] mmco: unref short failure
[h264 @ 0x555f263d2140] mmco: unref short failure
[h264 @ 0x555f263d2140] mmco: unref short failure
 14%|█▎        | 198/1455 [2:02:57<23:41:34, 67.86s/it] 14%|█▎        | 199/1455 [2:03:28<19:46:34, 56.68s/it]09/17/2024 01:43:49 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 01:43:49 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x55d41b0b6380] mmco: unref short failure
[h264 @ 0x55d41b0b6380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555f368628c0] mmco: unref short failure
[h264 @ 0x555f368628c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5592a752bd40] mmco: unref short failure
[h264 @ 0x555f3913cf80] mmco: unref short failure
[h264 @ 0x555f3913cf80] mmco: unref short failure
[h264 @ 0x555f3913cf80] mmco: unref short failure
[h264 @ 0x555f3913cf80] mmco: unref short failure
[h264 @ 0x559280d09100] mmco: unref short failure
[h264 @ 0x555f32e6e1c0] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x555f45d8a080] mmco: unref short failure
[h264 @ 0x555f269ac980] mmco: unref short failure
[h264 @ 0x555f269ac980] mmco: unref short failure
[h264 @ 0x55d4244bdcc0] mmco: unref short failure
[h264 @ 0x55d4244bdcc0] mmco: unref short failure
[h264 @ 0x559f752f1700] mmco: unref short failure
[h264 @ 0x559f752f1700] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x559f8204d6c0] mmco: unref short failure

  0%|          | 1/221 [00:00<03:07,  1.17it/s][A
  1%|          | 2/221 [00:01<02:32,  1.44it/s][A
  1%|▏         | 3/221 [00:01<02:02,  1.78it/s][A
  2%|▏         | 4/221 [00:02<01:29,  2.43it/s][A
  2%|▏         | 5/221 [00:02<01:13,  2.93it/s][A
  3%|▎         | 6/221 [00:02<01:02,  3.41it/s][A
  3%|▎         | 7/221 [00:02<00:53,  4.02it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.42it/s][A
  4%|▍         | 9/221 [00:03<01:10,  3.02it/s][A
  5%|▍         | 10/221 [00:03<01:23,  2.52it/s][A
  5%|▍         | 11/221 [00:04<01:13,  2.87it/s][A
  5%|▌         | 12/221 [00:04<01:33,  2.24it/s][A
  6%|▌         | 13/221 [00:05<01:26,  2.40it/s][A
  6%|▋         | 14/221 [00:05<01:42,  2.02it/s][A[h264 @ 0x559f602f8740] mmco: unref short failure
[h264 @ 0x559f602f8740] mmco: unref short failure

  7%|▋         | 15/221 [00:06<01:39,  2.07it/s][A
[h264 @ 0x555f31bf8340] mmco: unref short failure
[h264 @ 0x555f31bf8340] mmco: unref short failure
  7%|▋         | 16/221 [00:06<01:47,  1.91it/s][A[h264 @ 0x555f2831ba40] mmco: unref short failure
[h264 @ 0x555f2831ba40] mmco: unref short failure

  8%|▊         | 17/221 [00:07<02:00,  1.70it/s][A
  8%|▊         | 18/221 [00:08<01:50,  1.84it/s][A
  9%|▊         | 19/221 [00:08<01:34,  2.14it/s][A
  9%|▉         | 20/221 [00:08<01:14,  2.71it/s][A
 10%|▉         | 21/221 [00:08<01:09,  2.86it/s][A
 10%|▉         | 22/221 [00:09<01:03,  3.15it/s][A
 10%|█         | 23/221 [00:09<00:55,  3.54it/s][A
 11%|█         | 24/221 [00:09<00:52,  3.78it/s][A
 11%|█▏        | 25/221 [00:09<00:47,  4.15it/s][A
 12%|█▏        | 26/221 [00:10<00:59,  3.28it/s][A
 13%|█▎        | 28/221 [00:11<01:18,  2.47it/s][A
 13%|█▎        | 29/221 [00:11<01:19,  2.42it/s][A
 14%|█▎        | 30/221 [00:12<01:16,  2.48it/s][A
 14%|█▍        | 31/221 [00:12<01:17,  2.46it/s][A
 15%|█▍        | 33/221 [00:12<00:52,  3.56it/s][A
 15%|█▌        | 34/221 [00:12<00:45,  4.15it/s][A
 16%|█▌        | 35/221 [00:13<00:48,  3.83it/s][A
 16%|█▋        | 36/221 [00:13<01:00,  3.05it/s][A
 17%|█▋        | 37/221 [00:14<01:05,  2.79it/s][A
 17%|█▋        | 38/221 [00:14<01:16,  2.39it/s][A
 18%|█▊        | 39/221 [00:14<01:04,  2.83it/s][A
 18%|█▊        | 40/221 [00:15<01:05,  2.76it/s][A
 19%|█▊        | 41/221 [00:15<00:55,  3.22it/s][A
 19%|█▉        | 42/221 [00:16<01:18,  2.28it/s][A
 19%|█▉        | 43/221 [00:16<01:05,  2.72it/s][A
 20%|█▉        | 44/221 [00:16<00:51,  3.45it/s][A
 20%|██        | 45/221 [00:16<01:00,  2.92it/s][A
 21%|██        | 46/221 [00:17<01:03,  2.76it/s][A
 21%|██▏       | 47/221 [00:17<01:05,  2.64it/s][A
 22%|██▏       | 48/221 [00:17<00:53,  3.24it/s][A
 22%|██▏       | 49/221 [00:18<00:59,  2.91it/s][A
 23%|██▎       | 50/221 [00:18<00:59,  2.88it/s][A
 23%|██▎       | 51/221 [00:18<00:52,  3.22it/s][A
 24%|██▎       | 52/221 [00:19<00:46,  3.66it/s][A
 24%|██▍       | 53/221 [00:19<00:44,  3.78it/s][A
 24%|██▍       | 54/221 [00:20<01:07,  2.47it/s][A
 25%|██▍       | 55/221 [00:20<01:12,  2.29it/s][A
 25%|██▌       | 56/221 [00:20<01:09,  2.36it/s][A
 26%|██▌       | 57/221 [00:21<01:00,  2.70it/s][A
 26%|██▌       | 58/221 [00:21<00:49,  3.28it/s][A
 27%|██▋       | 59/221 [00:21<00:45,  3.59it/s][A[h264 @ 0x5592a0dabc80] mmco: unref short failure

 27%|██▋       | 60/221 [00:22<01:24,  1.91it/s][A
 28%|██▊       | 61/221 [00:23<01:17,  2.06it/s][A[h264 @ 0x555f48868fc0] mmco: unref short failure

 28%|██▊       | 62/221 [00:23<01:11,  2.21it/s][A
 29%|██▊       | 63/221 [00:23<01:00,  2.60it/s][A
 29%|██▉       | 64/221 [00:23<00:52,  2.96it/s][A
 29%|██▉       | 65/221 [00:24<00:46,  3.37it/s][A[h264 @ 0x559f605a8dc0] mmco: unref short failure

 30%|██▉       | 66/221 [00:24<00:46,  3.32it/s][A
 30%|███       | 67/221 [00:25<01:13,  2.08it/s][A
 31%|███       | 68/221 [00:25<00:59,  2.58it/s][A
 31%|███       | 69/221 [00:26<01:07,  2.25it/s][A
 32%|███▏      | 70/221 [00:26<00:55,  2.71it/s][A
 32%|███▏      | 71/221 [00:26<00:51,  2.89it/s][A
 33%|███▎      | 72/221 [00:27<01:02,  2.38it/s][A
 33%|███▎      | 73/221 [00:27<01:07,  2.20it/s][A
 33%|███▎      | 74/221 [00:27<00:58,  2.52it/s][A
 34%|███▍      | 75/221 [00:28<00:59,  2.46it/s][A
 34%|███▍      | 76/221 [00:28<00:47,  3.03it/s][A
 35%|███▍      | 77/221 [00:28<00:46,  3.11it/s][A
 35%|███▌      | 78/221 [00:28<00:38,  3.71it/s][A
 36%|███▌      | 79/221 [00:29<01:02,  2.27it/s][A
 36%|███▌      | 80/221 [00:30<00:55,  2.52it/s][A
 37%|███▋      | 81/221 [00:30<00:48,  2.87it/s][A
 37%|███▋      | 82/221 [00:31<01:02,  2.21it/s][A
 38%|███▊      | 83/221 [00:31<01:00,  2.30it/s][A
 38%|███▊      | 84/221 [00:31<00:55,  2.48it/s][A
 38%|███▊      | 85/221 [00:31<00:43,  3.12it/s][A
 39%|███▉      | 86/221 [00:32<00:38,  3.55it/s][A
 39%|███▉      | 87/221 [00:32<00:57,  2.33it/s][A
 40%|███▉      | 88/221 [00:33<01:16,  1.75it/s][A
 40%|████      | 89/221 [00:34<01:04,  2.04it/s][A
 41%|████      | 90/221 [00:34<00:54,  2.41it/s][A
 41%|████      | 91/221 [00:34<00:50,  2.58it/s][A
 42%|████▏     | 92/221 [00:35<00:53,  2.40it/s][A
 42%|████▏     | 93/221 [00:35<00:53,  2.41it/s][A
 43%|████▎     | 94/221 [00:35<00:49,  2.58it/s][A
 43%|████▎     | 95/221 [00:36<00:45,  2.79it/s][A
 43%|████▎     | 96/221 [00:36<00:40,  3.11it/s][A
 44%|████▍     | 97/221 [00:36<00:36,  3.43it/s][A
 44%|████▍     | 98/221 [00:36<00:38,  3.21it/s][A
 45%|████▍     | 99/221 [00:37<00:32,  3.71it/s][A
 45%|████▌     | 100/221 [00:37<00:32,  3.72it/s][A
 46%|████▌     | 101/221 [00:37<00:33,  3.60it/s][A
 46%|████▌     | 102/221 [00:37<00:34,  3.50it/s][A
 47%|████▋     | 103/221 [00:38<00:28,  4.07it/s][A
 47%|████▋     | 104/221 [00:38<00:24,  4.71it/s][A[h264 @ 0x555f33610280] mmco: unref short failure

 48%|████▊     | 105/221 [00:38<00:26,  4.44it/s][A[h264 @ 0x55d407662f40] mmco: unref short failure

 48%|████▊     | 106/221 [00:39<00:54,  2.12it/s][A
 48%|████▊     | 107/221 [00:39<00:43,  2.65it/s][A
 49%|████▉     | 108/221 [00:40<00:41,  2.75it/s][A
 49%|████▉     | 109/221 [00:40<00:37,  2.96it/s][A
 50%|████▉     | 110/221 [00:40<00:40,  2.73it/s][A[h264 @ 0x55d429069d40] mmco: unref short failure
[h264 @ 0x55d429069d40] mmco: unref short failure

 50%|█████     | 111/221 [00:41<00:57,  1.92it/s][A
 51%|█████     | 112/221 [00:42<00:55,  1.97it/s][A
 51%|█████     | 113/221 [00:42<00:53,  2.00it/s][A
 52%|█████▏    | 114/221 [00:42<00:41,  2.57it/s][A
 52%|█████▏    | 115/221 [00:42<00:32,  3.29it/s][A[h264 @ 0x555f5e9e32c0] mmco: unref short failure
[h264 @ 0x555f5e9e32c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:43<00:47,  2.19it/s][A
 53%|█████▎    | 117/221 [00:44<00:45,  2.26it/s][A
 53%|█████▎    | 118/221 [00:44<00:41,  2.50it/s][A
 54%|█████▍    | 119/221 [00:44<00:46,  2.21it/s][A
 54%|█████▍    | 120/221 [00:45<00:40,  2.51it/s][A
 55%|█████▍    | 121/221 [00:45<00:31,  3.22it/s][A[h264 @ 0x559f89085840] mmco: unref short failure
[h264 @ 0x559f89085840] mmco: unref short failure

 55%|█████▌    | 122/221 [00:45<00:29,  3.36it/s][A
 56%|█████▌    | 123/221 [00:45<00:26,  3.71it/s][A
 56%|█████▌    | 124/221 [00:46<00:26,  3.59it/s][A
 57%|█████▋    | 125/221 [00:46<00:37,  2.58it/s][A
 57%|█████▋    | 126/221 [00:46<00:32,  2.88it/s][A
 57%|█████▋    | 127/221 [00:47<00:43,  2.17it/s][A
 58%|█████▊    | 128/221 [00:48<00:50,  1.85it/s][A
 58%|█████▊    | 129/221 [00:48<00:41,  2.22it/s][A
 59%|█████▉    | 130/221 [00:48<00:37,  2.41it/s][A
 59%|█████▉    | 131/221 [00:49<00:32,  2.80it/s][A
 60%|█████▉    | 132/221 [00:49<00:28,  3.09it/s][A
 60%|██████    | 133/221 [00:50<00:36,  2.41it/s][A
 61%|██████    | 134/221 [00:50<00:34,  2.52it/s][A
 61%|██████    | 135/221 [00:50<00:31,  2.69it/s][A
 62%|██████▏   | 136/221 [00:51<00:32,  2.66it/s][A
 62%|██████▏   | 137/221 [00:51<00:28,  2.97it/s][A
 62%|██████▏   | 138/221 [00:51<00:32,  2.58it/s][A
 63%|██████▎   | 139/221 [00:52<00:35,  2.33it/s][A[h264 @ 0x55d42d1f1700] mmco: unref short failure

 63%|██████▎   | 140/221 [00:52<00:33,  2.39it/s][A
 64%|██████▍   | 141/221 [00:53<00:30,  2.64it/s][A
 64%|██████▍   | 142/221 [00:53<00:30,  2.59it/s][A
 65%|██████▍   | 143/221 [00:53<00:28,  2.75it/s][A
 65%|██████▌   | 144/221 [00:54<00:27,  2.80it/s][A
 66%|██████▌   | 145/221 [00:54<00:22,  3.45it/s][A
 66%|██████▌   | 146/221 [00:54<00:18,  4.13it/s][A
 67%|██████▋   | 147/221 [00:54<00:18,  4.04it/s][A[h264 @ 0x555f29ca9600] mmco: unref short failure

 67%|██████▋   | 148/221 [00:55<00:24,  2.95it/s][A
 67%|██████▋   | 149/221 [00:55<00:23,  3.06it/s][A
 68%|██████▊   | 150/221 [00:55<00:21,  3.32it/s][A
 68%|██████▊   | 151/221 [00:56<00:30,  2.32it/s][A[h264 @ 0x555f5e9e32c0] mmco: unref short failure

 69%|██████▉   | 152/221 [00:57<00:47,  1.46it/s][A
 69%|██████▉   | 153/221 [00:58<00:41,  1.62it/s][A
 70%|██████▉   | 154/221 [00:58<00:34,  1.94it/s][A
 70%|███████   | 155/221 [00:58<00:30,  2.16it/s][A
 71%|███████   | 156/221 [00:59<00:30,  2.15it/s][A
 71%|███████   | 157/221 [00:59<00:31,  2.02it/s][A
 71%|███████▏  | 158/221 [01:00<00:27,  2.26it/s][A
 72%|███████▏  | 159/221 [01:00<00:22,  2.81it/s][A
 72%|███████▏  | 160/221 [01:00<00:23,  2.58it/s][A
 73%|███████▎  | 161/221 [01:01<00:20,  2.90it/s][A
 73%|███████▎  | 162/221 [01:01<00:19,  2.97it/s][A
 74%|███████▍  | 163/221 [01:01<00:20,  2.89it/s][A
 74%|███████▍  | 164/221 [01:02<00:21,  2.62it/s][A
 75%|███████▍  | 165/221 [01:02<00:19,  2.95it/s][A
 75%|███████▌  | 166/221 [01:03<00:22,  2.41it/s][A
 76%|███████▌  | 167/221 [01:03<00:18,  2.92it/s][A
 76%|███████▌  | 168/221 [01:03<00:23,  2.26it/s][A
 76%|███████▋  | 169/221 [01:04<00:19,  2.69it/s][A
 77%|███████▋  | 170/221 [01:04<00:19,  2.62it/s][A
 77%|███████▋  | 171/221 [01:05<00:21,  2.31it/s][A
 78%|███████▊  | 172/221 [01:05<00:18,  2.72it/s][A
 78%|███████▊  | 173/221 [01:05<00:17,  2.79it/s][A
 79%|███████▊  | 174/221 [01:05<00:15,  3.12it/s][A
 79%|███████▉  | 175/221 [01:06<00:14,  3.20it/s][A
 80%|███████▉  | 176/221 [01:06<00:13,  3.29it/s][A
 80%|████████  | 177/221 [01:06<00:13,  3.24it/s][A
 81%|████████  | 178/221 [01:07<00:14,  3.04it/s][A
 81%|████████  | 179/221 [01:07<00:15,  2.77it/s][A
 81%|████████▏ | 180/221 [01:07<00:13,  3.14it/s][A
 82%|████████▏ | 181/221 [01:08<00:13,  2.92it/s][A
 82%|████████▏ | 182/221 [01:08<00:13,  2.91it/s][A
 83%|████████▎ | 183/221 [01:08<00:13,  2.91it/s][A
 83%|████████▎ | 184/221 [01:09<00:13,  2.80it/s][A
 84%|████████▍ | 186/221 [01:09<00:10,  3.40it/s][A
 85%|████████▍ | 187/221 [01:10<00:11,  3.08it/s][A[h264 @ 0x5592b79cbd40] mmco: unref short failure
[h264 @ 0x5592b79cbd40] mmco: unref short failure

 85%|████████▌ | 188/221 [01:10<00:10,  3.23it/s][A
 86%|████████▌ | 189/221 [01:10<00:10,  3.02it/s][A
 86%|████████▌ | 190/221 [01:11<00:12,  2.52it/s][A
 86%|████████▋ | 191/221 [01:11<00:10,  3.00it/s][A
 87%|████████▋ | 192/221 [01:11<00:09,  3.04it/s][A
 87%|████████▋ | 193/221 [01:12<00:08,  3.36it/s][A
 88%|████████▊ | 194/221 [01:13<00:16,  1.67it/s][A
 88%|████████▊ | 195/221 [01:13<00:14,  1.79it/s][A[h264 @ 0x555f440ce480] mmco: unref short failure

 89%|████████▊ | 196/221 [01:14<00:12,  1.96it/s][A
 89%|████████▉ | 197/221 [01:14<00:10,  2.29it/s][A
 90%|████████▉ | 198/221 [01:14<00:08,  2.71it/s][A
 90%|█████████ | 199/221 [01:14<00:07,  3.14it/s][A[h264 @ 0x559f6bc02dc0] mmco: unref short failure
[h264 @ 0x559f6bc02dc0] mmco: unref short failure

 90%|█████████ | 200/221 [01:15<00:07,  2.67it/s][A
 91%|█████████ | 201/221 [01:15<00:07,  2.78it/s][A
 91%|█████████▏| 202/221 [01:16<00:06,  2.92it/s][A
 92%|█████████▏| 203/221 [01:16<00:06,  2.90it/s][A
 92%|█████████▏| 204/221 [01:16<00:05,  3.11it/s][A
 93%|█████████▎| 205/221 [01:16<00:04,  3.70it/s][A
 93%|█████████▎| 206/221 [01:17<00:06,  2.31it/s][A
 94%|█████████▎| 207/221 [01:17<00:05,  2.63it/s][A
not have audios ua_Kowav7hg.20
 94%|█████████▍| 208/221 [01:18<00:04,  2.61it/s][A[h264 @ 0x55928ba0a400] mmco: unref short failure
[h264 @ 0x55928ba0a400] mmco: unref short failure

 95%|█████████▍| 209/221 [01:18<00:04,  2.67it/s][A
 95%|█████████▌| 210/221 [01:18<00:03,  3.11it/s][A
 95%|█████████▌| 211/221 [01:19<00:03,  2.88it/s][A
 96%|█████████▌| 212/221 [01:19<00:03,  2.94it/s][A
 96%|█████████▋| 213/221 [01:19<00:02,  3.07it/s][A[h264 @ 0x559f7ac7fcc0] mmco: unref short failure
[h264 @ 0x559f7ac7fcc0] mmco: unref short failure

 97%|█████████▋| 214/221 [01:20<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:20<00:02,  2.78it/s][A
 98%|█████████▊| 216/221 [01:21<00:02,  2.47it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  2.38it/s][A
 99%|█████████▊| 218/221 [01:21<00:01,  2.44it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.20it/s][A
100%|█████████▉| 220/221 [01:24<00:00,  1.25it/s][A
100%|██████████| 221/221 [01:24<00:00,  1.41it/s][A100%|██████████| 221/221 [01:24<00:00,  2.61it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:10,  3.10it/s][A
  1%|          | 2/221 [00:00<01:10,  3.08it/s][A
  1%|▏         | 3/221 [00:00<01:10,  3.09it/s][A
  2%|▏         | 4/221 [00:01<01:25,  2.54it/s][A
  2%|▏         | 5/221 [00:01<01:20,  2.67it/s][A
  3%|▎         | 6/221 [00:02<01:16,  2.80it/s][A
  3%|▎         | 7/221 [00:02<01:14,  2.89it/s][A
  4%|▎         | 8/221 [00:02<01:11,  2.97it/s][A
  4%|▍         | 9/221 [00:03<01:14,  2.83it/s][A
  5%|▍         | 10/221 [00:03<01:15,  2.81it/s][A
  5%|▍         | 11/221 [00:03<01:13,  2.85it/s][A
  5%|▌         | 12/221 [00:04<01:10,  2.94it/s][A
  6%|▌         | 13/221 [00:04<01:09,  3.01it/s][A
  6%|▋         | 14/221 [00:04<01:12,  2.86it/s][A
  7%|▋         | 15/221 [00:05<01:10,  2.92it/s][A
  7%|▋         | 16/221 [00:05<01:09,  2.94it/s][A
  8%|▊         | 17/221 [00:05<01:09,  2.95it/s][A
  8%|▊         | 18/221 [00:06<01:09,  2.90it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.94it/s][A
  9%|▉         | 20/221 [00:06<01:07,  2.99it/s][A
 10%|▉         | 21/221 [00:07<01:05,  3.05it/s][A
 10%|▉         | 22/221 [00:07<01:04,  3.07it/s][A
 10%|█         | 23/221 [00:07<01:11,  2.77it/s][A
 11%|█         | 24/221 [00:08<01:12,  2.71it/s][A
 11%|█▏        | 25/221 [00:08<01:10,  2.77it/s][A
 12%|█▏        | 26/221 [00:09<01:10,  2.78it/s][A
 12%|█▏        | 27/221 [00:09<01:07,  2.86it/s][A
 13%|█▎        | 28/221 [00:09<01:10,  2.72it/s][h264 @ 0x559f7c515940] mmco: unref short failure
[h264 @ 0x559f7c515940] mmco: unref short failure
[A
 13%|█▎        | 29/221 [00:10<01:13,  2.62it/s][A
 14%|█▎        | 30/221 [00:10<01:12,  2.63it/s][A[h264 @ 0x555f32e6e1c0] mmco: unref short failure

 14%|█▍        | 31/221 [00:10<01:10,  2.68it/s][A
 14%|█▍        | 32/221 [00:11<01:09,  2.70it/s][A09/17/2024 01:47:54 - INFO - __main__ -   current idx JtVvdxUGRsg.70 from finetune_area returns wrong image/video, use 104257 instead.

 15%|█▍        | 33/221 [00:11<01:07,  2.78it/s][A
 15%|█▌        | 34/221 [00:11<01:05,  2.87it/s][A
 16%|█▌        | 35/221 [00:12<01:03,  2.91it/s][A
 16%|█▋        | 36/221 [00:12<01:06,  2.79it/s][A
 17%|█▋        | 37/221 [00:13<01:03,  2.90it/s][A
 17%|█▋        | 38/221 [00:13<01:00,  3.02it/s][A
 18%|█▊        | 39/221 [00:13<00:59,  3.08it/s][A
 18%|█▊        | 40/221 [00:13<01:00,  2.99it/s][A
 19%|█▊        | 41/221 [00:14<01:03,  2.82it/s][A
 19%|█▉        | 42/221 [00:14<01:15,  2.39it/s][A
 19%|█▉        | 43/221 [00:15<01:13,  2.43it/s][A
 20%|█▉        | 44/221 [00:15<01:10,  2.52it/s][A
 20%|██        | 45/221 [00:16<01:05,  2.68it/s][A
 21%|██        | 46/221 [00:16<01:03,  2.76it/s][A
 21%|██▏       | 47/221 [00:16<01:03,  2.73it/s][A
 22%|██▏       | 48/221 [00:17<01:04,  2.69it/s][A
 22%|██▏       | 49/221 [00:17<01:02,  2.75it/s][A
 23%|██▎       | 50/221 [00:17<01:01,  2.77it/s][A
 23%|██▎       | 51/221 [00:18<01:02,  2.74it/s][A
 24%|██▎       | 52/221 [00:18<01:00,  2.77it/s][A
 24%|██▍       | 53/221 [00:18<00:59,  2.83it/s][A
 24%|██▍       | 54/221 [00:19<00:57,  2.92it/s][A
 25%|██▍       | 55/221 [00:19<00:58,  2.84it/s][A
 25%|██▌       | 56/221 [00:19<00:55,  2.99it/s][A
 26%|██▌       | 57/221 [00:20<00:55,  2.95it/s][A
 26%|██▌       | 58/221 [00:20<01:04,  2.51it/s][A
 27%|██▋       | 59/221 [00:21<01:03,  2.54it/s][A
 27%|██▋       | 60/221 [00:21<01:00,  2.67it/s][A
 28%|██▊       | 61/221 [00:21<00:57,  2.77it/s][A
 28%|██▊       | 62/221 [00:22<00:59,  2.69it/s][A
 29%|██▊       | 63/221 [00:22<00:57,  2.77it/s][A
 29%|██▉       | 64/221 [00:22<00:54,  2.88it/s][A
 29%|██▉       | 65/221 [00:23<00:55,  2.83it/s][A
 30%|██▉       | 66/221 [00:23<00:55,  2.78it/s][A
 30%|███       | 67/221 [00:24<00:59,  2.57it/s][A
 31%|███       | 68/221 [00:24<00:59,  2.56it/s][A
 31%|███       | 69/221 [00:24<00:56,  2.68it/s][A
 32%|███▏      | 70/221 [00:25<00:54,  2.79it/s][A
 32%|███▏      | 71/221 [00:25<00:53,  2.83it/s][A
 33%|███▎      | 72/221 [00:25<01:00,  2.48it/s][A
 33%|███▎      | 73/221 [00:26<00:57,  2.59it/s][A
 33%|███▎      | 74/221 [00:26<00:55,  2.66it/s][A
 34%|███▍      | 75/221 [00:26<00:52,  2.79it/s][A
 34%|███▍      | 76/221 [00:27<00:54,  2.64it/s][A
 35%|███▍      | 77/221 [00:27<00:54,  2.62it/s][A[h264 @ 0x55d403beab40] mmco: unref short failure
[h264 @ 0x55d403beab40] mmco: unref short failure

 35%|███▌      | 78/221 [00:28<00:53,  2.66it/s][A
 36%|███▌      | 79/221 [00:28<00:51,  2.74it/s][A
 36%|███▌      | 80/221 [00:28<00:50,  2.79it/s][A
 37%|███▋      | 81/221 [00:29<00:51,  2.73it/s][A
 37%|███▋      | 82/221 [00:29<00:48,  2.84it/s][A[h264 @ 0x55d4184ac3c0] mmco: unref short failure

 38%|███▊      | 83/221 [00:29<00:47,  2.93it/s][A
 38%|███▊      | 84/221 [00:30<00:46,  2.95it/s][A
 38%|███▊      | 85/221 [00:30<00:49,  2.76it/s][A
 39%|███▉      | 86/221 [00:30<00:50,  2.67it/s][A
 39%|███▉      | 87/221 [00:31<00:48,  2.78it/s][A
 40%|███▉      | 88/221 [00:31<00:46,  2.85it/s][A
 40%|████      | 89/221 [00:31<00:45,  2.90it/s][A
 41%|████      | 90/221 [00:32<00:47,  2.78it/s][A
 41%|████      | 91/221 [00:32<00:46,  2.82it/s][A
 42%|████▏     | 92/221 [00:33<00:46,  2.78it/s][A
 42%|████▏     | 93/221 [00:33<00:45,  2.79it/s][A
 43%|████▎     | 94/221 [00:33<00:46,  2.74it/s][A
 43%|████▎     | 95/221 [00:34<00:45,  2.79it/s][A
 43%|████▎     | 96/221 [00:34<00:45,  2.76it/s][A
 44%|████▍     | 97/221 [00:34<00:44,  2.81it/s][A
 44%|████▍     | 98/221 [00:35<00:45,  2.71it/s][A
 45%|████▍     | 99/221 [00:35<00:44,  2.76it/s][A
 45%|████▌     | 100/221 [00:36<00:46,  2.63it/s][A
 46%|████▌     | 101/221 [00:36<00:44,  2.71it/s][A[h264 @ 0x5592ad83c600] mmco: unref short failure
[h264 @ 0x5592ad83c600] mmco: unref short failure

 46%|████▌     | 102/221 [00:36<00:48,  2.45it/s][A
 47%|████▋     | 103/221 [00:37<00:45,  2.61it/s][A
 47%|████▋     | 104/221 [00:37<00:45,  2.56it/s][A
 48%|████▊     | 105/221 [00:38<00:47,  2.43it/s][A
 48%|████▊     | 106/221 [00:38<00:46,  2.47it/s][A
 48%|████▊     | 107/221 [00:38<00:44,  2.58it/s][A
 49%|████▉     | 108/221 [00:39<00:43,  2.62it/s][A
 49%|████▉     | 109/221 [00:39<00:41,  2.71it/s][A
 50%|████▉     | 110/221 [00:39<00:43,  2.58it/s][A
 50%|█████     | 111/221 [00:40<00:41,  2.62it/s][A
 51%|█████     | 112/221 [00:40<00:39,  2.76it/s][A
 51%|█████     | 113/221 [00:40<00:37,  2.85it/s][A
 52%|█████▏    | 114/221 [00:41<00:37,  2.87it/s][A
 52%|█████▏    | 115/221 [00:41<00:37,  2.82it/s][A
 52%|█████▏    | 116/221 [00:42<00:38,  2.72it/s][A
 53%|█████▎    | 117/221 [00:42<00:38,  2.70it/s][A
 53%|█████▎    | 118/221 [00:42<00:37,  2.78it/s][A
 54%|█████▍    | 119/221 [00:43<00:36,  2.78it/s][A
 54%|█████▍    | 120/221 [00:43<00:34,  2.89it/s][A
 55%|█████▍    | 121/221 [00:43<00:35,  2.83it/s][A
 55%|█████▌    | 122/221 [00:44<00:35,  2.78it/s][A
 56%|█████▌    | 123/221 [00:44<00:35,  2.75it/s][A
 56%|█████▌    | 124/221 [00:44<00:34,  2.80it/s][A
 57%|█████▋    | 125/221 [00:45<00:33,  2.83it/s][A
 57%|█████▋    | 126/221 [00:45<00:33,  2.86it/s][A[h264 @ 0x55d403db7dc0] mmco: unref short failure
[h264 @ 0x55d403db7dc0] mmco: unref short failure

 57%|█████▋    | 127/221 [00:45<00:32,  2.90it/s][A
 58%|█████▊    | 128/221 [00:46<00:32,  2.88it/s][A
 58%|█████▊    | 129/221 [00:46<00:31,  2.93it/s][A
 59%|█████▉    | 130/221 [00:47<00:31,  2.86it/s][A
 59%|█████▉    | 131/221 [00:47<00:31,  2.88it/s][A
 60%|█████▉    | 132/221 [00:47<00:31,  2.86it/s][A
 60%|██████    | 133/221 [00:48<00:32,  2.69it/s][A
 61%|██████    | 134/221 [00:48<00:32,  2.65it/s][A
 61%|██████    | 135/221 [00:48<00:31,  2.77it/s][A
 62%|██████▏   | 136/221 [00:49<00:30,  2.80it/s][A
 62%|██████▏   | 137/221 [00:49<00:28,  2.90it/s][A
 62%|██████▏   | 138/221 [00:49<00:28,  2.92it/s][A
 63%|██████▎   | 139/221 [00:50<00:28,  2.85it/s][A
 63%|██████▎   | 140/221 [00:50<00:29,  2.75it/s][A
 64%|██████▍   | 141/221 [00:50<00:28,  2.84it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  2.93it/s][A
 65%|██████▍   | 143/221 [00:51<00:27,  2.88it/s][A
 65%|██████▌   | 144/221 [00:52<00:28,  2.70it/s][A
 66%|██████▌   | 145/221 [00:52<00:27,  2.72it/s][A
 66%|██████▌   | 146/221 [00:52<00:26,  2.82it/s][A
 67%|██████▋   | 147/221 [00:53<00:25,  2.88it/s][A
 67%|██████▋   | 148/221 [00:53<00:25,  2.89it/s][A
 67%|██████▋   | 149/221 [00:53<00:24,  2.88it/s][A
 68%|██████▊   | 150/221 [00:54<00:26,  2.70it/s][A
 68%|██████▊   | 151/221 [00:54<00:25,  2.69it/s][A
 69%|██████▉   | 152/221 [00:54<00:25,  2.70it/s][A
 69%|██████▉   | 153/221 [00:55<00:24,  2.74it/s][A
 70%|██████▉   | 154/221 [00:55<00:24,  2.75it/s][A
 70%|███████   | 155/221 [00:55<00:23,  2.75it/s][A
 71%|███████   | 156/221 [00:56<00:23,  2.73it/s][A
 71%|███████   | 157/221 [00:56<00:24,  2.62it/s][A
 71%|███████▏  | 158/221 [00:57<00:22,  2.74it/s][A
 72%|███████▏  | 159/221 [00:57<00:21,  2.83it/s][A[h264 @ 0x55d4196fad40] mmco: unref short failure

 72%|███████▏  | 160/221 [00:57<00:22,  2.73it/s][A
 73%|███████▎  | 161/221 [00:58<00:21,  2.85it/s][A
 73%|███████▎  | 162/221 [00:58<00:20,  2.93it/s][A
 74%|███████▍  | 163/221 [00:58<00:19,  2.95it/s][A
 74%|███████▍  | 164/221 [00:59<00:20,  2.84it/s][A
 75%|███████▍  | 165/221 [00:59<00:19,  2.89it/s][A
 75%|███████▌  | 166/221 [00:59<00:18,  2.97it/s][A
 76%|███████▌  | 167/221 [01:00<00:18,  2.91it/s][A
 76%|███████▌  | 168/221 [01:00<00:18,  2.80it/s][A
 76%|███████▋  | 169/221 [01:00<00:18,  2.84it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.77it/s][A
 77%|███████▋  | 171/221 [01:01<00:17,  2.82it/s][A
 78%|███████▊  | 172/221 [01:01<00:17,  2.80it/s][A
 78%|███████▊  | 173/221 [01:02<00:16,  2.86it/s][A
 79%|███████▊  | 174/221 [01:02<00:15,  2.97it/s][A
 79%|███████▉  | 175/221 [01:02<00:15,  2.90it/s][A
 80%|███████▉  | 176/221 [01:03<00:16,  2.80it/s][A
 80%|████████  | 177/221 [01:03<00:15,  2.79it/s][A
 81%|████████  | 178/221 [01:04<00:15,  2.73it/s][A
 81%|████████  | 179/221 [01:04<00:14,  2.86it/s][A
 81%|████████▏ | 180/221 [01:04<00:14,  2.89it/s][A
 82%|████████▏ | 181/221 [01:05<00:13,  2.97it/s][A
 82%|████████▏ | 182/221 [01:05<00:13,  2.94it/s][A
 83%|████████▎ | 183/221 [01:05<00:13,  2.89it/s][A
 83%|████████▎ | 184/221 [01:06<00:12,  2.87it/s][A
 84%|████████▎ | 185/221 [01:06<00:12,  2.96it/s][A
 84%|████████▍ | 186/221 [01:06<00:12,  2.88it/s][A
 85%|████████▍ | 187/221 [01:07<00:11,  2.91it/s][A
 85%|████████▌ | 188/221 [01:07<00:11,  2.89it/s][A
 86%|████████▌ | 189/221 [01:07<00:11,  2.83it/s][A
 86%|████████▌ | 190/221 [01:08<00:10,  2.91it/s][A
 86%|████████▋ | 191/221 [01:08<00:10,  2.85it/s][A[h264 @ 0x559f6be83100] mmco: unref short failure

 87%|████████▋ | 192/221 [01:08<00:10,  2.81it/s][A
 87%|████████▋ | 193/221 [01:09<00:10,  2.72it/s][A
 88%|████████▊ | 194/221 [01:09<00:09,  2.84it/s][A
 88%|████████▊ | 195/221 [01:09<00:08,  2.90it/s][A
 89%|████████▊ | 196/221 [01:10<00:09,  2.64it/s][A
 89%|████████▉ | 197/221 [01:10<00:09,  2.63it/s][A
 90%|████████▉ | 198/221 [01:11<00:08,  2.70it/s][A[h264 @ 0x55d411773900] mmco: unref short failure

 90%|█████████ | 199/221 [01:11<00:07,  2.83it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.81it/s][A
 91%|█████████ | 201/221 [01:12<00:07,  2.65it/s][A
 91%|█████████▏| 202/221 [01:12<00:07,  2.42it/s][A
 92%|█████████▏| 203/221 [01:13<00:07,  2.48it/s][A
 92%|█████████▏| 204/221 [01:13<00:06,  2.58it/s][A
 93%|█████████▎| 205/221 [01:13<00:05,  2.69it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.76it/s][A[h264 @ 0x55d40c9d7a40] mmco: unref short failure
[h264 @ 0x55d40c9d7a40] mmco: unref short failure

 94%|█████████▎| 207/221 [01:14<00:04,  2.83it/s][A
 94%|█████████▍| 208/221 [01:14<00:04,  2.79it/s][A09/17/2024 01:48:58 - INFO - __main__ -   current idx ayNV3g3-K8g.35 from finetune_area returns wrong image/video, use 7674 instead.

 95%|█████████▍| 209/221 [01:15<00:04,  2.90it/s][A
 95%|█████████▌| 210/221 [01:15<00:03,  2.96it/s][A
 95%|█████████▌| 211/221 [01:15<00:03,  2.78it/s][A
 96%|█████████▌| 212/221 [01:16<00:03,  2.73it/s][A
 96%|█████████▋| 213/221 [01:16<00:02,  2.75it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  2.85it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.78it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  2.84it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.94it/s][A
 99%|█████████▊| 218/221 [01:18<00:01,  2.96it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.92it/s][A
100%|█████████▉| 220/221 [01:19<00:00,  2.87it/s][A
100%|██████████| 221/221 [01:19<00:00,  2.88it/s][A100%|██████████| 221/221 [01:19<00:00,  2.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.21it/s][A
  1%|          | 2/221 [00:00<01:23,  2.64it/s][A
  1%|▏         | 3/221 [00:01<01:55,  1.88it/s][A
  2%|▏         | 4/221 [00:01<01:30,  2.41it/s][A
  2%|▏         | 5/221 [00:01<01:13,  2.92it/s][A
  3%|▎         | 6/221 [00:02<01:02,  3.46it/s][A
  3%|▎         | 7/221 [00:02<01:01,  3.48it/s][A
  4%|▎         | 8/221 [00:02<01:11,  2.97it/s][A
  4%|▍         | 9/221 [00:03<01:06,  3.21it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.86it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.13it/s][A
  5%|▌         | 12/221 [00:04<01:06,  3.14it/s][A
  6%|▌         | 13/221 [00:04<01:42,  2.03it/s][A
  6%|▋         | 14/221 [00:05<01:20,  2.57it/s][A
  7%|▋         | 15/221 [00:05<01:19,  2.58it/s][A
  7%|▋         | 16/221 [00:05<01:24,  2.43it/s][A
  8%|▊         | 17/221 [00:06<01:32,  2.21it/s][A
  8%|▊         | 18/221 [00:06<01:32,  2.21it/s][A
  9%|▊         | 19/221 [00:07<01:23,  2.43it/s][A
  9%|▉         | 20/221 [00:07<01:17,  2.61it/s][A
 10%|▉         | 21/221 [00:07<01:03,  3.14it/s][A
 10%|▉         | 22/221 [00:07<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:08<00:49,  4.00it/s][A
 11%|█         | 24/221 [00:08<00:45,  4.36it/s][A
 11%|█▏        | 25/221 [00:08<00:47,  4.16it/s][A[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure

 12%|█▏        | 26/221 [00:08<00:54,  3.56it/s][A
 12%|█▏        | 27/221 [00:09<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:09<01:11,  2.69it/s][A[h264 @ 0x55d40d654ec0] mmco: unref short failure
[h264 @ 0x55d40d654ec0] mmco: unref short failure

 13%|█▎        | 29/221 [00:10<01:13,  2.62it/s][A
 14%|█▎        | 30/221 [00:10<01:11,  2.68it/s][A
 14%|█▍        | 31/221 [00:11<01:15,  2.50it/s][A
 14%|█▍        | 32/221 [00:11<01:03,  2.99it/s][A
 15%|█▍        | 33/221 [00:11<00:59,  3.17it/s][A
 15%|█▌        | 34/221 [00:11<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:12<00:59,  3.10it/s][A
 16%|█▋        | 36/221 [00:12<01:05,  2.82it/s][A
 17%|█▋        | 37/221 [00:13<01:08,  2.69it/s][A
 17%|█▋        | 38/221 [00:13<01:09,  2.63it/s][A
 18%|█▊        | 39/221 [00:13<00:58,  3.11it/s][A
 18%|█▊        | 40/221 [00:14<01:08,  2.66it/s][A
 19%|█▊        | 41/221 [00:14<00:57,  3.13it/s][A
 19%|█▉        | 42/221 [00:14<00:50,  3.58it/s][A
 19%|█▉        | 43/221 [00:14<00:54,  3.28it/s][A
 20%|█▉        | 44/221 [00:15<00:46,  3.77it/s][A
 20%|██        | 45/221 [00:15<01:01,  2.85it/s][A
 21%|██        | 46/221 [00:15<00:53,  3.27it/s][A
 21%|██▏       | 47/221 [00:15<00:47,  3.66it/s][A
 22%|██▏       | 48/221 [00:16<00:38,  4.47it/s][A
 22%|██▏       | 49/221 [00:16<00:40,  4.22it/s][A
 23%|██▎       | 50/221 [00:16<00:50,  3.38it/s][A
 23%|██▎       | 51/221 [00:17<00:53,  3.18it/s][A
 24%|██▎       | 52/221 [00:17<00:46,  3.67it/s][A09/17/2024 01:49:28 - INFO - __main__ -   current idx 5kvk51WxHH4.68 from finetune_area returns wrong image/video, use 95568 instead.

 24%|██▍       | 53/221 [00:17<00:45,  3.67it/s][A
 24%|██▍       | 54/221 [00:17<00:43,  3.83it/s][A
 25%|██▍       | 55/221 [00:18<00:44,  3.74it/s][A
 25%|██▌       | 56/221 [00:18<00:46,  3.56it/s][A
 26%|██▌       | 57/221 [00:18<00:47,  3.47it/s][A
 26%|██▌       | 58/221 [00:18<00:39,  4.13it/s][A
 27%|██▋       | 59/221 [00:19<00:38,  4.20it/s][A[h264 @ 0x559f83bcca00] mmco: unref short failure

 27%|██▋       | 60/221 [00:19<00:39,  4.05it/s][A
 28%|██▊       | 61/221 [00:19<00:41,  3.81it/s][A
 28%|██▊       | 62/221 [00:19<00:42,  3.75it/s][A
 29%|██▊       | 63/221 [00:20<00:39,  3.99it/s][A
 29%|██▉       | 64/221 [00:20<00:43,  3.61it/s][A
 29%|██▉       | 65/221 [00:20<00:38,  4.03it/s][A
 30%|██▉       | 66/221 [00:20<00:41,  3.76it/s][A
 30%|███       | 67/221 [00:21<00:58,  2.65it/s][A
 31%|███       | 68/221 [00:21<00:51,  2.95it/s][A
 31%|███       | 69/221 [00:22<00:53,  2.86it/s][A
 32%|███▏      | 70/221 [00:22<00:44,  3.37it/s][A
 32%|███▏      | 71/221 [00:22<00:44,  3.38it/s][A
 33%|███▎      | 72/221 [00:23<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:23<00:54,  2.73it/s][A
 33%|███▎      | 74/221 [00:23<00:55,  2.64it/s][A
 34%|███▍      | 75/221 [00:24<00:59,  2.45it/s][A
 34%|███▍      | 76/221 [00:24<00:52,  2.77it/s][A
 35%|███▍      | 77/221 [00:25<00:54,  2.64it/s][A
 35%|███▌      | 78/221 [00:25<00:50,  2.82it/s][A
 36%|███▌      | 79/221 [00:25<00:52,  2.72it/s][A
 36%|███▌      | 80/221 [00:26<00:54,  2.61it/s][A
 37%|███▋      | 81/221 [00:26<00:53,  2.61it/s][A
 37%|███▋      | 82/221 [00:27<00:54,  2.55it/s][A
 38%|███▊      | 83/221 [00:27<00:43,  3.15it/s][A
 38%|███▊      | 84/221 [00:27<00:49,  2.78it/s][A
 38%|███▊      | 85/221 [00:27<00:47,  2.85it/s][A
 39%|███▉      | 86/221 [00:28<00:42,  3.18it/s][A
 39%|███▉      | 87/221 [00:28<00:59,  2.27it/s][A
 40%|███▉      | 88/221 [00:29<00:53,  2.50it/s][A
 40%|████      | 89/221 [00:29<00:55,  2.37it/s][A
 41%|████      | 90/221 [00:30<00:56,  2.32it/s][A
 41%|████      | 91/221 [00:30<00:48,  2.68it/s][A
 42%|████▏     | 92/221 [00:30<00:45,  2.82it/s][A
 42%|████▏     | 93/221 [00:31<00:44,  2.85it/s][A
 43%|████▎     | 94/221 [00:31<00:42,  3.01it/s][A
 43%|████▎     | 95/221 [00:31<00:54,  2.30it/s][A
 43%|████▎     | 96/221 [00:32<00:50,  2.49it/s][A
 44%|████▍     | 97/221 [00:32<00:45,  2.75it/s][A
 44%|████▍     | 98/221 [00:32<00:45,  2.71it/s][A
 45%|████▍     | 99/221 [00:33<00:36,  3.32it/s][A
 45%|████▌     | 100/221 [00:33<00:31,  3.81it/s][A
 46%|████▌     | 101/221 [00:33<00:39,  3.06it/s][A
 46%|████▌     | 102/221 [00:34<00:36,  3.25it/s][A
 47%|████▋     | 103/221 [00:34<00:35,  3.32it/s][A
 47%|████▋     | 104/221 [00:34<00:29,  3.98it/s][A[h264 @ 0x55929d416380] mmco: unref short failure

 48%|████▊     | 105/221 [00:34<00:29,  3.89it/s][A
 48%|████▊     | 106/221 [00:35<00:38,  2.97it/s][A
 48%|████▊     | 107/221 [00:35<00:35,  3.22it/s][A
 49%|████▉     | 108/221 [00:35<00:31,  3.55it/s][A
 49%|████▉     | 109/221 [00:36<00:35,  3.19it/s][A
 50%|████▉     | 110/221 [00:36<00:34,  3.26it/s][A
 50%|█████     | 111/221 [00:36<00:32,  3.34it/s][A
 51%|█████     | 112/221 [00:36<00:33,  3.27it/s][A
 51%|█████     | 113/221 [00:37<00:33,  3.20it/s][A
 52%|█████▏    | 114/221 [00:37<00:28,  3.75it/s][A
 52%|█████▏    | 115/221 [00:37<00:29,  3.54it/s][A
 52%|█████▏    | 116/221 [00:38<00:27,  3.75it/s][A
 53%|█████▎    | 117/221 [00:38<00:28,  3.65it/s][A
 53%|█████▎    | 118/221 [00:38<00:33,  3.07it/s][A
 54%|█████▍    | 119/221 [00:39<00:40,  2.49it/s][A
 54%|█████▍    | 120/221 [00:39<00:39,  2.54it/s][A
 55%|█████▍    | 121/221 [00:40<00:36,  2.72it/s][A
 55%|█████▌    | 122/221 [00:40<00:33,  2.97it/s][A
 56%|█████▌    | 123/221 [00:40<00:31,  3.09it/s][A
 56%|█████▌    | 124/221 [00:41<00:36,  2.68it/s][A
 57%|█████▋    | 125/221 [00:41<00:48,  1.97it/s][A
 57%|█████▋    | 126/221 [00:42<00:39,  2.39it/s][A
 57%|█████▋    | 127/221 [00:42<00:51,  1.83it/s][A
 58%|█████▊    | 128/221 [00:43<00:43,  2.13it/s][A
 58%|█████▊    | 129/221 [00:43<00:33,  2.75it/s][A
 59%|█████▉    | 130/221 [00:43<00:29,  3.10it/s][A
 59%|█████▉    | 131/221 [00:43<00:27,  3.29it/s][A[h264 @ 0x55d403756c40] mmco: unref short failure
[h264 @ 0x55d403756c40] mmco: unref short failure

 60%|█████▉    | 132/221 [00:44<00:35,  2.49it/s][A
 60%|██████    | 133/221 [00:45<00:40,  2.18it/s][A
 61%|██████    | 134/221 [00:45<00:43,  2.01it/s][A
 61%|██████    | 135/221 [00:45<00:35,  2.43it/s][A
 62%|██████▏   | 136/221 [00:46<00:34,  2.49it/s][A
 62%|██████▏   | 137/221 [00:46<00:30,  2.75it/s][A
 62%|██████▏   | 138/221 [00:46<00:28,  2.91it/s][A
 63%|██████▎   | 139/221 [00:47<00:29,  2.81it/s][A
 63%|██████▎   | 140/221 [00:47<00:25,  3.17it/s][A
 64%|██████▍   | 141/221 [00:47<00:23,  3.38it/s][A
 64%|██████▍   | 142/221 [00:47<00:22,  3.45it/s][A
 65%|██████▍   | 143/221 [00:48<00:21,  3.66it/s][A
 65%|██████▌   | 144/221 [00:48<00:20,  3.73it/s][A
 66%|██████▌   | 145/221 [00:48<00:23,  3.20it/s][A
 66%|██████▌   | 146/221 [00:49<00:24,  3.12it/s][A
 67%|██████▋   | 147/221 [00:49<00:21,  3.39it/s][A[h264 @ 0x555f33b9c800] mmco: unref short failure
[h264 @ 0x555f33b9c800] mmco: unref short failure
[h264 @ 0x555f33b9c800] mmco: unref short failure
[h264 @ 0x555f33b9c800] mmco: unref short failure

 67%|██████▋   | 148/221 [00:49<00:25,  2.82it/s][A
 67%|██████▋   | 149/221 [00:50<00:25,  2.78it/s][A
 68%|██████▊   | 150/221 [00:50<00:25,  2.75it/s][A
 68%|██████▊   | 151/221 [00:51<00:39,  1.76it/s][A
 69%|██████▉   | 152/221 [00:52<00:44,  1.55it/s][A
 69%|██████▉   | 153/221 [00:52<00:35,  1.89it/s][A
 70%|██████▉   | 154/221 [00:53<00:28,  2.32it/s][A
 70%|███████   | 155/221 [00:53<00:29,  2.23it/s][A
 71%|███████   | 156/221 [00:53<00:30,  2.16it/s][A
 71%|███████   | 157/221 [00:54<00:27,  2.36it/s][A
 71%|███████▏  | 158/221 [00:54<00:28,  2.25it/s][A
 72%|███████▏  | 159/221 [00:54<00:22,  2.76it/s][A
 72%|███████▏  | 160/221 [00:55<00:21,  2.84it/s][A
 73%|███████▎  | 161/221 [00:55<00:17,  3.52it/s][A
 73%|███████▎  | 162/221 [00:55<00:14,  4.12it/s][A
 74%|███████▍  | 163/221 [00:55<00:13,  4.28it/s][A
 74%|███████▍  | 164/221 [00:56<00:13,  4.32it/s][A
 75%|███████▍  | 165/221 [00:56<00:12,  4.55it/s][A
 75%|███████▌  | 166/221 [00:56<00:15,  3.59it/s][A[h264 @ 0x55d403756c40] mmco: unref short failure

 76%|███████▌  | 167/221 [00:56<00:13,  4.13it/s][A
 76%|███████▌  | 168/221 [00:57<00:12,  4.10it/s][A
 76%|███████▋  | 169/221 [00:57<00:11,  4.71it/s][A
 77%|███████▋  | 170/221 [00:57<00:15,  3.28it/s][A
 77%|███████▋  | 171/221 [00:58<00:20,  2.39it/s][A
 78%|███████▊  | 172/221 [00:58<00:17,  2.85it/s][A
 78%|███████▊  | 173/221 [00:58<00:15,  3.02it/s][A
 79%|███████▊  | 174/221 [00:59<00:13,  3.61it/s][A
 79%|███████▉  | 175/221 [00:59<00:11,  3.87it/s][A
 80%|███████▉  | 176/221 [00:59<00:10,  4.20it/s][A
 80%|████████  | 177/221 [00:59<00:11,  3.93it/s][A
 81%|████████  | 178/221 [01:00<00:16,  2.63it/s][A
 81%|████████  | 179/221 [01:00<00:15,  2.73it/s][A
 82%|████████▏ | 181/221 [01:01<00:10,  3.67it/s][A
 82%|████████▏ | 182/221 [01:01<00:11,  3.37it/s][A
 83%|████████▎ | 183/221 [01:01<00:11,  3.27it/s][A[h264 @ 0x559f8e268ac0] mmco: unref short failure
[h264 @ 0x559f8e268ac0] mmco: unref short failure

 83%|████████▎ | 184/221 [01:02<00:11,  3.19it/s][A
 84%|████████▎ | 185/221 [01:02<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [01:02<00:10,  3.29it/s][A
 85%|████████▍ | 187/221 [01:02<00:10,  3.33it/s][A
 85%|████████▌ | 188/221 [01:03<00:09,  3.64it/s][A
 86%|████████▌ | 189/221 [01:03<00:08,  3.87it/s][A
 86%|████████▌ | 190/221 [01:03<00:11,  2.80it/s][A
 86%|████████▋ | 191/221 [01:04<00:09,  3.23it/s][A
 87%|████████▋ | 192/221 [01:04<00:08,  3.38it/s][A
 87%|████████▋ | 193/221 [01:04<00:07,  3.73it/s][A
 88%|████████▊ | 194/221 [01:05<00:09,  2.92it/s][A[h264 @ 0x55d40cf7f040] mmco: unref short failure
[h264 @ 0x55d40cf7f040] mmco: unref short failure

 88%|████████▊ | 195/221 [01:05<00:07,  3.51it/s][A
 89%|████████▊ | 196/221 [01:05<00:08,  2.79it/s][A
 89%|████████▉ | 197/221 [01:06<00:09,  2.59it/s][A
 90%|████████▉ | 198/221 [01:06<00:08,  2.70it/s][A
 90%|█████████ | 199/221 [01:06<00:06,  3.21it/s][A
 90%|█████████ | 200/221 [01:07<00:07,  2.97it/s][A
 91%|█████████ | 201/221 [01:07<00:06,  3.25it/s][A
 91%|█████████▏| 202/221 [01:07<00:05,  3.55it/s][A
 92%|█████████▏| 203/221 [01:07<00:05,  3.46it/s][A
 92%|█████████▏| 204/221 [01:08<00:04,  3.65it/s][A
 93%|█████████▎| 205/221 [01:08<00:04,  3.58it/s][A
 93%|█████████▎| 206/221 [01:09<00:05,  2.79it/s][A
 94%|█████████▎| 207/221 [01:09<00:04,  3.22it/s][A
 94%|█████████▍| 208/221 [01:09<00:04,  3.11it/s][A
 95%|█████████▍| 209/221 [01:09<00:04,  2.95it/s][A
 95%|█████████▌| 210/221 [01:10<00:03,  3.54it/s][A
 95%|█████████▌| 211/221 [01:10<00:02,  3.70it/s][A
 96%|█████████▌| 212/221 [01:10<00:03,  2.94it/s][A
 96%|█████████▋| 213/221 [01:11<00:02,  2.94it/s][A
 97%|█████████▋| 214/221 [01:11<00:02,  3.02it/s][A
 97%|█████████▋| 215/221 [01:11<00:02,  2.94it/s][A
 98%|█████████▊| 216/221 [01:12<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  2.86it/s][A
 99%|█████████▊| 218/221 [01:12<00:01,  2.92it/s][A
 99%|█████████▉| 219/221 [01:13<00:00,  2.69it/s][A
100%|█████████▉| 220/221 [01:13<00:00,  3.21it/s][A
100%|██████████| 221/221 [01:13<00:00,  2.74it/s][A100%|██████████| 221/221 [01:13<00:00,  2.99it/s]
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'area_r1': 41.0, 'area_recall': '41.0/67.5/76.1', 'area_ravg': 61.5}
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'forward_r1': 36.9, 'forward_recall': '36.9/63.1/73.0', 'forward_ravg': 57.7}
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 01:50:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 01:50:25 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'area_video_r1': 51.5, 'area_video_recall': '51.5/74.9/81.3', 'area_video_ravg': 69.2, 'area_video_back_r1': 50.5, 'area_video_back_recall': '50.5/73.8/80.8', 'area_video_back_ravg': 68.3}
09/17/2024 01:50:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 199=======

09/17/2024 01:50:25 - INFO - __main__ -   {'area_video_r1': 51.5, 'area_video_recall': '51.5/74.9/81.3', 'area_video_ravg': 69.2, 'area_video_back_r1': 50.5, 'area_video_back_recall': '50.5/73.8/80.8', 'area_video_back_ravg': 68.3}
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'video_r1': 36.1, 'video_recall': '36.1/64.0/74.5', 'video_ravg': 58.2}
09/17/2024 01:50:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 01:50:25 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 01:50:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 199--===========

09/17/2024 01:50:25 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/75.6/83.3', 'video_ravg': 70.0}
09/17/2024 01:50:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 149=======

09/17/2024 01:50:25 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/73.8/82.0', 'video_ravg': 69.1}
[h264 @ 0x55927ea51d00] mmco: unref short failure
[h264 @ 0x559f60e5ec00] mmco: unref short failure
[h264 @ 0x559f60e5ec00] mmco: unref short failure
[h264 @ 0x559f60e5ec00] mmco: unref short failure
[h264 @ 0x559f60e5ec00] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
09/17/2024 01:51:17 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.011266883462667465, 'loss_ret%tv%ta--finetune_area/loss_area': 1.8791453838348389, 'loss_ret%tv%ta--finetune_area/total_loss': 1.8904122114181519}
 14%|█▎        | 200/1455 [2:11:01<61:12:53, 175.60s/it][h264 @ 0x555f590402c0] mmco: unref short failure
[h264 @ 0x559f6cddf000] mmco: unref short failure
[h264 @ 0x559f6cddf000] mmco: unref short failure
 14%|█▍        | 201/1455 [2:11:08<43:33:28, 125.05s/it][h264 @ 0x559f7afa2900] mmco: unref short failure
 14%|█▍        | 202/1455 [2:11:15<31:13:28, 89.71s/it] [h264 @ 0x559f6f95aec0] mmco: unref short failure
[h264 @ 0x5592814c30c0] mmco: unref short failure
[h264 @ 0x5592a1c786c0] mmco: unref short failure
 14%|█▍        | 203/1455 [2:11:23<22:40:02, 65.18s/it][h264 @ 0x55d402568e00] mmco: unref short failure
[h264 @ 0x55d402568e00] mmco: unref short failure
[h264 @ 0x559f619d5440] mmco: unref short failure
[h264 @ 0x559f619d5440] mmco: unref short failure
 14%|█▍        | 204/1455 [2:11:31<16:44:37, 48.18s/it]09/17/2024 01:51:58 - INFO - __main__ -   current idx hq2NNhzo-Lg.4 from finetune_area returns wrong image/video, use 42535 instead.
 14%|█▍        | 205/1455 [2:11:40<12:35:23, 36.26s/it] 14%|█▍        | 206/1455 [2:11:49<9:42:34, 27.99s/it] [h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
 14%|█▍        | 207/1455 [2:11:57<7:40:17, 22.13s/it][h264 @ 0x559280d09100] mmco: unref short failure
[h264 @ 0x559280d09100] mmco: unref short failure
[h264 @ 0x55d41717ad80] mmco: unref short failure
[h264 @ 0x555f33610280] mmco: unref short failure
[h264 @ 0x555f33610280] mmco: unref short failure
[h264 @ 0x555f4dcd4380] mmco: unref short failure
[h264 @ 0x555f4dcd4380] mmco: unref short failure
 14%|█▍        | 208/1455 [2:12:05<6:12:29, 17.92s/it][h264 @ 0x55d40fbe1940] mmco: unref short failure
[h264 @ 0x55d40fbe1940] mmco: unref short failure
 14%|█▍        | 209/1455 [2:12:14<5:12:57, 15.07s/it] 14%|█▍        | 210/1455 [2:12:22<4:31:46, 13.10s/it][h264 @ 0x5592aa89efc0] mmco: unref short failure
[h264 @ 0x5592aa89efc0] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x555f263d2140] mmco: unref short failure
[h264 @ 0x555f263d2140] mmco: unref short failure
[h264 @ 0x555f54f85780] mmco: unref short failure
[h264 @ 0x555f54f85780] mmco: unref short failure
 15%|█▍        | 211/1455 [2:12:31<4:08:39, 11.99s/it][h264 @ 0x559f729272c0] mmco: unref short failure
[h264 @ 0x559f729272c0] mmco: unref short failure
 15%|█▍        | 212/1455 [2:12:40<3:49:52, 11.10s/it][h264 @ 0x559f5cb963c0] mmco: unref short failure
[h264 @ 0x559f5cb963c0] mmco: unref short failure
09/17/2024 01:53:06 - INFO - __main__ -   current idx 4ZmeUj7cFu4.36 from finetune_area returns wrong image/video, use 62849 instead.
[h264 @ 0x555f3e2b9500] mmco: unref short failure
[h264 @ 0x555f3e2b9500] mmco: unref short failure
 15%|█▍        | 213/1455 [2:12:49<3:35:10, 10.39s/it][h264 @ 0x55d40d5bafc0] mmco: unref short failure
[h264 @ 0x55d40d5bafc0] mmco: unref short failure
 15%|█▍        | 214/1455 [2:12:58<3:24:58,  9.91s/it][h264 @ 0x55d40e1a9340] mmco: unref short failure
[h264 @ 0x55d437a91d80] mmco: unref short failure
[h264 @ 0x55d437a91d80] mmco: unref short failure
 15%|█▍        | 215/1455 [2:13:07<3:19:11,  9.64s/it][h264 @ 0x55928c7839c0] mmco: unref short failure
[h264 @ 0x55927e5e0f80] mmco: unref short failure
[h264 @ 0x55d419464700] mmco: unref short failure
[h264 @ 0x55d419464700] mmco: unref short failure
[h264 @ 0x555f33610280] mmco: unref short failure
[h264 @ 0x555f33610280] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x555f3a500f40] mmco: unref short failure
[h264 @ 0x555f3a500f40] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x555f3a500f40] mmco: unref short failure
[h264 @ 0x555f2c287280] mmco: unref short failure
[h264 @ 0x555f2c287280] mmco: unref short failure
[h264 @ 0x555f2c287280] mmco: unref short failure
[h264 @ 0x555f2c287280] mmco: unref short failure
[h264 @ 0x5592b014f2c0] mmco: unref short failure
[h264 @ 0x5592b014f2c0] mmco: unref short failure
[h264 @ 0x5592b014f2c0] mmco: unref short failure
[h264 @ 0x5592b014f2c0] mmco: unref short failure
[h264 @ 0x559f7c943800] mmco: unref short failure
[h264 @ 0x559f7c943800] mmco: unref short failure
[h264 @ 0x555f2866fd40] mmco: unref short failure
[h264 @ 0x555f2866fd40] mmco: unref short failure
[h264 @ 0x555f59756fc0] mmco: unref short failure
[h264 @ 0x55d40fbe1940] mmco: unref short failure
[h264 @ 0x555f2996d140] mmco: unref short failure
[h264 @ 0x559f66d6fd80] mmco: unref short failure
[h264 @ 0x559f66d6fd80] mmco: unref short failure
[h264 @ 0x559f94245a00] mmco: unref short failure
[h264 @ 0x559f94245a00] mmco: unref short failure
[h264 @ 0x559f94245a00] mmco: unref short failure
[h264 @ 0x559f76171900] mmco: unref short failure
[h264 @ 0x559f76171900] mmco: unref short failure
[h264 @ 0x555f5bca97c0] mmco: unref short failure
[h264 @ 0x555f4f103e00] mmco: unref short failure
[h264 @ 0x555f4f103e00] mmco: unref short failure
[h264 @ 0x555f4f103e00] mmco: unref short failure
[h264 @ 0x5592901bad00] mmco: unref short failure
[h264 @ 0x55d41abee300] mmco: unref short failure
[h264 @ 0x55d41abee300] mmco: unref short failure
[h264 @ 0x55d41abee300] mmco: unref short failure
[h264 @ 0x55d41abee300] mmco: unref short failure
[h264 @ 0x55d402d57640] mmco: unref short failure
[h264 @ 0x55d402d57640] mmco: unref short failure
 15%|█▍        | 216/1455 [2:15:23<16:18:48, 47.40s/it][h264 @ 0x5592924d8480] mmco: unref short failure
[h264 @ 0x5592905bb680] mmco: unref short failure
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x559f7b4f0d80] mmco: unref short failure
[h264 @ 0x559f7b4f0d80] mmco: unref short failure
 15%|█▍        | 217/1455 [2:15:42<13:26:24, 39.08s/it][h264 @ 0x555f29095e40] mmco: unref short failure
[h264 @ 0x555f29095e40] mmco: unref short failure
[h264 @ 0x555f506c99c0] mmco: unref short failure
[h264 @ 0x555f506c99c0] mmco: unref short failure
[h264 @ 0x555f506c99c0] mmco: unref short failure
[h264 @ 0x559f7bce5780] mmco: unref short failure
[h264 @ 0x559f7bce5780] mmco: unref short failure
09/17/2024 01:56:32 - INFO - __main__ -   current idx Pj4BTw_2jIM.11 from finetune_area returns wrong image/video, use 75095 instead.
 15%|█▍        | 218/1455 [2:16:11<12:19:11, 35.85s/it][h264 @ 0x559f8413fd00] mmco: unref short failure
[h264 @ 0x559f8413fd00] mmco: unref short failure
[h264 @ 0x55d434128a40] mmco: unref short failure
[h264 @ 0x55d434128a40] mmco: unref short failure
[h264 @ 0x55927e937100] mmco: unref short failure
 15%|█▌        | 219/1455 [2:16:19<9:28:43, 27.61s/it] [h264 @ 0x559f7ee03bc0] mmco: unref short failure
[h264 @ 0x55927f9aee00] mmco: unref short failure
[h264 @ 0x55927f9aee00] mmco: unref short failure
 15%|█▌        | 220/1455 [2:16:33<8:03:58, 23.51s/it][h264 @ 0x55d41eda4400] mmco: unref short failure
[h264 @ 0x55d41eda4400] mmco: unref short failure
[h264 @ 0x559280d09100] mmco: unref short failure
[h264 @ 0x555f5e9eb540] mmco: unref short failure
[h264 @ 0x555f5e9eb540] mmco: unref short failure
[h264 @ 0x555f5e9eb540] mmco: unref short failure
[h264 @ 0x555f5e9eb540] mmco: unref short failure
 15%|█▌        | 221/1455 [2:16:43<6:42:06, 19.55s/it][h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55929a163740] mmco: unref short failure
[h264 @ 0x55929a163740] mmco: unref short failure
 15%|█▌        | 222/1455 [2:16:52<5:35:53, 16.35s/it] 15%|█▌        | 223/1455 [2:17:01<4:50:37, 14.15s/it][h264 @ 0x55d42c48ff80] mmco: unref short failure
[h264 @ 0x55d42c48ff80] mmco: unref short failure
[h264 @ 0x55d404f88a40] mmco: unref short failure
[h264 @ 0x55d437a91d80] mmco: unref short failure
[h264 @ 0x55d437a91d80] mmco: unref short failure
09/17/2024 01:57:32 - INFO - __main__ -   current idx WTKFIwRqMwk.18 from finetune_area returns wrong image/video, use 137985 instead.
[h264 @ 0x559f5b581300] mmco: unref short failure
[h264 @ 0x559f5b581300] mmco: unref short failure
[h264 @ 0x559f7ac36100] mmco: unref short failure
[h264 @ 0x559f7ac36100] mmco: unref short failure
[h264 @ 0x559f7ac36100] mmco: unref short failure
[h264 @ 0x559f7ac36100] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x555f2a36b0c0] mmco: unref short failure
[h264 @ 0x559282b37180] mmco: unref short failure
[h264 @ 0x559282b37180] mmco: unref short failure
09/17/2024 01:58:04 - INFO - __main__ -   current idx g6Wl0SZpFMk.13 from finetune_area returns wrong image/video, use 93082 instead.
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x5592a1b7cc80] mmco: unref short failure
[h264 @ 0x55d403ba5bc0] mmco: unref short failure
[h264 @ 0x559288c91000] mmco: unref short failure
[h264 @ 0x55d437a91d80] mmco: unref short failure
[h264 @ 0x555f47d91800] mmco: unref short failure
[h264 @ 0x559292fc5640] mmco: unref short failure
[h264 @ 0x559292fc5640] mmco: unref short failure
[h264 @ 0x555f29095e40] mmco: unref short failure
[h264 @ 0x555f29095e40] mmco: unref short failure
[h264 @ 0x559f5e1c7740] mmco: unref short failure
[h264 @ 0x559f5e1c7740] mmco: unref short failure
[h264 @ 0x559280d09100] mmco: unref short failure
[h264 @ 0x559280d09100] mmco: unref short failure
09/17/2024 01:58:48 - INFO - __main__ -   current idx 0dGVRi4angY.7 from finetune_area returns wrong image/video, use 120415 instead.
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x5592b11be280] mmco: unref short failure
[h264 @ 0x5592b11be280] mmco: unref short failure
[h264 @ 0x559f5a92f240] mmco: unref short failure
[h264 @ 0x559f5a92f240] mmco: unref short failure
[h264 @ 0x55d41f2e92c0] mmco: unref short failure
[h264 @ 0x55d41f2e92c0] mmco: unref short failure
[h264 @ 0x55d41f2e92c0] mmco: unref short failure
[h264 @ 0x55928fe0da80] mmco: unref short failure
[h264 @ 0x555f37d3a2c0] mmco: unref short failure
[h264 @ 0x555f37d3a2c0] mmco: unref short failure
[h264 @ 0x555f32e6e1c0] mmco: unref short failure
09/17/2024 01:59:14 - INFO - __main__ -   current idx YejxNzlOkeM.23 from finetune_area returns wrong image/video, use 38924 instead.
[h264 @ 0x55d41d9806c0] mmco: unref short failure
[h264 @ 0x559f6443e780] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f807e22c0] mmco: unref short failure
[h264 @ 0x559f807e22c0] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x55929d416380] mmco: unref short failure
[h264 @ 0x559f730e2780] mmco: unref short failure
[h264 @ 0x559f730e2780] mmco: unref short failure
[h264 @ 0x559f7d5b9300] mmco: unref short failure
[h264 @ 0x559f7d5b9300] mmco: unref short failure
[h264 @ 0x55927dd4b500] mmco: unref short failure
[h264 @ 0x55927dd4b500] mmco: unref short failure
[h264 @ 0x55d424033840] mmco: unref short failure
[h264 @ 0x555f5ea56240] mmco: unref short failure
[h264 @ 0x559f6443e780] mmco: unref short failure
[h264 @ 0x559f6443e780] mmco: unref short failure
[h264 @ 0x555f4df75040] mmco: unref short failure
[h264 @ 0x555f4df75040] mmco: unref short failure
[h264 @ 0x555f4df75040] mmco: unref short failure
[h264 @ 0x55d408973380] mmco: unref short failure
[h264 @ 0x555f49899800] mmco: unref short failure
[h264 @ 0x555f49899800] mmco: unref short failure
[h264 @ 0x55d434410000] mmco: unref short failure
[h264 @ 0x555f5ed7a1c0] mmco: unref short failure
 15%|█▌        | 224/1455 [2:20:28<24:38:59, 72.09s/it]09/17/2024 02:00:55 - INFO - __main__ -   current idx My9wyuAl8zM.76 from finetune_area returns wrong image/video, use 12586 instead.
[h264 @ 0x559f641617c0] mmco: unref short failure
 15%|█▌        | 225/1455 [2:20:44<18:53:51, 55.31s/it][h264 @ 0x559292fc5640] mmco: unref short failure
[h264 @ 0x559292fc5640] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x555f32a4fb00] mmco: unref short failure
[h264 @ 0x55d41e94a500] mmco: unref short failure
[h264 @ 0x559f8bbda100] mmco: unref short failure
[h264 @ 0x55d40c804b00] mmco: unref short failure
[h264 @ 0x55d40c804b00] mmco: unref short failure
 16%|█▌        | 226/1455 [2:21:07<15:29:25, 45.37s/it] 16%|█▌        | 227/1455 [2:21:15<11:43:41, 34.38s/it][h264 @ 0x559f59f64dc0] mmco: unref short failure
[h264 @ 0x555f264d0f40] mmco: unref short failure
[h264 @ 0x555f264d0f40] mmco: unref short failure
 16%|█▌        | 228/1455 [2:21:37<10:22:34, 30.44s/it][h264 @ 0x555f2996d140] mmco: unref short failure
[h264 @ 0x555f2996d140] mmco: unref short failure
[h264 @ 0x55929decaa40] mmco: unref short failure
[h264 @ 0x55929decaa40] mmco: unref short failure
 16%|█▌        | 229/1455 [2:21:46<8:10:01, 23.98s/it] [h264 @ 0x555f2656c380] mmco: unref short failure
[h264 @ 0x555f2996d140] mmco: unref short failure
 16%|█▌        | 230/1455 [2:21:54<6:34:44, 19.33s/it][h264 @ 0x55929b54fd00] mmco: unref short failure
[h264 @ 0x55929b54fd00] mmco: unref short failure
 16%|█▌        | 231/1455 [2:22:02<5:27:11, 16.04s/it][h264 @ 0x559291621e00] mmco: unref short failure
[h264 @ 0x559291621e00] mmco: unref short failure
[h264 @ 0x555f266fac80] mmco: unref short failure
09/17/2024 02:02:47 - INFO - __main__ -   current idx rJOs530YXYo.53 from finetune_area returns wrong image/video, use 32716 instead.
[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x555f266b0840] mmco: unref short failure
[h264 @ 0x555f266b0840] mmco: unref short failure
[h264 @ 0x555f267745c0] mmco: unref short failure
[h264 @ 0x555f267745c0] mmco: unref short failure
[h264 @ 0x555f268eef80] mmco: unref short failure
[h264 @ 0x555f268eef80] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x55928cc41240] mmco: unref short failure
[h264 @ 0x55928cc41240] mmco: unref short failure
[h264 @ 0x55d42d3a5d80] mmco: unref short failure
[h264 @ 0x559f610f0c80] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
[h264 @ 0x559f65a5a080] mmco: unref short failure
[h264 @ 0x559f81a9d300] mmco: unref short failure
[h264 @ 0x555f266def80] mmco: unref short failure
[h264 @ 0x555f266def80] mmco: unref short failure
[h264 @ 0x55d404adf100] mmco: unref short failure
[h264 @ 0x55d404adf100] mmco: unref short failure
09/17/2024 02:04:21 - INFO - __main__ -   current idx 37nPbMq5QY0.46 from finetune_area returns wrong image/video, use 5439 instead.
[h264 @ 0x559f7ff42f00] mmco: unref short failure
[h264 @ 0x559f7ff42f00] mmco: unref short failure
[h264 @ 0x55d425e29540] mmco: unref short failure
[h264 @ 0x559f6d9f2ec0] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x5592a2eebfc0] mmco: unref short failure
[h264 @ 0x5592a2eebfc0] mmco: unref short failure
[h264 @ 0x559286e974c0] mmco: unref short failure
[h264 @ 0x559286e974c0] mmco: unref short failure
[h264 @ 0x55d424b2df00] mmco: unref short failure
[h264 @ 0x55d424b2df00] mmco: unref short failure
[h264 @ 0x55d424b2df00] mmco: unref short failure
[h264 @ 0x555f25c17b40] mmco: unref short failure
[h264 @ 0x559f82a8fc00] mmco: unref short failure
[h264 @ 0x559f82a8fc00] mmco: unref short failure
[h264 @ 0x555f26219500] mmco: unref short failure
[h264 @ 0x555f26219500] mmco: unref short failure
 16%|█▌        | 232/1455 [2:25:22<24:09:05, 71.09s/it][h264 @ 0x55929046f280] mmco: unref short failure
[h264 @ 0x55929046f280] mmco: unref short failure
[h264 @ 0x55929046f280] mmco: unref short failure
[h264 @ 0x55929046f280] mmco: unref short failure
[h264 @ 0x555f25bd6dc0] mmco: unref short failure
09/17/2024 02:05:47 - INFO - __main__ -   current idx EboJj8xv0Wo.48 from finetune_area returns wrong image/video, use 95181 instead.
[h264 @ 0x559f59fd8540] mmco: unref short failure
[h264 @ 0x55929b54fd00] mmco: unref short failure
[h264 @ 0x55d42169d0c0] mmco: unref short failure
[h264 @ 0x55d42169d0c0] mmco: unref short failure
[h264 @ 0x559f59e12f00] mmco: unref short failure
 16%|█▌        | 233/1455 [2:25:38<18:30:20, 54.52s/it][h264 @ 0x559286e974c0] mmco: unref short failure
09/17/2024 02:06:06 - INFO - __main__ -   current idx JyHu6qXDg1E.525 from finetune_area returns wrong image/video, use 108037 instead.
 16%|█▌        | 234/1455 [2:25:53<14:30:03, 42.76s/it][h264 @ 0x559f610f0c80] mmco: unref short failure
[h264 @ 0x559f610f0c80] mmco: unref short failure
[h264 @ 0x555f25c17b40] mmco: unref short failure
 16%|█▌        | 235/1455 [2:26:02<11:02:54, 32.60s/it][h264 @ 0x555f371ece40] mmco: unref short failure
[h264 @ 0x555f371ece40] mmco: unref short failure
[h264 @ 0x5592a2eebfc0] mmco: unref short failure
[h264 @ 0x5592a2eebfc0] mmco: unref short failure
[h264 @ 0x55927dfa9840] mmco: unref short failure
[h264 @ 0x55927dfa9840] mmco: unref short failure
[h264 @ 0x55d40afe5bc0] mmco: unref short failure
[h264 @ 0x55d40afe5bc0] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f8122bb40] mmco: unref short failure
[h264 @ 0x559f65cd3880] mmco: unref short failure
[h264 @ 0x559f6d9f2ec0] mmco: unref short failure
[h264 @ 0x559f6d9f2ec0] mmco: unref short failure
[h264 @ 0x55927d668080] mmco: unref short failure
[h264 @ 0x55927d668080] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
[h264 @ 0x55d40dcdfbc0] mmco: unref short failure
 16%|█▌        | 236/1455 [2:26:37<11:16:47, 33.31s/it] 16%|█▋        | 237/1455 [2:26:46<8:50:13, 26.12s/it] [h264 @ 0x559f5a055e00] mmco: unref short failure
[h264 @ 0x559f5a055e00] mmco: unref short failure
[h264 @ 0x555f52d631c0] mmco: unref short failure
 16%|█▋        | 238/1455 [2:26:56<7:08:55, 21.15s/it] 16%|█▋        | 239/1455 [2:27:04<5:51:37, 17.35s/it][h264 @ 0x55927df82000] mmco: unref short failure
[h264 @ 0x55927df82000] mmco: unref short failure
09/17/2024 02:07:32 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 52857 instead.
[h264 @ 0x555f453527c0] mmco: unref short failure
[h264 @ 0x555f453527c0] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
09/17/2024 02:07:38 - INFO - __main__ -   current idx GuiTdPE-2G8.5 from finetune_area returns wrong image/video, use 92247 instead.
[h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x55927dfca4c0] mmco: unref short failure
[h264 @ 0x555f2671fbc0] mmco: unref short failure
[h264 @ 0x555f2671fbc0] mmco: unref short failure
[h264 @ 0x5592a9769bc0] mmco: unref short failure
[h264 @ 0x5592a9769bc0] mmco: unref short failure
[h264 @ 0x559f59d66940] mmco: unref short failure
[h264 @ 0x555f4bdd1800] mmco: unref short failure
[h264 @ 0x559284a54ec0] mmco: unref short failure
[h264 @ 0x559284a54ec0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x555f2661a100] mmco: unref short failure
[h264 @ 0x555f2661a100] mmco: unref short failure
[h264 @ 0x55927dfbbec0] mmco: unref short failure
[h264 @ 0x55927dfbbec0] mmco: unref short failure
09/17/2024 02:08:37 - INFO - __main__ -   current idx 0Hu1HI7Jvzs.159 from finetune_area returns wrong image/video, use 75539 instead.
[h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x55d43adf15c0] mmco: unref short failure
[h264 @ 0x55d43adf15c0] mmco: unref short failure
[h264 @ 0x555f2b42d380] mmco: unref short failure
[h264 @ 0x559f837f6800] mmco: unref short failure
[h264 @ 0x559f837f6800] mmco: unref short failure
[h264 @ 0x55927dfd8f40] mmco: unref short failure
[h264 @ 0x559f59cc7c40] mmco: unref short failure
[h264 @ 0x559f59cc7c40] mmco: unref short failure
[h264 @ 0x55927e009840] mmco: unref short failure
[h264 @ 0x555f26651ac0] mmco: unref short failure
[h264 @ 0x555f26651ac0] mmco: unref short failure
[h264 @ 0x555f3e267380] mmco: unref short failure
[h264 @ 0x555f3e267380] mmco: unref short failure
[h264 @ 0x555f37a4b980] mmco: unref short failure
[h264 @ 0x55d42e451580] mmco: unref short failure
[h264 @ 0x55d42e451580] mmco: unref short failure
[h264 @ 0x555f265fbc80] mmco: unref short failure
[h264 @ 0x555f265fbc80] mmco: unref short failure
09/17/2024 02:09:23 - INFO - __main__ -   current idx 1wKPYAWLNkA.112 from finetune_area returns wrong image/video, use 7652 instead.
[h264 @ 0x555f26772280] mmco: unref short failure
09/17/2024 02:09:28 - INFO - __main__ -   current idx bgTXI7WKWoY.26 from finetune_area returns wrong image/video, use 87828 instead.
09/17/2024 02:09:30 - INFO - __main__ -   current idx 9Dbcu8BMaBw.7 from finetune_area returns wrong image/video, use 41368 instead.
[h264 @ 0x559f5b581300] mmco: unref short failure
[h264 @ 0x5592ae6e9200] mmco: unref short failure
[h264 @ 0x5592ae6e9200] mmco: unref short failure
[h264 @ 0x5592ae6e9200] mmco: unref short failure
[h264 @ 0x5592ae6e9200] mmco: unref short failure
[h264 @ 0x55d42bc6ac40] mmco: unref short failure
[h264 @ 0x55d42bc6ac40] mmco: unref short failure
[h264 @ 0x55d42bc6ac40] mmco: unref short failure
[h264 @ 0x55d42bc6ac40] mmco: unref short failure
[h264 @ 0x55927fb81980] mmco: unref short failure
[h264 @ 0x55927fb81980] mmco: unref short failure
[h264 @ 0x559f59d1bc40] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x55927e293840] mmco: unref short failure
[h264 @ 0x555f53017700] mmco: unref short failure
[h264 @ 0x555f53017700] mmco: unref short failure
[h264 @ 0x555f53017700] mmco: unref short failure
[h264 @ 0x555f53017700] mmco: unref short failure
[h264 @ 0x55d40c800ac0] mmco: unref short failure
[h264 @ 0x559f59d66940] mmco: unref short failure
[h264 @ 0x559f59d66940] mmco: unref short failure
[h264 @ 0x55927df3ff80] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x55927dfdd4c0] mmco: unref short failure
[h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x55927df82000] mmco: unref short failure
[h264 @ 0x55927df82000] mmco: unref short failure
[h264 @ 0x555f266df500] mmco: unref short failure
[h264 @ 0x555f266df500] mmco: unref short failure
 16%|█▋        | 240/1455 [2:30:19<23:50:15, 70.63s/it][h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x555f541678c0] mmco: unref short failure
[h264 @ 0x559f67153e40] mmco: unref short failure
[h264 @ 0x55d42ce35b00] mmco: unref short failure
[h264 @ 0x55d42ce35b00] mmco: unref short failure
 17%|█▋        | 241/1455 [2:30:33<18:05:54, 53.67s/it][h264 @ 0x5592a2eebfc0] mmco: unref short failure
[h264 @ 0x555f453527c0] mmco: unref short failure
[h264 @ 0x555f453527c0] mmco: unref short failure
[h264 @ 0x5592a2eebfc0] mmco: unref short failure
 17%|█▋        | 242/1455 [2:30:51<14:24:13, 42.75s/it][h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x555f26579700] mmco: unref short failure
 17%|█▋        | 243/1455 [2:31:05<11:33:33, 34.33s/it][h264 @ 0x55927dec2000] mmco: unref short failure
[h264 @ 0x55927dec2000] mmco: unref short failure
[h264 @ 0x55d4310f4380] mmco: unref short failure
[h264 @ 0x55d4310f4380] mmco: unref short failure
[h264 @ 0x555f265f9480] mmco: unref short failure
[h264 @ 0x555f265f9480] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x555f4bdd1800] mmco: unref short failure
[h264 @ 0x555f4bdd1800] mmco: unref short failure
[h264 @ 0x555f4bdd1800] mmco: unref short failure
[h264 @ 0x555f4bdd1800] mmco: unref short failure
[h264 @ 0x55d4350afc80] mmco: unref short failure
[h264 @ 0x55d4350afc80] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x55929dabbf40] mmco: unref short failure
[h264 @ 0x55929dabbf40] mmco: unref short failure
[h264 @ 0x55929dabbf40] mmco: unref short failure
[h264 @ 0x55929dabbf40] mmco: unref short failure
[h264 @ 0x55d419521500] mmco: unref short failure
[h264 @ 0x55d420f520c0] mmco: unref short failure
[h264 @ 0x55d420f520c0] mmco: unref short failure
[h264 @ 0x55d42ce35b00] mmco: unref short failure
[h264 @ 0x55d42ce35b00] mmco: unref short failure
[h264 @ 0x55927df33e40] mmco: unref short failure
 17%|█▋        | 244/1455 [2:31:51<12:43:06, 37.81s/it][h264 @ 0x555f3e267380] mmco: unref short failure
[h264 @ 0x555f3e267380] mmco: unref short failure
 17%|█▋        | 245/1455 [2:32:00<9:45:30, 29.03s/it]  17%|█▋        | 246/1455 [2:32:10<7:48:31, 23.25s/it][h264 @ 0x55d434128a40] mmco: unref short failure
 17%|█▋        | 247/1455 [2:32:19<6:23:07, 19.03s/it][h264 @ 0x55927dfbbec0] mmco: unref short failure
[h264 @ 0x55927df8ed40] mmco: unref short failure
[h264 @ 0x55927df8ed40] mmco: unref short failure
[h264 @ 0x55927df8ed40] mmco: unref short failure
[h264 @ 0x55927df8ed40] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x555f26769ac0] mmco: unref short failure
[h264 @ 0x555f26769ac0] mmco: unref short failure
[h264 @ 0x55927df8ed40] mmco: unref short failure
[h264 @ 0x55d42c966940] mmco: unref short failure
[h264 @ 0x55d42c966940] mmco: unref short failure
[h264 @ 0x55d42c966940] mmco: unref short failure
[h264 @ 0x55d42c966940] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x55d4332c6a80] mmco: unref short failure
[h264 @ 0x55d4332c6a80] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x5592921e6680] mmco: unref short failure
[h264 @ 0x5592921e6680] mmco: unref short failure
[h264 @ 0x5592a9769bc0] mmco: unref short failure
[h264 @ 0x5592a9769bc0] mmco: unref short failure
[h264 @ 0x55d41b398a80] mmco: unref short failure
[h264 @ 0x55d41b398a80] mmco: unref short failure
[h264 @ 0x555f2651f880] mmco: unref short failure
[h264 @ 0x555f2651f880] mmco: unref short failure
[h264 @ 0x559f59fe0200] mmco: unref short failure
[h264 @ 0x55d426477a40] mmco: unref short failure
[h264 @ 0x55d426477a40] mmco: unref short failure
[h264 @ 0x55d426477a40] mmco: unref short failure
[h264 @ 0x55d426477a40] mmco: unref short failure
[h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x55927dfd8380] mmco: unref short failure
[h264 @ 0x55927dfd8380] mmco: unref short failure
09/17/2024 02:13:50 - INFO - __main__ -   current idx DWhC_3SVyTc.13 from finetune_area returns wrong image/video, use 130772 instead.
[h264 @ 0x5592921e6680] mmco: unref short failure
[h264 @ 0x55929e334000] mmco: unref short failure
[h264 @ 0x555f2671fbc0] mmco: unref short failure
[h264 @ 0x555f2671fbc0] mmco: unref short failure
[h264 @ 0x55927dfd8380] mmco: unref short failure
[h264 @ 0x55d426477a40] mmco: unref short failure
[h264 @ 0x555f28ccc780] mmco: unref short failure
09/17/2024 02:14:12 - INFO - __main__ -   current idx sisprxhsc6I.5 from finetune_area returns wrong image/video, use 54623 instead.
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x559f59d76380] mmco: unref short failure
[h264 @ 0x559f59d76380] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x559f7453f4c0] mmco: unref short failure
[h264 @ 0x555f46b2ec80] mmco: unref short failure
[h264 @ 0x555f46b2ec80] mmco: unref short failure
[h264 @ 0x555f5a714540] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559f59d76380] mmco: unref short failure
[h264 @ 0x555f2667b4c0] mmco: unref short failure
[h264 @ 0x555f2667b4c0] mmco: unref short failure
[h264 @ 0x55d433f78bc0] mmco: unref short failure
[h264 @ 0x55d433f78bc0] mmco: unref short failure
[h264 @ 0x555f26f01a00] mmco: unref short failure
[h264 @ 0x555f26f01a00] mmco: unref short failure
[h264 @ 0x555f4c0b0700] mmco: unref short failure
[h264 @ 0x555f4c0b0700] mmco: unref short failure
[h264 @ 0x55d403479240] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x55929e334000] mmco: unref short failure
[h264 @ 0x55929e334000] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x55d42dc2a6c0] mmco: unref short failure
[h264 @ 0x55d42dc2a6c0] mmco: unref short failure
 17%|█▋        | 248/1455 [2:35:18<22:31:41, 67.19s/it][h264 @ 0x555f28ccc780] mmco: unref short failure
[h264 @ 0x555f28ccc780] mmco: unref short failure
[h264 @ 0x55d408789480] mmco: unref short failure
[h264 @ 0x55d408789480] mmco: unref short failure
[h264 @ 0x559f5e0ab840] mmco: unref short failure
[h264 @ 0x559f5e0ab840] mmco: unref short failure
[h264 @ 0x55d4230d8740] mmco: unref short failure
[h264 @ 0x55d4230d8740] mmco: unref short failure
 17%|█▋        | 249/1455 [2:35:32<17:05:28, 51.02s/it]09/17/2024 02:15:53 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:15:53 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559285d7e640] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
[h264 @ 0x559f59fd97c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55927e058280] mmco: unref short failure
[h264 @ 0x55927e058280] mmco: unref short failure
[h264 @ 0x55928173e040] mmco: unref short failure
[h264 @ 0x55928173e040] mmco: unref short failure
[h264 @ 0x55d433f50940] mmco: unref short failure
[h264 @ 0x55d433f50940] mmco: unref short failure
09/17/2024 02:17:35 - INFO - __main__ -   current idx OTXYBNGzWpQ.110 from finetune_area returns wrong image/video, use 43379 instead.
[h264 @ 0x555f264d4080] mmco: unref short failure
[h264 @ 0x555f2eee4a40] mmco: unref short failure
[h264 @ 0x555f2eee4a40] mmco: unref short failure
[h264 @ 0x559f634a8740] mmco: unref short failure
[h264 @ 0x559f634a8740] mmco: unref short failure
[h264 @ 0x55929e334000] mmco: unref short failure
[h264 @ 0x559f79233ec0] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure
09/17/2024 02:18:10 - INFO - __main__ -   current idx -A-7FmorgRU.15 from finetune_area returns wrong image/video, use 106860 instead.
[h264 @ 0x559f7ad8e900] mmco: unref short failure
[h264 @ 0x559f7ad8e900] mmco: unref short failure
[h264 @ 0x559f7ad8e900] mmco: unref short failure
[h264 @ 0x559f7ad8e900] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x559f59eaad80] mmco: unref short failure

  0%|          | 1/221 [00:00<03:03,  1.20it/s][A
  1%|          | 2/221 [00:01<02:25,  1.50it/s][A
  1%|▏         | 3/221 [00:01<01:50,  1.98it/s][A
  2%|▏         | 4/221 [00:01<01:22,  2.64it/s][A
  2%|▏         | 5/221 [00:02<01:11,  3.02it/s][A
  3%|▎         | 6/221 [00:02<01:04,  3.31it/s][A
  3%|▎         | 7/221 [00:02<00:59,  3.59it/s][A
  4%|▎         | 8/221 [00:03<01:08,  3.11it/s][A
  4%|▍         | 9/221 [00:03<01:10,  3.02it/s][A
  5%|▍         | 10/221 [00:03<01:23,  2.51it/s][A
  5%|▍         | 11/221 [00:04<01:12,  2.90it/s][A
  5%|▌         | 12/221 [00:04<01:31,  2.29it/s][A
  6%|▌         | 13/221 [00:05<01:42,  2.03it/s][A
  6%|▋         | 14/221 [00:06<01:52,  1.84it/s][A[h264 @ 0x555f392eb200] mmco: unref short failure

  7%|▋         | 15/221 [00:06<01:30,  2.28it/s][A
  7%|▋         | 16/221 [00:06<01:39,  2.05it/s][A
  8%|▊         | 17/221 [00:07<02:06,  1.61it/s][A
  8%|▊         | 18/221 [00:08<01:53,  1.79it/s][A
  9%|▊         | 19/221 [00:08<01:34,  2.15it/s][A
  9%|▉         | 20/221 [00:08<01:24,  2.39it/s][A
 10%|▉         | 21/221 [00:09<01:14,  2.69it/s][A
 10%|▉         | 22/221 [00:09<01:15,  2.63it/s][A
 10%|█         | 23/221 [00:09<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:09<00:51,  3.82it/s][A
 11%|█▏        | 25/221 [00:09<00:47,  4.10it/s][A
 12%|█▏        | 26/221 [00:10<01:04,  3.00it/s][A
 12%|█▏        | 27/221 [00:10<00:56,  3.42it/s][A
 13%|█▎        | 28/221 [00:11<01:29,  2.16it/s][A[h264 @ 0x55d416c1ad00] mmco: unref short failure

 13%|█▎        | 29/221 [00:11<01:27,  2.20it/s][A
 14%|█▎        | 30/221 [00:12<01:17,  2.48it/s][A
 14%|█▍        | 31/221 [00:12<01:12,  2.61it/s][A
 14%|█▍        | 32/221 [00:12<01:02,  3.04it/s][A
 15%|█▍        | 33/221 [00:13<01:05,  2.88it/s][A
 15%|█▌        | 34/221 [00:13<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:13<00:55,  3.33it/s][A
 16%|█▋        | 36/221 [00:14<01:04,  2.86it/s][A
 17%|█▋        | 37/221 [00:14<01:17,  2.37it/s][A
 17%|█▋        | 38/221 [00:15<01:22,  2.23it/s][A
 18%|█▊        | 39/221 [00:15<01:12,  2.53it/s][A
 18%|█▊        | 40/221 [00:15<01:16,  2.36it/s][A
 19%|█▊        | 41/221 [00:16<01:01,  2.91it/s][A
 19%|█▉        | 42/221 [00:16<01:07,  2.64it/s][A
 19%|█▉        | 43/221 [00:16<00:59,  3.01it/s][A
 20%|█▉        | 44/221 [00:16<00:48,  3.64it/s][A
 20%|██        | 45/221 [00:17<01:08,  2.56it/s][A
 21%|██        | 46/221 [00:18<01:07,  2.59it/s][A
 21%|██▏       | 47/221 [00:18<01:11,  2.43it/s][A
 22%|██▏       | 48/221 [00:18<00:57,  3.02it/s][A
 22%|██▏       | 49/221 [00:19<01:20,  2.15it/s][A
 23%|██▎       | 50/221 [00:19<01:14,  2.29it/s][A
 23%|██▎       | 51/221 [00:19<00:58,  2.89it/s][A
 24%|██▎       | 52/221 [00:20<00:50,  3.34it/s][A
 24%|██▍       | 53/221 [00:20<00:43,  3.82it/s][A
 24%|██▍       | 54/221 [00:21<01:34,  1.77it/s][A
 25%|██▍       | 55/221 [00:21<01:28,  1.88it/s][A
 25%|██▌       | 56/221 [00:22<01:18,  2.11it/s][A
 26%|██▌       | 57/221 [00:22<01:05,  2.52it/s][A
 26%|██▌       | 58/221 [00:22<00:56,  2.89it/s][A
 27%|██▋       | 59/221 [00:23<00:51,  3.13it/s][A[h264 @ 0x555f3de606c0] mmco: unref short failure
[h264 @ 0x555f3de606c0] mmco: unref short failure
[h264 @ 0x555f3de606c0] mmco: unref short failure
[h264 @ 0x555f3de606c0] mmco: unref short failure

 27%|██▋       | 60/221 [00:24<01:24,  1.90it/s][A
 28%|██▊       | 61/221 [00:24<01:12,  2.22it/s][A
 28%|██▊       | 62/221 [00:24<01:06,  2.41it/s][A
 29%|██▊       | 63/221 [00:24<00:59,  2.66it/s][A
 29%|██▉       | 64/221 [00:25<00:52,  2.99it/s][A
 29%|██▉       | 65/221 [00:25<00:51,  3.00it/s][A
 30%|██▉       | 66/221 [00:25<00:55,  2.81it/s][A[h264 @ 0x55927dfd9480] mmco: unref short failure

 30%|███       | 67/221 [00:26<01:11,  2.14it/s][A
 31%|███       | 68/221 [00:26<00:56,  2.69it/s][A[h264 @ 0x559f67214380] mmco: unref short failure

 31%|███       | 69/221 [00:27<01:12,  2.09it/s][A
 32%|███▏      | 70/221 [00:27<01:05,  2.32it/s][A
 32%|███▏      | 71/221 [00:28<01:04,  2.33it/s][A
 33%|███▎      | 72/221 [00:28<00:59,  2.51it/s][A
 33%|███▎      | 73/221 [00:29<01:01,  2.42it/s][A
 33%|███▎      | 74/221 [00:29<00:49,  2.95it/s][A
 34%|███▍      | 75/221 [00:29<00:50,  2.88it/s][A
 34%|███▍      | 76/221 [00:29<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:29<00:39,  3.69it/s][A
 35%|███▌      | 78/221 [00:30<00:46,  3.09it/s][A
 36%|███▌      | 79/221 [00:31<01:03,  2.25it/s][A
 36%|███▌      | 80/221 [00:31<00:54,  2.57it/s][A
 37%|███▋      | 81/221 [00:31<00:49,  2.85it/s][A
 37%|███▋      | 82/221 [00:32<01:05,  2.13it/s][A
 38%|███▊      | 83/221 [00:32<01:04,  2.15it/s][A
 38%|███▊      | 84/221 [00:33<00:57,  2.37it/s][A
 38%|███▊      | 85/221 [00:33<00:49,  2.74it/s][A
 39%|███▉      | 86/221 [00:33<00:46,  2.93it/s][A
 39%|███▉      | 87/221 [00:34<01:01,  2.17it/s][A[h264 @ 0x555f2678ce80] mmco: unref short failure
[h264 @ 0x555f2678ce80] mmco: unref short failure

 40%|███▉      | 88/221 [00:35<01:09,  1.90it/s][A
 40%|████      | 89/221 [00:35<01:04,  2.04it/s][A
 41%|████      | 90/221 [00:35<00:53,  2.46it/s][A
 41%|████      | 91/221 [00:35<00:45,  2.85it/s][A
 42%|████▏     | 92/221 [00:36<00:42,  3.00it/s][A
 42%|████▏     | 93/221 [00:36<00:45,  2.81it/s][A
 43%|████▎     | 94/221 [00:36<00:41,  3.09it/s][A
 43%|████▎     | 95/221 [00:37<00:41,  3.01it/s][A
 43%|████▎     | 96/221 [00:37<00:38,  3.29it/s][A
 44%|████▍     | 97/221 [00:37<00:34,  3.55it/s][A
 44%|████▍     | 98/221 [00:37<00:33,  3.72it/s][A
 45%|████▍     | 99/221 [00:38<00:27,  4.44it/s][A
 45%|████▌     | 100/221 [00:38<00:27,  4.40it/s][A
 46%|████▌     | 101/221 [00:38<00:26,  4.50it/s][A
 46%|████▌     | 102/221 [00:38<00:28,  4.15it/s][A
 47%|████▋     | 103/221 [00:39<00:26,  4.37it/s][A
 47%|████▋     | 104/221 [00:39<00:23,  4.99it/s][A
 48%|████▊     | 105/221 [00:39<00:23,  4.87it/s][A
 48%|████▊     | 106/221 [00:40<00:52,  2.21it/s][A
 48%|████▊     | 107/221 [00:40<00:41,  2.74it/s][A
 49%|████▉     | 108/221 [00:40<00:40,  2.77it/s][A[h264 @ 0x55d40b5e19c0] mmco: unref short failure
[h264 @ 0x55d40b5e19c0] mmco: unref short failure
[h264 @ 0x555f3b9d1d00] mmco: unref short failure
[h264 @ 0x555f3b9d1d00] mmco: unref short failure

 49%|████▉     | 109/221 [00:41<00:43,  2.57it/s][A[h264 @ 0x55d41faa0400] mmco: unref short failure
[h264 @ 0x55d41faa0400] mmco: unref short failure
[h264 @ 0x55d41faa0400] mmco: unref short failure
[h264 @ 0x55d41faa0400] mmco: unref short failure

 50%|████▉     | 110/221 [00:41<00:49,  2.23it/s][A
 50%|█████     | 111/221 [00:42<00:52,  2.08it/s][A
 51%|█████     | 112/221 [00:42<00:46,  2.35it/s][A09/17/2024 02:18:58 - INFO - __main__ -   current idx ZJ3l8xjgJQw.15 from finetune_area returns wrong image/video, use 136910 instead.

 51%|█████     | 113/221 [00:43<00:44,  2.41it/s][A
 52%|█████▏    | 114/221 [00:43<00:35,  3.05it/s][A
 52%|█████▏    | 115/221 [00:43<00:27,  3.80it/s][A
 52%|█████▏    | 116/221 [00:44<00:51,  2.04it/s][A
 53%|█████▎    | 117/221 [00:44<00:48,  2.13it/s][A
 53%|█████▎    | 118/221 [00:45<00:44,  2.30it/s][A
 54%|█████▍    | 119/221 [00:45<00:44,  2.29it/s][A
 54%|█████▍    | 120/221 [00:46<00:45,  2.22it/s][A
 55%|█████▌    | 122/221 [00:46<00:33,  2.99it/s][A
 56%|█████▌    | 123/221 [00:46<00:29,  3.27it/s][A
 56%|█████▌    | 124/221 [00:47<00:29,  3.28it/s][A
 57%|█████▋    | 125/221 [00:47<00:33,  2.86it/s][A
 57%|█████▋    | 126/221 [00:47<00:32,  2.95it/s][A
 57%|█████▋    | 127/221 [00:48<00:36,  2.58it/s][A
 58%|█████▊    | 128/221 [00:48<00:39,  2.37it/s][A
 58%|█████▊    | 129/221 [00:49<00:32,  2.83it/s][A
 59%|█████▉    | 130/221 [00:49<00:32,  2.80it/s][A
 59%|█████▉    | 131/221 [00:49<00:29,  3.02it/s][A
 60%|█████▉    | 132/221 [00:49<00:24,  3.57it/s][A
 60%|██████    | 133/221 [00:50<00:31,  2.81it/s][A
 61%|██████    | 134/221 [00:50<00:27,  3.15it/s][A
 61%|██████    | 135/221 [00:50<00:25,  3.32it/s][A[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x5592987a0dc0] mmco: unref short failure

 62%|██████▏   | 136/221 [00:51<00:28,  2.98it/s][A[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x5592953e4ac0] mmco: unref short failure

 62%|██████▏   | 137/221 [00:51<00:25,  3.32it/s][A
 62%|██████▏   | 138/221 [00:52<00:30,  2.76it/s][A
 63%|██████▎   | 139/221 [00:52<00:34,  2.40it/s][A
 63%|██████▎   | 140/221 [00:52<00:31,  2.60it/s][A
 64%|██████▍   | 141/221 [00:53<00:27,  2.94it/s][A
 64%|██████▍   | 142/221 [00:53<00:26,  2.97it/s][A
 65%|██████▍   | 143/221 [00:53<00:24,  3.20it/s][A
 65%|██████▌   | 144/221 [00:54<00:24,  3.17it/s][A
 66%|██████▌   | 145/221 [00:54<00:20,  3.67it/s][A
 66%|██████▌   | 146/221 [00:54<00:19,  3.84it/s][A
 67%|██████▋   | 147/221 [00:54<00:20,  3.58it/s][A
 67%|██████▋   | 148/221 [00:55<00:22,  3.21it/s][A
 67%|██████▋   | 149/221 [00:55<00:20,  3.45it/s][A
 68%|██████▊   | 150/221 [00:55<00:20,  3.40it/s][A
 68%|██████▊   | 151/221 [00:56<00:27,  2.53it/s][A
 69%|██████▉   | 152/221 [00:57<00:49,  1.40it/s][A
 69%|██████▉   | 153/221 [00:58<00:44,  1.53it/s][A
 70%|██████▉   | 154/221 [00:58<00:35,  1.86it/s][A
 70%|███████   | 155/221 [00:58<00:29,  2.24it/s][A
 71%|███████   | 156/221 [00:59<00:25,  2.51it/s][A
 71%|███████   | 157/221 [00:59<00:29,  2.16it/s][A
 71%|███████▏  | 158/221 [01:00<00:27,  2.29it/s][h264 @ 0x55d41b169f80] mmco: unref short failure
[A
 72%|███████▏  | 159/221 [01:00<00:26,  2.36it/s][A
 72%|███████▏  | 160/221 [01:00<00:26,  2.33it/s][A
 73%|███████▎  | 161/221 [01:01<00:21,  2.85it/s][A
 73%|███████▎  | 162/221 [01:01<00:23,  2.50it/s][A
 74%|███████▍  | 163/221 [01:01<00:21,  2.68it/s][A
 74%|███████▍  | 164/221 [01:02<00:24,  2.28it/s][A
 75%|███████▍  | 165/221 [01:02<00:19,  2.82it/s][A[h264 @ 0x559f5a0d8000] mmco: unref short failure
[h264 @ 0x559f5a0d8000] mmco: unref short failure

 75%|███████▌  | 166/221 [01:03<00:24,  2.23it/s][A
 76%|███████▌  | 167/221 [01:03<00:20,  2.60it/s][A
 76%|███████▌  | 168/221 [01:04<00:24,  2.21it/s][A
 76%|███████▋  | 169/221 [01:04<00:19,  2.62it/s][A
 77%|███████▋  | 170/221 [01:04<00:19,  2.64it/s][A
 77%|███████▋  | 171/221 [01:05<00:22,  2.23it/s][A
 78%|███████▊  | 172/221 [01:05<00:19,  2.54it/s][A
 78%|███████▊  | 173/221 [01:06<00:19,  2.43it/s][A
 79%|███████▊  | 174/221 [01:06<00:17,  2.62it/s][A
 79%|███████▉  | 175/221 [01:06<00:18,  2.53it/s][A
 80%|███████▉  | 176/221 [01:07<00:16,  2.75it/s][A
 80%|████████  | 177/221 [01:07<00:14,  3.08it/s][A
 81%|████████  | 178/221 [01:07<00:13,  3.27it/s][A
 81%|████████  | 179/221 [01:08<00:14,  2.94it/s][A
 81%|████████▏ | 180/221 [01:08<00:11,  3.51it/s][A
 82%|████████▏ | 181/221 [01:08<00:12,  3.21it/s][A
 82%|████████▏ | 182/221 [01:08<00:10,  3.61it/s][A
 83%|████████▎ | 183/221 [01:09<00:13,  2.87it/s][A
 83%|████████▎ | 184/221 [01:09<00:14,  2.61it/s][A
 84%|████████▎ | 185/221 [01:09<00:10,  3.29it/s][A
 84%|████████▍ | 186/221 [01:10<00:12,  2.77it/s][A
 85%|████████▍ | 187/221 [01:10<00:10,  3.09it/s][A
 85%|████████▌ | 188/221 [01:10<00:10,  3.14it/s][A
 86%|████████▌ | 189/221 [01:11<00:11,  2.90it/s][A
 86%|████████▌ | 190/221 [01:11<00:12,  2.43it/s][A[h264 @ 0x5592987a0dc0] mmco: unref short failure
[h264 @ 0x5592987a0dc0] mmco: unref short failure

 86%|████████▋ | 191/221 [01:12<00:10,  2.86it/s][A
 87%|████████▋ | 192/221 [01:12<00:09,  3.12it/s][A
 87%|████████▋ | 193/221 [01:12<00:07,  3.83it/s][A
 88%|████████▊ | 194/221 [01:13<00:13,  2.03it/s][A[h264 @ 0x559f59f71fc0] mmco: unref short failure

 88%|████████▊ | 195/221 [01:13<00:12,  2.11it/s][A
 89%|████████▊ | 196/221 [01:14<00:13,  1.81it/s][A
 89%|████████▉ | 197/221 [01:14<00:10,  2.23it/s][A
 90%|████████▉ | 198/221 [01:15<00:08,  2.61it/s][A
 90%|█████████ | 199/221 [01:15<00:07,  3.11it/s][A
 90%|█████████ | 200/221 [01:15<00:07,  2.96it/s][A
 91%|█████████ | 201/221 [01:15<00:06,  3.09it/s][A
 91%|█████████▏| 202/221 [01:16<00:06,  2.82it/s][A
 92%|█████████▏| 203/221 [01:16<00:05,  3.10it/s][A
 92%|█████████▏| 204/221 [01:16<00:05,  3.07it/s][A
 93%|█████████▎| 205/221 [01:17<00:04,  3.48it/s][A
 93%|█████████▎| 206/221 [01:17<00:06,  2.36it/s][A
 94%|█████████▎| 207/221 [01:18<00:05,  2.75it/s][A
 94%|█████████▍| 208/221 [01:18<00:04,  3.24it/s][A
 95%|█████████▍| 209/221 [01:18<00:03,  3.12it/s][A
 95%|█████████▌| 210/221 [01:18<00:02,  3.78it/s][A
 95%|█████████▌| 211/221 [01:19<00:03,  3.05it/s][A
 96%|█████████▌| 212/221 [01:19<00:02,  3.23it/s][A
 96%|█████████▋| 213/221 [01:19<00:02,  3.31it/s][A
 97%|█████████▋| 214/221 [01:20<00:02,  3.26it/s][A
 97%|█████████▋| 215/221 [01:20<00:02,  2.94it/s][A
 98%|█████████▊| 216/221 [01:20<00:01,  2.74it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  2.49it/s][A
 99%|█████████▊| 218/221 [01:21<00:01,  2.56it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.83it/s][A[h264 @ 0x55d40ad040c0] mmco: unref short failure
[h264 @ 0x55d40ad040c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:24<00:00,  1.13it/s][A
100%|██████████| 221/221 [01:24<00:00,  1.41it/s][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]
[h264 @ 0x5592811c59c0] mmco: unref short failure
[h264 @ 0x5592811c59c0] mmco: unref short failure
[h264 @ 0x555f267745c0] mmco: unref short failure
[h264 @ 0x55929b0d6cc0] mmco: unref short failure
[h264 @ 0x55929b0d6cc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:10,  3.11it/s][A
  1%|          | 2/221 [00:00<01:10,  3.10it/s][A
  1%|▏         | 3/221 [00:00<01:12,  2.99it/s][A
  2%|▏         | 4/221 [00:01<01:17,  2.80it/s][A
  2%|▏         | 5/221 [00:01<01:14,  2.89it/s][A
  3%|▎         | 6/221 [00:02<01:14,  2.90it/s][A
  3%|▎         | 7/221 [00:02<01:18,  2.74it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.81it/s][A
  4%|▍         | 9/221 [00:03<01:15,  2.80it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.72it/s][A
  5%|▌         | 12/221 [00:04<01:15,  2.76it/s][A
  6%|▌         | 13/221 [00:04<01:13,  2.82it/s][A
  6%|▋         | 14/221 [00:04<01:16,  2.72it/s][A
  7%|▋         | 15/221 [00:05<01:12,  2.84it/s][A
  7%|▋         | 16/221 [00:05<01:10,  2.90it/s][A
  8%|▊         | 17/221 [00:06<01:16,  2.68it/s][A
  8%|▊         | 18/221 [00:06<01:14,  2.73it/s][A
  9%|▊         | 19/221 [00:06<01:15,  2.69it/s][A
  9%|▉         | 20/221 [00:07<01:15,  2.67it/s][A
 10%|▉         | 21/221 [00:07<01:11,  2.79it/s][A
 10%|▉         | 22/221 [00:07<01:08,  2.89it/s][A
 10%|█         | 23/221 [00:08<01:10,  2.81it/s][A
 11%|█         | 24/221 [00:08<01:08,  2.86it/s][A
 11%|█▏        | 25/221 [00:08<01:09,  2.81it/s][A
 12%|█▏        | 26/221 [00:09<01:07,  2.89it/s][A
 12%|█▏        | 27/221 [00:09<01:06,  2.92it/s][A
 13%|█▎        | 28/221 [00:09<01:07,  2.87it/s][A
 13%|█▎        | 29/221 [00:10<01:07,  2.84it/s][A
 14%|█▎        | 30/221 [00:10<01:05,  2.93it/s][A
 14%|█▍        | 31/221 [00:10<01:05,  2.91it/s][A
 14%|█▍        | 32/221 [00:11<01:03,  2.97it/s][A
 15%|█▍        | 33/221 [00:11<01:07,  2.77it/s][A
 15%|█▌        | 34/221 [00:12<01:08,  2.72it/s][A
 16%|█▌        | 35/221 [00:12<01:07,  2.75it/s][A
 16%|█▋        | 36/221 [00:12<01:04,  2.85it/s][A[h264 @ 0x555f2671a1c0] mmco: unref short failure

 17%|█▋        | 37/221 [00:13<01:02,  2.92it/s][A
 17%|█▋        | 38/221 [00:13<01:08,  2.68it/s][A
 18%|█▊        | 39/221 [00:13<01:08,  2.64it/s][A
 18%|█▊        | 40/221 [00:14<01:05,  2.76it/s][A
 19%|█▊        | 41/221 [00:14<01:04,  2.81it/s][A
 19%|█▉        | 42/221 [00:14<01:02,  2.88it/s][A
 19%|█▉        | 43/221 [00:15<01:01,  2.88it/s][A
 20%|█▉        | 44/221 [00:15<01:01,  2.86it/s][A
 20%|██        | 45/221 [00:16<01:04,  2.74it/s][A
 21%|██        | 46/221 [00:16<01:03,  2.77it/s][A
 21%|██▏       | 47/221 [00:16<01:03,  2.73it/s][A
 22%|██▏       | 48/221 [00:17<01:03,  2.74it/s][A
 22%|██▏       | 49/221 [00:17<01:00,  2.86it/s][A
 23%|██▎       | 50/221 [00:17<00:58,  2.93it/s][A
 23%|██▎       | 51/221 [00:18<01:07,  2.53it/s][A
 24%|██▎       | 52/221 [00:18<01:05,  2.58it/s][A
 24%|██▍       | 53/221 [00:18<01:01,  2.74it/s][A
 24%|██▍       | 54/221 [00:19<00:58,  2.86it/s][A
 25%|██▍       | 55/221 [00:19<00:56,  2.94it/s][A[h264 @ 0x55d40377e180] mmco: unref short failure
[h264 @ 0x55d40377e180] mmco: unref short failure

 25%|██▌       | 56/221 [00:20<01:04,  2.57it/s][A
 26%|██▌       | 57/221 [00:20<01:06,  2.45it/s][A
 26%|██▌       | 58/221 [00:20<01:01,  2.65it/s][A
 27%|██▋       | 59/221 [00:21<01:00,  2.69it/s][A
 27%|██▋       | 60/221 [00:21<00:57,  2.80it/s][A
 28%|██▊       | 61/221 [00:21<01:01,  2.62it/s][A[h264 @ 0x55927e019100] mmco: unref short failure
[h264 @ 0x55927e019100] mmco: unref short failure

 28%|██▊       | 62/221 [00:22<00:59,  2.69it/s][A
 29%|██▊       | 63/221 [00:22<00:58,  2.69it/s][A
 29%|██▉       | 64/221 [00:22<00:56,  2.79it/s][A
 29%|██▉       | 65/221 [00:23<00:54,  2.87it/s][A
 30%|██▉       | 66/221 [00:23<00:54,  2.85it/s][A
 30%|███       | 67/221 [00:24<00:52,  2.94it/s][A
 31%|███       | 68/221 [00:24<00:54,  2.81it/s][A
 31%|███       | 69/221 [00:24<00:56,  2.71it/s][A
 32%|███▏      | 70/221 [00:25<00:54,  2.79it/s][A
 32%|███▏      | 71/221 [00:25<00:52,  2.84it/s][A
 33%|███▎      | 72/221 [00:25<00:51,  2.87it/s][A
 33%|███▎      | 73/221 [00:26<00:54,  2.74it/s][A
 33%|███▎      | 74/221 [00:26<00:54,  2.70it/s][A
 34%|███▍      | 75/221 [00:27<00:56,  2.57it/s][A
 34%|███▍      | 76/221 [00:27<00:54,  2.65it/s][A
 35%|███▍      | 77/221 [00:27<00:51,  2.80it/s][A
 35%|███▌      | 78/221 [00:28<00:50,  2.85it/s][A
 36%|███▌      | 79/221 [00:28<00:48,  2.92it/s][A
 36%|███▌      | 80/221 [00:28<00:46,  3.03it/s][A
 37%|███▋      | 81/221 [00:28<00:45,  3.06it/s][A
 37%|███▋      | 82/221 [00:29<00:45,  3.03it/s][A
 38%|███▊      | 83/221 [00:29<00:45,  3.03it/s][A
 38%|███▊      | 84/221 [00:29<00:45,  3.00it/s][A
 38%|███▊      | 85/221 [00:30<00:46,  2.92it/s][A
 39%|███▉      | 86/221 [00:30<00:45,  2.97it/s][A
 39%|███▉      | 87/221 [00:31<00:48,  2.77it/s][A
 40%|███▉      | 88/221 [00:31<00:50,  2.62it/s][A
 40%|████      | 89/221 [00:31<00:49,  2.65it/s][A[h264 @ 0x55927e01a9c0] mmco: unref short failure
[h264 @ 0x55927e01a9c0] mmco: unref short failure

 41%|████      | 90/221 [00:32<00:48,  2.71it/s][A
 41%|████      | 91/221 [00:32<00:46,  2.80it/s][A
 42%|████▏     | 92/221 [00:32<00:45,  2.82it/s][A
 42%|████▏     | 93/221 [00:33<00:44,  2.85it/s][A
 43%|████▎     | 94/221 [00:33<00:44,  2.84it/s][A
 43%|████▎     | 95/221 [00:33<00:43,  2.88it/s][A
 43%|████▎     | 96/221 [00:34<00:42,  2.91it/s][A
 44%|████▍     | 97/221 [00:34<00:41,  3.01it/s][A
 44%|████▍     | 98/221 [00:34<00:44,  2.78it/s][A
 45%|████▍     | 99/221 [00:35<00:45,  2.69it/s][A
 45%|████▌     | 100/221 [00:35<00:44,  2.70it/s][A
 46%|████▌     | 101/221 [00:36<00:45,  2.65it/s][A
 46%|████▌     | 102/221 [00:36<00:44,  2.66it/s][A
 47%|████▋     | 103/221 [00:36<00:42,  2.80it/s][A
 47%|████▋     | 104/221 [00:37<00:41,  2.80it/s][A
 48%|████▊     | 105/221 [00:37<00:43,  2.66it/s][A
 48%|████▊     | 106/221 [00:37<00:41,  2.79it/s][A
 48%|████▊     | 107/221 [00:38<00:39,  2.86it/s][A
 49%|████▉     | 108/221 [00:38<00:38,  2.92it/s][A
 49%|████▉     | 109/221 [00:39<00:41,  2.71it/s][A
 50%|████▉     | 110/221 [00:39<00:45,  2.42it/s][A
 50%|█████     | 111/221 [00:39<00:44,  2.45it/s][A
 51%|█████     | 112/221 [00:40<00:44,  2.45it/s][A
 51%|█████     | 113/221 [00:40<00:43,  2.50it/s][A
 52%|█████▏    | 114/221 [00:41<00:42,  2.51it/s][A
 52%|█████▏    | 115/221 [00:41<00:39,  2.65it/s][A
 52%|█████▏    | 116/221 [00:41<00:37,  2.78it/s][A
 53%|█████▎    | 117/221 [00:42<00:38,  2.73it/s][A
 53%|█████▎    | 118/221 [00:42<00:40,  2.56it/s][A
 54%|█████▍    | 119/221 [00:43<00:40,  2.50it/s][A
 54%|█████▍    | 120/221 [00:43<00:38,  2.62it/s][A
 55%|█████▍    | 121/221 [00:43<00:37,  2.68it/s][A[h264 @ 0x55927e05db00] mmco: unref short failure
[h264 @ 0x55927e05db00] mmco: unref short failure

 55%|█████▌    | 122/221 [00:44<00:35,  2.79it/s][A
 56%|█████▌    | 123/221 [00:44<00:34,  2.85it/s][A
 56%|█████▌    | 124/221 [00:44<00:35,  2.77it/s][A
 57%|█████▋    | 125/221 [00:45<00:35,  2.73it/s][A
 57%|█████▋    | 126/221 [00:45<00:33,  2.80it/s][A
 57%|█████▋    | 127/221 [00:45<00:32,  2.89it/s][A
 58%|█████▊    | 128/221 [00:46<00:34,  2.68it/s][A
 58%|█████▊    | 129/221 [00:46<00:35,  2.56it/s][A
 59%|█████▉    | 130/221 [00:47<00:36,  2.48it/s][A
 59%|█████▉    | 131/221 [00:47<00:36,  2.47it/s][A
 60%|█████▉    | 132/221 [00:47<00:34,  2.60it/s][A
 60%|██████    | 133/221 [00:48<00:32,  2.70it/s][A
 61%|██████    | 134/221 [00:48<00:30,  2.81it/s][A
 61%|██████    | 135/221 [00:48<00:29,  2.90it/s][A
 62%|██████▏   | 136/221 [00:49<00:29,  2.92it/s][A
 62%|██████▏   | 137/221 [00:49<00:29,  2.87it/s][A
 62%|██████▏   | 138/221 [00:49<00:29,  2.83it/s][A
 63%|██████▎   | 139/221 [00:50<00:29,  2.82it/s][A
 63%|██████▎   | 140/221 [00:50<00:28,  2.88it/s][A[h264 @ 0x555f268d9dc0] mmco: unref short failure
[h264 @ 0x555f268d9dc0] mmco: unref short failure
[h264 @ 0x559f65d22980] mmco: unref short failure
[h264 @ 0x559291621e00] mmco: unref short failure
[h264 @ 0x559291621e00] mmco: unref short failure

 64%|██████▍   | 141/221 [00:50<00:27,  2.93it/s][A[h264 @ 0x559291621e00] mmco: unref short failure
[h264 @ 0x559291621e00] mmco: unref short failure

 64%|██████▍   | 142/221 [00:51<00:28,  2.72it/s][A
 65%|██████▍   | 143/221 [00:51<00:28,  2.76it/s][A
 65%|██████▌   | 144/221 [00:52<00:27,  2.80it/s][A
 66%|██████▌   | 145/221 [00:52<00:26,  2.83it/s][A
 66%|██████▌   | 146/221 [00:52<00:25,  2.90it/s][A[h264 @ 0x55d402affac0] mmco: unref short failure
[h264 @ 0x55d402affac0] mmco: unref short failure

 67%|██████▋   | 147/221 [00:53<00:26,  2.83it/s][A
 67%|██████▋   | 148/221 [00:53<00:25,  2.90it/s][A
 67%|██████▋   | 149/221 [00:53<00:25,  2.88it/s][A
 68%|██████▊   | 150/221 [00:54<00:24,  2.90it/s][A
 68%|██████▊   | 151/221 [00:54<00:24,  2.91it/s][A
 69%|██████▉   | 152/221 [00:54<00:24,  2.81it/s][A
 69%|██████▉   | 153/221 [00:55<00:25,  2.70it/s][A
 70%|██████▉   | 154/221 [00:55<00:24,  2.75it/s][A
 70%|███████   | 155/221 [00:55<00:23,  2.81it/s][A[h264 @ 0x55d422da5140] mmco: unref short failure
[h264 @ 0x55d422da5140] mmco: unref short failure

 71%|███████   | 156/221 [00:56<00:23,  2.72it/s][A[h264 @ 0x559f66c2aa40] mmco: unref short failure

 71%|███████   | 157/221 [00:56<00:22,  2.79it/s][A
 71%|███████▏  | 158/221 [00:56<00:21,  2.92it/s][A
 72%|███████▏  | 159/221 [00:57<00:21,  2.92it/s][A
 72%|███████▏  | 160/221 [00:57<00:20,  2.98it/s][A
 73%|███████▎  | 161/221 [00:57<00:20,  2.98it/s][A
 73%|███████▎  | 162/221 [00:58<00:19,  2.98it/s][A
 74%|███████▍  | 163/221 [00:58<00:19,  3.03it/s][A
 74%|███████▍  | 164/221 [00:58<00:19,  3.00it/s][A
 75%|███████▍  | 165/221 [00:59<00:19,  2.93it/s][A
 75%|███████▌  | 166/221 [00:59<00:19,  2.83it/s][A
 76%|███████▌  | 167/221 [01:00<00:19,  2.84it/s][A
 76%|███████▌  | 168/221 [01:00<00:18,  2.81it/s][A
 76%|███████▋  | 169/221 [01:00<00:18,  2.77it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.82it/s][A
 77%|███████▋  | 171/221 [01:01<00:17,  2.87it/s][A
 78%|███████▊  | 172/221 [01:01<00:17,  2.84it/s][A
 78%|███████▊  | 173/221 [01:02<00:17,  2.72it/s][A
 79%|███████▊  | 174/221 [01:02<00:16,  2.82it/s][A
 79%|███████▉  | 175/221 [01:02<00:16,  2.87it/s][A
 80%|███████▉  | 176/221 [01:03<00:15,  2.90it/s][A[h264 @ 0x5592956c3200] mmco: unref short failure
[h264 @ 0x5592956c3200] mmco: unref short failure

 80%|████████  | 177/221 [01:03<00:15,  2.90it/s][A
 81%|████████  | 178/221 [01:03<00:15,  2.81it/s][A
 81%|████████  | 179/221 [01:04<00:14,  2.88it/s][A
 81%|████████▏ | 180/221 [01:04<00:14,  2.92it/s][A
 82%|████████▏ | 181/221 [01:04<00:14,  2.78it/s][A
 82%|████████▏ | 182/221 [01:05<00:13,  2.85it/s][A
 83%|████████▎ | 183/221 [01:05<00:13,  2.90it/s][A
 83%|████████▎ | 184/221 [01:06<00:14,  2.61it/s][A
 84%|████████▎ | 185/221 [01:06<00:14,  2.43it/s][A
 84%|████████▍ | 186/221 [01:06<00:13,  2.57it/s][A
 85%|████████▍ | 187/221 [01:07<00:12,  2.63it/s][A
 85%|████████▌ | 188/221 [01:07<00:11,  2.77it/s][A
 86%|████████▌ | 189/221 [01:08<00:12,  2.60it/s][A
 86%|████████▌ | 190/221 [01:08<00:11,  2.64it/s][A
 86%|████████▋ | 191/221 [01:08<00:11,  2.70it/s][A
 87%|████████▋ | 192/221 [01:09<00:10,  2.75it/s][A
 87%|████████▋ | 193/221 [01:09<00:10,  2.62it/s][A[h264 @ 0x555f266b28c0] mmco: unref short failure

 88%|████████▊ | 194/221 [01:09<00:10,  2.65it/s][A
 88%|████████▊ | 195/221 [01:10<00:09,  2.68it/s][A
 89%|████████▊ | 196/221 [01:10<00:09,  2.77it/s][A
 89%|████████▉ | 197/221 [01:10<00:08,  2.79it/s][A
 90%|████████▉ | 198/221 [01:11<00:08,  2.76it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.80it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.86it/s][A
 91%|█████████ | 201/221 [01:12<00:06,  2.89it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.91it/s][A
 92%|█████████▏| 203/221 [01:12<00:06,  2.98it/s][A
 92%|█████████▏| 204/221 [01:13<00:05,  2.92it/s][A
 93%|█████████▎| 205/221 [01:13<00:05,  2.79it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.76it/s][A
 94%|█████████▎| 207/221 [01:14<00:05,  2.76it/s][A
 94%|█████████▍| 208/221 [01:14<00:04,  2.76it/s][A
 95%|█████████▍| 209/221 [01:15<00:04,  2.85it/s][A
 95%|█████████▌| 210/221 [01:15<00:03,  2.75it/s][A
 95%|█████████▌| 211/221 [01:15<00:03,  2.63it/s][A
 96%|█████████▌| 212/221 [01:16<00:03,  2.78it/s][A
 96%|█████████▋| 213/221 [01:16<00:02,  2.85it/s][A[h264 @ 0x5592866148c0] mmco: unref short failure

 97%|█████████▋| 214/221 [01:16<00:02,  2.91it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.99it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  3.04it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  3.11it/s][A
 99%|█████████▊| 218/221 [01:18<00:01,  2.81it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.59it/s][A
100%|█████████▉| 220/221 [01:19<00:00,  2.74it/s][A
100%|██████████| 221/221 [01:19<00:00,  2.76it/s][A100%|██████████| 221/221 [01:19<00:00,  2.78it/s]
[h264 @ 0x559f75814700] mmco: unref short failure
[h264 @ 0x559f75814700] mmco: unref short failure
[h264 @ 0x559f5a14e500] mmco: unref short failure
[h264 @ 0x559f5a14e500] mmco: unref short failure
[h264 @ 0x55927eb97c40] mmco: unref short failure
[h264 @ 0x55927eb97c40] mmco: unref short failure
[h264 @ 0x559f59d6cfc0] mmco: unref short failure
[h264 @ 0x559f59d6cfc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:36,  6.08it/s][A
  1%|          | 2/221 [00:00<01:08,  3.18it/s][A[h264 @ 0x5592a9769bc0] mmco: unref short failure

  1%|▏         | 3/221 [00:01<01:45,  2.06it/s][A
  2%|▏         | 4/221 [00:01<01:22,  2.62it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.96it/s][A
  3%|▎         | 6/221 [00:01<00:55,  3.86it/s][A
  3%|▎         | 7/221 [00:02<00:57,  3.71it/s][A
  4%|▎         | 8/221 [00:02<01:01,  3.46it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.16it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.65it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.71it/s][A
  5%|▌         | 12/221 [00:04<01:12,  2.87it/s][A
  6%|▌         | 13/221 [00:04<01:43,  2.01it/s][A
  6%|▋         | 14/221 [00:05<01:26,  2.39it/s][A
  7%|▋         | 15/221 [00:05<01:23,  2.48it/s][A
  7%|▋         | 16/221 [00:06<01:34,  2.17it/s][A
  8%|▊         | 17/221 [00:06<01:37,  2.08it/s][A
  8%|▊         | 18/221 [00:07<01:35,  2.13it/s][A
  9%|▊         | 19/221 [00:07<01:23,  2.43it/s][A
  9%|▉         | 20/221 [00:07<01:19,  2.53it/s][A
 10%|▉         | 21/221 [00:07<01:06,  2.99it/s][A
 10%|▉         | 22/221 [00:08<01:02,  3.19it/s][A
 10%|█         | 23/221 [00:08<00:53,  3.68it/s][A
 11%|█         | 24/221 [00:08<00:54,  3.58it/s][A
 11%|█▏        | 25/221 [00:08<00:55,  3.52it/s][A
 12%|█▏        | 26/221 [00:09<01:00,  3.21it/s][A
 12%|█▏        | 27/221 [00:09<01:03,  3.08it/s][A
 13%|█▎        | 28/221 [00:10<01:19,  2.43it/s][A
 13%|█▎        | 29/221 [00:10<01:20,  2.37it/s][A
 14%|█▎        | 30/221 [00:11<01:16,  2.48it/s][A
 14%|█▍        | 31/221 [00:11<01:18,  2.42it/s][A
 14%|█▍        | 32/221 [00:11<01:06,  2.86it/s][A
 15%|█▍        | 33/221 [00:11<01:00,  3.09it/s][A
 15%|█▌        | 34/221 [00:12<00:58,  3.21it/s][A
 16%|█▌        | 35/221 [00:12<00:55,  3.35it/s][A
 16%|█▋        | 36/221 [00:12<00:58,  3.15it/s][A
 17%|█▋        | 37/221 [00:13<00:57,  3.22it/s][A
 17%|█▋        | 38/221 [00:13<01:02,  2.91it/s][A
 18%|█▊        | 39/221 [00:13<00:52,  3.50it/s][A[h264 @ 0x555f266b28c0] mmco: unref short failure

 18%|█▊        | 40/221 [00:14<01:00,  2.97it/s][A
 19%|█▊        | 41/221 [00:14<00:50,  3.54it/s][A
 19%|█▉        | 42/221 [00:14<00:46,  3.87it/s][A
 19%|█▉        | 43/221 [00:14<00:46,  3.83it/s][A
 20%|█▉        | 44/221 [00:15<00:48,  3.63it/s][A
 20%|██        | 45/221 [00:15<00:56,  3.10it/s][A
 21%|██        | 46/221 [00:15<00:51,  3.43it/s][A
 22%|██▏       | 48/221 [00:15<00:36,  4.79it/s][A
 22%|██▏       | 49/221 [00:16<00:35,  4.87it/s][A
 23%|██▎       | 50/221 [00:16<00:43,  3.92it/s][A
 23%|██▎       | 51/221 [00:17<00:52,  3.25it/s][A
 24%|██▎       | 52/221 [00:17<00:45,  3.73it/s][A
 24%|██▍       | 53/221 [00:17<00:41,  4.00it/s][A
 24%|██▍       | 54/221 [00:17<00:43,  3.85it/s][A
 25%|██▍       | 55/221 [00:17<00:42,  3.92it/s][A
 25%|██▌       | 56/221 [00:18<00:43,  3.80it/s][A
 26%|██▌       | 57/221 [00:18<00:44,  3.71it/s][A
 26%|██▌       | 58/221 [00:18<00:42,  3.83it/s][A
 27%|██▋       | 59/221 [00:18<00:41,  3.87it/s][A[h264 @ 0x559f59d6cfc0] mmco: unref short failure
[h264 @ 0x559f59d6cfc0] mmco: unref short failure
[h264 @ 0x559f59d6cfc0] mmco: unref short failure
[h264 @ 0x559f59d6cfc0] mmco: unref short failure

 27%|██▋       | 60/221 [00:19<00:43,  3.69it/s][A
 28%|██▊       | 61/221 [00:19<00:45,  3.50it/s][A
 28%|██▊       | 62/221 [00:19<00:49,  3.21it/s][A
 29%|██▊       | 63/221 [00:20<00:50,  3.13it/s][A
 29%|██▉       | 64/221 [00:20<00:49,  3.18it/s][A[h264 @ 0x55928184d4c0] mmco: unref short failure

 29%|██▉       | 65/221 [00:20<00:42,  3.71it/s][A
 30%|██▉       | 66/221 [00:21<00:43,  3.58it/s][A
 30%|███       | 67/221 [00:21<00:58,  2.62it/s][A
 31%|███       | 68/221 [00:21<00:51,  2.96it/s][A
 31%|███       | 69/221 [00:22<00:57,  2.65it/s][A
 32%|███▏      | 70/221 [00:22<00:52,  2.88it/s][A
 32%|███▏      | 71/221 [00:23<00:52,  2.87it/s][A
 33%|███▎      | 72/221 [00:23<00:56,  2.65it/s][A
 33%|███▎      | 73/221 [00:23<00:53,  2.75it/s][A
 33%|███▎      | 74/221 [00:24<00:54,  2.68it/s][A
 34%|███▍      | 75/221 [00:24<01:02,  2.34it/s][A
 34%|███▍      | 76/221 [00:24<00:48,  2.98it/s][A
 35%|███▍      | 77/221 [00:25<00:43,  3.35it/s][A
 35%|███▌      | 78/221 [00:25<00:42,  3.40it/s][A
 36%|███▌      | 79/221 [00:25<00:47,  2.97it/s][A
 36%|███▌      | 80/221 [00:26<00:52,  2.69it/s][A
 37%|███▋      | 81/221 [00:26<00:53,  2.62it/s][A
 37%|███▋      | 82/221 [00:26<00:47,  2.95it/s][A
 38%|███▊      | 83/221 [00:27<00:38,  3.55it/s][A
 38%|███▊      | 84/221 [00:27<00:49,  2.79it/s][A
 38%|███▊      | 85/221 [00:28<00:50,  2.71it/s][A
 39%|███▉      | 86/221 [00:28<00:48,  2.79it/s][A
 39%|███▉      | 87/221 [00:29<01:02,  2.14it/s][A
 40%|███▉      | 88/221 [00:29<00:51,  2.60it/s][A
 40%|████      | 89/221 [00:29<00:49,  2.67it/s][A
 41%|████      | 90/221 [00:30<00:50,  2.61it/s][A
 41%|████      | 91/221 [00:30<00:44,  2.95it/s][A
 42%|████▏     | 92/221 [00:30<00:42,  3.05it/s][A
 42%|████▏     | 93/221 [00:30<00:39,  3.28it/s][A
 43%|████▎     | 94/221 [00:31<00:37,  3.41it/s][A[h264 @ 0x55d40ad77dc0] mmco: unref short failure

 43%|████▎     | 95/221 [00:31<00:51,  2.45it/s][A
 43%|████▎     | 96/221 [00:32<00:46,  2.67it/s][A
 44%|████▍     | 97/221 [00:32<00:43,  2.85it/s][A
 44%|████▍     | 98/221 [00:32<00:39,  3.09it/s][A
 45%|████▍     | 99/221 [00:32<00:38,  3.19it/s][A
 45%|████▌     | 100/221 [00:33<00:32,  3.78it/s][A
 46%|████▌     | 101/221 [00:33<00:38,  3.13it/s][A
 46%|████▌     | 102/221 [00:33<00:38,  3.06it/s][A
 47%|████▋     | 103/221 [00:34<00:39,  3.02it/s][A
 47%|████▋     | 104/221 [00:34<00:37,  3.12it/s][A
 48%|████▊     | 105/221 [00:34<00:39,  2.92it/s][A
 48%|████▊     | 106/221 [00:35<00:49,  2.32it/s][A
 48%|████▊     | 107/221 [00:35<00:42,  2.71it/s][A
 49%|████▉     | 108/221 [00:35<00:37,  3.00it/s][A
 49%|████▉     | 109/221 [00:36<00:43,  2.58it/s][A
 50%|████▉     | 110/221 [00:36<00:46,  2.38it/s][A
 50%|█████     | 111/221 [00:37<00:44,  2.48it/s][A
 51%|█████     | 112/221 [00:37<00:41,  2.60it/s][A
 51%|█████     | 113/221 [00:37<00:36,  2.97it/s][A
 52%|█████▏    | 115/221 [00:38<00:29,  3.64it/s][A
 52%|█████▏    | 116/221 [00:38<00:28,  3.68it/s][A
 53%|█████▎    | 117/221 [00:38<00:30,  3.46it/s][A
 53%|█████▎    | 118/221 [00:39<00:35,  2.92it/s][A
 54%|█████▍    | 119/221 [00:39<00:41,  2.44it/s][A
 54%|█████▍    | 120/221 [00:40<00:40,  2.47it/s][A
 55%|█████▍    | 121/221 [00:40<00:33,  2.98it/s][A
 55%|█████▌    | 122/221 [00:40<00:29,  3.36it/s][A
 56%|█████▌    | 123/221 [00:41<00:29,  3.34it/s][A
 56%|█████▌    | 124/221 [00:41<00:35,  2.74it/s][A
 57%|█████▋    | 125/221 [00:42<01:02,  1.53it/s][A
 57%|█████▋    | 126/221 [00:43<00:54,  1.75it/s][A[h264 @ 0x555f264e0c40] mmco: unref short failure
[h264 @ 0x555f264e0c40] mmco: unref short failure

 57%|█████▋    | 127/221 [00:44<01:01,  1.52it/s][A
 58%|█████▊    | 128/221 [00:44<00:52,  1.78it/s][A
 58%|█████▊    | 129/221 [00:44<00:40,  2.25it/s][A
 59%|█████▉    | 130/221 [00:44<00:37,  2.43it/s][A
 59%|█████▉    | 131/221 [00:45<00:33,  2.71it/s][A
 60%|█████▉    | 132/221 [00:45<00:37,  2.36it/s][A
 60%|██████    | 133/221 [00:46<00:39,  2.25it/s][A
 61%|██████    | 134/221 [00:46<00:36,  2.37it/s][A
 61%|██████    | 135/221 [00:46<00:29,  2.87it/s][A
 62%|██████▏   | 136/221 [00:47<00:30,  2.78it/s][A
 62%|██████▏   | 137/221 [00:47<00:28,  2.98it/s][A
 62%|██████▏   | 138/221 [00:47<00:27,  3.03it/s][A
 63%|██████▎   | 139/221 [00:48<00:29,  2.80it/s][A
 63%|██████▎   | 140/221 [00:48<00:25,  3.20it/s][A
 64%|██████▍   | 141/221 [00:48<00:24,  3.25it/s][A
 64%|██████▍   | 142/221 [00:48<00:22,  3.44it/s][A
 65%|██████▍   | 143/221 [00:49<00:21,  3.60it/s][A
 65%|██████▌   | 144/221 [00:49<00:22,  3.46it/s][A
 66%|██████▌   | 145/221 [00:49<00:24,  3.10it/s][A
 66%|██████▌   | 146/221 [00:50<00:24,  3.01it/s][A
 67%|██████▋   | 147/221 [00:50<00:22,  3.29it/s][A
 67%|██████▋   | 148/221 [00:50<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:51<00:21,  3.28it/s][A
 68%|██████▊   | 150/221 [00:51<00:25,  2.83it/s][A
 68%|██████▊   | 151/221 [00:52<00:40,  1.73it/s][A
 69%|██████▉   | 152/221 [00:53<00:44,  1.54it/s][A
 69%|██████▉   | 153/221 [00:53<00:37,  1.82it/s][A
 70%|██████▉   | 154/221 [00:54<00:30,  2.21it/s][A
 70%|███████   | 155/221 [00:54<00:30,  2.14it/s][A[h264 @ 0x555f26608180] mmco: unref short failure

 71%|███████   | 156/221 [00:54<00:28,  2.26it/s][A
 71%|███████   | 157/221 [00:55<00:27,  2.31it/s][A
 71%|███████▏  | 158/221 [00:55<00:27,  2.27it/s][A
 72%|███████▏  | 159/221 [00:56<00:22,  2.81it/s][A
 72%|███████▏  | 160/221 [00:56<00:20,  2.99it/s][A
 73%|███████▎  | 161/221 [00:56<00:16,  3.63it/s][A
 73%|███████▎  | 162/221 [00:56<00:14,  4.10it/s][A
 74%|███████▍  | 163/221 [00:56<00:14,  3.94it/s][A
 74%|███████▍  | 164/221 [00:57<00:12,  4.41it/s][A
 75%|███████▍  | 165/221 [00:57<00:10,  5.29it/s][A
 75%|███████▌  | 166/221 [00:57<00:15,  3.57it/s][A
 76%|███████▌  | 167/221 [00:57<00:12,  4.24it/s][A
 76%|███████▌  | 168/221 [00:58<00:12,  4.09it/s][A
 76%|███████▋  | 169/221 [00:58<00:12,  4.18it/s][A
 77%|███████▋  | 170/221 [00:58<00:16,  3.07it/s][A
 77%|███████▋  | 171/221 [00:59<00:21,  2.31it/s][A
 78%|███████▊  | 172/221 [00:59<00:17,  2.79it/s][A[h264 @ 0x559287a5da00] mmco: unref short failure

 78%|███████▊  | 173/221 [00:59<00:15,  3.12it/s][A
 79%|███████▊  | 174/221 [01:00<00:13,  3.44it/s][A
 79%|███████▉  | 175/221 [01:00<00:12,  3.66it/s][A
 80%|███████▉  | 176/221 [01:00<00:12,  3.49it/s][A
 80%|████████  | 177/221 [01:00<00:12,  3.43it/s][A[h264 @ 0x5592866148c0] mmco: unref short failure
[h264 @ 0x5592866148c0] mmco: unref short failure

 81%|████████  | 178/221 [01:01<00:16,  2.63it/s][A
 81%|████████  | 179/221 [01:01<00:15,  2.65it/s][A
 82%|████████▏ | 181/221 [01:02<00:11,  3.53it/s][A
 82%|████████▏ | 182/221 [01:02<00:11,  3.48it/s][A
 83%|████████▎ | 183/221 [01:02<00:12,  3.10it/s][A
 83%|████████▎ | 184/221 [01:03<00:11,  3.10it/s][A
 84%|████████▎ | 185/221 [01:03<00:10,  3.29it/s][A
 84%|████████▍ | 186/221 [01:04<00:12,  2.82it/s][A
 85%|████████▍ | 187/221 [01:04<00:12,  2.81it/s][A
 85%|████████▌ | 188/221 [01:04<00:10,  3.10it/s][A
 86%|████████▌ | 189/221 [01:04<00:08,  3.58it/s][A
 86%|████████▌ | 190/221 [01:05<00:11,  2.77it/s][A
 86%|████████▋ | 191/221 [01:05<00:09,  3.24it/s][A
 87%|████████▋ | 192/221 [01:05<00:08,  3.62it/s][A
 87%|████████▋ | 193/221 [01:05<00:06,  4.16it/s][A
 88%|████████▊ | 194/221 [01:06<00:07,  3.39it/s][A
 88%|████████▊ | 195/221 [01:06<00:06,  3.85it/s][A
 89%|████████▊ | 196/221 [01:07<00:09,  2.76it/s][A
 89%|████████▉ | 197/221 [01:07<00:08,  2.70it/s][A
 90%|████████▉ | 198/221 [01:07<00:08,  2.69it/s][A
 90%|█████████ | 199/221 [01:08<00:07,  3.01it/s][A
 90%|█████████ | 200/221 [01:08<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [01:08<00:06,  3.21it/s][A
 91%|█████████▏| 202/221 [01:08<00:05,  3.49it/s][A
 92%|█████████▏| 203/221 [01:09<00:05,  3.47it/s][A
 92%|█████████▏| 204/221 [01:09<00:04,  3.88it/s][A
 93%|█████████▎| 205/221 [01:09<00:04,  3.87it/s][A
 93%|█████████▎| 206/221 [01:10<00:05,  2.78it/s][A
 94%|█████████▎| 207/221 [01:10<00:04,  3.00it/s][A
 94%|█████████▍| 208/221 [01:10<00:04,  3.10it/s][A
 95%|█████████▍| 209/221 [01:11<00:04,  2.86it/s][A
 95%|█████████▌| 210/221 [01:11<00:03,  3.30it/s][A
 95%|█████████▌| 211/221 [01:11<00:02,  3.49it/s][A
 96%|█████████▌| 212/221 [01:12<00:03,  2.93it/s][A
 96%|█████████▋| 213/221 [01:12<00:02,  2.87it/s][A
 97%|█████████▋| 214/221 [01:12<00:02,  2.80it/s][A
 97%|█████████▋| 215/221 [01:13<00:02,  2.79it/s][A
 98%|█████████▊| 216/221 [01:13<00:01,  2.80it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  2.70it/s][A
 99%|█████████▊| 218/221 [01:14<00:01,  2.96it/s][A
 99%|█████████▉| 219/221 [01:14<00:00,  2.66it/s][A
100%|█████████▉| 220/221 [01:14<00:00,  3.14it/s][A
100%|██████████| 221/221 [01:15<00:00,  3.04it/s][A100%|██████████| 221/221 [01:15<00:00,  2.93it/s]
[h264 @ 0x559294fe6700] mmco: unref short failure
[h264 @ 0x559294fe6700] mmco: unref short failure
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'area_r1': 39.0, 'area_recall': '39.0/67.3/75.7', 'area_ravg': 60.7}
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'forward_r1': 36.5, 'forward_recall': '36.5/63.2/74.2', 'forward_ravg': 58.0}
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'area_video_r1': 40.6, 'area_video_recall': '40.6/67.5/77.0', 'area_video_ravg': 61.7}
09/17/2024 02:22:36 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 02:22:36 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/74.4/82.6', 'area_video_ravg': 69.9, 'area_video_back_r1': 50.3, 'area_video_back_recall': '50.3/74.5/81.6', 'area_video_back_ravg': 68.8}
09/17/2024 02:22:36 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 249=======

09/17/2024 02:22:36 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/74.4/82.6', 'area_video_ravg': 69.9, 'area_video_back_r1': 50.3, 'area_video_back_recall': '50.3/74.5/81.6', 'area_video_back_ravg': 68.8}
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'video_r1': 35.5, 'video_recall': '35.5/64.1/74.3', 'video_ravg': 58.0}
09/17/2024 02:22:36 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 02:22:36 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 02:22:36 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 249--===========

09/17/2024 02:22:36 - INFO - __main__ -   {'video_r1': 53.2, 'video_recall': '53.2/75.1/82.8', 'video_ravg': 70.4}
09/17/2024 02:22:36 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 249=======

09/17/2024 02:22:36 - INFO - __main__ -   {'video_r1': 53.2, 'video_recall': '53.2/75.1/82.8', 'video_ravg': 70.4}
[h264 @ 0x55d4375fb940] mmco: unref short failure
[h264 @ 0x55d4375fb940] mmco: unref short failure
[h264 @ 0x559f59e06180] mmco: unref short failure
[h264 @ 0x55d429471440] mmco: unref short failure
[h264 @ 0x55d429471440] mmco: unref short failure
[h264 @ 0x5592a5deec00] mmco: unref short failure
[h264 @ 0x5592a5deec00] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x55d4350afc80] mmco: unref short failure
[h264 @ 0x55d4350afc80] mmco: unref short failure
[h264 @ 0x559f59e45940] mmco: unref short failure
[h264 @ 0x559f59e45940] mmco: unref short failure
[h264 @ 0x555f26046cc0] mmco: unref short failure
[h264 @ 0x555f26046cc0] mmco: unref short failure
[h264 @ 0x555f4fad5fc0] mmco: unref short failure
[h264 @ 0x555f4fad5fc0] mmco: unref short failure
[h264 @ 0x55928bdf0340] mmco: unref short failure
[h264 @ 0x55928bdf0340] mmco: unref short failure
09/17/2024 02:23:32 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.00969820935279131, 'loss_ret%tv%ta--finetune_area/loss_area': 1.5997943878173828, 'loss_ret%tv%ta--finetune_area/total_loss': 1.609492540359497}
[h264 @ 0x559f807f7c40] mmco: unref short failure
 17%|█▋        | 250/1455 [2:43:15<58:29:39, 174.75s/it][h264 @ 0x559f807f7c40] mmco: unref short failure
[h264 @ 0x559f807f7c40] mmco: unref short failure
[h264 @ 0x55d419603640] mmco: unref short failure
 17%|█▋        | 251/1455 [2:43:23<41:40:16, 124.60s/it][h264 @ 0x55d4214c5e00] mmco: unref short failure
[h264 @ 0x559f652e3e80] mmco: unref short failure
[h264 @ 0x5592b3ac6700] mmco: unref short failure
[h264 @ 0x555f26796200] mmco: unref short failure
[h264 @ 0x555f26796200] mmco: unref short failure
 17%|█▋        | 252/1455 [2:43:30<29:54:59, 89.53s/it] [h264 @ 0x559288fb0100] mmco: unref short failure
[h264 @ 0x559288fb0100] mmco: unref short failure
[h264 @ 0x55d410d1a1c0] mmco: unref short failure
[h264 @ 0x55d410d1a1c0] mmco: unref short failure
 17%|█▋        | 253/1455 [2:43:38<21:40:34, 64.92s/it]09/17/2024 02:24:04 - INFO - __main__ -   current idx 4Svr6BsWgeU.14 from finetune_area returns wrong image/video, use 131493 instead.
 17%|█▋        | 254/1455 [2:43:46<15:58:58, 47.91s/it] 18%|█▊        | 255/1455 [2:43:54<12:00:56, 36.05s/it][h264 @ 0x55927dfd4140] mmco: unref short failure
[h264 @ 0x55927dfd4140] mmco: unref short failure
09/17/2024 02:24:19 - INFO - __main__ -   current idx hvuxWKYHJlQ.82 from finetune_area returns wrong image/video, use 5367 instead.
 18%|█▊        | 256/1455 [2:44:03<9:18:23, 27.94s/it] [h264 @ 0x55d42c0ff080] mmco: unref short failure
[h264 @ 0x55d42c0ff080] mmco: unref short failure
 18%|█▊        | 257/1455 [2:44:13<7:26:59, 22.39s/it][h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x555f266c9600] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559293ed4800] mmco: unref short failure
[h264 @ 0x559f59fb3340] mmco: unref short failure
 18%|█▊        | 258/1455 [2:44:22<6:09:06, 18.50s/it][h264 @ 0x555f28ccc780] mmco: unref short failure
[h264 @ 0x559289a6f400] mmco: unref short failure
[h264 @ 0x559289a6f400] mmco: unref short failure
[h264 @ 0x55d40e3de640] mmco: unref short failure
[h264 @ 0x55d40e3de640] mmco: unref short failure
 18%|█▊        | 259/1455 [2:44:31<5:10:25, 15.57s/it][h264 @ 0x559f593ada40] mmco: unref short failure
[h264 @ 0x55d419603640] mmco: unref short failure
[h264 @ 0x559f77d5dfc0] mmco: unref short failure
 18%|█▊        | 260/1455 [2:44:40<4:29:17, 13.52s/it][h264 @ 0x559293ed4800] mmco: unref short failure
[h264 @ 0x555f2678ce80] mmco: unref short failure
[h264 @ 0x555f2678ce80] mmco: unref short failure
[h264 @ 0x55d40a6a5500] mmco: unref short failure
[h264 @ 0x55d40a6a5500] mmco: unref short failure
[h264 @ 0x555f26674180] mmco: unref short failure
[h264 @ 0x555f26674180] mmco: unref short failure
[h264 @ 0x55d40629dd80] mmco: unref short failure
 18%|█▊        | 261/1455 [2:44:49<4:02:40, 12.20s/it][h264 @ 0x559f59ea4340] mmco: unref short failure
 18%|█▊        | 262/1455 [2:44:58<3:44:47, 11.31s/it][h264 @ 0x559f75533d80] mmco: unref short failure
09/17/2024 02:25:28 - INFO - __main__ -   current idx EMPLLx_tfq8.250 from finetune_area returns wrong image/video, use 52360 instead.
[h264 @ 0x55927e08e900] mmco: unref short failure
[h264 @ 0x55927e08e900] mmco: unref short failure
 18%|█▊        | 263/1455 [2:45:09<3:39:00, 11.02s/it] 18%|█▊        | 264/1455 [2:45:18<3:26:53, 10.42s/it][h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x55d428fbf400] mmco: unref short failure
[h264 @ 0x55d428fbf400] mmco: unref short failure
[h264 @ 0x55d428fbf400] mmco: unref short failure
[h264 @ 0x55d428fbf400] mmco: unref short failure
[h264 @ 0x555f26771280] mmco: unref short failure
[h264 @ 0x555f26771280] mmco: unref short failure
[h264 @ 0x555f26771280] mmco: unref short failure
[h264 @ 0x555f26771280] mmco: unref short failure
 18%|█▊        | 265/1455 [2:45:26<3:13:40,  9.76s/it][h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
09/17/2024 02:26:10 - INFO - __main__ -   current idx cXoOWKkZ_K0.13 from finetune_area returns wrong image/video, use 16237 instead.
[h264 @ 0x559f7521e940] mmco: unref short failure
[h264 @ 0x559f59fb3340] mmco: unref short failure
[h264 @ 0x559f59fb3340] mmco: unref short failure
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x55d4205d3180] mmco: unref short failure
[h264 @ 0x559f5a049000] mmco: unref short failure
[h264 @ 0x559f5a049000] mmco: unref short failure
[h264 @ 0x555f26499700] mmco: unref short failure
[h264 @ 0x555f26499700] mmco: unref short failure
09/17/2024 02:26:36 - INFO - __main__ -   current idx 4hOPcrHDBvU.10 from finetune_area returns wrong image/video, use 146987 instead.
[h264 @ 0x55927e008180] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x55d43198ef80] mmco: unref short failure
[h264 @ 0x559f807f7c40] mmco: unref short failure
[h264 @ 0x555f266246c0] mmco: unref short failure
[h264 @ 0x555f266246c0] mmco: unref short failure
[h264 @ 0x5592831cc240] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559288506440] mmco: unref short failure
[h264 @ 0x559f59e8a340] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x55927dfedd00] mmco: unref short failure
[h264 @ 0x555f2666de40] mmco: unref short failure
[h264 @ 0x555f2666de40] mmco: unref short failure
[h264 @ 0x55d410c43980] mmco: unref short failure
[h264 @ 0x555f3c3e8680] mmco: unref short failure
[h264 @ 0x559f59e6be00] mmco: unref short failure
[h264 @ 0x55d433bd6a00] mmco: unref short failure
[h264 @ 0x55d433bd6a00] mmco: unref short failure
[h264 @ 0x555f50c96400] mmco: unref short failure
[h264 @ 0x555f50c96400] mmco: unref short failure
[h264 @ 0x55d40613e400] mmco: unref short failure
[h264 @ 0x55d40613e400] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x559f72853380] mmco: unref short failure
[h264 @ 0x555f264cd080] mmco: unref short failure
[h264 @ 0x555f264cd080] mmco: unref short failure
[h264 @ 0x555f266c9040] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
09/17/2024 02:27:59 - INFO - __main__ -   current idx DfKw_sMqEaA.16 from finetune_area returns wrong image/video, use 70448 instead.
[h264 @ 0x555f54e2f440] mmco: unref short failure
[h264 @ 0x55d4030c9780] mmco: unref short failure
[h264 @ 0x55d4334bec00] mmco: unref short failure
[h264 @ 0x55d4334bec00] mmco: unref short failure
 18%|█▊        | 266/1455 [2:48:03<17:49:24, 53.97s/it] 18%|█▊        | 267/1455 [2:48:12<13:21:29, 40.48s/it] 18%|█▊        | 268/1455 [2:48:21<10:13:12, 31.00s/it] 18%|█▊        | 269/1455 [2:48:35<8:32:24, 25.92s/it] [h264 @ 0x55d41dfd6140] mmco: unref short failure
[h264 @ 0x559f862efb40] mmco: unref short failure
[h264 @ 0x559f862efb40] mmco: unref short failure
09/17/2024 02:29:16 - INFO - __main__ -   current idx E852WPZZnME.32 from finetune_area returns wrong image/video, use 117635 instead.
[h264 @ 0x555f26774dc0] mmco: unref short failure
 19%|█▊        | 270/1455 [2:49:03<8:43:04, 26.48s/it][h264 @ 0x559282c3c180] mmco: unref short failure
[h264 @ 0x559282c3c180] mmco: unref short failure
[h264 @ 0x55927dfedd00] mmco: unref short failure
 19%|█▊        | 271/1455 [2:49:11<6:54:55, 21.03s/it][h264 @ 0x5592925ad800] mmco: unref short failure
[h264 @ 0x5592925ad800] mmco: unref short failure
[h264 @ 0x5592925ad800] mmco: unref short failure
[h264 @ 0x5592925ad800] mmco: unref short failure
[h264 @ 0x55d415466cc0] mmco: unref short failure
[h264 @ 0x55d415466cc0] mmco: unref short failure
[h264 @ 0x555f26796200] mmco: unref short failure
[h264 @ 0x555f26796200] mmco: unref short failure
[h264 @ 0x55d4087fd680] mmco: unref short failure
 19%|█▊        | 272/1455 [2:49:19<5:40:56, 17.29s/it] 19%|█▉        | 273/1455 [2:49:28<4:49:35, 14.70s/it][h264 @ 0x559282c3c180] mmco: unref short failure
[h264 @ 0x559282c3c180] mmco: unref short failure
[h264 @ 0x555f392eb200] mmco: unref short failure
[h264 @ 0x5592939685c0] mmco: unref short failure
[h264 @ 0x5592939685c0] mmco: unref short failure
[h264 @ 0x5592939685c0] mmco: unref short failure
[h264 @ 0x5592939685c0] mmco: unref short failure
[h264 @ 0x555f392eb200] mmco: unref short failure
[h264 @ 0x555f392eb200] mmco: unref short failure
[h264 @ 0x55d41aa06f40] mmco: unref short failure
[h264 @ 0x555f26608a00] mmco: unref short failure
[h264 @ 0x555f26608a00] mmco: unref short failure
[h264 @ 0x55d40e3de640] mmco: unref short failure
[h264 @ 0x55d40e3de640] mmco: unref short failure
[h264 @ 0x555f2666de40] mmco: unref short failure
[h264 @ 0x55d40fca4500] mmco: unref short failure
[h264 @ 0x55d40fca4500] mmco: unref short failure
[h264 @ 0x55d4269fb240] mmco: unref short failure
[h264 @ 0x5592953e4ac0] mmco: unref short failure
[h264 @ 0x5592953e4ac0] mmco: unref short failure
[h264 @ 0x559f66c6e800] mmco: unref short failure
[h264 @ 0x559f66c6e800] mmco: unref short failure
[h264 @ 0x559f59e3c540] mmco: unref short failure
[h264 @ 0x559f59e3c540] mmco: unref short failure
[h264 @ 0x5592933b9a40] mmco: unref short failure
[h264 @ 0x555f597580c0] mmco: unref short failure
[h264 @ 0x555f597580c0] mmco: unref short failure
[h264 @ 0x555f392eb200] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x55d4061b6c80] mmco: unref short failure
[h264 @ 0x555f266def80] mmco: unref short failure
[h264 @ 0x555f266def80] mmco: unref short failure
[h264 @ 0x55d402f24c00] mmco: unref short failure
[h264 @ 0x55d402f24c00] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x559296744840] mmco: unref short failure
[h264 @ 0x555f56fcea00] mmco: unref short failure
[h264 @ 0x559f85ade340] mmco: unref short failure
[h264 @ 0x559f85ade340] mmco: unref short failure
[h264 @ 0x559f85ade340] mmco: unref short failure
[h264 @ 0x559f85ade340] mmco: unref short failure
[h264 @ 0x55d403479240] mmco: unref short failure
[h264 @ 0x55d403479240] mmco: unref short failure
[h264 @ 0x559f7108a880] mmco: unref short failure
[h264 @ 0x559f7108a880] mmco: unref short failure
[h264 @ 0x555f29e2b900] mmco: unref short failure
[h264 @ 0x555f29e2b900] mmco: unref short failure
09/17/2024 02:32:32 - INFO - __main__ -   current idx _Z6qrnWrgYM.80 from finetune_area returns wrong image/video, use 40802 instead.
[h264 @ 0x559f807f7c40] mmco: unref short failure
[h264 @ 0x559f807f7c40] mmco: unref short failure
[h264 @ 0x55927dc621c0] mmco: unref short failure
[h264 @ 0x55927dfce700] mmco: unref short failure
[h264 @ 0x55d42b09f440] mmco: unref short failure
[h264 @ 0x55d42b09f440] mmco: unref short failure
[h264 @ 0x55d42b09f440] mmco: unref short failure
[h264 @ 0x55d42b09f440] mmco: unref short failure
[h264 @ 0x5592915d2e40] mmco: unref short failure
[h264 @ 0x559f5a14e500] mmco: unref short failure
[h264 @ 0x559f59d66940] mmco: unref short failure
[h264 @ 0x559f59d66940] mmco: unref short failure
[h264 @ 0x559f5b7ca540] mmco: unref short failure
[h264 @ 0x559f5b7ca540] mmco: unref short failure
[h264 @ 0x559f752f1700] mmco: unref short failure
[h264 @ 0x559f752f1700] mmco: unref short failure
not have audios CqzowavAOpc.38
 19%|█▉        | 274/1455 [2:53:08<25:01:21, 76.28s/it] 19%|█▉        | 275/1455 [2:53:17<18:24:41, 56.17s/it][h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x5592a36c71c0] mmco: unref short failure
[h264 @ 0x55d42b09f440] mmco: unref short failure
[h264 @ 0x55928acee080] mmco: unref short failure
[h264 @ 0x55928acee080] mmco: unref short failure
[h264 @ 0x55d4191dd180] mmco: unref short failure
 19%|█▉        | 276/1455 [2:53:27<13:46:45, 42.07s/it][h264 @ 0x5592aa0bce40] mmco: unref short failure
[h264 @ 0x5592aa0bce40] mmco: unref short failure
[h264 @ 0x559f5b2e1040] mmco: unref short failure
[h264 @ 0x5592b3ac6700] mmco: unref short failure
 19%|█▉        | 277/1455 [2:53:36<10:32:48, 32.23s/it][h264 @ 0x55d427f1f780] mmco: unref short failure
[h264 @ 0x555f2670a100] mmco: unref short failure
[h264 @ 0x555f43300d00] mmco: unref short failure
[h264 @ 0x555f43300d00] mmco: unref short failure
[h264 @ 0x5592a718ea80] mmco: unref short failure
[h264 @ 0x5592a718ea80] mmco: unref short failure
[h264 @ 0x5592953e4ac0] mmco: unref short failure
 19%|█▉        | 278/1455 [2:54:07<10:23:56, 31.81s/it][h264 @ 0x559f5f1fe780] mmco: unref short failure
[h264 @ 0x555f33672c80] mmco: unref short failure
[h264 @ 0x559f6c915bc0] mmco: unref short failure
[h264 @ 0x55d411e4aa00] mmco: unref short failure
[h264 @ 0x55d411e4aa00] mmco: unref short failure
 19%|█▉        | 279/1455 [2:54:16<8:11:09, 25.06s/it] [h264 @ 0x55928a6dd400] mmco: unref short failure
 19%|█▉        | 280/1455 [2:54:25<6:37:51, 20.32s/it] 19%|█▉        | 281/1455 [2:54:34<5:27:44, 16.75s/it][h264 @ 0x55d41df41980] mmco: unref short failure
[h264 @ 0x55d41df41980] mmco: unref short failure
[h264 @ 0x559f65d22980] mmco: unref short failure
[h264 @ 0x559f65d22980] mmco: unref short failure
[h264 @ 0x555f392eb200] mmco: unref short failure
[h264 @ 0x559f5a10f080] mmco: unref short failure
[h264 @ 0x559f5a10f080] mmco: unref short failure
[h264 @ 0x555f2eee4a40] mmco: unref short failure
[h264 @ 0x5592b3ac6700] mmco: unref short failure
[h264 @ 0x559f6ad060c0] mmco: unref short failure
[h264 @ 0x559f5a049000] mmco: unref short failure
[h264 @ 0x559f5a049000] mmco: unref short failure
[h264 @ 0x55927e0fb140] mmco: unref short failure
[h264 @ 0x55927e0fb140] mmco: unref short failure
[h264 @ 0x55d40ecce380] mmco: unref short failure
[h264 @ 0x55d40ecce380] mmco: unref short failure
[h264 @ 0x55d40ecce380] mmco: unref short failure
[h264 @ 0x555f4fef1500] mmco: unref short failure
[h264 @ 0x55d41948aa40] mmco: unref short failure
[h264 @ 0x55d41948aa40] mmco: unref short failure
[h264 @ 0x55d4225904c0] mmco: unref short failure
[h264 @ 0x55d4225904c0] mmco: unref short failure
[h264 @ 0x559287a5da00] mmco: unref short failure
[h264 @ 0x55d4083b2000] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x559f64fb6f80] mmco: unref short failure
[h264 @ 0x55d411e4aa00] mmco: unref short failure
[h264 @ 0x55d411e4aa00] mmco: unref short failure
[h264 @ 0x555f43300d00] mmco: unref short failure
[h264 @ 0x555f343e9f00] mmco: unref short failure
[h264 @ 0x559f7a1eba40] mmco: unref short failure
[h264 @ 0x559f7a1eba40] mmco: unref short failure
[h264 @ 0x559282f50d40] mmco: unref short failure
09/17/2024 02:36:33 - INFO - __main__ -   current idx _wZn-Jd_Dhg.25 from finetune_area returns wrong image/video, use 103002 instead.
[h264 @ 0x55929490b640] mmco: unref short failure
[h264 @ 0x55929490b640] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x55d402ac9a80] mmco: unref short failure
[h264 @ 0x55d402ac9a80] mmco: unref short failure
[h264 @ 0x55d41d8de0c0] mmco: unref short failure
[h264 @ 0x55d41d8de0c0] mmco: unref short failure
[h264 @ 0x5592a1df27c0] mmco: unref short failure
[h264 @ 0x5592a1df27c0] mmco: unref short failure
[h264 @ 0x559f5f860b40] mmco: unref short failure
[h264 @ 0x555f4f129840] mmco: unref short failure
[h264 @ 0x55d40df71440] mmco: unref short failure
[h264 @ 0x55d40df71440] mmco: unref short failure
[h264 @ 0x559f5a0f8480] mmco: unref short failure
[h264 @ 0x559f5a0f8480] mmco: unref short failure
[h264 @ 0x5592a718ea80] mmco: unref short failure
[h264 @ 0x5592a718ea80] mmco: unref short failure
[h264 @ 0x559f7c311000] mmco: unref short failure
[h264 @ 0x559f7c311000] mmco: unref short failure
[h264 @ 0x555f34803480] mmco: unref short failure
[h264 @ 0x555f34803480] mmco: unref short failure
[h264 @ 0x55928f60d600] mmco: unref short failure
[h264 @ 0x55928f60d600] mmco: unref short failure
[h264 @ 0x55d40dc01200] mmco: unref short failure
[h264 @ 0x55d40dc01200] mmco: unref short failure
[h264 @ 0x559f6ad060c0] mmco: unref short failure
[h264 @ 0x559f6ad060c0] mmco: unref short failure
[h264 @ 0x555f26724b00] mmco: unref short failure
[h264 @ 0x555f26724b00] mmco: unref short failure
[h264 @ 0x555f40a7d080] mmco: unref short failure
[h264 @ 0x559f7d6b5b40] mmco: unref short failure
[h264 @ 0x559f7d6b5b40] mmco: unref short failure
[h264 @ 0x55d407806e80] mmco: unref short failure
[h264 @ 0x55d407806e80] mmco: unref short failure
[h264 @ 0x559f59e3c540] mmco: unref short failure
[h264 @ 0x55d419b558c0] mmco: unref short failure
 19%|█▉        | 282/1455 [2:58:02<24:13:18, 74.34s/it][h264 @ 0x55929490b640] mmco: unref short failure
 19%|█▉        | 283/1455 [2:58:11<17:44:56, 54.52s/it] 20%|█▉        | 284/1455 [2:58:18<13:10:53, 40.52s/it][h264 @ 0x555f51929340] mmco: unref short failure
 20%|█▉        | 285/1455 [2:58:26<9:54:30, 30.49s/it] [h264 @ 0x55d409f99b00] mmco: unref short failure
[h264 @ 0x55d409f99b00] mmco: unref short failure
 20%|█▉        | 286/1455 [2:58:32<7:34:28, 23.33s/it][h264 @ 0x559f59e194c0] mmco: unref short failure
[h264 @ 0x559f59e194c0] mmco: unref short failure
[h264 @ 0x559f59e194c0] mmco: unref short failure
[h264 @ 0x559f59e194c0] mmco: unref short failure
 20%|█▉        | 287/1455 [2:58:39<5:56:33, 18.32s/it] 20%|█▉        | 288/1455 [2:58:45<4:48:31, 14.83s/it] 20%|█▉        | 289/1455 [2:58:52<4:01:02, 12.40s/it][h264 @ 0x559f59d3a040] mmco: unref short failure
[h264 @ 0x559f59ed64c0] mmco: unref short failure
[h264 @ 0x559f59ed44c0] mmco: unref short failure
[h264 @ 0x559f59ed44c0] mmco: unref short failure
 20%|█▉        | 290/1455 [2:59:22<5:42:00, 17.61s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x559333905a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d4b6ffeb00] mmco: unref short failure
[h264 @ 0x55d4b7889540] mmco: unref short failure
[h264 @ 0x55d4b7889540] mmco: unref short failure
[h264 @ 0x555fd9311640] mmco: unref short failure
[h264 @ 0x55d4b79472c0] mmco: unref short failure
[h264 @ 0x55d4b79472c0] mmco: unref short failure
[h264 @ 0x55d4b79472c0] mmco: unref short failure
[h264 @ 0x55d4b79472c0] mmco: unref short failure
[h264 @ 0x559332fba300] mmco: unref short failure
[h264 @ 0x55d4b7033400] mmco: unref short failure
[h264 @ 0x55d4b7033400] mmco: unref short failure
[h264 @ 0x555fd9dc20c0] mmco: unref short failure
[h264 @ 0x555fd9dc20c0] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
[h264 @ 0x55d4b846e000] mmco: unref short failure
09/17/2024 02:40:37 - INFO - __main__ -   current idx PHgL4zWa_eU.158 from finetune_area returns wrong image/video, use 114039 instead.
[h264 @ 0x55a00e562500] mmco: unref short failure
[h264 @ 0x55d4b7175700] mmco: unref short failure
[h264 @ 0x55d4b7175700] mmco: unref short failure
[h264 @ 0x555fdd141000] mmco: unref short failure
[h264 @ 0x555fdd141000] mmco: unref short failure
[h264 @ 0x55d4b7050a80] mmco: unref short failure
[h264 @ 0x55d4b7050a80] mmco: unref short failure
[h264 @ 0x55a012cdac80] mmco: unref short failure
[h264 @ 0x55d4b7050a80] mmco: unref short failure
[h264 @ 0x55d4b7050a80] mmco: unref short failure
[h264 @ 0x55d4b79b6480] mmco: unref short failure
[h264 @ 0x55d4b7489180] mmco: unref short failure
[h264 @ 0x555fd9f66540] mmco: unref short failure
[h264 @ 0x555fd9f66540] mmco: unref short failure
[h264 @ 0x559336494780] mmco: unref short failure
[h264 @ 0x555fd9e05780] mmco: unref short failure
[h264 @ 0x555fd9e05780] mmco: unref short failure
[h264 @ 0x555fd9eac700] mmco: unref short failure
[h264 @ 0x555fd9eac700] mmco: unref short failure
[h264 @ 0x55d4bd555480] mmco: unref short failure
[h264 @ 0x55d4bd555480] mmco: unref short failure
[h264 @ 0x55d4bd555480] mmco: unref short failure
[h264 @ 0x55d4bd555480] mmco: unref short failure
[h264 @ 0x559334f91400] mmco: unref short failure
[h264 @ 0x559333a18d80] mmco: unref short failure
[h264 @ 0x555fdc19a940] mmco: unref short failure
[h264 @ 0x555fdc19a940] mmco: unref short failure
09/17/2024 02:42:00 - INFO - __main__ -   current idx A2e7HyCQqvE.54 from finetune_area returns wrong image/video, use 107035 instead.
[h264 @ 0x55933f451440] mmco: unref short failure
[h264 @ 0x559334d75640] mmco: unref short failure
[h264 @ 0x559334d75640] mmco: unref short failure
[h264 @ 0x55d4b7f01480] mmco: unref short failure
[h264 @ 0x55d4b7f01480] mmco: unref short failure
[h264 @ 0x55a0199c2fc0] mmco: unref short failure
[h264 @ 0x55a0199c2fc0] mmco: unref short failure
[h264 @ 0x559333c6aa00] mmco: unref short failure
[h264 @ 0x559333c6aa00] mmco: unref short failure
[h264 @ 0x55a00ef21840] mmco: unref short failure
[h264 @ 0x55d4bae3cfc0] mmco: unref short failure
[h264 @ 0x555fdcec49c0] mmco: unref short failure
[h264 @ 0x555fdcec49c0] mmco: unref short failure
[h264 @ 0x55a01d482ac0] mmco: unref short failure
[h264 @ 0x55934044a0c0] mmco: unref short failure
[h264 @ 0x55934044a0c0] mmco: unref short failure
[h264 @ 0x555fe831a100] mmco: unref short failure
[h264 @ 0x555fe831a100] mmco: unref short failure
[h264 @ 0x55a00f190c40] mmco: unref short failure
[h264 @ 0x55a00f3e8d00] mmco: unref short failure
[h264 @ 0x55d4c2220f00] mmco: unref short failure
[h264 @ 0x555fe4976480] mmco: unref short failure
[h264 @ 0x555fe4976480] mmco: unref short failure
[h264 @ 0x555fdcdddac0] mmco: unref short failure
[h264 @ 0x555fdcdddac0] mmco: unref short failure
09/17/2024 02:43:35 - INFO - __main__ -   current idx KQezF6-NY_o.24 from finetune_area returns wrong image/video, use 67673 instead.
[h264 @ 0x555fdb77cd80] mmco: unref short failure
[h264 @ 0x555fdb77cd80] mmco: unref short failure
[h264 @ 0x555fde9f8d00] mmco: unref short failure
[h264 @ 0x555fde9f8d00] mmco: unref short failure
[h264 @ 0x55d4b7ae1900] mmco: unref short failure
[h264 @ 0x55d4b7ae1900] mmco: unref short failure
[h264 @ 0x55d4b7ae1900] mmco: unref short failure
[h264 @ 0x55d4b7ae1900] mmco: unref short failure
[h264 @ 0x55d4bd8a0c80] mmco: unref short failure
[h264 @ 0x55d4bd8a0c80] mmco: unref short failure
[h264 @ 0x55d4b8f297c0] mmco: unref short failure
[h264 @ 0x55d4b8f297c0] mmco: unref short failure
[h264 @ 0x559333dab600] mmco: unref short failure
[h264 @ 0x555fdb725b40] mmco: unref short failure
[h264 @ 0x555fdb725b40] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x559335ca4f80] mmco: unref short failure
[h264 @ 0x55934ac67240] mmco: unref short failure
[h264 @ 0x55a0194d8b80] mmco: unref short failure
[h264 @ 0x55a0194d8b80] mmco: unref short failure
[h264 @ 0x55a0194d8b80] mmco: unref short failure
[h264 @ 0x55a0194d8b80] mmco: unref short failure
[h264 @ 0x55933359f200] mmco: unref short failure
[h264 @ 0x55933359f200] mmco: unref short failure
[h264 @ 0x55a01336d640] mmco: unref short failure
[h264 @ 0x55a01336d640] mmco: unref short failure
[h264 @ 0x55d4bb91e940] mmco: unref short failure
[h264 @ 0x55d4bb91e940] mmco: unref short failure
[h264 @ 0x55d4bb91e940] mmco: unref short failure
[h264 @ 0x55d4bb91e940] mmco: unref short failure
[h264 @ 0x55d4bb91e940] mmco: unref short failure
[h264 @ 0x555fee1637c0] mmco: unref short failure
[h264 @ 0x55934284ba80] mmco: unref short failure
[h264 @ 0x55934284ba80] mmco: unref short failure
[h264 @ 0x555fe2aefe80] mmco: unref short failure
 20%|██        | 291/1455 [3:04:44<35:13:14, 108.93s/it][h264 @ 0x559338733780] mmco: unref short failure
 20%|██        | 292/1455 [3:04:52<25:27:18, 78.80s/it] [h264 @ 0x55a017f8dc00] mmco: unref short failure
[h264 @ 0x55a017f8dc00] mmco: unref short failure
 20%|██        | 293/1455 [3:05:01<18:39:52, 57.82s/it][h264 @ 0x555fdb639b00] mmco: unref short failure
[h264 @ 0x555fdb639b00] mmco: unref short failure
[h264 @ 0x55a012629ec0] mmco: unref short failure
[h264 @ 0x55a012629ec0] mmco: unref short failure
[h264 @ 0x5593454b0c80] mmco: unref short failure
[h264 @ 0x5593454b0c80] mmco: unref short failure
 20%|██        | 294/1455 [3:05:10<13:51:31, 42.97s/it][h264 @ 0x555fed1e7080] mmco: unref short failure
[h264 @ 0x555fed1e7080] mmco: unref short failure
 20%|██        | 295/1455 [3:05:18<10:29:26, 32.56s/it][h264 @ 0x55a01825b700] mmco: unref short failure
[h264 @ 0x55a01825b700] mmco: unref short failure
[h264 @ 0x555fdf62ff80] mmco: unref short failure
 20%|██        | 296/1455 [3:05:27<8:10:57, 25.42s/it]  20%|██        | 297/1455 [3:05:35<6:29:34, 20.19s/it][h264 @ 0x55933b9ae200] mmco: unref short failure
 20%|██        | 298/1455 [3:05:44<5:23:38, 16.78s/it][h264 @ 0x55934aaf61c0] mmco: unref short failure
[h264 @ 0x55a017d04f00] mmco: unref short failure
[h264 @ 0x55a018270980] mmco: unref short failure
[h264 @ 0x55a018270980] mmco: unref short failure
09/17/2024 02:46:10 - INFO - __main__ -   current idx zpVEmyBr_Hg.14 from finetune_area returns wrong image/video, use 88258 instead.
[h264 @ 0x555fdce94440] mmco: unref short failure
not have audios GAwav3sZcGw.4
[h264 @ 0x55933439cc00] mmco: unref short failure
[h264 @ 0x55933439cc00] mmco: unref short failure
[h264 @ 0x55d4b7e5cb00] mmco: unref short failure
[h264 @ 0x55d4b7e5cb00] mmco: unref short failure
[h264 @ 0x5593460054c0] mmco: unref short failure
[h264 @ 0x559333af0600] mmco: unref short failure
[h264 @ 0x555fe52cb4c0] mmco: unref short failure
[h264 @ 0x555fe52cb4c0] mmco: unref short failure
[h264 @ 0x555fe5cbe600] mmco: unref short failure
[h264 @ 0x555fe5cbe600] mmco: unref short failure
[h264 @ 0x559337f11d80] mmco: unref short failure
[h264 @ 0x559337f11d80] mmco: unref short failure
[h264 @ 0x55a0111b1700] mmco: unref short failure
[h264 @ 0x55a0111b1700] mmco: unref short failure
09/17/2024 02:46:56 - INFO - __main__ -   current idx -c6ksbh044A.74 from finetune_area returns wrong image/video, use 44482 instead.
[h264 @ 0x55d4b93d2000] mmco: unref short failure
[h264 @ 0x55d4cc2a2280] mmco: unref short failure
[h264 @ 0x559336cf5880] mmco: unref short failure
[h264 @ 0x559336cf5880] mmco: unref short failure
[h264 @ 0x559336cf5880] mmco: unref short failure
[h264 @ 0x559336cf5880] mmco: unref short failure
[h264 @ 0x55d4c9b1b9c0] mmco: unref short failure
[h264 @ 0x55d4c9b1b9c0] mmco: unref short failure
[h264 @ 0x55d4c9b67d80] mmco: unref short failure
[h264 @ 0x55d4c9b67d80] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x559340b12100] mmco: unref short failure
[h264 @ 0x555fdc6826c0] mmco: unref short failure
[h264 @ 0x555fdc6826c0] mmco: unref short failure
[h264 @ 0x55933409c740] mmco: unref short failure
[h264 @ 0x55933409c740] mmco: unref short failure
[h264 @ 0x555fe6751a00] mmco: unref short failure
[h264 @ 0x55934252bdc0] mmco: unref short failure
[h264 @ 0x555fedf4f3c0] mmco: unref short failure
[h264 @ 0x555fedf4f3c0] mmco: unref short failure
[h264 @ 0x55a014e8c900] mmco: unref short failure
[h264 @ 0x55a014e8c900] mmco: unref short failure
[h264 @ 0x55a014e8c900] mmco: unref short failure
[h264 @ 0x55a014e8c900] mmco: unref short failure
[h264 @ 0x555fdf568100] mmco: unref short failure
[h264 @ 0x555fdb3897c0] mmco: unref short failure
[h264 @ 0x555fdb3897c0] mmco: unref short failure
[h264 @ 0x555fddf82e00] mmco: unref short failure
[h264 @ 0x55d4d1269bc0] mmco: unref short failure
[h264 @ 0x555fe816a300] mmco: unref short failure
[h264 @ 0x555fe816a300] mmco: unref short failure
09/17/2024 02:48:43 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 105242 instead.
[h264 @ 0x55d4bbfe1d80] mmco: unref short failure
[h264 @ 0x55d4bbfe1d80] mmco: unref short failure
[h264 @ 0x55d4bd27d580] mmco: unref short failure
[h264 @ 0x559337940800] mmco: unref short failure
[h264 @ 0x559337940800] mmco: unref short failure
[h264 @ 0x555feda05f40] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x55d4ca86cf80] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x559333b2a480] mmco: unref short failure
[h264 @ 0x559333b2a480] mmco: unref short failure
[h264 @ 0x55d4b70c5280] mmco: unref short failure
[h264 @ 0x555ff0001500] mmco: unref short failure
[h264 @ 0x55d4d45f7f80] mmco: unref short failure
[h264 @ 0x55d4d45f7f80] mmco: unref short failure
[h264 @ 0x55d4d45f7f80] mmco: unref short failure
[h264 @ 0x55d4d45f7f80] mmco: unref short failure
[h264 @ 0x555fd8a7a200] mmco: unref short failure
[h264 @ 0x555fd8a7a200] mmco: unref short failure
[h264 @ 0x5593457d6880] mmco: unref short failure
[h264 @ 0x5593457d6880] mmco: unref short failure
 21%|██        | 299/1455 [3:09:32<25:45:50, 80.23s/it]09/17/2024 02:49:54 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:49:54 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55934c8c7100] mmco: unref short failure
[h264 @ 0x55934c8c7100] mmco: unref short failure
[h264 @ 0x55d4c30aee40] mmco: unref short failure
[h264 @ 0x555fee08a680] mmco: unref short failure
[h264 @ 0x55d4d1c3b080] mmco: unref short failure
[h264 @ 0x55d4d1c3b080] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff7495f00] mmco: unref short failure
[h264 @ 0x555ff7495f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555fef75ad80] mmco: unref short failure
[h264 @ 0x55a02d8ff800] mmco: unref short failure
[h264 @ 0x559337f296c0] mmco: unref short failure
[h264 @ 0x55a01b4d7840] mmco: unref short failure
[h264 @ 0x555fe2d20a80] mmco: unref short failure
[h264 @ 0x55a012613080] mmco: unref short failure
[h264 @ 0x55a012613080] mmco: unref short failure
[h264 @ 0x559344787500] mmco: unref short failure
[h264 @ 0x559344787500] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:40,  1.37it/s][A
  1%|          | 2/221 [00:01<02:09,  1.70it/s][A
  1%|▏         | 3/221 [00:01<01:48,  2.01it/s][A
  2%|▏         | 4/221 [00:01<01:22,  2.63it/s][A
  2%|▏         | 5/221 [00:02<01:09,  3.12it/s][A
  3%|▎         | 6/221 [00:02<01:02,  3.43it/s][A
  3%|▎         | 7/221 [00:02<00:58,  3.64it/s][A
  4%|▎         | 8/221 [00:02<01:11,  2.96it/s][A
  4%|▍         | 9/221 [00:03<01:08,  3.11it/s][A
  5%|▍         | 10/221 [00:03<01:23,  2.54it/s][A
  5%|▍         | 11/221 [00:04<01:11,  2.93it/s][A
  5%|▌         | 12/221 [00:04<01:24,  2.49it/s][A
  6%|▌         | 13/221 [00:05<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:05<01:46,  1.95it/s][A
  7%|▋         | 15/221 [00:05<01:25,  2.41it/s][A[h264 @ 0x555ff545d940] mmco: unref short failure

  7%|▋         | 16/221 [00:06<01:30,  2.27it/s][A[h264 @ 0x55a02f42f800] mmco: unref short failure

  8%|▊         | 17/221 [00:07<01:52,  1.81it/s][A
  8%|▊         | 18/221 [00:07<01:40,  2.03it/s][A
  9%|▊         | 19/221 [00:07<01:21,  2.48it/s][A
  9%|▉         | 20/221 [00:08<01:22,  2.43it/s][A
 10%|▉         | 21/221 [00:08<01:14,  2.67it/s][A
 10%|▉         | 22/221 [00:08<01:09,  2.85it/s][A
 10%|█         | 23/221 [00:08<00:56,  3.52it/s][A
 11%|█         | 24/221 [00:09<00:48,  4.10it/s][A
 11%|█▏        | 25/221 [00:09<00:44,  4.41it/s][A
 12%|█▏        | 26/221 [00:09<01:02,  3.12it/s][A
 12%|█▏        | 27/221 [00:09<00:50,  3.85it/s][A
 13%|█▎        | 28/221 [00:10<01:11,  2.69it/s][A
 13%|█▎        | 29/221 [00:11<01:27,  2.20it/s][A
 14%|█▎        | 30/221 [00:11<01:16,  2.50it/s][A
 14%|█▍        | 31/221 [00:11<01:16,  2.48it/s][A
 14%|█▍        | 32/221 [00:12<00:59,  3.17it/s][A
 15%|█▍        | 33/221 [00:12<00:53,  3.49it/s][A
 15%|█▌        | 34/221 [00:12<00:51,  3.61it/s][A
 16%|█▌        | 35/221 [00:12<00:50,  3.71it/s][A
 16%|█▋        | 36/221 [00:13<00:57,  3.20it/s][A
 17%|█▋        | 37/221 [00:13<01:12,  2.53it/s][A
 17%|█▋        | 38/221 [00:14<01:13,  2.47it/s][A[h264 @ 0x55d4cc6d4fc0] mmco: unref short failure

 18%|█▊        | 39/221 [00:14<01:11,  2.53it/s][A
 18%|█▊        | 40/221 [00:14<01:12,  2.51it/s][A
 19%|█▊        | 41/221 [00:15<00:59,  3.03it/s][A
 19%|█▉        | 42/221 [00:15<01:05,  2.74it/s][A
 19%|█▉        | 43/221 [00:15<00:55,  3.23it/s][A
 20%|█▉        | 44/221 [00:15<00:47,  3.72it/s][A[h264 @ 0x55d4c41d7ac0] mmco: unref short failure
[h264 @ 0x55d4c41d7ac0] mmco: unref short failure

 20%|██        | 45/221 [00:16<01:12,  2.43it/s][A
 21%|██        | 46/221 [00:17<01:15,  2.33it/s][A
 21%|██▏       | 47/221 [00:17<01:15,  2.29it/s][A
 22%|██▏       | 48/221 [00:17<01:01,  2.82it/s][A
 22%|██▏       | 49/221 [00:18<01:30,  1.89it/s][A
 23%|██▎       | 50/221 [00:19<01:27,  1.95it/s][A
 23%|██▎       | 51/221 [00:19<01:08,  2.50it/s][A
 24%|██▎       | 52/221 [00:19<01:00,  2.81it/s][A
 24%|██▍       | 53/221 [00:19<00:51,  3.29it/s][A09/17/2024 02:52:32 - INFO - __main__ -   current idx S4W-P5aCWJs.99 from finetune_area returns wrong image/video, use 78849 instead.

 24%|██▍       | 54/221 [00:21<01:50,  1.52it/s][A
 25%|██▍       | 55/221 [00:21<01:34,  1.75it/s][A
 25%|██▌       | 56/221 [00:21<01:18,  2.11it/s][A
 26%|██▌       | 57/221 [00:22<01:06,  2.47it/s][A
 26%|██▌       | 58/221 [00:22<01:06,  2.46it/s][A
 27%|██▋       | 59/221 [00:22<00:59,  2.71it/s][A
 27%|██▋       | 60/221 [00:23<01:17,  2.08it/s][A
 28%|██▊       | 61/221 [00:23<01:09,  2.32it/s][A
 28%|██▊       | 62/221 [00:24<01:04,  2.46it/s][A
 29%|██▊       | 63/221 [00:24<00:56,  2.77it/s][A
 29%|██▉       | 64/221 [00:24<00:48,  3.21it/s][A
 29%|██▉       | 65/221 [00:24<00:48,  3.22it/s][A
 30%|██▉       | 66/221 [00:25<00:52,  2.95it/s][A
 30%|███       | 67/221 [00:26<01:06,  2.32it/s][A
 31%|███       | 68/221 [00:26<00:57,  2.67it/s][A
 31%|███       | 69/221 [00:27<01:14,  2.03it/s][A
 32%|███▏      | 70/221 [00:27<01:00,  2.50it/s][A
 32%|███▏      | 71/221 [00:27<01:05,  2.28it/s][A
 33%|███▎      | 72/221 [00:28<00:58,  2.53it/s][A
 33%|███▎      | 73/221 [00:28<01:01,  2.41it/s][A
 33%|███▎      | 74/221 [00:28<00:52,  2.80it/s][A
 34%|███▍      | 75/221 [00:29<00:56,  2.58it/s][A
 34%|███▍      | 76/221 [00:29<00:45,  3.19it/s][A
 35%|███▍      | 77/221 [00:29<00:42,  3.43it/s][A
 35%|███▌      | 78/221 [00:29<00:40,  3.56it/s][A
 36%|███▌      | 79/221 [00:30<00:50,  2.80it/s][A[h264 @ 0x555ff2b0c040] mmco: unref short failure
[h264 @ 0x555ff2b0c040] mmco: unref short failure

 36%|███▌      | 80/221 [00:30<00:50,  2.81it/s][A
 37%|███▋      | 81/221 [00:30<00:46,  3.04it/s][A
 37%|███▋      | 82/221 [00:31<01:02,  2.24it/s][A
 38%|███▊      | 83/221 [00:32<01:00,  2.28it/s][A
 38%|███▊      | 84/221 [00:32<00:52,  2.59it/s][A
 38%|███▊      | 85/221 [00:32<00:42,  3.21it/s][A
 39%|███▉      | 86/221 [00:32<00:43,  3.09it/s][A
 39%|███▉      | 87/221 [00:33<00:52,  2.53it/s][A
 40%|███▉      | 88/221 [00:33<01:00,  2.20it/s][A
 40%|████      | 89/221 [00:34<00:57,  2.29it/s][A
 41%|████      | 90/221 [00:34<00:49,  2.66it/s][A
 41%|████      | 91/221 [00:34<00:40,  3.20it/s][A
 42%|████▏     | 92/221 [00:35<00:38,  3.36it/s][A
 42%|████▏     | 93/221 [00:35<00:42,  2.99it/s][A
 43%|████▎     | 94/221 [00:35<00:37,  3.35it/s][A[h264 @ 0x55d4bccdba00] mmco: unref short failure

 43%|████▎     | 95/221 [00:36<00:38,  3.26it/s][A
 43%|████▎     | 96/221 [00:36<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:36<00:31,  3.94it/s][A
 44%|████▍     | 98/221 [00:36<00:32,  3.82it/s][A
 45%|████▍     | 99/221 [00:36<00:27,  4.45it/s][A
 45%|████▌     | 100/221 [00:37<00:29,  4.12it/s][A[h264 @ 0x555ff5495100] mmco: unref short failure
[h264 @ 0x555ff5495100] mmco: unref short failure

 46%|████▌     | 101/221 [00:37<00:25,  4.76it/s][A[h264 @ 0x555ff5495100] mmco: unref short failure
[h264 @ 0x555ff5495100] mmco: unref short failure

 46%|████▌     | 102/221 [00:37<00:27,  4.35it/s][A
 47%|████▋     | 103/221 [00:37<00:26,  4.48it/s][A
 47%|████▋     | 104/221 [00:37<00:22,  5.16it/s][A
 48%|████▊     | 105/221 [00:38<00:26,  4.39it/s][A
 48%|████▊     | 106/221 [00:38<00:45,  2.53it/s][A
 48%|████▊     | 107/221 [00:39<00:36,  3.10it/s][A
 49%|████▉     | 108/221 [00:39<00:34,  3.28it/s][A
 49%|████▉     | 109/221 [00:39<00:36,  3.10it/s][A
 50%|████▉     | 110/221 [00:40<00:39,  2.80it/s][A
 50%|█████     | 111/221 [00:40<00:42,  2.57it/s][A
 51%|█████     | 112/221 [00:40<00:34,  3.12it/s][A
 51%|█████     | 113/221 [00:41<00:35,  3.03it/s][A
 52%|█████▏    | 114/221 [00:41<00:27,  3.83it/s][A
 52%|█████▏    | 115/221 [00:41<00:23,  4.59it/s][A
 52%|█████▏    | 116/221 [00:43<01:15,  1.38it/s][A
 53%|█████▎    | 117/221 [00:43<01:04,  1.61it/s][A
 53%|█████▎    | 118/221 [00:43<00:54,  1.90it/s][A
 54%|█████▍    | 119/221 [00:44<00:47,  2.15it/s][A
 54%|█████▍    | 120/221 [00:44<00:43,  2.32it/s][A
 55%|█████▍    | 121/221 [00:44<00:36,  2.74it/s][A
 55%|█████▌    | 122/221 [00:45<00:32,  3.03it/s][A
 56%|█████▌    | 123/221 [00:45<00:29,  3.33it/s][A
 56%|█████▌    | 124/221 [00:45<00:30,  3.22it/s][A
 57%|█████▋    | 125/221 [00:46<00:33,  2.86it/s][A
 57%|█████▋    | 126/221 [00:46<00:31,  3.03it/s][A
 57%|█████▋    | 127/221 [00:46<00:35,  2.61it/s][A
 58%|█████▊    | 128/221 [00:47<00:36,  2.56it/s][A
 58%|█████▊    | 129/221 [00:47<00:29,  3.13it/s][A
 59%|█████▉    | 130/221 [00:47<00:30,  3.00it/s][A[h264 @ 0x55d4d070f800] mmco: unref short failure

 59%|█████▉    | 131/221 [00:48<00:27,  3.24it/s][A
 60%|█████▉    | 132/221 [00:48<00:23,  3.77it/s][A
 60%|██████    | 133/221 [00:48<00:30,  2.89it/s][A[h264 @ 0x55934203e2c0] mmco: unref short failure

 61%|██████    | 134/221 [00:48<00:26,  3.31it/s][A
 61%|██████    | 135/221 [00:49<00:26,  3.24it/s][A
 62%|██████▏   | 136/221 [00:49<00:28,  2.93it/s][A
 62%|██████▏   | 137/221 [00:49<00:25,  3.27it/s][A
 62%|██████▏   | 138/221 [00:50<00:27,  2.99it/s][A
 63%|██████▎   | 139/221 [00:50<00:34,  2.38it/s][A
 63%|██████▎   | 140/221 [00:51<00:30,  2.65it/s][A
 64%|██████▍   | 141/221 [00:51<00:27,  2.93it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  3.04it/s][A
 65%|██████▍   | 143/221 [00:52<00:26,  2.96it/s][A
 65%|██████▌   | 144/221 [00:52<00:24,  3.15it/s][A
 66%|██████▌   | 145/221 [00:52<00:20,  3.75it/s][A
 66%|██████▌   | 146/221 [00:52<00:16,  4.48it/s][A
 67%|██████▋   | 147/221 [00:52<00:17,  4.12it/s][A
 67%|██████▋   | 148/221 [00:53<00:20,  3.62it/s][A
 67%|██████▋   | 149/221 [00:53<00:21,  3.34it/s][A
 68%|██████▊   | 150/221 [00:54<00:21,  3.24it/s][A
 68%|██████▊   | 151/221 [00:54<00:28,  2.43it/s][A
 69%|██████▉   | 152/221 [00:56<00:50,  1.36it/s][A
 69%|██████▉   | 153/221 [00:56<00:44,  1.53it/s][A
 70%|██████▉   | 154/221 [00:57<00:41,  1.62it/s][A
 70%|███████   | 155/221 [00:57<00:32,  2.03it/s][A
 71%|███████   | 156/221 [00:57<00:28,  2.25it/s][A
 71%|███████   | 157/221 [00:58<00:34,  1.85it/s][A
 71%|███████▏  | 158/221 [00:58<00:29,  2.11it/s][A
 72%|███████▏  | 159/221 [00:59<00:26,  2.35it/s][A
 72%|███████▏  | 160/221 [00:59<00:26,  2.30it/s][A
 73%|███████▎  | 161/221 [00:59<00:21,  2.81it/s][A
 73%|███████▎  | 162/221 [01:00<00:31,  1.87it/s][A
 74%|███████▍  | 163/221 [01:01<00:28,  2.03it/s][A
 74%|███████▍  | 164/221 [01:01<00:27,  2.04it/s][A
 75%|███████▍  | 165/221 [01:01<00:23,  2.39it/s][A
 75%|███████▌  | 166/221 [01:02<00:26,  2.06it/s][A
 76%|███████▌  | 167/221 [01:02<00:21,  2.47it/s][A
 76%|███████▌  | 168/221 [01:03<00:24,  2.18it/s][A
 76%|███████▋  | 169/221 [01:03<00:20,  2.54it/s][A
 77%|███████▋  | 170/221 [01:03<00:19,  2.56it/s][A
 77%|███████▋  | 171/221 [01:04<00:21,  2.30it/s][A
 78%|███████▊  | 172/221 [01:04<00:20,  2.36it/s][A
 78%|███████▊  | 173/221 [01:05<00:18,  2.64it/s][A
 79%|███████▊  | 174/221 [01:05<00:16,  2.86it/s][A
 79%|███████▉  | 175/221 [01:05<00:17,  2.56it/s][A
 80%|███████▉  | 176/221 [01:06<00:16,  2.77it/s][A
 80%|████████  | 177/221 [01:06<00:13,  3.18it/s][A
 81%|████████  | 178/221 [01:06<00:12,  3.38it/s][A
 81%|████████  | 179/221 [01:07<00:15,  2.77it/s][A
 81%|████████▏ | 180/221 [01:07<00:12,  3.35it/s][A
 82%|████████▏ | 181/221 [01:07<00:11,  3.54it/s][A
 82%|████████▏ | 182/221 [01:07<00:09,  3.91it/s][A
 83%|████████▎ | 183/221 [01:07<00:09,  4.14it/s][A
 83%|████████▎ | 184/221 [01:08<00:10,  3.56it/s][A
 84%|████████▎ | 185/221 [01:08<00:09,  3.94it/s][A
 84%|████████▍ | 186/221 [01:08<00:11,  3.09it/s][A
 85%|████████▍ | 187/221 [01:09<00:10,  3.19it/s][A
 85%|████████▌ | 188/221 [01:09<00:11,  2.90it/s][A
 86%|████████▌ | 189/221 [01:10<00:12,  2.66it/s][A[h264 @ 0x55d4cec2b940] mmco: unref short failure
[h264 @ 0x55d4cec2b940] mmco: unref short failure

 86%|████████▌ | 190/221 [01:10<00:13,  2.30it/s][A
 86%|████████▋ | 191/221 [01:10<00:11,  2.67it/s][A
 87%|████████▋ | 192/221 [01:11<00:11,  2.48it/s][A
 87%|████████▋ | 193/221 [01:11<00:09,  2.88it/s][A
 88%|████████▊ | 194/221 [01:12<00:14,  1.88it/s][A
 88%|████████▊ | 195/221 [01:13<00:14,  1.85it/s][A[h264 @ 0x559343631100] mmco: unref short failure

 89%|████████▊ | 196/221 [01:13<00:15,  1.65it/s][A
 89%|████████▉ | 197/221 [01:14<00:11,  2.08it/s][A
 90%|████████▉ | 198/221 [01:14<00:09,  2.41it/s][A
 90%|█████████ | 199/221 [01:14<00:07,  2.89it/s][A
 90%|█████████ | 200/221 [01:14<00:07,  2.81it/s][A
 91%|█████████ | 201/221 [01:15<00:06,  2.93it/s][A
 91%|█████████▏| 202/221 [01:15<00:05,  3.17it/s][A
 92%|█████████▏| 203/221 [01:15<00:05,  3.54it/s][A
 92%|█████████▏| 204/221 [01:16<00:05,  3.12it/s][A
 93%|█████████▎| 205/221 [01:16<00:04,  3.56it/s][A
 93%|█████████▎| 206/221 [01:16<00:05,  2.60it/s][A
 94%|█████████▎| 207/221 [01:17<00:05,  2.73it/s][A
 94%|█████████▍| 208/221 [01:17<00:04,  3.11it/s][A
 95%|█████████▍| 209/221 [01:17<00:03,  3.03it/s][A
 95%|█████████▌| 210/221 [01:17<00:02,  3.69it/s][A
 95%|█████████▌| 211/221 [01:18<00:03,  2.91it/s][A[h264 @ 0x559348896100] mmco: unref short failure

 96%|█████████▌| 212/221 [01:18<00:02,  3.15it/s][A[h264 @ 0x559348896100] mmco: unref short failure

 96%|█████████▋| 213/221 [01:18<00:02,  3.23it/s][A
 97%|█████████▋| 214/221 [01:19<00:02,  3.32it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  3.29it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  3.02it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  2.67it/s][A
 99%|█████████▊| 218/221 [01:20<00:01,  2.59it/s][A
 99%|█████████▉| 219/221 [01:21<00:00,  2.79it/s][A[h264 @ 0x55d4bcf800c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:23<00:01,  1.10s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.18it/s][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]
[h264 @ 0x555fdef48500] mmco: unref short failure
[h264 @ 0x555fdef48500] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:28,  2.49it/s][A
  1%|          | 2/221 [00:00<01:26,  2.52it/s][A
  1%|▏         | 3/221 [00:01<01:18,  2.79it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.86it/s][A
  2%|▏         | 5/221 [00:01<01:13,  2.94it/s][A
  3%|▎         | 6/221 [00:02<01:12,  2.96it/s][A[h264 @ 0x555fe6514bc0] mmco: unref short failure
[h264 @ 0x555fe6514bc0] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:14,  2.87it/s][A[h264 @ 0x555fe6514bc0] mmco: unref short failure
[h264 @ 0x555fe6514bc0] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:14,  2.86it/s][A
  4%|▍         | 9/221 [00:03<01:16,  2.76it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.65it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.70it/s][A
  5%|▌         | 12/221 [00:04<01:15,  2.78it/s][A
  6%|▌         | 13/221 [00:04<01:12,  2.86it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.88it/s][A
  7%|▋         | 15/221 [00:05<01:13,  2.80it/s][A
  7%|▋         | 16/221 [00:05<01:17,  2.64it/s][A
  8%|▊         | 17/221 [00:06<01:16,  2.66it/s][A
  8%|▊         | 18/221 [00:06<01:14,  2.74it/s][A
  9%|▊         | 19/221 [00:06<01:14,  2.72it/s][A
  9%|▉         | 20/221 [00:07<01:15,  2.65it/s][A
 10%|▉         | 21/221 [00:07<01:12,  2.75it/s][A
 10%|▉         | 22/221 [00:08<01:14,  2.68it/s][A
 10%|█         | 23/221 [00:08<01:16,  2.60it/s][A
 11%|█         | 24/221 [00:08<01:13,  2.69it/s][A
 11%|█▏        | 25/221 [00:09<01:10,  2.77it/s][A
 12%|█▏        | 26/221 [00:09<01:08,  2.87it/s][A
 12%|█▏        | 27/221 [00:09<01:07,  2.88it/s][A
 13%|█▎        | 28/221 [00:10<01:06,  2.88it/s][A
 13%|█▎        | 29/221 [00:10<01:11,  2.67it/s][A
 14%|█▎        | 30/221 [00:10<01:12,  2.64it/s][A
 14%|█▍        | 31/221 [00:11<01:12,  2.60it/s][A
 14%|█▍        | 32/221 [00:11<01:07,  2.80it/s][A
 15%|█▍        | 33/221 [00:12<01:08,  2.74it/s][A
 15%|█▌        | 34/221 [00:12<01:05,  2.85it/s][A
 16%|█▌        | 35/221 [00:12<01:02,  2.96it/s][A
 16%|█▋        | 36/221 [00:13<01:02,  2.95it/s][A
 17%|█▋        | 37/221 [00:13<01:05,  2.82it/s][A[h264 @ 0x55933d4a3900] mmco: unref short failure

 17%|█▋        | 38/221 [00:13<01:05,  2.81it/s][A
 18%|█▊        | 39/221 [00:14<01:03,  2.88it/s][A
 18%|█▊        | 40/221 [00:14<01:04,  2.81it/s][A
 19%|█▊        | 41/221 [00:14<01:06,  2.73it/s][A
 19%|█▉        | 42/221 [00:15<01:05,  2.74it/s][A
 19%|█▉        | 43/221 [00:15<01:03,  2.81it/s][A
 20%|█▉        | 44/221 [00:15<01:01,  2.86it/s][A
 20%|██        | 45/221 [00:16<01:01,  2.88it/s][A
 21%|██        | 46/221 [00:16<01:00,  2.89it/s][A
 21%|██▏       | 47/221 [00:16<00:59,  2.94it/s][A
 22%|██▏       | 48/221 [00:17<01:00,  2.85it/s][A
 22%|██▏       | 49/221 [00:17<01:01,  2.81it/s][A
 23%|██▎       | 50/221 [00:17<00:58,  2.90it/s][A[h264 @ 0x559337d413c0] mmco: unref short failure
[h264 @ 0x559337d413c0] mmco: unref short failure

 23%|██▎       | 51/221 [00:18<00:59,  2.87it/s][A
 24%|██▎       | 52/221 [00:18<01:02,  2.68it/s][A
 24%|██▍       | 53/221 [00:19<00:59,  2.82it/s][A
 24%|██▍       | 54/221 [00:19<01:01,  2.71it/s][A
 25%|██▍       | 55/221 [00:19<01:02,  2.65it/s][A
 25%|██▌       | 56/221 [00:20<01:00,  2.74it/s][A
 26%|██▌       | 57/221 [00:20<00:59,  2.76it/s][A
 26%|██▌       | 58/221 [00:20<00:58,  2.81it/s][A
 27%|██▋       | 59/221 [00:21<00:58,  2.75it/s][A
 27%|██▋       | 60/221 [00:21<00:56,  2.83it/s][A
 28%|██▊       | 61/221 [00:21<00:54,  2.92it/s][A
 28%|██▊       | 62/221 [00:22<00:53,  2.95it/s][A
 29%|██▊       | 63/221 [00:22<00:54,  2.92it/s][A
 29%|██▉       | 64/221 [00:22<00:56,  2.78it/s][A
 29%|██▉       | 65/221 [00:23<00:54,  2.85it/s][A
 30%|██▉       | 66/221 [00:23<00:54,  2.82it/s][A
 30%|███       | 67/221 [00:24<00:55,  2.76it/s][A
 31%|███       | 68/221 [00:24<00:54,  2.81it/s][A
 31%|███       | 69/221 [00:24<00:58,  2.60it/s][A
 32%|███▏      | 70/221 [00:25<00:57,  2.62it/s][A[h264 @ 0x55933598d4c0] mmco: unref short failure
[h264 @ 0x55933598d4c0] mmco: unref short failure

 32%|███▏      | 71/221 [00:25<00:56,  2.68it/s][A
 33%|███▎      | 72/221 [00:25<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:26<00:51,  2.88it/s][A
 33%|███▎      | 74/221 [00:26<00:50,  2.91it/s][A
 34%|███▍      | 75/221 [00:26<00:54,  2.68it/s][A
 34%|███▍      | 76/221 [00:27<00:52,  2.78it/s][A
 35%|███▍      | 77/221 [00:27<00:50,  2.85it/s][A
 35%|███▌      | 78/221 [00:28<00:51,  2.75it/s][A
 36%|███▌      | 79/221 [00:28<00:49,  2.87it/s][A
 36%|███▌      | 80/221 [00:28<00:51,  2.72it/s][A
 37%|███▋      | 81/221 [00:29<00:53,  2.61it/s][A09/17/2024 02:54:17 - INFO - __main__ -   current idx EAcu0rdv1mY.94 from finetune_area returns wrong image/video, use 28833 instead.

 37%|███▋      | 82/221 [00:29<00:50,  2.73it/s][A
 38%|███▊      | 83/221 [00:29<00:48,  2.82it/s][A
 38%|███▊      | 84/221 [00:30<00:47,  2.89it/s][A
 38%|███▊      | 85/221 [00:30<00:50,  2.71it/s][A
 39%|███▉      | 86/221 [00:30<00:50,  2.66it/s][A
 39%|███▉      | 87/221 [00:31<00:49,  2.72it/s][A
 40%|███▉      | 88/221 [00:31<00:48,  2.77it/s][A
 40%|████      | 89/221 [00:31<00:45,  2.90it/s][A[h264 @ 0x55a02630d1c0] mmco: unref short failure
[h264 @ 0x55a02630d1c0] mmco: unref short failure

[h264 @ 0x55a02630d1c0] mmco: unref short failure
[h264 @ 0x55a02630d1c0] mmco: unref short failure
 41%|████      | 90/221 [00:32<00:43,  3.00it/s][A
 41%|████      | 91/221 [00:32<00:43,  2.96it/s][A
 42%|████▏     | 92/221 [00:33<00:45,  2.87it/s][A
 42%|████▏     | 93/221 [00:33<00:43,  2.95it/s][A
 43%|████▎     | 94/221 [00:33<00:42,  2.99it/s][A
 43%|████▎     | 95/221 [00:33<00:41,  3.03it/s][A
 43%|████▎     | 96/221 [00:34<00:41,  3.02it/s][A
 44%|████▍     | 97/221 [00:34<00:41,  2.98it/s][A
 44%|████▍     | 98/221 [00:35<00:42,  2.87it/s][A
 45%|████▍     | 99/221 [00:35<00:41,  2.91it/s][A
 45%|████▌     | 100/221 [00:35<00:40,  3.00it/s][A[h264 @ 0x55a012308dc0] mmco: unref short failure
[h264 @ 0x55a012308dc0] mmco: unref short failure

 46%|████▌     | 101/221 [00:36<00:41,  2.87it/s][A
 46%|████▌     | 102/221 [00:36<00:42,  2.78it/s][A
 47%|████▋     | 103/221 [00:36<00:44,  2.65it/s][A
 47%|████▋     | 104/221 [00:37<00:45,  2.60it/s][A
 48%|████▊     | 105/221 [00:37<00:44,  2.63it/s][A
 48%|████▊     | 106/221 [00:37<00:42,  2.70it/s][A[h264 @ 0x55a011267900] mmco: unref short failure
[h264 @ 0x55a011267900] mmco: unref short failure
[h264 @ 0x55d4ba47d340] mmco: unref short failure
[h264 @ 0x55d4ba47d340] mmco: unref short failure
[h264 @ 0x55d4ba47d340] mmco: unref short failure
[h264 @ 0x55d4ba47d340] mmco: unref short failure

 48%|████▊     | 107/221 [00:38<00:40,  2.81it/s][A
 49%|████▉     | 108/221 [00:38<00:40,  2.80it/s][A
 49%|████▉     | 109/221 [00:39<00:43,  2.56it/s][A[h264 @ 0x55d4d056d240] mmco: unref short failure
[h264 @ 0x55d4d056d240] mmco: unref short failure

 50%|████▉     | 110/221 [00:39<00:44,  2.48it/s][A
 50%|█████     | 111/221 [00:39<00:41,  2.65it/s][A
 51%|█████     | 112/221 [00:40<00:40,  2.68it/s][A
 51%|█████     | 113/221 [00:40<00:41,  2.61it/s][A
 52%|█████▏    | 114/221 [00:40<00:39,  2.70it/s][A
 52%|█████▏    | 115/221 [00:41<00:38,  2.73it/s][A
 52%|█████▏    | 116/221 [00:41<00:39,  2.67it/s][A
 53%|█████▎    | 117/221 [00:42<00:37,  2.78it/s][A
 53%|█████▎    | 118/221 [00:42<00:36,  2.82it/s][A
 54%|█████▍    | 119/221 [00:42<00:36,  2.81it/s][A
 54%|█████▍    | 120/221 [00:43<00:37,  2.71it/s][A
 55%|█████▍    | 121/221 [00:43<00:35,  2.79it/s][A
 55%|█████▌    | 122/221 [00:43<00:35,  2.80it/s][A
 56%|█████▌    | 123/221 [00:44<00:35,  2.78it/s][A
 56%|█████▌    | 124/221 [00:44<00:34,  2.83it/s][A
 57%|█████▋    | 125/221 [00:44<00:32,  2.91it/s][A
 57%|█████▋    | 126/221 [00:45<00:33,  2.87it/s][A
 57%|█████▋    | 127/221 [00:45<00:32,  2.91it/s][A
 58%|█████▊    | 128/221 [00:45<00:31,  2.93it/s][A
 58%|█████▊    | 129/221 [00:46<00:30,  2.97it/s][A
 59%|█████▉    | 130/221 [00:46<00:31,  2.93it/s][A
 59%|█████▉    | 131/221 [00:46<00:30,  2.97it/s][A
 60%|█████▉    | 132/221 [00:47<00:30,  2.88it/s][A
 60%|██████    | 133/221 [00:47<00:30,  2.84it/s][A
 61%|██████    | 134/221 [00:47<00:30,  2.87it/s][A
 61%|██████    | 135/221 [00:48<00:29,  2.93it/s][A
 62%|██████▏   | 136/221 [00:48<00:30,  2.81it/s][A
 62%|██████▏   | 137/221 [00:49<00:29,  2.88it/s][A
 62%|██████▏   | 138/221 [00:49<00:29,  2.81it/s][A
 63%|██████▎   | 139/221 [00:49<00:28,  2.86it/s][A09/17/2024 02:54:38 - INFO - __main__ -   current idx MVC6nKCrOgI.12 from finetune_area returns wrong image/video, use 140769 instead.

 63%|██████▎   | 140/221 [00:50<00:28,  2.86it/s][A
 64%|██████▍   | 141/221 [00:50<00:29,  2.71it/s][A
 64%|██████▍   | 142/221 [00:50<00:28,  2.77it/s][A
 65%|██████▍   | 143/221 [00:51<00:27,  2.89it/s][A
 65%|██████▌   | 144/221 [00:51<00:26,  2.92it/s][A
 66%|██████▌   | 145/221 [00:51<00:25,  2.92it/s][A
 66%|██████▌   | 146/221 [00:52<00:25,  2.99it/s][A
 67%|██████▋   | 147/221 [00:52<00:26,  2.79it/s][A
 67%|██████▋   | 148/221 [00:52<00:26,  2.75it/s][A
 67%|██████▋   | 149/221 [00:53<00:25,  2.79it/s][A[h264 @ 0x559333e15940] mmco: unref short failure

 68%|██████▊   | 150/221 [00:53<00:24,  2.88it/s][A
 68%|██████▊   | 151/221 [00:53<00:24,  2.88it/s][A
 69%|██████▉   | 152/221 [00:54<00:24,  2.84it/s][A
 69%|██████▉   | 153/221 [00:54<00:25,  2.70it/s][A
 70%|██████▉   | 154/221 [00:55<00:24,  2.72it/s][A
 70%|███████   | 155/221 [00:55<00:24,  2.70it/s][A
 71%|███████   | 156/221 [00:55<00:23,  2.81it/s][A
 71%|███████   | 157/221 [00:56<00:22,  2.86it/s][A
 71%|███████▏  | 158/221 [00:56<00:22,  2.85it/s][A
 72%|███████▏  | 159/221 [00:56<00:22,  2.74it/s][A
 72%|███████▏  | 160/221 [00:57<00:23,  2.64it/s][A
 73%|███████▎  | 161/221 [00:57<00:23,  2.58it/s][A
 73%|███████▎  | 162/221 [00:58<00:23,  2.55it/s][A
 74%|███████▍  | 163/221 [00:58<00:21,  2.65it/s][A
 74%|███████▍  | 164/221 [00:58<00:20,  2.73it/s][A
 75%|███████▍  | 165/221 [00:59<00:19,  2.81it/s][A
 75%|███████▌  | 166/221 [00:59<00:19,  2.89it/s][A
 76%|███████▌  | 167/221 [00:59<00:19,  2.73it/s][A
 76%|███████▌  | 168/221 [01:00<00:20,  2.64it/s][A
 76%|███████▋  | 169/221 [01:00<00:19,  2.66it/s][A
 77%|███████▋  | 170/221 [01:01<00:19,  2.63it/s][A
 77%|███████▋  | 171/221 [01:01<00:18,  2.72it/s][A
 78%|███████▊  | 172/221 [01:01<00:17,  2.82it/s][A
 78%|███████▊  | 173/221 [01:02<00:17,  2.80it/s][A
 79%|███████▊  | 174/221 [01:02<00:16,  2.78it/s][A
 79%|███████▉  | 175/221 [01:02<00:16,  2.75it/s][A[h264 @ 0x555ff2485780] mmco: unref short failure

 80%|███████▉  | 176/221 [01:03<00:17,  2.58it/s][A
 80%|████████  | 177/221 [01:03<00:17,  2.46it/s][A
 81%|████████  | 178/221 [01:04<00:17,  2.52it/s][A[h264 @ 0x55a024ab1d80] mmco: unref short failure

 81%|████████  | 179/221 [01:04<00:16,  2.58it/s][A
 81%|████████▏ | 180/221 [01:04<00:15,  2.60it/s][A
 82%|████████▏ | 181/221 [01:05<00:14,  2.72it/s][A
 82%|████████▏ | 182/221 [01:05<00:14,  2.70it/s][A
 83%|████████▎ | 183/221 [01:05<00:14,  2.56it/s][A
 83%|████████▎ | 184/221 [01:06<00:15,  2.33it/s][A
 84%|████████▎ | 185/221 [01:06<00:15,  2.35it/s][A[h264 @ 0x555fe8b87cc0] mmco: unref short failure
[h264 @ 0x555fe8b87cc0] mmco: unref short failure

 84%|████████▍ | 186/221 [01:07<00:14,  2.37it/s][A
 85%|████████▍ | 187/221 [01:07<00:13,  2.56it/s][A
 85%|████████▌ | 188/221 [01:07<00:12,  2.61it/s][A[h264 @ 0x555fe5db4780] mmco: unref short failure
[h264 @ 0x555fe5db4780] mmco: unref short failure
[h264 @ 0x555fe5db4780] mmco: unref short failure
[h264 @ 0x555fe5db4780] mmco: unref short failure
[h264 @ 0x555ff0241a00] mmco: unref short failure
[h264 @ 0x555ff0241a00] mmco: unref short failure

 86%|████████▌ | 189/221 [01:08<00:12,  2.61it/s][A
 86%|████████▌ | 190/221 [01:08<00:11,  2.63it/s][A
 86%|████████▋ | 191/221 [01:09<00:11,  2.66it/s][A
 87%|████████▋ | 192/221 [01:09<00:10,  2.78it/s][A
 87%|████████▋ | 193/221 [01:09<00:10,  2.78it/s][A
 88%|████████▊ | 194/221 [01:10<00:09,  2.90it/s][A
 88%|████████▊ | 195/221 [01:10<00:09,  2.86it/s][A
 89%|████████▊ | 196/221 [01:10<00:08,  2.93it/s][A
 89%|████████▉ | 197/221 [01:11<00:08,  2.87it/s][A
 90%|████████▉ | 198/221 [01:11<00:08,  2.72it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.78it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.89it/s][A
 91%|█████████ | 201/221 [01:12<00:06,  2.90it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.94it/s][A
 92%|█████████▏| 203/221 [01:13<00:06,  2.97it/s][A
 92%|█████████▏| 204/221 [01:13<00:05,  2.94it/s][A
 93%|█████████▎| 205/221 [01:13<00:05,  2.89it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.75it/s][A
 94%|█████████▎| 207/221 [01:14<00:05,  2.73it/s][A
 94%|█████████▍| 208/221 [01:15<00:04,  2.76it/s][A[h264 @ 0x559336c28d00] mmco: unref short failure

 95%|█████████▍| 209/221 [01:15<00:04,  2.82it/s][A
 95%|█████████▌| 210/221 [01:15<00:03,  2.91it/s][A
 95%|█████████▌| 211/221 [01:16<00:03,  2.60it/s][A
 96%|█████████▌| 212/221 [01:16<00:03,  2.65it/s][A
 96%|█████████▋| 213/221 [01:16<00:02,  2.68it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.77it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.90it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  2.97it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.84it/s][A
 99%|█████████▊| 218/221 [01:18<00:01,  2.85it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.70it/s][A
100%|█████████▉| 220/221 [01:19<00:00,  2.75it/s][A
100%|██████████| 221/221 [01:19<00:00,  2.80it/s][A100%|██████████| 221/221 [01:19<00:00,  2.77it/s]
[h264 @ 0x559334286a80] mmco: unref short failure
[h264 @ 0x55a0228ffac0] mmco: unref short failure
[h264 @ 0x55a0228ffac0] mmco: unref short failure
[h264 @ 0x555ff0c93c00] mmco: unref short failure
[h264 @ 0x55a02496b3c0] mmco: unref short failure
[h264 @ 0x55a01081ff00] mmco: unref short failure
[h264 @ 0x55a01081ff00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:36,  6.06it/s][A09/17/2024 02:55:17 - INFO - __main__ -   current idx QzpF1yDPHf0.29 from finetune_area returns wrong image/video, use 82945 instead.

  1%|          | 2/221 [00:00<01:02,  3.53it/s][A
  1%|▏         | 3/221 [00:01<01:30,  2.40it/s][A
  2%|▏         | 4/221 [00:01<01:12,  2.98it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.98it/s][A
  3%|▎         | 6/221 [00:01<00:56,  3.81it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.34it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.21it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.48it/s][A
  5%|▍         | 10/221 [00:03<01:07,  3.13it/s][A
  5%|▍         | 11/221 [00:03<01:00,  3.47it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.80it/s][A
  6%|▌         | 13/221 [00:04<01:33,  2.23it/s][A
  6%|▋         | 14/221 [00:04<01:15,  2.75it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.87it/s][A
  7%|▋         | 16/221 [00:05<01:23,  2.46it/s][A
  8%|▊         | 17/221 [00:05<01:28,  2.30it/s][A
  8%|▊         | 18/221 [00:06<01:28,  2.29it/s][A
  9%|▊         | 19/221 [00:06<01:16,  2.64it/s][A
  9%|▉         | 20/221 [00:06<01:12,  2.76it/s][A
 10%|▉         | 21/221 [00:07<01:08,  2.90it/s][A
 10%|▉         | 22/221 [00:07<01:03,  3.15it/s][A
 10%|█         | 23/221 [00:07<00:52,  3.77it/s][A
 11%|█         | 24/221 [00:07<00:50,  3.90it/s][A
 11%|█▏        | 25/221 [00:08<00:53,  3.64it/s][A
 12%|█▏        | 26/221 [00:08<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:08<00:56,  3.44it/s][A
 13%|█▎        | 28/221 [00:09<01:11,  2.68it/s][A
 13%|█▎        | 29/221 [00:09<01:08,  2.79it/s][A
 14%|█▎        | 30/221 [00:10<01:08,  2.79it/s][A
 14%|█▍        | 31/221 [00:10<01:11,  2.66it/s][A
 14%|█▍        | 32/221 [00:10<00:58,  3.24it/s][A
 15%|█▍        | 33/221 [00:10<00:51,  3.64it/s][A
 15%|█▌        | 34/221 [00:11<00:51,  3.61it/s][A
 16%|█▌        | 35/221 [00:11<00:48,  3.83it/s][A
 16%|█▋        | 36/221 [00:11<00:52,  3.55it/s][A
 17%|█▋        | 37/221 [00:11<00:49,  3.69it/s][A
 17%|█▋        | 38/221 [00:12<00:54,  3.34it/s][A
 18%|█▊        | 39/221 [00:12<00:48,  3.77it/s][A
 18%|█▊        | 40/221 [00:12<00:52,  3.46it/s][A
 19%|█▊        | 41/221 [00:12<00:42,  4.19it/s][A
 19%|█▉        | 42/221 [00:13<00:41,  4.28it/s][A
 19%|█▉        | 43/221 [00:13<00:43,  4.09it/s][A
 20%|█▉        | 44/221 [00:13<00:37,  4.76it/s][A
 20%|██        | 45/221 [00:13<00:46,  3.81it/s][A
 21%|██        | 46/221 [00:14<00:47,  3.71it/s][A
 22%|██▏       | 48/221 [00:14<00:32,  5.27it/s][A
 22%|██▏       | 49/221 [00:14<00:32,  5.30it/s][A
 23%|██▎       | 50/221 [00:14<00:38,  4.42it/s][A
 23%|██▎       | 51/221 [00:15<00:48,  3.48it/s][A
 24%|██▎       | 52/221 [00:15<00:40,  4.18it/s][A
 24%|██▍       | 53/221 [00:15<00:36,  4.59it/s][A
 24%|██▍       | 54/221 [00:15<00:37,  4.47it/s][A
 25%|██▍       | 55/221 [00:16<00:38,  4.32it/s][A
 25%|██▌       | 56/221 [00:16<00:39,  4.20it/s][A
 26%|██▌       | 57/221 [00:16<00:40,  4.02it/s][A
 26%|██▌       | 58/221 [00:16<00:37,  4.31it/s][A
 27%|██▋       | 59/221 [00:17<00:37,  4.28it/s][A
 27%|██▋       | 60/221 [00:17<00:41,  3.87it/s][A
 28%|██▊       | 61/221 [00:17<00:40,  3.97it/s][A
 28%|██▊       | 62/221 [00:17<00:40,  3.97it/s][A[h264 @ 0x555ff6889cc0] mmco: unref short failure
[h264 @ 0x555ff6889cc0] mmco: unref short failure

 29%|██▊       | 63/221 [00:18<00:36,  4.32it/s][A
 29%|██▉       | 64/221 [00:18<00:35,  4.47it/s][A
 29%|██▉       | 65/221 [00:18<00:30,  5.19it/s][A
 30%|██▉       | 66/221 [00:18<00:36,  4.26it/s][A
 30%|███       | 67/221 [00:19<00:49,  3.10it/s][A
 31%|███       | 68/221 [00:19<00:43,  3.48it/s][A
 31%|███       | 69/221 [00:19<00:46,  3.29it/s][A
 32%|███▏      | 70/221 [00:19<00:38,  3.92it/s][A
 32%|███▏      | 71/221 [00:20<00:46,  3.24it/s][A
 33%|███▎      | 72/221 [00:20<00:47,  3.14it/s][A
 33%|███▎      | 73/221 [00:21<00:45,  3.27it/s][A
 33%|███▎      | 74/221 [00:21<00:43,  3.35it/s][A
 34%|███▍      | 75/221 [00:21<00:49,  2.94it/s][A
 35%|███▍      | 77/221 [00:22<00:35,  4.05it/s][A
 35%|███▌      | 78/221 [00:22<00:35,  4.04it/s][A
 36%|███▌      | 79/221 [00:22<00:37,  3.74it/s][A
 36%|███▌      | 80/221 [00:22<00:42,  3.30it/s][A
 37%|███▋      | 81/221 [00:23<00:42,  3.27it/s][A
 37%|███▋      | 82/221 [00:23<00:37,  3.67it/s][A
 38%|███▊      | 84/221 [00:24<00:36,  3.79it/s][A
 38%|███▊      | 85/221 [00:24<00:34,  3.89it/s][A
 39%|███▉      | 86/221 [00:24<00:37,  3.58it/s][A
 39%|███▉      | 87/221 [00:25<00:52,  2.56it/s][A
 40%|███▉      | 88/221 [00:25<00:46,  2.84it/s][A[h264 @ 0x55a01be47640] mmco: unref short failure

 40%|████      | 89/221 [00:25<00:45,  2.91it/s][A
 41%|████      | 90/221 [00:26<00:47,  2.76it/s][A
 41%|████      | 91/221 [00:26<00:40,  3.22it/s][A
 42%|████▏     | 92/221 [00:26<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:27<00:38,  3.34it/s][A
 43%|████▎     | 94/221 [00:27<00:35,  3.62it/s][A
 43%|████▎     | 95/221 [00:27<00:45,  2.77it/s][A
 43%|████▎     | 96/221 [00:28<00:42,  2.94it/s][A
 44%|████▍     | 97/221 [00:28<00:39,  3.17it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:28<00:31,  3.84it/s][A
 45%|████▌     | 100/221 [00:28<00:27,  4.48it/s][A
 46%|████▌     | 101/221 [00:29<00:30,  3.95it/s][A
 46%|████▌     | 102/221 [00:29<00:29,  3.97it/s][A
 47%|████▋     | 103/221 [00:29<00:27,  4.25it/s][A
 47%|████▋     | 104/221 [00:29<00:25,  4.60it/s][A
 48%|████▊     | 105/221 [00:30<00:27,  4.25it/s][A
 48%|████▊     | 106/221 [00:30<00:38,  2.99it/s][A
 48%|████▊     | 107/221 [00:30<00:31,  3.58it/s][A
 49%|████▉     | 108/221 [00:30<00:26,  4.24it/s][A
 49%|████▉     | 109/221 [00:31<00:29,  3.77it/s][A
 50%|████▉     | 110/221 [00:31<00:33,  3.34it/s][A
 50%|█████     | 111/221 [00:32<00:33,  3.28it/s][A
 51%|█████     | 112/221 [00:32<00:34,  3.20it/s][A
 51%|█████     | 113/221 [00:32<00:30,  3.55it/s][A
 52%|█████▏    | 115/221 [00:32<00:24,  4.34it/s][A
 52%|█████▏    | 116/221 [00:33<00:23,  4.54it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.22it/s][A
 53%|█████▎    | 118/221 [00:33<00:29,  3.48it/s][A
 54%|█████▍    | 119/221 [00:34<00:34,  2.95it/s][A
 54%|█████▍    | 120/221 [00:34<00:33,  2.98it/s][A
 55%|█████▌    | 122/221 [00:34<00:23,  4.16it/s][A
 56%|█████▌    | 123/221 [00:35<00:24,  4.03it/s][A
 56%|█████▌    | 124/221 [00:35<00:31,  3.09it/s][A
 57%|█████▋    | 125/221 [00:36<00:46,  2.04it/s][A
 57%|█████▋    | 126/221 [00:36<00:40,  2.32it/s][A
 57%|█████▋    | 127/221 [00:37<00:50,  1.87it/s][A
 58%|█████▊    | 128/221 [00:37<00:42,  2.21it/s][A
 58%|█████▊    | 129/221 [00:38<00:32,  2.81it/s][A
 59%|█████▉    | 130/221 [00:38<00:31,  2.85it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.43it/s][A
 60%|█████▉    | 132/221 [00:38<00:28,  3.09it/s][A
 60%|██████    | 133/221 [00:39<00:33,  2.62it/s][A
 61%|██████    | 134/221 [00:39<00:31,  2.74it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.35it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.21it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.37it/s][A
 62%|██████▏   | 138/221 [00:40<00:25,  3.27it/s][A
 63%|██████▎   | 139/221 [00:41<00:27,  3.01it/s][A
 63%|██████▎   | 140/221 [00:41<00:24,  3.35it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.37it/s][A
 64%|██████▍   | 142/221 [00:41<00:21,  3.65it/s][A
 65%|██████▍   | 143/221 [00:42<00:21,  3.56it/s][A
 65%|██████▌   | 144/221 [00:42<00:19,  4.01it/s][A
 66%|██████▌   | 145/221 [00:42<00:20,  3.72it/s][A
 66%|██████▌   | 146/221 [00:43<00:20,  3.71it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  3.98it/s][A[h264 @ 0x5593528ad480] mmco: unref short failure
[h264 @ 0x5593528ad480] mmco: unref short failure

 67%|██████▋   | 148/221 [00:43<00:18,  4.03it/s][A
 67%|██████▋   | 149/221 [00:43<00:18,  4.00it/s][A
 68%|██████▊   | 150/221 [00:44<00:18,  3.84it/s][A
 68%|██████▊   | 151/221 [00:44<00:32,  2.18it/s][A
 69%|██████▉   | 152/221 [00:45<00:36,  1.89it/s][A
 69%|██████▉   | 153/221 [00:45<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:46<00:24,  2.75it/s][A
 70%|███████   | 155/221 [00:46<00:26,  2.51it/s][A
 71%|███████   | 156/221 [00:46<00:25,  2.54it/s][A
 71%|███████   | 157/221 [00:47<00:25,  2.55it/s][A
 71%|███████▏  | 158/221 [00:47<00:25,  2.49it/s][A
 72%|███████▏  | 159/221 [00:47<00:20,  2.99it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.37it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.12it/s][A
 73%|███████▎  | 162/221 [00:48<00:12,  4.69it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.53it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  5.08it/s][A
 75%|███████▌  | 166/221 [00:49<00:12,  4.39it/s][A
 76%|███████▌  | 167/221 [00:49<00:11,  4.87it/s][A
 76%|███████▌  | 168/221 [00:49<00:12,  4.38it/s][A
 76%|███████▋  | 169/221 [00:49<00:11,  4.59it/s][A09/17/2024 02:56:07 - INFO - __main__ -   current idx 3Dl8wLo1W6E.35 from finetune_area returns wrong image/video, use 103184 instead.

 77%|███████▋  | 170/221 [00:50<00:16,  3.07it/s][A
 77%|███████▋  | 171/221 [00:51<00:21,  2.36it/s][A
 78%|███████▊  | 172/221 [00:51<00:17,  2.84it/s][A
 78%|███████▊  | 173/221 [00:51<00:15,  3.16it/s][A
 79%|███████▊  | 174/221 [00:51<00:14,  3.19it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.35it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.55it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.88it/s][A
 81%|████████  | 178/221 [00:53<00:14,  2.90it/s][A
 81%|████████  | 179/221 [00:53<00:14,  2.92it/s][A
 82%|████████▏ | 181/221 [00:53<00:09,  4.02it/s][A
 82%|████████▏ | 182/221 [00:54<00:09,  3.96it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.24it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.39it/s][A[h264 @ 0x559355c36140] mmco: unref short failure
[h264 @ 0x559355c36140] mmco: unref short failure

 84%|████████▍ | 186/221 [00:55<00:12,  2.75it/s][A
 85%|████████▍ | 187/221 [00:55<00:11,  2.93it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.21it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.62it/s][A
 86%|████████▌ | 190/221 [00:56<00:11,  2.69it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.38it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  3.74it/s][A
 87%|████████▋ | 193/221 [00:57<00:06,  4.49it/s][A
 88%|████████▊ | 194/221 [00:57<00:06,  3.88it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  4.27it/s][A
 89%|████████▊ | 196/221 [00:58<00:09,  2.52it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.67it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.68it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.27it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.17it/s][A
 91%|█████████ | 201/221 [01:00<00:06,  3.27it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.57it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.79it/s][A
 93%|█████████▎| 205/221 [01:00<00:03,  4.17it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.07it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.21it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.44it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.04it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.55it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.75it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.07it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  2.94it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.78it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.82it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.83it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.72it/s][A
 99%|█████████▊| 218/221 [01:05<00:01,  2.98it/s][A[h264 @ 0x55a0177045c0] mmco: unref short failure
[h264 @ 0x55a0177045c0] mmco: unref short failure

 99%|█████████▉| 219/221 [01:05<00:00,  2.61it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.11it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.22it/s][A100%|██████████| 221/221 [01:06<00:00,  3.33it/s]
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'area_r1': 38.9, 'area_recall': '38.9/66.1/75.9', 'area_ravg': 60.3}
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'forward_r1': 35.5, 'forward_recall': '35.5/62.6/74.5', 'forward_ravg': 57.5}
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'area_video_r1': 38.7, 'area_video_recall': '38.7/68.2/76.6', 'area_video_ravg': 61.2}
09/17/2024 02:56:26 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 02:56:26 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 02:56:26 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 02:56:26 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'video_r1': 34.5, 'video_recall': '34.5/63.8/73.9', 'video_ravg': 57.4}
09/17/2024 02:56:26 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 02:56:26 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 02:56:26 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 299--===========

09/17/2024 02:56:26 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
09/17/2024 02:56:26 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 02:56:26 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
09/17/2024 02:57:03 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.008953660726547241, 'loss_ret%tv%ta--finetune_area/loss_area': 1.4050095081329346, 'loss_ret%tv%ta--finetune_area/total_loss': 1.4139631986618042}
 21%|██        | 300/1455 [3:16:46<59:48:53, 186.44s/it][h264 @ 0x559341632880] mmco: unref short failure
[h264 @ 0x559341632880] mmco: unref short failure
[h264 @ 0x559333969040] mmco: unref short failure
[h264 @ 0x559333969040] mmco: unref short failure
 21%|██        | 301/1455 [3:16:53<42:31:08, 132.64s/it] 21%|██        | 302/1455 [3:17:00<30:26:30, 95.05s/it]  21%|██        | 303/1455 [3:17:08<21:58:57, 68.70s/it][h264 @ 0x55a015a15400] mmco: unref short failure
[h264 @ 0x55a015a15400] mmco: unref short failure
09/17/2024 02:57:35 - INFO - __main__ -   current idx g_6rVdVgpd0.43 from finetune_area returns wrong image/video, use 12011 instead.
 21%|██        | 304/1455 [3:17:16<16:07:31, 50.44s/it] 21%|██        | 305/1455 [3:17:23<12:02:19, 37.69s/it][h264 @ 0x55a028d5ad80] mmco: unref short failure
[h264 @ 0x55a028d5ad80] mmco: unref short failure
[h264 @ 0x55a028d5ad80] mmco: unref short failure
[h264 @ 0x55a028d5ad80] mmco: unref short failure
 21%|██        | 306/1455 [3:17:32<9:13:32, 28.91s/it] [h264 @ 0x559358845900] mmco: unref short failure
[h264 @ 0x559358845900] mmco: unref short failure
 21%|██        | 307/1455 [3:17:40<7:15:41, 22.77s/it][h264 @ 0x555feed39e40] mmco: unref short failure
 21%|██        | 308/1455 [3:17:49<5:56:10, 18.63s/it][h264 @ 0x555ff6b7c8c0] mmco: unref short failure
[h264 @ 0x555ff6b7c8c0] mmco: unref short failure
09/17/2024 02:58:17 - INFO - __main__ -   current idx O_qInVZBZaw.18 from finetune_area returns wrong image/video, use 107514 instead.
[h264 @ 0x555fda9e07c0] mmco: unref short failure
[h264 @ 0x555fda9e07c0] mmco: unref short failure
[h264 @ 0x555feac6a7c0] mmco: unref short failure
[h264 @ 0x559333e833c0] mmco: unref short failure
[h264 @ 0x559333e833c0] mmco: unref short failure
[h264 @ 0x555ffcb1e040] mmco: unref short failure
 21%|██        | 309/1455 [3:17:58<4:58:08, 15.61s/it][h264 @ 0x559356ad7a00] mmco: unref short failure
[h264 @ 0x559356ad7a00] mmco: unref short failure
 21%|██▏       | 310/1455 [3:18:07<4:20:12, 13.64s/it] 21%|██▏       | 311/1455 [3:18:16<3:54:27, 12.30s/it] 21%|██▏       | 312/1455 [3:18:25<3:34:17, 11.25s/it][h264 @ 0x5593341c9840] mmco: unref short failure
[h264 @ 0x55933d0dca00] mmco: unref short failure
[h264 @ 0x55933d0dca00] mmco: unref short failure
[h264 @ 0x55a02d740400] mmco: unref short failure
[h264 @ 0x555fd94788c0] mmco: unref short failure
[h264 @ 0x555fd94788c0] mmco: unref short failure
[h264 @ 0x555fd94788c0] mmco: unref short failure
[h264 @ 0x555fd94788c0] mmco: unref short failure
[h264 @ 0x55933e7648c0] mmco: unref short failure
[h264 @ 0x55933e7648c0] mmco: unref short failure
 22%|██▏       | 313/1455 [3:18:34<3:21:03, 10.56s/it][h264 @ 0x55d4bd7f8700] mmco: unref short failure
[h264 @ 0x55d4bd7f8700] mmco: unref short failure
[h264 @ 0x55a0170aba00] mmco: unref short failure
 22%|██▏       | 314/1455 [3:18:43<3:10:15, 10.00s/it][h264 @ 0x55d4d17ecf40] mmco: unref short failure
 22%|██▏       | 315/1455 [3:18:51<3:00:47,  9.52s/it][h264 @ 0x55a021c4e300] mmco: unref short failure
[h264 @ 0x55a021c4e300] mmco: unref short failure
[h264 @ 0x55a021c4e300] mmco: unref short failure
[h264 @ 0x55a021c4e300] mmco: unref short failure
[h264 @ 0x555fe20acfc0] mmco: unref short failure
[h264 @ 0x555ffa3aaf40] mmco: unref short failure
[h264 @ 0x555ffa3aaf40] mmco: unref short failure
[h264 @ 0x55934e48a000] mmco: unref short failure
[h264 @ 0x555ff2335bc0] mmco: unref short failure
[h264 @ 0x555ff2335bc0] mmco: unref short failure
[h264 @ 0x55a0106f8a40] mmco: unref short failure
[h264 @ 0x55a0106f8a40] mmco: unref short failure
[h264 @ 0x55d4d35afe80] mmco: unref short failure
[h264 @ 0x55d4b71acb80] mmco: unref short failure
[h264 @ 0x55d4b71acb80] mmco: unref short failure
[h264 @ 0x5593342b6d00] mmco: unref short failure
[h264 @ 0x559358846040] mmco: unref short failure
[h264 @ 0x559358846040] mmco: unref short failure
[h264 @ 0x55933f20a040] mmco: unref short failure
[h264 @ 0x55933f20a040] mmco: unref short failure
[h264 @ 0x555feecb2d00] mmco: unref short failure
[h264 @ 0x555feecb2d00] mmco: unref short failure
[h264 @ 0x55d4d4796840] mmco: unref short failure
[h264 @ 0x55d4d4796840] mmco: unref short failure
[h264 @ 0x5593406c02c0] mmco: unref short failure
[h264 @ 0x5593401c7840] mmco: unref short failure
[h264 @ 0x5593401c7840] mmco: unref short failure
[h264 @ 0x555fea7d4140] mmco: unref short failure
[h264 @ 0x559350dba340] mmco: unref short failure
[h264 @ 0x55933be01b80] mmco: unref short failure
[h264 @ 0x55d4cb9caa40] mmco: unref short failure
[h264 @ 0x55d4cb9caa40] mmco: unref short failure
[h264 @ 0x559339a74480] mmco: unref short failure
[h264 @ 0x559339a74480] mmco: unref short failure
[h264 @ 0x555fe2d5d040] mmco: unref short failure
09/17/2024 03:01:00 - INFO - __main__ -   current idx eB3AXJxM634.13 from finetune_area returns wrong image/video, use 141108 instead.
[h264 @ 0x55d4ceef8d40] mmco: unref short failure
 22%|██▏       | 316/1455 [3:20:47<13:08:33, 41.54s/it][h264 @ 0x55933ef21640] mmco: unref short failure
[h264 @ 0x559349600780] mmco: unref short failure
[h264 @ 0x555fef38a040] mmco: unref short failure
[h264 @ 0x55d4ba1f8500] mmco: unref short failure
[h264 @ 0x55d4ba1f8500] mmco: unref short failure
 22%|██▏       | 317/1455 [3:21:16<11:54:34, 37.67s/it][h264 @ 0x559340123540] mmco: unref short failure
09/17/2024 03:01:53 - INFO - __main__ -   current idx TjXtZRjeWIo.2 from finetune_area returns wrong image/video, use 80161 instead.
[h264 @ 0x55a01e211780] mmco: unref short failure
 22%|██▏       | 318/1455 [3:21:32<9:52:04, 31.24s/it] [h264 @ 0x55a017703f00] mmco: unref short failure
[h264 @ 0x55a017703f00] mmco: unref short failure
[h264 @ 0x55a01fd3d7c0] mmco: unref short failure
[h264 @ 0x55a01fd3d7c0] mmco: unref short failure
[h264 @ 0x559340ee7940] mmco: unref short failure
[h264 @ 0x559340ee7940] mmco: unref short failure
 22%|██▏       | 319/1455 [3:22:02<9:43:50, 30.84s/it]09/17/2024 03:02:27 - INFO - __main__ -   current idx 7i_0A4oZMd4.75 from finetune_area returns wrong image/video, use 2571 instead.
 22%|██▏       | 320/1455 [3:22:11<7:40:44, 24.36s/it] 22%|██▏       | 321/1455 [3:22:21<6:19:04, 20.06s/it][h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55934a2e25c0] mmco: unref short failure
[h264 @ 0x55933444aec0] mmco: unref short failure
 22%|██▏       | 322/1455 [3:22:34<5:37:39, 17.88s/it][h264 @ 0x55d4bfddfa80] mmco: unref short failure
[h264 @ 0x55d4bfddfa80] mmco: unref short failure
[h264 @ 0x55d4bfddfa80] mmco: unref short failure
[h264 @ 0x55d4bfddfa80] mmco: unref short failure
 22%|██▏       | 323/1455 [3:22:45<4:57:42, 15.78s/it][h264 @ 0x555fda797600] mmco: unref short failure
[h264 @ 0x555fda797600] mmco: unref short failure
[h264 @ 0x55d4c35ccdc0] mmco: unref short failure
[h264 @ 0x55d4c35ccdc0] mmco: unref short failure
[h264 @ 0x555ff1c42e00] mmco: unref short failure
[h264 @ 0x555ff1c42e00] mmco: unref short failure
[h264 @ 0x559339a74200] mmco: unref short failure
[h264 @ 0x559339a74200] mmco: unref short failure
[h264 @ 0x55d4bbf30e40] mmco: unref short failure
[h264 @ 0x55a02e1cefc0] mmco: unref short failure
[h264 @ 0x55a02e1cefc0] mmco: unref short failure
[h264 @ 0x55a02e1cefc0] mmco: unref short failure
[h264 @ 0x55a02e1cefc0] mmco: unref short failure
[h264 @ 0x55a01623d7c0] mmco: unref short failure
[h264 @ 0x5593343268c0] mmco: unref short failure
[h264 @ 0x5593343268c0] mmco: unref short failure
[h264 @ 0x555fe18ce680] mmco: unref short failure
[h264 @ 0x555fe18ce680] mmco: unref short failure
[h264 @ 0x559336dad9c0] mmco: unref short failure
[h264 @ 0x559336dad9c0] mmco: unref short failure
[h264 @ 0x559347686a40] mmco: unref short failure
[h264 @ 0x559347686a40] mmco: unref short failure
[h264 @ 0x559343bdc940] mmco: unref short failure
[h264 @ 0x559343bdc940] mmco: unref short failure
[h264 @ 0x555fdc650280] mmco: unref short failure
[h264 @ 0x555fdc650280] mmco: unref short failure
[h264 @ 0x555fdc650280] mmco: unref short failure
[h264 @ 0x555fdc650280] mmco: unref short failure
09/17/2024 03:03:45 - INFO - __main__ -   current idx 2xMe1diCHmI.53 from finetune_area returns wrong image/video, use 116567 instead.
09/17/2024 03:03:52 - INFO - __main__ -   current idx 1o1hMc8PbOU.62 from finetune_area returns wrong image/video, use 8841 instead.
[h264 @ 0x55a02ca9a2c0] mmco: unref short failure
[h264 @ 0x555fd97c5b80] mmco: unref short failure
[h264 @ 0x55d4c37ad280] mmco: unref short failure
[h264 @ 0x555ff117e140] mmco: unref short failure
[h264 @ 0x555ff117e140] mmco: unref short failure
[h264 @ 0x55d4ba17ce80] mmco: unref short failure
[h264 @ 0x55d4ba17ce80] mmco: unref short failure
[h264 @ 0x555fdabc58c0] mmco: unref short failure
[h264 @ 0x55a014228340] mmco: unref short failure
[h264 @ 0x55a014228340] mmco: unref short failure
[h264 @ 0x55934346a840] mmco: unref short failure
[h264 @ 0x55934346a840] mmco: unref short failure
[h264 @ 0x55d4b9166180] mmco: unref short failure
[h264 @ 0x55d4cab2adc0] mmco: unref short failure
09/17/2024 03:04:50 - INFO - __main__ -   current idx flS6D6P73vs.20 from finetune_area returns wrong image/video, use 110628 instead.
[h264 @ 0x55d4cece3580] mmco: unref short failure
[h264 @ 0x55d4cece3580] mmco: unref short failure
[h264 @ 0x55a03217df00] mmco: unref short failure
[h264 @ 0x55a03217df00] mmco: unref short failure
[h264 @ 0x55d4c6d03380] mmco: unref short failure
[h264 @ 0x55934b67f040] mmco: unref short failure
[h264 @ 0x55934b67f040] mmco: unref short failure
[h264 @ 0x55a0122ec440] mmco: unref short failure
[h264 @ 0x55a0122ec440] mmco: unref short failure
[h264 @ 0x5593485c8140] mmco: unref short failure
09/17/2024 03:05:30 - INFO - __main__ -   current idx SQ8PD29d_RE.6 from finetune_area returns wrong image/video, use 94180 instead.
[h264 @ 0x55d4ddf9d780] mmco: unref short failure
[h264 @ 0x55a017703f00] mmco: unref short failure
[h264 @ 0x55a017703f00] mmco: unref short failure
[h264 @ 0x555fe208e680] mmco: unref short failure
[h264 @ 0x555ffd846ec0] mmco: unref short failure
[h264 @ 0x55a026243200] mmco: unref short failure
 22%|██▏       | 324/1455 [3:25:45<20:27:22, 65.11s/it][h264 @ 0x555ffa7e9200] mmco: unref short failure
[h264 @ 0x555ffa7e9200] mmco: unref short failure
[h264 @ 0x555ffa7e9200] mmco: unref short failure
[h264 @ 0x555ffa7e9200] mmco: unref short failure
[h264 @ 0x55935b648f00] mmco: unref short failure
[h264 @ 0x55a0250be200] mmco: unref short failure
[h264 @ 0x55a0250be200] mmco: unref short failure
[h264 @ 0x55d4d0eebe80] mmco: unref short failure
[h264 @ 0x55d4cc6f4500] mmco: unref short failure
[h264 @ 0x559337d97f40] mmco: unref short failure
[h264 @ 0x559358b40700] mmco: unref short failure
[h264 @ 0x555fd8a77e40] mmco: unref short failure
[h264 @ 0x555fd8a77e40] mmco: unref short failure
[h264 @ 0x55935ae9c300] mmco: unref short failure
[h264 @ 0x55935ae9c300] mmco: unref short failure
 22%|██▏       | 325/1455 [3:26:13<16:54:31, 53.87s/it][h264 @ 0x55a014ced440] mmco: unref short failure
[h264 @ 0x55a014ced440] mmco: unref short failure
[h264 @ 0x55a014ced440] mmco: unref short failure
[h264 @ 0x55a014ced440] mmco: unref short failure
[h264 @ 0x555fed621100] mmco: unref short failure
[h264 @ 0x555fe5802180] mmco: unref short failure
[h264 @ 0x55a015cc5780] mmco: unref short failure
[h264 @ 0x559337e1d040] mmco: unref short failure
[h264 @ 0x559337e1d040] mmco: unref short failure
[h264 @ 0x55d4d0745d00] mmco: unref short failure
[h264 @ 0x55a014730f00] mmco: unref short failure
[h264 @ 0x555ff6125400] mmco: unref short failure
 22%|██▏       | 326/1455 [3:26:34<13:49:02, 44.06s/it][h264 @ 0x559349bb68c0] mmco: unref short failure
[h264 @ 0x559349bb68c0] mmco: unref short failure
[h264 @ 0x559349bb68c0] mmco: unref short failure
[h264 @ 0x559349bb68c0] mmco: unref short failure
[h264 @ 0x555ff0c6a880] mmco: unref short failure
[h264 @ 0x555ff0c6a880] mmco: unref short failure
[h264 @ 0x55d4c3b56f40] mmco: unref short failure
[h264 @ 0x555fe6229c80] mmco: unref short failure
[h264 @ 0x55934b3bc200] mmco: unref short failure
[h264 @ 0x55934b3bc200] mmco: unref short failure
 22%|██▏       | 327/1455 [3:27:02<12:16:31, 39.18s/it][h264 @ 0x55a014987700] mmco: unref short failure
[h264 @ 0x55a014987700] mmco: unref short failure
[h264 @ 0x55d4cd0a1e00] mmco: unref short failure
[h264 @ 0x55d4cd0a1e00] mmco: unref short failure
[h264 @ 0x55d4cd0a1e00] mmco: unref short failure
[h264 @ 0x555fe5342e00] mmco: unref short failure
[h264 @ 0x555fe5342e00] mmco: unref short failure
 23%|██▎       | 328/1455 [3:27:11<9:27:03, 30.19s/it] [h264 @ 0x559358aa8b00] mmco: unref short failure
[h264 @ 0x55935a7b6b00] mmco: unref short failure
[h264 @ 0x555fff090a80] mmco: unref short failure
 23%|██▎       | 329/1455 [3:27:20<7:29:12, 23.94s/it][h264 @ 0x55d4cbceee80] mmco: unref short failure
[h264 @ 0x55d4cbceee80] mmco: unref short failure
[h264 @ 0x55d4d905ee40] mmco: unref short failure
[h264 @ 0x55d4d905ee40] mmco: unref short failure
 23%|██▎       | 330/1455 [3:27:29<6:04:00, 19.41s/it] 23%|██▎       | 331/1455 [3:27:38<5:03:20, 16.19s/it][h264 @ 0x555ffeef0b00] mmco: unref short failure
09/17/2024 03:08:04 - INFO - __main__ -   current idx JRTVXn0PfXQ.11 from finetune_area returns wrong image/video, use 65614 instead.
[h264 @ 0x55935b720f00] mmco: unref short failure
[h264 @ 0x55935b720f00] mmco: unref short failure
[h264 @ 0x559357b83e80] mmco: unref short failure
[h264 @ 0x559357b83e80] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe5db49c0] mmco: unref short failure
[h264 @ 0x555fe0da4380] mmco: unref short failure
[h264 @ 0x555fe0da4380] mmco: unref short failure
[h264 @ 0x555ffc341d40] mmco: unref short failure
[h264 @ 0x555ffc341d40] mmco: unref short failure
[h264 @ 0x55a020b6a280] mmco: unref short failure
[h264 @ 0x555fee3d7dc0] mmco: unref short failure
[h264 @ 0x559333df1840] mmco: unref short failure
[h264 @ 0x559333df1840] mmco: unref short failure
09/17/2024 03:09:07 - INFO - __main__ -   current idx hI-_iZaM-ZY.36 from finetune_area returns wrong image/video, use 106938 instead.
[h264 @ 0x555fdb19da00] mmco: unref short failure
[h264 @ 0x555fdb19da00] mmco: unref short failure
[h264 @ 0x555fdb19da00] mmco: unref short failure
[h264 @ 0x555fdb19da00] mmco: unref short failure
[h264 @ 0x559349b2fc40] mmco: unref short failure
[h264 @ 0x55d4df650b00] mmco: unref short failure
[h264 @ 0x55d4df650b00] mmco: unref short failure
09/17/2024 03:09:13 - INFO - __main__ -   current idx Lzt-UMekcLY.51 from finetune_area returns wrong image/video, use 106054 instead.
[h264 @ 0x555fe908b300] mmco: unref short failure
[h264 @ 0x555fe908b300] mmco: unref short failure
[h264 @ 0x55a03151d000] mmco: unref short failure
[h264 @ 0x55a03151d000] mmco: unref short failure
[h264 @ 0x55d4ce150440] mmco: unref short failure
[h264 @ 0x55d4ce150440] mmco: unref short failure
09/17/2024 03:09:32 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 82777 instead.
[h264 @ 0x55a01d142280] mmco: unref short failure
[h264 @ 0x55a01d142280] mmco: unref short failure
[h264 @ 0x559356c32ec0] mmco: unref short failure
[h264 @ 0x559356c32ec0] mmco: unref short failure
[h264 @ 0x55a02b43f400] mmco: unref short failure
[h264 @ 0x559333015980] mmco: unref short failure
[h264 @ 0x559333015980] mmco: unref short failure
[h264 @ 0x55d4ceee4f00] mmco: unref short failure
[h264 @ 0x555ff2aea080] mmco: unref short failure
[h264 @ 0x555ff2aea080] mmco: unref short failure
[h264 @ 0x55935f2677c0] mmco: unref short failure
[h264 @ 0x55935f2677c0] mmco: unref short failure
[h264 @ 0x555ff516d080] mmco: unref short failure
[h264 @ 0x555ff516d080] mmco: unref short failure
[h264 @ 0x55a038768f00] mmco: unref short failure
[h264 @ 0x559349fb6a80] mmco: unref short failure
[h264 @ 0x559349fb6a80] mmco: unref short failure
[h264 @ 0x5593567b2100] mmco: unref short failure
[h264 @ 0x5593567b2100] mmco: unref short failure
[h264 @ 0x555fe2dbc140] mmco: unref short failure
[h264 @ 0x555fe2dbc140] mmco: unref short failure
[h264 @ 0x55934b67eb80] mmco: unref short failure
[h264 @ 0x55934b67eb80] mmco: unref short failure
[h264 @ 0x55a01a4ef480] mmco: unref short failure
[h264 @ 0x55a01a4ef480] mmco: unref short failure
[h264 @ 0x55a038768f00] mmco: unref short failure
[h264 @ 0x55a038768f00] mmco: unref short failure
[h264 @ 0x55a0108205c0] mmco: unref short failure
 23%|██▎       | 332/1455 [3:30:28<19:28:00, 62.40s/it][av1 @ 0x556000170840] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x556000170840] Failed to get pixel format.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x556000170840] Failed to get pixel format.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x556000170840] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Missing Sequence Header.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[av1 @ 0x555fdfa01ac0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x555fdfa01ac0] Failed to get pixel format.
[h264 @ 0x55935c87e2c0] mmco: unref short failure
[h264 @ 0x55935c87e2c0] mmco: unref short failure
[h264 @ 0x556007809440] mmco: unref short failure
[h264 @ 0x556007809440] mmco: unref short failure
[h264 @ 0x55d4c49e2bc0] mmco: unref short failure
 23%|██▎       | 333/1455 [3:31:04<16:57:02, 54.39s/it][h264 @ 0x55a011cf7cc0] mmco: unref short failure
[h264 @ 0x55a011cf7cc0] mmco: unref short failure
[h264 @ 0x555fdb19d580] mmco: unref short failure
[h264 @ 0x555fdb19d580] mmco: unref short failure
[h264 @ 0x55a027b7e140] mmco: unref short failure
[h264 @ 0x55a027b7e140] mmco: unref short failure
 23%|██▎       | 334/1455 [3:31:20<13:22:57, 42.98s/it][h264 @ 0x55a02056fb40] mmco: unref short failure
[h264 @ 0x55a02056fb40] mmco: unref short failure
[h264 @ 0x55a02056fb40] mmco: unref short failure
[h264 @ 0x55a02056fb40] mmco: unref short failure
[h264 @ 0x55a02056fb40] mmco: unref short failure
[h264 @ 0x559339bc5600] mmco: unref short failure
[h264 @ 0x559339bc5600] mmco: unref short failure
[h264 @ 0x559339bc5600] mmco: unref short failure
[h264 @ 0x559339bc5600] mmco: unref short failure
09/17/2024 03:11:50 - INFO - __main__ -   current idx jZFMYW2mcas.95 from finetune_area returns wrong image/video, use 104192 instead.
[h264 @ 0x55a00f2b9280] mmco: unref short failure
[h264 @ 0x55a00f2b9280] mmco: unref short failure
[h264 @ 0x5560013bf600] mmco: unref short failure
[h264 @ 0x55a01909e0c0] mmco: unref short failure
[h264 @ 0x55a01909e0c0] mmco: unref short failure
[h264 @ 0x55935830acc0] mmco: unref short failure
[h264 @ 0x55935830acc0] mmco: unref short failure
[h264 @ 0x55935830acc0] mmco: unref short failure
[h264 @ 0x55935830acc0] mmco: unref short failure
[h264 @ 0x55d4d38bfe00] mmco: unref short failure
[h264 @ 0x55935a095500] mmco: unref short failure
[h264 @ 0x55935a095500] mmco: unref short failure
[h264 @ 0x55a01de07d80] mmco: unref short failure
[h264 @ 0x55a01de07d80] mmco: unref short failure
[h264 @ 0x55a01de07d80] mmco: unref short failure
[h264 @ 0x55a01de07d80] mmco: unref short failure
 23%|██▎       | 335/1455 [3:31:51<12:13:42, 39.31s/it] 23%|██▎       | 336/1455 [3:32:00<9:25:21, 30.31s/it] [h264 @ 0x55a03014e2c0] mmco: unref short failure
[h264 @ 0x55a03014e2c0] mmco: unref short failure
[h264 @ 0x55a0351ed740] mmco: unref short failure
 23%|██▎       | 337/1455 [3:32:13<7:49:56, 25.22s/it] 23%|██▎       | 338/1455 [3:32:22<6:15:37, 20.18s/it][h264 @ 0x559335471700] mmco: unref short failure
 23%|██▎       | 339/1455 [3:32:30<5:10:27, 16.69s/it]09/17/2024 03:12:57 - INFO - __main__ -   current idx MQg3FQ-2lHU.8 from finetune_area returns wrong image/video, use 76859 instead.
[h264 @ 0x55a0196dec80] mmco: unref short failure
[h264 @ 0x555fe042da80] mmco: unref short failure
[h264 @ 0x555fdc115700] mmco: unref short failure
[h264 @ 0x55d4ddfc6500] mmco: unref short failure
[h264 @ 0x555fe8547340] mmco: unref short failure
[h264 @ 0x555fe8547340] mmco: unref short failure
[h264 @ 0x555fe8547340] mmco: unref short failure
[h264 @ 0x555fe8547340] mmco: unref short failure
[h264 @ 0x55933bde7a00] mmco: unref short failure
[h264 @ 0x55933bde7a00] mmco: unref short failure
[h264 @ 0x55933bde7a00] mmco: unref short failure
[h264 @ 0x55933bde7a00] mmco: unref short failure
[h264 @ 0x55d4d9553840] mmco: unref short failure
[h264 @ 0x55a029180c00] mmco: unref short failure
[h264 @ 0x555ff5457640] mmco: unref short failure
[h264 @ 0x555ff5457640] mmco: unref short failure
[h264 @ 0x55935830c480] mmco: unref short failure
[h264 @ 0x55d4e019a1c0] mmco: unref short failure
[h264 @ 0x559348990ac0] mmco: unref short failure
[h264 @ 0x559348990ac0] mmco: unref short failure
[h264 @ 0x555fedffe240] mmco: unref short failure
09/17/2024 03:14:18 - INFO - __main__ -   current idx LqXDiwVxwcc.104 from finetune_area returns wrong image/video, use 90401 instead.
[h264 @ 0x555ff1047100] mmco: unref short failure
[h264 @ 0x555ff1047100] mmco: unref short failure
[h264 @ 0x55a02178ce80] mmco: unref short failure
[h264 @ 0x55a02178ce80] mmco: unref short failure
[h264 @ 0x555fe86b3840] mmco: unref short failure
[h264 @ 0x555fe86b3840] mmco: unref short failure
[h264 @ 0x555fdafb6b40] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x555ffd6fe1c0] mmco: unref short failure
[h264 @ 0x55933f3e0f80] mmco: unref short failure
[h264 @ 0x55933f3e0f80] mmco: unref short failure
[h264 @ 0x5593512a6300] mmco: unref short failure
[h264 @ 0x555fd9e88f00] mmco: unref short failure
[h264 @ 0x555fd9e88f00] mmco: unref short failure
[h264 @ 0x556006849e80] mmco: unref short failure
[h264 @ 0x55a02ba70880] mmco: unref short failure
[h264 @ 0x55a02ba70880] mmco: unref short failure
[h264 @ 0x559353163e80] mmco: unref short failure
[h264 @ 0x559353163e80] mmco: unref short failure
[h264 @ 0x55a03a33dd80] mmco: unref short failure
[h264 @ 0x55a03a33dd80] mmco: unref short failure
 23%|██▎       | 340/1455 [3:35:11<18:31:14, 59.80s/it][h264 @ 0x55a026a54040] mmco: unref short failure
[h264 @ 0x55a00fd76480] mmco: unref short failure
[h264 @ 0x55a00fd76480] mmco: unref short failure
[h264 @ 0x5560079c3e40] mmco: unref short failure
[h264 @ 0x5560079c3e40] mmco: unref short failure
09/17/2024 03:15:55 - INFO - __main__ -   current idx jfvYACaIdq8.34 from finetune_area returns wrong image/video, use 64887 instead.
[h264 @ 0x55a0169abfc0] mmco: unref short failure
[h264 @ 0x55a0169abfc0] mmco: unref short failure
[h264 @ 0x55a030717d80] mmco: unref short failure
[h264 @ 0x55a030717d80] mmco: unref short failure
 23%|██▎       | 341/1455 [3:35:47<16:18:37, 52.71s/it][h264 @ 0x55a027a50240] mmco: unref short failure
[h264 @ 0x55a027a50240] mmco: unref short failure
[h264 @ 0x55a027a50240] mmco: unref short failure
[h264 @ 0x55a027a50240] mmco: unref short failure
[h264 @ 0x55d4b7b348c0] mmco: unref short failure
[h264 @ 0x55d4b7b348c0] mmco: unref short failure
[h264 @ 0x55d4b7b348c0] mmco: unref short failure
[h264 @ 0x55933f206180] mmco: unref short failure
[h264 @ 0x55933f206180] mmco: unref short failure
[h264 @ 0x55a01aa856c0] mmco: unref short failure
[h264 @ 0x55a01aa856c0] mmco: unref short failure
[h264 @ 0x559358467780] mmco: unref short failure
[h264 @ 0x55935d6579c0] mmco: unref short failure
[h264 @ 0x555ff79d3c80] mmco: unref short failure
 24%|██▎       | 342/1455 [3:36:09<13:27:50, 43.55s/it]09/17/2024 03:16:31 - INFO - __main__ -   current idx DyoQruLbYRg.26 from finetune_area returns wrong image/video, use 66469 instead.
[h264 @ 0x55935b4d3440] mmco: unref short failure
[h264 @ 0x55935b4d3440] mmco: unref short failure
[h264 @ 0x55d4e94e6740] mmco: unref short failure
[h264 @ 0x55d4e0d57800] mmco: unref short failure
[h264 @ 0x55a040562300] mmco: unref short failure
 24%|██▎       | 343/1455 [3:36:36<11:55:56, 38.63s/it] 24%|██▎       | 344/1455 [3:36:45<9:08:09, 29.60s/it] [h264 @ 0x555ff6149900] mmco: unref short failure
[h264 @ 0x555ff6149900] mmco: unref short failure
 24%|██▎       | 345/1455 [3:36:54<7:11:22, 23.32s/it][h264 @ 0x55935f28cbc0] mmco: unref short failure
[h264 @ 0x55935f28cbc0] mmco: unref short failure
[h264 @ 0x55935f28cbc0] mmco: unref short failure
[h264 @ 0x55935f28cbc0] mmco: unref short failure
[h264 @ 0x55d4cec0d240] mmco: unref short failure
 24%|██▍       | 346/1455 [3:37:10<6:30:55, 21.15s/it][h264 @ 0x55d4cc87af40] mmco: unref short failure
[h264 @ 0x555ff9a51e40] mmco: unref short failure
[h264 @ 0x555ff9a51e40] mmco: unref short failure
[h264 @ 0x55a03e9eb840] mmco: unref short failure
[h264 @ 0x55a03e9eb840] mmco: unref short failure
 24%|██▍       | 347/1455 [3:37:20<5:28:18, 17.78s/it][h264 @ 0x555ffaae8140] mmco: unref short failure
[h264 @ 0x55d4e0f9f6c0] mmco: unref short failure
[h264 @ 0x55d4e0f9f6c0] mmco: unref short failure
[h264 @ 0x55a0321ea340] mmco: unref short failure
09/17/2024 03:17:46 - INFO - __main__ -   current idx LbxDh6D_sq8.17 from finetune_area returns wrong image/video, use 15777 instead.
[h264 @ 0x55a059a7e040] mmco: unref short failure
[h264 @ 0x555ff8d45880] mmco: unref short failure
[h264 @ 0x5593487e6d80] mmco: unref short failure
[h264 @ 0x55d4e21bdf80] mmco: unref short failure
[h264 @ 0x55d4e21bdf80] mmco: unref short failure
[h264 @ 0x5593413e0940] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x55d4ca649140] mmco: unref short failure
[h264 @ 0x55a0514f6280] mmco: unref short failure
[h264 @ 0x559337af3bc0] mmco: unref short failure
[h264 @ 0x559337af3bc0] mmco: unref short failure
[h264 @ 0x55d4d4cd8080] mmco: unref short failure
[h264 @ 0x55d4d4cd8080] mmco: unref short failure
[h264 @ 0x55a01748cf80] mmco: unref short failure
[h264 @ 0x55a01b29dd80] mmco: unref short failure
[h264 @ 0x55a01b29dd80] mmco: unref short failure
[h264 @ 0x559343ff9300] mmco: unref short failure
[h264 @ 0x55a010753e80] mmco: unref short failure
[h264 @ 0x555fdbed7f80] mmco: unref short failure
[h264 @ 0x556000dedd80] mmco: unref short failure
[h264 @ 0x556000dedd80] mmco: unref short failure
[h264 @ 0x555fdf386040] mmco: unref short failure
[h264 @ 0x55d4e8069a40] mmco: unref short failure
[h264 @ 0x55934bdbc540] mmco: unref short failure
[h264 @ 0x55934bdbc540] mmco: unref short failure
[h264 @ 0x559340b05bc0] mmco: unref short failure
[h264 @ 0x559340b05bc0] mmco: unref short failure
[h264 @ 0x555ff0cb5680] mmco: unref short failure
[h264 @ 0x555ff0cb5680] mmco: unref short failure
[h264 @ 0x5593408e6840] mmco: unref short failure
[h264 @ 0x5593408e6840] mmco: unref short failure
[h264 @ 0x55d4c46abc40] mmco: unref short failure
[h264 @ 0x55d4da1f96c0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55d4ca236bc0] mmco: unref short failure
[h264 @ 0x55a026047480] mmco: unref short failure
[h264 @ 0x556006970340] mmco: unref short failure
[h264 @ 0x55a035ebd540] mmco: unref short failure
09/17/2024 03:20:12 - INFO - __main__ -   current idx EboJj8xv0Wo.48 from finetune_area returns wrong image/video, use 16555 instead.
[h264 @ 0x55a01d2ff1c0] mmco: unref short failure
[h264 @ 0x55a01d2ff1c0] mmco: unref short failure
[h264 @ 0x55d4e28de5c0] mmco: unref short failure
09/17/2024 03:20:21 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 111564 instead.
 24%|██▍       | 348/1455 [3:40:04<18:58:55, 61.73s/it][h264 @ 0x55d4db7350c0] mmco: unref short failure
[h264 @ 0x555ff5c81500] mmco: unref short failure
[h264 @ 0x555ff5c81500] mmco: unref short failure
09/17/2024 03:20:39 - INFO - __main__ -   current idx 6cR1r93ZMGw.233 from finetune_area returns wrong image/video, use 38444 instead.
[h264 @ 0x55934c091300] mmco: unref short failure
[h264 @ 0x55934c091300] mmco: unref short failure
[h264 @ 0x55d4d367c900] mmco: unref short failure
[h264 @ 0x55d4d367c900] mmco: unref short failure
[h264 @ 0x5560031930c0] mmco: unref short failure
[h264 @ 0x55d4c9ae4f00] mmco: unref short failure
[h264 @ 0x55a056017480] mmco: unref short failure
[h264 @ 0x55a056017480] mmco: unref short failure
 24%|██▍       | 349/1455 [3:41:02<18:36:31, 60.57s/it]09/17/2024 03:21:23 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 03:21:23 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x55a00f2ca740] mmco: unref short failure
[h264 @ 0x55a00f2ca740] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d4df0a6b40] mmco: unref short failure
[h264 @ 0x55d4df0a6b40] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x55d4da200280] mmco: unref short failure
[h264 @ 0x559355d6bc80] mmco: unref short failure
[h264 @ 0x559355d6bc80] mmco: unref short failure
[h264 @ 0x559355d6bc80] mmco: unref short failure
[h264 @ 0x559355d6bc80] mmco: unref short failure
[h264 @ 0x55d4e14d8a80] mmco: unref short failure
[h264 @ 0x5593541b0280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 03:22:29 - INFO - __main__ -   current idx BYJeo2oa0SU.13 from finetune_area returns wrong image/video, use 34730 instead.
[h264 @ 0x55600a78b4c0] mmco: unref short failure
[h264 @ 0x55600a78b4c0] mmco: unref short failure
[h264 @ 0x55a0112400c0] mmco: unref short failure
[h264 @ 0x555ffaf0ec40] mmco: unref short failure
[h264 @ 0x555ffaf0ec40] mmco: unref short failure
[h264 @ 0x55a01d013780] mmco: unref short failure
[h264 @ 0x55a037b2b6c0] mmco: unref short failure
[h264 @ 0x55a037b2b6c0] mmco: unref short failure
[h264 @ 0x555ff2b90140] mmco: unref short failure
[h264 @ 0x555ff2b90140] mmco: unref short failure
[h264 @ 0x55a02f23e5c0] mmco: unref short failure
[h264 @ 0x55a02f23e5c0] mmco: unref short failure
[h264 @ 0x556000dedd00] mmco: unref short failure
[h264 @ 0x55d4c9552340] mmco: unref short failure
[h264 @ 0x55d4c9552340] mmco: unref short failure
[h264 @ 0x55d4c9552340] mmco: unref short failure
[h264 @ 0x559347c73300] mmco: unref short failure
[h264 @ 0x555ff443df00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:45,  1.33it/s][A
  1%|          | 2/221 [00:01<02:04,  1.76it/s][A
  1%|▏         | 3/221 [00:01<01:33,  2.32it/s][A
  2%|▏         | 4/221 [00:01<01:09,  3.14it/s][A
  2%|▏         | 5/221 [00:01<01:02,  3.47it/s][A
  3%|▎         | 6/221 [00:02<01:01,  3.52it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.38it/s][A
  4%|▎         | 8/221 [00:02<01:11,  2.97it/s][A
  4%|▍         | 9/221 [00:03<01:09,  3.07it/s][A
  5%|▍         | 10/221 [00:03<01:18,  2.67it/s][A
  5%|▍         | 11/221 [00:03<01:09,  3.04it/s][A
  5%|▌         | 12/221 [00:04<01:17,  2.70it/s][A
  6%|▌         | 13/221 [00:04<01:15,  2.76it/s][A
  6%|▋         | 14/221 [00:05<01:51,  1.86it/s][A
  7%|▋         | 15/221 [00:05<01:36,  2.14it/s][A
  7%|▋         | 16/221 [00:06<01:37,  2.10it/s][A[h264 @ 0x55d4bc60b700] mmco: unref short failure
[h264 @ 0x55d4bc60b700] mmco: unref short failure
[h264 @ 0x55d4bc60b700] mmco: unref short failure
[h264 @ 0x55d4bc60b700] mmco: unref short failure

  8%|▊         | 17/221 [00:07<01:57,  1.73it/s][A
  8%|▊         | 18/221 [00:07<01:44,  1.94it/s][A
  9%|▊         | 19/221 [00:07<01:22,  2.44it/s][A
  9%|▉         | 20/221 [00:07<01:08,  2.91it/s][A
 10%|▉         | 21/221 [00:08<01:02,  3.22it/s][A
 10%|▉         | 22/221 [00:08<00:58,  3.39it/s][A
 10%|█         | 23/221 [00:08<00:50,  3.91it/s][A
 11%|█         | 24/221 [00:08<00:46,  4.27it/s][A
 11%|█▏        | 25/221 [00:09<00:45,  4.35it/s][A
 12%|█▏        | 26/221 [00:09<01:06,  2.93it/s][A
 12%|█▏        | 27/221 [00:09<00:54,  3.59it/s][A
[h264 @ 0x55d4c8e9b3c0] mmco: unref short failure
 13%|█▎        | 28/221 [00:10<01:11,  2.70it/s][A
 13%|█▎        | 29/221 [00:11<01:38,  1.96it/s][A
 14%|█▎        | 30/221 [00:11<01:24,  2.27it/s][A
 14%|█▍        | 31/221 [00:11<01:15,  2.52it/s][A
 14%|█▍        | 32/221 [00:11<00:59,  3.17it/s][A
 15%|█▍        | 33/221 [00:12<00:53,  3.53it/s][A
 15%|█▌        | 34/221 [00:12<00:52,  3.54it/s][A
 16%|█▌        | 35/221 [00:12<00:50,  3.66it/s][A
 16%|█▋        | 36/221 [00:12<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:13<01:10,  2.62it/s][A
 17%|█▋        | 38/221 [00:13<01:12,  2.53it/s][A[h264 @ 0x55a00f1d6040] mmco: unref short failure

 18%|█▊        | 39/221 [00:14<01:19,  2.30it/s][A
 18%|█▊        | 40/221 [00:14<01:15,  2.38it/s][A
 19%|█▊        | 41/221 [00:15<01:04,  2.80it/s][A
 19%|█▉        | 42/221 [00:15<01:15,  2.39it/s][A
 19%|█▉        | 43/221 [00:15<00:58,  3.05it/s][A
 20%|█▉        | 44/221 [00:15<00:47,  3.74it/s][A
 20%|██        | 45/221 [00:16<01:08,  2.56it/s][A
 21%|██        | 46/221 [00:17<01:10,  2.49it/s][A
 21%|██▏       | 47/221 [00:17<01:15,  2.31it/s][A
 22%|██▏       | 48/221 [00:17<01:00,  2.87it/s][A[h264 @ 0x5593413d1c80] mmco: unref short failure
[h264 @ 0x5593413d1c80] mmco: unref short failure

 22%|██▏       | 49/221 [00:18<01:32,  1.85it/s][A
 23%|██▎       | 50/221 [00:19<01:35,  1.80it/s][A
 23%|██▎       | 51/221 [00:19<01:14,  2.29it/s][A
 24%|██▎       | 52/221 [00:19<01:04,  2.63it/s][A
 24%|██▍       | 53/221 [00:19<00:51,  3.26it/s][A
 24%|██▍       | 54/221 [00:21<01:49,  1.53it/s][A
 25%|██▍       | 55/221 [00:21<01:31,  1.81it/s][A
 25%|██▌       | 56/221 [00:21<01:23,  1.97it/s][A
 26%|██▌       | 57/221 [00:22<01:11,  2.29it/s][A
 26%|██▌       | 58/221 [00:22<01:02,  2.60it/s][A
 27%|██▋       | 59/221 [00:22<00:56,  2.87it/s][A
 27%|██▋       | 60/221 [00:23<01:13,  2.19it/s][A
 28%|██▊       | 61/221 [00:23<01:03,  2.52it/s][A
 28%|██▊       | 62/221 [00:24<00:58,  2.73it/s][A
 29%|██▊       | 63/221 [00:24<00:52,  3.00it/s][A
 29%|██▉       | 64/221 [00:24<00:45,  3.43it/s][A
 29%|██▉       | 65/221 [00:24<00:44,  3.48it/s][A
 30%|██▉       | 66/221 [00:25<00:50,  3.10it/s][A
 30%|███       | 67/221 [00:25<01:02,  2.48it/s][A
 31%|███       | 68/221 [00:26<00:53,  2.85it/s][A
 31%|███       | 69/221 [00:26<01:11,  2.12it/s][A
 32%|███▏      | 70/221 [00:26<00:58,  2.60it/s][A
 32%|███▏      | 71/221 [00:27<01:03,  2.38it/s][A
 33%|███▎      | 72/221 [00:27<00:55,  2.71it/s][A
 33%|███▎      | 73/221 [00:28<00:55,  2.67it/s][A
 33%|███▎      | 74/221 [00:28<00:49,  2.98it/s][A
 34%|███▍      | 75/221 [00:28<00:51,  2.82it/s][A
 34%|███▍      | 76/221 [00:28<00:46,  3.12it/s][A
 35%|███▍      | 77/221 [00:29<00:44,  3.24it/s][A
 35%|███▌      | 78/221 [00:29<00:39,  3.58it/s][A
 36%|███▌      | 79/221 [00:30<00:52,  2.69it/s][A
 36%|███▌      | 80/221 [00:30<00:49,  2.85it/s][A
 37%|███▋      | 81/221 [00:30<00:50,  2.79it/s][A[h264 @ 0x55a036f53a00] mmco: unref short failure
[h264 @ 0x55a036f53a00] mmco: unref short failure

 37%|███▋      | 82/221 [00:31<01:04,  2.16it/s][A
 38%|███▊      | 83/221 [00:31<01:04,  2.15it/s][A
 38%|███▊      | 84/221 [00:32<00:54,  2.49it/s][A
 38%|███▊      | 85/221 [00:32<00:43,  3.11it/s][A[h264 @ 0x55a03911fc40] mmco: unref short failure
[h264 @ 0x55a03911fc40] mmco: unref short failure

 39%|███▉      | 86/221 [00:32<00:43,  3.08it/s][A
 39%|███▉      | 87/221 [00:33<00:57,  2.34it/s][A
 40%|███▉      | 88/221 [00:33<00:59,  2.25it/s][A
 40%|████      | 89/221 [00:34<00:58,  2.24it/s][A
 41%|████      | 90/221 [00:34<00:50,  2.61it/s][A
 41%|████      | 91/221 [00:34<00:41,  3.12it/s][A
 42%|████▏     | 92/221 [00:34<00:39,  3.24it/s][A
 42%|████▏     | 93/221 [00:35<00:43,  2.91it/s][A
 43%|████▎     | 94/221 [00:35<00:38,  3.28it/s][A
 43%|████▎     | 95/221 [00:35<00:38,  3.31it/s][A
 43%|████▎     | 96/221 [00:36<00:37,  3.35it/s][A
 44%|████▍     | 97/221 [00:36<00:31,  3.96it/s][A
 44%|████▍     | 98/221 [00:36<00:34,  3.53it/s][A
 45%|████▍     | 99/221 [00:36<00:29,  4.20it/s][A
 45%|████▌     | 100/221 [00:36<00:28,  4.26it/s][A
 46%|████▌     | 101/221 [00:37<00:24,  4.94it/s][A
 46%|████▌     | 102/221 [00:37<00:27,  4.34it/s][A
 47%|████▋     | 103/221 [00:37<00:25,  4.55it/s][A
 47%|████▋     | 104/221 [00:37<00:26,  4.37it/s][A
 48%|████▊     | 105/221 [00:38<00:28,  4.06it/s][A
 48%|████▊     | 106/221 [00:38<00:47,  2.43it/s][A
 48%|████▊     | 107/221 [00:39<00:38,  2.93it/s][A
 49%|████▉     | 108/221 [00:39<00:34,  3.24it/s][A
 49%|████▉     | 109/221 [00:39<00:34,  3.28it/s][A
 50%|████▉     | 110/221 [00:40<00:40,  2.75it/s][A
 50%|█████     | 111/221 [00:40<00:46,  2.36it/s][A
 51%|█████     | 112/221 [00:40<00:39,  2.78it/s][A
 51%|█████     | 113/221 [00:41<00:39,  2.73it/s][A
 52%|█████▏    | 114/221 [00:41<00:33,  3.20it/s][A[h264 @ 0x55600861dbc0] mmco: unref short failure

 52%|█████▏    | 115/221 [00:41<00:27,  3.85it/s][A[h264 @ 0x556000204c00] mmco: unref short failure
[h264 @ 0x556000204c00] mmco: unref short failure

 52%|█████▏    | 116/221 [00:44<01:45,  1.01s/it][A
 53%|█████▎    | 117/221 [00:44<01:25,  1.21it/s][A
 53%|█████▎    | 118/221 [00:45<01:09,  1.48it/s][A
 54%|█████▍    | 119/221 [00:45<00:58,  1.74it/s][A
 54%|█████▍    | 120/221 [00:45<00:52,  1.91it/s][A
 55%|█████▍    | 121/221 [00:45<00:39,  2.50it/s][A
 55%|█████▌    | 122/221 [00:46<00:36,  2.72it/s][A
 56%|█████▌    | 123/221 [00:46<00:32,  3.02it/s][A
 56%|█████▌    | 124/221 [00:46<00:29,  3.26it/s][A[h264 @ 0x555fdd8c0bc0] mmco: unref short failure
[h264 @ 0x555fdd8c0bc0] mmco: unref short failure
[h264 @ 0x555fdd8c0bc0] mmco: unref short failure
[h264 @ 0x555fdd8c0bc0] mmco: unref short failure

 57%|█████▋    | 125/221 [00:47<00:33,  2.83it/s][A
 57%|█████▋    | 126/221 [00:47<00:32,  2.95it/s][A
 57%|█████▋    | 127/221 [00:48<00:37,  2.52it/s][A
 58%|█████▊    | 128/221 [00:48<00:37,  2.47it/s][A
 58%|█████▊    | 129/221 [00:48<00:30,  3.01it/s][A
 59%|█████▉    | 130/221 [00:48<00:29,  3.13it/s][A
 59%|█████▉    | 131/221 [00:49<00:26,  3.43it/s][A
 60%|█████▉    | 132/221 [00:49<00:22,  3.95it/s][A
 60%|██████    | 133/221 [00:49<00:28,  3.05it/s][A
 61%|██████    | 134/221 [00:49<00:25,  3.47it/s][A
 61%|██████    | 135/221 [00:50<00:24,  3.46it/s][A
 62%|██████▏   | 136/221 [00:50<00:29,  2.87it/s][A
 62%|██████▏   | 137/221 [00:51<00:27,  3.01it/s][A
 62%|██████▏   | 138/221 [00:51<00:29,  2.84it/s][A[h264 @ 0x55935ae86d00] mmco: unref short failure
[h264 @ 0x55935ae86d00] mmco: unref short failure

 63%|██████▎   | 139/221 [00:51<00:31,  2.60it/s][A
 63%|██████▎   | 140/221 [00:52<00:30,  2.67it/s][A
 64%|██████▍   | 141/221 [00:52<00:25,  3.15it/s][A
 64%|██████▍   | 142/221 [00:52<00:24,  3.25it/s][A
 65%|██████▍   | 143/221 [00:53<00:25,  3.01it/s][A
 65%|██████▌   | 144/221 [00:53<00:23,  3.34it/s][A
 66%|██████▌   | 145/221 [00:53<00:19,  3.90it/s][A
 66%|██████▌   | 146/221 [00:53<00:18,  3.95it/s][A
 67%|██████▋   | 147/221 [00:54<00:18,  4.00it/s][A
 67%|██████▋   | 148/221 [00:54<00:22,  3.29it/s][A
 67%|██████▋   | 149/221 [00:54<00:20,  3.53it/s][A
 68%|██████▊   | 150/221 [00:54<00:19,  3.56it/s][A
 68%|██████▊   | 151/221 [00:55<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:57<00:50,  1.36it/s][A
 69%|██████▉   | 153/221 [00:57<00:42,  1.61it/s][A
 70%|██████▉   | 154/221 [00:57<00:35,  1.91it/s][A
 70%|███████   | 155/221 [00:57<00:28,  2.34it/s][A
 71%|███████   | 156/221 [00:58<00:26,  2.47it/s][A
 71%|███████   | 157/221 [00:59<00:35,  1.81it/s][A
 71%|███████▏  | 158/221 [00:59<00:32,  1.96it/s][A
 72%|███████▏  | 159/221 [00:59<00:28,  2.17it/s][A
 72%|███████▏  | 160/221 [01:00<00:26,  2.34it/s][A
 73%|███████▎  | 161/221 [01:00<00:21,  2.82it/s][A
 73%|███████▎  | 162/221 [01:01<00:33,  1.76it/s][A
 74%|███████▍  | 163/221 [01:01<00:27,  2.07it/s][A
 74%|███████▍  | 164/221 [01:02<00:27,  2.05it/s][A
 75%|███████▍  | 165/221 [01:02<00:22,  2.49it/s][A
 75%|███████▌  | 166/221 [01:03<00:22,  2.40it/s][A
 76%|███████▌  | 167/221 [01:03<00:19,  2.78it/s][A
 76%|███████▌  | 168/221 [01:03<00:24,  2.14it/s][A
 76%|███████▋  | 169/221 [01:04<00:20,  2.48it/s][A
 77%|███████▋  | 170/221 [01:04<00:21,  2.35it/s][A
 77%|███████▋  | 171/221 [01:05<00:21,  2.33it/s][A
 78%|███████▊  | 172/221 [01:05<00:19,  2.52it/s][A
 78%|███████▊  | 173/221 [01:05<00:16,  2.89it/s][A
 79%|███████▊  | 174/221 [01:05<00:15,  3.01it/s][A
 79%|███████▉  | 175/221 [01:06<00:18,  2.52it/s][A
 80%|███████▉  | 176/221 [01:06<00:16,  2.76it/s][A
 80%|████████  | 177/221 [01:07<00:14,  3.08it/s][A
 81%|████████  | 178/221 [01:07<00:13,  3.19it/s][A
 81%|████████  | 179/221 [01:07<00:15,  2.69it/s][A
 81%|████████▏ | 180/221 [01:07<00:12,  3.41it/s][A
 82%|████████▏ | 181/221 [01:08<00:11,  3.62it/s][A
 82%|████████▏ | 182/221 [01:08<00:09,  4.00it/s][A
 83%|████████▎ | 183/221 [01:08<00:09,  4.19it/s][A
 83%|████████▎ | 184/221 [01:08<00:09,  3.75it/s][A
 84%|████████▎ | 185/221 [01:09<00:08,  4.23it/s][A
 84%|████████▍ | 186/221 [01:09<00:10,  3.47it/s][A
 85%|████████▍ | 187/221 [01:09<00:09,  3.67it/s][A[h264 @ 0x55d4dd415740] mmco: unref short failure

 85%|████████▌ | 188/221 [01:10<00:09,  3.55it/s][A
 86%|████████▌ | 189/221 [01:10<00:09,  3.25it/s][A
 86%|████████▌ | 190/221 [01:10<00:10,  2.94it/s][A
 86%|████████▋ | 191/221 [01:10<00:08,  3.63it/s][A
 87%|████████▋ | 192/221 [01:11<00:07,  3.84it/s][A
 87%|████████▋ | 193/221 [01:11<00:06,  4.10it/s][A[h264 @ 0x559363b3dac0] mmco: unref short failure

 88%|████████▊ | 194/221 [01:12<00:12,  2.15it/s][A
 88%|████████▊ | 195/221 [01:12<00:10,  2.58it/s][A
 89%|████████▊ | 196/221 [01:13<00:11,  2.10it/s][A
 89%|████████▉ | 197/221 [01:13<00:09,  2.65it/s][A
 90%|████████▉ | 198/221 [01:13<00:08,  2.58it/s][A
 90%|█████████ | 199/221 [01:14<00:07,  2.96it/s][A
 90%|█████████ | 200/221 [01:14<00:08,  2.60it/s][A
 91%|█████████ | 201/221 [01:14<00:07,  2.83it/s][A
 91%|█████████▏| 202/221 [01:15<00:06,  3.06it/s][A
 92%|█████████▏| 203/221 [01:15<00:05,  3.17it/s][A
 92%|█████████▏| 204/221 [01:15<00:05,  3.07it/s][A
 93%|█████████▎| 205/221 [01:15<00:04,  3.74it/s][A
 93%|█████████▎| 206/221 [01:16<00:05,  2.82it/s][A
 94%|█████████▎| 207/221 [01:16<00:04,  2.88it/s][A
 94%|█████████▍| 208/221 [01:16<00:03,  3.26it/s][A
 95%|█████████▍| 209/221 [01:17<00:03,  3.21it/s][A
 95%|█████████▌| 210/221 [01:17<00:02,  3.94it/s][A
 95%|█████████▌| 211/221 [01:17<00:03,  3.19it/s][A[h264 @ 0x55600210f1c0] mmco: unref short failure
[h264 @ 0x55600210f1c0] mmco: unref short failure

 96%|█████████▌| 212/221 [01:18<00:02,  3.06it/s][A
 96%|█████████▋| 213/221 [01:18<00:02,  3.05it/s][A[h264 @ 0x5593365ebb00] mmco: unref short failure
[h264 @ 0x5593365ebb00] mmco: unref short failure

 97%|█████████▋| 214/221 [01:18<00:02,  2.84it/s][A
 97%|█████████▋| 215/221 [01:19<00:02,  2.81it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  2.54it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  2.43it/s][A
 99%|█████████▊| 218/221 [01:20<00:01,  2.43it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.80it/s][A
100%|█████████▉| 220/221 [01:24<00:01,  1.21s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.06it/s][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]
[h264 @ 0x55d4d3123480] mmco: unref short failure
[h264 @ 0x5593424abe00] mmco: unref short failure
[h264 @ 0x5593424abe00] mmco: unref short failure
[h264 @ 0x55600512dc00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:15,  2.90it/s][A
  1%|          | 2/221 [00:00<01:20,  2.71it/s][A
  1%|▏         | 3/221 [00:01<01:43,  2.10it/s][A
  2%|▏         | 4/221 [00:01<01:43,  2.10it/s][A
  2%|▏         | 5/221 [00:02<01:35,  2.26it/s][A
  3%|▎         | 6/221 [00:02<01:34,  2.29it/s][A
  3%|▎         | 7/221 [00:02<01:28,  2.42it/s][A
  4%|▎         | 8/221 [00:03<01:23,  2.56it/s][A
  4%|▍         | 9/221 [00:03<01:19,  2.67it/s][A
  5%|▍         | 10/221 [00:04<01:17,  2.72it/s][A[h264 @ 0x55d4da2cedc0] mmco: unref short failure

  5%|▍         | 11/221 [00:04<01:18,  2.68it/s][A
  5%|▌         | 12/221 [00:04<01:15,  2.78it/s][A
  6%|▌         | 13/221 [00:05<01:13,  2.83it/s][A
  6%|▋         | 14/221 [00:05<01:11,  2.91it/s][A
  7%|▋         | 15/221 [00:05<01:09,  2.99it/s][A
  7%|▋         | 16/221 [00:06<01:10,  2.89it/s][A
  8%|▊         | 17/221 [00:06<01:09,  2.93it/s][A
  8%|▊         | 18/221 [00:06<01:08,  2.97it/s][A
  9%|▊         | 19/221 [00:07<01:09,  2.93it/s][A
  9%|▉         | 20/221 [00:07<01:08,  2.95it/s][A
 10%|▉         | 21/221 [00:07<01:06,  3.02it/s][A
 10%|▉         | 22/221 [00:08<01:08,  2.92it/s][A
 10%|█         | 23/221 [00:08<01:06,  2.98it/s][A
 11%|█         | 24/221 [00:08<01:06,  2.95it/s][A
 11%|█▏        | 25/221 [00:09<01:05,  2.99it/s][A
 12%|█▏        | 26/221 [00:09<01:06,  2.93it/s][A
 12%|█▏        | 27/221 [00:09<01:06,  2.90it/s][A
 13%|█▎        | 28/221 [00:10<01:10,  2.72it/s][A[h264 @ 0x55a01b612180] mmco: unref short failure
[h264 @ 0x55a01b612180] mmco: unref short failure
[h264 @ 0x55a01b612180] mmco: unref short failure
[h264 @ 0x55a01b612180] mmco: unref short failure

 13%|█▎        | 29/221 [00:10<01:08,  2.82it/s][A
 14%|█▎        | 30/221 [00:10<01:05,  2.90it/s][A
 14%|█▍        | 31/221 [00:11<01:03,  2.97it/s][A
 14%|█▍        | 32/221 [00:11<01:06,  2.83it/s][A
 15%|█▍        | 33/221 [00:11<01:08,  2.75it/s][A
 15%|█▌        | 34/221 [00:12<01:09,  2.69it/s][A
 16%|█▌        | 35/221 [00:12<01:11,  2.59it/s][A
 16%|█▋        | 36/221 [00:13<01:15,  2.44it/s][A
 17%|█▋        | 37/221 [00:13<01:15,  2.44it/s][A
 17%|█▋        | 38/221 [00:14<01:14,  2.47it/s][A
 18%|█▊        | 39/221 [00:14<01:11,  2.54it/s][A
 18%|█▊        | 40/221 [00:14<01:12,  2.48it/s][A
 19%|█▊        | 41/221 [00:15<01:10,  2.55it/s][A
 19%|█▉        | 42/221 [00:15<01:05,  2.73it/s][A
 19%|█▉        | 43/221 [00:15<01:02,  2.84it/s][A
 20%|█▉        | 44/221 [00:16<01:00,  2.93it/s][A
 20%|██        | 45/221 [00:16<01:00,  2.92it/s][A
 21%|██        | 46/221 [00:16<00:58,  2.99it/s][A
 21%|██▏       | 47/221 [00:17<01:02,  2.79it/s][A
 22%|██▏       | 48/221 [00:17<01:05,  2.63it/s][A
 22%|██▏       | 49/221 [00:18<01:03,  2.70it/s][A
 23%|██▎       | 50/221 [00:18<01:02,  2.73it/s][A
 23%|██▎       | 51/221 [00:18<00:59,  2.84it/s][A
 24%|██▎       | 52/221 [00:19<00:58,  2.88it/s][A
 24%|██▍       | 53/221 [00:19<00:59,  2.80it/s][A
 24%|██▍       | 54/221 [00:19<01:01,  2.70it/s][A
 25%|██▍       | 55/221 [00:20<00:59,  2.80it/s][A
 25%|██▌       | 56/221 [00:20<00:57,  2.86it/s][A
 26%|██▌       | 57/221 [00:20<00:57,  2.87it/s][A
 26%|██▌       | 58/221 [00:21<00:56,  2.89it/s][A
 27%|██▋       | 59/221 [00:21<00:58,  2.77it/s][A
 27%|██▋       | 60/221 [00:21<00:58,  2.75it/s][A
 28%|██▊       | 61/221 [00:22<00:59,  2.70it/s][A
 28%|██▊       | 62/221 [00:22<00:57,  2.77it/s][A
 29%|██▊       | 63/221 [00:23<00:57,  2.74it/s][A
 29%|██▉       | 64/221 [00:23<00:56,  2.79it/s][A
 29%|██▉       | 65/221 [00:23<00:54,  2.85it/s][A[h264 @ 0x55d4ba173440] mmco: unref short failure
[h264 @ 0x55d4ba173440] mmco: unref short failure

 30%|██▉       | 66/221 [00:24<00:53,  2.89it/s][A
 30%|███       | 67/221 [00:24<00:53,  2.88it/s][A
 31%|███       | 68/221 [00:24<00:55,  2.77it/s][A
 31%|███       | 69/221 [00:25<00:54,  2.81it/s][A
 32%|███▏      | 70/221 [00:25<00:51,  2.90it/s][A[h264 @ 0x55a0194d1f40] mmco: unref short failure
[h264 @ 0x55a0194d1f40] mmco: unref short failure

 32%|███▏      | 71/221 [00:25<00:52,  2.88it/s][A
 33%|███▎      | 72/221 [00:26<00:50,  2.94it/s][A
 33%|███▎      | 73/221 [00:26<00:49,  2.97it/s][A09/17/2024 03:25:40 - INFO - __main__ -   current idx Y91Zr480Tn4.67 from finetune_area returns wrong image/video, use 32536 instead.

 33%|███▎      | 74/221 [00:26<00:51,  2.88it/s][A
 34%|███▍      | 75/221 [00:27<00:50,  2.91it/s][A
 34%|███▍      | 76/221 [00:27<00:49,  2.94it/s][A
 35%|███▍      | 77/221 [00:27<00:49,  2.90it/s][A
 35%|███▌      | 78/221 [00:28<00:51,  2.79it/s][A
 36%|███▌      | 79/221 [00:28<00:50,  2.83it/s][A
 36%|███▌      | 80/221 [00:28<00:50,  2.80it/s][A
 37%|███▋      | 81/221 [00:29<00:49,  2.84it/s][A
 37%|███▋      | 82/221 [00:29<00:47,  2.93it/s][A
 38%|███▊      | 83/221 [00:29<00:46,  3.00it/s][A
 38%|███▊      | 84/221 [00:30<00:46,  2.95it/s][A
 38%|███▊      | 85/221 [00:30<00:48,  2.80it/s][A
 39%|███▉      | 86/221 [00:31<00:51,  2.64it/s][A
 39%|███▉      | 87/221 [00:31<00:49,  2.70it/s][A
 40%|███▉      | 88/221 [00:31<00:47,  2.82it/s][A
 40%|████      | 89/221 [00:32<00:47,  2.76it/s][A
 41%|████      | 90/221 [00:32<00:47,  2.76it/s][A
 41%|████      | 91/221 [00:32<00:46,  2.78it/s][A
 42%|████▏     | 92/221 [00:33<00:46,  2.79it/s][A
 42%|████▏     | 93/221 [00:33<00:44,  2.85it/s][A
 43%|████▎     | 94/221 [00:33<00:44,  2.87it/s][A
 43%|████▎     | 95/221 [00:34<00:43,  2.91it/s][A
 43%|████▎     | 96/221 [00:34<00:43,  2.89it/s][A
 44%|████▍     | 97/221 [00:34<00:43,  2.87it/s][A
 44%|████▍     | 98/221 [00:35<00:42,  2.90it/s][A
 45%|████▍     | 99/221 [00:35<00:43,  2.82it/s][A
 45%|████▌     | 100/221 [00:35<00:42,  2.82it/s][A
 46%|████▌     | 101/221 [00:36<00:44,  2.71it/s][A
 46%|████▌     | 102/221 [00:36<00:42,  2.79it/s][A
 47%|████▋     | 103/221 [00:37<00:41,  2.86it/s][A
 47%|████▋     | 104/221 [00:37<00:41,  2.81it/s][A
 48%|████▊     | 105/221 [00:37<00:41,  2.79it/s][A
 48%|████▊     | 106/221 [00:38<00:39,  2.88it/s][A
 48%|████▊     | 107/221 [00:38<00:42,  2.69it/s][A
 49%|████▉     | 108/221 [00:38<00:42,  2.64it/s][A
 49%|████▉     | 109/221 [00:39<00:41,  2.71it/s][A
 50%|████▉     | 110/221 [00:39<00:39,  2.81it/s][A
 50%|█████     | 111/221 [00:39<00:38,  2.86it/s][A
 51%|█████     | 112/221 [00:40<00:39,  2.73it/s][A
 51%|█████     | 113/221 [00:40<00:38,  2.81it/s][A
 52%|█████▏    | 114/221 [00:40<00:36,  2.90it/s][A
 52%|█████▏    | 115/221 [00:41<00:37,  2.79it/s][A
 52%|█████▏    | 116/221 [00:41<00:41,  2.52it/s][A
 53%|█████▎    | 117/221 [00:42<00:41,  2.54it/s][A
 53%|█████▎    | 118/221 [00:42<00:41,  2.48it/s][A
 54%|█████▍    | 119/221 [00:43<00:40,  2.51it/s][A
 54%|█████▍    | 120/221 [00:43<00:38,  2.62it/s][A
 55%|█████▍    | 121/221 [00:43<00:36,  2.75it/s][A
 55%|█████▌    | 122/221 [00:44<00:35,  2.80it/s][A
 56%|█████▌    | 123/221 [00:44<00:35,  2.78it/s][A
 56%|█████▌    | 124/221 [00:44<00:34,  2.81it/s][A
 57%|█████▋    | 125/221 [00:45<00:33,  2.85it/s][A
 57%|█████▋    | 126/221 [00:45<00:34,  2.78it/s][A
 57%|█████▋    | 127/221 [00:45<00:33,  2.83it/s][A[h264 @ 0x55d4e6949080] mmco: unref short failure
[h264 @ 0x55d4e6949080] mmco: unref short failure

 58%|█████▊    | 128/221 [00:46<00:31,  2.91it/s][A
 58%|█████▊    | 129/221 [00:46<00:30,  2.99it/s][A
 59%|█████▉    | 130/221 [00:46<00:33,  2.75it/s][A
 59%|█████▉    | 131/221 [00:47<00:34,  2.59it/s][A
 60%|█████▉    | 132/221 [00:47<00:33,  2.66it/s][A
 60%|██████    | 133/221 [00:48<00:31,  2.76it/s][A
 61%|██████    | 134/221 [00:48<00:30,  2.85it/s][A
 61%|██████    | 135/221 [00:48<00:29,  2.91it/s][A
 62%|██████▏   | 136/221 [00:49<00:29,  2.83it/s][A
 62%|██████▏   | 137/221 [00:49<00:30,  2.74it/s][A
 62%|██████▏   | 138/221 [00:49<00:29,  2.85it/s][A
 63%|██████▎   | 139/221 [00:50<00:29,  2.80it/s][A
 63%|██████▎   | 140/221 [00:50<00:29,  2.75it/s][A
 64%|██████▍   | 141/221 [00:50<00:30,  2.64it/s][A[h264 @ 0x55d4e9478ac0] mmco: unref short failure
[h264 @ 0x55d4e9478ac0] mmco: unref short failure
[h264 @ 0x55d4e9478ac0] mmco: unref short failure

 64%|██████▍   | 142/221 [00:51<00:30,  2.60it/s][A
 65%|██████▍   | 143/221 [00:51<00:28,  2.72it/s][A
 65%|██████▌   | 144/221 [00:52<00:28,  2.73it/s][A
 66%|██████▌   | 145/221 [00:52<00:28,  2.62it/s][A
 66%|██████▌   | 146/221 [00:52<00:28,  2.61it/s][A
 67%|██████▋   | 147/221 [00:53<00:28,  2.62it/s][A
 67%|██████▋   | 148/221 [00:53<00:27,  2.63it/s][A
 67%|██████▋   | 149/221 [00:53<00:27,  2.59it/s][A
 68%|██████▊   | 150/221 [00:54<00:28,  2.50it/s][A
 68%|██████▊   | 151/221 [00:54<00:27,  2.52it/s][A
 69%|██████▉   | 152/221 [00:55<00:27,  2.52it/s][A
 69%|██████▉   | 153/221 [00:55<00:26,  2.60it/s][A
 70%|██████▉   | 154/221 [00:55<00:25,  2.66it/s][A
 70%|███████   | 155/221 [00:56<00:24,  2.72it/s][A
 71%|███████   | 156/221 [00:56<00:24,  2.61it/s][A
 71%|███████   | 157/221 [00:57<00:23,  2.71it/s][A
 71%|███████▏  | 158/221 [00:57<00:23,  2.70it/s][A
 72%|███████▏  | 159/221 [00:57<00:23,  2.65it/s][A
 72%|███████▏  | 160/221 [00:58<00:21,  2.78it/s][A
 73%|███████▎  | 161/221 [00:58<00:20,  2.87it/s][A
 73%|███████▎  | 162/221 [00:58<00:20,  2.84it/s][A
 74%|███████▍  | 163/221 [00:59<00:19,  2.93it/s][A
 74%|███████▍  | 164/221 [00:59<00:19,  2.89it/s][A
 75%|███████▍  | 165/221 [00:59<00:19,  2.94it/s][A
 75%|███████▌  | 166/221 [01:00<00:19,  2.83it/s][A
 76%|███████▌  | 167/221 [01:00<00:18,  2.88it/s][A
 76%|███████▌  | 168/221 [01:00<00:17,  2.97it/s][A
 76%|███████▋  | 169/221 [01:01<00:17,  2.90it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.71it/s][A
 77%|███████▋  | 171/221 [01:01<00:17,  2.81it/s][A
 78%|███████▊  | 172/221 [01:02<00:17,  2.80it/s][A
 78%|███████▊  | 173/221 [01:02<00:18,  2.65it/s][A
 79%|███████▊  | 174/221 [01:03<00:17,  2.62it/s][A
 79%|███████▉  | 175/221 [01:03<00:17,  2.60it/s][A
 80%|███████▉  | 176/221 [01:03<00:17,  2.50it/s][A
 80%|████████  | 177/221 [01:04<00:16,  2.66it/s][A
 81%|████████  | 178/221 [01:04<00:15,  2.77it/s][A
 81%|████████  | 179/221 [01:04<00:14,  2.85it/s][A
 81%|████████▏ | 180/221 [01:05<00:13,  2.94it/s][A
 82%|████████▏ | 181/221 [01:05<00:13,  2.88it/s][A[h264 @ 0x555fdff069c0] mmco: unref short failure
[h264 @ 0x555fdff069c0] mmco: unref short failure
[h264 @ 0x555fdff069c0] mmco: unref short failure
[h264 @ 0x555fdff069c0] mmco: unref short failure

 82%|████████▏ | 182/221 [01:05<00:13,  2.94it/s][A
 83%|████████▎ | 183/221 [01:06<00:13,  2.79it/s][A
 83%|████████▎ | 184/221 [01:06<00:12,  2.86it/s][A
 84%|████████▎ | 185/221 [01:06<00:12,  2.90it/s][A
 84%|████████▍ | 186/221 [01:07<00:12,  2.84it/s][A
 85%|████████▍ | 187/221 [01:07<00:11,  2.90it/s][A
 85%|████████▌ | 188/221 [01:08<00:11,  2.79it/s][A
 86%|████████▌ | 189/221 [01:08<00:11,  2.74it/s][A
 86%|████████▌ | 190/221 [01:08<00:11,  2.74it/s][A
 86%|████████▋ | 191/221 [01:09<00:10,  2.81it/s][A[h264 @ 0x5593547ff180] mmco: unref short failure
[h264 @ 0x5593547ff180] mmco: unref short failure

 87%|████████▋ | 192/221 [01:09<00:10,  2.89it/s][A
 87%|████████▋ | 193/221 [01:09<00:09,  2.83it/s][A
 88%|████████▊ | 194/221 [01:10<00:10,  2.65it/s][A
 88%|████████▊ | 195/221 [01:10<00:10,  2.56it/s][A
 89%|████████▊ | 196/221 [01:11<00:09,  2.67it/s][A
 89%|████████▉ | 197/221 [01:11<00:08,  2.76it/s][A
 90%|████████▉ | 198/221 [01:11<00:08,  2.69it/s][A
 90%|█████████ | 199/221 [01:12<00:07,  2.80it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.88it/s][A
 91%|█████████ | 201/221 [01:12<00:06,  2.92it/s][A
 91%|█████████▏| 202/221 [01:13<00:06,  2.74it/s][A
 92%|█████████▏| 203/221 [01:13<00:07,  2.29it/s][A
 92%|█████████▏| 204/221 [01:14<00:06,  2.46it/s][A
 93%|█████████▎| 205/221 [01:14<00:06,  2.61it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.73it/s][A
 94%|█████████▎| 207/221 [01:15<00:05,  2.78it/s][A
 94%|█████████▍| 208/221 [01:15<00:04,  2.77it/s][A
 95%|█████████▍| 209/221 [01:15<00:04,  2.74it/s][A
 95%|█████████▌| 210/221 [01:16<00:04,  2.72it/s][A
 95%|█████████▌| 211/221 [01:16<00:03,  2.81it/s][A
 96%|█████████▌| 212/221 [01:16<00:03,  2.88it/s][A
 96%|█████████▋| 213/221 [01:17<00:02,  2.90it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.68it/s][A[h264 @ 0x555fdc4ce780] mmco: unref short failure
[h264 @ 0x555fdc4ce780] mmco: unref short failure

 97%|█████████▋| 215/221 [01:18<00:02,  2.46it/s][A[h264 @ 0x555fdc4ce780] mmco: unref short failure
[h264 @ 0x555fdc4ce780] mmco: unref short failure

 98%|█████████▊| 216/221 [01:18<00:02,  2.38it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.35it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.41it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.59it/s][A
100%|█████████▉| 220/221 [01:20<00:00,  2.69it/s][A
100%|██████████| 221/221 [01:20<00:00,  2.78it/s][A100%|██████████| 221/221 [01:20<00:00,  2.75it/s]
[h264 @ 0x55d4bd5672c0] mmco: unref short failure
[h264 @ 0x55d4bd5672c0] mmco: unref short failure
[h264 @ 0x55d4bd5672c0] mmco: unref short failure
[h264 @ 0x55d4bd5672c0] mmco: unref short failure
[h264 @ 0x55934e5d1500] mmco: unref short failure
[h264 @ 0x55d4e7e56700] mmco: unref short failure
[h264 @ 0x55d4e7e56700] mmco: unref short failure
[h264 @ 0x559343fbcb40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:34,  6.41it/s][A
  1%|          | 2/221 [00:00<01:13,  2.96it/s][A
  1%|▏         | 3/221 [00:01<01:45,  2.07it/s][A
  2%|▏         | 4/221 [00:01<01:18,  2.77it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.15it/s][A
  3%|▎         | 6/221 [00:01<00:52,  4.07it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.37it/s][A
  4%|▎         | 8/221 [00:02<01:12,  2.93it/s][A
  4%|▍         | 9/221 [00:02<01:10,  3.01it/s][A
  5%|▍         | 10/221 [00:03<01:18,  2.69it/s][A
  5%|▍         | 11/221 [00:03<01:27,  2.40it/s][A
  5%|▌         | 12/221 [00:04<01:20,  2.59it/s][A
  6%|▌         | 13/221 [00:05<01:50,  1.88it/s][A
  6%|▋         | 14/221 [00:05<01:30,  2.29it/s][A
  7%|▋         | 15/221 [00:05<01:25,  2.41it/s][A
  7%|▋         | 16/221 [00:06<01:29,  2.29it/s][A
  8%|▊         | 17/221 [00:06<01:42,  1.99it/s][A
  8%|▊         | 18/221 [00:07<01:44,  1.95it/s][A
  9%|▊         | 19/221 [00:07<01:29,  2.25it/s][A
  9%|▉         | 20/221 [00:07<01:16,  2.63it/s][A
 10%|▉         | 21/221 [00:08<01:05,  3.03it/s][A
 10%|▉         | 22/221 [00:08<01:01,  3.24it/s][A
 10%|█         | 23/221 [00:08<00:50,  3.92it/s][A
 11%|█         | 24/221 [00:08<00:48,  4.10it/s][A
 11%|█▏        | 25/221 [00:09<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:09<01:00,  3.21it/s][A
 12%|█▏        | 27/221 [00:09<01:01,  3.15it/s][A
 13%|█▎        | 28/221 [00:10<01:11,  2.72it/s][A
 13%|█▎        | 29/221 [00:10<01:08,  2.81it/s][A
 14%|█▎        | 30/221 [00:10<01:05,  2.92it/s][A
 14%|█▍        | 31/221 [00:11<01:04,  2.93it/s][A
 14%|█▍        | 32/221 [00:11<00:58,  3.24it/s][A
 15%|█▍        | 33/221 [00:11<00:54,  3.44it/s][A
 15%|█▌        | 34/221 [00:12<01:02,  2.97it/s][A
 16%|█▌        | 35/221 [00:12<01:09,  2.69it/s][A
 16%|█▋        | 36/221 [00:13<01:15,  2.45it/s][A
 17%|█▋        | 37/221 [00:13<01:14,  2.45it/s][A
 17%|█▋        | 38/221 [00:13<01:12,  2.53it/s][A
 18%|█▊        | 39/221 [00:14<01:00,  3.03it/s][A
 18%|█▊        | 40/221 [00:14<01:00,  3.02it/s][A
 19%|█▊        | 41/221 [00:14<00:53,  3.36it/s][A
 19%|█▉        | 42/221 [00:14<00:51,  3.47it/s][A
 19%|█▉        | 43/221 [00:15<00:51,  3.48it/s][A
 20%|█▉        | 44/221 [00:15<00:42,  4.12it/s][A
 20%|██        | 45/221 [00:15<00:51,  3.41it/s][A
 21%|██        | 46/221 [00:16<00:53,  3.29it/s][A
 21%|██▏       | 47/221 [00:16<00:49,  3.51it/s][A
 22%|██▏       | 48/221 [00:16<00:47,  3.62it/s][A
 22%|██▏       | 49/221 [00:16<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:17<01:01,  2.77it/s][A
 23%|██▎       | 51/221 [00:17<01:01,  2.77it/s][A
 24%|██▎       | 52/221 [00:17<00:48,  3.45it/s][A
 24%|██▍       | 53/221 [00:18<00:43,  3.86it/s][A
 24%|██▍       | 54/221 [00:18<00:44,  3.76it/s][A
 25%|██▍       | 55/221 [00:18<00:43,  3.84it/s][A
 25%|██▌       | 56/221 [00:18<00:48,  3.37it/s][A
 26%|██▌       | 57/221 [00:19<00:48,  3.39it/s][A
 26%|██▌       | 58/221 [00:19<00:42,  3.80it/s][A
 27%|██▋       | 59/221 [00:19<00:43,  3.71it/s][A
 27%|██▋       | 60/221 [00:20<00:50,  3.20it/s][A[h264 @ 0x55a044c36e40] mmco: unref short failure

 28%|██▊       | 61/221 [00:20<00:49,  3.23it/s][A[h264 @ 0x55a0270fc9c0] mmco: unref short failure

 28%|██▊       | 62/221 [00:20<00:48,  3.25it/s][A
 29%|██▊       | 63/221 [00:21<00:50,  3.12it/s][A
 29%|██▉       | 64/221 [00:21<00:48,  3.26it/s][A
 29%|██▉       | 65/221 [00:21<00:47,  3.28it/s][A
 30%|██▉       | 66/221 [00:22<00:51,  3.02it/s][A
 30%|███       | 67/221 [00:22<01:03,  2.41it/s][A
 31%|███       | 68/221 [00:22<00:58,  2.62it/s][A
 31%|███       | 69/221 [00:23<01:04,  2.36it/s][A
 32%|███▏      | 70/221 [00:23<00:55,  2.74it/s][A
 32%|███▏      | 71/221 [00:24<01:03,  2.36it/s][A
 33%|███▎      | 72/221 [00:24<01:01,  2.42it/s][A
 33%|███▎      | 73/221 [00:25<00:58,  2.52it/s][A
 33%|███▎      | 74/221 [00:25<00:55,  2.66it/s][A
 34%|███▍      | 75/221 [00:25<01:00,  2.41it/s][A
 34%|███▍      | 76/221 [00:26<00:48,  2.98it/s][A
 35%|███▍      | 77/221 [00:26<00:44,  3.23it/s][A
 35%|███▌      | 78/221 [00:26<00:42,  3.36it/s][A
 36%|███▌      | 79/221 [00:26<00:47,  2.98it/s][A
 36%|███▌      | 80/221 [00:27<00:50,  2.81it/s][A
 37%|███▋      | 81/221 [00:27<00:51,  2.74it/s][A
 37%|███▋      | 82/221 [00:27<00:44,  3.11it/s][A
 38%|███▊      | 83/221 [00:28<00:35,  3.87it/s][A
 38%|███▊      | 84/221 [00:28<00:44,  3.06it/s][A
 38%|███▊      | 85/221 [00:28<00:41,  3.25it/s][A
 39%|███▉      | 86/221 [00:29<00:44,  3.02it/s][A
 39%|███▉      | 87/221 [00:29<01:00,  2.21it/s][A
 40%|███▉      | 88/221 [00:30<00:54,  2.46it/s][A
 40%|████      | 89/221 [00:30<00:53,  2.48it/s][A
 41%|████      | 90/221 [00:31<00:52,  2.50it/s][A
 41%|████      | 91/221 [00:31<00:47,  2.74it/s][A
 42%|████▏     | 92/221 [00:31<00:44,  2.88it/s][A
 42%|████▏     | 93/221 [00:32<00:45,  2.78it/s][A
 43%|████▎     | 94/221 [00:32<00:41,  3.06it/s][A
 43%|████▎     | 95/221 [00:32<00:50,  2.52it/s][A
 43%|████▎     | 96/221 [00:33<00:48,  2.56it/s][A
 44%|████▍     | 97/221 [00:33<00:44,  2.78it/s][A
 44%|████▍     | 98/221 [00:33<00:42,  2.92it/s][A
 45%|████▍     | 99/221 [00:34<00:38,  3.16it/s][A
 45%|████▌     | 100/221 [00:34<00:34,  3.54it/s][A
 46%|████▌     | 101/221 [00:34<00:35,  3.36it/s][A
 46%|████▌     | 102/221 [00:34<00:34,  3.48it/s][A
 47%|████▋     | 103/221 [00:35<00:31,  3.70it/s][A
 47%|████▋     | 104/221 [00:35<00:29,  4.01it/s][A
 48%|████▊     | 105/221 [00:35<00:29,  3.91it/s][A
 48%|████▊     | 106/221 [00:36<00:42,  2.68it/s][A
 48%|████▊     | 107/221 [00:36<00:36,  3.10it/s][A[h264 @ 0x55d4d7d27040] mmco: unref short failure

 49%|████▉     | 108/221 [00:36<00:30,  3.65it/s][A
 49%|████▉     | 109/221 [00:36<00:33,  3.39it/s][A
 50%|████▉     | 110/221 [00:37<00:35,  3.10it/s][A
 50%|█████     | 111/221 [00:37<00:41,  2.68it/s][A
 51%|█████     | 112/221 [00:38<00:41,  2.62it/s][A
 51%|█████     | 113/221 [00:38<00:37,  2.84it/s][A
 52%|█████▏    | 115/221 [00:38<00:30,  3.43it/s][A
 52%|█████▏    | 116/221 [00:39<00:28,  3.65it/s][A
 53%|█████▎    | 117/221 [00:39<00:30,  3.43it/s][A
 53%|█████▎    | 118/221 [00:40<00:37,  2.72it/s][A
 54%|█████▍    | 119/221 [00:40<00:41,  2.46it/s][A
 54%|█████▍    | 120/221 [00:41<00:42,  2.39it/s][A
 55%|█████▍    | 121/221 [00:41<00:36,  2.70it/s][A
 55%|█████▌    | 122/221 [00:41<00:34,  2.84it/s][A
 56%|█████▌    | 123/221 [00:41<00:33,  2.89it/s][A
 56%|█████▌    | 124/221 [00:42<00:40,  2.42it/s][A
 57%|█████▋    | 125/221 [00:43<00:57,  1.67it/s][A
 57%|█████▋    | 126/221 [00:43<00:49,  1.92it/s][A
 57%|█████▋    | 127/221 [00:44<00:57,  1.62it/s][A
 58%|█████▊    | 128/221 [00:44<00:48,  1.91it/s][A
 58%|█████▊    | 129/221 [00:45<00:40,  2.29it/s][A
 59%|█████▉    | 130/221 [00:45<00:36,  2.48it/s][A
 59%|█████▉    | 131/221 [00:45<00:29,  3.02it/s][A
 60%|█████▉    | 132/221 [00:46<00:29,  3.00it/s][A[h264 @ 0x55933e34c8c0] mmco: unref short failure
[h264 @ 0x55933e34c8c0] mmco: unref short failure

 60%|██████    | 133/221 [00:46<00:36,  2.43it/s][A
 61%|██████    | 134/221 [00:47<00:34,  2.53it/s][A
 61%|██████    | 135/221 [00:47<00:27,  3.08it/s][A
 62%|██████▏   | 136/221 [00:47<00:28,  2.98it/s][A
 62%|██████▏   | 137/221 [00:47<00:27,  3.01it/s][A
 62%|██████▏   | 138/221 [00:48<00:28,  2.90it/s][A
 63%|██████▎   | 139/221 [00:48<00:30,  2.70it/s][A
 63%|██████▎   | 140/221 [00:48<00:26,  3.01it/s][A
 64%|██████▍   | 141/221 [00:49<00:27,  2.86it/s][A
 64%|██████▍   | 142/221 [00:49<00:25,  3.15it/s][A
 65%|██████▍   | 143/221 [00:49<00:28,  2.77it/s][A
 65%|██████▌   | 144/221 [00:50<00:24,  3.08it/s][A
 66%|██████▌   | 145/221 [00:50<00:23,  3.17it/s][A
 66%|██████▌   | 146/221 [00:50<00:23,  3.23it/s][A
 67%|██████▋   | 147/221 [00:51<00:21,  3.50it/s][A
 67%|██████▋   | 148/221 [00:51<00:20,  3.57it/s][A
 67%|██████▋   | 149/221 [00:51<00:20,  3.43it/s][A
 68%|██████▊   | 150/221 [00:51<00:21,  3.27it/s][A
 68%|██████▊   | 151/221 [00:52<00:34,  2.03it/s][A
 69%|██████▉   | 152/221 [00:53<00:41,  1.65it/s][A
 69%|██████▉   | 153/221 [00:54<00:33,  2.04it/s][A
 70%|██████▉   | 154/221 [00:54<00:28,  2.38it/s][A
 70%|███████   | 155/221 [00:54<00:30,  2.18it/s][A
 71%|███████   | 156/221 [00:55<00:30,  2.13it/s][A
 71%|███████   | 157/221 [00:55<00:28,  2.24it/s][A
 71%|███████▏  | 158/221 [00:56<00:27,  2.25it/s][A
 72%|███████▏  | 159/221 [00:56<00:23,  2.67it/s][A
 72%|███████▏  | 160/221 [00:56<00:20,  2.93it/s][A
 73%|███████▎  | 161/221 [00:56<00:18,  3.28it/s][A
 73%|███████▎  | 162/221 [00:57<00:16,  3.62it/s][A
 74%|███████▍  | 163/221 [00:57<00:15,  3.74it/s][A
 74%|███████▍  | 164/221 [00:57<00:13,  4.25it/s][A
 75%|███████▍  | 165/221 [00:57<00:11,  4.80it/s][A
 75%|███████▌  | 166/221 [00:58<00:15,  3.66it/s][A
 76%|███████▌  | 167/221 [00:58<00:13,  4.08it/s][A
 76%|███████▌  | 168/221 [00:58<00:14,  3.68it/s][A
 76%|███████▋  | 169/221 [00:58<00:13,  3.73it/s][A
 77%|███████▋  | 170/221 [00:59<00:20,  2.50it/s][A
 77%|███████▋  | 171/221 [01:00<00:22,  2.23it/s][A
 78%|███████▊  | 172/221 [01:00<00:18,  2.62it/s][A
 78%|███████▊  | 173/221 [01:00<00:16,  2.88it/s][A
 79%|███████▊  | 174/221 [01:00<00:16,  2.92it/s][A
 79%|███████▉  | 175/221 [01:01<00:16,  2.85it/s][A
 80%|███████▉  | 176/221 [01:01<00:14,  3.15it/s][A
 80%|████████  | 177/221 [01:01<00:12,  3.48it/s][A[h264 @ 0x559345494340] mmco: unref short failure

 81%|████████  | 178/221 [01:02<00:16,  2.61it/s][A
 81%|████████  | 179/221 [01:02<00:15,  2.68it/s][A
 81%|████████▏ | 180/221 [01:02<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [01:02<00:10,  3.70it/s][A
 82%|████████▏ | 182/221 [01:03<00:10,  3.76it/s][A
 83%|████████▎ | 183/221 [01:03<00:10,  3.48it/s][A
 83%|████████▎ | 184/221 [01:03<00:10,  3.52it/s][A
 84%|████████▎ | 185/221 [01:04<00:09,  3.63it/s][A
 84%|████████▍ | 186/221 [01:04<00:12,  2.75it/s][A
 85%|████████▍ | 187/221 [01:04<00:11,  2.90it/s][A
 85%|████████▌ | 188/221 [01:05<00:10,  3.23it/s][A
 86%|████████▌ | 189/221 [01:05<00:08,  3.66it/s][A
 86%|████████▌ | 190/221 [01:05<00:11,  2.82it/s][A
 86%|████████▋ | 191/221 [01:06<00:08,  3.50it/s][A
 87%|████████▋ | 192/221 [01:06<00:08,  3.51it/s][A
 87%|████████▋ | 193/221 [01:06<00:06,  4.07it/s][A
 88%|████████▊ | 194/221 [01:06<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [01:07<00:06,  3.74it/s][A
 89%|████████▊ | 196/221 [01:07<00:09,  2.54it/s][A
 89%|████████▉ | 197/221 [01:08<00:09,  2.50it/s][A
 90%|████████▉ | 198/221 [01:08<00:09,  2.37it/s][A
 90%|█████████ | 199/221 [01:08<00:07,  2.87it/s][A[h264 @ 0x55d4e208d080] mmco: unref short failure

 90%|█████████ | 200/221 [01:09<00:07,  2.67it/s][A
 91%|█████████ | 201/221 [01:09<00:06,  2.94it/s][A
 91%|█████████▏| 202/221 [01:09<00:06,  3.07it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.28it/s][A
 92%|█████████▏| 204/221 [01:10<00:04,  3.52it/s][A
 93%|█████████▎| 205/221 [01:10<00:04,  3.94it/s][A
 93%|█████████▎| 206/221 [01:11<00:04,  3.00it/s][A
 94%|█████████▎| 207/221 [01:11<00:04,  3.18it/s][A
 94%|█████████▍| 208/221 [01:11<00:03,  3.29it/s][A
 95%|█████████▍| 209/221 [01:11<00:03,  3.06it/s][A
 95%|█████████▌| 210/221 [01:12<00:03,  3.55it/s][A
 95%|█████████▌| 211/221 [01:12<00:02,  3.69it/s][A
 96%|█████████▌| 212/221 [01:12<00:02,  3.20it/s][A
 96%|█████████▋| 213/221 [01:13<00:02,  2.91it/s][A
 97%|█████████▋| 214/221 [01:13<00:02,  2.60it/s][A
 97%|█████████▋| 215/221 [01:14<00:02,  2.61it/s][A[h264 @ 0x559334dc7e80] mmco: unref short failure
[h264 @ 0x559334dc7e80] mmco: unref short failure

 98%|█████████▊| 216/221 [01:14<00:01,  2.67it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  2.65it/s][A
 99%|█████████▊| 218/221 [01:15<00:01,  2.88it/s][A
 99%|█████████▉| 219/221 [01:15<00:00,  2.57it/s][A
100%|█████████▉| 220/221 [01:15<00:00,  3.04it/s][A
100%|██████████| 221/221 [01:16<00:00,  3.03it/s][A100%|██████████| 221/221 [01:16<00:00,  2.90it/s]
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'area_r1': 38.9, 'area_recall': '38.9/66.3/75.3', 'area_ravg': 60.2}
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'forward_r1': 35.9, 'forward_recall': '35.9/63.9/75.3', 'forward_ravg': 58.4}
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'area_video_r1': 38.3, 'area_video_recall': '38.3/68.0/77.1', 'area_video_ravg': 61.2}
09/17/2024 03:28:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 03:28:02 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'area_video_r1': 52.9, 'area_video_recall': '52.9/75.5/83.6', 'area_video_ravg': 70.7, 'area_video_back_r1': 49.9, 'area_video_back_recall': '49.9/74.5/81.3', 'area_video_back_ravg': 68.6}
09/17/2024 03:28:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 03:28:02 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'video_r1': 35.0, 'video_recall': '35.0/64.6/74.0', 'video_ravg': 57.8}
09/17/2024 03:28:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 03:28:02 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 03:28:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 349--===========

09/17/2024 03:28:02 - INFO - __main__ -   {'video_r1': 53.1, 'video_recall': '53.1/76.2/83.4', 'video_ravg': 70.9}
09/17/2024 03:28:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 03:28:02 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x55a010fc1fc0] mmco: unref short failure
[h264 @ 0x55a010fc1fc0] mmco: unref short failure
[h264 @ 0x555fda12e000] mmco: unref short failure
[h264 @ 0x559346283840] mmco: unref short failure
[h264 @ 0x559346283840] mmco: unref short failure
09/17/2024 03:28:37 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0077840406447649, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3476316928863525, 'loss_ret%tv%ta--finetune_area/total_loss': 1.35541570186615}
 24%|██▍       | 350/1455 [3:48:21<53:25:31, 174.06s/it] 24%|██▍       | 351/1455 [3:48:28<38:02:25, 124.04s/it][h264 @ 0x55d4d7e22c00] mmco: unref short failure
09/17/2024 03:28:55 - INFO - __main__ -   current idx OtwONFkH6Us.36 from finetune_area returns wrong image/video, use 125564 instead.
 24%|██▍       | 352/1455 [3:48:36<27:19:27, 89.18s/it] [h264 @ 0x55a045c08080] mmco: unref short failure
[h264 @ 0x555fe7b09440] mmco: unref short failure
[h264 @ 0x55935e3ed580] mmco: unref short failure
[h264 @ 0x55935e3ed580] mmco: unref short failure
 24%|██▍       | 353/1455 [3:48:43<19:49:05, 64.74s/it][h264 @ 0x55d4e69a55c0] mmco: unref short failure
[h264 @ 0x55d4e69a55c0] mmco: unref short failure
[h264 @ 0x55d4e15a9a80] mmco: unref short failure
[h264 @ 0x55d4e15a9a80] mmco: unref short failure
 24%|██▍       | 354/1455 [3:48:52<14:38:47, 47.89s/it][h264 @ 0x559335feaec0] mmco: unref short failure
[h264 @ 0x559335feaec0] mmco: unref short failure
[h264 @ 0x55d4d3ed0b40] mmco: unref short failure
[h264 @ 0x55d4d3ed0b40] mmco: unref short failure
 24%|██▍       | 355/1455 [3:49:00<10:58:46, 35.93s/it][h264 @ 0x55d4b8db2180] mmco: unref short failure
[h264 @ 0x55d4b8db2180] mmco: unref short failure
[h264 @ 0x55d4b8db2180] mmco: unref short failure
[h264 @ 0x55d4b8db2180] mmco: unref short failure
 24%|██▍       | 356/1455 [3:49:09<8:27:44, 27.72s/it] [h264 @ 0x55a01d5838c0] mmco: unref short failure
 25%|██▍       | 357/1455 [3:49:18<6:45:34, 22.16s/it][h264 @ 0x55a011dc1f00] mmco: unref short failure
 25%|██▍       | 358/1455 [3:49:26<5:29:49, 18.04s/it][h264 @ 0x55a03a0ddd00] mmco: unref short failure
[h264 @ 0x55a03a0ddd00] mmco: unref short failure
[h264 @ 0x55a03a0ddd00] mmco: unref short failure
[h264 @ 0x556001b35400] mmco: unref short failure
 25%|██▍       | 359/1455 [3:49:36<4:42:23, 15.46s/it][h264 @ 0x55a01cff2f00] mmco: unref short failure
[h264 @ 0x55a01cff2f00] mmco: unref short failure
[h264 @ 0x5593591f2e80] mmco: unref short failure
[h264 @ 0x5593591f2e80] mmco: unref short failure
[h264 @ 0x5593591f2e80] mmco: unref short failure
[h264 @ 0x5593591f2e80] mmco: unref short failure
[h264 @ 0x55a012acfa80] mmco: unref short failure
 25%|██▍       | 360/1455 [3:49:45<4:06:10, 13.49s/it]09/17/2024 03:30:09 - INFO - __main__ -   current idx FajCFx8uN-s.3 from finetune_area returns wrong image/video, use 75186 instead.
[h264 @ 0x5593397791c0] mmco: unref short failure
[h264 @ 0x5593397791c0] mmco: unref short failure
 25%|██▍       | 361/1455 [3:49:53<3:38:52, 12.00s/it][h264 @ 0x555ff0713a80] mmco: unref short failure
[h264 @ 0x555ff0713a80] mmco: unref short failure
[h264 @ 0x55a03e14df00] mmco: unref short failure
[h264 @ 0x55a03e14df00] mmco: unref short failure
[h264 @ 0x55a03e14df00] mmco: unref short failure
[h264 @ 0x55a03e14df00] mmco: unref short failure
 25%|██▍       | 362/1455 [3:50:01<3:18:27, 10.89s/it][h264 @ 0x555fe7b09900] mmco: unref short failure
[h264 @ 0x55d4de5df4c0] mmco: unref short failure
[h264 @ 0x55d4de5df4c0] mmco: unref short failure
 25%|██▍       | 363/1455 [3:50:10<3:04:52, 10.16s/it][h264 @ 0x555fdba64fc0] mmco: unref short failure
[h264 @ 0x55d4c2692100] mmco: unref short failure
[h264 @ 0x55d4c2692100] mmco: unref short failure
 25%|██▌       | 364/1455 [3:50:19<3:00:24,  9.92s/it] 25%|██▌       | 365/1455 [3:50:28<2:54:54,  9.63s/it][h264 @ 0x555fdff06bc0] mmco: unref short failure
[h264 @ 0x555fdff06bc0] mmco: unref short failure
[h264 @ 0x555fe752c900] mmco: unref short failure
[h264 @ 0x555fdb645f80] mmco: unref short failure
[h264 @ 0x555fdb645f80] mmco: unref short failure
[h264 @ 0x555fdb645f80] mmco: unref short failure
[h264 @ 0x555fdb645f80] mmco: unref short failure
[h264 @ 0x55d4e15a9880] mmco: unref short failure
[h264 @ 0x55d4e15a9880] mmco: unref short failure
[h264 @ 0x55a00ef61740] mmco: unref short failure
[h264 @ 0x55a00e7f0d00] mmco: unref short failure
[h264 @ 0x55a00e7f0d00] mmco: unref short failure
[h264 @ 0x55a00e7e7600] mmco: unref short failure
[h264 @ 0x55934def1b40] mmco: unref short failure
[h264 @ 0x55934def1b40] mmco: unref short failure
[h264 @ 0x55934def1b40] mmco: unref short failure
[h264 @ 0x55934def1b40] mmco: unref short failure
[h264 @ 0x55934def1b40] mmco: unref short failure
[h264 @ 0x559337d40a80] mmco: unref short failure
[h264 @ 0x559337d40a80] mmco: unref short failure
[h264 @ 0x55a0228a4c80] mmco: unref short failure
[h264 @ 0x55a0228a4c80] mmco: unref short failure
[h264 @ 0x5593646a5a80] mmco: unref short failure
[h264 @ 0x5593646a5a80] mmco: unref short failure
[h264 @ 0x555fe13272c0] mmco: unref short failure
[h264 @ 0x55d4b7f73880] mmco: unref short failure
[h264 @ 0x55d4b7f73880] mmco: unref short failure
[h264 @ 0x55d4b7f73880] mmco: unref short failure
[h264 @ 0x55d4b7f73880] mmco: unref short failure
09/17/2024 03:31:46 - INFO - __main__ -   current idx BcbIxaIlq2k.29 from finetune_area returns wrong image/video, use 61673 instead.
[h264 @ 0x55a01420d300] mmco: unref short failure
[h264 @ 0x555fdc977d40] mmco: unref short failure
[h264 @ 0x555fdc977d40] mmco: unref short failure
[h264 @ 0x555fdc977d40] mmco: unref short failure
[h264 @ 0x555fdc977d40] mmco: unref short failure
[h264 @ 0x55600503c800] mmco: unref short failure
[h264 @ 0x55a03aed0b40] mmco: unref short failure
[h264 @ 0x55d4ddae53c0] mmco: unref short failure
[h264 @ 0x55d4ddae53c0] mmco: unref short failure
[h264 @ 0x555ffce4e580] mmco: unref short failure
[h264 @ 0x555ffce4e580] mmco: unref short failure
[h264 @ 0x55d4b7837840] mmco: unref short failure
[h264 @ 0x55d4b7837840] mmco: unref short failure
09/17/2024 03:32:37 - INFO - __main__ -   current idx Xkz6TCSh5Q0.11 from finetune_area returns wrong image/video, use 74946 instead.
[h264 @ 0x555fdba651c0] mmco: unref short failure
[h264 @ 0x555fdba651c0] mmco: unref short failure
[h264 @ 0x55a012acf400] mmco: unref short failure
[h264 @ 0x555fe0c0c880] mmco: unref short failure
[h264 @ 0x55a03ab5b680] mmco: unref short failure
[h264 @ 0x55a03ab5b680] mmco: unref short failure
[h264 @ 0x55a03ab5b680] mmco: unref short failure
[h264 @ 0x55a03ab5b680] mmco: unref short failure
[h264 @ 0x559337586800] mmco: unref short failure
[h264 @ 0x55a03e593f40] mmco: unref short failure
[h264 @ 0x55a03e593f40] mmco: unref short failure
[h264 @ 0x55a03e593f40] mmco: unref short failure
[h264 @ 0x55a03e593f40] mmco: unref short failure
[h264 @ 0x559365b6c300] mmco: unref short failure
 25%|██▌       | 366/1455 [3:52:55<15:22:58, 50.85s/it][h264 @ 0x55d4b7837840] mmco: unref short failure
[h264 @ 0x55d4b7837840] mmco: unref short failure
[h264 @ 0x55936a641b40] mmco: unref short failure
[h264 @ 0x55936a641b40] mmco: unref short failure
 25%|██▌       | 367/1455 [3:53:09<11:58:29, 39.62s/it][h264 @ 0x55d4c2826ac0] mmco: unref short failure
 25%|██▌       | 368/1455 [3:53:23<9:38:49, 31.95s/it] 09/17/2024 03:33:47 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 16934 instead.
 25%|██▌       | 369/1455 [3:53:31<7:31:06, 24.92s/it][h264 @ 0x55d4dec7f640] mmco: unref short failure
[h264 @ 0x55d4dec7f640] mmco: unref short failure
[h264 @ 0x55a0379763c0] mmco: unref short failure
[h264 @ 0x55a0379763c0] mmco: unref short failure
[h264 @ 0x55d4e1dda640] mmco: unref short failure
 25%|██▌       | 370/1455 [3:53:53<7:14:05, 24.00s/it] 25%|██▌       | 371/1455 [3:54:07<6:21:40, 21.13s/it][h264 @ 0x55a015d395c0] mmco: unref short failure
[h264 @ 0x555ff5f7c500] mmco: unref short failure
[h264 @ 0x555ff5f7c500] mmco: unref short failure
[h264 @ 0x55d4e946c940] mmco: unref short failure
[h264 @ 0x555ffbfb8400] mmco: unref short failure
 26%|██▌       | 372/1455 [3:54:21<5:37:57, 18.72s/it][h264 @ 0x55a03e594140] mmco: unref short failure
[h264 @ 0x55a03e594140] mmco: unref short failure
09/17/2024 03:34:45 - INFO - __main__ -   current idx RYisfAHcVJU.5 from finetune_area returns wrong image/video, use 70885 instead.
[h264 @ 0x55933bbe9300] mmco: unref short failure
 26%|██▌       | 373/1455 [3:54:29<4:44:08, 15.76s/it][h264 @ 0x55a010d65080] mmco: unref short failure
[h264 @ 0x55d4c51c4f00] mmco: unref short failure
[h264 @ 0x559339af8840] mmco: unref short failure
[h264 @ 0x559339af8840] mmco: unref short failure
[h264 @ 0x559339af8840] mmco: unref short failure
[h264 @ 0x559339af8840] mmco: unref short failure
[h264 @ 0x55d4d9c4d840] mmco: unref short failure
[h264 @ 0x55d4b88507c0] mmco: unref short failure
[h264 @ 0x55d4b88507c0] mmco: unref short failure
[h264 @ 0x555ff58cf0c0] mmco: unref short failure
[h264 @ 0x555ff58cf0c0] mmco: unref short failure
09/17/2024 03:35:43 - INFO - __main__ -   current idx 1HAnFYVSFkk.3 from finetune_area returns wrong image/video, use 62193 instead.
[h264 @ 0x55d4c7080140] mmco: unref short failure
[h264 @ 0x55d4c7080140] mmco: unref short failure
[h264 @ 0x555fdcf49980] mmco: unref short failure
[h264 @ 0x555fdcf49980] mmco: unref short failure
not have audios xrsV4ybwavc.40
[h264 @ 0x559337346000] mmco: unref short failure
[h264 @ 0x555ffce4dc40] mmco: unref short failure
[h264 @ 0x55d4ba260e40] mmco: unref short failure
[h264 @ 0x55d4ba260e40] mmco: unref short failure
[h264 @ 0x55d4ba260e40] mmco: unref short failure
[h264 @ 0x55d4ba260e40] mmco: unref short failure
[h264 @ 0x55d4ba811400] mmco: unref short failure
[h264 @ 0x55936b857240] mmco: unref short failure
[h264 @ 0x55936b857240] mmco: unref short failure
[h264 @ 0x55936b857240] mmco: unref short failure
[h264 @ 0x55936b857240] mmco: unref short failure
[h264 @ 0x555fe23118c0] mmco: unref short failure
[h264 @ 0x555fe23118c0] mmco: unref short failure
[h264 @ 0x5593337b3000] mmco: unref short failure
[h264 @ 0x55d4bbe0e380] mmco: unref short failure
[h264 @ 0x55d4e5960b40] mmco: unref short failure
[h264 @ 0x55d4e5960b40] mmco: unref short failure
[h264 @ 0x55934def18c0] mmco: unref short failure
[h264 @ 0x55d4b7892c80] mmco: unref short failure
[h264 @ 0x55d4b7892c80] mmco: unref short failure
[h264 @ 0x55a035b1f640] mmco: unref short failure
[h264 @ 0x5593632bd600] mmco: unref short failure
[h264 @ 0x55d4e061b380] mmco: unref short failure
[h264 @ 0x55d4e061b380] mmco: unref short failure
[h264 @ 0x559333aabf40] mmco: unref short failure
[h264 @ 0x559333aabf40] mmco: unref short failure
 26%|██▌       | 374/1455 [3:58:01<22:22:53, 74.54s/it][h264 @ 0x55d4b7101900] mmco: unref short failure
[h264 @ 0x55d4b7101900] mmco: unref short failure
[h264 @ 0x55d4b7101900] mmco: unref short failure
[h264 @ 0x55d4b7101900] mmco: unref short failure
[h264 @ 0x5593330afb80] mmco: unref short failure
[h264 @ 0x5593330afb80] mmco: unref short failure
[h264 @ 0x55d4bb743880] mmco: unref short failure
[h264 @ 0x55d4bb743880] mmco: unref short failure
[h264 @ 0x55d4bb743880] mmco: unref short failure
[h264 @ 0x55d4bb743880] mmco: unref short failure
 26%|██▌       | 375/1455 [3:58:10<16:25:30, 54.75s/it] 26%|██▌       | 376/1455 [3:58:18<12:16:34, 40.96s/it][h264 @ 0x555fd9cda000] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55933ec94500] mmco: unref short failure
[h264 @ 0x55d4ca569540] mmco: unref short failure
 26%|██▌       | 377/1455 [3:58:33<9:52:20, 32.97s/it] [h264 @ 0x55933e9ca280] mmco: unref short failure
[h264 @ 0x55d4b77bd580] mmco: unref short failure
[h264 @ 0x55d4b77bd580] mmco: unref short failure
[h264 @ 0x55d4b77bd580] mmco: unref short failure
[h264 @ 0x55d4b77bd580] mmco: unref short failure
[h264 @ 0x55600de358c0] mmco: unref short failure
[h264 @ 0x55600de358c0] mmco: unref short failure
09/17/2024 03:39:11 - INFO - __main__ -   current idx h0KWf1ksq5Y.21 from finetune_area returns wrong image/video, use 94681 instead.
[h264 @ 0x55a041ab3140] mmco: unref short failure
[h264 @ 0x555ff0376680] mmco: unref short failure
 26%|██▌       | 378/1455 [3:59:02<9:31:19, 31.83s/it][h264 @ 0x5593339fa440] mmco: unref short failure
[h264 @ 0x5593535116c0] mmco: unref short failure
[h264 @ 0x55a011dc1f00] mmco: unref short failure
[h264 @ 0x55a011dc1f00] mmco: unref short failure
 26%|██▌       | 379/1455 [3:59:10<7:25:07, 24.82s/it][h264 @ 0x5593330ce8c0] mmco: unref short failure
[h264 @ 0x5593330ce8c0] mmco: unref short failure
[h264 @ 0x55d4b70a4780] mmco: unref short failure
[h264 @ 0x555fe9681a80] mmco: unref short failure
[h264 @ 0x555fe9681a80] mmco: unref short failure
 26%|██▌       | 380/1455 [3:59:19<5:58:56, 20.03s/it]09/17/2024 03:39:41 - INFO - __main__ -   current idx g5ifWFvvhk4.18 from finetune_area returns wrong image/video, use 119308 instead.
 26%|██▌       | 381/1455 [3:59:28<4:56:38, 16.57s/it][h264 @ 0x55d4c30b3500] mmco: unref short failure
[h264 @ 0x55d4c30b3500] mmco: unref short failure
[h264 @ 0x55d4c30b3500] mmco: unref short failure
[h264 @ 0x55d4c30b3500] mmco: unref short failure
[h264 @ 0x55935e22b1c0] mmco: unref short failure
[h264 @ 0x55935e22b1c0] mmco: unref short failure
[h264 @ 0x55a025d11c80] mmco: unref short failure
[h264 @ 0x55d4d3b08580] mmco: unref short failure
[h264 @ 0x55d4d3b08580] mmco: unref short failure
[h264 @ 0x55601a9823c0] mmco: unref short failure
[h264 @ 0x55601a9823c0] mmco: unref short failure
[h264 @ 0x55601a9823c0] mmco: unref short failure
[h264 @ 0x55933873f640] mmco: unref short failure
[h264 @ 0x55933873f640] mmco: unref short failure
[h264 @ 0x555fd9a577c0] mmco: unref short failure
[h264 @ 0x555fd9a577c0] mmco: unref short failure
[h264 @ 0x55933394e240] mmco: unref short failure
09/17/2024 03:40:50 - INFO - __main__ -   current idx al4svOv9kUI.2 from finetune_area returns wrong image/video, use 72839 instead.
[h264 @ 0x55934e5d1980] mmco: unref short failure
[h264 @ 0x55934e5d1980] mmco: unref short failure
[h264 @ 0x55a01933ec00] mmco: unref short failure
[h264 @ 0x55a01933ec00] mmco: unref short failure
[h264 @ 0x55a01933ec00] mmco: unref short failure
[h264 @ 0x55a01933ec00] mmco: unref short failure
[h264 @ 0x555fe4ab8980] mmco: unref short failure
[h264 @ 0x555fea0c4980] mmco: unref short failure
[h264 @ 0x555fea0c4980] mmco: unref short failure
[h264 @ 0x55d4e4d802c0] mmco: unref short failure
[h264 @ 0x555fe1fadd00] mmco: unref short failure
[h264 @ 0x559333acc480] mmco: unref short failure
[h264 @ 0x559333acc480] mmco: unref short failure
[h264 @ 0x55a027ad7a00] mmco: unref short failure
[h264 @ 0x55a027ad7a00] mmco: unref short failure
[h264 @ 0x55a027ad7a00] mmco: unref short failure
[h264 @ 0x55a027ad7a00] mmco: unref short failure
[h264 @ 0x55a00efab940] mmco: unref short failure
[h264 @ 0x55a00efab940] mmco: unref short failure
[h264 @ 0x55933c693b80] mmco: unref short failure
[h264 @ 0x555fdbb4fe40] mmco: unref short failure
[h264 @ 0x555fdbb4fe40] mmco: unref short failure
[h264 @ 0x555fdbb4fe40] mmco: unref short failure
[h264 @ 0x555fdbb4fe40] mmco: unref short failure
[h264 @ 0x555fe65ee600] mmco: unref short failure
[h264 @ 0x555fe65ee600] mmco: unref short failure
[h264 @ 0x555fdd904e00] mmco: unref short failure
[h264 @ 0x555fdd904e00] mmco: unref short failure
[h264 @ 0x55a014ee6700] mmco: unref short failure
[h264 @ 0x55a014ee6700] mmco: unref short failure
[h264 @ 0x55a014ee6700] mmco: unref short failure
[h264 @ 0x55a014ee6700] mmco: unref short failure
09/17/2024 03:42:29 - INFO - __main__ -   current idx 14WUuya94QE.50 from finetune_area returns wrong image/video, use 17860 instead.
[h264 @ 0x55d4bdf7c000] mmco: unref short failure
[h264 @ 0x55d4bdf7c000] mmco: unref short failure
[h264 @ 0x55d4bdf7c000] mmco: unref short failure
[h264 @ 0x55d4bdf7c000] mmco: unref short failure
[h264 @ 0x559343fbcb40] mmco: unref short failure
[h264 @ 0x555fe5ced200] mmco: unref short failure
[h264 @ 0x55d4b95637c0] mmco: unref short failure
[h264 @ 0x55d4b95637c0] mmco: unref short failure
[h264 @ 0x55d4d3b08800] mmco: unref short failure
[h264 @ 0x55d4d3b08800] mmco: unref short failure
[h264 @ 0x559333a60940] mmco: unref short failure
[h264 @ 0x559333a60940] mmco: unref short failure
 26%|██▋       | 382/1455 [4:02:57<22:08:38, 74.29s/it] 26%|██▋       | 383/1455 [4:03:06<16:19:56, 54.85s/it][h264 @ 0x555fe2e0ac80] mmco: unref short failure
 26%|██▋       | 384/1455 [4:03:15<12:14:58, 41.18s/it][h264 @ 0x55933e80e040] mmco: unref short failure
[h264 @ 0x55933e80e040] mmco: unref short failure
[h264 @ 0x55d4e49cca80] mmco: unref short failure
[h264 @ 0x55d4e49cca80] mmco: unref short failure
[h264 @ 0x55935b17b0c0] mmco: unref short failure
 26%|██▋       | 385/1455 [4:03:25<9:25:07, 31.69s/it] [h264 @ 0x55d4bbe0dcc0] mmco: unref short failure
[h264 @ 0x55d4bbe0dcc0] mmco: unref short failure
 27%|██▋       | 386/1455 [4:03:49<8:42:25, 29.32s/it][h264 @ 0x55a024e09740] mmco: unref short failure
[h264 @ 0x55a024e09740] mmco: unref short failure
 27%|██▋       | 387/1455 [4:03:57<6:50:55, 23.09s/it] 27%|██▋       | 388/1455 [4:04:06<5:35:04, 18.84s/it][h264 @ 0x5593466e8ec0] mmco: unref short failure
[h264 @ 0x5593466e8ec0] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 27%|██▋       | 389/1455 [4:04:15<4:39:56, 15.76s/it][h264 @ 0x55a043e2a5c0] mmco: unref short failure
[h264 @ 0x5560050a7a80] mmco: unref short failure
[h264 @ 0x55a01a158900] mmco: unref short failure
[h264 @ 0x55d4eb38cc40] mmco: unref short failure
[h264 @ 0x55d4eb38cc40] mmco: unref short failure
[h264 @ 0x559333c98980] mmco: unref short failure
[h264 @ 0x559333c98980] mmco: unref short failure
[h264 @ 0x559333c98980] mmco: unref short failure
[h264 @ 0x559333c98980] mmco: unref short failure
[h264 @ 0x55a00f523ec0] mmco: unref short failure
[h264 @ 0x55a00f523ec0] mmco: unref short failure
[h264 @ 0x559333a53740] mmco: unref short failure
[h264 @ 0x559333a53740] mmco: unref short failure
[h264 @ 0x55d4e0cb3980] mmco: unref short failure
[h264 @ 0x55d4e0cb3980] mmco: unref short failure
[h264 @ 0x55d4ca10c640] mmco: unref short failure
[h264 @ 0x55d4b7194a00] mmco: unref short failure
[h264 @ 0x55936bc8f180] mmco: unref short failure
[h264 @ 0x55936bc8f180] mmco: unref short failure
[h264 @ 0x559333150780] mmco: unref short failure
[h264 @ 0x559333150780] mmco: unref short failure
09/17/2024 03:45:21 - INFO - __main__ -   current idx Ba46lyNCRP8.22 from finetune_area returns wrong image/video, use 32425 instead.
[h264 @ 0x55600f44d440] mmco: unref short failure
[h264 @ 0x55d4e4663280] mmco: unref short failure
09/17/2024 03:45:36 - INFO - __main__ -   current idx hn6DOvhGJJU.6 from finetune_area returns wrong image/video, use 9757 instead.
[h264 @ 0x55a05c49a1c0] mmco: unref short failure
[h264 @ 0x55a05c49a1c0] mmco: unref short failure
[h264 @ 0x55936655f440] mmco: unref short failure
[h264 @ 0x55d4b7912b40] mmco: unref short failure
[h264 @ 0x55d4b7912b40] mmco: unref short failure
[h264 @ 0x55d4b7912b40] mmco: unref short failure
[h264 @ 0x55d4b7912b40] mmco: unref short failure
[h264 @ 0x55a01cff2f00] mmco: unref short failure
[h264 @ 0x555fdbd4c900] mmco: unref short failure
[h264 @ 0x55a0162f88c0] mmco: unref short failure
[h264 @ 0x55a01ed7c440] mmco: unref short failure
[h264 @ 0x55934a585f80] mmco: unref short failure
[h264 @ 0x55934a585f80] mmco: unref short failure
[h264 @ 0x5593417e5640] mmco: unref short failure
[h264 @ 0x55d4b9332280] mmco: unref short failure
[h264 @ 0x55d4c5280b80] mmco: unref short failure
[h264 @ 0x559333a53e40] mmco: unref short failure
[h264 @ 0x559333a53e40] mmco: unref short failure
[h264 @ 0x559336fc0cc0] mmco: unref short failure
[h264 @ 0x559336fc0cc0] mmco: unref short failure
[h264 @ 0x55d4be456600] mmco: unref short failure
09/17/2024 03:47:33 - INFO - __main__ -   current idx GAe_04vmNRQ.5 from finetune_area returns wrong image/video, use 34931 instead.
[h264 @ 0x559336ca5bc0] mmco: unref short failure
[h264 @ 0x559336ca5bc0] mmco: unref short failure
[h264 @ 0x559336ca5bc0] mmco: unref short failure
[h264 @ 0x559363830980] mmco: unref short failure
[h264 @ 0x559363830980] mmco: unref short failure
[h264 @ 0x555fee77bac0] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55a015276e40] mmco: unref short failure
[h264 @ 0x55d4bb7433c0] mmco: unref short failure
[h264 @ 0x55d4bb7433c0] mmco: unref short failure
[h264 @ 0x555fef57cdc0] mmco: unref short failure
[h264 @ 0x555fef57cdc0] mmco: unref short failure
[h264 @ 0x555fe23db6c0] mmco: unref short failure
 27%|██▋       | 390/1455 [4:07:50<22:20:58, 75.55s/it] 27%|██▋       | 391/1455 [4:07:59<16:27:18, 55.68s/it][h264 @ 0x55935f432540] mmco: unref short failure
[h264 @ 0x55935f432540] mmco: unref short failure
 27%|██▋       | 392/1455 [4:08:09<12:20:07, 41.78s/it] 27%|██▋       | 393/1455 [4:08:23<9:51:39, 33.43s/it] [h264 @ 0x55d4b6fb7940] mmco: unref short failure
[h264 @ 0x5593632bd600] mmco: unref short failure
 27%|██▋       | 394/1455 [4:08:44<8:45:39, 29.73s/it]09/17/2024 03:49:06 - INFO - __main__ -   current idx Y7G_DDBX8i4.3 from finetune_area returns wrong image/video, use 117679 instead.
[h264 @ 0x559333c32d40] mmco: unref short failure
[h264 @ 0x559333c32d40] mmco: unref short failure
09/17/2024 03:49:13 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 56447 instead.
 27%|██▋       | 395/1455 [4:08:52<6:54:25, 23.46s/it][h264 @ 0x55600e1db280] mmco: unref short failure
09/17/2024 03:49:19 - INFO - __main__ -   current idx 85jT7k1nw1g.20 from finetune_area returns wrong image/video, use 15412 instead.
 27%|██▋       | 396/1455 [4:09:02<5:41:12, 19.33s/it][h264 @ 0x555fdfd35840] mmco: unref short failure
[h264 @ 0x555fdfd35840] mmco: unref short failure
 27%|██▋       | 397/1455 [4:09:10<4:42:08, 16.00s/it][h264 @ 0x55d4c5281200] mmco: unref short failure
[h264 @ 0x5593339e8280] mmco: unref short failure
[h264 @ 0x55a020b36f40] mmco: unref short failure
[h264 @ 0x55a020b36f40] mmco: unref short failure
[h264 @ 0x55a02d572f80] mmco: unref short failure
[h264 @ 0x55a02d572f80] mmco: unref short failure
[h264 @ 0x559336d09280] mmco: unref short failure
[h264 @ 0x559336d09280] mmco: unref short failure
[h264 @ 0x559336d09280] mmco: unref short failure
[h264 @ 0x559336d09280] mmco: unref short failure
09/17/2024 03:50:34 - INFO - __main__ -   current idx bdHJRIWkgos.39 from finetune_area returns wrong image/video, use 29318 instead.
[h264 @ 0x55601c778c80] mmco: unref short failure
[h264 @ 0x555fdfd35ec0] mmco: unref short failure
[h264 @ 0x559344d38540] mmco: unref short failure
[h264 @ 0x559344d38540] mmco: unref short failure
[h264 @ 0x55a04127ce40] mmco: unref short failure
[h264 @ 0x555fdbda2b40] mmco: unref short failure
[h264 @ 0x55a0326201c0] mmco: unref short failure
[h264 @ 0x555fe0c0ca80] mmco: unref short failure
[h264 @ 0x555fe0c0ca80] mmco: unref short failure
[h264 @ 0x55d4b824cb40] mmco: unref short failure
[h264 @ 0x5560072ece40] mmco: unref short failure
[h264 @ 0x5593522c4b00] mmco: unref short failure
[h264 @ 0x5593522c4b00] mmco: unref short failure
[h264 @ 0x55a00f77b040] mmco: unref short failure
[h264 @ 0x55a01abd8340] mmco: unref short failure
[h264 @ 0x55a01abd8340] mmco: unref short failure
[h264 @ 0x555fd927c0c0] mmco: unref short failure
[h264 @ 0x555fd927c0c0] mmco: unref short failure
[h264 @ 0x55a031736f40] mmco: unref short failure
09/17/2024 03:51:34 - INFO - __main__ -   current idx 1wKPYAWLNkA.112 from finetune_area returns wrong image/video, use 77111 instead.
[h264 @ 0x555feeca45c0] mmco: unref short failure
[h264 @ 0x555feeca45c0] mmco: unref short failure
[h264 @ 0x555feeca45c0] mmco: unref short failure
[h264 @ 0x555feeca45c0] mmco: unref short failure
[h264 @ 0x55a011d10a00] mmco: unref short failure
[h264 @ 0x55a011d10a00] mmco: unref short failure
[h264 @ 0x55a011d10a00] mmco: unref short failure
[h264 @ 0x55a011d10a00] mmco: unref short failure
[h264 @ 0x555fe0f36ac0] mmco: unref short failure
[h264 @ 0x555fe0f36ac0] mmco: unref short failure
09/17/2024 03:52:15 - INFO - __main__ -   current idx e2ba1avSYzg.223 from finetune_area returns wrong image/video, use 145325 instead.
09/17/2024 03:52:17 - INFO - __main__ -   current idx -edNUXe60FQ.60 from finetune_area returns wrong image/video, use 27498 instead.
[h264 @ 0x55601c778f00] mmco: unref short failure
[h264 @ 0x55601c778f00] mmco: unref short failure
[h264 @ 0x55d4ce416e00] mmco: unref short failure
[h264 @ 0x55d4ca7c88c0] mmco: unref short failure
[h264 @ 0x55934d325a80] mmco: unref short failure
[h264 @ 0x555fe2eaf6c0] mmco: unref short failure
[h264 @ 0x555fe2eaf6c0] mmco: unref short failure
[h264 @ 0x55a03c146fc0] mmco: unref short failure
[h264 @ 0x55a03c146fc0] mmco: unref short failure
[h264 @ 0x555ff9827b00] mmco: unref short failure
[h264 @ 0x555ff9827b00] mmco: unref short failure
[h264 @ 0x55d4bb998d00] mmco: unref short failure
[h264 @ 0x55d4bb998d00] mmco: unref short failure
[h264 @ 0x55a015f2ee80] mmco: unref short failure
[h264 @ 0x559339aca140] mmco: unref short failure
[h264 @ 0x559339aca140] mmco: unref short failure
[h264 @ 0x559339aca140] mmco: unref short failure
[h264 @ 0x559339aca140] mmco: unref short failure
 27%|██▋       | 398/1455 [4:12:47<22:24:31, 76.32s/it][h264 @ 0x555ff12e6e00] mmco: unref short failure
[h264 @ 0x55a02c9e3980] mmco: unref short failure
[h264 @ 0x55a02c9e3980] mmco: unref short failure
 27%|██▋       | 399/1455 [4:12:56<16:25:43, 56.01s/it]09/17/2024 03:53:18 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 03:53:18 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 03:53:21 - INFO - __main__ -   current idx Ktryr_1EhKk.51 from finetune_area returns wrong image/video, use 48126 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5593344c41c0] mmco: unref short failure
[h264 @ 0x5593344c41c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555fdd133140] mmco: unref short failure
[h264 @ 0x555fdd133140] mmco: unref short failure
[h264 @ 0x55a021918c00] mmco: unref short failure
[h264 @ 0x55934c1171c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a029e4aa80] mmco: unref short failure
[h264 @ 0x55d4c9dbc300] mmco: unref short failure
[h264 @ 0x55d4c9dbc300] mmco: unref short failure
[h264 @ 0x5593392a3c00] mmco: unref short failure
[h264 @ 0x55a0169d8bc0] mmco: unref short failure
[h264 @ 0x55a0169d8bc0] mmco: unref short failure
[h264 @ 0x555fe73e1ac0] mmco: unref short failure
[h264 @ 0x555fe73e1ac0] mmco: unref short failure
[h264 @ 0x55d4cd9f9900] mmco: unref short failure
[h264 @ 0x55d4ba5d2f40] mmco: unref short failure
[h264 @ 0x55d4ba5d2f40] mmco: unref short failure
[h264 @ 0x55d4d6a59b80] mmco: unref short failure
[h264 @ 0x55d4d6a59b80] mmco: unref short failure
[h264 @ 0x55933cb7c1c0] mmco: unref short failure
[h264 @ 0x55933cb7c1c0] mmco: unref short failure
[h264 @ 0x555fd98e7200] mmco: unref short failure
[h264 @ 0x55d4e278c3c0] mmco: unref short failure
[h264 @ 0x55d4e278c3c0] mmco: unref short failure
[h264 @ 0x55d4edc5cc80] mmco: unref short failure
[h264 @ 0x55d4edc5cc80] mmco: unref short failure
[h264 @ 0x555fe8207740] mmco: unref short failure
[h264 @ 0x555fe8207740] mmco: unref short failure
[h264 @ 0x55d4ccd96280] mmco: unref short failure
[h264 @ 0x555fe853abc0] mmco: unref short failure
[h264 @ 0x555fe853abc0] mmco: unref short failure
[h264 @ 0x55a0228815c0] mmco: unref short failure
[h264 @ 0x55a0228815c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:44,  1.34it/s][A
  1%|          | 2/221 [00:01<02:15,  1.62it/s][A
  1%|▏         | 3/221 [00:01<01:44,  2.08it/s][A
  2%|▏         | 4/221 [00:01<01:12,  2.98it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.73it/s][A
  3%|▎         | 6/221 [00:02<00:51,  4.16it/s][A
  3%|▎         | 7/221 [00:02<00:52,  4.09it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:03<01:05,  3.22it/s][A
  5%|▍         | 10/221 [00:03<01:25,  2.45it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.11it/s][A
  5%|▌         | 12/221 [00:04<01:13,  2.83it/s][A
  6%|▌         | 13/221 [00:04<01:05,  3.19it/s][A[h264 @ 0x555fdfdc4600] mmco: unref short failure
[h264 @ 0x555fdfdc4600] mmco: unref short failure

  6%|▋         | 14/221 [00:05<01:59,  1.74it/s][h264 @ 0x555fdfdc4600] mmco: unref short failure
[h264 @ 0x555fdfdc4600] mmco: unref short failure
[A
  7%|▋         | 15/221 [00:05<01:34,  2.18it/s][A
  7%|▋         | 16/221 [00:06<01:34,  2.17it/s][A
  8%|▊         | 17/221 [00:06<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:06<01:19,  2.55it/s][A
  9%|▊         | 19/221 [00:07<01:04,  3.13it/s][A
  9%|▉         | 20/221 [00:07<00:57,  3.52it/s][A
 10%|▉         | 21/221 [00:07<00:53,  3.77it/s][A
 10%|▉         | 22/221 [00:07<00:51,  3.89it/s][A
 10%|█         | 23/221 [00:07<00:41,  4.73it/s][A
 11%|█         | 24/221 [00:08<00:40,  4.85it/s][A
 11%|█▏        | 25/221 [00:08<00:42,  4.60it/s][A
 12%|█▏        | 26/221 [00:08<00:45,  4.26it/s][A
 12%|█▏        | 27/221 [00:08<00:37,  5.13it/s][A[h264 @ 0x55d4dc08d940] mmco: unref short failure
[h264 @ 0x55d4dc08d940] mmco: unref short failure

 13%|█▎        | 28/221 [00:09<01:00,  3.21it/s][A
 14%|█▎        | 30/221 [00:09<00:48,  3.98it/s][A
 14%|█▍        | 31/221 [00:09<00:51,  3.72it/s][A
 14%|█▍        | 32/221 [00:10<00:43,  4.33it/s][A
 15%|█▍        | 33/221 [00:10<00:46,  4.06it/s][A
 15%|█▌        | 34/221 [00:10<00:38,  4.87it/s][A
 16%|█▌        | 35/221 [00:10<00:39,  4.66it/s][A
 16%|█▋        | 36/221 [00:10<00:45,  4.05it/s][A
 17%|█▋        | 37/221 [00:11<01:13,  2.52it/s][A
 17%|█▋        | 38/221 [00:12<01:14,  2.45it/s][A
 18%|█▊        | 39/221 [00:12<01:02,  2.89it/s][A
 18%|█▊        | 40/221 [00:12<01:02,  2.91it/s][A
 19%|█▊        | 41/221 [00:12<00:49,  3.65it/s][A
 19%|█▉        | 42/221 [00:13<01:01,  2.92it/s][A
 19%|█▉        | 43/221 [00:13<00:50,  3.53it/s][A
 20%|█▉        | 44/221 [00:13<00:40,  4.33it/s][A
 20%|██        | 45/221 [00:14<01:07,  2.61it/s][A
 21%|██        | 46/221 [00:14<01:10,  2.47it/s][A
 21%|██▏       | 47/221 [00:15<01:12,  2.40it/s][A
 22%|██▏       | 48/221 [00:15<00:57,  3.02it/s][A
 22%|██▏       | 49/221 [00:15<00:53,  3.22it/s][A
 23%|██▎       | 50/221 [00:15<00:43,  3.96it/s][A
 23%|██▎       | 51/221 [00:15<00:37,  4.49it/s][A
 24%|██▎       | 52/221 [00:16<00:38,  4.43it/s][A
 24%|██▍       | 53/221 [00:16<00:34,  4.91it/s][A
 24%|██▍       | 54/221 [00:18<02:08,  1.30it/s][A
 25%|██▍       | 55/221 [00:18<01:44,  1.59it/s][A
 25%|██▌       | 56/221 [00:19<01:29,  1.84it/s][A
 26%|██▌       | 57/221 [00:19<01:13,  2.23it/s][A
 26%|██▌       | 58/221 [00:19<00:58,  2.81it/s][A
 27%|██▋       | 59/221 [00:19<00:52,  3.10it/s][A
 27%|██▋       | 60/221 [00:20<01:17,  2.08it/s][A
 28%|██▊       | 61/221 [00:20<01:06,  2.42it/s][A[h264 @ 0x55d4c9dbbc80] mmco: unref short failure
[h264 @ 0x55d4c9dbbc80] mmco: unref short failure
[h264 @ 0x55d4c9dbbc80] mmco: unref short failure
[h264 @ 0x55d4c9dbbc80] mmco: unref short failure

 28%|██▊       | 62/221 [00:21<01:01,  2.59it/s][A
 29%|██▊       | 63/221 [00:21<00:57,  2.74it/s][A
 29%|██▉       | 64/221 [00:21<00:50,  3.11it/s][A
 29%|██▉       | 65/221 [00:21<00:47,  3.31it/s][A
 30%|██▉       | 66/221 [00:22<00:59,  2.61it/s][A[h264 @ 0x55a0281e6e40] mmco: unref short failure
[h264 @ 0x55a0281e6e40] mmco: unref short failure

 30%|███       | 67/221 [00:22<01:07,  2.27it/s][A
 31%|███       | 68/221 [00:23<00:55,  2.73it/s][A
 31%|███       | 69/221 [00:23<01:14,  2.04it/s][A
 32%|███▏      | 70/221 [00:24<00:58,  2.56it/s][A
 32%|███▏      | 71/221 [00:24<01:20,  1.87it/s][A
 33%|███▎      | 72/221 [00:25<01:08,  2.19it/s][A
 33%|███▎      | 73/221 [00:25<01:02,  2.35it/s][A
 33%|███▎      | 74/221 [00:25<00:51,  2.85it/s][A
 34%|███▍      | 75/221 [00:26<00:52,  2.78it/s][A[h264 @ 0x55935045a980] mmco: unref short failure
[h264 @ 0x55935045a980] mmco: unref short failure

 34%|███▍      | 76/221 [00:26<00:45,  3.21it/s][A
 35%|███▍      | 77/221 [00:26<00:46,  3.07it/s][A
 35%|███▌      | 78/221 [00:27<00:46,  3.10it/s][A
 36%|███▌      | 79/221 [00:27<00:57,  2.48it/s][A
 36%|███▌      | 80/221 [00:27<00:51,  2.73it/s][A
 37%|███▋      | 81/221 [00:28<00:52,  2.66it/s][A
 37%|███▋      | 82/221 [00:28<00:44,  3.16it/s][A
 38%|███▊      | 83/221 [00:28<00:37,  3.64it/s][A
 38%|███▊      | 84/221 [00:28<00:36,  3.72it/s][A
 38%|███▊      | 85/221 [00:29<00:31,  4.31it/s][A[h264 @ 0x55d4ba18fac0] mmco: unref short failure
[h264 @ 0x55d4ba18fac0] mmco: unref short failure

 39%|███▉      | 86/221 [00:29<00:38,  3.52it/s][A
 39%|███▉      | 87/221 [00:30<00:53,  2.52it/s][A
 40%|███▉      | 88/221 [00:30<01:01,  2.16it/s][A
 40%|████      | 89/221 [00:31<01:15,  1.74it/s][A
 41%|████      | 90/221 [00:31<01:04,  2.03it/s][A
 41%|████      | 91/221 [00:32<00:50,  2.59it/s][A
 42%|████▏     | 92/221 [00:32<00:43,  2.95it/s][A
 42%|████▏     | 93/221 [00:32<00:49,  2.60it/s][A
 43%|████▎     | 94/221 [00:33<00:44,  2.86it/s][A
 43%|████▎     | 95/221 [00:33<00:36,  3.44it/s][A
 43%|████▎     | 96/221 [00:33<00:37,  3.33it/s][A
 44%|████▍     | 97/221 [00:33<00:31,  3.97it/s][A
 44%|████▍     | 98/221 [00:33<00:33,  3.67it/s][A
 45%|████▍     | 99/221 [00:34<00:29,  4.12it/s][A
 45%|████▌     | 100/221 [00:34<00:30,  4.03it/s][A
 46%|████▌     | 101/221 [00:34<00:26,  4.53it/s][A
 46%|████▌     | 102/221 [00:34<00:32,  3.70it/s][A
 47%|████▋     | 103/221 [00:35<00:28,  4.16it/s][A
 47%|████▋     | 104/221 [00:35<00:24,  4.87it/s][A
 48%|████▊     | 105/221 [00:35<00:26,  4.31it/s][A
 48%|████▊     | 106/221 [00:36<00:52,  2.20it/s][A
 48%|████▊     | 107/221 [00:36<00:42,  2.66it/s][A
 49%|████▉     | 108/221 [00:36<00:35,  3.15it/s][A
 49%|████▉     | 109/221 [00:37<00:39,  2.87it/s][A
 50%|████▉     | 110/221 [00:37<00:40,  2.77it/s][A
 50%|█████     | 111/221 [00:38<00:45,  2.41it/s][A
 51%|█████     | 112/221 [00:38<00:38,  2.81it/s][A[h264 @ 0x55d4ec3e3e80] mmco: unref short failure

 51%|█████     | 113/221 [00:38<00:38,  2.82it/s][A
 52%|█████▏    | 115/221 [00:39<00:26,  3.95it/s][A
 52%|█████▏    | 116/221 [00:42<01:59,  1.14s/it][A
 53%|█████▎    | 117/221 [00:43<01:38,  1.06it/s][A
 53%|█████▎    | 118/221 [00:43<01:20,  1.29it/s][A
 54%|█████▍    | 119/221 [00:43<01:04,  1.59it/s][A
 54%|█████▍    | 120/221 [00:44<00:56,  1.79it/s][A
 55%|█████▍    | 121/221 [00:44<00:43,  2.29it/s][A
 55%|█████▌    | 122/221 [00:44<00:37,  2.62it/s][A
 56%|█████▌    | 123/221 [00:44<00:31,  3.10it/s][A
 56%|█████▌    | 124/221 [00:45<00:29,  3.25it/s][A
 57%|█████▋    | 125/221 [00:45<00:33,  2.89it/s][A
 57%|█████▋    | 126/221 [00:45<00:32,  2.97it/s][A
 57%|█████▋    | 127/221 [00:46<00:39,  2.39it/s][A
 58%|█████▊    | 128/221 [00:46<00:37,  2.49it/s][A
 58%|█████▊    | 129/221 [00:46<00:30,  3.06it/s][A
 59%|█████▉    | 130/221 [00:47<00:30,  3.01it/s][A
 59%|█████▉    | 131/221 [00:47<00:25,  3.54it/s][A
 60%|█████▉    | 132/221 [00:47<00:22,  3.94it/s][A
 60%|██████    | 133/221 [00:48<00:28,  3.14it/s][A
 61%|██████    | 134/221 [00:48<00:24,  3.57it/s][A
 61%|██████    | 135/221 [00:48<00:26,  3.23it/s][A
 62%|██████▏   | 136/221 [00:49<00:29,  2.85it/s][A
 62%|██████▏   | 137/221 [00:49<00:26,  3.13it/s][A[h264 @ 0x55a01a35ccc0] mmco: unref short failure
[h264 @ 0x55a01a35ccc0] mmco: unref short failure
[h264 @ 0x55a01a35ccc0] mmco: unref short failure
[h264 @ 0x55a01a35ccc0] mmco: unref short failure

 62%|██████▏   | 138/221 [00:49<00:29,  2.86it/s][A
 63%|██████▎   | 139/221 [00:50<00:35,  2.34it/s][A
 63%|██████▎   | 140/221 [00:50<00:31,  2.55it/s][A
 64%|██████▍   | 141/221 [00:51<00:29,  2.75it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  2.93it/s][A
 65%|██████▍   | 143/221 [00:51<00:30,  2.58it/s][A
 65%|██████▌   | 144/221 [00:52<00:26,  2.95it/s][A
 66%|██████▌   | 145/221 [00:52<00:22,  3.36it/s][A
 66%|██████▌   | 146/221 [00:52<00:19,  3.94it/s][A
 67%|██████▋   | 147/221 [00:52<00:18,  4.02it/s][A
 67%|██████▋   | 148/221 [00:52<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:53<00:17,  4.19it/s][A
 68%|██████▊   | 150/221 [00:53<00:17,  4.07it/s][A[h264 @ 0x55d4bfedda40] mmco: unref short failure
[h264 @ 0x55d4bfedda40] mmco: unref short failure

 68%|██████▊   | 151/221 [00:54<00:30,  2.33it/s][A
 69%|██████▉   | 152/221 [00:55<00:39,  1.73it/s][A
 69%|██████▉   | 153/221 [00:55<00:36,  1.86it/s][A
 70%|██████▉   | 154/221 [00:55<00:31,  2.11it/s][A
 70%|███████   | 155/221 [00:56<00:25,  2.57it/s][A
 71%|███████   | 156/221 [00:56<00:27,  2.37it/s][A[h264 @ 0x55934df94c80] mmco: unref short failure

 71%|███████   | 157/221 [00:57<00:38,  1.67it/s][A
 71%|███████▏  | 158/221 [00:57<00:33,  1.90it/s][A
 72%|███████▏  | 159/221 [00:58<00:29,  2.10it/s][A
 72%|███████▏  | 160/221 [00:58<00:26,  2.33it/s][A
 73%|███████▎  | 161/221 [00:58<00:20,  2.87it/s][A
 73%|███████▎  | 162/221 [00:59<00:18,  3.18it/s][A
 74%|███████▍  | 163/221 [00:59<00:17,  3.33it/s][A
 74%|███████▍  | 164/221 [00:59<00:14,  3.88it/s][A
 75%|███████▍  | 165/221 [00:59<00:12,  4.41it/s][A
 75%|███████▌  | 166/221 [01:00<00:16,  3.24it/s][A
 76%|███████▌  | 167/221 [01:00<00:14,  3.66it/s][A[h264 @ 0x55a039fa4e80] mmco: unref short failure
[h264 @ 0x55d4c8c1b900] mmco: unref short failure

 76%|███████▌  | 168/221 [01:01<00:23,  2.24it/s][A
 76%|███████▋  | 169/221 [01:01<00:20,  2.58it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.72it/s][A
 77%|███████▋  | 171/221 [01:02<00:18,  2.67it/s][A
 78%|███████▊  | 172/221 [01:02<00:16,  2.93it/s][A
 78%|███████▊  | 173/221 [01:02<00:15,  3.20it/s][A
 79%|███████▊  | 174/221 [01:02<00:12,  3.65it/s][A
 79%|███████▉  | 175/221 [01:03<00:11,  3.93it/s][A
 80%|███████▉  | 176/221 [01:03<00:12,  3.51it/s][A
 80%|████████  | 177/221 [01:03<00:11,  3.93it/s][A
 81%|████████  | 178/221 [01:03<00:12,  3.53it/s][A
 81%|████████  | 179/221 [01:04<00:13,  3.08it/s][A
 82%|████████▏ | 181/221 [01:04<00:09,  4.02it/s][A
 82%|████████▏ | 182/221 [01:04<00:09,  4.20it/s][A
 83%|████████▎ | 183/221 [01:05<00:09,  4.15it/s][A
 83%|████████▎ | 184/221 [01:05<00:10,  3.67it/s][A
 84%|████████▎ | 185/221 [01:05<00:09,  3.83it/s][A
 84%|████████▍ | 186/221 [01:06<00:11,  2.99it/s][A
 85%|████████▍ | 187/221 [01:06<00:09,  3.46it/s][A
 85%|████████▌ | 188/221 [01:06<00:09,  3.31it/s][A
 86%|████████▌ | 189/221 [01:06<00:08,  3.59it/s][A
 86%|████████▌ | 190/221 [01:07<00:10,  3.09it/s][A
 86%|████████▋ | 191/221 [01:07<00:07,  3.77it/s][A
 87%|████████▋ | 192/221 [01:07<00:07,  3.73it/s][A
 87%|████████▋ | 193/221 [01:07<00:06,  4.55it/s][A
 88%|████████▊ | 194/221 [01:09<00:15,  1.79it/s][A
 88%|████████▊ | 195/221 [01:09<00:11,  2.17it/s][A
 89%|████████▊ | 196/221 [01:09<00:09,  2.70it/s][A
 89%|████████▉ | 197/221 [01:09<00:07,  3.24it/s][A
 90%|████████▉ | 198/221 [01:10<00:07,  2.91it/s][A
 90%|█████████ | 199/221 [01:10<00:06,  3.44it/s][A
 90%|█████████ | 200/221 [01:10<00:06,  3.06it/s][A
 91%|█████████ | 201/221 [01:11<00:06,  3.29it/s][A
 91%|█████████▏| 202/221 [01:11<00:05,  3.38it/s][A
 92%|█████████▏| 203/221 [01:11<00:04,  3.84it/s][A
 92%|█████████▏| 204/221 [01:11<00:04,  3.86it/s][A
 93%|█████████▎| 205/221 [01:11<00:03,  4.28it/s][A
 93%|█████████▎| 206/221 [01:12<00:05,  2.78it/s][A
 94%|█████████▍| 208/221 [01:12<00:03,  3.90it/s][A
 95%|█████████▍| 209/221 [01:13<00:02,  4.20it/s][A
 95%|█████████▌| 210/221 [01:13<00:02,  4.69it/s][A
 95%|█████████▌| 211/221 [01:13<00:02,  3.59it/s][A
 96%|█████████▌| 212/221 [01:13<00:02,  3.86it/s][A
 96%|█████████▋| 213/221 [01:14<00:01,  4.33it/s][A
 97%|█████████▋| 214/221 [01:14<00:01,  3.58it/s][A
 97%|█████████▋| 215/221 [01:14<00:01,  3.47it/s][A
 98%|█████████▊| 216/221 [01:15<00:01,  3.15it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  2.87it/s][A
 99%|█████████▊| 218/221 [01:15<00:01,  2.70it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  3.00it/s][A
100%|█████████▉| 220/221 [01:19<00:01,  1.10s/it][A
100%|██████████| 221/221 [01:19<00:00,  1.17it/s][A100%|██████████| 221/221 [01:19<00:00,  2.78it/s]
09/17/2024 03:57:06 - INFO - __main__ -   current idx _9yTXjXc3Ko.34 from finetune_area returns wrong image/video, use 98539 instead.
[h264 @ 0x55d4ba6ff400] mmco: unref short failure
[h264 @ 0x55d4ba6ff400] mmco: unref short failure
[h264 @ 0x55d4d7ee6fc0] mmco: unref short failure
[h264 @ 0x55d4d7ee6fc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:12,  3.03it/s][A
  1%|          | 2/221 [00:00<01:14,  2.96it/s][A
  1%|▏         | 3/221 [00:01<01:13,  2.98it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.95it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.97it/s][A
  3%|▎         | 6/221 [00:02<01:13,  2.92it/s][A
  3%|▎         | 7/221 [00:02<01:13,  2.89it/s][A
  4%|▎         | 8/221 [00:02<01:12,  2.94it/s][A[h264 @ 0x555fd9da7d40] mmco: unref short failure
[h264 @ 0x555fd9da7d40] mmco: unref short failure

  4%|▍         | 9/221 [00:03<01:12,  2.93it/s][A
  5%|▍         | 10/221 [00:03<01:10,  2.98it/s][A
  5%|▍         | 11/221 [00:03<01:11,  2.95it/s][A
  5%|▌         | 12/221 [00:04<01:13,  2.84it/s][A
  6%|▌         | 13/221 [00:04<01:11,  2.90it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.90it/s][A
  7%|▋         | 15/221 [00:05<01:09,  2.98it/s][A
  7%|▋         | 16/221 [00:05<01:08,  2.99it/s][A
  8%|▊         | 17/221 [00:05<01:10,  2.88it/s][A
  8%|▊         | 18/221 [00:06<01:08,  2.95it/s][A
  9%|▊         | 19/221 [00:06<01:10,  2.87it/s][A
  9%|▉         | 20/221 [00:06<01:08,  2.95it/s][A
 10%|▉         | 21/221 [00:07<01:06,  3.00it/s][A
 10%|▉         | 22/221 [00:07<01:05,  3.05it/s][A
 10%|█         | 23/221 [00:07<01:07,  2.92it/s][A
 11%|█         | 24/221 [00:08<01:12,  2.71it/s][A
 11%|█▏        | 25/221 [00:08<01:10,  2.78it/s][A
 12%|█▏        | 26/221 [00:08<01:09,  2.82it/s][A
 12%|█▏        | 27/221 [00:09<01:08,  2.85it/s][A
 13%|█▎        | 28/221 [00:09<01:06,  2.89it/s][A
 13%|█▎        | 29/221 [00:09<01:05,  2.91it/s][A
 14%|█▎        | 30/221 [00:10<01:05,  2.92it/s][A
 14%|█▍        | 31/221 [00:10<01:05,  2.92it/s][A
 14%|█▍        | 32/221 [00:10<01:04,  2.94it/s][A
 15%|█▍        | 33/221 [00:11<01:04,  2.93it/s][A
 15%|█▌        | 34/221 [00:11<01:07,  2.79it/s][A
 16%|█▌        | 35/221 [00:12<01:04,  2.88it/s][A
 16%|█▋        | 36/221 [00:12<01:03,  2.91it/s][A
 17%|█▋        | 37/221 [00:12<01:01,  2.98it/s][A
 17%|█▋        | 38/221 [00:13<01:00,  3.00it/s][A
 18%|█▊        | 39/221 [00:13<01:01,  2.97it/s][A[h264 @ 0x55a025f50d80] mmco: unref short failure

 18%|█▊        | 40/221 [00:13<00:59,  3.02it/s][A
 19%|█▊        | 41/221 [00:14<01:00,  2.97it/s][A
 19%|█▉        | 42/221 [00:14<01:01,  2.93it/s][A
 19%|█▉        | 43/221 [00:14<00:59,  2.98it/s][A
 20%|█▉        | 44/221 [00:15<00:59,  2.96it/s][A
 20%|██        | 45/221 [00:15<01:01,  2.86it/s][A
 21%|██        | 46/221 [00:15<01:00,  2.88it/s][A
 21%|██▏       | 47/221 [00:16<00:58,  2.96it/s][A
 22%|██▏       | 48/221 [00:16<01:00,  2.84it/s][A
 22%|██▏       | 49/221 [00:16<01:00,  2.86it/s][A
 23%|██▎       | 50/221 [00:17<00:59,  2.89it/s][A
 23%|██▎       | 51/221 [00:17<00:57,  2.94it/s][A
 24%|██▎       | 52/221 [00:17<00:57,  2.95it/s][A
 24%|██▍       | 53/221 [00:18<00:57,  2.92it/s][A
 24%|██▍       | 54/221 [00:18<00:57,  2.90it/s][A
 25%|██▍       | 55/221 [00:18<00:56,  2.96it/s][A
 25%|██▌       | 56/221 [00:19<00:55,  2.95it/s][A
 26%|██▌       | 57/221 [00:19<00:56,  2.90it/s][A
 26%|██▌       | 58/221 [00:19<01:00,  2.71it/s][A
 27%|██▋       | 59/221 [00:20<01:00,  2.68it/s][A
 27%|██▋       | 60/221 [00:20<01:00,  2.66it/s][A
 28%|██▊       | 61/221 [00:21<00:58,  2.74it/s][A
 28%|██▊       | 62/221 [00:21<00:57,  2.79it/s][A
 29%|██▊       | 63/221 [00:21<00:55,  2.86it/s][A
 29%|██▉       | 64/221 [00:22<00:55,  2.85it/s][A
 29%|██▉       | 65/221 [00:22<00:55,  2.83it/s][A
 30%|██▉       | 66/221 [00:22<00:52,  2.93it/s][A
 30%|███       | 67/221 [00:23<00:52,  2.95it/s][A
 31%|███       | 68/221 [00:23<00:52,  2.93it/s][A
 31%|███       | 69/221 [00:23<00:51,  2.96it/s][A
 32%|███▏      | 70/221 [00:24<00:54,  2.76it/s][A
 32%|███▏      | 71/221 [00:24<00:53,  2.78it/s][A
 33%|███▎      | 72/221 [00:24<00:51,  2.87it/s][A
 33%|███▎      | 73/221 [00:25<00:51,  2.85it/s][A
 33%|███▎      | 74/221 [00:25<00:50,  2.88it/s][A
 34%|███▍      | 75/221 [00:25<00:50,  2.92it/s][A
 34%|███▍      | 76/221 [00:26<00:50,  2.84it/s][A
 35%|███▍      | 77/221 [00:26<00:49,  2.93it/s][A
 35%|███▌      | 78/221 [00:26<00:49,  2.91it/s][A
 36%|███▌      | 79/221 [00:27<00:51,  2.75it/s][A
 36%|███▌      | 80/221 [00:27<00:49,  2.84it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.86it/s][A
 37%|███▋      | 82/221 [00:28<00:48,  2.87it/s][A
 38%|███▊      | 83/221 [00:28<00:47,  2.90it/s][A
 38%|███▊      | 84/221 [00:29<00:50,  2.72it/s][A
 38%|███▊      | 85/221 [00:29<00:50,  2.67it/s][A
 39%|███▉      | 86/221 [00:29<00:49,  2.74it/s][A
 39%|███▉      | 87/221 [00:30<00:48,  2.76it/s][A
 40%|███▉      | 88/221 [00:30<00:46,  2.87it/s][A
 40%|████      | 89/221 [00:30<00:45,  2.88it/s][A
 41%|████      | 90/221 [00:31<00:45,  2.91it/s][A
 41%|████      | 91/221 [00:31<00:44,  2.89it/s][A
 42%|████▏     | 92/221 [00:31<00:44,  2.91it/s][A
 42%|████▏     | 93/221 [00:32<00:42,  2.99it/s][A
 43%|████▎     | 94/221 [00:32<00:42,  3.00it/s][A[h264 @ 0x559365455280] mmco: unref short failure

 43%|████▎     | 95/221 [00:32<00:42,  2.98it/s][A
 43%|████▎     | 96/221 [00:33<00:42,  2.94it/s][A
 44%|████▍     | 97/221 [00:33<00:41,  2.97it/s][A
 44%|████▍     | 98/221 [00:33<00:41,  2.97it/s][A
 45%|████▍     | 99/221 [00:34<00:40,  3.01it/s][A
 45%|████▌     | 100/221 [00:34<00:40,  3.01it/s][A
 46%|████▌     | 101/221 [00:34<00:39,  3.04it/s][A
 46%|████▌     | 102/221 [00:35<00:41,  2.87it/s][A
 47%|████▋     | 103/221 [00:35<00:41,  2.88it/s][A
 47%|████▋     | 104/221 [00:35<00:40,  2.91it/s][A
 48%|████▊     | 105/221 [00:36<00:39,  2.92it/s][A
 48%|████▊     | 106/221 [00:36<00:38,  2.96it/s][A
 48%|████▊     | 107/221 [00:36<00:38,  2.97it/s][A
 49%|████▉     | 108/221 [00:37<00:38,  2.92it/s][A
 49%|████▉     | 109/221 [00:37<00:38,  2.89it/s][A
 50%|████▉     | 110/221 [00:37<00:37,  2.93it/s][A
 50%|█████     | 111/221 [00:38<00:38,  2.87it/s][A
 51%|█████     | 112/221 [00:38<00:36,  2.98it/s][A
 51%|█████     | 113/221 [00:39<00:39,  2.76it/s][A
 52%|█████▏    | 114/221 [00:39<00:37,  2.83it/s][A
 52%|█████▏    | 115/221 [00:39<00:37,  2.83it/s][A
 52%|█████▏    | 116/221 [00:40<00:36,  2.90it/s][A[h264 @ 0x55d4d3fe0000] mmco: unref short failure
[h264 @ 0x55d4d3fe0000] mmco: unref short failure

 53%|█████▎    | 117/221 [00:40<00:36,  2.86it/s][A
 53%|█████▎    | 118/221 [00:40<00:36,  2.86it/s][A
 54%|█████▍    | 119/221 [00:41<00:35,  2.90it/s][A
 54%|█████▍    | 120/221 [00:41<00:36,  2.73it/s][A
 55%|█████▍    | 121/221 [00:41<00:36,  2.76it/s][A
[h264 @ 0x555fdfc40140] mmco: unref short failure
 55%|█████▌    | 122/221 [00:42<00:34,  2.83it/s][A[h264 @ 0x555fdfc40140] mmco: unref short failure
[h264 @ 0x555fdfc40140] mmco: unref short failure

 56%|█████▌    | 123/221 [00:42<00:34,  2.82it/s][A
 56%|█████▌    | 124/221 [00:42<00:33,  2.86it/s][A
 57%|█████▋    | 125/221 [00:43<00:33,  2.89it/s][A
 57%|█████▋    | 126/221 [00:43<00:32,  2.88it/s][A
 57%|█████▋    | 127/221 [00:43<00:32,  2.92it/s][A[h264 @ 0x55d4cb12dd00] mmco: unref short failure

 58%|█████▊    | 128/221 [00:44<00:31,  2.95it/s][A
 58%|█████▊    | 129/221 [00:44<00:30,  2.98it/s][A
 59%|█████▉    | 130/221 [00:44<00:30,  2.98it/s][A
 59%|█████▉    | 131/221 [00:45<00:29,  3.02it/s][A
 60%|█████▉    | 132/221 [00:45<00:29,  3.05it/s][A
 60%|██████    | 133/221 [00:45<00:29,  2.96it/s][A
 61%|██████    | 134/221 [00:46<00:30,  2.87it/s][A[h264 @ 0x555fee3ddb00] mmco: unref short failure
[h264 @ 0x555fee3ddb00] mmco: unref short failure

 61%|██████    | 135/221 [00:46<00:31,  2.77it/s][A
 62%|██████▏   | 136/221 [00:47<00:30,  2.80it/s][A
 62%|██████▏   | 137/221 [00:47<00:29,  2.87it/s][A
 62%|██████▏   | 138/221 [00:47<00:28,  2.92it/s][A
 63%|██████▎   | 139/221 [00:48<00:28,  2.90it/s][A
 63%|██████▎   | 140/221 [00:48<00:27,  2.93it/s][A
 64%|██████▍   | 141/221 [00:48<00:27,  2.92it/s][A
 64%|██████▍   | 142/221 [00:49<00:26,  2.97it/s][A[h264 @ 0x55a017c72d80] mmco: unref short failure
[h264 @ 0x55a017c72d80] mmco: unref short failure

 65%|██████▍   | 143/221 [00:49<00:26,  2.97it/s][A
 65%|██████▌   | 144/221 [00:49<00:25,  3.04it/s][A
 66%|██████▌   | 145/221 [00:50<00:25,  3.04it/s][A
 66%|██████▌   | 146/221 [00:50<00:24,  3.07it/s][A
 67%|██████▋   | 147/221 [00:50<00:24,  3.04it/s][A
 67%|██████▋   | 148/221 [00:51<00:23,  3.07it/s][A
 67%|██████▋   | 149/221 [00:51<00:23,  3.02it/s][A
 68%|██████▊   | 150/221 [00:51<00:24,  2.90it/s][A
 68%|██████▊   | 151/221 [00:52<00:25,  2.80it/s][A
 69%|██████▉   | 152/221 [00:52<00:23,  2.89it/s][A
 69%|██████▉   | 153/221 [00:52<00:23,  2.85it/s][A
 70%|██████▉   | 154/221 [00:53<00:23,  2.82it/s][A09/17/2024 03:58:08 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 13616 instead.

 70%|███████   | 155/221 [00:53<00:22,  2.87it/s][A
 71%|███████   | 156/221 [00:53<00:22,  2.87it/s][A
 71%|███████   | 157/221 [00:54<00:23,  2.72it/s][A
 71%|███████▏  | 158/221 [00:54<00:22,  2.81it/s][A
 72%|███████▏  | 159/221 [00:54<00:21,  2.87it/s][A[h264 @ 0x55d4bb3fa1c0] mmco: unref short failure

 72%|███████▏  | 160/221 [00:55<00:21,  2.81it/s][A
 73%|███████▎  | 161/221 [00:55<00:21,  2.84it/s][A
 73%|███████▎  | 162/221 [00:55<00:20,  2.86it/s][A[h264 @ 0x555fdbb56540] mmco: unref short failure
[h264 @ 0x555fdbb56540] mmco: unref short failure

 74%|███████▍  | 163/221 [00:56<00:20,  2.87it/s][A
 74%|███████▍  | 164/221 [00:56<00:19,  2.89it/s][A
 75%|███████▍  | 165/221 [00:57<00:19,  2.88it/s][A[h264 @ 0x555fff5f0000] mmco: unref short failure
[h264 @ 0x555fff5f0000] mmco: unref short failure
[h264 @ 0x555fff5f0000] mmco: unref short failure
[h264 @ 0x555fff5f0000] mmco: unref short failure

 75%|███████▌  | 166/221 [00:57<00:18,  2.93it/s][A
 76%|███████▌  | 167/221 [00:57<00:18,  2.91it/s][A
 76%|███████▌  | 168/221 [00:58<00:18,  2.85it/s][A
 76%|███████▋  | 169/221 [00:58<00:18,  2.89it/s][A
 77%|███████▋  | 170/221 [00:58<00:17,  2.92it/s][A
 77%|███████▋  | 171/221 [00:59<00:16,  2.94it/s][A
 78%|███████▊  | 172/221 [00:59<00:16,  2.99it/s][A
 78%|███████▊  | 173/221 [00:59<00:15,  3.02it/s][A
 79%|███████▊  | 174/221 [01:00<00:15,  3.03it/s][A
 79%|███████▉  | 175/221 [01:00<00:15,  3.07it/s][A
 80%|███████▉  | 176/221 [01:00<00:14,  3.00it/s][A
 80%|████████  | 177/221 [01:01<00:14,  3.00it/s][A
 81%|████████  | 178/221 [01:01<00:14,  3.00it/s][A
 81%|████████  | 179/221 [01:01<00:13,  3.00it/s][A
 81%|████████▏ | 180/221 [01:02<00:13,  2.98it/s][A
 82%|████████▏ | 181/221 [01:02<00:13,  2.95it/s][A
 82%|████████▏ | 182/221 [01:02<00:13,  2.85it/s][A[h264 @ 0x55936bfbac40] mmco: unref short failure
[h264 @ 0x55936bfbac40] mmco: unref short failure
[h264 @ 0x55936bfbac40] mmco: unref short failure
[h264 @ 0x55936bfbac40] mmco: unref short failure

 83%|████████▎ | 183/221 [01:03<00:13,  2.88it/s][A
 83%|████████▎ | 184/221 [01:03<00:12,  2.90it/s][A
 84%|████████▎ | 185/221 [01:03<00:12,  2.89it/s][A
 84%|████████▍ | 186/221 [01:04<00:12,  2.89it/s][A
 85%|████████▍ | 187/221 [01:04<00:11,  2.96it/s][A
 85%|████████▌ | 188/221 [01:04<00:11,  2.94it/s][A
 86%|████████▌ | 189/221 [01:05<00:10,  2.94it/s][A
 86%|████████▌ | 190/221 [01:05<00:10,  2.90it/s][A
 86%|████████▋ | 191/221 [01:05<00:10,  2.89it/s][A
 87%|████████▋ | 192/221 [01:06<00:09,  2.92it/s][A
 87%|████████▋ | 193/221 [01:06<00:09,  2.96it/s][A
 88%|████████▊ | 194/221 [01:06<00:09,  2.96it/s][A
 88%|████████▊ | 195/221 [01:07<00:08,  2.92it/s][A
 89%|████████▊ | 196/221 [01:07<00:08,  2.96it/s][A
 89%|████████▉ | 197/221 [01:07<00:08,  2.98it/s][A
 90%|████████▉ | 198/221 [01:08<00:07,  2.99it/s][A
 90%|█████████ | 199/221 [01:08<00:07,  3.03it/s][A[h264 @ 0x559339ad9000] mmco: unref short failure

 90%|█████████ | 200/221 [01:08<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [01:09<00:06,  2.99it/s][A
 91%|█████████▏| 202/221 [01:09<00:06,  3.00it/s][A
 92%|█████████▏| 203/221 [01:09<00:06,  2.82it/s][A
 92%|█████████▏| 204/221 [01:10<00:05,  2.90it/s][A
 93%|█████████▎| 205/221 [01:10<00:05,  2.83it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.71it/s][A
 94%|█████████▎| 207/221 [01:11<00:05,  2.77it/s][A
 94%|█████████▍| 208/221 [01:11<00:04,  2.85it/s][A[h264 @ 0x555fee917300] mmco: unref short failure
[h264 @ 0x555fee917300] mmco: unref short failure
[h264 @ 0x555fee917300] mmco: unref short failure
[h264 @ 0x555fee917300] mmco: unref short failure

 95%|█████████▍| 209/221 [01:12<00:04,  2.87it/s][A
 95%|█████████▌| 210/221 [01:12<00:03,  2.87it/s][A
 95%|█████████▌| 211/221 [01:12<00:03,  2.91it/s][A
 96%|█████████▌| 212/221 [01:13<00:03,  2.83it/s][A
 96%|█████████▋| 213/221 [01:13<00:02,  2.84it/s][A
 97%|█████████▋| 214/221 [01:13<00:02,  2.91it/s][A
 97%|█████████▋| 215/221 [01:14<00:02,  2.90it/s][A
 98%|█████████▊| 216/221 [01:14<00:01,  2.95it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  2.86it/s][A
 99%|█████████▊| 218/221 [01:15<00:01,  2.88it/s][A
 99%|█████████▉| 219/221 [01:15<00:00,  2.93it/s][A
100%|█████████▉| 220/221 [01:15<00:00,  2.91it/s][A
100%|██████████| 221/221 [01:16<00:00,  2.89it/s][A100%|██████████| 221/221 [01:16<00:00,  2.90it/s]
[h264 @ 0x55d4cda78940] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:47,  4.59it/s][A
  1%|          | 2/221 [00:00<01:05,  3.33it/s][A
  1%|▏         | 3/221 [00:01<01:35,  2.28it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.86it/s][A
  2%|▏         | 5/221 [00:01<01:18,  2.76it/s][A
  3%|▎         | 6/221 [00:02<01:08,  3.15it/s][A
  3%|▎         | 7/221 [00:02<01:19,  2.70it/s][A
  4%|▎         | 8/221 [00:02<01:17,  2.74it/s][A
  4%|▍         | 9/221 [00:03<01:13,  2.87it/s][A09/17/2024 03:58:42 - INFO - __main__ -   current idx TE5UzQ5S57U.27 from finetune_area returns wrong image/video, use 30538 instead.

  5%|▍         | 10/221 [00:03<01:11,  2.95it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.21it/s][A
  5%|▌         | 12/221 [00:04<01:01,  3.40it/s][A
  6%|▌         | 13/221 [00:04<01:36,  2.16it/s][A
  6%|▋         | 14/221 [00:05<01:19,  2.62it/s][A
  7%|▋         | 15/221 [00:05<01:18,  2.61it/s][A
  7%|▋         | 16/221 [00:05<01:26,  2.36it/s][A
  8%|▊         | 17/221 [00:06<01:34,  2.15it/s][A
  8%|▊         | 18/221 [00:06<01:32,  2.19it/s][A
  9%|▊         | 19/221 [00:07<01:16,  2.65it/s][A
  9%|▉         | 20/221 [00:07<01:08,  2.94it/s][A
 10%|▉         | 21/221 [00:07<01:02,  3.20it/s][A
 10%|▉         | 22/221 [00:07<01:01,  3.24it/s][A[h264 @ 0x55a032cef200] mmco: unref short failure

 10%|█         | 23/221 [00:08<00:56,  3.53it/s][A
 11%|█         | 24/221 [00:08<00:51,  3.80it/s][A
 11%|█▏        | 25/221 [00:08<01:05,  2.97it/s][A
 12%|█▏        | 26/221 [00:09<01:11,  2.73it/s][A
 12%|█▏        | 27/221 [00:09<01:16,  2.54it/s][A
 13%|█▎        | 28/221 [00:10<01:24,  2.28it/s][A
 13%|█▎        | 29/221 [00:10<01:19,  2.43it/s][A
 14%|█▎        | 30/221 [00:10<01:14,  2.56it/s][A
 14%|█▍        | 31/221 [00:11<01:16,  2.48it/s][A
 14%|█▍        | 32/221 [00:11<01:08,  2.74it/s][A
 15%|█▍        | 33/221 [00:11<01:02,  3.01it/s][A
 15%|█▌        | 34/221 [00:12<01:02,  2.97it/s][A
 16%|█▌        | 35/221 [00:12<01:04,  2.90it/s][A[h264 @ 0x555ffb131900] mmco: unref short failure
[h264 @ 0x555ffb131900] mmco: unref short failure

 16%|█▋        | 36/221 [00:13<01:04,  2.88it/s][A
 17%|█▋        | 37/221 [00:13<01:00,  3.06it/s][A
 17%|█▋        | 38/221 [00:13<01:01,  2.97it/s][A
 18%|█▊        | 39/221 [00:13<00:51,  3.52it/s][A
 18%|█▊        | 40/221 [00:14<00:55,  3.29it/s][A
 19%|█▊        | 41/221 [00:14<00:47,  3.77it/s][A
 19%|█▉        | 42/221 [00:14<00:45,  3.91it/s][A
 19%|█▉        | 43/221 [00:14<00:48,  3.67it/s][A
 20%|█▉        | 44/221 [00:15<00:41,  4.23it/s][A
 20%|██        | 45/221 [00:15<00:48,  3.65it/s][A
 21%|██        | 46/221 [00:15<00:53,  3.27it/s][A
 21%|██▏       | 47/221 [00:15<00:45,  3.86it/s][A
 22%|██▏       | 48/221 [00:16<00:42,  4.08it/s][A
 22%|██▏       | 49/221 [00:16<00:45,  3.77it/s][A
 23%|██▎       | 50/221 [00:16<00:47,  3.63it/s][A
 23%|██▎       | 51/221 [00:17<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:17<00:43,  3.90it/s][A
 24%|██▍       | 53/221 [00:17<00:40,  4.18it/s][A
 24%|██▍       | 54/221 [00:17<00:46,  3.60it/s][A
 25%|██▍       | 55/221 [00:18<00:44,  3.77it/s][A
 25%|██▌       | 56/221 [00:18<00:46,  3.57it/s][A
 26%|██▌       | 57/221 [00:18<00:44,  3.70it/s][A
 26%|██▌       | 58/221 [00:18<00:41,  3.96it/s][A
 27%|██▋       | 59/221 [00:19<00:40,  4.02it/s][A
 27%|██▋       | 60/221 [00:19<00:43,  3.72it/s][A
 28%|██▊       | 61/221 [00:19<00:42,  3.73it/s][A
 28%|██▊       | 62/221 [00:19<00:43,  3.67it/s][A
 29%|██▊       | 63/221 [00:20<00:41,  3.83it/s][A
 29%|██▉       | 64/221 [00:20<00:42,  3.73it/s][A
 29%|██▉       | 65/221 [00:20<00:37,  4.14it/s][A
 30%|██▉       | 66/221 [00:21<00:43,  3.53it/s][A[h264 @ 0x55935a279380] mmco: unref short failure

 30%|███       | 67/221 [00:21<00:56,  2.74it/s][A
 31%|███       | 68/221 [00:21<00:49,  3.08it/s][A[h264 @ 0x55d4e2e6bd40] mmco: unref short failure
[h264 @ 0x55d4e2e6bd40] mmco: unref short failure

 31%|███       | 69/221 [00:22<00:52,  2.91it/s][A
 32%|███▏      | 70/221 [00:22<00:49,  3.02it/s][A
 32%|███▏      | 71/221 [00:23<00:59,  2.53it/s][A
 33%|███▎      | 72/221 [00:23<00:57,  2.61it/s][A
 33%|███▎      | 73/221 [00:23<00:52,  2.80it/s][A
 33%|███▎      | 74/221 [00:24<00:54,  2.72it/s][A
 34%|███▍      | 75/221 [00:24<00:56,  2.58it/s][A
 34%|███▍      | 76/221 [00:24<00:45,  3.15it/s][A
 35%|███▍      | 77/221 [00:24<00:42,  3.41it/s][A
 35%|███▌      | 78/221 [00:25<00:42,  3.34it/s][A
 36%|███▌      | 79/221 [00:25<00:48,  2.95it/s][A
 36%|███▌      | 80/221 [00:26<00:50,  2.79it/s][A
 37%|███▋      | 81/221 [00:26<00:50,  2.76it/s][A
 37%|███▋      | 82/221 [00:26<00:46,  3.01it/s][A
 38%|███▊      | 83/221 [00:26<00:38,  3.55it/s][A
 38%|███▊      | 84/221 [00:27<00:46,  2.95it/s][A
 38%|███▊      | 85/221 [00:27<00:45,  2.98it/s][A
 39%|███▉      | 86/221 [00:28<00:51,  2.63it/s][A
 39%|███▉      | 87/221 [00:29<01:10,  1.91it/s][A
 40%|███▉      | 88/221 [00:29<00:59,  2.23it/s][A[h264 @ 0x555ff28f9bc0] mmco: unref short failure

 40%|████      | 89/221 [00:29<00:58,  2.27it/s][A[h264 @ 0x555ff28f9bc0] mmco: unref short failure

 41%|████      | 90/221 [00:30<01:02,  2.11it/s][A
 41%|████      | 91/221 [00:30<00:50,  2.58it/s][A
 42%|████▏     | 92/221 [00:30<00:45,  2.87it/s][A
 42%|████▏     | 93/221 [00:31<00:52,  2.45it/s][A
 43%|████▎     | 94/221 [00:31<00:45,  2.80it/s][A
 43%|████▎     | 95/221 [00:32<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:32<00:53,  2.35it/s][A
 44%|████▍     | 97/221 [00:32<00:48,  2.55it/s][A
 44%|████▍     | 98/221 [00:33<00:45,  2.70it/s][A
 45%|████▍     | 99/221 [00:33<00:42,  2.88it/s][A
 45%|████▌     | 100/221 [00:33<00:36,  3.35it/s][A
 46%|████▌     | 101/221 [00:33<00:36,  3.28it/s][A
 46%|████▌     | 102/221 [00:34<00:35,  3.33it/s][A
 47%|████▋     | 103/221 [00:34<00:32,  3.69it/s][A
 47%|████▋     | 104/221 [00:34<00:31,  3.73it/s][A
 48%|████▊     | 105/221 [00:34<00:31,  3.66it/s][A
 48%|████▊     | 106/221 [00:35<00:42,  2.73it/s][A
 48%|████▊     | 107/221 [00:35<00:38,  2.97it/s][A
 49%|████▉     | 108/221 [00:35<00:31,  3.57it/s][A
 49%|████▉     | 109/221 [00:36<00:35,  3.15it/s][A
 50%|████▉     | 110/221 [00:36<00:36,  3.02it/s][A
 50%|█████     | 111/221 [00:37<00:38,  2.82it/s][A
 51%|█████     | 112/221 [00:37<00:43,  2.53it/s][A
 51%|█████     | 113/221 [00:37<00:37,  2.87it/s][A
 52%|█████▏    | 115/221 [00:38<00:28,  3.72it/s][A
 52%|█████▏    | 116/221 [00:38<00:27,  3.83it/s][A
 53%|█████▎    | 117/221 [00:38<00:28,  3.68it/s][A
 53%|█████▎    | 118/221 [00:39<00:33,  3.10it/s][A
 54%|█████▍    | 119/221 [00:39<00:35,  2.84it/s][A
 54%|█████▍    | 120/221 [00:40<00:37,  2.69it/s][A
 55%|█████▍    | 121/221 [00:40<00:30,  3.30it/s][A
 55%|█████▌    | 122/221 [00:40<00:27,  3.54it/s][A
 56%|█████▌    | 123/221 [00:40<00:28,  3.47it/s][A
 56%|█████▌    | 124/221 [00:41<00:33,  2.88it/s][A
 57%|█████▋    | 125/221 [00:42<00:47,  2.03it/s][A
 57%|█████▋    | 126/221 [00:42<00:40,  2.35it/s][A
 57%|█████▋    | 127/221 [00:42<00:46,  2.02it/s][A
 58%|█████▊    | 128/221 [00:43<00:39,  2.36it/s][A
 58%|█████▊    | 129/221 [00:43<00:32,  2.84it/s][A
 59%|█████▉    | 130/221 [00:43<00:31,  2.90it/s][A
 59%|█████▉    | 131/221 [00:43<00:26,  3.46it/s][A
 60%|█████▉    | 132/221 [00:44<00:28,  3.17it/s][A
 60%|██████    | 133/221 [00:44<00:34,  2.53it/s][A
 61%|██████    | 134/221 [00:45<00:33,  2.60it/s][A
 61%|██████    | 135/221 [00:45<00:27,  3.15it/s][A
 62%|██████▏   | 136/221 [00:45<00:27,  3.08it/s][A
 62%|██████▏   | 137/221 [00:45<00:26,  3.23it/s][A
 62%|██████▏   | 138/221 [00:46<00:27,  3.05it/s][A
 63%|██████▎   | 139/221 [00:46<00:28,  2.86it/s][A
 63%|██████▎   | 140/221 [00:47<00:25,  3.14it/s][A
 64%|██████▍   | 141/221 [00:47<00:27,  2.91it/s][A
 64%|██████▍   | 142/221 [00:47<00:25,  3.05it/s][A
 65%|██████▍   | 143/221 [00:48<00:28,  2.77it/s][A
 65%|██████▌   | 144/221 [00:48<00:24,  3.14it/s][A
 66%|██████▌   | 145/221 [00:48<00:24,  3.04it/s][A
 66%|██████▌   | 146/221 [00:49<00:26,  2.81it/s][A
 67%|██████▋   | 147/221 [00:49<00:23,  3.20it/s][A
 67%|██████▋   | 148/221 [00:49<00:20,  3.48it/s][A
 67%|██████▋   | 149/221 [00:49<00:19,  3.68it/s][A
 68%|██████▊   | 150/221 [00:50<00:21,  3.26it/s][A
 68%|██████▊   | 151/221 [00:51<00:36,  1.93it/s][A
 69%|██████▉   | 152/221 [00:52<00:43,  1.60it/s][A
 69%|██████▉   | 153/221 [00:52<00:33,  2.00it/s][A
 70%|██████▉   | 154/221 [00:52<00:28,  2.38it/s][A
 70%|███████   | 155/221 [00:53<00:29,  2.27it/s][A
 71%|███████   | 156/221 [00:53<00:27,  2.33it/s][A
 71%|███████   | 157/221 [00:53<00:26,  2.43it/s][A
 71%|███████▏  | 158/221 [00:54<00:25,  2.50it/s][A
 72%|███████▏  | 159/221 [00:54<00:21,  2.91it/s][A
 72%|███████▏  | 160/221 [00:54<00:17,  3.40it/s][A
 73%|███████▎  | 161/221 [00:54<00:16,  3.71it/s][A
 73%|███████▎  | 162/221 [00:54<00:13,  4.22it/s][A
 74%|███████▍  | 163/221 [00:55<00:13,  4.20it/s][A
 74%|███████▍  | 164/221 [00:55<00:12,  4.65it/s][A
 75%|███████▍  | 165/221 [00:55<00:10,  5.45it/s][A
 75%|███████▌  | 166/221 [00:55<00:13,  4.16it/s][A
 76%|███████▌  | 167/221 [00:56<00:12,  4.36it/s][A
 76%|███████▌  | 168/221 [00:56<00:13,  4.06it/s][A
 76%|███████▋  | 169/221 [00:56<00:12,  4.11it/s][A
 77%|███████▋  | 170/221 [00:57<00:19,  2.62it/s][A[h264 @ 0x559348e13240] mmco: unref short failure

 77%|███████▋  | 171/221 [00:57<00:21,  2.36it/s][A
 78%|███████▊  | 172/221 [00:57<00:17,  2.82it/s][A
 78%|███████▊  | 173/221 [00:58<00:16,  2.91it/s][A
 79%|███████▊  | 174/221 [00:58<00:16,  2.93it/s][A
 79%|███████▉  | 175/221 [00:59<00:16,  2.73it/s][A
 80%|███████▉  | 176/221 [00:59<00:15,  2.84it/s][A
 80%|████████  | 177/221 [00:59<00:13,  3.31it/s][A
 81%|████████  | 178/221 [01:00<00:17,  2.53it/s][A
 81%|████████  | 179/221 [01:00<00:15,  2.70it/s][A
 81%|████████▏ | 180/221 [01:00<00:13,  3.13it/s][A[h264 @ 0x55d4d264ac80] mmco: unref short failure
[h264 @ 0x55d4d264ac80] mmco: unref short failure

 82%|████████▏ | 181/221 [01:00<00:11,  3.41it/s][A
 82%|████████▏ | 182/221 [01:01<00:10,  3.76it/s][A
 83%|████████▎ | 183/221 [01:01<00:11,  3.20it/s][A
 83%|████████▎ | 184/221 [01:01<00:11,  3.17it/s][A
 84%|████████▎ | 185/221 [01:02<00:10,  3.57it/s][A
 84%|████████▍ | 186/221 [01:02<00:12,  2.72it/s][A
 85%|████████▍ | 187/221 [01:02<00:12,  2.72it/s][A
 85%|████████▌ | 188/221 [01:03<00:11,  2.84it/s][A
 86%|████████▌ | 189/221 [01:03<00:09,  3.30it/s][A[h264 @ 0x5593364c8440] mmco: unref short failure
[h264 @ 0x5593364c8440] mmco: unref short failure

 86%|████████▌ | 190/221 [01:03<00:11,  2.79it/s][A
 87%|████████▋ | 192/221 [01:04<00:07,  3.64it/s][A
 87%|████████▋ | 193/221 [01:04<00:07,  3.98it/s][A
 88%|████████▊ | 194/221 [01:04<00:07,  3.59it/s][A
 88%|████████▊ | 195/221 [01:05<00:07,  3.65it/s][A
 89%|████████▊ | 196/221 [01:05<00:10,  2.37it/s][A
 89%|████████▉ | 197/221 [01:06<00:10,  2.40it/s][A
 90%|████████▉ | 198/221 [01:06<00:10,  2.27it/s][A
 90%|█████████ | 199/221 [01:07<00:08,  2.67it/s][A
 90%|█████████ | 200/221 [01:07<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [01:07<00:06,  3.15it/s][A
 91%|█████████▏| 202/221 [01:07<00:06,  3.10it/s][A[h264 @ 0x555ffb324640] mmco: unref short failure
[h264 @ 0x555ffb324640] mmco: unref short failure

 92%|█████████▏| 203/221 [01:08<00:05,  3.40it/s][A
 92%|█████████▏| 204/221 [01:08<00:04,  3.59it/s][A
 93%|█████████▎| 205/221 [01:08<00:04,  3.96it/s][A
 93%|█████████▎| 206/221 [01:09<00:05,  2.90it/s][A
 94%|█████████▎| 207/221 [01:09<00:04,  3.09it/s][A
 94%|█████████▍| 208/221 [01:09<00:03,  3.58it/s][A
 95%|█████████▍| 209/221 [01:09<00:03,  3.19it/s][A
 95%|█████████▌| 210/221 [01:10<00:03,  3.64it/s][A
 95%|█████████▌| 211/221 [01:10<00:02,  3.80it/s][A
 96%|█████████▌| 212/221 [01:10<00:02,  3.31it/s][A
 96%|█████████▋| 213/221 [01:11<00:02,  3.06it/s][A
 97%|█████████▋| 214/221 [01:11<00:02,  2.70it/s][A
 97%|█████████▋| 215/221 [01:12<00:02,  2.68it/s][A
 98%|█████████▊| 216/221 [01:12<00:01,  2.78it/s][A[h264 @ 0x55d4d77a0800] mmco: unref short failure
[h264 @ 0x55d4d77a0800] mmco: unref short failure

 98%|█████████▊| 217/221 [01:12<00:01,  2.76it/s][A
 99%|█████████▊| 218/221 [01:13<00:01,  2.96it/s][A
 99%|█████████▉| 219/221 [01:13<00:00,  2.79it/s][A
100%|█████████▉| 220/221 [01:13<00:00,  3.17it/s][A
100%|██████████| 221/221 [01:13<00:00,  3.10it/s][A100%|██████████| 221/221 [01:13<00:00,  2.99it/s]
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'area_r1': 39.1, 'area_recall': '39.1/66.5/75.9', 'area_ravg': 60.5}
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'forward_r1': 36.9, 'forward_recall': '36.9/65.4/76.5', 'forward_ravg': 59.6}
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/68.2/77.3', 'area_video_ravg': 61.5}
09/17/2024 03:59:56 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 03:59:56 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'area_video_r1': 52.3, 'area_video_recall': '52.3/75.8/83.6', 'area_video_ravg': 70.6, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/74.2/81.0', 'area_video_back_ravg': 68.0}
09/17/2024 03:59:56 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 03:59:56 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'video_r1': 35.3, 'video_recall': '35.3/64.4/74.2', 'video_ravg': 58.0}
09/17/2024 03:59:56 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 03:59:56 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 03:59:56 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 399--===========

09/17/2024 03:59:56 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/75.7/83.4', 'video_ravg': 70.5}
09/17/2024 03:59:56 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 03:59:56 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x55a0207e2580] mmco: unref short failure
[h264 @ 0x55d4bb998b00] mmco: unref short failure
[h264 @ 0x55d4bb998b00] mmco: unref short failure
09/17/2024 04:00:14 - INFO - __main__ -   current idx RySLUDaYU80.14 from finetune_area returns wrong image/video, use 112853 instead.
[h264 @ 0x555fd89c0e80] mmco: unref short failure
[h264 @ 0x555fdce7b680] mmco: unref short failure
[h264 @ 0x555fdce7b680] mmco: unref short failure
[h264 @ 0x555fdce7b680] mmco: unref short failure
[h264 @ 0x555fdce7b680] mmco: unref short failure
[h264 @ 0x556006e84080] mmco: unref short failure
[h264 @ 0x556006e84080] mmco: unref short failure
09/17/2024 04:00:31 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.008668389171361923, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3297054767608643, 'loss_ret%tv%ta--finetune_area/total_loss': 1.3383738994598389}
09/17/2024 04:00:31 - INFO - __main__ -   current idx q2-SltghBGI.3 from finetune_area returns wrong image/video, use 137016 instead.
 27%|██▋       | 400/1455 [4:20:14<50:01:50, 170.72s/it][h264 @ 0x555fd98e6b40] mmco: unref short failure
[h264 @ 0x559346725980] mmco: unref short failure
[h264 @ 0x559346725980] mmco: unref short failure
 28%|██▊       | 401/1455 [4:20:22<35:39:20, 121.78s/it] 28%|██▊       | 402/1455 [4:20:30<25:39:11, 87.70s/it]  28%|██▊       | 403/1455 [4:20:38<18:39:20, 63.84s/it][h264 @ 0x556004633c00] mmco: unref short failure
[h264 @ 0x556004633c00] mmco: unref short failure
[h264 @ 0x556004633c00] mmco: unref short failure
[h264 @ 0x556004633c00] mmco: unref short failure
[h264 @ 0x556004633c00] mmco: unref short failure
[h264 @ 0x556004633c00] mmco: unref short failure
 28%|██▊       | 404/1455 [4:20:47<13:49:44, 47.37s/it] 28%|██▊       | 405/1455 [4:20:57<10:29:02, 35.95s/it]09/17/2024 04:01:20 - INFO - __main__ -   current idx 5l1_DENmn_k.23 from finetune_area returns wrong image/video, use 100079 instead.
 28%|██▊       | 406/1455 [4:21:07<8:11:45, 28.13s/it]  28%|██▊       | 407/1455 [4:21:16<6:33:29, 22.53s/it][h264 @ 0x555fee77b3c0] mmco: unref short failure
[h264 @ 0x555fee77b3c0] mmco: unref short failure
 28%|██▊       | 408/1455 [4:21:26<5:25:26, 18.65s/it][h264 @ 0x559347635fc0] mmco: unref short failure
 28%|██▊       | 409/1455 [4:21:35<4:37:15, 15.90s/it][h264 @ 0x559367650240] mmco: unref short failure
[h264 @ 0x55d4cb12e380] mmco: unref short failure
 28%|██▊       | 410/1455 [4:21:46<4:09:01, 14.30s/it][h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x55a02b887200] mmco: unref short failure
[h264 @ 0x55a02b887200] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x5593340e5ec0] mmco: unref short failure
[h264 @ 0x559333b43180] mmco: unref short failure
[h264 @ 0x559333b43180] mmco: unref short failure
 28%|██▊       | 411/1455 [4:21:54<3:39:35, 12.62s/it] 28%|██▊       | 412/1455 [4:22:04<3:24:05, 11.74s/it][h264 @ 0x555ffb6ee300] mmco: unref short failure
[h264 @ 0x555ffb6ee300] mmco: unref short failure
 28%|██▊       | 413/1455 [4:22:13<3:08:29, 10.85s/it][h264 @ 0x555fe80cff40] mmco: unref short failure
[h264 @ 0x555fe80cff40] mmco: unref short failure
 28%|██▊       | 414/1455 [4:22:23<3:04:00, 10.61s/it][h264 @ 0x55933d97ec80] mmco: unref short failure
[h264 @ 0x55933d97ec80] mmco: unref short failure
[h264 @ 0x55933bd4bf40] mmco: unref short failure
[h264 @ 0x55933bd4bf40] mmco: unref short failure
 29%|██▊       | 415/1455 [4:22:32<2:55:16, 10.11s/it][h264 @ 0x559369cc2f00] mmco: unref short failure
[h264 @ 0x559369cc2f00] mmco: unref short failure
[h264 @ 0x559369cc2f00] mmco: unref short failure
[h264 @ 0x559369cc2f00] mmco: unref short failure
[h264 @ 0x559363830980] mmco: unref short failure
[h264 @ 0x559363830980] mmco: unref short failure
[h264 @ 0x55a02a95ab00] mmco: unref short failure
[h264 @ 0x55d4d7f42c80] mmco: unref short failure
[h264 @ 0x555fe223d6c0] mmco: unref short failure
[h264 @ 0x555fe223d6c0] mmco: unref short failure
[h264 @ 0x555fda235200] mmco: unref short failure
[h264 @ 0x555fda235200] mmco: unref short failure
[h264 @ 0x55a0109cea40] mmco: unref short failure
[h264 @ 0x55a0109cea40] mmco: unref short failure
[h264 @ 0x55d4bd8a2c00] mmco: unref short failure
[h264 @ 0x55d4bd8a2c00] mmco: unref short failure
[h264 @ 0x5593435bbe80] mmco: unref short failure
[h264 @ 0x55d4b76bacc0] mmco: unref short failure
[h264 @ 0x55d4b76bacc0] mmco: unref short failure
[h264 @ 0x556009e5e500] mmco: unref short failure
[h264 @ 0x55d4ccffdc00] mmco: unref short failure
[h264 @ 0x55d4ccffdc00] mmco: unref short failure
[h264 @ 0x555fe97269c0] mmco: unref short failure
[h264 @ 0x559344cf2f80] mmco: unref short failure
[h264 @ 0x559344cf2f80] mmco: unref short failure
[h264 @ 0x55d4d39d4080] mmco: unref short failure
[h264 @ 0x55d4d39d4080] mmco: unref short failure
[h264 @ 0x55d4f095d580] mmco: unref short failure
[h264 @ 0x55d4f095d580] mmco: unref short failure
[h264 @ 0x55d4c29992c0] mmco: unref short failure
[h264 @ 0x55d4c29992c0] mmco: unref short failure
[h264 @ 0x55d4c3b43240] mmco: unref short failure
[h264 @ 0x55d4c3b43240] mmco: unref short failure
[h264 @ 0x556003207980] mmco: unref short failure
[h264 @ 0x556003207980] mmco: unref short failure
[h264 @ 0x55a0196fc240] mmco: unref short failure
[h264 @ 0x55a0196fc240] mmco: unref short failure
[h264 @ 0x559346726040] mmco: unref short failure
[h264 @ 0x55601d56f140] mmco: unref short failure
[h264 @ 0x55601d56f140] mmco: unref short failure
[h264 @ 0x55a0109a78c0] mmco: unref short failure
[h264 @ 0x55a0109a78c0] mmco: unref short failure
 29%|██▊       | 416/1455 [4:25:04<15:12:43, 52.71s/it] 29%|██▊       | 417/1455 [4:25:14<11:31:01, 39.94s/it][h264 @ 0x55a03b5677c0] mmco: unref short failure
[h264 @ 0x55a0380e8640] mmco: unref short failure
[h264 @ 0x5593375f8440] mmco: unref short failure
[h264 @ 0x55d4b8f0a580] mmco: unref short failure
[h264 @ 0x555ff5351d80] mmco: unref short failure
[h264 @ 0x555ff5351d80] mmco: unref short failure
 29%|██▊       | 418/1455 [4:25:42<10:28:52, 36.39s/it] 29%|██▉       | 419/1455 [4:25:54<8:19:54, 28.95s/it] [h264 @ 0x555fec48c180] mmco: unref short failure
[h264 @ 0x555fec48c180] mmco: unref short failure
[h264 @ 0x555fec48c180] mmco: unref short failure
[h264 @ 0x555fec48c180] mmco: unref short failure
[h264 @ 0x55d4dd8b55c0] mmco: unref short failure
[h264 @ 0x559333c47740] mmco: unref short failure
[h264 @ 0x559333c47740] mmco: unref short failure
 29%|██▉       | 420/1455 [4:26:03<6:37:02, 23.02s/it][h264 @ 0x5593382215c0] mmco: unref short failure
[h264 @ 0x5593382215c0] mmco: unref short failure
 29%|██▉       | 421/1455 [4:26:13<5:28:33, 19.07s/it][h264 @ 0x55d4bb63c580] mmco: unref short failure
[h264 @ 0x55d4bb63c580] mmco: unref short failure
[h264 @ 0x55d4d6f667c0] mmco: unref short failure
[h264 @ 0x55d4da315ec0] mmco: unref short failure
[h264 @ 0x55d4da315ec0] mmco: unref short failure
[h264 @ 0x555ffa971500] mmco: unref short failure
[h264 @ 0x55d4b89c1cc0] mmco: unref short failure
[h264 @ 0x55d4e1ddf500] mmco: unref short failure
[h264 @ 0x55d4e1ddf500] mmco: unref short failure
[h264 @ 0x55a025b09080] mmco: unref short failure
[h264 @ 0x55d4bf334280] mmco: unref short failure
[h264 @ 0x55d4bf334280] mmco: unref short failure
[h264 @ 0x55d4bf322280] mmco: unref short failure
[h264 @ 0x55d4bf322280] mmco: unref short failure
[h264 @ 0x55933305aa80] mmco: unref short failure
[h264 @ 0x55933305aa80] mmco: unref short failure
[h264 @ 0x555ffb324ac0] mmco: unref short failure
[h264 @ 0x555ffb324ac0] mmco: unref short failure
 29%|██▉       | 422/1455 [4:26:44<6:29:07, 22.60s/it] 29%|██▉       | 423/1455 [4:26:52<5:17:39, 18.47s/it][h264 @ 0x55d4c66a3140] mmco: unref short failure
[h264 @ 0x55d4c66a3140] mmco: unref short failure
[h264 @ 0x55d4c66a3140] mmco: unref short failure
[h264 @ 0x55d4c66a3140] mmco: unref short failure
[h264 @ 0x55a02a807980] mmco: unref short failure
[h264 @ 0x55a02a807980] mmco: unref short failure
[h264 @ 0x55d4b7745780] mmco: unref short failure
[h264 @ 0x55d4b7745780] mmco: unref short failure
[h264 @ 0x55d4b7745780] mmco: unref short failure
[h264 @ 0x55d4b7745780] mmco: unref short failure
[h264 @ 0x55933745a7c0] mmco: unref short failure
[h264 @ 0x55933745a7c0] mmco: unref short failure
[h264 @ 0x55933745a7c0] mmco: unref short failure
[h264 @ 0x55933745a7c0] mmco: unref short failure
[h264 @ 0x55a020571a00] mmco: unref short failure
[h264 @ 0x55a020571a00] mmco: unref short failure
[h264 @ 0x55a043262a40] mmco: unref short failure
[h264 @ 0x55a043262a40] mmco: unref short failure
[h264 @ 0x555fdce369c0] mmco: unref short failure
[h264 @ 0x555fdce369c0] mmco: unref short failure
[h264 @ 0x55d4cde15e00] mmco: unref short failure
[h264 @ 0x559344a9f340] mmco: unref short failure
[h264 @ 0x559344a9f340] mmco: unref short failure
[h264 @ 0x55934f028d80] mmco: unref short failure
[h264 @ 0x55d4c6e46780] mmco: unref short failure
[h264 @ 0x55d4b97b3540] mmco: unref short failure
[h264 @ 0x55d4b97b3540] mmco: unref short failure
[h264 @ 0x555fe027fbc0] mmco: unref short failure
[h264 @ 0x555fe027fbc0] mmco: unref short failure
09/17/2024 04:09:01 - INFO - __main__ -   current idx TTyNNu1mIgY.26 from finetune_area returns wrong image/video, use 105450 instead.
[h264 @ 0x555fd93ea180] mmco: unref short failure
[h264 @ 0x555fd93ea180] mmco: unref short failure
[h264 @ 0x555fef58a1c0] mmco: unref short failure
[h264 @ 0x555fdaa4b640] mmco: unref short failure
[h264 @ 0x55d4b8f2abc0] mmco: unref short failure
[h264 @ 0x55d4b8f2abc0] mmco: unref short failure
[h264 @ 0x55d4c21d9280] mmco: unref short failure
[h264 @ 0x55d4c21d9280] mmco: unref short failure
[h264 @ 0x555fe54566c0] mmco: unref short failure
[h264 @ 0x555fe54566c0] mmco: unref short failure
[h264 @ 0x559341757600] mmco: unref short failure
[h264 @ 0x55a01421b3c0] mmco: unref short failure
[h264 @ 0x55a01421b3c0] mmco: unref short failure
[h264 @ 0x55a01f3df800] mmco: unref short failure
[h264 @ 0x55936601cd40] mmco: unref short failure
[h264 @ 0x55936601cd40] mmco: unref short failure
[h264 @ 0x55d4c2c32f40] mmco: unref short failure
[h264 @ 0x55d4c2c32f40] mmco: unref short failure
[h264 @ 0x55a02a95a900] mmco: unref short failure
[h264 @ 0x55a02a95a900] mmco: unref short failure
[h264 @ 0x55a00e729940] mmco: unref short failure
[h264 @ 0x55600df51900] mmco: unref short failure
[h264 @ 0x55a0210b7b40] mmco: unref short failure
[h264 @ 0x55a0210b7b40] mmco: unref short failure
[h264 @ 0x55d4b798a840] mmco: unref short failure
[h264 @ 0x55d4cc41c400] mmco: unref short failure
[h264 @ 0x55d4cc41c400] mmco: unref short failure
[h264 @ 0x55a01b5b7940] mmco: unref short failure
not have audios CqzowavAOpc.38
[h264 @ 0x55d4ecc918c0] mmco: unref short failure
[h264 @ 0x55d4ecc918c0] mmco: unref short failure
[h264 @ 0x55d4ba6948c0] mmco: unref short failure
[h264 @ 0x55d4ba6948c0] mmco: unref short failure
 29%|██▉       | 424/1455 [4:30:04<20:10:16, 70.43s/it][h264 @ 0x55d4cf673a00] mmco: unref short failure
[h264 @ 0x55d4cf673a00] mmco: unref short failure
[h264 @ 0x55933a2eff40] mmco: unref short failure
[h264 @ 0x55933a2eff40] mmco: unref short failure
[h264 @ 0x55d4e4575a00] mmco: unref short failure
[h264 @ 0x55d4e4575a00] mmco: unref short failure
 29%|██▉       | 425/1455 [4:30:13<14:53:50, 52.07s/it][h264 @ 0x55d4ba5d0b00] mmco: unref short failure
[h264 @ 0x559340ad4540] mmco: unref short failure
[h264 @ 0x55935016e2c0] mmco: unref short failure
[h264 @ 0x55d4e412f780] mmco: unref short failure
[h264 @ 0x55d4e412f780] mmco: unref short failure
 29%|██▉       | 426/1455 [4:30:30<11:51:58, 41.51s/it][h264 @ 0x55936bbb0500] mmco: unref short failure
[h264 @ 0x55936bbb0500] mmco: unref short failure
[h264 @ 0x55600b56a7c0] mmco: unref short failure
[h264 @ 0x55a038b06d80] mmco: unref short failure
[h264 @ 0x55a038b06d80] mmco: unref short failure
 29%|██▉       | 427/1455 [4:30:56<10:30:55, 36.82s/it][h264 @ 0x55a036af5340] mmco: unref short failure
[h264 @ 0x55a036af5340] mmco: unref short failure
[h264 @ 0x555fee74d140] mmco: unref short failure
[h264 @ 0x555fee74d140] mmco: unref short failure
 29%|██▉       | 428/1455 [4:31:05<8:06:51, 28.44s/it] [h264 @ 0x555fe74393c0] mmco: unref short failure
 29%|██▉       | 429/1455 [4:31:14<6:25:49, 22.56s/it][h264 @ 0x559345b1d740] mmco: unref short failure
[h264 @ 0x559345b1d740] mmco: unref short failure
[h264 @ 0x55d4b71626c0] mmco: unref short failure
[h264 @ 0x55d4b71626c0] mmco: unref short failure
 30%|██▉       | 430/1455 [4:31:30<5:50:57, 20.54s/it][h264 @ 0x55935eaeec80] mmco: unref short failure
[h264 @ 0x55935eaeec80] mmco: unref short failure
[h264 @ 0x55a024a86d40] mmco: unref short failure
[h264 @ 0x55d4d4a1e940] mmco: unref short failure
[h264 @ 0x55d4d4a1e940] mmco: unref short failure
 30%|██▉       | 431/1455 [4:31:50<5:50:17, 20.52s/it][h264 @ 0x55d4c69f4180] mmco: unref short failure
[h264 @ 0x55d4e4575c00] mmco: unref short failure
[h264 @ 0x555fed478e80] mmco: unref short failure
09/17/2024 04:12:40 - INFO - __main__ -   current idx gI8ShUTkJf8.29 from finetune_area returns wrong image/video, use 62510 instead.
[h264 @ 0x5560052e4380] mmco: unref short failure
[h264 @ 0x5560052e4380] mmco: unref short failure
[h264 @ 0x55a0284c7800] mmco: unref short failure
[h264 @ 0x55a0284c7800] mmco: unref short failure
[h264 @ 0x55935dab5ac0] mmco: unref short failure
[h264 @ 0x55935dab5ac0] mmco: unref short failure
[h264 @ 0x555ff7881d40] mmco: unref short failure
[h264 @ 0x555fe7439140] mmco: unref short failure
[h264 @ 0x555fe7439140] mmco: unref short failure
[h264 @ 0x555fe7439140] mmco: unref short failure
[h264 @ 0x559336c0ce80] mmco: unref short failure
[h264 @ 0x559336c0ce80] mmco: unref short failure
[h264 @ 0x559336c0ce80] mmco: unref short failure
[h264 @ 0x559336c0ce80] mmco: unref short failure
[h264 @ 0x5593472154c0] mmco: unref short failure
[h264 @ 0x5593472154c0] mmco: unref short failure
[h264 @ 0x5593472154c0] mmco: unref short failure
[h264 @ 0x555ffe040640] mmco: unref short failure
[h264 @ 0x55934eec6cc0] mmco: unref short failure
[h264 @ 0x55d4efd9f340] mmco: unref short failure
[h264 @ 0x55d4c2a9b140] mmco: unref short failure
[h264 @ 0x55d4c2a9b140] mmco: unref short failure
[h264 @ 0x555fdf1a71c0] mmco: unref short failure
[h264 @ 0x55d4cab93b40] mmco: unref short failure
[h264 @ 0x559347732cc0] mmco: unref short failure
[h264 @ 0x559347732cc0] mmco: unref short failure
[h264 @ 0x55d4efd9f140] mmco: unref short failure
[h264 @ 0x55d4efd9f140] mmco: unref short failure
[h264 @ 0x555fed49fc00] mmco: unref short failure
[h264 @ 0x55934a815c80] mmco: unref short failure
[h264 @ 0x55d4cde23600] mmco: unref short failure
[h264 @ 0x555fe046f240] mmco: unref short failure
[h264 @ 0x555fe046f240] mmco: unref short failure
[h264 @ 0x559361e59680] mmco: unref short failure
[h264 @ 0x559361e59680] mmco: unref short failure
[h264 @ 0x555ff2af0a80] mmco: unref short failure
[h264 @ 0x555ff2af0a80] mmco: unref short failure
[h264 @ 0x555ff51d9040] mmco: unref short failure
[h264 @ 0x555ff51d9040] mmco: unref short failure
[h264 @ 0x555ff51d9040] mmco: unref short failure
[h264 @ 0x555ff51d9040] mmco: unref short failure
[h264 @ 0x55d4dad106c0] mmco: unref short failure
[h264 @ 0x55d4ea092c80] mmco: unref short failure
[h264 @ 0x55d4e1c94500] mmco: unref short failure
[h264 @ 0x55a038a0c3c0] mmco: unref short failure
[h264 @ 0x55a038a0c3c0] mmco: unref short failure
[h264 @ 0x556006a85680] mmco: unref short failure
[h264 @ 0x555ffdf3a100] mmco: unref short failure
[h264 @ 0x55a02445fdc0] mmco: unref short failure
[h264 @ 0x55a02445fdc0] mmco: unref short failure
[h264 @ 0x55d4da189540] mmco: unref short failure
[h264 @ 0x55d4da189540] mmco: unref short failure
[h264 @ 0x555fee74cd00] mmco: unref short failure
[h264 @ 0x555fea131780] mmco: unref short failure
[h264 @ 0x555fea131780] mmco: unref short failure
[h264 @ 0x555fe046f8c0] mmco: unref short failure
[h264 @ 0x555fe046f8c0] mmco: unref short failure
[h264 @ 0x55933795f8c0] mmco: unref short failure
[h264 @ 0x55d4bfac67c0] mmco: unref short failure
[h264 @ 0x55d4bfac67c0] mmco: unref short failure
[h264 @ 0x555fe73c1180] mmco: unref short failure
[h264 @ 0x559333895b40] mmco: unref short failure
[h264 @ 0x55a01f571400] mmco: unref short failure
 30%|██▉       | 432/1455 [4:34:56<19:54:15, 70.04s/it][h264 @ 0x55d4e8d567c0] mmco: unref short failure
 30%|██▉       | 433/1455 [4:35:05<14:44:47, 51.94s/it][h264 @ 0x55a0161de480] mmco: unref short failure
[h264 @ 0x55a027564fc0] mmco: unref short failure
[h264 @ 0x55a027564fc0] mmco: unref short failure
[h264 @ 0x5593541c3240] mmco: unref short failure
[h264 @ 0x5593541c3240] mmco: unref short failure
[h264 @ 0x55a00f16ca00] mmco: unref short failure
[h264 @ 0x55a00f16ca00] mmco: unref short failure
[h264 @ 0x559341745200] mmco: unref short failure
[h264 @ 0x559341745200] mmco: unref short failure
 30%|██▉       | 434/1455 [4:35:26<12:01:41, 42.41s/it][h264 @ 0x55d4d0864d00] mmco: unref short failure
[h264 @ 0x55d4d0864d00] mmco: unref short failure
09/17/2024 04:15:58 - INFO - __main__ -   current idx TVD87stlv5k.46 from finetune_area returns wrong image/video, use 136279 instead.
[h264 @ 0x555fd9f52180] mmco: unref short failure
09/17/2024 04:16:07 - INFO - __main__ -   current idx hDAA1fIvxDY.2 from finetune_area returns wrong image/video, use 26007 instead.
[h264 @ 0x55a010fb41c0] mmco: unref short failure
[h264 @ 0x55a010fb41c0] mmco: unref short failure
 30%|██▉       | 435/1455 [4:35:50<10:29:50, 37.05s/it] 30%|██▉       | 436/1455 [4:35:59<8:05:05, 28.56s/it] [h264 @ 0x55a013e2cfc0] mmco: unref short failure
[h264 @ 0x559355ef8cc0] mmco: unref short failure
 30%|███       | 437/1455 [4:36:07<6:22:41, 22.56s/it][h264 @ 0x55d4cb2278c0] mmco: unref short failure
[h264 @ 0x55d4cb2278c0] mmco: unref short failure
09/17/2024 04:16:37 - INFO - __main__ -   current idx 6D_ahpoF_r4.148 from finetune_area returns wrong image/video, use 115301 instead.
[h264 @ 0x55a013195940] mmco: unref short failure
[h264 @ 0x55a013195940] mmco: unref short failure
[h264 @ 0x555ff6806f80] mmco: unref short failure
 30%|███       | 438/1455 [4:36:19<5:26:02, 19.24s/it]09/17/2024 04:16:45 - INFO - __main__ -   current idx bFHOzJ5hSFg.79 from finetune_area returns wrong image/video, use 17869 instead.
[h264 @ 0x559364141b00] mmco: unref short failure
[h264 @ 0x559364141b00] mmco: unref short failure
[h264 @ 0x55a02b864880] mmco: unref short failure
[h264 @ 0x55a02b864880] mmco: unref short failure
[h264 @ 0x559334a7c5c0] mmco: unref short failure
 30%|███       | 439/1455 [4:36:40<5:33:10, 19.68s/it][h264 @ 0x555ff43eb380] mmco: unref short failure
[h264 @ 0x55d4b8c4bc80] mmco: unref short failure
[h264 @ 0x55a01345d940] mmco: unref short failure
[h264 @ 0x555fdcbc5f80] mmco: unref short failure
[h264 @ 0x55d4ccc52700] mmco: unref short failure
[h264 @ 0x55d4ccc52700] mmco: unref short failure
[h264 @ 0x55d4ccc52700] mmco: unref short failure
[h264 @ 0x55934c6d0a40] mmco: unref short failure
[h264 @ 0x55934c6d0a40] mmco: unref short failure
[h264 @ 0x55934c6d0a40] mmco: unref short failure
[h264 @ 0x55934c6d0a40] mmco: unref short failure
[h264 @ 0x55935d0d0000] mmco: unref short failure
[h264 @ 0x55935d0d0000] mmco: unref short failure
[h264 @ 0x556020340e80] mmco: unref short failure
[h264 @ 0x556020340e80] mmco: unref short failure
[h264 @ 0x55a05613d380] mmco: unref short failure
[h264 @ 0x55a05613d380] mmco: unref short failure
[h264 @ 0x55a01bd68340] mmco: unref short failure
[h264 @ 0x55602650d900] mmco: unref short failure
[h264 @ 0x55602650d900] mmco: unref short failure
[h264 @ 0x55d4b9b81c00] mmco: unref short failure
[h264 @ 0x555ff9a63080] mmco: unref short failure
[h264 @ 0x555ff9a63080] mmco: unref short failure
[h264 @ 0x559334658000] mmco: unref short failure
[h264 @ 0x555fdc86bc40] mmco: unref short failure
[h264 @ 0x555fdc86bc40] mmco: unref short failure
[h264 @ 0x55a0438ac100] mmco: unref short failure
[h264 @ 0x55a0438ac100] mmco: unref short failure
[h264 @ 0x55a0438ac100] mmco: unref short failure
[h264 @ 0x55a0438ac100] mmco: unref short failure
[h264 @ 0x55a024337dc0] mmco: unref short failure
[h264 @ 0x559363856680] mmco: unref short failure
[h264 @ 0x559363856680] mmco: unref short failure
[h264 @ 0x555ff6301400] mmco: unref short failure
[h264 @ 0x55a019cc74c0] mmco: unref short failure
[h264 @ 0x5593524255c0] mmco: unref short failure
[h264 @ 0x5593524255c0] mmco: unref short failure
[h264 @ 0x5593339e8200] mmco: unref short failure
[h264 @ 0x559333b17a00] mmco: unref short failure
[h264 @ 0x559333b17a00] mmco: unref short failure
[h264 @ 0x555ffa971700] mmco: unref short failure
[h264 @ 0x555ffa971700] mmco: unref short failure
[h264 @ 0x55a05bda6a80] mmco: unref short failure
[h264 @ 0x55934f04c740] mmco: unref short failure
[h264 @ 0x55934f04c740] mmco: unref short failure
[h264 @ 0x555fdb645f80] mmco: unref short failure
[h264 @ 0x555ff1495ec0] mmco: unref short failure
[h264 @ 0x555ff1495ec0] mmco: unref short failure
[h264 @ 0x55a046eeb480] mmco: unref short failure
09/17/2024 04:19:41 - INFO - __main__ -   current idx 0Hu1HI7Jvzs.159 from finetune_area returns wrong image/video, use 109311 instead.
[h264 @ 0x55a034484a40] mmco: unref short failure
[h264 @ 0x55a034484a40] mmco: unref short failure
[h264 @ 0x55d4e2a28b40] mmco: unref short failure
[h264 @ 0x55d4e2a28b40] mmco: unref short failure
[h264 @ 0x55934cb65980] mmco: unref short failure
[h264 @ 0x55d4db82b140] mmco: unref short failure
[h264 @ 0x55a0124119c0] mmco: unref short failure
[h264 @ 0x55d4c4a32d80] mmco: unref short failure
[h264 @ 0x55d4c121d4c0] mmco: unref short failure
[h264 @ 0x55d4c121d4c0] mmco: unref short failure
[h264 @ 0x55d4c121d4c0] mmco: unref short failure
[h264 @ 0x55d4c121d4c0] mmco: unref short failure
[h264 @ 0x55d4c4a32f80] mmco: unref short failure
 30%|███       | 440/1455 [4:40:03<21:06:24, 74.86s/it]09/17/2024 04:20:30 - INFO - __main__ -   current idx d018IFLZh_8.4 from finetune_area returns wrong image/video, use 144960 instead.
 30%|███       | 441/1455 [4:40:12<15:30:21, 55.05s/it][h264 @ 0x55a036497480] mmco: unref short failure
[h264 @ 0x55a036497480] mmco: unref short failure
 30%|███       | 442/1455 [4:40:21<11:37:56, 41.34s/it][h264 @ 0x559357e0d340] mmco: unref short failure
[h264 @ 0x5560261716c0] mmco: unref short failure
[h264 @ 0x559342bafe40] mmco: unref short failure
[h264 @ 0x556001b52140] mmco: unref short failure
[h264 @ 0x55935a9e2bc0] mmco: unref short failure
[h264 @ 0x55935a9e2bc0] mmco: unref short failure
[h264 @ 0x55a0143b2740] mmco: unref short failure
 30%|███       | 443/1455 [4:40:53<10:46:46, 38.35s/it]09/17/2024 04:21:22 - INFO - __main__ -   current idx 3cJe7Dudc7U.114 from finetune_area returns wrong image/video, use 87233 instead.
 31%|███       | 444/1455 [4:41:02<8:18:09, 29.56s/it]  31%|███       | 445/1455 [4:41:11<6:35:46, 23.51s/it][h264 @ 0x55a0452b3200] mmco: unref short failure
[h264 @ 0x55a0452b3200] mmco: unref short failure
[h264 @ 0x55a0452b3200] mmco: unref short failure
[h264 @ 0x555ffc303440] mmco: unref short failure
[h264 @ 0x555ffc303440] mmco: unref short failure
[h264 @ 0x555ffc303440] mmco: unref short failure
[h264 @ 0x555ffc303440] mmco: unref short failure
 31%|███       | 446/1455 [4:41:20<5:21:31, 19.12s/it][h264 @ 0x55d4ca0c9f80] mmco: unref short failure
[h264 @ 0x55d4ca0c9f80] mmco: unref short failure
[h264 @ 0x55a023f84ec0] mmco: unref short failure
[h264 @ 0x55a023f84ec0] mmco: unref short failure
[h264 @ 0x55a023f84ec0] mmco: unref short failure
[h264 @ 0x55a023f84ec0] mmco: unref short failure
 31%|███       | 447/1455 [4:41:30<4:35:00, 16.37s/it][h264 @ 0x55933f526fc0] mmco: unref short failure
[h264 @ 0x55d4d20ce880] mmco: unref short failure
[h264 @ 0x55d4cdbf9000] mmco: unref short failure
[h264 @ 0x55d4cdbf9000] mmco: unref short failure
[h264 @ 0x55a0561a9680] mmco: unref short failure
[h264 @ 0x55a0561a9680] mmco: unref short failure
[h264 @ 0x55a0561a9680] mmco: unref short failure
[h264 @ 0x55a0561a9680] mmco: unref short failure
[h264 @ 0x55a016d7efc0] mmco: unref short failure
[h264 @ 0x55a016d7efc0] mmco: unref short failure
09/17/2024 04:22:28 - INFO - __main__ -   current idx g0isRLf0U2E.7 from finetune_area returns wrong image/video, use 17391 instead.
[h264 @ 0x55d4b9195100] mmco: unref short failure
[h264 @ 0x55d4b9195100] mmco: unref short failure
[h264 @ 0x55d4ca287ac0] mmco: unref short failure
[h264 @ 0x55d4ca287ac0] mmco: unref short failure
[h264 @ 0x55d4ca287ac0] mmco: unref short failure
[h264 @ 0x55d4ca287ac0] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x556000d6eb80] mmco: unref short failure
[h264 @ 0x555ff589f240] mmco: unref short failure
[h264 @ 0x559349f21c40] mmco: unref short failure
[h264 @ 0x55d4e8663200] mmco: unref short failure
[h264 @ 0x55d4e8663200] mmco: unref short failure
[h264 @ 0x55933c3ee7c0] mmco: unref short failure
[h264 @ 0x55933c3ee7c0] mmco: unref short failure
[h264 @ 0x555fdcb4df40] mmco: unref short failure
[h264 @ 0x555fdcb4df40] mmco: unref short failure
[h264 @ 0x555fedbf8540] mmco: unref short failure
[h264 @ 0x555fedbf8540] mmco: unref short failure
[h264 @ 0x55a036497e40] mmco: unref short failure
[h264 @ 0x55a036497e40] mmco: unref short failure
[h264 @ 0x55d4c6438b00] mmco: unref short failure
[h264 @ 0x55d4c6438b00] mmco: unref short failure
[h264 @ 0x559361fec640] mmco: unref short failure
[h264 @ 0x559361fec640] mmco: unref short failure
[h264 @ 0x55d4d352afc0] mmco: unref short failure
09/17/2024 04:23:27 - INFO - __main__ -   current idx 4XizDIlnZbw.3 from finetune_area returns wrong image/video, use 32937 instead.
[h264 @ 0x556003457300] mmco: unref short failure
09/17/2024 04:23:29 - INFO - __main__ -   current idx OVwFPMxJUJU.30 from finetune_area returns wrong image/video, use 18788 instead.
[h264 @ 0x55a044bbe500] mmco: unref short failure
[h264 @ 0x55d4cc9c40c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55d4e3aec8c0] mmco: unref short failure
[h264 @ 0x55a040dbb1c0] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x55933cea0700] mmco: unref short failure
[h264 @ 0x55a0284d4a00] mmco: unref short failure
[h264 @ 0x55a0284d4a00] mmco: unref short failure
[h264 @ 0x55d4d50a3a40] mmco: unref short failure
[h264 @ 0x55d4e16d43c0] mmco: unref short failure
[h264 @ 0x55d4e16d43c0] mmco: unref short failure
[h264 @ 0x55a025d8c0c0] mmco: unref short failure
[h264 @ 0x55a025d8c0c0] mmco: unref short failure
[h264 @ 0x5593614fec80] mmco: unref short failure
[h264 @ 0x5593614fec80] mmco: unref short failure
[h264 @ 0x55a034d31cc0] mmco: unref short failure
[h264 @ 0x55934d0b1800] mmco: unref short failure
[h264 @ 0x55934d0b1800] mmco: unref short failure
[h264 @ 0x55934d0b1800] mmco: unref short failure
[h264 @ 0x55934d0b1800] mmco: unref short failure
[h264 @ 0x55a01a7a3c40] mmco: unref short failure
[h264 @ 0x55a01a7a3c40] mmco: unref short failure
[h264 @ 0x55934f05ce80] mmco: unref short failure
[h264 @ 0x555fdaf4d3c0] mmco: unref short failure
[h264 @ 0x55d4bf3aefc0] mmco: unref short failure
[h264 @ 0x55d4bf3aefc0] mmco: unref short failure
[h264 @ 0x55d4bf3aefc0] mmco: unref short failure
[h264 @ 0x55d4bf3aefc0] mmco: unref short failure
09/17/2024 04:25:05 - INFO - __main__ -   current idx 4xNo2X1ZunM.19 from finetune_area returns wrong image/video, use 34306 instead.
[h264 @ 0x55a01420d380] mmco: unref short failure
[h264 @ 0x555fe13b6cc0] mmco: unref short failure
[h264 @ 0x555fe13b6cc0] mmco: unref short failure
 31%|███       | 448/1455 [4:45:07<21:26:24, 76.65s/it] 31%|███       | 449/1455 [4:45:16<15:43:16, 56.26s/it]09/17/2024 04:25:38 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 04:25:38 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff0886300] mmco: unref short failure
[h264 @ 0x555ff0886300] mmco: unref short failure
[h264 @ 0x555fdcea1540] mmco: unref short failure
[h264 @ 0x555fdcea1540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a035d21300] mmco: unref short failure
[h264 @ 0x55a011481100] mmco: unref short failure
[h264 @ 0x55a011481100] mmco: unref short failure
[h264 @ 0x555fe8250a00] mmco: unref short failure
[h264 @ 0x55d4c280c140] mmco: unref short failure
[h264 @ 0x55d4c280c140] mmco: unref short failure
[h264 @ 0x55d4c280c140] mmco: unref short failure
[h264 @ 0x55d4da1942c0] mmco: unref short failure
[h264 @ 0x55d4d0225f40] mmco: unref short failure
[h264 @ 0x55d4d0225f40] mmco: unref short failure
[h264 @ 0x559333a43080] mmco: unref short failure
[h264 @ 0x559333a43080] mmco: unref short failure
[h264 @ 0x55d4b897c9c0] mmco: unref short failure
[h264 @ 0x55d4b897c9c0] mmco: unref short failure
[h264 @ 0x559362481080] mmco: unref short failure
[h264 @ 0x559362481080] mmco: unref short failure
[h264 @ 0x55d4b7ed1140] mmco: unref short failure
[h264 @ 0x55602747f400] mmco: unref short failure
[h264 @ 0x55602747f400] mmco: unref short failure
[h264 @ 0x55d4e9c54480] mmco: unref short failure
[h264 @ 0x555fedf4d340] mmco: unref short failure
[h264 @ 0x555fedf4d340] mmco: unref short failure
[h264 @ 0x555fedf4d340] mmco: unref short failure
[h264 @ 0x555fedf4d340] mmco: unref short failure
[h264 @ 0x55a0118cc9c0] mmco: unref short failure
[h264 @ 0x559362481080] mmco: unref short failure
[h264 @ 0x559362481080] mmco: unref short failure
[h264 @ 0x55d4cae040c0] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x555fdf45a500] mmco: unref short failure
[h264 @ 0x55d4e28e92c0] mmco: unref short failure
[h264 @ 0x55d4e28e92c0] mmco: unref short failure
[h264 @ 0x556005b8fdc0] mmco: unref short failure
[h264 @ 0x55934b305d00] mmco: unref short failure
[h264 @ 0x55934b305d00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:50,  1.29it/s][A
  1%|          | 2/221 [00:01<02:32,  1.43it/s][A
  1%|▏         | 3/221 [00:01<01:48,  2.02it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.94it/s][A
  2%|▏         | 5/221 [00:01<01:01,  3.51it/s][A
  3%|▎         | 6/221 [00:02<00:55,  3.87it/s][A
  3%|▎         | 7/221 [00:02<00:59,  3.61it/s][A
  4%|▎         | 8/221 [00:02<01:12,  2.94it/s][A
  4%|▍         | 9/221 [00:03<01:16,  2.78it/s][A
  5%|▍         | 10/221 [00:04<01:39,  2.12it/s][A
  5%|▍         | 11/221 [00:04<01:18,  2.68it/s][A
  5%|▌         | 12/221 [00:04<01:21,  2.56it/s][A
  6%|▌         | 13/221 [00:04<01:10,  2.96it/s][A
  6%|▋         | 14/221 [00:06<02:07,  1.62it/s][A
  7%|▋         | 15/221 [00:06<01:49,  1.88it/s][A
  7%|▋         | 16/221 [00:07<02:00,  1.70it/s][A
  8%|▊         | 17/221 [00:07<02:05,  1.63it/s][A
  8%|▊         | 18/221 [00:08<01:51,  1.81it/s][A
  9%|▊         | 19/221 [00:08<01:30,  2.24it/s][A
  9%|▉         | 20/221 [00:08<01:12,  2.78it/s][A
 10%|▉         | 21/221 [00:08<01:01,  3.26it/s][A
 10%|▉         | 22/221 [00:09<00:55,  3.59it/s][A
 11%|█         | 24/221 [00:09<00:39,  4.95it/s][A
 11%|█▏        | 25/221 [00:09<00:40,  4.89it/s][A
 12%|█▏        | 26/221 [00:09<00:42,  4.55it/s][A
 12%|█▏        | 27/221 [00:09<00:36,  5.26it/s][A
 13%|█▎        | 28/221 [00:10<01:03,  3.02it/s][A
 13%|█▎        | 29/221 [00:10<00:56,  3.41it/s][A
 14%|█▎        | 30/221 [00:11<00:59,  3.22it/s][A
 14%|█▍        | 31/221 [00:11<01:08,  2.78it/s][A
 14%|█▍        | 32/221 [00:11<00:59,  3.17it/s][A
 15%|█▍        | 33/221 [00:12<01:02,  2.99it/s][A
 15%|█▌        | 34/221 [00:12<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:12<00:46,  4.01it/s][A
 16%|█▋        | 36/221 [00:12<00:51,  3.62it/s][A
 17%|█▋        | 37/221 [00:13<01:08,  2.68it/s][A
 17%|█▋        | 38/221 [00:13<01:12,  2.51it/s][A
 18%|█▊        | 39/221 [00:13<00:57,  3.17it/s][A
 18%|█▊        | 40/221 [00:14<00:59,  3.05it/s][A
 19%|█▊        | 41/221 [00:14<00:46,  3.84it/s][A
 19%|█▉        | 42/221 [00:15<01:05,  2.73it/s][A
 19%|█▉        | 43/221 [00:15<00:51,  3.47it/s][A
 20%|█▉        | 44/221 [00:15<00:46,  3.81it/s][A
 20%|██        | 45/221 [00:16<01:25,  2.06it/s][A
 21%|██        | 46/221 [00:16<01:27,  2.01it/s][A
 21%|██▏       | 47/221 [00:17<01:27,  1.99it/s][A
 22%|██▏       | 48/221 [00:17<01:08,  2.54it/s][A
 22%|██▏       | 49/221 [00:17<00:56,  3.03it/s][A
 23%|██▎       | 50/221 [00:17<00:48,  3.55it/s][A
 23%|██▎       | 51/221 [00:18<00:44,  3.84it/s][A[h264 @ 0x55d4d2b3cf00] mmco: unref short failure

 24%|██▎       | 52/221 [00:18<00:44,  3.82it/s][A
 24%|██▍       | 53/221 [00:18<00:38,  4.41it/s][A
 24%|██▍       | 54/221 [00:20<01:48,  1.55it/s][A
 25%|██▍       | 55/221 [00:20<01:30,  1.83it/s][A
 25%|██▌       | 56/221 [00:20<01:16,  2.16it/s][A
 26%|██▌       | 57/221 [00:20<01:04,  2.53it/s][A
 26%|██▌       | 58/221 [00:21<00:51,  3.19it/s][A
 27%|██▋       | 59/221 [00:21<00:48,  3.31it/s][A
 27%|██▋       | 60/221 [00:22<01:08,  2.35it/s][A
 28%|██▊       | 61/221 [00:22<01:00,  2.65it/s][A
 28%|██▊       | 62/221 [00:22<00:58,  2.72it/s][A
 29%|██▊       | 63/221 [00:23<00:56,  2.82it/s][A
 29%|██▉       | 64/221 [00:23<00:47,  3.32it/s][A
 29%|██▉       | 65/221 [00:23<00:44,  3.49it/s][A
 30%|██▉       | 66/221 [00:23<00:55,  2.77it/s][A[h264 @ 0x55d4d7c72100] mmco: unref short failure
[h264 @ 0x55d4d7c72100] mmco: unref short failure

 30%|███       | 67/221 [00:24<01:14,  2.07it/s][A
 31%|███       | 68/221 [00:25<01:04,  2.37it/s][A
 31%|███       | 69/221 [00:25<01:25,  1.77it/s][A
 32%|███▏      | 70/221 [00:26<01:11,  2.12it/s][A
 32%|███▏      | 71/221 [00:27<01:40,  1.49it/s][A
 33%|███▎      | 72/221 [00:27<01:24,  1.77it/s][A
 33%|███▎      | 73/221 [00:27<01:14,  2.00it/s][A
 33%|███▎      | 74/221 [00:28<00:59,  2.47it/s][A
 34%|███▍      | 75/221 [00:28<00:59,  2.44it/s][A
 34%|███▍      | 76/221 [00:28<00:53,  2.69it/s][A
 35%|███▍      | 77/221 [00:29<00:47,  3.06it/s][A
 35%|███▌      | 78/221 [00:29<00:48,  2.94it/s][A
 36%|███▌      | 79/221 [00:30<01:02,  2.27it/s][A
 36%|███▌      | 80/221 [00:30<00:54,  2.58it/s][A
 37%|███▋      | 81/221 [00:30<00:58,  2.38it/s][A
 37%|███▋      | 82/221 [00:31<00:47,  2.91it/s][A
 38%|███▊      | 83/221 [00:31<00:40,  3.43it/s][A
 38%|███▊      | 84/221 [00:31<00:43,  3.17it/s][A
 38%|███▊      | 85/221 [00:31<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:32<00:43,  3.14it/s][A
 39%|███▉      | 87/221 [00:32<00:59,  2.24it/s][A
 40%|███▉      | 88/221 [00:33<01:05,  2.04it/s][A09/17/2024 04:28:29 - INFO - __main__ -   current idx 6aaFlMlB90k.2 from finetune_area returns wrong image/video, use 25247 instead.

 40%|████      | 89/221 [00:35<01:44,  1.26it/s][A
 41%|████      | 90/221 [00:35<01:27,  1.50it/s][A
 41%|████      | 91/221 [00:35<01:08,  1.89it/s][A
 42%|████▏     | 92/221 [00:35<01:00,  2.14it/s][A
 42%|████▏     | 93/221 [00:36<01:07,  1.90it/s][A
 43%|████▎     | 94/221 [00:36<01:00,  2.11it/s][A
 43%|████▎     | 95/221 [00:37<00:47,  2.65it/s][A
 43%|████▎     | 96/221 [00:37<00:43,  2.88it/s][A
 44%|████▍     | 97/221 [00:37<00:34,  3.59it/s][A
 44%|████▍     | 98/221 [00:37<00:38,  3.19it/s][A
 45%|████▍     | 99/221 [00:38<00:37,  3.24it/s][A
 45%|████▌     | 100/221 [00:38<00:36,  3.35it/s][A
 46%|████▌     | 101/221 [00:38<00:30,  3.90it/s][A
 46%|████▌     | 102/221 [00:39<00:34,  3.44it/s][A
 47%|████▋     | 103/221 [00:39<00:32,  3.60it/s][A
 47%|████▋     | 104/221 [00:39<00:28,  4.10it/s][A
 48%|████▊     | 105/221 [00:39<00:33,  3.47it/s][A
 48%|████▊     | 106/221 [00:40<00:53,  2.15it/s][A
 48%|████▊     | 107/221 [00:40<00:42,  2.69it/s][A
 49%|████▉     | 108/221 [00:41<00:37,  2.99it/s][A
 49%|████▉     | 109/221 [00:41<00:39,  2.85it/s][A
 50%|████▉     | 110/221 [00:42<00:44,  2.52it/s][A
 50%|█████     | 111/221 [00:42<00:54,  2.01it/s][A
 51%|█████     | 112/221 [00:43<00:51,  2.10it/s][A
 51%|█████     | 113/221 [00:43<00:48,  2.23it/s][A
 52%|█████▏    | 114/221 [00:43<00:40,  2.67it/s][A
 52%|█████▏    | 115/221 [00:43<00:35,  3.01it/s][A09/17/2024 04:28:38 - INFO - __main__ -   current idx JyHu6qXDg1E.525 from finetune_area returns wrong image/video, use 82604 instead.

 52%|█████▏    | 116/221 [00:47<02:24,  1.38s/it][A
 53%|█████▎    | 117/221 [00:48<01:56,  1.12s/it][A
 53%|█████▎    | 118/221 [00:48<01:34,  1.09it/s][A
 54%|█████▍    | 119/221 [00:49<01:13,  1.40it/s][A
 54%|█████▍    | 120/221 [00:49<01:03,  1.59it/s][A
 55%|█████▍    | 121/221 [00:49<00:49,  2.02it/s][A
 55%|█████▌    | 122/221 [00:49<00:42,  2.32it/s][A
 56%|█████▌    | 123/221 [00:50<00:34,  2.85it/s][A
 56%|█████▌    | 124/221 [00:50<00:32,  2.98it/s][A
 57%|█████▋    | 125/221 [00:50<00:34,  2.77it/s][A
 57%|█████▋    | 126/221 [00:51<00:33,  2.87it/s][A
 57%|█████▋    | 127/221 [00:51<00:39,  2.39it/s][A
 58%|█████▊    | 128/221 [00:52<00:37,  2.46it/s][A
 58%|█████▊    | 129/221 [00:52<00:30,  3.00it/s][A
 59%|█████▉    | 130/221 [00:52<00:32,  2.81it/s][A
 59%|█████▉    | 131/221 [00:52<00:25,  3.48it/s][A
 60%|█████▉    | 132/221 [00:52<00:22,  3.91it/s][A
 60%|██████    | 133/221 [00:53<00:29,  3.01it/s][A
 61%|██████    | 134/221 [00:53<00:24,  3.55it/s][A
 61%|██████    | 135/221 [00:53<00:26,  3.23it/s][A
 62%|██████▏   | 136/221 [00:54<00:28,  3.01it/s][A
 62%|██████▏   | 137/221 [00:54<00:26,  3.21it/s][A
 62%|██████▏   | 138/221 [00:55<00:31,  2.65it/s][A
 63%|██████▎   | 139/221 [00:55<00:35,  2.29it/s][A
 63%|██████▎   | 140/221 [00:56<00:33,  2.42it/s][A
 64%|██████▍   | 141/221 [00:56<00:28,  2.80it/s][A
 64%|██████▍   | 142/221 [00:56<00:27,  2.89it/s][A
 65%|██████▍   | 143/221 [00:57<00:30,  2.56it/s][A
 65%|██████▌   | 144/221 [00:57<00:31,  2.48it/s][A
 66%|██████▌   | 145/221 [00:57<00:25,  2.97it/s][A
 66%|██████▌   | 146/221 [00:57<00:21,  3.53it/s][A
 67%|██████▋   | 147/221 [00:58<00:20,  3.69it/s][A
 67%|██████▋   | 148/221 [00:58<00:21,  3.41it/s][A
 67%|██████▋   | 149/221 [00:58<00:18,  3.95it/s][A
 68%|██████▊   | 150/221 [00:58<00:19,  3.73it/s][A
 68%|██████▊   | 151/221 [00:59<00:29,  2.37it/s][A
 69%|██████▉   | 152/221 [01:00<00:31,  2.20it/s][A
 69%|██████▉   | 153/221 [01:00<00:28,  2.37it/s][A[h264 @ 0x5560050811c0] mmco: unref short failure

 70%|██████▉   | 154/221 [01:01<00:27,  2.43it/s][A
 70%|███████   | 155/221 [01:01<00:24,  2.66it/s][A
 71%|███████   | 156/221 [01:01<00:23,  2.78it/s][A
 71%|███████   | 157/221 [01:02<00:33,  1.91it/s][A
 71%|███████▏  | 158/221 [01:02<00:29,  2.14it/s][A
 72%|███████▏  | 159/221 [01:03<00:24,  2.57it/s][A
 72%|███████▏  | 160/221 [01:03<00:21,  2.79it/s][A
 73%|███████▎  | 161/221 [01:03<00:18,  3.22it/s][A
 73%|███████▎  | 162/221 [01:03<00:16,  3.56it/s][A
 74%|███████▍  | 163/221 [01:04<00:18,  3.17it/s][A
 74%|███████▍  | 164/221 [01:04<00:18,  3.03it/s][A
 75%|███████▍  | 165/221 [01:04<00:15,  3.52it/s][A
 75%|███████▌  | 166/221 [01:05<00:18,  2.95it/s][A
 76%|███████▌  | 167/221 [01:05<00:16,  3.19it/s][A
 76%|███████▌  | 168/221 [01:06<00:22,  2.35it/s][A
 76%|███████▋  | 169/221 [01:06<00:19,  2.67it/s][A
 77%|███████▋  | 170/221 [01:06<00:18,  2.79it/s][A
 77%|███████▋  | 171/221 [01:07<00:18,  2.72it/s][A
 78%|███████▊  | 172/221 [01:07<00:21,  2.33it/s][A
 78%|███████▊  | 173/221 [01:07<00:18,  2.63it/s][A
 79%|███████▊  | 174/221 [01:08<00:14,  3.32it/s][A
 79%|███████▉  | 175/221 [01:08<00:14,  3.09it/s][A
 80%|███████▉  | 176/221 [01:08<00:16,  2.71it/s][A
 80%|████████  | 177/221 [01:09<00:13,  3.25it/s][A
 81%|████████  | 178/221 [01:09<00:13,  3.07it/s][A
 81%|████████  | 179/221 [01:09<00:14,  2.88it/s][A
 81%|████████▏ | 180/221 [01:09<00:11,  3.59it/s][A
 82%|████████▏ | 181/221 [01:10<00:10,  3.70it/s][A
 82%|████████▏ | 182/221 [01:10<00:09,  3.95it/s][A
 83%|████████▎ | 183/221 [01:10<00:09,  4.03it/s][A
 83%|████████▎ | 184/221 [01:11<00:10,  3.48it/s][A
 84%|████████▎ | 185/221 [01:11<00:09,  3.65it/s][A
 84%|████████▍ | 186/221 [01:11<00:12,  2.79it/s][A
 85%|████████▍ | 187/221 [01:12<00:11,  3.05it/s][A
 85%|████████▌ | 188/221 [01:12<00:11,  2.93it/s][A
 86%|████████▌ | 189/221 [01:12<00:10,  3.17it/s][A
 86%|████████▌ | 190/221 [01:13<00:11,  2.73it/s][A
 86%|████████▋ | 191/221 [01:13<00:09,  3.26it/s][A09/17/2024 04:29:08 - INFO - __main__ -   current idx Zsx1-4aJ4ys.28 from finetune_area returns wrong image/video, use 136629 instead.

 87%|████████▋ | 192/221 [01:13<00:08,  3.55it/s][A
 87%|████████▋ | 193/221 [01:13<00:06,  4.20it/s][A
 88%|████████▊ | 194/221 [01:14<00:12,  2.15it/s][A
 88%|████████▊ | 195/221 [01:14<00:10,  2.58it/s][A
 89%|████████▊ | 196/221 [01:15<00:07,  3.17it/s][A
 89%|████████▉ | 197/221 [01:15<00:06,  3.48it/s][A
 90%|████████▉ | 198/221 [01:15<00:09,  2.51it/s][A
 90%|█████████ | 199/221 [01:16<00:07,  2.83it/s][A
 90%|█████████ | 200/221 [01:16<00:08,  2.52it/s][A
 91%|█████████ | 201/221 [01:17<00:07,  2.72it/s][A
 91%|█████████▏| 202/221 [01:17<00:06,  2.81it/s][A
 92%|█████████▏| 203/221 [01:17<00:05,  3.19it/s][A
 92%|█████████▏| 204/221 [01:17<00:04,  3.48it/s][A
 93%|█████████▎| 205/221 [01:17<00:03,  4.05it/s][A
 93%|█████████▎| 206/221 [01:18<00:05,  2.59it/s][A
 94%|█████████▎| 207/221 [01:18<00:04,  2.87it/s][A
 94%|█████████▍| 208/221 [01:19<00:04,  3.14it/s][A
 95%|█████████▍| 209/221 [01:19<00:03,  3.52it/s][A
 95%|█████████▌| 210/221 [01:19<00:02,  4.02it/s][A
 95%|█████████▌| 211/221 [01:19<00:03,  3.12it/s][A
 96%|█████████▌| 212/221 [01:20<00:02,  3.19it/s][A
 96%|█████████▋| 213/221 [01:20<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [01:20<00:02,  2.94it/s][A
 97%|█████████▋| 215/221 [01:21<00:01,  3.12it/s][A
 98%|█████████▊| 216/221 [01:21<00:01,  2.98it/s][A
 98%|█████████▊| 217/221 [01:22<00:01,  2.37it/s][A
 99%|█████████▊| 218/221 [01:22<00:01,  2.28it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.63it/s][A[h264 @ 0x55d4e8fbb500] mmco: unref short failure
[h264 @ 0x55d4e8fbb500] mmco: unref short failure

100%|█████████▉| 220/221 [01:25<00:01,  1.14s/it][A
100%|██████████| 221/221 [01:26<00:00,  1.08it/s][A100%|██████████| 221/221 [01:26<00:00,  2.56it/s]
[h264 @ 0x55a020c3ee80] mmco: unref short failure
[h264 @ 0x55a020c3ee80] mmco: unref short failure
[h264 @ 0x55936cdb3340] mmco: unref short failure
[h264 @ 0x55936cdb3340] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:10,  3.11it/s][A
  1%|          | 2/221 [00:00<01:17,  2.81it/s][A
  1%|▏         | 3/221 [00:01<01:16,  2.87it/s][A
  2%|▏         | 4/221 [00:01<01:19,  2.73it/s][A
  2%|▏         | 5/221 [00:01<01:19,  2.73it/s][A
  3%|▎         | 6/221 [00:02<01:16,  2.81it/s][A
  3%|▎         | 7/221 [00:02<01:14,  2.88it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.81it/s][A
  4%|▍         | 9/221 [00:03<01:21,  2.61it/s][A[h264 @ 0x559338a4d8c0] mmco: unref short failure
[h264 @ 0x559338a4d8c0] mmco: unref short failure
[h264 @ 0x559338a4d8c0] mmco: unref short failure
[h264 @ 0x559338a4d8c0] mmco: unref short failure

  5%|▍         | 10/221 [00:03<01:20,  2.63it/s][A
  5%|▍         | 11/221 [00:04<01:19,  2.63it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.65it/s][A
  6%|▌         | 13/221 [00:04<01:15,  2.74it/s][A
  6%|▋         | 14/221 [00:05<01:13,  2.82it/s][A
  7%|▋         | 15/221 [00:05<01:11,  2.88it/s][A
  7%|▋         | 16/221 [00:05<01:09,  2.94it/s][A
  8%|▊         | 17/221 [00:06<01:10,  2.88it/s][A
  8%|▊         | 18/221 [00:06<01:14,  2.73it/s][A
  9%|▊         | 19/221 [00:06<01:13,  2.76it/s][A
  9%|▉         | 20/221 [00:07<01:14,  2.71it/s][A
 10%|▉         | 21/221 [00:07<01:15,  2.66it/s][A[h264 @ 0x555ff63f5380] mmco: unref short failure

 10%|▉         | 22/221 [00:07<01:12,  2.73it/s][A
 10%|█         | 23/221 [00:08<01:11,  2.79it/s][A
 11%|█         | 24/221 [00:08<01:08,  2.86it/s][A
 11%|█▏        | 25/221 [00:08<01:08,  2.87it/s][A
 12%|█▏        | 26/221 [00:09<01:09,  2.79it/s][A
 12%|█▏        | 27/221 [00:09<01:08,  2.82it/s][A
 13%|█▎        | 28/221 [00:10<01:18,  2.47it/s][A
 13%|█▎        | 29/221 [00:10<01:20,  2.39it/s][A
 14%|█▎        | 30/221 [00:11<01:16,  2.49it/s][A[h264 @ 0x55a01e3cc640] mmco: unref short failure
[h264 @ 0x55a01e3cc640] mmco: unref short failure

 14%|█▍        | 31/221 [00:11<01:15,  2.53it/s][A
 14%|█▍        | 32/221 [00:11<01:13,  2.56it/s][A
 15%|█▍        | 33/221 [00:12<01:14,  2.51it/s][A
 15%|█▌        | 34/221 [00:12<01:14,  2.52it/s][A
 16%|█▌        | 35/221 [00:12<01:11,  2.58it/s][A
 16%|█▋        | 36/221 [00:13<01:07,  2.73it/s][A
 17%|█▋        | 37/221 [00:13<01:05,  2.80it/s][A
 17%|█▋        | 38/221 [00:13<01:03,  2.87it/s][A
 18%|█▊        | 39/221 [00:14<01:01,  2.95it/s][A
 18%|█▊        | 40/221 [00:14<01:03,  2.83it/s][A
 19%|█▊        | 41/221 [00:15<01:04,  2.80it/s][A
 19%|█▉        | 42/221 [00:15<01:06,  2.70it/s][A
 19%|█▉        | 43/221 [00:15<01:05,  2.72it/s][A
 20%|█▉        | 44/221 [00:16<01:04,  2.74it/s][A
 20%|██        | 45/221 [00:16<01:05,  2.69it/s][A
 21%|██        | 46/221 [00:16<01:02,  2.80it/s][A
 21%|██▏       | 47/221 [00:17<01:01,  2.83it/s][A
 22%|██▏       | 48/221 [00:17<01:01,  2.83it/s][A
 22%|██▏       | 49/221 [00:17<01:01,  2.79it/s][A
 23%|██▎       | 50/221 [00:18<01:05,  2.60it/s][A
 23%|██▎       | 51/221 [00:18<01:02,  2.72it/s][A
 24%|██▎       | 52/221 [00:19<01:00,  2.81it/s][A
 24%|██▍       | 53/221 [00:19<00:59,  2.83it/s][A[h264 @ 0x55d4ead6f0c0] mmco: unref short failure
[h264 @ 0x55d4ead6f0c0] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<00:57,  2.92it/s][A
 25%|██▍       | 55/221 [00:20<00:57,  2.91it/s][A
 25%|██▌       | 56/221 [00:20<01:00,  2.74it/s][A
 26%|██▌       | 57/221 [00:20<00:58,  2.82it/s][A
 26%|██▌       | 58/221 [00:21<00:56,  2.90it/s][A
 27%|██▋       | 59/221 [00:21<00:54,  2.97it/s][A
 27%|██▋       | 60/221 [00:21<00:54,  2.98it/s][A
 28%|██▊       | 61/221 [00:22<00:54,  2.96it/s][A
 28%|██▊       | 62/221 [00:22<00:55,  2.85it/s][A
 29%|██▊       | 63/221 [00:23<01:04,  2.44it/s][A
 29%|██▉       | 64/221 [00:23<01:02,  2.53it/s][A
 29%|██▉       | 65/221 [00:23<01:02,  2.48it/s][A[h264 @ 0x55d4b8cc9400] mmco: unref short failure

 30%|██▉       | 66/221 [00:24<01:00,  2.55it/s][A
 30%|███       | 67/221 [00:24<00:56,  2.70it/s][A
 31%|███       | 68/221 [00:24<00:55,  2.78it/s][A
 31%|███       | 69/221 [00:25<00:53,  2.83it/s][A
 32%|███▏      | 70/221 [00:25<00:52,  2.88it/s][A
 32%|███▏      | 71/221 [00:25<00:50,  2.97it/s][A
 33%|███▎      | 72/221 [00:26<00:49,  3.00it/s][A
 33%|███▎      | 73/221 [00:26<00:52,  2.82it/s][A
 33%|███▎      | 74/221 [00:26<00:53,  2.73it/s][A
 34%|███▍      | 75/221 [00:27<00:51,  2.81it/s][A
 34%|███▍      | 76/221 [00:27<00:50,  2.86it/s][A
 35%|███▍      | 77/221 [00:27<00:50,  2.86it/s][A
 35%|███▌      | 78/221 [00:28<00:49,  2.87it/s][A
 36%|███▌      | 79/221 [00:28<00:48,  2.95it/s][A
 36%|███▌      | 80/221 [00:29<00:50,  2.81it/s][A
 37%|███▋      | 81/221 [00:29<00:51,  2.74it/s][A
 37%|███▋      | 82/221 [00:29<00:48,  2.85it/s][A[h264 @ 0x55934fe26f40] mmco: unref short failure
[h264 @ 0x55934fe26f40] mmco: unref short failure

 38%|███▊      | 83/221 [00:30<00:48,  2.85it/s][A
 38%|███▊      | 84/221 [00:30<00:49,  2.78it/s][A
 38%|███▊      | 85/221 [00:30<00:50,  2.72it/s][A
 39%|███▉      | 86/221 [00:31<00:50,  2.68it/s][A
 39%|███▉      | 87/221 [00:31<00:49,  2.72it/s][A
 40%|███▉      | 88/221 [00:31<00:50,  2.64it/s][A
 40%|████      | 89/221 [00:32<00:49,  2.68it/s][A
 41%|████      | 90/221 [00:32<00:49,  2.67it/s][A
 41%|████      | 91/221 [00:33<00:49,  2.61it/s][A[h264 @ 0x556009eb8780] mmco: unref short failure
[h264 @ 0x556009eb8780] mmco: unref short failure

 42%|████▏     | 92/221 [00:33<00:47,  2.72it/s][A[h264 @ 0x556009eb8780] mmco: unref short failure
[h264 @ 0x556009eb8780] mmco: unref short failure
[h264 @ 0x55601f8a4180] mmco: unref short failure

 42%|████▏     | 93/221 [00:33<00:48,  2.65it/s][A
 43%|████▎     | 94/221 [00:34<00:45,  2.78it/s][A
 43%|████▎     | 95/221 [00:34<00:43,  2.88it/s][A
 43%|████▎     | 96/221 [00:34<00:44,  2.83it/s][A
 44%|████▍     | 97/221 [00:35<00:44,  2.78it/s][A
 44%|████▍     | 98/221 [00:35<00:43,  2.81it/s][A
 45%|████▍     | 99/221 [00:35<00:42,  2.86it/s][A
 45%|████▌     | 100/221 [00:36<00:43,  2.80it/s][A
 46%|████▌     | 101/221 [00:36<00:42,  2.82it/s][A
 46%|████▌     | 102/221 [00:36<00:41,  2.90it/s][A
 47%|████▋     | 103/221 [00:37<00:41,  2.85it/s][A
 47%|████▋     | 104/221 [00:37<00:40,  2.91it/s][A
 48%|████▊     | 105/221 [00:38<00:42,  2.71it/s][A
 48%|████▊     | 106/221 [00:38<00:41,  2.75it/s][A
 48%|████▊     | 107/221 [00:38<00:40,  2.83it/s][A
 49%|████▉     | 108/221 [00:39<00:40,  2.82it/s][A
 49%|████▉     | 109/221 [00:39<00:42,  2.64it/s][A
 50%|████▉     | 110/221 [00:39<00:42,  2.61it/s][A
 50%|█████     | 111/221 [00:40<00:40,  2.71it/s][A[h264 @ 0x55a00f3dbec0] mmco: unref short failure

 51%|█████     | 112/221 [00:40<00:39,  2.73it/s][A
 51%|█████     | 113/221 [00:40<00:37,  2.85it/s][A
 52%|█████▏    | 114/221 [00:41<00:39,  2.69it/s][A
 52%|█████▏    | 115/221 [00:41<00:38,  2.75it/s][A
 52%|█████▏    | 116/221 [00:42<00:37,  2.81it/s][A[h264 @ 0x55a0394a9700] mmco: unref short failure
[h264 @ 0x55a0394a9700] mmco: unref short failure

 53%|█████▎    | 117/221 [00:42<00:36,  2.88it/s][A
 53%|█████▎    | 118/221 [00:42<00:38,  2.68it/s][A
 54%|█████▍    | 119/221 [00:43<00:36,  2.79it/s][A
 54%|█████▍    | 120/221 [00:43<00:36,  2.79it/s][A
 55%|█████▍    | 121/221 [00:43<00:34,  2.89it/s][A
 55%|█████▌    | 122/221 [00:44<00:35,  2.80it/s][A
 56%|█████▌    | 123/221 [00:44<00:36,  2.67it/s][A[h264 @ 0x55d4e9553840] mmco: unref short failure

 56%|█████▌    | 124/221 [00:45<00:38,  2.51it/s][A
 57%|█████▋    | 125/221 [00:45<00:38,  2.49it/s][A
 57%|█████▋    | 126/221 [00:45<00:38,  2.48it/s][A
 57%|█████▋    | 127/221 [00:46<00:35,  2.61it/s][A
 58%|█████▊    | 128/221 [00:46<00:37,  2.46it/s][A
 58%|█████▊    | 129/221 [00:47<00:36,  2.49it/s][A
 59%|█████▉    | 130/221 [00:47<00:35,  2.55it/s][A
 59%|█████▉    | 131/221 [00:47<00:34,  2.59it/s][A[h264 @ 0x55d4cc6f2fc0] mmco: unref short failure

 60%|█████▉    | 132/221 [00:48<00:33,  2.67it/s][A
 60%|██████    | 133/221 [00:48<00:31,  2.76it/s][A
 61%|██████    | 134/221 [00:48<00:31,  2.78it/s][A
 61%|██████    | 135/221 [00:49<00:30,  2.84it/s][A
 62%|██████▏   | 136/221 [00:49<00:31,  2.70it/s][A
 62%|██████▏   | 137/221 [00:49<00:30,  2.71it/s][A
 62%|██████▏   | 138/221 [00:50<00:29,  2.82it/s][A
 63%|██████▎   | 139/221 [00:50<00:31,  2.60it/s][A
 63%|██████▎   | 140/221 [00:51<00:34,  2.34it/s][A
 64%|██████▍   | 141/221 [00:51<00:35,  2.28it/s][A
 64%|██████▍   | 142/221 [00:52<00:32,  2.45it/s][A
 65%|██████▍   | 143/221 [00:52<00:31,  2.44it/s][A
 65%|██████▌   | 144/221 [00:52<00:31,  2.45it/s][A
 66%|██████▌   | 145/221 [00:53<00:29,  2.61it/s][A
 66%|██████▌   | 146/221 [00:53<00:29,  2.56it/s][A[h264 @ 0x55d4bf748180] mmco: unref short failure
[h264 @ 0x55d4bf748180] mmco: unref short failure

 67%|██████▋   | 147/221 [00:53<00:27,  2.64it/s][A
 67%|██████▋   | 148/221 [00:54<00:27,  2.67it/s][A
 67%|██████▋   | 149/221 [00:54<00:25,  2.77it/s][A
 68%|██████▊   | 150/221 [00:55<00:25,  2.80it/s][A
 68%|██████▊   | 151/221 [00:55<00:24,  2.84it/s][A
 69%|██████▉   | 152/221 [00:55<00:24,  2.85it/s][A
 69%|██████▉   | 153/221 [00:56<00:23,  2.89it/s][A
 70%|██████▉   | 154/221 [00:56<00:23,  2.83it/s][A
 70%|███████   | 155/221 [00:56<00:24,  2.74it/s][A
 71%|███████   | 156/221 [00:57<00:23,  2.77it/s][A
 71%|███████   | 157/221 [00:57<00:22,  2.87it/s][A
 71%|███████▏  | 158/221 [00:57<00:21,  2.86it/s][A
 72%|███████▏  | 159/221 [00:58<00:21,  2.94it/s][A[h264 @ 0x55600c9eda40] mmco: unref short failure

 72%|███████▏  | 160/221 [00:58<00:20,  3.00it/s][A
 73%|███████▎  | 161/221 [00:58<00:21,  2.83it/s][A
 73%|███████▎  | 162/221 [00:59<00:22,  2.61it/s][A
 74%|███████▍  | 163/221 [00:59<00:21,  2.75it/s][A
 74%|███████▍  | 164/221 [00:59<00:20,  2.84it/s][A
 75%|███████▍  | 165/221 [01:00<00:19,  2.83it/s][A
 75%|███████▌  | 166/221 [01:00<00:18,  2.91it/s][A
 76%|███████▌  | 167/221 [01:00<00:18,  2.90it/s][A
 76%|███████▌  | 168/221 [01:01<00:19,  2.78it/s][A
 76%|███████▋  | 169/221 [01:01<00:18,  2.83it/s][A
 77%|███████▋  | 170/221 [01:02<00:18,  2.71it/s][A
 77%|███████▋  | 171/221 [01:02<00:17,  2.78it/s][A
 78%|███████▊  | 172/221 [01:02<00:17,  2.78it/s][A
 78%|███████▊  | 173/221 [01:03<00:16,  2.84it/s][A
 79%|███████▊  | 174/221 [01:03<00:16,  2.80it/s][A
 79%|███████▉  | 175/221 [01:03<00:15,  2.90it/s][A
 80%|███████▉  | 176/221 [01:04<00:16,  2.77it/s][A
 80%|████████  | 177/221 [01:04<00:15,  2.78it/s][A
 81%|████████  | 178/221 [01:04<00:15,  2.76it/s][A
 81%|████████  | 179/221 [01:05<00:15,  2.77it/s][A
 81%|████████▏ | 180/221 [01:05<00:14,  2.78it/s][A
 82%|████████▏ | 181/221 [01:06<00:14,  2.81it/s][A
 82%|████████▏ | 182/221 [01:06<00:13,  2.82it/s][A
 83%|████████▎ | 183/221 [01:06<00:14,  2.69it/s][A
 83%|████████▎ | 184/221 [01:07<00:13,  2.66it/s][A
 84%|████████▎ | 185/221 [01:07<00:13,  2.74it/s][A
 84%|████████▍ | 186/221 [01:07<00:12,  2.74it/s][A
 85%|████████▍ | 187/221 [01:08<00:11,  2.85it/s][A
 85%|████████▌ | 188/221 [01:08<00:11,  2.87it/s][A
 86%|████████▌ | 189/221 [01:08<00:11,  2.89it/s][A
 86%|████████▌ | 190/221 [01:09<00:10,  2.83it/s][A
 86%|████████▋ | 191/221 [01:09<00:10,  2.76it/s][A
 87%|████████▋ | 192/221 [01:10<00:10,  2.65it/s][A
 87%|████████▋ | 193/221 [01:10<00:10,  2.78it/s][A
 88%|████████▊ | 194/221 [01:10<00:09,  2.83it/s][A
 88%|████████▊ | 195/221 [01:11<00:09,  2.85it/s][A
 89%|████████▊ | 196/221 [01:11<00:08,  2.84it/s][A[h264 @ 0x55d4ee513500] mmco: unref short failure
[h264 @ 0x55d4ee513500] mmco: unref short failure

 89%|████████▉ | 197/221 [01:11<00:08,  2.72it/s][A
 90%|████████▉ | 198/221 [01:12<00:08,  2.58it/s][A
 90%|█████████ | 199/221 [01:12<00:08,  2.71it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.76it/s][A
 91%|█████████ | 201/221 [01:13<00:07,  2.79it/s][A
 91%|█████████▏| 202/221 [01:13<00:06,  2.82it/s][A
 92%|█████████▏| 203/221 [01:13<00:06,  2.88it/s][A
 92%|█████████▏| 204/221 [01:14<00:05,  2.88it/s][A
 93%|█████████▎| 205/221 [01:14<00:06,  2.51it/s][A
 93%|█████████▎| 206/221 [01:15<00:05,  2.54it/s][A
 94%|█████████▎| 207/221 [01:15<00:05,  2.70it/s][A
 94%|█████████▍| 208/221 [01:15<00:04,  2.74it/s][A
 95%|█████████▍| 209/221 [01:16<00:04,  2.88it/s][A
 95%|█████████▌| 210/221 [01:16<00:03,  2.94it/s][A
 95%|█████████▌| 211/221 [01:16<00:03,  2.85it/s][A
 96%|█████████▌| 212/221 [01:17<00:03,  2.89it/s][A
 96%|█████████▋| 213/221 [01:17<00:02,  3.01it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.71it/s][A
 97%|█████████▋| 215/221 [01:18<00:02,  2.64it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  2.74it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.70it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.74it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.82it/s][A
100%|█████████▉| 220/221 [01:20<00:00,  2.86it/s][A
100%|██████████| 221/221 [01:20<00:00,  2.86it/s][A100%|██████████| 221/221 [01:20<00:00,  2.75it/s]
[h264 @ 0x55d4caa3e280] mmco: unref short failure
[h264 @ 0x55d4caa3e280] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:34,  6.45it/s][A
  1%|          | 2/221 [00:00<00:59,  3.70it/s][A[h264 @ 0x5593540d59c0] mmco: unref short failure
[h264 @ 0x5593540d59c0] mmco: unref short failure

  1%|▏         | 3/221 [00:01<01:28,  2.46it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.28it/s][A
  2%|▏         | 5/221 [00:01<00:58,  3.66it/s][A
  3%|▎         | 6/221 [00:01<00:48,  4.40it/s][A
  3%|▎         | 7/221 [00:01<01:00,  3.51it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.19it/s][A[h264 @ 0x55d4ead6f0c0] mmco: unref short failure
[h264 @ 0x55d4ead6f0c0] mmco: unref short failure

  4%|▍         | 9/221 [00:02<01:05,  3.22it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.45it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.37it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.59it/s][A
  6%|▌         | 13/221 [00:04<01:30,  2.30it/s][A
  6%|▋         | 14/221 [00:04<01:14,  2.76it/s][A
  7%|▋         | 15/221 [00:04<01:15,  2.72it/s][A09/17/2024 04:31:04 - INFO - __main__ -   current idx 9W2zPcc4Kl8.5 from finetune_area returns wrong image/video, use 102071 instead.

  7%|▋         | 16/221 [00:05<01:21,  2.52it/s][A
  8%|▊         | 17/221 [00:05<01:32,  2.21it/s][A
  8%|▊         | 18/221 [00:06<01:26,  2.35it/s][A
  9%|▊         | 19/221 [00:06<01:11,  2.82it/s][A
  9%|▉         | 20/221 [00:06<01:07,  2.96it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.34it/s][A
 10%|▉         | 22/221 [00:07<00:53,  3.69it/s][A
 10%|█         | 23/221 [00:07<00:48,  4.09it/s][A
 11%|█         | 24/221 [00:07<00:50,  3.86it/s][A
 11%|█▏        | 25/221 [00:08<01:05,  3.00it/s][A
 12%|█▏        | 26/221 [00:08<01:10,  2.78it/s][A
 12%|█▏        | 27/221 [00:08<01:06,  2.91it/s][A
 13%|█▎        | 28/221 [00:09<01:11,  2.69it/s][A
 13%|█▎        | 29/221 [00:09<01:10,  2.72it/s][A[h264 @ 0x55d4d539ec80] mmco: unref short failure

 14%|█▎        | 30/221 [00:10<01:17,  2.45it/s][A
 14%|█▍        | 31/221 [00:10<01:17,  2.44it/s][A
 14%|█▍        | 32/221 [00:10<01:03,  2.99it/s][A
 15%|█▍        | 33/221 [00:11<01:01,  3.04it/s][A
 15%|█▌        | 34/221 [00:11<01:05,  2.86it/s][A
 16%|█▌        | 35/221 [00:11<01:04,  2.89it/s][A
 16%|█▋        | 36/221 [00:12<01:00,  3.06it/s][A
 17%|█▋        | 37/221 [00:12<00:54,  3.37it/s][A
 17%|█▋        | 38/221 [00:12<01:00,  3.01it/s][A
 18%|█▊        | 39/221 [00:12<00:51,  3.52it/s][A[h264 @ 0x559338493240] mmco: unref short failure

 18%|█▊        | 40/221 [00:13<00:54,  3.33it/s][A
 19%|█▊        | 41/221 [00:13<00:49,  3.66it/s][A
 19%|█▉        | 42/221 [00:13<00:44,  3.99it/s][A
 19%|█▉        | 43/221 [00:13<00:47,  3.72it/s][A
 20%|█▉        | 44/221 [00:14<00:51,  3.40it/s][A[h264 @ 0x55a025a38f40] mmco: unref short failure
[h264 @ 0x55a025a38f40] mmco: unref short failure

 20%|██        | 45/221 [00:14<00:56,  3.11it/s][A
 21%|██        | 46/221 [00:14<00:53,  3.25it/s][A
 21%|██▏       | 47/221 [00:15<00:46,  3.78it/s][A
 22%|██▏       | 48/221 [00:15<00:45,  3.83it/s][A
 22%|██▏       | 49/221 [00:15<00:43,  3.91it/s][A
 23%|██▎       | 50/221 [00:15<00:45,  3.77it/s][A
 23%|██▎       | 51/221 [00:16<00:45,  3.75it/s][A
 24%|██▎       | 52/221 [00:16<00:39,  4.30it/s][A
 24%|██▍       | 53/221 [00:16<00:35,  4.71it/s][A
 24%|██▍       | 54/221 [00:16<00:37,  4.41it/s][A
 25%|██▍       | 55/221 [00:16<00:39,  4.22it/s][A
 25%|██▌       | 56/221 [00:17<00:42,  3.90it/s][A
 26%|██▌       | 57/221 [00:17<00:42,  3.87it/s][A
 26%|██▌       | 58/221 [00:17<00:39,  4.10it/s][A
 27%|██▋       | 59/221 [00:18<00:39,  4.15it/s][A
 27%|██▋       | 60/221 [00:18<00:40,  4.00it/s][A
 28%|██▊       | 61/221 [00:18<00:39,  4.06it/s][A
 28%|██▊       | 62/221 [00:19<00:51,  3.08it/s][A
 29%|██▊       | 63/221 [00:19<00:45,  3.50it/s][A
 29%|██▉       | 64/221 [00:19<00:40,  3.84it/s][A
 29%|██▉       | 65/221 [00:19<00:38,  4.09it/s][A
 30%|██▉       | 66/221 [00:20<00:44,  3.44it/s][A
 30%|███       | 67/221 [00:20<00:59,  2.60it/s][A
 31%|███       | 68/221 [00:20<00:51,  2.99it/s][A
 31%|███       | 69/221 [00:21<00:52,  2.91it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.39it/s][A
 32%|███▏      | 71/221 [00:21<00:52,  2.86it/s][A
 33%|███▎      | 72/221 [00:22<00:56,  2.62it/s][A
 33%|███▎      | 73/221 [00:22<00:55,  2.69it/s][A
 33%|███▎      | 74/221 [00:22<00:51,  2.84it/s][A
 34%|███▍      | 75/221 [00:23<00:55,  2.63it/s][A
 34%|███▍      | 76/221 [00:23<00:49,  2.92it/s][A[h264 @ 0x55a0306ce840] mmco: unref short failure

 35%|███▍      | 77/221 [00:24<00:49,  2.91it/s][A
 35%|███▌      | 78/221 [00:24<00:54,  2.63it/s][A
 36%|███▌      | 79/221 [00:24<00:53,  2.66it/s][A
 36%|███▌      | 80/221 [00:25<00:49,  2.87it/s][A
 37%|███▋      | 81/221 [00:25<00:48,  2.89it/s][A
 37%|███▋      | 82/221 [00:25<00:47,  2.94it/s][A
 38%|███▊      | 83/221 [00:25<00:39,  3.46it/s][A
 38%|███▊      | 84/221 [00:26<00:51,  2.66it/s][A
 38%|███▊      | 85/221 [00:26<00:47,  2.86it/s][A
 39%|███▉      | 86/221 [00:27<00:51,  2.65it/s][A
 39%|███▉      | 87/221 [00:27<01:03,  2.10it/s][A
 40%|███▉      | 88/221 [00:28<00:54,  2.43it/s][A
 40%|████      | 89/221 [00:28<00:56,  2.35it/s][A
 41%|████      | 90/221 [00:29<00:56,  2.30it/s][A
 41%|████      | 91/221 [00:29<00:46,  2.80it/s][A[h264 @ 0x55d4ba900d80] mmco: unref short failure

 42%|████▏     | 92/221 [00:29<00:45,  2.84it/s][A
 42%|████▏     | 93/221 [00:30<00:55,  2.30it/s][A
 43%|████▎     | 94/221 [00:30<00:47,  2.68it/s][A
 43%|████▎     | 95/221 [00:31<00:53,  2.38it/s][A
 43%|████▎     | 96/221 [00:31<00:51,  2.43it/s][A
 44%|████▍     | 97/221 [00:31<00:46,  2.70it/s][A
 44%|████▍     | 98/221 [00:31<00:40,  3.05it/s][A[h264 @ 0x55933aa9d6c0] mmco: unref short failure
[h264 @ 0x55933aa9d6c0] mmco: unref short failure

 45%|████▍     | 99/221 [00:32<00:38,  3.19it/s][A
 45%|████▌     | 100/221 [00:32<00:31,  3.80it/s][A
 46%|████▌     | 101/221 [00:32<00:31,  3.77it/s][A
 46%|████▌     | 102/221 [00:33<00:32,  3.62it/s][A
 47%|████▋     | 103/221 [00:33<00:36,  3.24it/s][A
 47%|████▋     | 104/221 [00:33<00:34,  3.44it/s][A[h264 @ 0x555feac08340] mmco: unref short failure
[h264 @ 0x555feac08340] mmco: unref short failure
[h264 @ 0x555feac08340] mmco: unref short failure
[h264 @ 0x555feac08340] mmco: unref short failure

 48%|████▊     | 105/221 [00:33<00:32,  3.62it/s][A
 48%|████▊     | 106/221 [00:34<00:43,  2.66it/s][A
 48%|████▊     | 107/221 [00:34<00:38,  2.94it/s][A
 49%|████▉     | 108/221 [00:34<00:32,  3.51it/s][A
 49%|████▉     | 109/221 [00:35<00:34,  3.21it/s][A
 50%|████▉     | 110/221 [00:35<00:40,  2.77it/s][A
 50%|█████     | 111/221 [00:36<00:40,  2.70it/s][A
 51%|█████     | 112/221 [00:36<00:40,  2.69it/s][A
 51%|█████     | 113/221 [00:36<00:38,  2.82it/s][A
 52%|█████▏    | 114/221 [00:37<00:33,  3.18it/s][A
 52%|█████▏    | 115/221 [00:37<00:33,  3.18it/s][A
 52%|█████▏    | 116/221 [00:37<00:30,  3.48it/s][A
 53%|█████▎    | 117/221 [00:37<00:33,  3.13it/s][A
 53%|█████▎    | 118/221 [00:38<00:37,  2.75it/s][A
 54%|█████▍    | 119/221 [00:38<00:39,  2.58it/s][A
 54%|█████▍    | 120/221 [00:39<00:40,  2.49it/s][A
 55%|█████▍    | 121/221 [00:39<00:34,  2.91it/s][A
 55%|█████▌    | 122/221 [00:39<00:31,  3.19it/s][A
 56%|█████▌    | 123/221 [00:40<00:30,  3.23it/s][A
 56%|█████▌    | 124/221 [00:40<00:33,  2.89it/s][A
 57%|█████▋    | 125/221 [00:41<00:48,  1.98it/s][A
 57%|█████▋    | 126/221 [00:41<00:40,  2.35it/s][A
 57%|█████▋    | 127/221 [00:42<00:48,  1.92it/s][A
 58%|█████▊    | 128/221 [00:42<00:41,  2.24it/s][A
 58%|█████▊    | 129/221 [00:42<00:33,  2.71it/s][A
 59%|█████▉    | 130/221 [00:43<00:33,  2.74it/s][A
 59%|█████▉    | 131/221 [00:43<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:43<00:27,  3.20it/s][A
 60%|██████    | 133/221 [00:44<00:39,  2.23it/s][A
 61%|██████    | 134/221 [00:44<00:35,  2.45it/s][A
 61%|██████    | 135/221 [00:44<00:29,  2.91it/s][A
 62%|██████▏   | 136/221 [00:45<00:30,  2.82it/s][A
 62%|██████▏   | 137/221 [00:45<00:30,  2.72it/s][A
 62%|██████▏   | 138/221 [00:46<00:29,  2.79it/s][A
 63%|██████▎   | 139/221 [00:46<00:31,  2.63it/s][A
 63%|██████▎   | 140/221 [00:46<00:26,  3.04it/s][A[h264 @ 0x559335298cc0] mmco: unref short failure
[h264 @ 0x559335298cc0] mmco: unref short failure

 64%|██████▍   | 141/221 [00:46<00:26,  3.05it/s][A
 64%|██████▍   | 142/221 [00:47<00:23,  3.40it/s][A
 65%|██████▍   | 143/221 [00:47<00:26,  2.95it/s][A
 65%|██████▌   | 144/221 [00:47<00:25,  2.96it/s][A
 66%|██████▌   | 145/221 [00:48<00:24,  3.09it/s][A[h264 @ 0x55a0181af980] mmco: unref short failure
[h264 @ 0x55a0181af980] mmco: unref short failure

 66%|██████▌   | 146/221 [00:48<00:23,  3.19it/s][A
 67%|██████▋   | 147/221 [00:48<00:21,  3.38it/s][A
 67%|██████▋   | 148/221 [00:49<00:19,  3.68it/s][A
 67%|██████▋   | 149/221 [00:49<00:20,  3.55it/s][A[h264 @ 0x55d4b96e89c0] mmco: unref short failure

 68%|██████▊   | 150/221 [00:49<00:20,  3.42it/s][A[h264 @ 0x55a0181af980] mmco: unref short failure
[h264 @ 0x55a0181af980] mmco: unref short failure

 68%|██████▊   | 151/221 [00:50<00:34,  2.01it/s][A
 69%|██████▉   | 152/221 [00:51<00:41,  1.68it/s][A
 69%|██████▉   | 153/221 [00:51<00:32,  2.09it/s][A
 70%|██████▉   | 154/221 [00:51<00:28,  2.39it/s][A
 70%|███████   | 155/221 [00:52<00:29,  2.25it/s][A[h264 @ 0x55d4d28f2fc0] mmco: unref short failure
[h264 @ 0x55d4d28f2fc0] mmco: unref short failure

 71%|███████   | 156/221 [00:52<00:26,  2.44it/s][A
 71%|███████   | 157/221 [00:53<00:23,  2.68it/s][A[h264 @ 0x5593478f4bc0] mmco: unref short failure
[h264 @ 0x5593478f4bc0] mmco: unref short failure

 71%|███████▏  | 158/221 [00:53<00:23,  2.70it/s][A
 72%|███████▏  | 159/221 [00:53<00:20,  3.10it/s][A
 72%|███████▏  | 160/221 [00:53<00:16,  3.63it/s][A[h264 @ 0x555fd93f3f00] mmco: unref short failure
[h264 @ 0x555fd93f3f00] mmco: unref short failure

 73%|███████▎  | 161/221 [00:54<00:16,  3.63it/s][A
 73%|███████▎  | 162/221 [00:54<00:14,  4.11it/s][A
 74%|███████▍  | 163/221 [00:54<00:14,  4.02it/s][A
 74%|███████▍  | 164/221 [00:54<00:14,  4.01it/s][A
 75%|███████▍  | 165/221 [00:54<00:11,  4.80it/s][A
 75%|███████▌  | 166/221 [00:55<00:14,  3.87it/s][A
 76%|███████▌  | 167/221 [00:55<00:12,  4.32it/s][A
 76%|███████▌  | 168/221 [00:55<00:13,  3.91it/s][A
 76%|███████▋  | 169/221 [00:55<00:12,  4.17it/s][A[h264 @ 0x55d4bb7fd640] mmco: unref short failure

 77%|███████▋  | 170/221 [00:56<00:20,  2.48it/s][A
 77%|███████▋  | 171/221 [00:57<00:21,  2.28it/s][A
 78%|███████▊  | 172/221 [00:57<00:18,  2.70it/s][A
 78%|███████▊  | 173/221 [00:57<00:16,  2.88it/s][A
 79%|███████▊  | 174/221 [00:57<00:14,  3.19it/s][A
 79%|███████▉  | 175/221 [00:58<00:16,  2.76it/s][A[h264 @ 0x559353817d40] mmco: unref short failure

 80%|███████▉  | 176/221 [00:58<00:14,  3.01it/s][A
 80%|████████  | 177/221 [00:58<00:13,  3.36it/s][A
 81%|████████  | 178/221 [00:59<00:17,  2.52it/s][A[h264 @ 0x55a01cf792c0] mmco: unref short failure
[h264 @ 0x55a01cf792c0] mmco: unref short failure

 81%|████████  | 179/221 [00:59<00:15,  2.68it/s][A
 81%|████████▏ | 180/221 [01:00<00:12,  3.17it/s][A
 82%|████████▏ | 181/221 [01:00<00:13,  3.03it/s][A
 82%|████████▏ | 182/221 [01:00<00:11,  3.35it/s][A
 83%|████████▎ | 183/221 [01:01<00:12,  3.11it/s][A
 83%|████████▎ | 184/221 [01:01<00:12,  3.08it/s][A
 84%|████████▎ | 185/221 [01:01<00:10,  3.31it/s][A
 84%|████████▍ | 186/221 [01:02<00:12,  2.72it/s][A
 85%|████████▍ | 187/221 [01:02<00:11,  2.90it/s][A[h264 @ 0x559345a71200] mmco: unref short failure
[h264 @ 0x559345a71200] mmco: unref short failure

 85%|████████▌ | 188/221 [01:02<00:11,  2.93it/s][A
 86%|████████▌ | 189/221 [01:02<00:09,  3.33it/s][A
 86%|████████▌ | 190/221 [01:03<00:11,  2.76it/s][A
 86%|████████▋ | 191/221 [01:03<00:08,  3.48it/s][A
 87%|████████▋ | 192/221 [01:03<00:07,  3.77it/s][A
 87%|████████▋ | 193/221 [01:03<00:06,  4.21it/s][A
 88%|████████▊ | 194/221 [01:04<00:07,  3.66it/s][A
 88%|████████▊ | 195/221 [01:04<00:07,  3.68it/s][A
 89%|████████▊ | 196/221 [01:05<00:11,  2.21it/s][A
 89%|████████▉ | 197/221 [01:05<00:10,  2.37it/s][A
 90%|████████▉ | 198/221 [01:06<00:10,  2.18it/s][A
 90%|█████████ | 199/221 [01:06<00:08,  2.65it/s][A
 90%|█████████ | 200/221 [01:06<00:07,  2.82it/s][A
 91%|█████████ | 201/221 [01:07<00:06,  3.05it/s][A
 91%|█████████▏| 202/221 [01:07<00:05,  3.22it/s][A
 92%|█████████▏| 203/221 [01:07<00:05,  3.41it/s][A
 92%|█████████▏| 204/221 [01:07<00:04,  3.48it/s][A
 93%|█████████▎| 205/221 [01:08<00:04,  3.92it/s][A
 93%|█████████▎| 206/221 [01:08<00:05,  2.94it/s][A
 94%|█████████▎| 207/221 [01:08<00:04,  3.19it/s][A
 94%|█████████▍| 208/221 [01:09<00:03,  3.51it/s][A
 95%|█████████▍| 209/221 [01:09<00:03,  3.32it/s][A
 95%|█████████▌| 210/221 [01:09<00:02,  3.81it/s][A
 95%|█████████▌| 211/221 [01:09<00:02,  4.00it/s][A
 96%|█████████▌| 212/221 [01:10<00:02,  3.15it/s][A
 96%|█████████▋| 213/221 [01:10<00:02,  2.91it/s][A
 97%|█████████▋| 214/221 [01:11<00:02,  2.71it/s][A
 97%|█████████▋| 215/221 [01:11<00:02,  2.89it/s][A
 98%|█████████▊| 216/221 [01:11<00:01,  2.87it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  2.92it/s][A
 99%|█████████▊| 218/221 [01:12<00:00,  3.02it/s][A
 99%|█████████▉| 219/221 [01:12<00:00,  2.99it/s][A
100%|█████████▉| 220/221 [01:12<00:00,  3.33it/s][A
100%|██████████| 221/221 [01:13<00:00,  2.82it/s][A100%|██████████| 221/221 [01:13<00:00,  3.01it/s]
[h264 @ 0x5560005586c0] mmco: unref short failure
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'area_r1': 38.8, 'area_recall': '38.8/65.7/74.7', 'area_ravg': 59.7}
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'forward_r1': 37.2, 'forward_recall': '37.2/65.0/75.5', 'forward_ravg': 59.2}
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'area_video_r1': 39.3, 'area_video_recall': '39.3/67.6/77.5', 'area_video_ravg': 61.5}
09/17/2024 04:32:16 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 04:32:16 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'area_video_r1': 52.4, 'area_video_recall': '52.4/75.5/83.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/73.4/81.2', 'area_video_back_ravg': 67.5}
09/17/2024 04:32:16 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 04:32:16 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'video_r1': 36.1, 'video_recall': '36.1/64.3/73.9', 'video_ravg': 58.1}
09/17/2024 04:32:16 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 04:32:16 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 04:32:16 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 449--===========

09/17/2024 04:32:16 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/75.2/82.1', 'video_ravg': 69.9}
09/17/2024 04:32:16 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 04:32:16 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x55a00f263340] mmco: unref short failure
[h264 @ 0x55a00f263340] mmco: unref short failure
[h264 @ 0x55a00f263340] mmco: unref short failure
[h264 @ 0x55a00f263340] mmco: unref short failure
[h264 @ 0x55600c9eda40] mmco: unref short failure
[h264 @ 0x55600c9eda40] mmco: unref short failure
[h264 @ 0x55d4c7cbfdc0] mmco: unref short failure
[h264 @ 0x55d4c7cbfdc0] mmco: unref short failure
[h264 @ 0x556005186a80] mmco: unref short failure
[h264 @ 0x556005186a80] mmco: unref short failure
[h264 @ 0x555fdfdde6c0] mmco: unref short failure
[h264 @ 0x555fdfdde6c0] mmco: unref short failure
09/17/2024 04:33:00 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.007795698940753937, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3615787029266357, 'loss_ret%tv%ta--finetune_area/total_loss': 1.369374394416809}
 31%|███       | 450/1455 [4:52:43<48:26:35, 173.53s/it]09/17/2024 04:33:11 - INFO - __main__ -   current idx NplowkZTvc0.7 from finetune_area returns wrong image/video, use 47691 instead.
 31%|███       | 451/1455 [4:52:51<34:31:25, 123.79s/it] 31%|███       | 452/1455 [4:52:59<24:47:36, 88.99s/it] [h264 @ 0x55934c6b9940] mmco: unref short failure
[h264 @ 0x55934c6b9940] mmco: unref short failure
[h264 @ 0x55a02b5aebc0] mmco: unref short failure
 31%|███       | 453/1455 [4:53:07<18:01:15, 64.75s/it]09/17/2024 04:33:37 - INFO - __main__ -   current idx bgTXI7WKWoY.26 from finetune_area returns wrong image/video, use 131869 instead.
 31%|███       | 454/1455 [4:53:16<13:20:50, 48.00s/it] 31%|███▏      | 455/1455 [4:53:24<10:02:46, 36.17s/it] 31%|███▏      | 456/1455 [4:53:34<7:47:15, 28.06s/it] [h264 @ 0x55a03f6b6900] mmco: unref short failure
[h264 @ 0x55a03f6b6900] mmco: unref short failure
[h264 @ 0x55a01f9fff80] mmco: unref short failure
[h264 @ 0x55a01f9fff80] mmco: unref short failure
 31%|███▏      | 457/1455 [4:53:43<6:11:37, 22.34s/it][h264 @ 0x555fe3f7db80] mmco: unref short failure
[h264 @ 0x555fe3f7db80] mmco: unref short failure
[h264 @ 0x555fe5acb240] mmco: unref short failure
[h264 @ 0x555fe5acb240] mmco: unref short failure
[h264 @ 0x555fe5acb240] mmco: unref short failure
[h264 @ 0x555fe5acb240] mmco: unref short failure
[h264 @ 0x5593413ba040] mmco: unref short failure
[h264 @ 0x5593413ba040] mmco: unref short failure
 31%|███▏      | 458/1455 [4:53:52<5:06:54, 18.47s/it][h264 @ 0x55d4ce165e40] mmco: unref short failure
[h264 @ 0x55d4ce165e40] mmco: unref short failure
[h264 @ 0x55d4c9da6600] mmco: unref short failure
[h264 @ 0x55d4c9da6600] mmco: unref short failure
[h264 @ 0x555fe121b640] mmco: unref short failure
[h264 @ 0x555fe121b640] mmco: unref short failure
 32%|███▏      | 459/1455 [4:54:00<4:16:19, 15.44s/it][h264 @ 0x555fec234480] mmco: unref short failure
[h264 @ 0x555fec234480] mmco: unref short failure
 32%|███▏      | 460/1455 [4:54:09<3:43:29, 13.48s/it][h264 @ 0x555fdab80300] mmco: unref short failure
[h264 @ 0x555fdab80300] mmco: unref short failure
 32%|███▏      | 461/1455 [4:54:19<3:22:37, 12.23s/it] 32%|███▏      | 462/1455 [4:54:28<3:06:14, 11.25s/it][h264 @ 0x55d4b897c9c0] mmco: unref short failure
[h264 @ 0x55d4b897c9c0] mmco: unref short failure
 32%|███▏      | 463/1455 [4:54:36<2:53:14, 10.48s/it]09/17/2024 04:34:59 - INFO - __main__ -   current idx fTdLpt9yfqg.43 from finetune_area returns wrong image/video, use 48300 instead.
 32%|███▏      | 464/1455 [4:54:46<2:48:01, 10.17s/it][h264 @ 0x55a021f0f340] mmco: unref short failure
 32%|███▏      | 465/1455 [4:54:54<2:40:48,  9.75s/it][h264 @ 0x55a01750e3c0] mmco: unref short failure
[h264 @ 0x55a02fe2cbc0] mmco: unref short failure
[h264 @ 0x555fdb767c00] mmco: unref short failure
[h264 @ 0x55d4e2caf040] mmco: unref short failure
[h264 @ 0x55d4e2caf040] mmco: unref short failure
[h264 @ 0x55a01026e940] mmco: unref short failure
[h264 @ 0x559333ef3c80] mmco: unref short failure
[h264 @ 0x559333ef3c80] mmco: unref short failure
[h264 @ 0x559362dbb640] mmco: unref short failure
[h264 @ 0x55d4da806100] mmco: unref short failure
[h264 @ 0x55d4da806100] mmco: unref short failure
[h264 @ 0x55d4da806100] mmco: unref short failure
[h264 @ 0x55d4da806100] mmco: unref short failure
[h264 @ 0x559354be7c00] mmco: unref short failure
[h264 @ 0x555fe48101c0] mmco: unref short failure
[h264 @ 0x55d4cae040c0] mmco: unref short failure
[h264 @ 0x55d4cae040c0] mmco: unref short failure
09/17/2024 04:36:20 - INFO - __main__ -   current idx 14WUuya94QE.364 from finetune_area returns wrong image/video, use 37252 instead.
[h264 @ 0x55d4c87443c0] mmco: unref short failure
[h264 @ 0x555fe7e471c0] mmco: unref short failure
[h264 @ 0x555fe7e471c0] mmco: unref short failure
09/17/2024 04:36:24 - INFO - __main__ -   current idx Q_Kn3yzSJ5w.69 from finetune_area returns wrong image/video, use 104332 instead.
[h264 @ 0x55934d57aa00] mmco: unref short failure
[h264 @ 0x55934d57aa00] mmco: unref short failure
09/17/2024 04:36:27 - INFO - __main__ -   current idx Dqfrs5K971Y.40 from finetune_area returns wrong image/video, use 136410 instead.
[h264 @ 0x559333142100] mmco: unref short failure
[h264 @ 0x55d4d3677bc0] mmco: unref short failure
[h264 @ 0x55d4d3677bc0] mmco: unref short failure
[h264 @ 0x55a043bc6780] mmco: unref short failure
[h264 @ 0x55a043bc6780] mmco: unref short failure
[h264 @ 0x555fec24a080] mmco: unref short failure
[h264 @ 0x555fec24a080] mmco: unref short failure
[h264 @ 0x555fec24a080] mmco: unref short failure
[h264 @ 0x555fec24a080] mmco: unref short failure
[h264 @ 0x55933b608d00] mmco: unref short failure
[h264 @ 0x55933b608d00] mmco: unref short failure
[h264 @ 0x55933b608d00] mmco: unref short failure
[h264 @ 0x559343ea7080] mmco: unref short failure
09/17/2024 04:37:10 - INFO - __main__ -   current idx TXPcr1HyKkY.54 from finetune_area returns wrong image/video, use 95888 instead.
[h264 @ 0x555fee7d32c0] mmco: unref short failure
[h264 @ 0x555fee7d32c0] mmco: unref short failure
[h264 @ 0x555fe0ccc980] mmco: unref short failure
[h264 @ 0x555fe0ccc980] mmco: unref short failure
[h264 @ 0x555fe0ccc980] mmco: unref short failure
[h264 @ 0x555fe0ccc980] mmco: unref short failure
[h264 @ 0x55d4e6f0fb80] mmco: unref short failure
[h264 @ 0x559349321f80] mmco: unref short failure
[h264 @ 0x559349321f80] mmco: unref short failure
[h264 @ 0x559347dfac00] mmco: unref short failure
[h264 @ 0x555fd93e6d00] mmco: unref short failure
[h264 @ 0x555fd93e6d00] mmco: unref short failure
[h264 @ 0x55a021790a80] mmco: unref short failure
[h264 @ 0x55a021790a80] mmco: unref short failure
[h264 @ 0x55a021790a80] mmco: unref short failure
[h264 @ 0x55a021790a80] mmco: unref short failure
 32%|███▏      | 466/1455 [4:57:30<14:42:13, 53.52s/it][h264 @ 0x55d4e45503c0] mmco: unref short failure
[h264 @ 0x55d4e45503c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
[h264 @ 0x55933cbeb0c0] mmco: unref short failure
 32%|███▏      | 467/1455 [4:57:42<11:17:50, 41.16s/it][h264 @ 0x555ffd1e1580] mmco: unref short failure
[h264 @ 0x555ffd1e1580] mmco: unref short failure
 32%|███▏      | 468/1455 [4:57:58<9:10:02, 33.44s/it] [h264 @ 0x556003834500] mmco: unref short failure
[h264 @ 0x556003834500] mmco: unref short failure
[h264 @ 0x559333982780] mmco: unref short failure
[h264 @ 0x559333982780] mmco: unref short failure
[h264 @ 0x555fdad213c0] mmco: unref short failure
[h264 @ 0x55d4e9399c00] mmco: unref short failure
[h264 @ 0x55934aeb1a40] mmco: unref short failure
[h264 @ 0x55934aeb1a40] mmco: unref short failure
 32%|███▏      | 469/1455 [4:58:07<7:08:15, 26.06s/it][h264 @ 0x555fe0f3a100] mmco: unref short failure
[h264 @ 0x55a02303a200] mmco: unref short failure
[h264 @ 0x55a02303a200] mmco: unref short failure
09/17/2024 04:38:36 - INFO - __main__ -   current idx Iuir8LDIDfY.45 from finetune_area returns wrong image/video, use 99664 instead.
09/17/2024 04:38:38 - INFO - __main__ -   current idx eerUbqV6Md4.168 from finetune_area returns wrong image/video, use 68452 instead.
 32%|███▏      | 470/1455 [4:58:18<5:56:51, 21.74s/it][h264 @ 0x559355b29700] mmco: unref short failure
[h264 @ 0x559355b29700] mmco: unref short failure
[h264 @ 0x55600a816f80] mmco: unref short failure
[h264 @ 0x55600a816f80] mmco: unref short failure
 32%|███▏      | 471/1455 [4:58:31<5:13:39, 19.13s/it][h264 @ 0x5560050ca440] mmco: unref short failure
[h264 @ 0x55a02ba41880] mmco: unref short failure
[h264 @ 0x55a02ba41880] mmco: unref short failure
09/17/2024 04:39:06 - INFO - __main__ -   current idx siiaopJ0dTo.6 from finetune_area returns wrong image/video, use 62941 instead.
[h264 @ 0x55a020480ec0] mmco: unref short failure
[h264 @ 0x55a020480ec0] mmco: unref short failure
[h264 @ 0x55d4bdf8b180] mmco: unref short failure
[h264 @ 0x55d4bdf8b180] mmco: unref short failure
 32%|███▏      | 472/1455 [4:58:55<5:35:35, 20.48s/it][h264 @ 0x55d4edcc48c0] mmco: unref short failure
[h264 @ 0x55d4edcc48c0] mmco: unref short failure
[h264 @ 0x55d4edcc48c0] mmco: unref short failure
[h264 @ 0x55d4edcc48c0] mmco: unref short failure
 33%|███▎      | 473/1455 [4:59:04<4:38:31, 17.02s/it][h264 @ 0x55933ed89fc0] mmco: unref short failure
[h264 @ 0x55933ed89fc0] mmco: unref short failure
[h264 @ 0x55933c114cc0] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x55a033b435c0] mmco: unref short failure
[h264 @ 0x55a033b435c0] mmco: unref short failure
[h264 @ 0x55a013db5a40] mmco: unref short failure
[h264 @ 0x55a0223b5480] mmco: unref short failure
[h264 @ 0x55a02142b9c0] mmco: unref short failure
[h264 @ 0x55a02142b9c0] mmco: unref short failure
[h264 @ 0x55a033b51d00] mmco: unref short failure
[h264 @ 0x555fe5f8eac0] mmco: unref short failure
[h264 @ 0x555fe5f8eac0] mmco: unref short failure
[h264 @ 0x559364658600] mmco: unref short failure
[h264 @ 0x559364658600] mmco: unref short failure
[h264 @ 0x55a0113fcec0] mmco: unref short failure
[h264 @ 0x55a0113fcec0] mmco: unref short failure
[h264 @ 0x55a01f9e1040] mmco: unref short failure
[h264 @ 0x55d4d0176a00] mmco: unref short failure
[h264 @ 0x55d4d0176a00] mmco: unref short failure
09/17/2024 04:40:53 - INFO - __main__ -   current idx TWvBvDgrB6I.128 from finetune_area returns wrong image/video, use 15480 instead.
09/17/2024 04:41:03 - INFO - __main__ -   current idx WwLGb5RDcG0.21 from finetune_area returns wrong image/video, use 116684 instead.
[h264 @ 0x555fdbc50c40] mmco: unref short failure
[h264 @ 0x555fdbc50c40] mmco: unref short failure
[h264 @ 0x555ff99beb80] mmco: unref short failure
09/17/2024 04:41:15 - INFO - __main__ -   current idx hCH4rs-KEeA.16 from finetune_area returns wrong image/video, use 8544 instead.
[h264 @ 0x555ff220d380] mmco: unref short failure
[h264 @ 0x555ff220d380] mmco: unref short failure
[h264 @ 0x55d4bc93b5c0] mmco: unref short failure
[h264 @ 0x556002130ec0] mmco: unref short failure
[h264 @ 0x556002130ec0] mmco: unref short failure
[h264 @ 0x55a0386e6740] mmco: unref short failure
[h264 @ 0x55a0329737c0] mmco: unref short failure
[h264 @ 0x55a0329737c0] mmco: unref short failure
[h264 @ 0x55d4bf748180] mmco: unref short failure
[h264 @ 0x559346809fc0] mmco: unref short failure
[h264 @ 0x55d4e9809440] mmco: unref short failure
[h264 @ 0x555fdbefb700] mmco: unref short failure
[h264 @ 0x555fe48c5d80] mmco: unref short failure
[h264 @ 0x555fe48c5d80] mmco: unref short failure
[h264 @ 0x555fdbefb700] mmco: unref short failure
[h264 @ 0x55934f04c880] mmco: unref short failure
[h264 @ 0x55934f04c880] mmco: unref short failure
[h264 @ 0x5593351def80] mmco: unref short failure
[h264 @ 0x55d4ba053940] mmco: unref short failure
[h264 @ 0x55a034b92440] mmco: unref short failure
[h264 @ 0x55a034b92440] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x559349321f80] mmco: unref short failure
[h264 @ 0x55d4bdc393c0] mmco: unref short failure
[h264 @ 0x55d4bdc393c0] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x55d4dde14b00] mmco: unref short failure
[h264 @ 0x55d4dde14b00] mmco: unref short failure
 33%|███▎      | 474/1455 [5:02:45<21:18:20, 78.19s/it] 33%|███▎      | 475/1455 [5:02:53<15:33:59, 57.18s/it][h264 @ 0x55935f314400] mmco: unref short failure
[h264 @ 0x55d4caa30900] mmco: unref short failure
[h264 @ 0x55d4c175ca40] mmco: unref short failure
 33%|███▎      | 476/1455 [5:03:02<11:36:30, 42.69s/it][h264 @ 0x55933da35100] mmco: unref short failure
[h264 @ 0x55933da35100] mmco: unref short failure
 33%|███▎      | 477/1455 [5:03:11<8:52:20, 32.66s/it] [h264 @ 0x55936630d640] mmco: unref short failure
[h264 @ 0x55d4e8de7180] mmco: unref short failure
[h264 @ 0x55d4e8de7180] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x555ff8361900] mmco: unref short failure
[h264 @ 0x55a017cdd540] mmco: unref short failure
 33%|███▎      | 478/1455 [5:03:20<6:53:24, 25.39s/it][h264 @ 0x555fdab80300] mmco: unref short failure
[h264 @ 0x55a019db7b40] mmco: unref short failure
[h264 @ 0x55a019db7b40] mmco: unref short failure
 33%|███▎      | 479/1455 [5:03:29<5:33:29, 20.50s/it][h264 @ 0x555fdab80300] mmco: unref short failure
[h264 @ 0x55a0116b4d00] mmco: unref short failure
[h264 @ 0x55d4ba5ea0c0] mmco: unref short failure
09/17/2024 04:44:06 - INFO - __main__ -   current idx -bLVFJgtJwI.0 from finetune_area returns wrong image/video, use 73241 instead.
 33%|███▎      | 480/1455 [5:03:51<5:44:10, 21.18s/it][h264 @ 0x55d4d2e28540] mmco: unref short failure
[h264 @ 0x55d4d2e28540] mmco: unref short failure
[h264 @ 0x55600a2741c0] mmco: unref short failure
[h264 @ 0x55600a2741c0] mmco: unref short failure
[h264 @ 0x55933e68c440] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
 33%|███▎      | 481/1455 [5:04:00<4:44:39, 17.54s/it][h264 @ 0x55600c9eda40] mmco: unref short failure
[h264 @ 0x55600c9eda40] mmco: unref short failure
[h264 @ 0x55d4bfcd5ec0] mmco: unref short failure
[h264 @ 0x55d4bdc393c0] mmco: unref short failure
[h264 @ 0x55d4bdc393c0] mmco: unref short failure
[h264 @ 0x55d4bdc393c0] mmco: unref short failure
[h264 @ 0x55d4c00bf900] mmco: unref short failure
[h264 @ 0x55d4c00bf900] mmco: unref short failure
[h264 @ 0x55d4d5692b00] mmco: unref short failure
[h264 @ 0x55d4d5692b00] mmco: unref short failure
[h264 @ 0x55d4c00bf900] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x559364dfd400] mmco: unref short failure
[h264 @ 0x559364dfd400] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x5593408f5380] mmco: unref short failure
[h264 @ 0x555ff17c8740] mmco: unref short failure
[h264 @ 0x55d4bd303440] mmco: unref short failure
[h264 @ 0x55d4bd303440] mmco: unref short failure
09/17/2024 04:45:08 - INFO - __main__ -   current idx gcVsZE1_ynw.15 from finetune_area returns wrong image/video, use 97424 instead.
[h264 @ 0x55a0386e6740] mmco: unref short failure
[h264 @ 0x55a0386e6740] mmco: unref short failure
[h264 @ 0x55a00f2e4480] mmco: unref short failure
[h264 @ 0x559368faab00] mmco: unref short failure
[h264 @ 0x559368faab00] mmco: unref short failure
[h264 @ 0x55a048816a00] mmco: unref short failure
[h264 @ 0x555fe19240c0] mmco: unref short failure
[h264 @ 0x55d4c1627cc0] mmco: unref short failure
[h264 @ 0x55d4c1627cc0] mmco: unref short failure
[h264 @ 0x55a046d18880] mmco: unref short failure
[h264 @ 0x55934aaf2380] mmco: unref short failure
[h264 @ 0x55933ae8e200] mmco: unref short failure
[h264 @ 0x55a040c9bb80] mmco: unref short failure
[h264 @ 0x55a0275a4500] mmco: unref short failure
[h264 @ 0x55a0275a4500] mmco: unref short failure
[h264 @ 0x55934c93a6c0] mmco: unref short failure
[h264 @ 0x55934c93a6c0] mmco: unref short failure
[h264 @ 0x55934c93a6c0] mmco: unref short failure
[h264 @ 0x55934c93a6c0] mmco: unref short failure
[h264 @ 0x555fe343e0c0] mmco: unref short failure
[h264 @ 0x555fe343e0c0] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
[h264 @ 0x55a0305bf980] mmco: unref short failure
[h264 @ 0x55a0305bf980] mmco: unref short failure
[h264 @ 0x555ff4aa3800] mmco: unref short failure
[h264 @ 0x555fe0974340] mmco: unref short failure
[h264 @ 0x55d4bf611b40] mmco: unref short failure
[h264 @ 0x55d4c6d3f640] mmco: unref short failure
[h264 @ 0x55d4cd1749c0] mmco: unref short failure
[h264 @ 0x55d4cd1749c0] mmco: unref short failure
[h264 @ 0x556003457300] mmco: unref short failure
[h264 @ 0x55a035ada680] mmco: unref short failure
[h264 @ 0x559360650ec0] mmco: unref short failure
[h264 @ 0x555fee7d32c0] mmco: unref short failure
[h264 @ 0x555fee7d32c0] mmco: unref short failure
[h264 @ 0x55a025281740] mmco: unref short failure
[h264 @ 0x55a025281740] mmco: unref short failure
[h264 @ 0x555fdac9c200] mmco: unref short failure
[h264 @ 0x555fdac9c200] mmco: unref short failure
 33%|███▎      | 482/1455 [5:07:42<21:18:39, 78.85s/it][h264 @ 0x559358e16b40] mmco: unref short failure
[h264 @ 0x559358e16b40] mmco: unref short failure
[h264 @ 0x55a0291a13c0] mmco: unref short failure
[h264 @ 0x55a0291a13c0] mmco: unref short failure
[h264 @ 0x55935534bec0] mmco: unref short failure
[h264 @ 0x55935534bec0] mmco: unref short failure
 33%|███▎      | 483/1455 [5:07:51<15:36:37, 57.82s/it] 33%|███▎      | 484/1455 [5:08:00<11:38:51, 43.18s/it][h264 @ 0x55a017cc5ec0] mmco: unref short failure
[h264 @ 0x55a017cc5ec0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
 33%|███▎      | 485/1455 [5:08:09<8:50:12, 32.80s/it] [h264 @ 0x559334d0b340] mmco: unref short failure
[h264 @ 0x559334d0b340] mmco: unref short failure
 33%|███▎      | 486/1455 [5:08:17<6:53:11, 25.58s/it][h264 @ 0x55d4dd7d8480] mmco: unref short failure
[h264 @ 0x55d4dd7d8480] mmco: unref short failure
[h264 @ 0x5593546c09c0] mmco: unref short failure
 33%|███▎      | 487/1455 [5:08:27<5:33:50, 20.69s/it][h264 @ 0x555fe8578540] mmco: unref short failure
[h264 @ 0x555fe8578540] mmco: unref short failure
[h264 @ 0x55a0127a4780] mmco: unref short failure
[h264 @ 0x55a0127a4780] mmco: unref short failure
[h264 @ 0x55a036de3f40] mmco: unref short failure
[h264 @ 0x55a036de3f40] mmco: unref short failure
[h264 @ 0x55934caa8e00] mmco: unref short failure
 34%|███▎      | 488/1455 [5:08:47<5:32:40, 20.64s/it] 34%|███▎      | 489/1455 [5:08:57<4:37:53, 17.26s/it][h264 @ 0x55d4e1586a00] mmco: unref short failure
[h264 @ 0x55d4c22bb600] mmco: unref short failure
[h264 @ 0x55a011c9b300] mmco: unref short failure
[h264 @ 0x55d4c9ad0bc0] mmco: unref short failure
[h264 @ 0x55d4c9ad0bc0] mmco: unref short failure
[h264 @ 0x55d4dbcbc700] mmco: unref short failure
[h264 @ 0x55d4e398eac0] mmco: unref short failure
[h264 @ 0x55d4e398eac0] mmco: unref short failure
[h264 @ 0x55a022cb7300] mmco: unref short failure
[h264 @ 0x55a022cb7300] mmco: unref short failure
09/17/2024 04:49:41 - INFO - __main__ -   current idx E_j3lYgDR7U.12 from finetune_area returns wrong image/video, use 44808 instead.
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x55d4ca6cb600] mmco: unref short failure
[h264 @ 0x55d4ca6cb600] mmco: unref short failure
09/17/2024 04:50:15 - INFO - __main__ -   current idx c36bv6MjqLE.0 from finetune_area returns wrong image/video, use 78885 instead.
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x55d4d7379b80] mmco: unref short failure
[h264 @ 0x55d4d28c6c00] mmco: unref short failure
[h264 @ 0x55934caa8e00] mmco: unref short failure
[h264 @ 0x55934caa8e00] mmco: unref short failure
[h264 @ 0x55933873f380] mmco: unref short failure
09/17/2024 04:50:39 - INFO - __main__ -   current idx h0wIcmfgWWQ.54 from finetune_area returns wrong image/video, use 72699 instead.
[h264 @ 0x559341529c80] mmco: unref short failure
[h264 @ 0x55a0116b4d00] mmco: unref short failure
[h264 @ 0x55a0116b4d00] mmco: unref short failure
[h264 @ 0x55a0116b4d00] mmco: unref short failure
[h264 @ 0x55a0116b4d00] mmco: unref short failure
[h264 @ 0x55a015ec4040] mmco: unref short failure
[h264 @ 0x55d4d7ff7cc0] mmco: unref short failure
[h264 @ 0x55d4d7ff7cc0] mmco: unref short failure
[h264 @ 0x555fe7543e00] mmco: unref short failure
[h264 @ 0x555fe7543e00] mmco: unref short failure
[h264 @ 0x55a02bfbe340] mmco: unref short failure
[h264 @ 0x55a02bfbe340] mmco: unref short failure
[h264 @ 0x5593448423c0] mmco: unref short failure
[h264 @ 0x5593448423c0] mmco: unref short failure
[h264 @ 0x55a03bdc6f80] mmco: unref short failure
[h264 @ 0x55a01b832f00] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x55d4c2bbf140] mmco: unref short failure
[h264 @ 0x55a016192a40] mmco: unref short failure
[h264 @ 0x55a016192a40] mmco: unref short failure
[h264 @ 0x55a02a0a0b00] mmco: unref short failure
[h264 @ 0x55a02a0a0b00] mmco: unref short failure
[h264 @ 0x555ff093ec00] mmco: unref short failure
[h264 @ 0x555ff093ec00] mmco: unref short failure
[h264 @ 0x555fdf920f80] mmco: unref short failure
[h264 @ 0x555fdf920f80] mmco: unref short failure
[h264 @ 0x55d4cc2574c0] mmco: unref short failure
[h264 @ 0x55d4cc2574c0] mmco: unref short failure
[h264 @ 0x55d4ca668680] mmco: unref short failure
[h264 @ 0x55d4ca668680] mmco: unref short failure
[h264 @ 0x55d4ca668680] mmco: unref short failure
[h264 @ 0x55d4ca668680] mmco: unref short failure
[h264 @ 0x555fd94e63c0] mmco: unref short failure
[h264 @ 0x555fd94e63c0] mmco: unref short failure
[h264 @ 0x555fe0bd3800] mmco: unref short failure
[h264 @ 0x555fe0bd3800] mmco: unref short failure
[h264 @ 0x55a036de3f40] mmco: unref short failure
[h264 @ 0x555fecdc1c00] mmco: unref short failure
 34%|███▎      | 490/1455 [5:12:39<21:04:46, 78.64s/it][h264 @ 0x55a01fb2aec0] mmco: unref short failure
[h264 @ 0x55a01fb2aec0] mmco: unref short failure
[h264 @ 0x55a01fb2aec0] mmco: unref short failure
[h264 @ 0x55a01fb2aec0] mmco: unref short failure
 34%|███▎      | 491/1455 [5:12:47<15:25:33, 57.61s/it][h264 @ 0x555feb4a1600] mmco: unref short failure
[h264 @ 0x55936464f540] mmco: unref short failure
[h264 @ 0x55936464f540] mmco: unref short failure
 34%|███▍      | 492/1455 [5:12:58<11:38:46, 43.54s/it][h264 @ 0x555fe0c5e280] mmco: unref short failure
[h264 @ 0x555fe0c5e280] mmco: unref short failure
 34%|███▍      | 493/1455 [5:13:08<8:57:46, 33.54s/it] [h264 @ 0x55a0143dc280] mmco: unref short failure
 34%|███▍      | 494/1455 [5:13:16<6:56:28, 26.00s/it][h264 @ 0x555ff06984c0] mmco: unref short failure
[h264 @ 0x555ff06984c0] mmco: unref short failure
[h264 @ 0x555ff06984c0] mmco: unref short failure
[h264 @ 0x555ff06984c0] mmco: unref short failure
 34%|███▍      | 495/1455 [5:13:26<5:36:52, 21.05s/it]09/17/2024 04:53:49 - INFO - __main__ -   current idx SguG4-Tr-F8.13 from finetune_area returns wrong image/video, use 120289 instead.
 34%|███▍      | 496/1455 [5:13:35<4:39:33, 17.49s/it][h264 @ 0x556003457300] mmco: unref short failure
[h264 @ 0x555ff254dbc0] mmco: unref short failure
[h264 @ 0x555ff254dbc0] mmco: unref short failure
 34%|███▍      | 497/1455 [5:13:44<3:59:13, 14.98s/it][h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x55d4dba585c0] mmco: unref short failure
09/17/2024 04:54:14 - INFO - __main__ -   current idx c-OFuj2DzPc.20 from finetune_area returns wrong image/video, use 4938 instead.
[h264 @ 0x559354da4240] mmco: unref short failure
[h264 @ 0x559354da4240] mmco: unref short failure
[h264 @ 0x559354da4240] mmco: unref short failure
[h264 @ 0x559354da4240] mmco: unref short failure
[h264 @ 0x559354da4240] mmco: unref short failure
[h264 @ 0x555fdac8d700] mmco: unref short failure
[h264 @ 0x555fdac8d700] mmco: unref short failure
[h264 @ 0x55d4b94efb00] mmco: unref short failure
[h264 @ 0x555fe754e680] mmco: unref short failure
[h264 @ 0x555feb5b0e80] mmco: unref short failure
[h264 @ 0x555feb5b0e80] mmco: unref short failure
[h264 @ 0x55d4e398eac0] mmco: unref short failure
[h264 @ 0x55d4e398eac0] mmco: unref short failure
[h264 @ 0x55d4ba2e8b80] mmco: unref short failure
[h264 @ 0x55d4dba585c0] mmco: unref short failure
[h264 @ 0x55d4b92a7340] mmco: unref short failure
[h264 @ 0x55d4b92a7340] mmco: unref short failure
[h264 @ 0x55a018312d40] mmco: unref short failure
[h264 @ 0x55a018312d40] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x559339c47f80] mmco: unref short failure
[h264 @ 0x55d4dba585c0] mmco: unref short failure
[h264 @ 0x55d4dba585c0] mmco: unref short failure
[h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55a02a0280c0] mmco: unref short failure
[h264 @ 0x55a02a0280c0] mmco: unref short failure
[h264 @ 0x55a05c26aa40] mmco: unref short failure
[h264 @ 0x55a018312d40] mmco: unref short failure
[h264 @ 0x55a018312d40] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x55a0196f6fc0] mmco: unref short failure
[h264 @ 0x55a0196f6fc0] mmco: unref short failure
[h264 @ 0x55a01296df80] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x55933af66100] mmco: unref short failure
[h264 @ 0x55933af66100] mmco: unref short failure
[h264 @ 0x55933af66100] mmco: unref short failure
[h264 @ 0x55933af66100] mmco: unref short failure
[h264 @ 0x55a00fd02a40] mmco: unref short failure
[h264 @ 0x55a0422e6bc0] mmco: unref short failure
[h264 @ 0x559344beb680] mmco: unref short failure
[h264 @ 0x559344beb680] mmco: unref short failure
[h264 @ 0x55934acb8840] mmco: unref short failure
[h264 @ 0x555fe6daac40] mmco: unref short failure
[h264 @ 0x555fe6daac40] mmco: unref short failure
[h264 @ 0x555fe2ed5fc0] mmco: unref short failure
[h264 @ 0x555fe2ed5fc0] mmco: unref short failure
[h264 @ 0x55a03b185f80] mmco: unref short failure
[h264 @ 0x555fedfa06c0] mmco: unref short failure
[h264 @ 0x55a029766840] mmco: unref short failure
[h264 @ 0x55a029766840] mmco: unref short failure
[h264 @ 0x55a026a2f740] mmco: unref short failure
[h264 @ 0x55a026a2f740] mmco: unref short failure
[h264 @ 0x55a026a2f740] mmco: unref short failure
[h264 @ 0x55a026a2f740] mmco: unref short failure
09/17/2024 04:56:36 - INFO - __main__ -   current idx fQszS3V8sxI.1 from finetune_area returns wrong image/video, use 80141 instead.
[h264 @ 0x55d4e6cd1d00] mmco: unref short failure
[h264 @ 0x55a05c26aa40] mmco: unref short failure
[h264 @ 0x55a05c26aa40] mmco: unref short failure
[h264 @ 0x55934d148a40] mmco: unref short failure
[h264 @ 0x555ffd131740] mmco: unref short failure
[h264 @ 0x555ffd131740] mmco: unref short failure
[h264 @ 0x55a0292a60c0] mmco: unref short failure
[h264 @ 0x55a0292a60c0] mmco: unref short failure
[h264 @ 0x55a017f3a0c0] mmco: unref short failure
[h264 @ 0x5593689ecb80] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
09/17/2024 04:57:16 - INFO - __main__ -   current idx 6wN4IYAiKIg.50 from finetune_area returns wrong image/video, use 16443 instead.
[h264 @ 0x555fe7f290c0] mmco: unref short failure
[h264 @ 0x555fe7f290c0] mmco: unref short failure
[h264 @ 0x555fe7f290c0] mmco: unref short failure
[h264 @ 0x555fe7f290c0] mmco: unref short failure
[h264 @ 0x55d4c7e17d40] mmco: unref short failure
[h264 @ 0x55d4c7e17d40] mmco: unref short failure
[h264 @ 0x559356806c40] mmco: unref short failure
[h264 @ 0x559356806c40] mmco: unref short failure
[h264 @ 0x559346902440] mmco: unref short failure
[h264 @ 0x559346902440] mmco: unref short failure
[h264 @ 0x559346902440] mmco: unref short failure
[h264 @ 0x559346902440] mmco: unref short failure
[h264 @ 0x55d4d96d3c80] mmco: unref short failure
[h264 @ 0x55a01dec3100] mmco: unref short failure
[h264 @ 0x55a01dec3100] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555ff90ff480] mmco: unref short failure
[h264 @ 0x555ff90ff480] mmco: unref short failure
[h264 @ 0x555fe7952e80] mmco: unref short failure
[h264 @ 0x55d4ddaaaa00] mmco: unref short failure
09/17/2024 04:57:47 - INFO - __main__ -   current idx OTXYBNGzWpQ.110 from finetune_area returns wrong image/video, use 48305 instead.
 34%|███▍      | 498/1455 [5:17:28<20:38:21, 77.64s/it][h264 @ 0x55d4e6cd1d00] mmco: unref short failure
[h264 @ 0x55d4e6cd1d00] mmco: unref short failure
 34%|███▍      | 499/1455 [5:17:37<15:08:17, 57.01s/it]09/17/2024 04:57:59 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 04:57:59 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff71debc0] mmco: unref short failure
[h264 @ 0x555ff71debc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff71debc0] mmco: unref short failure
[h264 @ 0x555ff71debc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a0158aad40] mmco: unref short failure
[h264 @ 0x55a0158aad40] mmco: unref short failure
[h264 @ 0x55933f371c80] mmco: unref short failure
[h264 @ 0x55d4dc94bd00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a00e75cc00] mmco: unref short failure
[h264 @ 0x55a00e75cc00] mmco: unref short failure
[h264 @ 0x55935a436480] mmco: unref short failure
[h264 @ 0x555fe2dde140] mmco: unref short failure
[h264 @ 0x55d4d498c840] mmco: unref short failure
[h264 @ 0x555fdd6f9400] mmco: unref short failure
[h264 @ 0x555fdd6f9400] mmco: unref short failure
[h264 @ 0x55a021341400] mmco: unref short failure
[h264 @ 0x55a021341400] mmco: unref short failure
[h264 @ 0x55d4ddaaaa00] mmco: unref short failure
[h264 @ 0x55a010cebbc0] mmco: unref short failure
[h264 @ 0x55a010cebbc0] mmco: unref short failure
09/17/2024 04:59:38 - INFO - __main__ -   current idx 3UV1kgubC10.7 from finetune_area returns wrong image/video, use 52599 instead.
[h264 @ 0x5593572b89c0] mmco: unref short failure
[h264 @ 0x5593572b89c0] mmco: unref short failure
[h264 @ 0x55a0333af200] mmco: unref short failure
[h264 @ 0x559347d15c00] mmco: unref short failure
[h264 @ 0x559347d15c00] mmco: unref short failure
[h264 @ 0x559349bb3440] mmco: unref short failure
[h264 @ 0x559349bb3440] mmco: unref short failure
[h264 @ 0x559339acf800] mmco: unref short failure
[h264 @ 0x559339acf800] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x55d4b7858900] mmco: unref short failure
[h264 @ 0x55a03f6b6940] mmco: unref short failure
[h264 @ 0x55a03f6b6940] mmco: unref short failure
[h264 @ 0x55934f5d9dc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:45,  1.33it/s][A
  1%|          | 2/221 [00:01<02:16,  1.60it/s][A
  1%|▏         | 3/221 [00:01<01:41,  2.15it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.79it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.36it/s][A
  3%|▎         | 7/221 [00:02<00:55,  3.85it/s][A
  4%|▎         | 8/221 [00:02<01:09,  3.05it/s][A
  4%|▍         | 9/221 [00:03<01:15,  2.82it/s][A
  5%|▍         | 10/221 [00:03<01:34,  2.23it/s][A
  5%|▍         | 11/221 [00:04<01:17,  2.71it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.65it/s][A
  6%|▌         | 13/221 [00:04<01:12,  2.87it/s][A
  6%|▋         | 14/221 [00:05<02:02,  1.69it/s][A
  7%|▋         | 15/221 [00:06<01:37,  2.12it/s][A
  7%|▋         | 16/221 [00:06<01:34,  2.17it/s][A
  8%|▊         | 17/221 [00:06<01:22,  2.48it/s][A
  8%|▊         | 18/221 [00:07<01:21,  2.50it/s][A
  9%|▊         | 19/221 [00:07<01:06,  3.05it/s][A
  9%|▉         | 20/221 [00:07<00:58,  3.45it/s][A
 10%|▉         | 21/221 [00:07<00:53,  3.73it/s][A
 10%|▉         | 22/221 [00:08<00:53,  3.71it/s][A
 11%|█         | 24/221 [00:08<00:39,  4.95it/s][A
 11%|█▏        | 25/221 [00:08<00:40,  4.83it/s][A
 12%|█▏        | 26/221 [00:08<00:46,  4.23it/s][A
 12%|█▏        | 27/221 [00:09<00:44,  4.32it/s][A
 13%|█▎        | 28/221 [00:09<01:03,  3.05it/s][A
 13%|█▎        | 29/221 [00:09<00:50,  3.79it/s][A[h264 @ 0x55a017daea80] mmco: unref short failure
[h264 @ 0x55a017daea80] mmco: unref short failure

 14%|█▎        | 30/221 [00:09<00:50,  3.75it/s][A
 14%|█▍        | 31/221 [00:10<00:53,  3.56it/s][A
 14%|█▍        | 32/221 [00:10<00:49,  3.80it/s][A
 15%|█▍        | 33/221 [00:10<00:52,  3.60it/s][A
 15%|█▌        | 34/221 [00:11<00:48,  3.86it/s][A[h264 @ 0x555ff81e2080] mmco: unref short failure
[h264 @ 0x555ff81e2080] mmco: unref short failure

 16%|█▌        | 35/221 [00:11<00:45,  4.07it/s][A[h264 @ 0x555ff81e2080] mmco: unref short failure
[h264 @ 0x555ff81e2080] mmco: unref short failure
[h264 @ 0x555ff7de09c0] mmco: unref short failure

 16%|█▋        | 36/221 [00:11<00:52,  3.51it/s][A
 17%|█▋        | 37/221 [00:12<01:13,  2.50it/s][A
 17%|█▋        | 38/221 [00:12<01:17,  2.35it/s][A
 18%|█▊        | 39/221 [00:13<01:08,  2.66it/s][A
 18%|█▊        | 40/221 [00:13<01:09,  2.61it/s][A
 19%|█▊        | 41/221 [00:13<01:03,  2.85it/s][A
 19%|█▉        | 42/221 [00:14<01:11,  2.51it/s][A
 19%|█▉        | 43/221 [00:14<00:56,  3.15it/s][A
 20%|█▉        | 44/221 [00:14<00:45,  3.92it/s][A
 20%|██        | 45/221 [00:15<01:15,  2.33it/s][A
 21%|██        | 46/221 [00:15<01:09,  2.51it/s][A
 21%|██▏       | 47/221 [00:16<01:15,  2.30it/s][A
 22%|██▏       | 48/221 [00:16<01:01,  2.83it/s][A
 22%|██▏       | 49/221 [00:16<00:53,  3.24it/s][A
 23%|██▎       | 50/221 [00:16<00:42,  4.01it/s][A
 23%|██▎       | 51/221 [00:16<00:35,  4.74it/s][A
 24%|██▎       | 52/221 [00:16<00:36,  4.59it/s][A
 24%|██▍       | 53/221 [00:17<00:32,  5.20it/s][A
 24%|██▍       | 54/221 [00:18<01:33,  1.78it/s][A
 25%|██▍       | 55/221 [00:18<01:19,  2.09it/s][A
 25%|██▌       | 56/221 [00:19<01:06,  2.46it/s][A
 26%|██▌       | 57/221 [00:19<00:56,  2.93it/s][A
 27%|██▋       | 59/221 [00:19<00:45,  3.56it/s][A
 27%|██▋       | 60/221 [00:20<01:00,  2.66it/s][A
 28%|██▊       | 61/221 [00:20<00:55,  2.88it/s][A
 28%|██▊       | 62/221 [00:20<00:53,  2.97it/s][A
 29%|██▊       | 63/221 [00:21<00:53,  2.96it/s][A
 29%|██▉       | 64/221 [00:21<00:48,  3.21it/s][A
 29%|██▉       | 65/221 [00:21<00:48,  3.24it/s][A
 30%|██▉       | 66/221 [00:22<00:58,  2.66it/s][A[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure

 30%|███       | 67/221 [00:22<01:08,  2.25it/s][A
 31%|███       | 68/221 [00:23<00:57,  2.68it/s][A
 31%|███       | 69/221 [00:24<01:18,  1.93it/s][A
 32%|███▏      | 70/221 [00:24<01:02,  2.41it/s][A[h264 @ 0x55d4bea22e00] mmco: unref short failure

 32%|███▏      | 71/221 [00:24<01:11,  2.10it/s][A
 33%|███▎      | 72/221 [00:25<01:05,  2.28it/s][A
 33%|███▎      | 73/221 [00:25<00:59,  2.48it/s][A
 33%|███▎      | 74/221 [00:25<00:49,  2.98it/s][A
 34%|███▍      | 75/221 [00:26<00:56,  2.57it/s][A
 34%|███▍      | 76/221 [00:26<00:47,  3.03it/s][A
 35%|███▍      | 77/221 [00:26<00:42,  3.41it/s][A
 35%|███▌      | 78/221 [00:26<00:46,  3.08it/s][A
 36%|███▌      | 79/221 [00:27<00:58,  2.45it/s][A
 36%|███▌      | 80/221 [00:27<00:51,  2.72it/s][A[h264 @ 0x555fe015ec00] mmco: unref short failure
[h264 @ 0x555fe015ec00] mmco: unref short failure

 37%|███▋      | 81/221 [00:28<00:50,  2.76it/s][A
 37%|███▋      | 82/221 [00:28<00:40,  3.40it/s][A
 38%|███▊      | 83/221 [00:28<00:34,  4.00it/s][A
 38%|███▊      | 84/221 [00:28<00:34,  3.92it/s][A
 38%|███▊      | 85/221 [00:28<00:29,  4.63it/s][A[h264 @ 0x55d4b74f8540] mmco: unref short failure

 39%|███▉      | 86/221 [00:29<00:33,  4.01it/s][A
 39%|███▉      | 87/221 [00:29<00:51,  2.59it/s][A
 40%|███▉      | 88/221 [00:30<00:54,  2.46it/s][A
 40%|████      | 89/221 [00:31<01:12,  1.83it/s][A
 41%|████      | 90/221 [00:31<01:02,  2.09it/s][A
 41%|████      | 91/221 [00:31<00:49,  2.63it/s][A
 42%|████▏     | 92/221 [00:31<00:45,  2.86it/s][A
 42%|████▏     | 93/221 [00:32<00:56,  2.29it/s][A
 43%|████▎     | 94/221 [00:32<00:49,  2.57it/s][A
 43%|████▎     | 95/221 [00:33<00:40,  3.10it/s][A
 43%|████▎     | 96/221 [00:33<00:38,  3.25it/s][A
 44%|████▍     | 97/221 [00:33<00:33,  3.74it/s][A
 44%|████▍     | 98/221 [00:33<00:36,  3.35it/s][A
 45%|████▍     | 99/221 [00:34<00:31,  3.83it/s][A
 45%|████▌     | 100/221 [00:34<00:33,  3.65it/s][A
 46%|████▌     | 101/221 [00:34<00:33,  3.59it/s][A
 46%|████▌     | 102/221 [00:34<00:34,  3.44it/s][A
 47%|████▋     | 103/221 [00:35<00:33,  3.56it/s][A
 47%|████▋     | 104/221 [00:35<00:28,  4.11it/s][A
 48%|████▊     | 105/221 [00:35<00:29,  3.88it/s][A[h264 @ 0x559339acf800] mmco: unref short failure
[h264 @ 0x559346809fc0] mmco: unref short failure

 48%|████▊     | 106/221 [00:36<00:51,  2.24it/s][A
 48%|████▊     | 107/221 [00:36<00:45,  2.49it/s][A
 49%|████▉     | 108/221 [00:37<00:43,  2.61it/s][A
 49%|████▉     | 109/221 [00:37<00:44,  2.49it/s][A
 50%|████▉     | 110/221 [00:37<00:43,  2.57it/s][A
 50%|█████     | 111/221 [00:38<00:45,  2.43it/s][A
 51%|█████     | 112/221 [00:38<00:38,  2.80it/s][A
 51%|█████     | 113/221 [00:39<00:38,  2.83it/s][A
 52%|█████▏    | 114/221 [00:39<00:29,  3.59it/s][A
 52%|█████▏    | 115/221 [00:39<00:25,  4.17it/s][A
 52%|█████▏    | 116/221 [00:42<02:00,  1.15s/it][A
 53%|█████▎    | 117/221 [00:43<01:37,  1.06it/s][A
 53%|█████▎    | 118/221 [00:43<01:18,  1.31it/s][A[h264 @ 0x55935a7cea80] mmco: unref short failure
[h264 @ 0x55935a7cea80] mmco: unref short failure

 54%|█████▍    | 119/221 [00:43<01:02,  1.62it/s][A
 54%|█████▍    | 120/221 [00:44<00:55,  1.82it/s][A
 55%|█████▍    | 121/221 [00:44<00:42,  2.36it/s][A
 55%|█████▌    | 122/221 [00:44<00:36,  2.74it/s][A
 56%|█████▌    | 123/221 [00:44<00:29,  3.30it/s][A
 56%|█████▌    | 124/221 [00:44<00:28,  3.43it/s][A
 57%|█████▋    | 125/221 [00:45<00:34,  2.80it/s][A
 57%|█████▋    | 126/221 [00:45<00:34,  2.75it/s][A
 57%|█████▋    | 127/221 [00:46<00:41,  2.28it/s][A
 58%|█████▊    | 128/221 [00:46<00:38,  2.42it/s][A
 58%|█████▊    | 129/221 [00:46<00:31,  2.88it/s][A
 59%|█████▉    | 130/221 [00:47<00:32,  2.80it/s][A
 59%|█████▉    | 131/221 [00:47<00:25,  3.46it/s][A
 60%|█████▉    | 132/221 [00:47<00:24,  3.64it/s][A
 60%|██████    | 133/221 [00:48<00:31,  2.77it/s][A
 61%|██████    | 134/221 [00:48<00:27,  3.13it/s][A
 61%|██████    | 135/221 [00:48<00:28,  2.97it/s][A
 62%|██████▏   | 136/221 [00:49<00:30,  2.83it/s][A
 62%|██████▏   | 137/221 [00:49<00:27,  3.08it/s][A[h264 @ 0x55a013cadec0] mmco: unref short failure
[h264 @ 0x55a013cadec0] mmco: unref short failure

 62%|██████▏   | 138/221 [00:49<00:31,  2.68it/s][A
 63%|██████▎   | 139/221 [00:50<00:34,  2.35it/s][A
 63%|██████▎   | 140/221 [00:50<00:31,  2.55it/s][A
 64%|██████▍   | 141/221 [00:50<00:27,  2.90it/s][A[h264 @ 0x555fe0504840] mmco: unref short failure

 64%|██████▍   | 142/221 [00:51<00:26,  2.99it/s][A
 65%|██████▍   | 143/221 [00:51<00:30,  2.60it/s][A
 65%|██████▌   | 144/221 [00:52<00:26,  2.96it/s][A[h264 @ 0x559362d20640] mmco: unref short failure

 66%|██████▌   | 145/221 [00:52<00:25,  3.02it/s][A
 66%|██████▌   | 146/221 [00:52<00:22,  3.27it/s][A
 67%|██████▋   | 147/221 [00:52<00:22,  3.35it/s][A
 67%|██████▋   | 148/221 [00:53<00:22,  3.19it/s][A
 67%|██████▋   | 149/221 [00:53<00:19,  3.69it/s][A
 68%|██████▊   | 150/221 [00:53<00:18,  3.90it/s][A
 68%|██████▊   | 151/221 [00:54<00:31,  2.22it/s][A
 69%|██████▉   | 152/221 [00:55<00:35,  1.96it/s][A
 69%|██████▉   | 153/221 [00:55<00:31,  2.14it/s][A
 70%|██████▉   | 154/221 [00:55<00:29,  2.30it/s][A
 70%|███████   | 155/221 [00:56<00:25,  2.63it/s][A
 71%|███████   | 156/221 [00:56<00:24,  2.71it/s][A
 71%|███████   | 157/221 [00:57<00:43,  1.49it/s][A
 71%|███████▏  | 158/221 [00:58<00:38,  1.64it/s][A
 72%|███████▏  | 159/221 [00:58<00:30,  2.04it/s][A
 72%|███████▏  | 160/221 [00:58<00:26,  2.26it/s][A
 73%|███████▎  | 161/221 [00:59<00:22,  2.72it/s][A
 73%|███████▎  | 162/221 [00:59<00:17,  3.37it/s][A
 74%|███████▍  | 163/221 [00:59<00:17,  3.36it/s][A
 74%|███████▍  | 164/221 [00:59<00:14,  3.85it/s][A
 75%|███████▍  | 165/221 [00:59<00:12,  4.66it/s][A
 75%|███████▌  | 166/221 [01:00<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [01:00<00:14,  3.66it/s][A
 76%|███████▌  | 168/221 [01:01<00:21,  2.51it/s][A
 76%|███████▋  | 169/221 [01:01<00:19,  2.66it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.79it/s][A
 77%|███████▋  | 171/221 [01:02<00:20,  2.44it/s][A
 78%|███████▊  | 172/221 [01:02<00:18,  2.71it/s][A
 78%|███████▊  | 173/221 [01:02<00:14,  3.28it/s][A[h264 @ 0x55a01cf150c0] mmco: unref short failure
[h264 @ 0x55a01cf150c0] mmco: unref short failure

 79%|███████▊  | 174/221 [01:02<00:12,  3.91it/s][A
 79%|███████▉  | 175/221 [01:03<00:11,  4.04it/s][A
 80%|███████▉  | 176/221 [01:03<00:13,  3.33it/s][A
 80%|████████  | 177/221 [01:03<00:11,  3.83it/s][A
 81%|████████  | 178/221 [01:04<00:14,  3.03it/s][A
 81%|████████  | 179/221 [01:04<00:19,  2.18it/s][A
 81%|████████▏ | 180/221 [01:05<00:14,  2.82it/s][A
 82%|████████▏ | 181/221 [01:05<00:12,  3.19it/s][A
 82%|████████▏ | 182/221 [01:05<00:11,  3.45it/s][A
 83%|████████▎ | 183/221 [01:05<00:10,  3.80it/s][A
 83%|████████▎ | 184/221 [01:06<00:11,  3.29it/s][A
 84%|████████▎ | 185/221 [01:06<00:10,  3.56it/s][A
 84%|████████▍ | 186/221 [01:06<00:13,  2.63it/s][A
 85%|████████▍ | 187/221 [01:07<00:11,  3.08it/s][A
 85%|████████▌ | 188/221 [01:07<00:11,  2.89it/s][A[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure

 86%|████████▌ | 189/221 [01:07<00:10,  3.12it/s][A
 86%|████████▌ | 190/221 [01:08<00:10,  2.84it/s][A
 86%|████████▋ | 191/221 [01:08<00:09,  3.27it/s][A
 87%|████████▋ | 192/221 [01:08<00:09,  3.16it/s][A
 87%|████████▋ | 193/221 [01:08<00:07,  3.83it/s][A
 88%|████████▊ | 194/221 [01:09<00:11,  2.26it/s][A
 88%|████████▊ | 195/221 [01:10<00:09,  2.63it/s][A
 89%|████████▊ | 196/221 [01:10<00:08,  3.11it/s][A
 89%|████████▉ | 197/221 [01:10<00:07,  3.21it/s][A
 90%|████████▉ | 198/221 [01:11<00:08,  2.62it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  3.09it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.65it/s][A
 91%|█████████ | 201/221 [01:12<00:07,  2.72it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.84it/s][A[h264 @ 0x55a027790780] mmco: unref short failure
[h264 @ 0x55a027790780] mmco: unref short failure

 92%|█████████▏| 203/221 [01:12<00:05,  3.21it/s][A
 92%|█████████▏| 204/221 [01:12<00:05,  3.21it/s][A
 93%|█████████▎| 205/221 [01:13<00:04,  3.71it/s][A
 93%|█████████▎| 206/221 [01:13<00:05,  2.57it/s][A
 94%|█████████▎| 207/221 [01:13<00:04,  3.19it/s][A
 94%|█████████▍| 208/221 [01:14<00:03,  3.43it/s][A
 95%|█████████▍| 209/221 [01:14<00:03,  3.88it/s][A
 95%|█████████▌| 210/221 [01:14<00:02,  4.73it/s][A
 95%|█████████▌| 211/221 [01:14<00:02,  3.59it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  3.94it/s][A
 96%|█████████▋| 213/221 [01:15<00:01,  4.62it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  3.24it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  3.23it/s][A
 98%|█████████▊| 217/221 [01:16<00:01,  2.84it/s][A[h264 @ 0x55d4c3a152c0] mmco: unref short failure

 99%|█████████▊| 218/221 [01:17<00:01,  2.87it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  3.04it/s][A[h264 @ 0x55933d1a3300] mmco: unref short failure
[h264 @ 0x559346809fc0] mmco: unref short failure
[h264 @ 0x559346809fc0] mmco: unref short failure
[h264 @ 0x55d4b9979fc0] mmco: unref short failure
[h264 @ 0x55d4b9979fc0] mmco: unref short failure

100%|█████████▉| 220/221 [01:20<00:01,  1.15s/it][A
100%|██████████| 221/221 [01:20<00:00,  1.08it/s][A100%|██████████| 221/221 [01:20<00:00,  2.73it/s]
[h264 @ 0x55a0424a5080] mmco: unref short failure
[h264 @ 0x55d4e5f0aa00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:08,  3.22it/s][A
  1%|          | 2/221 [00:00<01:19,  2.75it/s][A
  1%|▏         | 3/221 [00:01<01:17,  2.80it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.89it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.98it/s][A
  3%|▎         | 6/221 [00:02<01:11,  3.03it/s][A
  3%|▎         | 7/221 [00:02<01:09,  3.08it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.82it/s][A
  4%|▍         | 9/221 [00:03<01:16,  2.78it/s][A
  5%|▍         | 10/221 [00:03<01:15,  2.80it/s][A
  5%|▍         | 11/221 [00:03<01:13,  2.84it/s][A09/17/2024 05:02:01 - INFO - __main__ -   current idx QCTlsbvtDIQ.2 from finetune_area returns wrong image/video, use 120792 instead.

  5%|▌         | 12/221 [00:04<01:11,  2.93it/s][A
  6%|▌         | 13/221 [00:04<01:10,  2.94it/s][A
  6%|▋         | 14/221 [00:04<01:08,  3.01it/s][A
  7%|▋         | 15/221 [00:05<01:14,  2.75it/s][A
  7%|▋         | 16/221 [00:05<01:24,  2.43it/s][A[h264 @ 0x559346902440] mmco: unref short failure

  8%|▊         | 17/221 [00:06<01:25,  2.38it/s][A
  8%|▊         | 18/221 [00:06<01:20,  2.53it/s][A
  9%|▊         | 19/221 [00:06<01:19,  2.53it/s][A
  9%|▉         | 20/221 [00:07<01:16,  2.63it/s][A
 10%|▉         | 21/221 [00:07<01:19,  2.52it/s][A
 10%|▉         | 22/221 [00:08<01:21,  2.44it/s][A
 10%|█         | 23/221 [00:08<01:22,  2.40it/s][A
 11%|█         | 24/221 [00:08<01:20,  2.45it/s][A
 11%|█▏        | 25/221 [00:09<01:15,  2.58it/s][A
 12%|█▏        | 26/221 [00:09<01:13,  2.65it/s][A
 12%|█▏        | 27/221 [00:10<01:11,  2.71it/s][A
 13%|█▎        | 28/221 [00:10<01:16,  2.51it/s][A
 13%|█▎        | 29/221 [00:10<01:13,  2.60it/s][A
 14%|█▎        | 30/221 [00:11<01:10,  2.71it/s][A
 14%|█▍        | 31/221 [00:11<01:09,  2.73it/s][A
 14%|█▍        | 32/221 [00:11<01:08,  2.76it/s][A
 15%|█▍        | 33/221 [00:12<01:07,  2.79it/s][A
 15%|█▌        | 34/221 [00:12<01:05,  2.85it/s][A[h264 @ 0x55a01a43c840] mmco: unref short failure
[h264 @ 0x55a01a43c840] mmco: unref short failure

 16%|█▌        | 35/221 [00:12<01:06,  2.80it/s][A
 16%|█▋        | 36/221 [00:13<01:07,  2.76it/s][A
 17%|█▋        | 37/221 [00:13<01:04,  2.86it/s][A
 17%|█▋        | 38/221 [00:13<01:04,  2.85it/s][A[h264 @ 0x55a027790780] mmco: unref short failure

 18%|█▊        | 39/221 [00:14<01:02,  2.93it/s][A
 18%|█▊        | 40/221 [00:14<01:02,  2.90it/s][A
 19%|█▊        | 41/221 [00:14<01:00,  2.96it/s][A
 19%|█▉        | 42/221 [00:15<01:01,  2.93it/s][A
 19%|█▉        | 43/221 [00:15<01:01,  2.90it/s][A
 20%|█▉        | 44/221 [00:16<01:01,  2.87it/s][A
 20%|██        | 45/221 [00:16<00:59,  2.95it/s][A
 21%|██        | 46/221 [00:16<00:58,  2.97it/s][A
 21%|██▏       | 47/221 [00:17<00:59,  2.95it/s][A
 22%|██▏       | 48/221 [00:17<00:59,  2.92it/s][A
 22%|██▏       | 49/221 [00:17<01:02,  2.74it/s][A
 23%|██▎       | 50/221 [00:18<01:05,  2.61it/s][A
 23%|██▎       | 51/221 [00:18<01:02,  2.74it/s][A
 24%|██▎       | 52/221 [00:18<01:01,  2.74it/s][A
 24%|██▍       | 53/221 [00:19<00:59,  2.81it/s][A
 24%|██▍       | 54/221 [00:19<00:59,  2.81it/s][A
 25%|██▍       | 55/221 [00:19<00:58,  2.85it/s][A
 25%|██▌       | 56/221 [00:20<00:58,  2.83it/s][A
 26%|██▌       | 57/221 [00:20<00:59,  2.75it/s][A
 26%|██▌       | 58/221 [00:21<00:57,  2.84it/s][A
 27%|██▋       | 59/221 [00:21<00:55,  2.90it/s][A
 27%|██▋       | 60/221 [00:21<00:58,  2.73it/s][A
 28%|██▊       | 61/221 [00:22<00:59,  2.71it/s][A
 28%|██▊       | 62/221 [00:22<00:55,  2.86it/s][A[h264 @ 0x555fd92f3fc0] mmco: unref short failure
[h264 @ 0x555fd92f3fc0] mmco: unref short failure

 29%|██▊       | 63/221 [00:22<00:52,  3.00it/s][A
 29%|██▉       | 64/221 [00:23<00:52,  2.99it/s][A
 29%|██▉       | 65/221 [00:23<00:52,  2.96it/s][A
 30%|██▉       | 66/221 [00:23<00:52,  2.95it/s][A
 30%|███       | 67/221 [00:24<00:52,  2.94it/s][A
 31%|███       | 68/221 [00:24<00:51,  2.98it/s][A[h264 @ 0x55935f387940] mmco: unref short failure

 31%|███       | 69/221 [00:24<00:51,  2.96it/s][A
 32%|███▏      | 70/221 [00:25<00:53,  2.84it/s][A
 32%|███▏      | 71/221 [00:25<00:53,  2.79it/s][A
 33%|███▎      | 72/221 [00:25<00:52,  2.82it/s][A
 33%|███▎      | 73/221 [00:26<00:51,  2.87it/s][A
 33%|███▎      | 74/221 [00:26<00:49,  2.96it/s][A
 34%|███▍      | 75/221 [00:26<00:50,  2.88it/s][A
 34%|███▍      | 76/221 [00:27<00:51,  2.83it/s][A
 35%|███▍      | 77/221 [00:27<00:51,  2.78it/s][A
 35%|███▌      | 78/221 [00:27<00:50,  2.85it/s][A
 36%|███▌      | 79/221 [00:28<00:50,  2.82it/s][A
 36%|███▌      | 80/221 [00:28<00:50,  2.82it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.91it/s][A
 37%|███▋      | 82/221 [00:29<00:47,  2.94it/s][A
 38%|███▊      | 83/221 [00:29<00:45,  3.01it/s][A
 38%|███▊      | 84/221 [00:30<00:47,  2.86it/s][A
 38%|███▊      | 85/221 [00:30<00:51,  2.63it/s][A
 39%|███▉      | 86/221 [00:30<00:51,  2.62it/s][A
 39%|███▉      | 87/221 [00:31<00:54,  2.45it/s][A
 40%|███▉      | 88/221 [00:31<00:53,  2.50it/s][A
 40%|████      | 89/221 [00:32<00:50,  2.62it/s][A
 41%|████      | 90/221 [00:32<00:47,  2.75it/s][A
 41%|████      | 91/221 [00:32<00:48,  2.69it/s][A
 42%|████▏     | 92/221 [00:33<00:45,  2.80it/s][A
 42%|████▏     | 93/221 [00:33<00:46,  2.75it/s][A
 43%|████▎     | 94/221 [00:33<00:45,  2.81it/s][A
 43%|████▎     | 95/221 [00:34<00:43,  2.90it/s][A[h264 @ 0x55d4bda8e500] mmco: unref short failure

 43%|████▎     | 96/221 [00:34<00:44,  2.81it/s][A
 44%|████▍     | 97/221 [00:34<00:47,  2.63it/s][A
 44%|████▍     | 98/221 [00:35<00:47,  2.59it/s][A
 45%|████▍     | 99/221 [00:35<00:46,  2.60it/s][A
 45%|████▌     | 100/221 [00:36<00:44,  2.69it/s][A[h264 @ 0x55d4c0905180] mmco: unref short failure

 46%|████▌     | 101/221 [00:36<00:44,  2.68it/s][A
 46%|████▌     | 102/221 [00:36<00:44,  2.65it/s][A
 47%|████▋     | 103/221 [00:37<00:43,  2.73it/s][A
 47%|████▋     | 104/221 [00:37<00:44,  2.63it/s][A
 48%|████▊     | 105/221 [00:37<00:45,  2.56it/s][A
 48%|████▊     | 106/221 [00:38<00:43,  2.66it/s][A
 48%|████▊     | 107/221 [00:38<00:44,  2.55it/s][A
 49%|████▉     | 108/221 [00:39<00:44,  2.55it/s][A
 49%|████▉     | 109/221 [00:39<00:41,  2.67it/s][A
 50%|████▉     | 110/221 [00:39<00:40,  2.76it/s][A
 50%|█████     | 111/221 [00:40<00:39,  2.76it/s][A
 51%|█████     | 112/221 [00:40<00:38,  2.82it/s][A
 51%|█████     | 113/221 [00:40<00:37,  2.86it/s][A
 52%|█████▏    | 114/221 [00:41<00:38,  2.78it/s][A
 52%|█████▏    | 115/221 [00:41<00:39,  2.71it/s][A
 52%|█████▏    | 116/221 [00:41<00:38,  2.74it/s][A
 53%|█████▎    | 117/221 [00:42<00:38,  2.69it/s][A
 53%|█████▎    | 118/221 [00:42<00:37,  2.77it/s][A
 54%|█████▍    | 119/221 [00:43<00:35,  2.88it/s][A
 54%|█████▍    | 120/221 [00:43<00:35,  2.88it/s][A
 55%|█████▍    | 121/221 [00:43<00:33,  2.97it/s][A
 55%|█████▌    | 122/221 [00:44<00:33,  2.96it/s][A
 56%|█████▌    | 123/221 [00:44<00:33,  2.89it/s][A
 56%|█████▌    | 124/221 [00:44<00:33,  2.88it/s][A
 57%|█████▋    | 125/221 [00:45<00:32,  2.95it/s][A
 57%|█████▋    | 126/221 [00:45<00:31,  3.03it/s][A
 57%|█████▋    | 127/221 [00:45<00:32,  2.94it/s][A
 58%|█████▊    | 128/221 [00:46<00:31,  2.98it/s][A
 58%|█████▊    | 129/221 [00:46<00:31,  2.90it/s][A
 59%|█████▉    | 130/221 [00:46<00:30,  2.94it/s][A
 59%|█████▉    | 131/221 [00:47<00:30,  2.98it/s][A
 60%|█████▉    | 132/221 [00:47<00:29,  2.99it/s][A
 60%|██████    | 133/221 [00:47<00:29,  2.93it/s][A
 61%|██████    | 134/221 [00:48<00:29,  2.94it/s][A
 61%|██████    | 135/221 [00:48<00:28,  2.97it/s][A
 62%|██████▏   | 136/221 [00:48<00:28,  2.93it/s][A
 62%|██████▏   | 137/221 [00:49<00:28,  2.99it/s][A
 62%|██████▏   | 138/221 [00:49<00:27,  2.98it/s][A
 63%|██████▎   | 139/221 [00:49<00:29,  2.83it/s][A
 63%|██████▎   | 140/221 [00:50<00:27,  2.93it/s][A
 64%|██████▍   | 141/221 [00:50<00:26,  2.98it/s][A
 64%|██████▍   | 142/221 [00:50<00:27,  2.85it/s][A
 65%|██████▍   | 143/221 [00:51<00:27,  2.82it/s][A
 65%|██████▌   | 144/221 [00:51<00:26,  2.85it/s][A[h264 @ 0x55d4d87be9c0] mmco: unref short failure

 66%|██████▌   | 145/221 [00:51<00:27,  2.73it/s][A
 66%|██████▌   | 146/221 [00:52<00:26,  2.78it/s][A
 67%|██████▋   | 147/221 [00:52<00:26,  2.74it/s][A
 67%|██████▋   | 148/221 [00:53<00:25,  2.86it/s][A
 67%|██████▋   | 149/221 [00:53<00:24,  2.89it/s][A
 68%|██████▊   | 150/221 [00:53<00:24,  2.91it/s][A
 68%|██████▊   | 151/221 [00:54<00:23,  2.93it/s][A
 69%|██████▉   | 152/221 [00:54<00:24,  2.79it/s][A
 69%|██████▉   | 153/221 [00:54<00:23,  2.89it/s][A
 70%|██████▉   | 154/221 [00:55<00:23,  2.91it/s][A[h264 @ 0x5593520d3980] mmco: unref short failure
[h264 @ 0x5593520d3980] mmco: unref short failure

 70%|███████   | 155/221 [00:55<00:22,  2.95it/s][A
 71%|███████   | 156/221 [00:55<00:21,  2.98it/s][A
 71%|███████   | 157/221 [00:56<00:21,  3.00it/s][A
 71%|███████▏  | 158/221 [00:56<00:21,  2.94it/s][A
 72%|███████▏  | 159/221 [00:56<00:22,  2.79it/s][A
 72%|███████▏  | 160/221 [00:57<00:22,  2.76it/s][A
 73%|███████▎  | 161/221 [00:57<00:21,  2.84it/s][A
 73%|███████▎  | 162/221 [00:57<00:20,  2.91it/s][A
 74%|███████▍  | 163/221 [00:58<00:19,  2.93it/s][A
 74%|███████▍  | 164/221 [00:58<00:19,  2.94it/s][A
 75%|███████▍  | 165/221 [00:58<00:19,  2.87it/s][A
 75%|███████▌  | 166/221 [00:59<00:18,  2.90it/s][A
 76%|███████▌  | 167/221 [00:59<00:19,  2.82it/s][A
 76%|███████▌  | 168/221 [00:59<00:18,  2.89it/s][A
 76%|███████▋  | 169/221 [01:00<00:18,  2.77it/s][A
 77%|███████▋  | 170/221 [01:00<00:18,  2.81it/s][A
 77%|███████▋  | 171/221 [01:00<00:17,  2.88it/s][A
 78%|███████▊  | 172/221 [01:01<00:16,  2.97it/s][A[h264 @ 0x55a016f63040] mmco: unref short failure
[h264 @ 0x55a016f63040] mmco: unref short failure

 78%|███████▊  | 173/221 [01:01<00:16,  2.89it/s][A
 79%|███████▊  | 174/221 [01:02<00:16,  2.92it/s][A
 79%|███████▉  | 175/221 [01:02<00:16,  2.83it/s][A[h264 @ 0x55600e20f000] mmco: unref short failure
[h264 @ 0x55600e20f000] mmco: unref short failure
[h264 @ 0x55600e20f000] mmco: unref short failure
[h264 @ 0x55600e20f000] mmco: unref short failure

 80%|███████▉  | 176/221 [01:02<00:16,  2.78it/s][A
 80%|████████  | 177/221 [01:03<00:15,  2.84it/s][A
 81%|████████  | 178/221 [01:03<00:15,  2.87it/s][A
 81%|████████  | 179/221 [01:03<00:14,  2.95it/s][A
 81%|████████▏ | 180/221 [01:04<00:14,  2.88it/s][A
 82%|████████▏ | 181/221 [01:04<00:14,  2.75it/s][A
 82%|████████▏ | 182/221 [01:05<00:16,  2.31it/s][A
 83%|████████▎ | 183/221 [01:05<00:16,  2.35it/s][A
 83%|████████▎ | 184/221 [01:05<00:15,  2.46it/s][A
 84%|████████▎ | 185/221 [01:06<00:13,  2.63it/s][A
 84%|████████▍ | 186/221 [01:06<00:12,  2.74it/s][A
 85%|████████▍ | 187/221 [01:06<00:11,  2.86it/s][A
 85%|████████▌ | 188/221 [01:07<00:11,  2.88it/s][A
 86%|████████▌ | 189/221 [01:07<00:11,  2.83it/s][A
 86%|████████▌ | 190/221 [01:07<00:11,  2.81it/s][A
 86%|████████▋ | 191/221 [01:08<00:10,  2.87it/s][A
 87%|████████▋ | 192/221 [01:08<00:09,  2.92it/s][A
 87%|████████▋ | 193/221 [01:08<00:09,  2.95it/s][A
 88%|████████▊ | 194/221 [01:09<00:09,  2.92it/s][A
 88%|████████▊ | 195/221 [01:09<00:08,  2.97it/s][A
 89%|████████▊ | 196/221 [01:09<00:08,  2.85it/s][A
 89%|████████▉ | 197/221 [01:10<00:08,  2.79it/s][A
 90%|████████▉ | 198/221 [01:10<00:08,  2.68it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.79it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.85it/s][A
 91%|█████████ | 201/221 [01:11<00:06,  2.88it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.79it/s][A
 92%|█████████▏| 203/221 [01:12<00:06,  2.76it/s][A
 92%|█████████▏| 204/221 [01:12<00:06,  2.72it/s][A
 93%|█████████▎| 205/221 [01:13<00:05,  2.74it/s][A09/17/2024 05:03:11 - INFO - __main__ -   current idx BxSP425mQ4g.34 from finetune_area returns wrong image/video, use 67471 instead.

 93%|█████████▎| 206/221 [01:13<00:05,  2.74it/s][A
 94%|█████████▎| 207/221 [01:13<00:04,  2.81it/s][A
 94%|█████████▍| 208/221 [01:14<00:04,  2.87it/s][A
 95%|█████████▍| 209/221 [01:14<00:04,  2.91it/s][A
 95%|█████████▌| 210/221 [01:14<00:03,  3.00it/s][A
 95%|█████████▌| 211/221 [01:15<00:03,  2.74it/s][A
 96%|█████████▌| 212/221 [01:15<00:03,  2.77it/s][A
 96%|█████████▋| 213/221 [01:16<00:02,  2.81it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  2.94it/s][A
 97%|█████████▋| 215/221 [01:16<00:02,  2.92it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  3.04it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.98it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.99it/s][A
100%|█████████▉| 220/221 [01:18<00:00,  2.82it/s][A
100%|██████████| 221/221 [01:18<00:00,  2.88it/s][A100%|██████████| 221/221 [01:18<00:00,  2.81it/s]
[h264 @ 0x55d4d2da31c0] mmco: unref short failure
[h264 @ 0x5593520d3980] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:49,  4.47it/s][A
  1%|          | 2/221 [00:00<01:01,  3.56it/s][A
  1%|▏         | 3/221 [00:01<01:22,  2.63it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.35it/s][A
  2%|▏         | 5/221 [00:01<01:00,  3.58it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.31it/s][A
  3%|▎         | 7/221 [00:01<01:00,  3.54it/s][A
  4%|▎         | 8/221 [00:02<01:01,  3.47it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.50it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.80it/s][A
  5%|▍         | 11/221 [00:03<01:00,  3.48it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.58it/s][A
  6%|▌         | 13/221 [00:04<01:38,  2.11it/s][A
  6%|▋         | 14/221 [00:04<01:28,  2.35it/s][A
  7%|▋         | 15/221 [00:04<01:24,  2.44it/s][A
  7%|▋         | 16/221 [00:05<01:26,  2.36it/s][A
  8%|▊         | 17/221 [00:06<01:38,  2.07it/s][A
  8%|▊         | 18/221 [00:06<01:28,  2.29it/s][A
  9%|▊         | 19/221 [00:06<01:12,  2.78it/s][A[h264 @ 0x559344cff440] mmco: unref short failure
[h264 @ 0x559344cff440] mmco: unref short failure

  9%|▉         | 20/221 [00:06<01:08,  2.92it/s][A
 10%|▉         | 21/221 [00:07<00:57,  3.48it/s][A
 10%|▉         | 22/221 [00:07<00:55,  3.59it/s][A
 10%|█         | 23/221 [00:07<00:50,  3.95it/s][A
 11%|█         | 24/221 [00:07<00:46,  4.27it/s][A
 11%|█▏        | 25/221 [00:08<01:00,  3.23it/s][A
 12%|█▏        | 26/221 [00:08<01:07,  2.90it/s][A
 12%|█▏        | 27/221 [00:08<01:09,  2.80it/s][A
 13%|█▎        | 28/221 [00:09<01:12,  2.67it/s][A
 13%|█▎        | 29/221 [00:09<01:07,  2.82it/s][A
 14%|█▎        | 30/221 [00:10<01:09,  2.74it/s][A
 14%|█▍        | 31/221 [00:10<01:07,  2.81it/s][A
 14%|█▍        | 32/221 [00:10<00:57,  3.28it/s][A
 15%|█▍        | 33/221 [00:10<00:53,  3.52it/s][A
 15%|█▌        | 34/221 [00:11<01:01,  3.04it/s][A
 16%|█▌        | 35/221 [00:11<01:02,  2.97it/s][A
 16%|█▋        | 36/221 [00:11<01:02,  2.97it/s][A
 17%|█▋        | 37/221 [00:12<00:56,  3.24it/s][A
 17%|█▋        | 38/221 [00:12<00:59,  3.05it/s][A
 18%|█▊        | 39/221 [00:12<00:51,  3.57it/s][A[h264 @ 0x55a03a06fc00] mmco: unref short failure
[h264 @ 0x55a03a06fc00] mmco: unref short failure

 18%|█▊        | 40/221 [00:13<00:52,  3.47it/s][A
 19%|█▊        | 41/221 [00:13<00:51,  3.50it/s][A
 19%|█▉        | 42/221 [00:13<00:45,  3.97it/s][A
 19%|█▉        | 43/221 [00:13<00:46,  3.79it/s][A
 20%|█▉        | 44/221 [00:14<00:44,  3.98it/s][A
 20%|██        | 45/221 [00:14<00:48,  3.60it/s][A
 21%|██        | 46/221 [00:14<00:43,  4.04it/s][A
 21%|██▏       | 47/221 [00:14<00:36,  4.75it/s][A
 22%|██▏       | 48/221 [00:14<00:32,  5.27it/s][A
 22%|██▏       | 49/221 [00:15<00:34,  5.00it/s][A
 23%|██▎       | 50/221 [00:15<00:38,  4.48it/s][A
 23%|██▎       | 51/221 [00:15<00:40,  4.19it/s][A
 24%|██▎       | 52/221 [00:15<00:34,  4.94it/s][A
 24%|██▍       | 53/221 [00:15<00:31,  5.41it/s][A
 24%|██▍       | 54/221 [00:16<00:35,  4.71it/s][A
 25%|██▍       | 55/221 [00:16<00:36,  4.52it/s][A
 25%|██▌       | 56/221 [00:16<00:37,  4.42it/s][A[h264 @ 0x55d4ba157a00] mmco: unref short failure

 26%|██▌       | 57/221 [00:16<00:39,  4.17it/s][A
 26%|██▌       | 58/221 [00:17<00:37,  4.30it/s][A
 27%|██▋       | 59/221 [00:17<00:42,  3.80it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.40it/s][A
 28%|██▊       | 61/221 [00:18<00:45,  3.53it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.31it/s][A
 29%|██▊       | 63/221 [00:18<00:39,  4.00it/s][A
 29%|██▉       | 64/221 [00:18<00:38,  4.07it/s][A
 29%|██▉       | 65/221 [00:18<00:37,  4.19it/s][A
 30%|██▉       | 66/221 [00:19<00:42,  3.65it/s][A
 30%|███       | 67/221 [00:20<01:02,  2.47it/s][A
 31%|███       | 68/221 [00:20<00:53,  2.85it/s][A09/17/2024 05:03:47 - INFO - __main__ -   current idx PhpkFkc8SS8.32 from finetune_area returns wrong image/video, use 127470 instead.

 31%|███       | 69/221 [00:20<00:56,  2.69it/s][A
 32%|███▏      | 70/221 [00:20<00:49,  3.08it/s][A
 32%|███▏      | 71/221 [00:21<00:58,  2.58it/s][A
 33%|███▎      | 72/221 [00:21<01:03,  2.36it/s][A
 33%|███▎      | 73/221 [00:22<00:57,  2.60it/s][A
 33%|███▎      | 74/221 [00:22<00:51,  2.84it/s][A
 34%|███▍      | 75/221 [00:22<00:55,  2.61it/s][A
 34%|███▍      | 76/221 [00:23<00:45,  3.18it/s][A
 35%|███▍      | 77/221 [00:23<00:44,  3.21it/s][A[h264 @ 0x559354cb9600] mmco: unref short failure

 35%|███▌      | 78/221 [00:23<00:43,  3.31it/s][A
 36%|███▌      | 79/221 [00:24<00:47,  3.00it/s][A
 36%|███▌      | 80/221 [00:24<00:47,  2.99it/s][A
 37%|███▋      | 81/221 [00:24<00:48,  2.86it/s][A
 37%|███▋      | 82/221 [00:25<00:45,  3.03it/s][A
 38%|███▊      | 83/221 [00:25<00:36,  3.75it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.29it/s][A
 38%|███▊      | 85/221 [00:26<00:44,  3.09it/s][A
 39%|███▉      | 86/221 [00:26<00:48,  2.79it/s][A
 39%|███▉      | 87/221 [00:27<01:00,  2.20it/s][A
 40%|███▉      | 88/221 [00:27<00:51,  2.57it/s][A
 40%|████      | 89/221 [00:27<00:53,  2.45it/s][A
not have audios 8-qwaveiHMM.3
 41%|████      | 90/221 [00:28<01:01,  2.13it/s][A
 41%|████      | 91/221 [00:28<00:51,  2.54it/s][A
 42%|████▏     | 92/221 [00:28<00:47,  2.74it/s][A[h264 @ 0x55d4dba585c0] mmco: unref short failure
[h264 @ 0x55d4dba585c0] mmco: unref short failure

 42%|████▏     | 93/221 [00:29<00:56,  2.26it/s][A
 43%|████▎     | 94/221 [00:29<00:44,  2.83it/s][A
 43%|████▎     | 95/221 [00:30<00:49,  2.56it/s][A
 43%|████▎     | 96/221 [00:30<00:48,  2.59it/s][A
 44%|████▍     | 97/221 [00:30<00:44,  2.81it/s][A
 44%|████▍     | 98/221 [00:31<00:39,  3.15it/s][A
 45%|████▍     | 99/221 [00:31<00:35,  3.47it/s][A
 45%|████▌     | 100/221 [00:31<00:30,  3.97it/s][A
 46%|████▌     | 101/221 [00:31<00:31,  3.76it/s][A
 46%|████▌     | 102/221 [00:32<00:33,  3.60it/s][A
 47%|████▋     | 103/221 [00:32<00:31,  3.76it/s][A
 47%|████▋     | 104/221 [00:32<00:26,  4.47it/s][A
 48%|████▊     | 105/221 [00:32<00:27,  4.26it/s][A
 48%|████▊     | 106/221 [00:33<00:35,  3.25it/s][A
 48%|████▊     | 107/221 [00:33<00:31,  3.60it/s][A
 49%|████▉     | 108/221 [00:33<00:27,  4.13it/s][A
 49%|████▉     | 109/221 [00:33<00:28,  3.87it/s][A
 50%|████▉     | 110/221 [00:34<00:29,  3.77it/s][A
 50%|█████     | 111/221 [00:34<00:32,  3.34it/s][A
 51%|█████     | 112/221 [00:34<00:34,  3.18it/s][A
 51%|█████     | 113/221 [00:35<00:31,  3.38it/s][A
 52%|█████▏    | 115/221 [00:35<00:26,  4.03it/s][A
 52%|█████▏    | 116/221 [00:35<00:28,  3.67it/s][A
 53%|█████▎    | 117/221 [00:36<00:30,  3.46it/s][A
 53%|█████▎    | 118/221 [00:36<00:34,  3.00it/s][A
 54%|█████▍    | 119/221 [00:37<00:36,  2.78it/s][A
 54%|█████▍    | 120/221 [00:37<00:34,  2.93it/s][A
 55%|█████▍    | 121/221 [00:37<00:27,  3.60it/s][A
 55%|█████▌    | 122/221 [00:37<00:26,  3.67it/s][A[h264 @ 0x55936a1048c0] mmco: unref short failure
[h264 @ 0x55936a1048c0] mmco: unref short failure

 56%|█████▌    | 123/221 [00:38<00:27,  3.54it/s][A
 56%|█████▌    | 124/221 [00:38<00:29,  3.29it/s][A
 57%|█████▋    | 125/221 [00:39<00:42,  2.25it/s][A
 57%|█████▋    | 126/221 [00:39<00:38,  2.49it/s][A
 57%|█████▋    | 127/221 [00:40<00:47,  1.99it/s][A
 58%|█████▊    | 128/221 [00:40<00:40,  2.29it/s][A
 58%|█████▊    | 129/221 [00:40<00:34,  2.69it/s][A
 59%|█████▉    | 130/221 [00:41<00:33,  2.74it/s][A
 59%|█████▉    | 131/221 [00:41<00:27,  3.32it/s][A
 60%|█████▉    | 132/221 [00:41<00:26,  3.38it/s][A
 60%|██████    | 133/221 [00:42<00:35,  2.46it/s][A
 61%|██████    | 134/221 [00:42<00:33,  2.63it/s][A[h264 @ 0x55a0116c7f40] mmco: unref short failure
[h264 @ 0x55a0116c7f40] mmco: unref short failure

 61%|██████    | 135/221 [00:42<00:27,  3.12it/s][A
 62%|██████▏   | 136/221 [00:43<00:28,  3.03it/s][A
 62%|██████▏   | 137/221 [00:43<00:27,  3.04it/s][A
 62%|██████▏   | 138/221 [00:43<00:28,  2.92it/s][A
 63%|██████▎   | 139/221 [00:44<00:29,  2.76it/s][A
 63%|██████▎   | 140/221 [00:44<00:25,  3.14it/s][A
 64%|██████▍   | 141/221 [00:44<00:26,  2.96it/s][A
 64%|██████▍   | 142/221 [00:44<00:23,  3.39it/s][A
 65%|██████▍   | 143/221 [00:45<00:25,  3.05it/s][A
 65%|██████▌   | 144/221 [00:45<00:22,  3.49it/s][A
 66%|██████▌   | 145/221 [00:45<00:21,  3.49it/s][A
 66%|██████▌   | 146/221 [00:46<00:21,  3.48it/s][A
 67%|██████▋   | 147/221 [00:46<00:22,  3.31it/s][A
 67%|██████▋   | 148/221 [00:46<00:20,  3.58it/s][A
 67%|██████▋   | 149/221 [00:46<00:20,  3.48it/s][A
 68%|██████▊   | 150/221 [00:47<00:20,  3.46it/s][A[h264 @ 0x55d4b9979fc0] mmco: unref short failure

 68%|██████▊   | 151/221 [00:48<00:33,  2.11it/s][A[h264 @ 0x55935400dec0] mmco: unref short failure
[h264 @ 0x55935400dec0] mmco: unref short failure
[h264 @ 0x55935400dec0] mmco: unref short failure
[h264 @ 0x55935400dec0] mmco: unref short failure

 69%|██████▉   | 152/221 [00:49<00:40,  1.68it/s][A
 69%|██████▉   | 153/221 [00:49<00:32,  2.10it/s][A
 70%|██████▉   | 154/221 [00:49<00:26,  2.57it/s][A
 70%|███████   | 155/221 [00:49<00:26,  2.49it/s][A
 71%|███████   | 156/221 [00:50<00:22,  2.91it/s][A
 71%|███████   | 157/221 [00:50<00:22,  2.86it/s][A
 71%|███████▏  | 158/221 [00:50<00:22,  2.77it/s][A
 72%|███████▏  | 159/221 [00:51<00:20,  3.03it/s][A
 72%|███████▏  | 160/221 [00:51<00:17,  3.57it/s][A
 73%|███████▎  | 161/221 [00:51<00:16,  3.65it/s][A[h264 @ 0x55a016df0d80] mmco: unref short failure

 73%|███████▎  | 162/221 [00:51<00:13,  4.25it/s][A[h264 @ 0x559339c47f80] mmco: unref short failure
[h264 @ 0x559339c47f80] mmco: unref short failure

 74%|███████▍  | 163/221 [00:51<00:14,  4.12it/s][A
 74%|███████▍  | 164/221 [00:52<00:12,  4.47it/s][A
 75%|███████▍  | 165/221 [00:52<00:10,  5.26it/s][A
 75%|███████▌  | 166/221 [00:52<00:13,  4.17it/s][A
 76%|███████▌  | 167/221 [00:52<00:11,  4.79it/s][A
 76%|███████▌  | 168/221 [00:53<00:12,  4.08it/s][A[h264 @ 0x55600e24da40] mmco: unref short failure
[h264 @ 0x55600e24da40] mmco: unref short failure

 76%|███████▋  | 169/221 [00:53<00:11,  4.37it/s][A
 77%|███████▋  | 170/221 [00:54<00:20,  2.45it/s][A
 77%|███████▋  | 171/221 [00:54<00:21,  2.30it/s][A
 78%|███████▊  | 172/221 [00:54<00:17,  2.75it/s][A
 78%|███████▊  | 173/221 [00:54<00:16,  2.97it/s][A
 79%|███████▊  | 174/221 [00:55<00:15,  2.99it/s][A
 79%|███████▉  | 175/221 [00:55<00:17,  2.66it/s][A
 80%|███████▉  | 176/221 [00:56<00:15,  2.97it/s][A
 80%|████████  | 177/221 [00:56<00:12,  3.39it/s][A
 81%|████████  | 178/221 [00:56<00:17,  2.48it/s][A
 81%|████████  | 179/221 [00:57<00:15,  2.64it/s][A
 81%|████████▏ | 180/221 [00:57<00:12,  3.37it/s][A[h264 @ 0x55935a6fcbc0] mmco: unref short failure

 82%|████████▏ | 181/221 [00:57<00:11,  3.44it/s][A
 82%|████████▏ | 182/221 [00:57<00:10,  3.81it/s][A
 83%|████████▎ | 183/221 [00:58<00:11,  3.35it/s][A
 83%|████████▎ | 184/221 [00:58<00:11,  3.34it/s][A
 84%|████████▎ | 185/221 [00:58<00:09,  3.75it/s][A
 84%|████████▍ | 186/221 [00:59<00:12,  2.84it/s][A
 85%|████████▍ | 187/221 [00:59<00:11,  3.08it/s][A
 85%|████████▌ | 188/221 [00:59<00:10,  3.08it/s][A
 86%|████████▌ | 189/221 [00:59<00:09,  3.51it/s][A
 86%|████████▌ | 190/221 [01:00<00:10,  3.07it/s][A
 86%|████████▋ | 191/221 [01:00<00:07,  3.83it/s][A
 87%|████████▋ | 192/221 [01:00<00:07,  3.89it/s][A
 87%|████████▋ | 193/221 [01:00<00:06,  4.29it/s][A
 88%|████████▊ | 194/221 [01:01<00:07,  3.82it/s][A
 88%|████████▊ | 195/221 [01:01<00:06,  3.92it/s][A
 89%|████████▊ | 196/221 [01:02<00:11,  2.21it/s][A
 89%|████████▉ | 197/221 [01:02<00:09,  2.41it/s][A
 90%|████████▉ | 198/221 [01:03<00:09,  2.32it/s][A
 90%|█████████ | 199/221 [01:03<00:07,  2.92it/s][A
 90%|█████████ | 200/221 [01:03<00:06,  3.35it/s][A
 91%|█████████ | 201/221 [01:03<00:05,  3.62it/s][A
 91%|█████████▏| 202/221 [01:04<00:05,  3.45it/s][A
 92%|█████████▏| 203/221 [01:04<00:05,  3.58it/s][A
 92%|█████████▏| 204/221 [01:04<00:04,  3.72it/s][A
 93%|█████████▎| 205/221 [01:04<00:04,  3.93it/s][A
 93%|█████████▎| 206/221 [01:05<00:05,  2.86it/s][A
 94%|█████████▎| 207/221 [01:05<00:04,  2.81it/s][A
 94%|█████████▍| 208/221 [01:05<00:03,  3.28it/s][A
 95%|█████████▍| 209/221 [01:06<00:03,  3.05it/s][A
 95%|█████████▌| 210/221 [01:06<00:03,  3.48it/s][A
 95%|█████████▌| 211/221 [01:06<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [01:07<00:02,  3.26it/s][A
 96%|█████████▋| 213/221 [01:07<00:02,  3.04it/s][A
 97%|█████████▋| 214/221 [01:08<00:02,  2.67it/s][A
 97%|█████████▋| 215/221 [01:08<00:02,  2.90it/s][A[h264 @ 0x555ffc78cdc0] mmco: unref short failure

 98%|█████████▊| 216/221 [01:08<00:01,  2.83it/s][A
 98%|█████████▊| 217/221 [01:08<00:01,  2.88it/s][A
 99%|█████████▊| 218/221 [01:09<00:00,  3.14it/s][A
 99%|█████████▉| 219/221 [01:09<00:00,  3.07it/s][A
100%|█████████▉| 220/221 [01:09<00:00,  3.36it/s][A
100%|██████████| 221/221 [01:10<00:00,  3.04it/s][A100%|██████████| 221/221 [01:10<00:00,  3.15it/s]
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'area_r1': 40.3, 'area_recall': '40.3/65.8/76.2', 'area_ravg': 60.8}
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'forward_r1': 37.3, 'forward_recall': '37.3/65.6/75.8', 'forward_ravg': 59.6}
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/67.4/77.8', 'area_video_ravg': 61.5}
09/17/2024 05:04:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 05:04:40 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.8/83.4', 'area_video_ravg': 70.7, 'area_video_back_r1': 48.6, 'area_video_back_recall': '48.6/74.4/81.4', 'area_video_back_ravg': 68.2}
09/17/2024 05:04:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 05:04:40 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'video_r1': 35.9, 'video_recall': '35.9/64.5/74.1', 'video_ravg': 58.1}
09/17/2024 05:04:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 05:04:40 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 05:04:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 499--===========

09/17/2024 05:04:40 - INFO - __main__ -   {'video_r1': 52.5, 'video_recall': '52.5/75.7/82.6', 'video_ravg': 70.2}
09/17/2024 05:04:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 05:04:40 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x55a025908bc0] mmco: unref short failure
[h264 @ 0x555fdcb70300] mmco: unref short failure
[h264 @ 0x555fdcb70300] mmco: unref short failure
[h264 @ 0x55600e24da40] mmco: unref short failure
[h264 @ 0x55d4bc2657c0] mmco: unref short failure
[h264 @ 0x555fe343e0c0] mmco: unref short failure
[h264 @ 0x555fe343e0c0] mmco: unref short failure
[h264 @ 0x55d4e0d25080] mmco: unref short failure
[h264 @ 0x55a019811240] mmco: unref short failure
09/17/2024 05:05:14 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0097268745303154, 'loss_ret%tv%ta--finetune_area/loss_area': 1.3246493339538574, 'loss_ret%tv%ta--finetune_area/total_loss': 1.3343762159347534}
[h264 @ 0x55a01dec3100] mmco: unref short failure
 34%|███▍      | 500/1455 [5:24:57<45:37:28, 171.99s/it][h264 @ 0x55d4b9979fc0] mmco: unref short failure
[h264 @ 0x55a01d5236c0] mmco: unref short failure
 34%|███▍      | 501/1455 [5:25:05<32:30:48, 122.69s/it][h264 @ 0x55d4e0d25080] mmco: unref short failure
 35%|███▍      | 502/1455 [5:25:12<23:18:55, 88.08s/it] [h264 @ 0x555fe297ecc0] mmco: unref short failure
[h264 @ 0x555fe297ecc0] mmco: unref short failure
[h264 @ 0x555fe297ecc0] mmco: unref short failure
[h264 @ 0x555fe297ecc0] mmco: unref short failure
[h264 @ 0x555feee91f80] mmco: unref short failure
[h264 @ 0x555feee91f80] mmco: unref short failure
[h264 @ 0x555feee91f80] mmco: unref short failure
[h264 @ 0x555feee91f80] mmco: unref short failure
 35%|███▍      | 503/1455 [5:25:20<16:54:57, 63.97s/it][h264 @ 0x555fe39502c0] mmco: unref short failure
[h264 @ 0x555fe39502c0] mmco: unref short failure
[h264 @ 0x55a01a480780] mmco: unref short failure
[h264 @ 0x55a01a480780] mmco: unref short failure
[h264 @ 0x55936457d000] mmco: unref short failure
[h264 @ 0x55936457d000] mmco: unref short failure
 35%|███▍      | 504/1455 [5:25:28<12:28:57, 47.25s/it][h264 @ 0x55a00fcbae80] mmco: unref short failure
[h264 @ 0x55a00fcbae80] mmco: unref short failure
 35%|███▍      | 505/1455 [5:25:37<9:24:36, 35.66s/it] [h264 @ 0x55d4c819e5c0] mmco: unref short failure
[h264 @ 0x55d4c819e5c0] mmco: unref short failure
 35%|███▍      | 506/1455 [5:25:45<7:16:11, 27.58s/it][h264 @ 0x55d4e9cfa8c0] mmco: unref short failure
[h264 @ 0x5560065d89c0] mmco: unref short failure
[h264 @ 0x5560065d89c0] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
 35%|███▍      | 507/1455 [5:25:54<5:46:22, 21.92s/it] 35%|███▍      | 508/1455 [5:26:03<4:45:01, 18.06s/it][h264 @ 0x555feeddec00] mmco: unref short failure
 35%|███▍      | 509/1455 [5:26:12<4:02:09, 15.36s/it][h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x555fff349480] mmco: unref short failure
[h264 @ 0x55a02b9c55c0] mmco: unref short failure
[h264 @ 0x55a02b9c55c0] mmco: unref short failure
 35%|███▌      | 510/1455 [5:26:21<3:31:05, 13.40s/it][h264 @ 0x555fe2961f80] mmco: unref short failure
[h264 @ 0x555fe2961f80] mmco: unref short failure
 35%|███▌      | 511/1455 [5:26:30<3:09:03, 12.02s/it][h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x55a01f990f80] mmco: unref short failure
[h264 @ 0x55d4cd5bfa00] mmco: unref short failure
[h264 @ 0x55d4cd5bfa00] mmco: unref short failure
 35%|███▌      | 512/1455 [5:26:39<2:54:30, 11.10s/it][h264 @ 0x55933d1a3300] mmco: unref short failure
 35%|███▌      | 513/1455 [5:26:48<2:44:36, 10.48s/it][h264 @ 0x555fda1b6b00] mmco: unref short failure
[h264 @ 0x55d4e9cfa8c0] mmco: unref short failure
 35%|███▌      | 514/1455 [5:26:56<2:35:26,  9.91s/it] 35%|███▌      | 515/1455 [5:27:05<2:30:31,  9.61s/it][h264 @ 0x55933530e2c0] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x559336d55400] mmco: unref short failure
[h264 @ 0x5593626f6e00] mmco: unref short failure
[h264 @ 0x55d4d3a49e40] mmco: unref short failure
[h264 @ 0x55d4d3a49e40] mmco: unref short failure
[h264 @ 0x559347d15c00] mmco: unref short failure
[h264 @ 0x555fee052640] mmco: unref short failure
[h264 @ 0x555fee052640] mmco: unref short failure
[h264 @ 0x55d4b702a5c0] mmco: unref short failure
[h264 @ 0x55a038d54d00] mmco: unref short failure
[h264 @ 0x5593626f6e00] mmco: unref short failure
[h264 @ 0x5593626f6e00] mmco: unref short failure
[h264 @ 0x55934d148a40] mmco: unref short failure
[h264 @ 0x55d4db51d600] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x555fe88c8240] mmco: unref short failure
[h264 @ 0x555fe88c8240] mmco: unref short failure
[h264 @ 0x55935585df00] mmco: unref short failure
[h264 @ 0x55a03f67cb80] mmco: unref short failure
[h264 @ 0x55935066f9c0] mmco: unref short failure
09/17/2024 05:09:13 - INFO - __main__ -   current idx XY_lzonfE3I.29 from finetune_area returns wrong image/video, use 53671 instead.
[h264 @ 0x55d4ba157a00] mmco: unref short failure
09/17/2024 05:09:22 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 54858 instead.
[h264 @ 0x555fe201dc80] mmco: unref short failure
[h264 @ 0x555fe201dc80] mmco: unref short failure
[h264 @ 0x559354f45f00] mmco: unref short failure
[h264 @ 0x559360b68c40] mmco: unref short failure
[h264 @ 0x559360b68c40] mmco: unref short failure
[h264 @ 0x559360b68c40] mmco: unref short failure
[h264 @ 0x559360b68c40] mmco: unref short failure
[h264 @ 0x55a014d26980] mmco: unref short failure
[h264 @ 0x55a014d26980] mmco: unref short failure
[h264 @ 0x55a034db9ec0] mmco: unref short failure
[h264 @ 0x55a034db9ec0] mmco: unref short failure
[h264 @ 0x55a0235134c0] mmco: unref short failure
[h264 @ 0x55a0235134c0] mmco: unref short failure
[h264 @ 0x55a036330080] mmco: unref short failure
 35%|███▌      | 516/1455 [5:29:23<12:30:22, 47.95s/it][h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55d4e27d4dc0] mmco: unref short failure
[h264 @ 0x55a02251e940] mmco: unref short failure
[h264 @ 0x55a02251e940] mmco: unref short failure
 36%|███▌      | 517/1455 [5:29:36<9:47:31, 37.58s/it] [h264 @ 0x555fe88c8240] mmco: unref short failure
[h264 @ 0x55d4bca38e40] mmco: unref short failure
[h264 @ 0x55d4bca38e40] mmco: unref short failure
[h264 @ 0x55934b6ca700] mmco: unref short failure
[h264 @ 0x559356f844c0] mmco: unref short failure
[h264 @ 0x55a013cadec0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
 36%|███▌      | 518/1455 [5:30:06<9:12:40, 35.39s/it][h264 @ 0x55d4d9399c80] mmco: unref short failure
[h264 @ 0x55d4d9399c80] mmco: unref short failure
[h264 @ 0x55d4d9399c80] mmco: unref short failure
[h264 @ 0x55d4d9399c80] mmco: unref short failure
[h264 @ 0x55601f8a4180] mmco: unref short failure
[h264 @ 0x55601f8a4180] mmco: unref short failure
 36%|███▌      | 519/1455 [5:30:15<7:08:25, 27.46s/it][h264 @ 0x55a00fb76f40] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x55d4c51c2440] mmco: unref short failure
[h264 @ 0x55d4c51c2440] mmco: unref short failure
 36%|███▌      | 520/1455 [5:30:28<5:58:14, 22.99s/it][h264 @ 0x55d4bdb90cc0] mmco: unref short failure
[h264 @ 0x55d4bdb90cc0] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x55935fe24000] mmco: unref short failure
[h264 @ 0x55935fe24000] mmco: unref short failure
[h264 @ 0x55a012bbec80] mmco: unref short failure
[h264 @ 0x55a012bbec80] mmco: unref short failure
 36%|███▌      | 521/1455 [5:30:44<5:25:45, 20.93s/it][h264 @ 0x559353f61ec0] mmco: unref short failure
[h264 @ 0x5593342b6a00] mmco: unref short failure
[h264 @ 0x5593342b6a00] mmco: unref short failure
[h264 @ 0x5593342b6a00] mmco: unref short failure
 36%|███▌      | 522/1455 [5:30:53<4:30:10, 17.37s/it] 36%|███▌      | 523/1455 [5:31:02<3:50:50, 14.86s/it][h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x559333ac42c0] mmco: unref short failure
[h264 @ 0x55935ad1bdc0] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x55a029273500] mmco: unref short failure
[h264 @ 0x55a0129ddec0] mmco: unref short failure
[h264 @ 0x55a0129ddec0] mmco: unref short failure
[h264 @ 0x55a01a7a97c0] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x55d4b8684a00] mmco: unref short failure
[h264 @ 0x555fdab5ea80] mmco: unref short failure
[h264 @ 0x555fdab5ea80] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x555ff62fdd00] mmco: unref short failure
09/17/2024 05:12:02 - INFO - __main__ -   current idx ZFfJ2HTRUeU.13 from finetune_area returns wrong image/video, use 81212 instead.
[h264 @ 0x55d4d2e1f380] mmco: unref short failure
[h264 @ 0x55d4d2e1f380] mmco: unref short failure
[h264 @ 0x55d4d2e1f380] mmco: unref short failure
[h264 @ 0x55d4d2e1f380] mmco: unref short failure
[h264 @ 0x55d4c1ce8f40] mmco: unref short failure
[h264 @ 0x55d4c1ce8f40] mmco: unref short failure
[h264 @ 0x55a041d14f40] mmco: unref short failure
[h264 @ 0x55a041d14f40] mmco: unref short failure
09/17/2024 05:12:11 - INFO - __main__ -   current idx 6S63HrRqSXw.2 from finetune_area returns wrong image/video, use 136890 instead.
[h264 @ 0x55a01a7a97c0] mmco: unref short failure
[h264 @ 0x55a01a7a97c0] mmco: unref short failure
[h264 @ 0x55d4bca38e40] mmco: unref short failure
[h264 @ 0x55d4bca38e40] mmco: unref short failure
[h264 @ 0x55a041d14f40] mmco: unref short failure
[h264 @ 0x55a041d14f40] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x559360958740] mmco: unref short failure
[h264 @ 0x5593342c42c0] mmco: unref short failure
[h264 @ 0x55a01e46f440] mmco: unref short failure
[h264 @ 0x55a01e46f440] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x55a03646d300] mmco: unref short failure
[h264 @ 0x555ffd642000] mmco: unref short failure
[h264 @ 0x555ffd642000] mmco: unref short failure
[h264 @ 0x555ffd642000] mmco: unref short failure
[h264 @ 0x5560072b2340] mmco: unref short failure
[h264 @ 0x5560072b2340] mmco: unref short failure
[h264 @ 0x55a01e46f440] mmco: unref short failure
[h264 @ 0x55a01e46f440] mmco: unref short failure
[h264 @ 0x555fe96cce00] mmco: unref short failure
[h264 @ 0x555fe96cce00] mmco: unref short failure
[h264 @ 0x559351587340] mmco: unref short failure
[h264 @ 0x559351587340] mmco: unref short failure
[h264 @ 0x55a03d6652c0] mmco: unref short failure
[h264 @ 0x55a03d6652c0] mmco: unref short failure
[h264 @ 0x55935de0ef40] mmco: unref short failure
[h264 @ 0x55935de0ef40] mmco: unref short failure
[h264 @ 0x559344f82bc0] mmco: unref short failure
[h264 @ 0x559344f82bc0] mmco: unref short failure
[h264 @ 0x55d4d3622ac0] mmco: unref short failure
[h264 @ 0x55d4d3622ac0] mmco: unref short failure
[h264 @ 0x555ff2764240] mmco: unref short failure
[h264 @ 0x555ff2764240] mmco: unref short failure
[h264 @ 0x559364db66c0] mmco: unref short failure
[h264 @ 0x555fff302cc0] mmco: unref short failure
[h264 @ 0x555fff302cc0] mmco: unref short failure
[h264 @ 0x556003ea3f00] mmco: unref short failure
[h264 @ 0x556003ea3f00] mmco: unref short failure
[h264 @ 0x555fed07e000] mmco: unref short failure
[h264 @ 0x55d4b71b1f40] mmco: unref short failure
[h264 @ 0x55d4b71b1f40] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
[h264 @ 0x55933c9b6e80] mmco: unref short failure
[h264 @ 0x55933c9b6e80] mmco: unref short failure
[h264 @ 0x555ffd88d800] mmco: unref short failure
[h264 @ 0x555ffd88d800] mmco: unref short failure
[h264 @ 0x55a02ba41880] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
[h264 @ 0x55a03d0aa5c0] mmco: unref short failure
[h264 @ 0x555fed07e000] mmco: unref short failure
[h264 @ 0x555fed07e000] mmco: unref short failure
[h264 @ 0x55935b7a5f80] mmco: unref short failure
[h264 @ 0x55935b7a5f80] mmco: unref short failure
[h264 @ 0x555fe96cce00] mmco: unref short failure
[h264 @ 0x55a0422e6bc0] mmco: unref short failure
[h264 @ 0x5560000f6c00] mmco: unref short failure
[h264 @ 0x5560000f6c00] mmco: unref short failure
[h264 @ 0x5560000f6c00] mmco: unref short failure
[h264 @ 0x5560000f6c00] mmco: unref short failure
09/17/2024 05:14:34 - INFO - __main__ -   current idx 7tqvfeOf2ug.2 from finetune_area returns wrong image/video, use 7897 instead.
[h264 @ 0x55d4e9cddc40] mmco: unref short failure
[h264 @ 0x55d4e9cddc40] mmco: unref short failure
 36%|███▌      | 524/1455 [5:34:17<17:49:47, 68.95s/it][h264 @ 0x555fed07e000] mmco: unref short failure
 36%|███▌      | 525/1455 [5:34:43<14:27:43, 55.98s/it][h264 @ 0x55a01a40c980] mmco: unref short failure
[h264 @ 0x55a01a40c980] mmco: unref short failure
[h264 @ 0x55a01fea9d40] mmco: unref short failure
[h264 @ 0x55a01fea9d40] mmco: unref short failure
[h264 @ 0x55a032f35740] mmco: unref short failure
[h264 @ 0x55a032f35740] mmco: unref short failure
[h264 @ 0x55a02766f580] mmco: unref short failure
 36%|███▌      | 526/1455 [5:35:11<12:17:22, 47.62s/it][h264 @ 0x55935f387900] mmco: unref short failure
[h264 @ 0x555fd9478600] mmco: unref short failure
[h264 @ 0x555fd9478600] mmco: unref short failure
 36%|███▌      | 527/1455 [5:35:20<9:17:49, 36.07s/it]  36%|███▋      | 528/1455 [5:35:29<7:11:20, 27.92s/it][h264 @ 0x555fdf535c80] mmco: unref short failure
[h264 @ 0x555fd91f7980] mmco: unref short failure
[h264 @ 0x555fd91f7980] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55a028e8ef40] mmco: unref short failure
 36%|███▋      | 529/1455 [5:35:45<6:15:17, 24.32s/it][h264 @ 0x55d4ead49e00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
 36%|███▋      | 530/1455 [5:35:57<5:18:57, 20.69s/it][h264 @ 0x55d4d92e2d00] mmco: unref short failure
 36%|███▋      | 531/1455 [5:36:06<4:23:39, 17.12s/it][h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x559362dbb6c0] mmco: unref short failure
[h264 @ 0x556000e5f6c0] mmco: unref short failure
[h264 @ 0x55a014cbcd40] mmco: unref short failure
[h264 @ 0x55a014cbcd40] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555ffd7c5000] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55a0415a48c0] mmco: unref short failure
[h264 @ 0x55a0415a48c0] mmco: unref short failure
[h264 @ 0x555fed28e700] mmco: unref short failure
[h264 @ 0x555fed28e700] mmco: unref short failure
[h264 @ 0x559367eb7bc0] mmco: unref short failure
[h264 @ 0x559367eb7bc0] mmco: unref short failure
[h264 @ 0x55600213f380] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55933cd199c0] mmco: unref short failure
[h264 @ 0x55d4df0e8680] mmco: unref short failure
[h264 @ 0x55935f387900] mmco: unref short failure
09/17/2024 05:18:12 - INFO - __main__ -   current idx EDyva2crZas.40 from finetune_area returns wrong image/video, use 31461 instead.
[h264 @ 0x555fec46fc40] mmco: unref short failure
[h264 @ 0x555fec46fc40] mmco: unref short failure
[h264 @ 0x55934b286b80] mmco: unref short failure
[h264 @ 0x55a042fbedc0] mmco: unref short failure
09/17/2024 05:18:38 - INFO - __main__ -   current idx 4VH9UPwnHCQ.1 from finetune_area returns wrong image/video, use 3901 instead.
[h264 @ 0x55d4b702a5c0] mmco: unref short failure
[h264 @ 0x55d4b702a5c0] mmco: unref short failure
[h264 @ 0x55d4b702a5c0] mmco: unref short failure
[h264 @ 0x55d4b702a5c0] mmco: unref short failure
[h264 @ 0x55d4db51d600] mmco: unref short failure
[h264 @ 0x55d4db51d600] mmco: unref short failure
[h264 @ 0x55a01b10b540] mmco: unref short failure
[h264 @ 0x55a01b10b540] mmco: unref short failure
[h264 @ 0x55a01b10b540] mmco: unref short failure
[h264 @ 0x55a01b10b540] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x5593418c8a80] mmco: unref short failure
[h264 @ 0x55a0422e6bc0] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x55d4c8157480] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x559360785080] mmco: unref short failure
[h264 @ 0x55a01a40c980] mmco: unref short failure
[h264 @ 0x55a025d8c1c0] mmco: unref short failure
[h264 @ 0x55a025d8c1c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
 37%|███▋      | 532/1455 [5:39:13<17:27:50, 68.12s/it][h264 @ 0x55d4ba5d5740] mmco: unref short failure
[h264 @ 0x55d4b71b1f40] mmco: unref short failure
[h264 @ 0x55936868c9c0] mmco: unref short failure
[h264 @ 0x55936868c9c0] mmco: unref short failure
[h264 @ 0x55d4eb1b66c0] mmco: unref short failure
[h264 @ 0x55d4bdb90cc0] mmco: unref short failure
 37%|███▋      | 533/1455 [5:39:39<14:10:20, 55.34s/it][h264 @ 0x55d4b88df840] mmco: unref short failure
[h264 @ 0x55d4b88df840] mmco: unref short failure
[h264 @ 0x555ff95c8d00] mmco: unref short failure
[h264 @ 0x555ff95c8d00] mmco: unref short failure
[h264 @ 0x555ff95c8d00] mmco: unref short failure
[h264 @ 0x555ff95c8d00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x55934c6d0d00] mmco: unref short failure
[h264 @ 0x55a0129b3dc0] mmco: unref short failure
[h264 @ 0x55a0129b3dc0] mmco: unref short failure
 37%|███▋      | 534/1455 [5:40:16<12:46:34, 49.94s/it][h264 @ 0x556028960700] mmco: unref short failure
[h264 @ 0x556028960700] mmco: unref short failure
[h264 @ 0x555fe7507bc0] mmco: unref short failure
[h264 @ 0x555fe7507bc0] mmco: unref short failure
 37%|███▋      | 535/1455 [5:40:25<9:38:02, 37.70s/it] [h264 @ 0x559343ea6040] mmco: unref short failure
[h264 @ 0x55d4b7856ec0] mmco: unref short failure
[h264 @ 0x55600df3e580] mmco: unref short failure
[h264 @ 0x55600df3e580] mmco: unref short failure
 37%|███▋      | 536/1455 [5:40:34<7:23:21, 28.95s/it]09/17/2024 05:20:58 - INFO - __main__ -   current idx KPOxRziYDzs.2 from finetune_area returns wrong image/video, use 35375 instead.
[h264 @ 0x55934359e3c0] mmco: unref short failure
[h264 @ 0x55934359e3c0] mmco: unref short failure
 37%|███▋      | 537/1455 [5:40:43<5:53:49, 23.13s/it][h264 @ 0x55d4cb2e0080] mmco: unref short failure
[h264 @ 0x55d4cb2e0080] mmco: unref short failure
[h264 @ 0x55a00efe7e40] mmco: unref short failure
[h264 @ 0x55a00efe7e40] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55a01e46f440] mmco: unref short failure
 37%|███▋      | 538/1455 [5:41:01<5:26:57, 21.39s/it] 37%|███▋      | 539/1455 [5:41:10<4:29:32, 17.66s/it]09/17/2024 05:21:41 - INFO - __main__ -   current idx gRQlnvFSOjM.28 from finetune_area returns wrong image/video, use 62929 instead.
[h264 @ 0x5560033d7000] mmco: unref short failure
[h264 @ 0x5560033d7000] mmco: unref short failure
09/17/2024 05:21:48 - INFO - __main__ -   current idx BdXk2SoCZnM.55 from finetune_area returns wrong image/video, use 71005 instead.
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x559364db66c0] mmco: unref short failure
[h264 @ 0x55935de0ef40] mmco: unref short failure
[h264 @ 0x55935de0ef40] mmco: unref short failure
[h264 @ 0x55d4bd181b40] mmco: unref short failure
[h264 @ 0x55d4bd181b40] mmco: unref short failure
[h264 @ 0x55a021a53640] mmco: unref short failure
[h264 @ 0x55a021a53640] mmco: unref short failure
[h264 @ 0x55d4b71b1f40] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55600e23bc80] mmco: unref short failure
[h264 @ 0x55d4c77c8980] mmco: unref short failure
[h264 @ 0x55a035eae9c0] mmco: unref short failure
[h264 @ 0x555fe7a89cc0] mmco: unref short failure
[h264 @ 0x555fe7a89cc0] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x55d4d04e4900] mmco: unref short failure
[h264 @ 0x55d4d04e4900] mmco: unref short failure
[h264 @ 0x555fe23cbc80] mmco: unref short failure
[h264 @ 0x55d4e27ccb40] mmco: unref short failure
[h264 @ 0x55d4e27ccb40] mmco: unref short failure
[h264 @ 0x55a0128b3ac0] mmco: unref short failure
[h264 @ 0x55a0128b3ac0] mmco: unref short failure
09/17/2024 05:23:17 - INFO - __main__ -   current idx JOgG5komufg.1 from finetune_area returns wrong image/video, use 57730 instead.
[h264 @ 0x555fde683340] mmco: unref short failure
[h264 @ 0x55936bf3a6c0] mmco: unref short failure
[h264 @ 0x555fe23cbc80] mmco: unref short failure
[h264 @ 0x555fe23cbc80] mmco: unref short failure
[h264 @ 0x55a0128b3ac0] mmco: unref short failure
[h264 @ 0x555fe204ca80] mmco: unref short failure
[h264 @ 0x555fe204ca80] mmco: unref short failure
[h264 @ 0x55a045b772c0] mmco: unref short failure
[h264 @ 0x55a045b772c0] mmco: unref short failure
[h264 @ 0x55d4bd64bec0] mmco: unref short failure
[h264 @ 0x55934b286b80] mmco: unref short failure
[h264 @ 0x5593538dc880] mmco: unref short failure
[h264 @ 0x55a041d14f40] mmco: unref short failure
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
 37%|███▋      | 540/1455 [5:44:18<17:29:11, 68.80s/it] 37%|███▋      | 541/1455 [5:44:31<13:14:00, 52.12s/it][h264 @ 0x555fed07e000] mmco: unref short failure
[h264 @ 0x55933fc23140] mmco: unref short failure
[h264 @ 0x55933fc23140] mmco: unref short failure
[h264 @ 0x55933fc23140] mmco: unref short failure
[h264 @ 0x55933fc23140] mmco: unref short failure
[h264 @ 0x55d4bb8dcd80] mmco: unref short failure
[h264 @ 0x55d4bb8dcd80] mmco: unref short failure
[h264 @ 0x55d4c739e940] mmco: unref short failure
 37%|███▋      | 542/1455 [5:45:01<11:34:37, 45.65s/it][h264 @ 0x55a046719240] mmco: unref short failure
[h264 @ 0x55a046719240] mmco: unref short failure
 37%|███▋      | 543/1455 [5:45:10<8:45:35, 34.58s/it] [h264 @ 0x55d4df46ba00] mmco: unref short failure
[h264 @ 0x55d4df46ba00] mmco: unref short failure
[h264 @ 0x55d4df46ba00] mmco: unref short failure
[h264 @ 0x55d4df46ba00] mmco: unref short failure
[h264 @ 0x55a03779ea40] mmco: unref short failure
[h264 @ 0x55a03779ea40] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
[h264 @ 0x55a018e6c5c0] mmco: unref short failure
 37%|███▋      | 544/1455 [5:45:22<7:01:52, 27.79s/it][h264 @ 0x55a016707cc0] mmco: unref short failure
[h264 @ 0x55a016707cc0] mmco: unref short failure
[h264 @ 0x5593503383c0] mmco: unref short failure
[h264 @ 0x555fe7a89cc0] mmco: unref short failure
[h264 @ 0x555fe7a89cc0] mmco: unref short failure
[h264 @ 0x5593359adc80] mmco: unref short failure
[h264 @ 0x5593359adc80] mmco: unref short failure
[h264 @ 0x559354f45f00] mmco: unref short failure
[h264 @ 0x55a027545180] mmco: unref short failure
[h264 @ 0x55a027545180] mmco: unref short failure
 37%|███▋      | 545/1455 [5:45:48<6:51:40, 27.14s/it][h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4c3c307c0] mmco: unref short failure
[h264 @ 0x55d4cbf86e40] mmco: unref short failure
[h264 @ 0x55d4cbf86e40] mmco: unref short failure
[h264 @ 0x55d4cbf86e40] mmco: unref short failure
[h264 @ 0x55d4cbf86e40] mmco: unref short failure
 38%|███▊      | 546/1455 [5:46:05<6:05:34, 24.13s/it][h264 @ 0x555fe6146140] mmco: unref short failure
[h264 @ 0x555fe6146140] mmco: unref short failure
[h264 @ 0x559340f5ca80] mmco: unref short failure
[h264 @ 0x559340f5ca80] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x555fdb4c45c0] mmco: unref short failure
[h264 @ 0x55d4d899c3c0] mmco: unref short failure
[h264 @ 0x55d4df913e40] mmco: unref short failure
 38%|███▊      | 547/1455 [5:46:15<5:01:36, 19.93s/it]09/17/2024 05:26:38 - INFO - __main__ -   current idx JLcL4VGOk3o.15 from finetune_area returns wrong image/video, use 117545 instead.
09/17/2024 05:26:39 - INFO - __main__ -   current idx kZsPqzB36mk.13 from finetune_area returns wrong image/video, use 28628 instead.
[h264 @ 0x55d4df46ba00] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555fe7952e80] mmco: unref short failure
[h264 @ 0x55a0363272c0] mmco: unref short failure
[h264 @ 0x55a0363272c0] mmco: unref short failure
[h264 @ 0x55a03c10c040] mmco: unref short failure
[h264 @ 0x55a03c10c040] mmco: unref short failure
[h264 @ 0x555fdeb13340] mmco: unref short failure
[h264 @ 0x55d4e5226fc0] mmco: unref short failure
[h264 @ 0x55d4e5226fc0] mmco: unref short failure
[h264 @ 0x55d4e26accc0] mmco: unref short failure
[h264 @ 0x55d4e26accc0] mmco: unref short failure
[h264 @ 0x555fef63af00] mmco: unref short failure
[h264 @ 0x555fef63af00] mmco: unref short failure
[h264 @ 0x55a01a067300] mmco: unref short failure
[h264 @ 0x55a01a067300] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x55a00eb5c6c0] mmco: unref short failure
[h264 @ 0x55a00eb5c6c0] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x55935de0ef40] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x55d4bdb81a40] mmco: unref short failure
[h264 @ 0x559368941900] mmco: unref short failure
[h264 @ 0x559368941900] mmco: unref short failure
[h264 @ 0x55d4b7ba30c0] mmco: unref short failure
[h264 @ 0x55d4b7ba30c0] mmco: unref short failure
[h264 @ 0x555fdccee0c0] mmco: unref short failure
[h264 @ 0x555fdccee0c0] mmco: unref short failure
[h264 @ 0x559344d57180] mmco: unref short failure
[h264 @ 0x5593364aa2c0] mmco: unref short failure
[h264 @ 0x55a03a268cc0] mmco: unref short failure
[h264 @ 0x55a03a268cc0] mmco: unref short failure
[h264 @ 0x55d4b7856ec0] mmco: unref short failure
[h264 @ 0x55d4b7856ec0] mmco: unref short failure
[h264 @ 0x555fe7952e80] mmco: unref short failure
[h264 @ 0x55935d979dc0] mmco: unref short failure
[h264 @ 0x55935d979dc0] mmco: unref short failure
[h264 @ 0x55d4c08e6400] mmco: unref short failure
[h264 @ 0x55d4c08e6400] mmco: unref short failure
[h264 @ 0x55a03e2c58c0] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x55d4cc6cd080] mmco: unref short failure
[h264 @ 0x55d4cc6cd080] mmco: unref short failure
[h264 @ 0x55d4c6678640] mmco: unref short failure
[h264 @ 0x55d4c6678640] mmco: unref short failure
[h264 @ 0x55d4c6678640] mmco: unref short failure
[h264 @ 0x55d4c6678640] mmco: unref short failure
[h264 @ 0x555ffaae5700] mmco: unref short failure
[h264 @ 0x555ffaae5700] mmco: unref short failure
[h264 @ 0x55933f8f4080] mmco: unref short failure
[h264 @ 0x55933f8f4080] mmco: unref short failure
 38%|███▊      | 548/1455 [5:49:15<17:06:54, 67.93s/it][h264 @ 0x555fe7507bc0] mmco: unref short failure
[h264 @ 0x55a00ee33600] mmco: unref short failure
[h264 @ 0x55d4b87d7180] mmco: unref short failure
[h264 @ 0x55d4b87d7180] mmco: unref short failure
[h264 @ 0x559364dd4380] mmco: unref short failure
 38%|███▊      | 549/1455 [5:49:34<13:25:30, 53.34s/it]09/17/2024 05:29:56 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 05:29:56 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x559364dd4380] mmco: unref short failure
[h264 @ 0x559364dd4380] mmco: unref short failure
[h264 @ 0x559364dd4380] mmco: unref short failure
[h264 @ 0x559364dd4380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 05:30:12 - INFO - __main__ -   current idx c0na5aaBMBE.58 from finetune_area returns wrong image/video, use 11004 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 05:30:39 - INFO - __main__ -   current idx HnCSd-QjKvs.136 from finetune_area returns wrong image/video, use 104332 instead.
09/17/2024 05:30:44 - INFO - __main__ -   current idx ISueLekeFew.95 from finetune_area returns wrong image/video, use 15542 instead.
[h264 @ 0x5593503383c0] mmco: unref short failure
[h264 @ 0x5593503383c0] mmco: unref short failure
[h264 @ 0x55d4d1168440] mmco: unref short failure
[h264 @ 0x555ff7b40d80] mmco: unref short failure
[h264 @ 0x555ffa278540] mmco: unref short failure
[h264 @ 0x555ffa278540] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x55d4cae7a440] mmco: unref short failure
[h264 @ 0x555fe2a1be00] mmco: unref short failure
[h264 @ 0x555fe2a1be00] mmco: unref short failure
[h264 @ 0x555fe2a1be00] mmco: unref short failure
[h264 @ 0x555fe2a1be00] mmco: unref short failure
[h264 @ 0x55d4cf658940] mmco: unref short failure
[h264 @ 0x55d4cf658940] mmco: unref short failure
[h264 @ 0x55a020b5ac00] mmco: unref short failure
[h264 @ 0x55a020b5ac00] mmco: unref short failure
[h264 @ 0x55a0101dfc40] mmco: unref short failure
[h264 @ 0x55a0101dfc40] mmco: unref short failure
[h264 @ 0x55a03a268cc0] mmco: unref short failure
[h264 @ 0x55d4cab8a740] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:01<03:42,  1.01s/it][A
  1%|          | 2/221 [00:01<02:47,  1.31it/s][A
  1%|▏         | 3/221 [00:01<01:53,  1.92it/s][A
  2%|▏         | 5/221 [00:02<01:03,  3.43it/s][A
  3%|▎         | 6/221 [00:02<00:52,  4.10it/s][A
  3%|▎         | 7/221 [00:02<00:55,  3.84it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.21it/s][A
  4%|▍         | 9/221 [00:03<01:05,  3.26it/s][A
  5%|▍         | 10/221 [00:03<01:32,  2.28it/s][A
  5%|▍         | 11/221 [00:04<01:16,  2.74it/s][A
  5%|▌         | 12/221 [00:04<01:15,  2.76it/s][A
  6%|▌         | 13/221 [00:04<01:06,  3.11it/s][A[h264 @ 0x55d4e14d90c0] mmco: unref short failure
[h264 @ 0x55d4e14d90c0] mmco: unref short failure

  6%|▋         | 14/221 [00:05<02:02,  1.70it/s][A
  7%|▋         | 15/221 [00:06<01:37,  2.11it/s][A
  7%|▋         | 16/221 [00:06<01:34,  2.18it/s][A
  8%|▊         | 17/221 [00:06<01:21,  2.49it/s][A
  8%|▊         | 18/221 [00:07<01:15,  2.69it/s][A
  9%|▊         | 19/221 [00:07<01:00,  3.33it/s][A
  9%|▉         | 20/221 [00:07<00:51,  3.90it/s][A
 10%|▉         | 21/221 [00:07<00:49,  4.03it/s][A
 10%|▉         | 22/221 [00:07<00:53,  3.74it/s][A[h264 @ 0x555fef63af00] mmco: unref short failure
[h264 @ 0x555fef63af00] mmco: unref short failure

 10%|█         | 23/221 [00:08<00:43,  4.56it/s][A
 11%|█         | 24/221 [00:08<00:40,  4.89it/s][A
 11%|█▏        | 25/221 [00:08<00:44,  4.37it/s][A
 12%|█▏        | 26/221 [00:08<00:49,  3.93it/s][A
 12%|█▏        | 27/221 [00:08<00:41,  4.71it/s][A
 13%|█▎        | 28/221 [00:09<01:02,  3.07it/s][A
 13%|█▎        | 29/221 [00:09<00:50,  3.78it/s][A
 14%|█▎        | 30/221 [00:09<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:10<00:51,  3.70it/s][A
 14%|█▍        | 32/221 [00:10<00:41,  4.54it/s][A
 15%|█▍        | 33/221 [00:10<00:47,  3.96it/s][A
 15%|█▌        | 34/221 [00:10<00:45,  4.10it/s][A
 16%|█▌        | 35/221 [00:11<00:43,  4.25it/s][A
 16%|█▋        | 36/221 [00:11<00:48,  3.83it/s][A
 17%|█▋        | 37/221 [00:11<01:04,  2.86it/s][A
 17%|█▋        | 38/221 [00:12<01:07,  2.71it/s][A
 18%|█▊        | 39/221 [00:12<00:54,  3.33it/s][A[h264 @ 0x55d4b8da3500] mmco: unref short failure

 18%|█▊        | 40/221 [00:12<00:59,  3.03it/s][A
 19%|█▊        | 41/221 [00:13<00:49,  3.67it/s][A
 19%|█▉        | 42/221 [00:13<00:59,  3.01it/s][A
 19%|█▉        | 43/221 [00:13<00:48,  3.69it/s][A[h264 @ 0x555ff5368dc0] mmco: unref short failure
[h264 @ 0x555ff5368dc0] mmco: unref short failure

 20%|██        | 45/221 [00:14<01:04,  2.73it/s][A
 21%|██        | 46/221 [00:15<01:10,  2.47it/s][A
 21%|██▏       | 47/221 [00:15<01:18,  2.20it/s][A
 22%|██▏       | 48/221 [00:15<01:04,  2.70it/s][A
 22%|██▏       | 49/221 [00:16<00:54,  3.15it/s][A
 23%|██▎       | 50/221 [00:16<00:44,  3.88it/s][A
 23%|██▎       | 51/221 [00:16<00:38,  4.44it/s][A
 24%|██▎       | 52/221 [00:16<00:38,  4.40it/s][A
 24%|██▍       | 53/221 [00:16<00:40,  4.10it/s][A
 24%|██▍       | 54/221 [00:18<01:54,  1.46it/s][A
 25%|██▍       | 55/221 [00:18<01:35,  1.74it/s][A[h264 @ 0x55d4cc6cd080] mmco: unref short failure
[h264 @ 0x55d4cc6cd080] mmco: unref short failure

 25%|██▌       | 56/221 [00:19<01:21,  2.03it/s][A
 26%|██▌       | 57/221 [00:19<01:14,  2.19it/s][A
 26%|██▌       | 58/221 [00:19<01:01,  2.63it/s][A
 27%|██▋       | 59/221 [00:20<01:00,  2.66it/s][A[h264 @ 0x55a018d58300] mmco: unref short failure

 27%|██▋       | 60/221 [00:20<01:12,  2.22it/s][A
 28%|██▊       | 61/221 [00:21<01:02,  2.56it/s][A
 28%|██▊       | 62/221 [00:21<00:56,  2.82it/s][A
 29%|██▊       | 63/221 [00:21<00:51,  3.05it/s][A[h264 @ 0x55a018d58300] mmco: unref short failure

 29%|██▉       | 64/221 [00:21<00:48,  3.27it/s][A
 29%|██▉       | 65/221 [00:22<00:45,  3.45it/s][A
 30%|██▉       | 66/221 [00:22<00:52,  2.97it/s][A
 30%|███       | 67/221 [00:23<01:02,  2.45it/s][A
 31%|███       | 68/221 [00:23<00:52,  2.90it/s][A
 31%|███       | 69/221 [00:24<01:12,  2.09it/s][A
 32%|███▏      | 70/221 [00:24<00:57,  2.62it/s][A
 32%|███▏      | 71/221 [00:24<01:09,  2.17it/s][A
 33%|███▎      | 72/221 [00:25<01:00,  2.44it/s][A
 33%|███▎      | 73/221 [00:25<01:02,  2.37it/s][A
 33%|███▎      | 74/221 [00:25<00:57,  2.58it/s][A
 34%|███▍      | 75/221 [00:26<01:02,  2.32it/s][A
 34%|███▍      | 76/221 [00:26<00:56,  2.55it/s][A
 35%|███▍      | 77/221 [00:27<00:52,  2.74it/s][A
 35%|███▌      | 78/221 [00:27<00:53,  2.65it/s][A
 36%|███▌      | 79/221 [00:28<01:01,  2.32it/s][A
 36%|███▌      | 80/221 [00:28<00:49,  2.83it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.88it/s][A
 37%|███▋      | 82/221 [00:28<00:40,  3.45it/s][A
 38%|███▊      | 83/221 [00:28<00:37,  3.73it/s][A
 38%|███▊      | 84/221 [00:29<00:41,  3.29it/s][A
 38%|███▊      | 85/221 [00:29<00:49,  2.72it/s][A[h264 @ 0x55a0101dfc40] mmco: unref short failure

 39%|███▉      | 86/221 [00:30<01:03,  2.12it/s][A
 39%|███▉      | 87/221 [00:31<01:12,  1.86it/s][A
 40%|███▉      | 88/221 [00:31<01:09,  1.92it/s][A
 40%|████      | 89/221 [00:32<01:32,  1.42it/s][A
 41%|████      | 90/221 [00:33<01:20,  1.62it/s][A
 41%|████      | 91/221 [00:33<01:02,  2.07it/s][A
 42%|████▏     | 92/221 [00:33<00:54,  2.39it/s][A09/17/2024 05:32:50 - INFO - __main__ -   current idx aPvQDKl-LG4.51 from finetune_area returns wrong image/video, use 114570 instead.

 42%|████▏     | 93/221 [00:34<00:58,  2.17it/s][A
 43%|████▎     | 94/221 [00:34<00:52,  2.40it/s][A
 43%|████▎     | 95/221 [00:34<00:43,  2.92it/s][A
 43%|████▎     | 96/221 [00:35<00:43,  2.85it/s][A
 44%|████▍     | 97/221 [00:35<00:37,  3.27it/s][A
 44%|████▍     | 98/221 [00:35<00:37,  3.29it/s][A
 45%|████▍     | 99/221 [00:35<00:31,  3.86it/s][A
 45%|████▌     | 100/221 [00:35<00:29,  4.14it/s][A
 46%|████▌     | 101/221 [00:36<00:26,  4.54it/s][A
 46%|████▌     | 102/221 [00:36<00:33,  3.51it/s][A
 47%|████▋     | 103/221 [00:36<00:29,  4.00it/s][A
 47%|████▋     | 104/221 [00:36<00:25,  4.57it/s][A
 48%|████▊     | 105/221 [00:37<00:26,  4.41it/s][A
 48%|████▊     | 106/221 [00:38<00:49,  2.32it/s][A
 48%|████▊     | 107/221 [00:38<00:41,  2.74it/s][A
 49%|████▉     | 108/221 [00:38<00:35,  3.16it/s][A
 49%|████▉     | 109/221 [00:38<00:36,  3.07it/s][A
 50%|████▉     | 110/221 [00:39<00:37,  3.00it/s][A
 50%|█████     | 111/221 [00:39<00:44,  2.50it/s][A
 51%|█████     | 112/221 [00:39<00:36,  2.96it/s][A
 51%|█████     | 113/221 [00:40<00:35,  3.02it/s][A
 52%|█████▏    | 114/221 [00:40<00:28,  3.77it/s][A
 52%|█████▏    | 115/221 [00:40<00:23,  4.45it/s][A
 52%|█████▏    | 116/221 [00:44<02:19,  1.33s/it][A
 53%|█████▎    | 117/221 [00:44<01:52,  1.09s/it][A
 53%|█████▎    | 118/221 [00:45<01:30,  1.14it/s][A[h264 @ 0x55a01d591dc0] mmco: unref short failure

 54%|█████▍    | 119/221 [00:45<01:10,  1.44it/s][A
 54%|█████▍    | 120/221 [00:45<01:00,  1.68it/s][A
 55%|█████▍    | 121/221 [00:45<00:45,  2.19it/s][A[h264 @ 0x5593416dd700] mmco: unref short failure
[h264 @ 0x5593416dd700] mmco: unref short failure

 55%|█████▌    | 122/221 [00:46<00:37,  2.63it/s][A
 56%|█████▌    | 123/221 [00:46<00:31,  3.16it/s][A
 56%|█████▌    | 124/221 [00:46<00:27,  3.49it/s][A
 57%|█████▋    | 125/221 [00:47<00:32,  3.00it/s][A
 57%|█████▋    | 126/221 [00:47<00:34,  2.73it/s][A
 57%|█████▋    | 127/221 [00:48<00:40,  2.32it/s][A[h264 @ 0x555fef63af00] mmco: unref short failure
[h264 @ 0x55d4c9e23e80] mmco: unref short failure
[h264 @ 0x55d4c9e23e80] mmco: unref short failure

 58%|█████▊    | 128/221 [00:48<00:42,  2.20it/s][A
 58%|█████▊    | 129/221 [00:48<00:34,  2.64it/s][A
 59%|█████▉    | 130/221 [00:49<00:33,  2.69it/s][A
 59%|█████▉    | 131/221 [00:49<00:28,  3.19it/s][A
 60%|█████▉    | 132/221 [00:49<00:25,  3.48it/s][A
 60%|██████    | 133/221 [00:50<00:31,  2.79it/s][A
 61%|██████    | 134/221 [00:50<00:27,  3.14it/s][A
 61%|██████    | 135/221 [00:50<00:27,  3.15it/s][A
 62%|██████▏   | 136/221 [00:51<00:30,  2.81it/s][A
 62%|██████▏   | 137/221 [00:51<00:27,  3.01it/s][A
 62%|██████▏   | 138/221 [00:51<00:30,  2.75it/s][A
 63%|██████▎   | 139/221 [00:52<00:36,  2.24it/s][A
 63%|██████▎   | 140/221 [00:52<00:33,  2.45it/s][A
 64%|██████▍   | 141/221 [00:52<00:28,  2.81it/s][A
 64%|██████▍   | 142/221 [00:53<00:28,  2.79it/s][A
 65%|██████▍   | 143/221 [00:53<00:32,  2.43it/s][A
 65%|██████▌   | 144/221 [00:54<00:27,  2.82it/s][A
 66%|██████▌   | 145/221 [00:54<00:23,  3.24it/s][A
 66%|██████▌   | 146/221 [00:54<00:19,  3.86it/s][A
 67%|██████▋   | 147/221 [00:54<00:18,  4.03it/s][A
 67%|██████▋   | 148/221 [00:54<00:19,  3.79it/s][A
 67%|██████▋   | 149/221 [00:55<00:16,  4.34it/s][A
 68%|██████▊   | 150/221 [00:55<00:16,  4.43it/s][A
 68%|██████▊   | 151/221 [00:56<00:29,  2.40it/s][A
 69%|██████▉   | 152/221 [00:56<00:32,  2.13it/s][A
 69%|██████▉   | 153/221 [00:57<00:30,  2.22it/s][A
 70%|██████▉   | 154/221 [00:57<00:27,  2.46it/s][A
 70%|███████   | 155/221 [00:57<00:22,  3.00it/s][A
 71%|███████   | 156/221 [00:57<00:20,  3.11it/s][A
 71%|███████   | 157/221 [00:59<00:53,  1.19it/s][A
 71%|███████▏  | 158/221 [01:00<00:43,  1.43it/s][A
 72%|███████▏  | 159/221 [01:00<00:33,  1.84it/s][A
 72%|███████▏  | 160/221 [01:00<00:27,  2.20it/s][A
 73%|███████▎  | 161/221 [01:00<00:22,  2.72it/s][A
 73%|███████▎  | 162/221 [01:01<00:18,  3.12it/s][A
 74%|███████▍  | 163/221 [01:01<00:18,  3.20it/s][A
 74%|███████▍  | 164/221 [01:01<00:14,  3.89it/s][A
 75%|███████▍  | 165/221 [01:01<00:11,  4.75it/s][A
 75%|███████▌  | 166/221 [01:02<00:14,  3.82it/s][A
 76%|███████▌  | 167/221 [01:02<00:14,  3.80it/s][A
 76%|███████▌  | 168/221 [01:03<00:28,  1.84it/s][A
 76%|███████▋  | 169/221 [01:04<00:27,  1.89it/s][A
 77%|███████▋  | 170/221 [01:04<00:24,  2.05it/s][A
 77%|███████▋  | 171/221 [01:04<00:22,  2.22it/s][A
 78%|███████▊  | 172/221 [01:05<00:20,  2.42it/s][A
 78%|███████▊  | 173/221 [01:05<00:16,  2.96it/s][A
 79%|███████▊  | 174/221 [01:05<00:12,  3.63it/s][A
 79%|███████▉  | 175/221 [01:05<00:11,  3.86it/s][A
 80%|███████▉  | 176/221 [01:05<00:12,  3.75it/s][A
 80%|████████  | 177/221 [01:06<00:10,  4.08it/s][A
 81%|████████  | 178/221 [01:06<00:14,  3.00it/s][A
 81%|████████  | 179/221 [01:07<00:15,  2.67it/s][A
 81%|████████▏ | 180/221 [01:07<00:12,  3.40it/s][A
 82%|████████▏ | 181/221 [01:07<00:11,  3.62it/s][A
 82%|████████▏ | 182/221 [01:07<00:09,  3.92it/s][A
 83%|████████▎ | 183/221 [01:07<00:09,  4.17it/s][A
 83%|████████▎ | 184/221 [01:08<00:10,  3.62it/s][A
 84%|████████▎ | 185/221 [01:08<00:10,  3.53it/s][A
 84%|████████▍ | 186/221 [01:09<00:12,  2.83it/s][A
 85%|████████▍ | 187/221 [01:09<00:10,  3.29it/s][A
 85%|████████▌ | 188/221 [01:09<00:11,  2.90it/s][A
 86%|████████▌ | 189/221 [01:09<00:10,  3.01it/s][A
 86%|████████▌ | 190/221 [01:10<00:11,  2.75it/s][A
 86%|████████▋ | 191/221 [01:10<00:08,  3.43it/s][A
 87%|████████▋ | 192/221 [01:10<00:08,  3.48it/s][A
 87%|████████▋ | 193/221 [01:10<00:06,  4.31it/s][A
 88%|████████▊ | 194/221 [01:11<00:10,  2.53it/s][A[h264 @ 0x555ff7b40d80] mmco: unref short failure

 88%|████████▊ | 195/221 [01:11<00:09,  2.89it/s][A[h264 @ 0x55d4d1168440] mmco: unref short failure
[h264 @ 0x55d4d1168440] mmco: unref short failure

 89%|████████▊ | 196/221 [01:12<00:07,  3.53it/s][A[h264 @ 0x55d4d1168440] mmco: unref short failure
[h264 @ 0x55d4d1168440] mmco: unref short failure

 89%|████████▉ | 197/221 [01:12<00:05,  4.04it/s][A
 90%|████████▉ | 198/221 [01:12<00:07,  3.03it/s][A
 90%|█████████ | 199/221 [01:12<00:06,  3.58it/s][A
 90%|█████████ | 200/221 [01:13<00:06,  3.04it/s][A
 91%|█████████ | 201/221 [01:13<00:06,  3.21it/s][A
 91%|█████████▏| 202/221 [01:13<00:05,  3.21it/s][A
 92%|█████████▏| 203/221 [01:14<00:05,  3.46it/s][A
 92%|█████████▏| 204/221 [01:14<00:04,  3.71it/s][A
 93%|█████████▎| 205/221 [01:14<00:03,  4.01it/s][A
 93%|█████████▎| 206/221 [01:15<00:05,  2.56it/s][A
 94%|█████████▎| 207/221 [01:15<00:04,  3.20it/s][A
 94%|█████████▍| 208/221 [01:15<00:03,  3.55it/s][A
 95%|█████████▍| 209/221 [01:15<00:02,  4.17it/s][A
 95%|█████████▌| 210/221 [01:15<00:02,  4.84it/s][A
 95%|█████████▌| 211/221 [01:16<00:02,  3.46it/s][A
 96%|█████████▌| 212/221 [01:16<00:02,  3.70it/s][A
 96%|█████████▋| 213/221 [01:16<00:01,  4.26it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.48it/s][A[h264 @ 0x55934c9c5140] mmco: unref short failure

 97%|█████████▋| 215/221 [01:17<00:02,  2.74it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  2.88it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.59it/s][A
 99%|█████████▊| 218/221 [01:18<00:01,  2.82it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.89it/s][A
100%|█████████▉| 220/221 [01:22<00:01,  1.23s/it][A
100%|██████████| 221/221 [01:22<00:00,  1.03it/s][A100%|██████████| 221/221 [01:22<00:00,  2.67it/s]
[h264 @ 0x555fe457ad00] mmco: unref short failure
[h264 @ 0x555fe457ad00] mmco: unref short failure
[h264 @ 0x55a0101dfc40] mmco: unref short failure
[h264 @ 0x55a0101dfc40] mmco: unref short failure
09/17/2024 05:33:54 - INFO - __main__ -   current idx H3sDc6_8nAc.67 from finetune_area returns wrong image/video, use 97294 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:17,  2.84it/s][A
  1%|          | 2/221 [00:00<01:12,  3.00it/s][A
  1%|▏         | 3/221 [00:01<01:14,  2.92it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.97it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.98it/s][A
  3%|▎         | 6/221 [00:02<01:16,  2.81it/s][A
  3%|▎         | 7/221 [00:02<01:18,  2.72it/s][A
  4%|▎         | 8/221 [00:02<01:16,  2.79it/s][A
  4%|▍         | 9/221 [00:03<01:15,  2.80it/s][A
  5%|▍         | 10/221 [00:03<01:15,  2.81it/s][A
  5%|▍         | 11/221 [00:03<01:12,  2.89it/s][A
  5%|▌         | 12/221 [00:04<01:11,  2.92it/s][A
  6%|▌         | 13/221 [00:04<01:11,  2.93it/s][A
  6%|▋         | 14/221 [00:04<01:09,  2.99it/s][A
  7%|▋         | 15/221 [00:05<01:09,  2.97it/s][A
  7%|▋         | 16/221 [00:05<01:08,  2.98it/s][A
  8%|▊         | 17/221 [00:05<01:07,  3.01it/s][A
  8%|▊         | 18/221 [00:06<01:07,  3.00it/s][A
  9%|▊         | 19/221 [00:06<01:10,  2.86it/s][A
  9%|▉         | 20/221 [00:06<01:09,  2.90it/s][A
 10%|▉         | 21/221 [00:07<01:09,  2.88it/s][A
 10%|▉         | 22/221 [00:07<01:07,  2.93it/s][A
 10%|█         | 23/221 [00:07<01:07,  2.93it/s][A
 11%|█         | 24/221 [00:08<01:05,  3.00it/s][A
 11%|█▏        | 25/221 [00:08<01:06,  2.96it/s][A
 12%|█▏        | 26/221 [00:08<01:05,  2.98it/s][A
 12%|█▏        | 27/221 [00:09<01:06,  2.93it/s][A
 13%|█▎        | 28/221 [00:09<01:06,  2.89it/s][A
 13%|█▎        | 29/221 [00:09<01:06,  2.88it/s][A[h264 @ 0x55934e2e1b80] mmco: unref short failure
[h264 @ 0x55934e2e1b80] mmco: unref short failure

 14%|█▎        | 30/221 [00:10<01:08,  2.78it/s][A[h264 @ 0x55934e2e1b80] mmco: unref short failure
[h264 @ 0x55934e2e1b80] mmco: unref short failure

 14%|█▍        | 31/221 [00:10<01:11,  2.67it/s][A
 14%|█▍        | 32/221 [00:11<01:10,  2.70it/s][A[h264 @ 0x555fd934acc0] mmco: unref short failure
[h264 @ 0x555fd934acc0] mmco: unref short failure

 15%|█▍        | 33/221 [00:11<01:10,  2.68it/s][A[h264 @ 0x55934e2e1b80] mmco: unref short failure
[h264 @ 0x55934e2e1b80] mmco: unref short failure

 15%|█▌        | 34/221 [00:11<01:11,  2.63it/s][A
 16%|█▌        | 35/221 [00:12<01:11,  2.59it/s][A
 16%|█▋        | 36/221 [00:12<01:10,  2.61it/s][A[h264 @ 0x5560033d7000] mmco: unref short failure
[h264 @ 0x5560033d7000] mmco: unref short failure

[h264 @ 0x55a00f031540] mmco: unref short failure
 17%|█▋        | 37/221 [00:13<01:07,  2.73it/s][A
 17%|█▋        | 38/221 [00:13<01:04,  2.85it/s][A
 18%|█▊        | 39/221 [00:13<01:03,  2.89it/s][A
 18%|█▊        | 40/221 [00:14<01:02,  2.89it/s][A
 19%|█▊        | 41/221 [00:14<01:01,  2.93it/s][A
 19%|█▉        | 42/221 [00:14<01:00,  2.95it/s][A
 19%|█▉        | 43/221 [00:15<01:01,  2.89it/s][A
 20%|█▉        | 44/221 [00:15<01:03,  2.78it/s][A
 20%|██        | 45/221 [00:15<01:00,  2.89it/s][A
 21%|██        | 46/221 [00:16<01:01,  2.83it/s][A
 21%|██▏       | 47/221 [00:16<01:00,  2.88it/s][A[h264 @ 0x55a035e48780] mmco: unref short failure

 22%|██▏       | 48/221 [00:16<01:00,  2.85it/s][A[h264 @ 0x559337084bc0] mmco: unref short failure
[h264 @ 0x559337084bc0] mmco: unref short failure

 22%|██▏       | 49/221 [00:17<01:02,  2.75it/s][A
 23%|██▎       | 50/221 [00:17<01:02,  2.72it/s][A
 23%|██▎       | 51/221 [00:17<01:01,  2.78it/s][A
 24%|██▎       | 52/221 [00:18<00:58,  2.87it/s][A
 24%|██▍       | 53/221 [00:18<01:01,  2.75it/s][A
 24%|██▍       | 54/221 [00:18<00:58,  2.84it/s][A[h264 @ 0x555feedc15c0] mmco: unref short failure

 25%|██▍       | 55/221 [00:19<00:56,  2.92it/s][A
 25%|██▌       | 56/221 [00:19<00:56,  2.91it/s][A
 26%|██▌       | 57/221 [00:20<00:58,  2.80it/s][A
 26%|██▌       | 58/221 [00:20<00:56,  2.87it/s][A
 27%|██▋       | 59/221 [00:20<00:55,  2.92it/s][A
 27%|██▋       | 60/221 [00:20<00:54,  2.97it/s][A
 28%|██▊       | 61/221 [00:21<00:53,  2.98it/s][A[h264 @ 0x55a03a551500] mmco: unref short failure
[h264 @ 0x55a03a551500] mmco: unref short failure

 28%|██▊       | 62/221 [00:21<00:53,  2.99it/s][A[h264 @ 0x55a03a551500] mmco: unref short failure
[h264 @ 0x55a03a551500] mmco: unref short failure

 29%|██▊       | 63/221 [00:22<00:53,  2.95it/s][A
 29%|██▉       | 64/221 [00:22<00:54,  2.89it/s][A
 29%|██▉       | 65/221 [00:22<00:53,  2.93it/s][A
 30%|██▉       | 66/221 [00:23<00:53,  2.89it/s][A
 30%|███       | 67/221 [00:23<00:52,  2.95it/s][A
 31%|███       | 68/221 [00:23<00:51,  2.97it/s][A
 31%|███       | 69/221 [00:24<00:50,  3.00it/s][A
 32%|███▏      | 70/221 [00:24<00:51,  2.91it/s][A
 32%|███▏      | 71/221 [00:24<00:51,  2.90it/s][A
 33%|███▎      | 72/221 [00:25<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:25<00:51,  2.85it/s][A
 33%|███▎      | 74/221 [00:25<00:50,  2.90it/s][A
 34%|███▍      | 75/221 [00:26<00:49,  2.97it/s][A
 34%|███▍      | 76/221 [00:26<00:49,  2.92it/s][A
 35%|███▍      | 77/221 [00:26<00:50,  2.88it/s][A
 35%|███▌      | 78/221 [00:27<00:48,  2.96it/s][A[h264 @ 0x556001eee4c0] mmco: unref short failure
[h264 @ 0x556001eee4c0] mmco: unref short failure

 36%|███▌      | 79/221 [00:27<00:47,  2.98it/s][A
 36%|███▌      | 80/221 [00:27<00:47,  2.97it/s][A
 37%|███▋      | 81/221 [00:28<00:46,  3.01it/s][A
 37%|███▋      | 82/221 [00:28<00:47,  2.95it/s][A
 38%|███▊      | 83/221 [00:28<00:46,  2.94it/s][A
 38%|███▊      | 84/221 [00:29<00:45,  2.98it/s][A
 38%|███▊      | 85/221 [00:29<00:45,  3.00it/s][A
 39%|███▉      | 86/221 [00:29<00:44,  3.02it/s][A[h264 @ 0x55a04158cf00] mmco: unref short failure
[h264 @ 0x55a04158cf00] mmco: unref short failure

 39%|███▉      | 87/221 [00:30<00:43,  3.06it/s][A
 40%|███▉      | 88/221 [00:30<00:46,  2.87it/s][A09/17/2024 05:34:27 - INFO - __main__ -   current idx gtt8O0yuAiA.7 from finetune_area returns wrong image/video, use 119970 instead.

 40%|████      | 89/221 [00:30<00:47,  2.80it/s][A
 41%|████      | 90/221 [00:31<00:45,  2.85it/s][A
 41%|████      | 91/221 [00:31<00:45,  2.86it/s][A
 42%|████▏     | 92/221 [00:31<00:44,  2.91it/s][A
 42%|████▏     | 93/221 [00:32<00:43,  2.94it/s][A
 43%|████▎     | 94/221 [00:32<00:43,  2.91it/s][A
 43%|████▎     | 95/221 [00:32<00:43,  2.86it/s][A
 43%|████▎     | 96/221 [00:33<00:43,  2.88it/s][A
 44%|████▍     | 97/221 [00:33<00:46,  2.68it/s][A
 44%|████▍     | 98/221 [00:34<00:46,  2.65it/s][A
 45%|████▍     | 99/221 [00:34<00:44,  2.77it/s][A
 45%|████▌     | 100/221 [00:34<00:42,  2.82it/s][A[h264 @ 0x55d4bb1549c0] mmco: unref short failure
[h264 @ 0x55d4bb1549c0] mmco: unref short failure

 46%|████▌     | 101/221 [00:35<00:41,  2.92it/s][A
 46%|████▌     | 102/221 [00:35<00:40,  2.97it/s][A
 47%|████▋     | 103/221 [00:35<00:39,  2.97it/s][A
 47%|████▋     | 104/221 [00:36<00:39,  2.93it/s][A
 48%|████▊     | 105/221 [00:36<00:39,  2.95it/s][A
 48%|████▊     | 106/221 [00:36<00:38,  2.97it/s][A
 48%|████▊     | 107/221 [00:37<00:37,  3.02it/s][A
 49%|████▉     | 108/221 [00:37<00:40,  2.78it/s][A
 49%|████▉     | 109/221 [00:37<00:39,  2.87it/s][A
 50%|████▉     | 110/221 [00:38<00:38,  2.92it/s][A
 50%|█████     | 111/221 [00:38<00:38,  2.86it/s][A
 51%|█████     | 112/221 [00:38<00:36,  2.96it/s][A
 51%|█████     | 113/221 [00:39<00:37,  2.90it/s][A
 52%|█████▏    | 114/221 [00:39<00:38,  2.80it/s][A
 52%|█████▏    | 115/221 [00:39<00:38,  2.78it/s][A
 52%|█████▏    | 116/221 [00:40<00:36,  2.85it/s][A
 53%|█████▎    | 117/221 [00:40<00:35,  2.92it/s][A
 53%|█████▎    | 118/221 [00:40<00:34,  2.97it/s][A
 54%|█████▍    | 119/221 [00:41<00:35,  2.86it/s][A
 54%|█████▍    | 120/221 [00:41<00:34,  2.91it/s][A
 55%|█████▍    | 121/221 [00:42<00:34,  2.86it/s][A
 55%|█████▌    | 122/221 [00:42<00:34,  2.88it/s][A[h264 @ 0x555fda679480] mmco: unref short failure
[h264 @ 0x555fda679480] mmco: unref short failure

 56%|█████▌    | 123/221 [00:42<00:35,  2.78it/s][A
 56%|█████▌    | 124/221 [00:43<00:34,  2.83it/s][A
 57%|█████▋    | 125/221 [00:43<00:35,  2.72it/s][A
 57%|█████▋    | 126/221 [00:43<00:33,  2.79it/s][A[h264 @ 0x5593509d7440] mmco: unref short failure

 57%|█████▋    | 127/221 [00:44<00:33,  2.77it/s][A
 58%|█████▊    | 128/221 [00:44<00:33,  2.80it/s][A
 58%|█████▊    | 129/221 [00:44<00:31,  2.89it/s][A
 59%|█████▉    | 130/221 [00:45<00:32,  2.79it/s][A
 59%|█████▉    | 131/221 [00:45<00:33,  2.71it/s][A
 60%|█████▉    | 132/221 [00:45<00:31,  2.84it/s][A
 60%|██████    | 133/221 [00:46<00:30,  2.91it/s][A
 61%|██████    | 134/221 [00:46<00:30,  2.86it/s][A
 61%|██████    | 135/221 [00:46<00:29,  2.90it/s][A
 62%|██████▏   | 136/221 [00:47<00:30,  2.74it/s][A
 62%|██████▏   | 137/221 [00:47<00:29,  2.82it/s][A
 62%|██████▏   | 138/221 [00:48<00:28,  2.86it/s][A
 63%|██████▎   | 139/221 [00:48<00:28,  2.89it/s][A
 63%|██████▎   | 140/221 [00:48<00:28,  2.82it/s][A
 64%|██████▍   | 141/221 [00:49<00:30,  2.65it/s][A
 64%|██████▍   | 142/221 [00:49<00:30,  2.61it/s][A
 65%|██████▍   | 143/221 [00:49<00:28,  2.75it/s][A
 65%|██████▌   | 144/221 [00:50<00:27,  2.84it/s][A
 66%|██████▌   | 145/221 [00:50<00:26,  2.84it/s][A
 66%|██████▌   | 146/221 [00:50<00:27,  2.76it/s][A
 67%|██████▋   | 147/221 [00:51<00:27,  2.74it/s][A
 67%|██████▋   | 148/221 [00:51<00:26,  2.76it/s][A
 67%|██████▋   | 149/221 [00:52<00:25,  2.79it/s][A
 68%|██████▊   | 150/221 [00:52<00:24,  2.85it/s][A
 68%|██████▊   | 151/221 [00:52<00:24,  2.90it/s][A
 69%|██████▉   | 152/221 [00:53<00:23,  2.92it/s][A
 69%|██████▉   | 153/221 [00:53<00:24,  2.80it/s][A
 70%|██████▉   | 154/221 [00:53<00:24,  2.72it/s][A
 70%|███████   | 155/221 [00:54<00:23,  2.78it/s][A
 71%|███████   | 156/221 [00:54<00:22,  2.86it/s][A
 71%|███████   | 157/221 [00:54<00:22,  2.91it/s][A
 71%|███████▏  | 158/221 [00:55<00:22,  2.82it/s][A
 72%|███████▏  | 159/221 [00:55<00:21,  2.86it/s][A
 72%|███████▏  | 160/221 [00:55<00:20,  2.96it/s][A
 73%|███████▎  | 161/221 [00:56<00:20,  2.93it/s][A
 73%|███████▎  | 162/221 [00:56<00:20,  2.95it/s][A
 74%|███████▍  | 163/221 [00:56<00:20,  2.87it/s][A
 74%|███████▍  | 164/221 [00:57<00:19,  2.89it/s][A
 75%|███████▍  | 165/221 [00:57<00:19,  2.83it/s][A[h264 @ 0x55d4b8da3500] mmco: unref short failure
[h264 @ 0x55d4b8da3500] mmco: unref short failure

 75%|███████▌  | 166/221 [00:58<00:22,  2.48it/s][A
 76%|███████▌  | 167/221 [00:58<00:21,  2.55it/s][A
 76%|███████▌  | 168/221 [00:58<00:20,  2.59it/s][A
 76%|███████▋  | 169/221 [00:59<00:18,  2.75it/s][A
 77%|███████▋  | 170/221 [00:59<00:18,  2.82it/s][A
 77%|███████▋  | 171/221 [00:59<00:17,  2.93it/s][A
 78%|███████▊  | 172/221 [01:00<00:17,  2.78it/s][A
 78%|███████▊  | 173/221 [01:00<00:18,  2.64it/s][A
 79%|███████▊  | 174/221 [01:01<00:17,  2.67it/s][A[h264 @ 0x55d4df46ba00] mmco: unref short failure

 79%|███████▉  | 175/221 [01:01<00:16,  2.77it/s][A
 80%|███████▉  | 176/221 [01:01<00:16,  2.79it/s][A
 80%|████████  | 177/221 [01:02<00:15,  2.86it/s][A
 81%|████████  | 178/221 [01:02<00:14,  2.87it/s][A
 81%|████████  | 179/221 [01:02<00:14,  2.91it/s][A
 81%|████████▏ | 180/221 [01:03<00:13,  2.98it/s][A
 82%|████████▏ | 181/221 [01:03<00:13,  2.99it/s][A
 82%|████████▏ | 182/221 [01:03<00:12,  3.01it/s][A
 83%|████████▎ | 183/221 [01:04<00:13,  2.89it/s][A
 83%|████████▎ | 184/221 [01:04<00:13,  2.73it/s][A
 84%|████████▎ | 185/221 [01:04<00:13,  2.69it/s][A
 84%|████████▍ | 186/221 [01:05<00:12,  2.74it/s][A
 85%|████████▍ | 187/221 [01:05<00:11,  2.84it/s][A
 85%|████████▌ | 188/221 [01:05<00:11,  2.87it/s][A
 86%|████████▌ | 189/221 [01:06<00:10,  2.94it/s][A
 86%|████████▌ | 190/221 [01:06<00:10,  2.96it/s][A
 86%|████████▋ | 191/221 [01:06<00:10,  2.73it/s][A[h264 @ 0x55d4bb1549c0] mmco: unref short failure

 87%|████████▋ | 192/221 [01:07<00:11,  2.53it/s][A[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure

 87%|████████▋ | 193/221 [01:08<00:13,  2.13it/s][A
 88%|████████▊ | 194/221 [01:08<00:12,  2.23it/s][A
 88%|████████▊ | 195/221 [01:08<00:10,  2.40it/s][A
 89%|████████▊ | 196/221 [01:09<00:09,  2.58it/s][A[h264 @ 0x55d4c8fa62c0] mmco: unref short failure
[h264 @ 0x55d4c8fa62c0] mmco: unref short failure

 89%|████████▉ | 197/221 [01:09<00:08,  2.73it/s][A
 90%|████████▉ | 198/221 [01:09<00:08,  2.82it/s][A
 90%|█████████ | 199/221 [01:10<00:07,  2.78it/s][A
 90%|█████████ | 200/221 [01:10<00:07,  2.85it/s][A
 91%|█████████ | 201/221 [01:10<00:06,  2.88it/s][A
 91%|█████████▏| 202/221 [01:11<00:06,  2.95it/s][A
 92%|█████████▏| 203/221 [01:11<00:06,  2.92it/s][A
 92%|█████████▏| 204/221 [01:11<00:05,  2.97it/s][A
 93%|█████████▎| 205/221 [01:12<00:05,  3.00it/s][A
 93%|█████████▎| 206/221 [01:12<00:05,  2.78it/s][A
 94%|█████████▎| 207/221 [01:12<00:04,  2.89it/s][A
 94%|█████████▍| 208/221 [01:13<00:04,  2.65it/s][A
 95%|█████████▍| 209/221 [01:13<00:04,  2.62it/s][A
 95%|█████████▌| 210/221 [01:14<00:03,  2.77it/s][A
 95%|█████████▌| 211/221 [01:14<00:03,  2.82it/s][A
 96%|█████████▌| 212/221 [01:14<00:03,  2.69it/s][A
 96%|█████████▋| 213/221 [01:15<00:03,  2.57it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  2.72it/s][A
 97%|█████████▋| 215/221 [01:15<00:02,  2.73it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  2.80it/s][A
 98%|█████████▊| 217/221 [01:16<00:01,  2.89it/s][A
 99%|█████████▊| 218/221 [01:16<00:01,  2.81it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.71it/s][A
100%|█████████▉| 220/221 [01:17<00:00,  2.65it/s][A
100%|██████████| 221/221 [01:18<00:00,  2.66it/s][A100%|██████████| 221/221 [01:18<00:00,  2.83it/s]
[h264 @ 0x55600c9f84c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:45,  4.82it/s][A
  1%|          | 2/221 [00:00<01:14,  2.96it/s][A
  1%|▏         | 3/221 [00:01<01:38,  2.21it/s][A
  2%|▏         | 4/221 [00:01<01:16,  2.83it/s][A
  2%|▏         | 5/221 [00:01<01:14,  2.92it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.33it/s][A[mov,mp4,m4a,3gp,3g2,mj2 @ 0x55a02dd51280] moov atom not found
[h264 @ 0x555fef7dc0c0] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:17,  2.75it/s][A[h264 @ 0x55d4df46ba00] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:22,  2.59it/s][A
  4%|▍         | 9/221 [00:03<01:15,  2.80it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.34it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.11it/s][A
  5%|▌         | 12/221 [00:03<00:59,  3.51it/s][A
  6%|▌         | 13/221 [00:04<01:39,  2.10it/s][A
  6%|▋         | 14/221 [00:05<01:25,  2.44it/s][A
  7%|▋         | 15/221 [00:05<01:22,  2.51it/s][A
  7%|▋         | 16/221 [00:05<01:23,  2.44it/s][A
  8%|▊         | 17/221 [00:06<01:29,  2.28it/s][A
  8%|▊         | 18/221 [00:06<01:20,  2.52it/s][A
  9%|▊         | 19/221 [00:06<01:12,  2.79it/s][A
  9%|▉         | 20/221 [00:07<01:08,  2.95it/s][A
 10%|▉         | 21/221 [00:07<00:58,  3.39it/s][A
 10%|▉         | 22/221 [00:07<00:54,  3.67it/s][A
 10%|█         | 23/221 [00:07<00:45,  4.31it/s][A
 11%|█         | 24/221 [00:08<00:45,  4.33it/s][A
 11%|█▏        | 25/221 [00:08<01:05,  3.01it/s][A[h264 @ 0x55601d559f40] mmco: unref short failure

 12%|█▏        | 26/221 [00:08<01:06,  2.93it/s][A
 12%|█▏        | 27/221 [00:09<01:05,  2.95it/s][A
 13%|█▎        | 28/221 [00:09<01:08,  2.84it/s][A
 13%|█▎        | 29/221 [00:10<01:07,  2.83it/s][A
 14%|█▎        | 30/221 [00:10<01:11,  2.68it/s][A
 14%|█▍        | 31/221 [00:10<01:15,  2.51it/s][A
 14%|█▍        | 32/221 [00:11<01:09,  2.70it/s][A
 15%|█▍        | 33/221 [00:11<01:03,  2.95it/s][A
 15%|█▌        | 34/221 [00:12<01:14,  2.49it/s][A
 16%|█▌        | 35/221 [00:12<01:11,  2.59it/s][A
 16%|█▋        | 36/221 [00:12<01:11,  2.60it/s][A
 17%|█▋        | 37/221 [00:13<01:06,  2.79it/s][A
 17%|█▋        | 38/221 [00:13<01:06,  2.74it/s][A
 18%|█▊        | 39/221 [00:13<00:56,  3.22it/s][A
 18%|█▊        | 40/221 [00:14<01:03,  2.84it/s][A
 19%|█▊        | 41/221 [00:14<00:59,  3.02it/s][A
 19%|█▉        | 42/221 [00:14<00:50,  3.51it/s][A
 19%|█▉        | 43/221 [00:14<00:54,  3.26it/s][A[h264 @ 0x55a02a68b9c0] mmco: unref short failure
[h264 @ 0x55a02a68b9c0] mmco: unref short failure

 20%|█▉        | 44/221 [00:15<00:51,  3.46it/s][A
 20%|██        | 45/221 [00:15<00:53,  3.27it/s][A
 21%|██        | 46/221 [00:15<00:48,  3.58it/s][A
 21%|██▏       | 47/221 [00:15<00:41,  4.17it/s][A[h264 @ 0x55a00ee33600] mmco: unref short failure
[h264 @ 0x55a00ee33600] mmco: unref short failure

 22%|██▏       | 48/221 [00:16<00:39,  4.43it/s][A
 22%|██▏       | 49/221 [00:16<00:37,  4.58it/s][A
 23%|██▎       | 50/221 [00:16<00:43,  3.93it/s][A
 23%|██▎       | 51/221 [00:16<00:46,  3.63it/s][A
 24%|██▎       | 52/221 [00:17<00:41,  4.11it/s][A
 24%|██▍       | 53/221 [00:17<00:40,  4.14it/s][A
 24%|██▍       | 54/221 [00:17<00:42,  3.94it/s][A
 25%|██▍       | 55/221 [00:17<00:44,  3.72it/s][A
 25%|██▌       | 56/221 [00:18<00:45,  3.62it/s][A
 26%|██▌       | 57/221 [00:18<00:47,  3.48it/s][A
 26%|██▌       | 58/221 [00:18<00:43,  3.75it/s][A
 27%|██▋       | 59/221 [00:19<00:43,  3.74it/s][A[h264 @ 0x55a02073aa00] mmco: unref short failure

 27%|██▋       | 60/221 [00:19<00:45,  3.57it/s][A
 28%|██▊       | 61/221 [00:19<00:44,  3.61it/s][A
 28%|██▊       | 62/221 [00:19<00:47,  3.35it/s][A
 29%|██▊       | 63/221 [00:20<00:38,  4.09it/s][A
 29%|██▉       | 64/221 [00:20<00:40,  3.88it/s][A
 29%|██▉       | 65/221 [00:20<00:38,  4.01it/s][A
 30%|██▉       | 66/221 [00:20<00:44,  3.45it/s][A
 30%|███       | 67/221 [00:21<01:08,  2.26it/s][A
 31%|███       | 68/221 [00:22<00:59,  2.56it/s][A
 31%|███       | 69/221 [00:22<00:58,  2.60it/s][A
 32%|███▏      | 70/221 [00:22<00:48,  3.10it/s][A
 32%|███▏      | 71/221 [00:23<00:56,  2.65it/s][A
 33%|███▎      | 72/221 [00:23<00:58,  2.53it/s][A
 33%|███▎      | 73/221 [00:23<00:54,  2.69it/s][A
 33%|███▎      | 74/221 [00:24<00:51,  2.83it/s][A
 34%|███▍      | 75/221 [00:24<00:54,  2.68it/s][A
 34%|███▍      | 76/221 [00:24<00:46,  3.11it/s][A
 35%|███▍      | 77/221 [00:25<00:47,  3.01it/s][A
 35%|███▌      | 78/221 [00:25<00:48,  2.96it/s][A
 36%|███▌      | 79/221 [00:25<00:49,  2.89it/s][A
 36%|███▌      | 80/221 [00:26<00:50,  2.80it/s][A
 37%|███▋      | 81/221 [00:26<00:49,  2.85it/s][A
 37%|███▋      | 82/221 [00:26<00:47,  2.95it/s][A
 38%|███▊      | 83/221 [00:27<00:41,  3.34it/s][A
 38%|███▊      | 84/221 [00:27<00:55,  2.47it/s][A
 38%|███▊      | 85/221 [00:28<00:53,  2.53it/s][A
 39%|███▉      | 86/221 [00:28<00:57,  2.37it/s][A
 39%|███▉      | 87/221 [00:29<01:09,  1.93it/s][A
 40%|███▉      | 88/221 [00:29<00:58,  2.27it/s][A
 40%|████      | 89/221 [00:30<00:58,  2.27it/s][A
 41%|████      | 90/221 [00:30<00:59,  2.19it/s][A
 41%|████      | 91/221 [00:30<00:54,  2.38it/s][A
 42%|████▏     | 92/221 [00:31<00:49,  2.59it/s][A
 42%|████▏     | 93/221 [00:31<00:58,  2.18it/s][A
 43%|████▎     | 94/221 [00:32<00:49,  2.57it/s][A
 43%|████▎     | 95/221 [00:32<00:53,  2.35it/s][A
 43%|████▎     | 96/221 [00:32<00:52,  2.38it/s][A
 44%|████▍     | 97/221 [00:33<00:45,  2.71it/s][A
 44%|████▍     | 98/221 [00:33<00:41,  2.96it/s][A
 45%|████▍     | 99/221 [00:33<00:39,  3.07it/s][A
 45%|████▌     | 100/221 [00:33<00:33,  3.61it/s][A
 46%|████▌     | 101/221 [00:34<00:32,  3.70it/s][A
 46%|████▌     | 102/221 [00:34<00:35,  3.32it/s][A
 47%|████▋     | 103/221 [00:34<00:31,  3.72it/s][A
 47%|████▋     | 104/221 [00:34<00:29,  4.00it/s][A
 48%|████▊     | 105/221 [00:35<00:32,  3.58it/s][A
 48%|████▊     | 106/221 [00:35<00:38,  2.97it/s][A[h264 @ 0x5593680dc040] mmco: unref short failure
[h264 @ 0x5593680dc040] mmco: unref short failure

 48%|████▊     | 107/221 [00:36<00:36,  3.16it/s][A
 49%|████▉     | 108/221 [00:36<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:36<00:28,  3.87it/s][A
 50%|████▉     | 110/221 [00:36<00:29,  3.70it/s][A
 50%|█████     | 111/221 [00:37<00:32,  3.34it/s][A
 51%|█████     | 112/221 [00:37<00:35,  3.07it/s][A
 51%|█████     | 113/221 [00:37<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:38<00:24,  4.25it/s][A
 52%|█████▏    | 116/221 [00:38<00:25,  4.18it/s][A
 53%|█████▎    | 117/221 [00:38<00:26,  3.99it/s][A
 53%|█████▎    | 118/221 [00:39<00:31,  3.24it/s][A
 54%|█████▍    | 119/221 [00:39<00:35,  2.86it/s][A
 54%|█████▍    | 120/221 [00:39<00:33,  2.97it/s][A
 55%|█████▍    | 121/221 [00:39<00:27,  3.61it/s][A
 55%|█████▌    | 122/221 [00:40<00:26,  3.74it/s][A
 56%|█████▌    | 123/221 [00:40<00:27,  3.57it/s][A
 56%|█████▌    | 124/221 [00:40<00:28,  3.39it/s][A
 57%|█████▋    | 125/221 [00:41<00:41,  2.34it/s][A
 57%|█████▋    | 126/221 [00:41<00:34,  2.73it/s][A
 57%|█████▋    | 127/221 [00:42<00:44,  2.09it/s][A
 58%|█████▊    | 128/221 [00:42<00:38,  2.42it/s][A
 58%|█████▊    | 129/221 [00:43<00:33,  2.72it/s][A
 59%|█████▉    | 130/221 [00:43<00:34,  2.66it/s][A
 59%|█████▉    | 131/221 [00:43<00:28,  3.17it/s][A
 60%|█████▉    | 132/221 [00:43<00:26,  3.40it/s][A
 60%|██████    | 133/221 [00:44<00:37,  2.35it/s][A
 61%|██████    | 134/221 [00:44<00:36,  2.39it/s][A[h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x55a01d591dc0] mmco: unref short failure

 61%|██████    | 135/221 [00:45<00:28,  2.97it/s][A
 62%|██████▏   | 136/221 [00:45<00:29,  2.91it/s][A
 62%|██████▏   | 137/221 [00:45<00:28,  2.97it/s][A
 62%|██████▏   | 138/221 [00:46<00:30,  2.75it/s][A
 63%|██████▎   | 139/221 [00:46<00:30,  2.66it/s][A
 63%|██████▎   | 140/221 [00:46<00:27,  3.00it/s][A
 64%|██████▍   | 141/221 [00:47<00:28,  2.84it/s][A
 64%|██████▍   | 142/221 [00:47<00:24,  3.29it/s][A
 65%|██████▍   | 143/221 [00:47<00:26,  2.92it/s][A
 65%|██████▌   | 144/221 [00:48<00:23,  3.34it/s][A
 66%|██████▌   | 145/221 [00:48<00:23,  3.25it/s][A
 66%|██████▌   | 146/221 [00:48<00:24,  3.09it/s][A
 67%|██████▋   | 147/221 [00:49<00:23,  3.15it/s][A
 67%|██████▋   | 148/221 [00:49<00:22,  3.27it/s][A
 67%|██████▋   | 149/221 [00:49<00:21,  3.29it/s][A
 68%|██████▊   | 150/221 [00:49<00:21,  3.28it/s][A
 68%|██████▊   | 151/221 [00:50<00:31,  2.20it/s][A[h264 @ 0x559333ebaac0] mmco: unref short failure

 69%|██████▉   | 152/221 [00:51<00:40,  1.72it/s][A
 69%|██████▉   | 153/221 [00:51<00:31,  2.14it/s][A
 70%|██████▉   | 154/221 [00:52<00:28,  2.35it/s][A
 70%|███████   | 155/221 [00:52<00:30,  2.18it/s][A
 71%|███████   | 156/221 [00:52<00:26,  2.49it/s][A
 71%|███████   | 157/221 [00:53<00:25,  2.54it/s][A
 71%|███████▏  | 158/221 [00:53<00:24,  2.57it/s][A
 72%|███████▏  | 159/221 [00:54<00:22,  2.78it/s][A
 72%|███████▏  | 160/221 [00:54<00:17,  3.40it/s][A
 73%|███████▎  | 161/221 [00:54<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:54<00:15,  3.83it/s][A
 74%|███████▍  | 163/221 [00:54<00:14,  3.91it/s][A
 74%|███████▍  | 164/221 [00:55<00:12,  4.41it/s][A
 75%|███████▍  | 165/221 [00:55<00:10,  5.15it/s][A
 75%|███████▌  | 166/221 [00:55<00:13,  4.15it/s][A
 76%|███████▌  | 167/221 [00:55<00:12,  4.44it/s][A
 76%|███████▌  | 168/221 [00:56<00:13,  3.91it/s][A
 76%|███████▋  | 169/221 [00:56<00:11,  4.33it/s][A[h264 @ 0x55a016d2ca00] mmco: unref short failure
[h264 @ 0x55a016d2ca00] mmco: unref short failure

 77%|███████▋  | 170/221 [00:56<00:19,  2.57it/s][A
 77%|███████▋  | 171/221 [00:57<00:20,  2.41it/s][A
 78%|███████▊  | 172/221 [00:57<00:18,  2.69it/s][A
 78%|███████▊  | 173/221 [00:57<00:16,  2.96it/s][A
 79%|███████▊  | 174/221 [00:58<00:15,  3.04it/s][A
 79%|███████▉  | 175/221 [00:58<00:17,  2.64it/s][A
 80%|███████▉  | 176/221 [00:58<00:15,  3.00it/s][A
 80%|████████  | 177/221 [00:59<00:13,  3.20it/s][A
 81%|████████  | 178/221 [00:59<00:17,  2.39it/s][A
 81%|████████  | 179/221 [01:00<00:15,  2.64it/s][A
 81%|████████▏ | 180/221 [01:00<00:12,  3.26it/s][A
 82%|████████▏ | 181/221 [01:00<00:12,  3.22it/s][A
 82%|████████▏ | 182/221 [01:00<00:11,  3.52it/s][A
 83%|████████▎ | 183/221 [01:01<00:11,  3.21it/s][A
 83%|████████▎ | 184/221 [01:01<00:12,  2.99it/s][A
 84%|████████▎ | 185/221 [01:01<00:10,  3.43it/s][A
 84%|████████▍ | 186/221 [01:02<00:12,  2.76it/s][A
 85%|████████▍ | 187/221 [01:02<00:11,  3.04it/s][A
 85%|████████▌ | 188/221 [01:02<00:10,  3.07it/s][A
 86%|████████▌ | 189/221 [01:03<00:09,  3.54it/s][A
 86%|████████▌ | 190/221 [01:03<00:10,  3.10it/s][A
 86%|████████▋ | 191/221 [01:03<00:07,  3.80it/s][A
 87%|████████▋ | 192/221 [01:03<00:07,  3.81it/s][A[h264 @ 0x55a038d32800] mmco: unref short failure

 87%|████████▋ | 193/221 [01:04<00:07,  3.90it/s][A
 88%|████████▊ | 194/221 [01:04<00:07,  3.61it/s][A
 88%|████████▊ | 195/221 [01:04<00:06,  3.74it/s][A
 89%|████████▊ | 196/221 [01:05<00:10,  2.30it/s][A
 89%|████████▉ | 197/221 [01:05<00:10,  2.39it/s][A
 90%|████████▉ | 198/221 [01:06<00:10,  2.28it/s][A
 90%|█████████ | 199/221 [01:06<00:07,  2.86it/s][A
 90%|█████████ | 200/221 [01:06<00:06,  3.08it/s][A
 91%|█████████ | 201/221 [01:07<00:06,  3.29it/s][A
 91%|█████████▏| 202/221 [01:07<00:05,  3.32it/s][A
 92%|█████████▏| 203/221 [01:07<00:05,  3.45it/s][A
 92%|█████████▏| 204/221 [01:07<00:04,  3.51it/s][A
 93%|█████████▎| 205/221 [01:08<00:04,  3.71it/s][A
 93%|█████████▎| 206/221 [01:08<00:05,  2.91it/s][A
 94%|█████████▎| 207/221 [01:09<00:04,  2.94it/s][A
 94%|█████████▍| 208/221 [01:09<00:03,  3.25it/s][A
 95%|█████████▍| 209/221 [01:09<00:03,  3.12it/s][A
 95%|█████████▌| 210/221 [01:09<00:03,  3.37it/s][A
 95%|█████████▌| 211/221 [01:10<00:02,  3.50it/s][A
 96%|█████████▌| 212/221 [01:10<00:02,  3.06it/s][A
 96%|█████████▋| 213/221 [01:10<00:02,  2.92it/s][A
 97%|█████████▋| 214/221 [01:11<00:02,  2.77it/s][A
 97%|█████████▋| 215/221 [01:11<00:02,  2.97it/s][A
 98%|█████████▊| 216/221 [01:11<00:01,  2.86it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:12<00:00,  3.20it/s][A
 99%|█████████▉| 219/221 [01:12<00:00,  3.11it/s][A
100%|█████████▉| 220/221 [01:13<00:00,  3.51it/s][A
100%|██████████| 221/221 [01:13<00:00,  2.97it/s][A100%|██████████| 221/221 [01:13<00:00,  3.01it/s]
[h264 @ 0x559356819580] mmco: unref short failure
[h264 @ 0x559356819580] mmco: unref short failure
[h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x55a01d591dc0] mmco: unref short failure
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'area_r1': 40.3, 'area_recall': '40.3/66.4/75.8', 'area_ravg': 60.8}
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'forward_r1': 37.4, 'forward_recall': '37.4/65.0/76.6', 'forward_ravg': 59.7}
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'area_video_r1': 40.2, 'area_video_recall': '40.2/67.2/78.2', 'area_video_ravg': 61.8}
09/17/2024 05:36:39 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 05:36:39 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'area_video_r1': 51.9, 'area_video_recall': '51.9/75.9/83.8', 'area_video_ravg': 70.6, 'area_video_back_r1': 48.3, 'area_video_back_recall': '48.3/74.9/81.9', 'area_video_back_ravg': 68.4}
09/17/2024 05:36:39 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 05:36:39 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/64.6/74.1', 'video_ravg': 58.4}
09/17/2024 05:36:39 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 05:36:39 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 05:36:39 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 549--===========

09/17/2024 05:36:39 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/76.0/82.5', 'video_ravg': 70.3}
09/17/2024 05:36:39 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 05:36:39 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x555fe6dcc200] mmco: unref short failure
09/17/2024 05:37:03 - INFO - __main__ -   current idx n28tYo5T1Po.62 from finetune_area returns wrong image/video, use 9950 instead.
[h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x55a01d591dc0] mmco: unref short failure
09/17/2024 05:37:15 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.009400198236107826, 'loss_ret%tv%ta--finetune_area/loss_area': 1.288700819015503, 'loss_ret%tv%ta--finetune_area/total_loss': 1.2981010675430298}
[h264 @ 0x55a0149121c0] mmco: unref short failure
[h264 @ 0x55a0149121c0] mmco: unref short failure
[h264 @ 0x55d4bace8680] mmco: unref short failure
[h264 @ 0x55d4bace8680] mmco: unref short failure
 38%|███▊      | 550/1455 [5:56:58<42:51:50, 170.51s/it] 38%|███▊      | 551/1455 [5:57:06<30:31:32, 121.56s/it] 38%|███▊      | 552/1455 [5:57:13<21:56:23, 87.47s/it] [h264 @ 0x559363b0d540] mmco: unref short failure
[h264 @ 0x55a02867c1c0] mmco: unref short failure
[h264 @ 0x55a02867c1c0] mmco: unref short failure
[h264 @ 0x55601b3a3040] mmco: unref short failure
[h264 @ 0x55601b3a3040] mmco: unref short failure
[h264 @ 0x55601c67f100] mmco: unref short failure
 38%|███▊      | 553/1455 [5:57:22<15:59:10, 63.80s/it] 38%|███▊      | 554/1455 [5:57:30<11:47:52, 47.14s/it][h264 @ 0x55601f8aa840] mmco: unref short failure
[h264 @ 0x55601f8aa840] mmco: unref short failure
[h264 @ 0x55601f8aa840] mmco: unref short failure
[h264 @ 0x55601f8aa840] mmco: unref short failure
[h264 @ 0x55d4b710e500] mmco: unref short failure
[h264 @ 0x55d4b710e500] mmco: unref short failure
[h264 @ 0x55a031bad600] mmco: unref short failure
[h264 @ 0x55a031bad600] mmco: unref short failure
[h264 @ 0x555feade7b40] mmco: unref short failure
 38%|███▊      | 555/1455 [5:57:39<8:54:55, 35.66s/it] [h264 @ 0x55601c67f100] mmco: unref short failure
 38%|███▊      | 556/1455 [5:57:48<6:53:57, 27.63s/it][h264 @ 0x55d4b895c3c0] mmco: unref short failure
[h264 @ 0x55d4b895c3c0] mmco: unref short failure
[h264 @ 0x55d4b895c3c0] mmco: unref short failure
[h264 @ 0x55d4b895c3c0] mmco: unref short failure
[h264 @ 0x559337084bc0] mmco: unref short failure
[h264 @ 0x55d4e6948d40] mmco: unref short failure
[h264 @ 0x55d4e6948d40] mmco: unref short failure
[h264 @ 0x55600df3e580] mmco: unref short failure
 38%|███▊      | 557/1455 [5:57:57<5:30:07, 22.06s/it] 38%|███▊      | 558/1455 [5:58:06<4:29:53, 18.05s/it][h264 @ 0x559358b1be00] mmco: unref short failure
[h264 @ 0x55a0162a8640] mmco: unref short failure
[h264 @ 0x55d4eb2d43c0] mmco: unref short failure
 38%|███▊      | 559/1455 [5:58:15<3:48:37, 15.31s/it][h264 @ 0x55933685d780] mmco: unref short failure
[h264 @ 0x55933685d780] mmco: unref short failure
[h264 @ 0x55933685d780] mmco: unref short failure
[h264 @ 0x55933685d780] mmco: unref short failure
[h264 @ 0x55933685d780] mmco: unref short failure
[h264 @ 0x55d4e6948d40] mmco: unref short failure
[h264 @ 0x55d4e6948d40] mmco: unref short failure
 38%|███▊      | 560/1455 [5:58:24<3:21:48, 13.53s/it] 39%|███▊      | 561/1455 [5:58:33<3:02:20, 12.24s/it][h264 @ 0x559365544e80] mmco: unref short failure
[h264 @ 0x559365544e80] mmco: unref short failure
 39%|███▊      | 562/1455 [5:58:42<2:47:01, 11.22s/it][h264 @ 0x555fe0f28480] mmco: unref short failure
[h264 @ 0x555fe0f28480] mmco: unref short failure
[h264 @ 0x55d4ca40a200] mmco: unref short failure
[h264 @ 0x55d4ca40a200] mmco: unref short failure
 39%|███▊      | 563/1455 [5:58:50<2:33:48, 10.35s/it][h264 @ 0x55d4bc626540] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55a03f541fc0] mmco: unref short failure
[h264 @ 0x55935d294cc0] mmco: unref short failure
 39%|███▉      | 564/1455 [5:59:00<2:30:04, 10.11s/it][h264 @ 0x556001eee4c0] mmco: unref short failure
 39%|███▉      | 565/1455 [5:59:09<2:23:08,  9.65s/it][h264 @ 0x55d4b8a6c740] mmco: unref short failure
[h264 @ 0x55d4b8a6c740] mmco: unref short failure
[h264 @ 0x55d4b8a6c740] mmco: unref short failure
[h264 @ 0x55d4b8a6c740] mmco: unref short failure
[h264 @ 0x55a02ff3b340] mmco: unref short failure
[h264 @ 0x55a02d755bc0] mmco: unref short failure
[h264 @ 0x55a02d755bc0] mmco: unref short failure
[h264 @ 0x555fd9248a80] mmco: unref short failure
[h264 @ 0x55933f97b840] mmco: unref short failure
[h264 @ 0x55a039393500] mmco: unref short failure
[h264 @ 0x55a039393500] mmco: unref short failure
[h264 @ 0x55a039393500] mmco: unref short failure
[h264 @ 0x555feedc15c0] mmco: unref short failure
[h264 @ 0x555feedc15c0] mmco: unref short failure
[h264 @ 0x559365544e80] mmco: unref short failure
[h264 @ 0x555fdcbadc40] mmco: unref short failure
[h264 @ 0x55a01151d500] mmco: unref short failure
[h264 @ 0x55a01151d500] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x55934fe48bc0] mmco: unref short failure
[h264 @ 0x559358b1be00] mmco: unref short failure
[h264 @ 0x559358b1be00] mmco: unref short failure
[h264 @ 0x55d4dec39d80] mmco: unref short failure
[h264 @ 0x55601c67f100] mmco: unref short failure
[h264 @ 0x55a01b482480] mmco: unref short failure
[h264 @ 0x55a01b482480] mmco: unref short failure
[h264 @ 0x55a01b482480] mmco: unref short failure
[h264 @ 0x55d4ca40a200] mmco: unref short failure
[h264 @ 0x55d4ca40a200] mmco: unref short failure
[h264 @ 0x5593657075c0] mmco: unref short failure
[h264 @ 0x5593657075c0] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x55d4e61aee40] mmco: unref short failure
[h264 @ 0x559336a65f40] mmco: unref short failure
[h264 @ 0x55d4b7ba30c0] mmco: unref short failure
 39%|███▉      | 566/1455 [6:01:28<11:58:56, 48.52s/it][h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff076a7c0] mmco: unref short failure
[h264 @ 0x555ff076a7c0] mmco: unref short failure
[h264 @ 0x555ff21a8540] mmco: unref short failure
[h264 @ 0x555ff21a8540] mmco: unref short failure
[h264 @ 0x55a00fc98300] mmco: unref short failure
09/17/2024 05:41:58 - INFO - __main__ -   current idx thKB7z_wbWY.26 from finetune_area returns wrong image/video, use 145424 instead.
[h264 @ 0x55933bf8fec0] mmco: unref short failure
[h264 @ 0x55933bf8fec0] mmco: unref short failure
[h264 @ 0x559359a97ec0] mmco: unref short failure
[h264 @ 0x559359a97ec0] mmco: unref short failure
[h264 @ 0x559358b1be00] mmco: unref short failure
[h264 @ 0x55d4c03ddfc0] mmco: unref short failure
[h264 @ 0x55d4c03ddfc0] mmco: unref short failure
 39%|███▉      | 567/1455 [6:01:48<9:51:54, 39.99s/it] [h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x55600c761f80] mmco: unref short failure
[h264 @ 0x55600c761f80] mmco: unref short failure
[h264 @ 0x55a00e69d980] mmco: unref short failure
[h264 @ 0x55a00e69d980] mmco: unref short failure
[h264 @ 0x555ff6ae5140] mmco: unref short failure
 39%|███▉      | 568/1455 [6:02:08<8:25:00, 34.16s/it][h264 @ 0x55d4ca41a1c0] mmco: unref short failure
[h264 @ 0x55d4ca41a1c0] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
[h264 @ 0x55933435a4c0] mmco: unref short failure
[h264 @ 0x55933435a4c0] mmco: unref short failure
[h264 @ 0x55a01151d500] mmco: unref short failure
[h264 @ 0x55a01151d500] mmco: unref short failure
 39%|███▉      | 569/1455 [6:02:23<6:58:07, 28.32s/it][h264 @ 0x55a014cdb540] mmco: unref short failure
[h264 @ 0x55a014cdb540] mmco: unref short failure
[h264 @ 0x55a014cdb540] mmco: unref short failure
[h264 @ 0x55a014cdb540] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
 39%|███▉      | 570/1455 [6:02:36<5:50:16, 23.75s/it][h264 @ 0x55d4da200240] mmco: unref short failure
 39%|███▉      | 571/1455 [6:02:46<4:46:22, 19.44s/it][h264 @ 0x55a01d591dc0] mmco: unref short failure
[h264 @ 0x555fdd78cc40] mmco: unref short failure
[h264 @ 0x555fdd78cc40] mmco: unref short failure
[h264 @ 0x55d4e91e5080] mmco: unref short failure
[h264 @ 0x55d4e91e5080] mmco: unref short failure
[h264 @ 0x55934a57efc0] mmco: unref short failure
[h264 @ 0x55934a57efc0] mmco: unref short failure
 39%|███▉      | 572/1455 [6:02:58<4:16:40, 17.44s/it][h264 @ 0x55a00e69d980] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
[h264 @ 0x55d4c3d852c0] mmco: unref short failure
 39%|███▉      | 573/1455 [6:03:08<3:41:20, 15.06s/it][h264 @ 0x555ff0ce7dc0] mmco: unref short failure
[h264 @ 0x555ff0ce7dc0] mmco: unref short failure
[h264 @ 0x555ff0ce7dc0] mmco: unref short failure
[h264 @ 0x55d4bc626540] mmco: unref short failure
[h264 @ 0x55d4bc626540] mmco: unref short failure
[h264 @ 0x555fd9dbd4c0] mmco: unref short failure
[h264 @ 0x55a014eefe40] mmco: unref short failure
[h264 @ 0x55d4cab90b40] mmco: unref short failure
[h264 @ 0x55a03dc55100] mmco: unref short failure
[h264 @ 0x55a03dc55100] mmco: unref short failure
[h264 @ 0x55d4bd1aab00] mmco: unref short failure
[h264 @ 0x55d4bd1aab00] mmco: unref short failure
[h264 @ 0x55935751da00] mmco: unref short failure
[h264 @ 0x55935751da00] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
[h264 @ 0x55d4b710e500] mmco: unref short failure
[h264 @ 0x55d4b710e500] mmco: unref short failure
[h264 @ 0x555fe119dbc0] mmco: unref short failure
[h264 @ 0x559355f5c080] mmco: unref short failure
[h264 @ 0x559355f5c080] mmco: unref short failure
[h264 @ 0x559355f5c080] mmco: unref short failure
[h264 @ 0x559355f5c080] mmco: unref short failure
[h264 @ 0x559355f5c080] mmco: unref short failure
[h264 @ 0x555fdcddbe00] mmco: unref short failure
[h264 @ 0x555fdcddbe00] mmco: unref short failure
[h264 @ 0x55d4cdb06080] mmco: unref short failure
[h264 @ 0x55d4cdb06080] mmco: unref short failure
[h264 @ 0x55a01400c580] mmco: unref short failure
09/17/2024 05:44:43 - INFO - __main__ -   current idx CZpZmpPh3NY.13 from finetune_area returns wrong image/video, use 87814 instead.
[h264 @ 0x5593445f8b00] mmco: unref short failure
[h264 @ 0x55d4b7cb5740] mmco: unref short failure
[h264 @ 0x555ffa801900] mmco: unref short failure
[h264 @ 0x555fe8098a80] mmco: unref short failure
[h264 @ 0x555fe8098a80] mmco: unref short failure
[h264 @ 0x55d4d54e62c0] mmco: unref short failure
[h264 @ 0x55d4d54e62c0] mmco: unref short failure
[h264 @ 0x555ff162b200] mmco: unref short failure
[h264 @ 0x55a01f3269c0] mmco: unref short failure
[h264 @ 0x55934a0a9f40] mmco: unref short failure
[h264 @ 0x55934a0a9f40] mmco: unref short failure
[h264 @ 0x55935d09e2c0] mmco: unref short failure
[h264 @ 0x55d4e91e5080] mmco: unref short failure
[h264 @ 0x55d4e91e5080] mmco: unref short failure
[h264 @ 0x55a00e791240] mmco: unref short failure
[h264 @ 0x55933873ed80] mmco: unref short failure
[h264 @ 0x556002224880] mmco: unref short failure
[h264 @ 0x556002224880] mmco: unref short failure
[h264 @ 0x55d4bd1aab00] mmco: unref short failure
[h264 @ 0x55d4d7fbca00] mmco: unref short failure
[h264 @ 0x55d4d7fbca00] mmco: unref short failure
[h264 @ 0x55d4d7fbca00] mmco: unref short failure
[h264 @ 0x55d4d7fbca00] mmco: unref short failure
[h264 @ 0x55a01f3269c0] mmco: unref short failure
[h264 @ 0x55a01f3269c0] mmco: unref short failure
09/17/2024 05:45:44 - INFO - __main__ -   current idx Xy31jShyKEY.64 from finetune_area returns wrong image/video, use 32361 instead.
[h264 @ 0x55a02b6e7780] mmco: unref short failure
[h264 @ 0x55a01a40c980] mmco: unref short failure
[h264 @ 0x55a01a40c980] mmco: unref short failure
[h264 @ 0x555ff0413800] mmco: unref short failure
[h264 @ 0x555ff0413800] mmco: unref short failure
[h264 @ 0x55d4bfa6b200] mmco: unref short failure
[h264 @ 0x55935b5c57c0] mmco: unref short failure
[h264 @ 0x55a016712440] mmco: unref short failure
[h264 @ 0x55a016712440] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x55d4bbf77600] mmco: unref short failure
[h264 @ 0x55d4dc0ce800] mmco: unref short failure
[h264 @ 0x55d4cab90b40] mmco: unref short failure
[h264 @ 0x55d4cab90b40] mmco: unref short failure
[h264 @ 0x55d4e14d90c0] mmco: unref short failure
[h264 @ 0x55d4e14d90c0] mmco: unref short failure
[h264 @ 0x555ffb149100] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555ff14bfb00] mmco: unref short failure
[h264 @ 0x555fdf504900] mmco: unref short failure
[h264 @ 0x55d4bbdcd900] mmco: unref short failure
[h264 @ 0x55d4bbdcd900] mmco: unref short failure
[h264 @ 0x559358d57f80] mmco: unref short failure
09/17/2024 05:46:38 - INFO - __main__ -   current idx UGjfq2kyBqs.34 from finetune_area returns wrong image/video, use 126064 instead.
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
[h264 @ 0x55a01a7ecd40] mmco: unref short failure
 39%|███▉      | 574/1455 [6:06:24<16:56:40, 69.24s/it][h264 @ 0x559349c3c8c0] mmco: unref short failure
 40%|███▉      | 575/1455 [6:06:33<12:34:29, 51.44s/it]09/17/2024 05:46:57 - INFO - __main__ -   current idx TomRXmGEw8s.31 from finetune_area returns wrong image/video, use 106131 instead.
[h264 @ 0x55934a0a9f40] mmco: unref short failure
[h264 @ 0x55d4e27ccb40] mmco: unref short failure
 40%|███▉      | 576/1455 [6:06:53<10:12:33, 41.81s/it] 40%|███▉      | 577/1455 [6:07:01<7:44:25, 31.74s/it]  40%|███▉      | 578/1455 [6:07:08<5:53:52, 24.21s/it] 40%|███▉      | 579/1455 [6:07:14<4:36:12, 18.92s/it] 40%|███▉      | 580/1455 [6:07:21<3:42:12, 15.24s/it] 40%|███▉      | 581/1455 [6:07:28<3:04:26, 12.66s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55933320f040] mmco: unref short failure
[h264 @ 0x55933320f040] mmco: unref short failure
[h264 @ 0x55933320f040] mmco: unref short failure
[h264 @ 0x55933320f040] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555fd9bca3c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55933399a440] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a00e51c100] mmco: unref short failure
09/17/2024 05:48:16 - INFO - __main__ -   current idx YaJzQ11Pq8c.26 from finetune_area returns wrong image/video, use 68092 instead.
[h264 @ 0x55d4b70c27c0] mmco: unref short failure
[h264 @ 0x55a00e79fbc0] mmco: unref short failure
[h264 @ 0x555fd9e4a980] mmco: unref short failure
[h264 @ 0x555fd9e4a980] mmco: unref short failure
09/17/2024 05:48:27 - INFO - __main__ -   current idx jwBpRLj02q4.46 from finetune_area returns wrong image/video, use 87470 instead.
[h264 @ 0x55933348fc40] mmco: unref short failure
[h264 @ 0x55a00ed65e80] mmco: unref short failure
[h264 @ 0x5593338e0700] mmco: unref short failure
[h264 @ 0x5593338e0700] mmco: unref short failure
[h264 @ 0x559336963040] mmco: unref short failure
[h264 @ 0x55a00f04b940] mmco: unref short failure
[h264 @ 0x55a00f04b940] mmco: unref short failure
[h264 @ 0x559332f45180] mmco: unref short failure
[h264 @ 0x559332f45180] mmco: unref short failure
[h264 @ 0x559332f45180] mmco: unref short failure
[h264 @ 0x559332f45180] mmco: unref short failure
09/17/2024 05:48:58 - INFO - __main__ -   current idx _QteUi76_ZA.36 from finetune_area returns wrong image/video, use 91366 instead.
[h264 @ 0x55a00e1ed5c0] mmco: unref short failure
[h264 @ 0x55a00f5d66c0] mmco: unref short failure
[h264 @ 0x55a00f5d66c0] mmco: unref short failure
[h264 @ 0x55d4b87ddc00] mmco: unref short failure
[h264 @ 0x55d4b87ddc00] mmco: unref short failure
[h264 @ 0x555fd9d9bd80] mmco: unref short failure
[h264 @ 0x555fd9d9bd80] mmco: unref short failure
[h264 @ 0x55a00e556580] mmco: unref short failure
09/17/2024 05:49:45 - INFO - __main__ -   current idx dMEgMG6TS3c.6 from finetune_area returns wrong image/video, use 60921 instead.
[h264 @ 0x55d4b7c089c0] mmco: unref short failure
[h264 @ 0x55d4b7c089c0] mmco: unref short failure
09/17/2024 05:50:13 - INFO - __main__ -   current idx 9GAdW4Xa3MU.69 from finetune_area returns wrong image/video, use 34713 instead.
[h264 @ 0x555fda2c8380] mmco: unref short failure
[h264 @ 0x555fda2c8380] mmco: unref short failure
[h264 @ 0x559338e71800] mmco: unref short failure
[h264 @ 0x559338e71800] mmco: unref short failure
09/17/2024 05:50:24 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 80057 instead.
[h264 @ 0x55a00f711e80] mmco: unref short failure
[h264 @ 0x55a00f711e80] mmco: unref short failure
[h264 @ 0x55933cca7100] mmco: unref short failure
[h264 @ 0x55d4b88d2b80] mmco: unref short failure
[h264 @ 0x55d4b88d2b80] mmco: unref short failure
[h264 @ 0x555fdb062940] mmco: unref short failure
09/17/2024 05:50:39 - INFO - __main__ -   current idx EPDKsPkI96E.8 from finetune_area returns wrong image/video, use 35663 instead.
[h264 @ 0x55d4bdfb5840] mmco: unref short failure
[h264 @ 0x55d4bdfb5840] mmco: unref short failure
[h264 @ 0x55a017d2ee00] mmco: unref short failure
[h264 @ 0x55d4bc894700] mmco: unref short failure
[h264 @ 0x5593330e8cc0] mmco: unref short failure
[h264 @ 0x559338c7d040] mmco: unref short failure
[h264 @ 0x559338c7d040] mmco: unref short failure
[h264 @ 0x55933afca980] mmco: unref short failure
[h264 @ 0x55933afca980] mmco: unref short failure
[h264 @ 0x559338091440] mmco: unref short failure
[h264 @ 0x55d4c13c35c0] mmco: unref short failure
[h264 @ 0x55d4c13c35c0] mmco: unref short failure
[h264 @ 0x55d4c13c35c0] mmco: unref short failure
[h264 @ 0x55d4c13c35c0] mmco: unref short failure
[h264 @ 0x559339e0bb80] mmco: unref short failure
[h264 @ 0x559339e0bb80] mmco: unref short failure
[h264 @ 0x559338cb5300] mmco: unref short failure
[h264 @ 0x559338cb5300] mmco: unref short failure
[h264 @ 0x559345fb8780] mmco: unref short failure
[h264 @ 0x559345fb8780] mmco: unref short failure
09/17/2024 05:51:32 - INFO - __main__ -   current idx VF7SD44bbzI.9 from finetune_area returns wrong image/video, use 120104 instead.
[h264 @ 0x555fdbce3b40] mmco: unref short failure
[h264 @ 0x555fdbce3b40] mmco: unref short failure
09/17/2024 05:51:42 - INFO - __main__ -   current idx Fo_7-g_Hdvc.61 from finetune_area returns wrong image/video, use 64460 instead.
[h264 @ 0x55933e81de00] mmco: unref short failure
[h264 @ 0x555fe6473a00] mmco: unref short failure
09/17/2024 05:52:24 - INFO - __main__ -   current idx 0qE_NisFgLw.2 from finetune_area returns wrong image/video, use 61703 instead.
[h264 @ 0x555ff06a1e80] mmco: unref short failure
[h264 @ 0x555fea23eb80] mmco: unref short failure
[h264 @ 0x555fea23eb80] mmco: unref short failure
[h264 @ 0x55933ea24940] mmco: unref short failure
[h264 @ 0x55933ea24940] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fd9b051c0] mmco: unref short failure
[h264 @ 0x555fe0ecc040] mmco: unref short failure
[h264 @ 0x555fe0ecc040] mmco: unref short failure
[h264 @ 0x55d4ccaa56c0] mmco: unref short failure
[h264 @ 0x55d4ccaa56c0] mmco: unref short failure
[h264 @ 0x555fe90f2100] mmco: unref short failure
[h264 @ 0x55d4c4b3ff80] mmco: unref short failure
[h264 @ 0x55d4bbf8b6c0] mmco: unref short failure
[h264 @ 0x5593358a6e00] mmco: unref short failure
[h264 @ 0x55a00f880100] mmco: unref short failure
 40%|████      | 582/1455 [6:12:40<24:51:54, 102.54s/it] 40%|████      | 583/1455 [6:12:48<17:59:43, 74.29s/it] [h264 @ 0x555fddcc73c0] mmco: unref short failure
[h264 @ 0x555fddcc73c0] mmco: unref short failure
[h264 @ 0x555fddcc73c0] mmco: unref short failure
[h264 @ 0x555fddcc73c0] mmco: unref short failure
 40%|████      | 584/1455 [6:12:57<13:11:38, 54.53s/it][h264 @ 0x555fdc0359c0] mmco: unref short failure
[h264 @ 0x555fdc0359c0] mmco: unref short failure
[h264 @ 0x55a014a9fa40] mmco: unref short failure
[h264 @ 0x55a014a9fa40] mmco: unref short failure
 40%|████      | 585/1455 [6:13:06<9:52:35, 40.87s/it] [h264 @ 0x559335ef8300] mmco: unref short failure
[h264 @ 0x55a0141f4cc0] mmco: unref short failure
[h264 @ 0x55a0141f4cc0] mmco: unref short failure
[h264 @ 0x5593485b55c0] mmco: unref short failure
[h264 @ 0x5593485b55c0] mmco: unref short failure
[h264 @ 0x55d4b82d4100] mmco: unref short failure
 40%|████      | 586/1455 [6:13:14<7:32:57, 31.27s/it][h264 @ 0x55a012b88980] mmco: unref short failure
[h264 @ 0x55a012b88980] mmco: unref short failure
[h264 @ 0x555febaaa180] mmco: unref short failure
[h264 @ 0x555febaaa180] mmco: unref short failure
 40%|████      | 587/1455 [6:13:23<5:53:14, 24.42s/it][h264 @ 0x55a00f621a80] mmco: unref short failure
 40%|████      | 588/1455 [6:13:32<4:45:54, 19.79s/it] 40%|████      | 589/1455 [6:13:41<3:57:16, 16.44s/it][h264 @ 0x559348777340] mmco: unref short failure
[h264 @ 0x559348777340] mmco: unref short failure
[h264 @ 0x559348777340] mmco: unref short failure
[h264 @ 0x559348777340] mmco: unref short failure
[h264 @ 0x55a00dc98600] mmco: unref short failure
[h264 @ 0x55a00dc98600] mmco: unref short failure
[h264 @ 0x555fdd54a980] mmco: unref short failure
[h264 @ 0x555fdd54a980] mmco: unref short failure
[h264 @ 0x55d4c050b6c0] mmco: unref short failure
[h264 @ 0x55d4c050b6c0] mmco: unref short failure
[h264 @ 0x55a00e2ee740] mmco: unref short failure
[h264 @ 0x555fdd09d240] mmco: unref short failure
[h264 @ 0x55a00dc98a80] mmco: unref short failure
[h264 @ 0x555fe7905c40] mmco: unref short failure
[h264 @ 0x55d4b6d7e7c0] mmco: unref short failure
[h264 @ 0x55d4b6d7e7c0] mmco: unref short failure
[h264 @ 0x55a00fe5db00] mmco: unref short failure
[h264 @ 0x55a00fe5db00] mmco: unref short failure
[h264 @ 0x55a025717080] mmco: unref short failure
[h264 @ 0x55a025717080] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55a01684bb00] mmco: unref short failure
[h264 @ 0x55933d482c80] mmco: unref short failure
[h264 @ 0x555fe354aa00] mmco: unref short failure
[h264 @ 0x555fe354aa00] mmco: unref short failure
[h264 @ 0x555fe354aa00] mmco: unref short failure
[h264 @ 0x555fe354aa00] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x55d4c94f6080] mmco: unref short failure
[h264 @ 0x555fec120ac0] mmco: unref short failure
[h264 @ 0x555fdb31a780] mmco: unref short failure
09/17/2024 05:55:38 - INFO - __main__ -   current idx sisprxhsc6I.5 from finetune_area returns wrong image/video, use 141403 instead.
[h264 @ 0x559338071380] mmco: unref short failure
09/17/2024 05:55:47 - INFO - __main__ -   current idx bKcVjDTXHbM.6 from finetune_area returns wrong image/video, use 36839 instead.
[h264 @ 0x559337956bc0] mmco: unref short failure
[h264 @ 0x559337956bc0] mmco: unref short failure
[h264 @ 0x559337956bc0] mmco: unref short failure
[h264 @ 0x559337956bc0] mmco: unref short failure
09/17/2024 05:55:48 - INFO - __main__ -   current idx iQnvNd6wTj4.78 from finetune_area returns wrong image/video, use 46789 instead.
[h264 @ 0x55a01217b640] mmco: unref short failure
[h264 @ 0x55a01217b640] mmco: unref short failure
09/17/2024 05:55:58 - INFO - __main__ -   current idx E852WPZZnME.32 from finetune_area returns wrong image/video, use 124771 instead.
[h264 @ 0x55d4c270a740] mmco: unref short failure
[h264 @ 0x55d4c68ac380] mmco: unref short failure
[h264 @ 0x555fde4dc980] mmco: unref short failure
[h264 @ 0x555fdbbdeac0] mmco: unref short failure
[h264 @ 0x555fdbbdeac0] mmco: unref short failure
[h264 @ 0x55933de7bb80] mmco: unref short failure
[h264 @ 0x555fe14a09c0] mmco: unref short failure
09/17/2024 05:56:46 - INFO - __main__ -   current idx A2e7HyCQqvE.54 from finetune_area returns wrong image/video, use 128231 instead.
[h264 @ 0x55a00e308e80] mmco: unref short failure
[h264 @ 0x55a0172066c0] mmco: unref short failure
[h264 @ 0x55d4b8061d40] mmco: unref short failure
[h264 @ 0x55d4b8061d40] mmco: unref short failure
[h264 @ 0x5593339d8000] mmco: unref short failure
[h264 @ 0x55d4b80a2f00] mmco: unref short failure
[h264 @ 0x55d4b80a2f00] mmco: unref short failure
[h264 @ 0x555fe2aa6880] mmco: unref short failure
[h264 @ 0x55d4bb45e4c0] mmco: unref short failure
09/17/2024 05:57:33 - INFO - __main__ -   current idx edpFNTpJidw.6 from finetune_area returns wrong image/video, use 138332 instead.
[h264 @ 0x55d4bf8311c0] mmco: unref short failure
[h264 @ 0x555fe2940380] mmco: unref short failure
[h264 @ 0x55a025358100] mmco: unref short failure
[h264 @ 0x559333c42e80] mmco: unref short failure
09/17/2024 05:57:54 - INFO - __main__ -   current idx ABt7P6s9bFM.27 from finetune_area returns wrong image/video, use 102713 instead.
[h264 @ 0x555fe9eba2c0] mmco: unref short failure
[h264 @ 0x555fe9eba2c0] mmco: unref short failure
[h264 @ 0x55d4c94199c0] mmco: unref short failure
[h264 @ 0x55d4c94199c0] mmco: unref short failure
[h264 @ 0x55d4c94199c0] mmco: unref short failure
[h264 @ 0x55d4c94199c0] mmco: unref short failure
 41%|████      | 590/1455 [6:17:43<20:14:39, 84.25s/it] 41%|████      | 591/1455 [6:17:53<14:51:35, 61.92s/it] 41%|████      | 592/1455 [6:18:02<11:03:48, 46.15s/it][h264 @ 0x555fde901000] mmco: unref short failure
[h264 @ 0x55d4c51470c0] mmco: unref short failure
[h264 @ 0x55d4c51470c0] mmco: unref short failure
[h264 @ 0x555fe84e4380] mmco: unref short failure
[h264 @ 0x555fe84e4380] mmco: unref short failure
 41%|████      | 593/1455 [6:18:11<8:21:40, 34.92s/it] [h264 @ 0x555fe7a30bc0] mmco: unref short failure
[h264 @ 0x555fe7a30bc0] mmco: unref short failure
 41%|████      | 594/1455 [6:18:20<6:31:44, 27.30s/it]09/17/2024 05:58:44 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 119028 instead.
 41%|████      | 595/1455 [6:18:29<5:12:30, 21.80s/it] 41%|████      | 596/1455 [6:18:38<4:14:18, 17.76s/it] 41%|████      | 597/1455 [6:18:47<3:35:47, 15.09s/it][h264 @ 0x55a01db3c940] mmco: unref short failure
[h264 @ 0x55a01db3c940] mmco: unref short failure
[h264 @ 0x559342ce6940] mmco: unref short failure
[h264 @ 0x559342ce6940] mmco: unref short failure
[h264 @ 0x555feeea3340] mmco: unref short failure
[h264 @ 0x555feeea3340] mmco: unref short failure
[h264 @ 0x555feeea3340] mmco: unref short failure
[h264 @ 0x555feeea3340] mmco: unref short failure
[h264 @ 0x55934106fb00] mmco: unref short failure
[h264 @ 0x55934106fb00] mmco: unref short failure
[h264 @ 0x55a0174eeb00] mmco: unref short failure
[h264 @ 0x55a0174eeb00] mmco: unref short failure
[h264 @ 0x55a017c501c0] mmco: unref short failure
[h264 @ 0x55a017c501c0] mmco: unref short failure
[h264 @ 0x55a017c501c0] mmco: unref short failure
[h264 @ 0x55a017c501c0] mmco: unref short failure
[h264 @ 0x555fe359f480] mmco: unref short failure
[h264 @ 0x55d4bd9a8e40] mmco: unref short failure
[h264 @ 0x559337791480] mmco: unref short failure
[h264 @ 0x559337791480] mmco: unref short failure
[h264 @ 0x555fef9cbf40] mmco: unref short failure
[h264 @ 0x55a014178f40] mmco: unref short failure
[h264 @ 0x55a014178f40] mmco: unref short failure
[h264 @ 0x5593465a2180] mmco: unref short failure
[h264 @ 0x55a00f035dc0] mmco: unref short failure
[h264 @ 0x55a010d66dc0] mmco: unref short failure
[h264 @ 0x555ff56feb40] mmco: unref short failure
[h264 @ 0x555ff56feb40] mmco: unref short failure
[h264 @ 0x55a02cd73e00] mmco: unref short failure
[h264 @ 0x55d4bd137540] mmco: unref short failure
[h264 @ 0x55d4bd137540] mmco: unref short failure
[h264 @ 0x5593445a9cc0] mmco: unref short failure
[h264 @ 0x55a00ec1ec40] mmco: unref short failure
[h264 @ 0x55a00ec1ec40] mmco: unref short failure
[h264 @ 0x55a00f0aa940] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55d4bc5877c0] mmco: unref short failure
[h264 @ 0x55933815d080] mmco: unref short failure
[h264 @ 0x55a01ab90180] mmco: unref short failure
[h264 @ 0x55a01ab90180] mmco: unref short failure
[h264 @ 0x55a012409880] mmco: unref short failure
[h264 @ 0x55a012409880] mmco: unref short failure
[h264 @ 0x55a012409880] mmco: unref short failure
[h264 @ 0x55a012409880] mmco: unref short failure
[h264 @ 0x559333d5a900] mmco: unref short failure
[h264 @ 0x555fddd19340] mmco: unref short failure
[h264 @ 0x55d4c530a300] mmco: unref short failure
[h264 @ 0x55a027051200] mmco: unref short failure
[h264 @ 0x55a027051200] mmco: unref short failure
[h264 @ 0x55d4be1c0440] mmco: unref short failure
[h264 @ 0x55933f5f69c0] mmco: unref short failure
[h264 @ 0x55933f5f69c0] mmco: unref short failure
09/17/2024 06:01:21 - INFO - __main__ -   current idx rGthtRZl8B0.21 from finetune_area returns wrong image/video, use 10371 instead.
[h264 @ 0x55d4d0b485c0] mmco: unref short failure
[h264 @ 0x55d4d0b485c0] mmco: unref short failure
09/17/2024 06:01:36 - INFO - __main__ -   current idx fghob2AsEWE.61 from finetune_area returns wrong image/video, use 148498 instead.
[h264 @ 0x55933312fec0] mmco: unref short failure
[h264 @ 0x55d4c37ee240] mmco: unref short failure
[h264 @ 0x55d4c37ee240] mmco: unref short failure
[h264 @ 0x55a00e4858c0] mmco: unref short failure
[h264 @ 0x55933bcefd00] mmco: unref short failure
[h264 @ 0x55d4c8092e00] mmco: unref short failure
[h264 @ 0x55d4c8092e00] mmco: unref short failure
[h264 @ 0x55d4cfc597c0] mmco: unref short failure
[h264 @ 0x55d4cfc597c0] mmco: unref short failure
[h264 @ 0x55d4cc63fc40] mmco: unref short failure
[h264 @ 0x55d4cc63fc40] mmco: unref short failure
[h264 @ 0x555fed92b980] mmco: unref short failure
[h264 @ 0x555fed92b980] mmco: unref short failure
[h264 @ 0x55a02cabeac0] mmco: unref short failure
[h264 @ 0x55a02cabeac0] mmco: unref short failure
[h264 @ 0x55a02d75bfc0] mmco: unref short failure
[h264 @ 0x55a02cabeac0] mmco: unref short failure
[h264 @ 0x55a02cabeac0] mmco: unref short failure
[h264 @ 0x55a0263fd980] mmco: unref short failure
[h264 @ 0x55a0263fd980] mmco: unref short failure
[h264 @ 0x55a0263fd980] mmco: unref short failure
[h264 @ 0x555fec75c680] mmco: unref short failure
[h264 @ 0x55a0109e8080] mmco: unref short failure
[h264 @ 0x55a0109e8080] mmco: unref short failure
[h264 @ 0x55a00f3f5440] mmco: unref short failure
[h264 @ 0x55a00f3f5440] mmco: unref short failure
[h264 @ 0x55a030f75600] mmco: unref short failure
[h264 @ 0x55a030f75600] mmco: unref short failure
[h264 @ 0x55a030f75600] mmco: unref short failure
[h264 @ 0x55a030f75600] mmco: unref short failure
[h264 @ 0x555ffa985340] mmco: unref short failure
[h264 @ 0x55934add3040] mmco: unref short failure
[h264 @ 0x55934add3040] mmco: unref short failure
09/17/2024 06:02:43 - INFO - __main__ -   current idx 7KJbYhfV6fg.3 from finetune_area returns wrong image/video, use 148155 instead.
 41%|████      | 598/1455 [6:22:34<18:47:11, 78.92s/it][h264 @ 0x55d4c076dc00] mmco: unref short failure
[h264 @ 0x55d4c076dc00] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a0350c3b40] mmco: unref short failure
[h264 @ 0x55a00f1fe800] mmco: unref short failure
 41%|████      | 599/1455 [6:22:44<13:47:10, 57.98s/it]09/17/2024 06:03:05 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 06:03:05 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d4bb14a0c0] mmco: unref short failure
[h264 @ 0x55d4bb14a0c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff2d4f580] mmco: unref short failure
[h264 @ 0x555ff2d4f580] mmco: unref short failure
[h264 @ 0x55934780c680] mmco: unref short failure
[h264 @ 0x55934780c680] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555fdcbfb100] mmco: unref short failure
[h264 @ 0x555fdcbfb100] mmco: unref short failure
[h264 @ 0x555fddc76f80] mmco: unref short failure
[h264 @ 0x555ffe364800] mmco: unref short failure
[h264 @ 0x555fdab5b4c0] mmco: unref short failure
[h264 @ 0x55d4ddbe1400] mmco: unref short failure
[h264 @ 0x55d4ddbe1400] mmco: unref short failure
[h264 @ 0x55a010af4e80] mmco: unref short failure
[h264 @ 0x55a010af4e80] mmco: unref short failure
[h264 @ 0x555ffea27180] mmco: unref short failure
[h264 @ 0x555ffea27180] mmco: unref short failure
[h264 @ 0x555ffea27180] mmco: unref short failure
[h264 @ 0x555ffea27180] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:21,  1.09it/s][A
  1%|          | 2/221 [00:01<02:34,  1.42it/s][A
  1%|▏         | 3/221 [00:01<01:51,  1.96it/s][A
  2%|▏         | 5/221 [00:01<01:00,  3.54it/s][A
  3%|▎         | 7/221 [00:02<00:57,  3.73it/s][A
  4%|▎         | 8/221 [00:02<01:08,  3.10it/s][A
  4%|▍         | 9/221 [00:03<01:07,  3.12it/s][A[h264 @ 0x555fddc77180] mmco: unref short failure
[h264 @ 0x555fddc77180] mmco: unref short failure

  5%|▍         | 10/221 [00:04<01:38,  2.15it/s][A
  5%|▍         | 11/221 [00:04<01:17,  2.70it/s][A
  5%|▌         | 12/221 [00:04<01:21,  2.56it/s][A
  6%|▌         | 13/221 [00:04<01:12,  2.85it/s][A
  6%|▋         | 14/221 [00:06<02:34,  1.34it/s][A
  7%|▋         | 15/221 [00:06<02:06,  1.63it/s][A
  7%|▋         | 16/221 [00:07<01:58,  1.73it/s][A
  8%|▊         | 17/221 [00:07<01:47,  1.91it/s][A
  8%|▊         | 18/221 [00:08<01:37,  2.09it/s][A
  9%|▊         | 19/221 [00:08<01:23,  2.43it/s][A
  9%|▉         | 20/221 [00:08<01:09,  2.90it/s][A
 10%|▉         | 21/221 [00:08<00:59,  3.37it/s][A
 10%|▉         | 22/221 [00:09<00:55,  3.58it/s][A
 10%|█         | 23/221 [00:09<00:44,  4.42it/s][A
 11%|█         | 24/221 [00:09<00:40,  4.91it/s][A
 11%|█▏        | 25/221 [00:09<00:39,  4.92it/s][A
 12%|█▏        | 26/221 [00:09<00:45,  4.32it/s][A
 12%|█▏        | 27/221 [00:09<00:37,  5.15it/s][A
 13%|█▎        | 28/221 [00:10<00:59,  3.22it/s][A
 13%|█▎        | 29/221 [00:10<00:52,  3.66it/s][A
 14%|█▎        | 30/221 [00:11<00:54,  3.48it/s][A
 14%|█▍        | 31/221 [00:11<00:57,  3.33it/s][A
 14%|█▍        | 32/221 [00:11<00:53,  3.56it/s][A
 15%|█▍        | 33/221 [00:12<01:02,  3.00it/s][A
 15%|█▌        | 34/221 [00:12<00:55,  3.39it/s][A
 16%|█▌        | 35/221 [00:12<00:50,  3.72it/s][A
 16%|█▋        | 36/221 [00:12<00:50,  3.65it/s][A
 17%|█▋        | 37/221 [00:13<01:06,  2.78it/s][A
 17%|█▋        | 38/221 [00:13<01:08,  2.67it/s][A
 18%|█▊        | 40/221 [00:14<00:58,  3.08it/s][A
 19%|█▉        | 42/221 [00:14<00:58,  3.09it/s][A
 19%|█▉        | 43/221 [00:15<00:51,  3.48it/s][A
 20%|█▉        | 44/221 [00:15<00:44,  4.02it/s][A
 20%|██        | 45/221 [00:16<01:25,  2.05it/s][A
 21%|██        | 46/221 [00:16<01:25,  2.05it/s][A
 21%|██▏       | 47/221 [00:17<01:26,  2.02it/s][A
 22%|██▏       | 48/221 [00:17<01:07,  2.58it/s][A
 22%|██▏       | 49/221 [00:17<00:55,  3.09it/s][A
 23%|██▎       | 50/221 [00:17<00:44,  3.85it/s][A
 23%|██▎       | 51/221 [00:17<00:41,  4.07it/s][A
 24%|██▎       | 52/221 [00:18<00:42,  3.98it/s][A
 24%|██▍       | 53/221 [00:18<00:40,  4.18it/s][A
 24%|██▍       | 54/221 [00:19<01:36,  1.73it/s][A
 25%|██▍       | 55/221 [00:20<01:24,  1.98it/s][A
 25%|██▌       | 56/221 [00:20<01:16,  2.15it/s][A
 26%|██▌       | 57/221 [00:20<01:05,  2.51it/s][A
 26%|██▌       | 58/221 [00:21<00:58,  2.80it/s][A
 27%|██▋       | 59/221 [00:21<00:52,  3.11it/s][A
 27%|██▋       | 60/221 [00:21<01:01,  2.60it/s][A
 28%|██▊       | 61/221 [00:22<00:56,  2.84it/s][A
 28%|██▊       | 62/221 [00:22<00:55,  2.87it/s][A
 29%|██▊       | 63/221 [00:22<00:53,  2.93it/s][A
 29%|██▉       | 64/221 [00:22<00:48,  3.23it/s][A
 29%|██▉       | 65/221 [00:23<00:45,  3.46it/s][A[h264 @ 0x555fe49043c0] mmco: unref short failure
[h264 @ 0x555fe49043c0] mmco: unref short failure

 30%|██▉       | 66/221 [00:23<00:49,  3.15it/s][A
 30%|███       | 67/221 [00:24<01:00,  2.55it/s][A
 31%|███       | 68/221 [00:24<00:57,  2.65it/s][A[h264 @ 0x55a031888180] mmco: unref short failure
[h264 @ 0x55a031888180] mmco: unref short failure
[h264 @ 0x55a031888180] mmco: unref short failure

 31%|███       | 69/221 [00:25<01:18,  1.94it/s][A
 32%|███▏      | 70/221 [00:25<01:06,  2.28it/s][A
 32%|███▏      | 71/221 [00:26<01:16,  1.96it/s][A
 33%|███▎      | 72/221 [00:26<01:08,  2.18it/s][A
 33%|███▎      | 73/221 [00:27<01:06,  2.23it/s][A
 33%|███▎      | 74/221 [00:27<00:54,  2.69it/s][A
 34%|███▍      | 75/221 [00:27<00:57,  2.53it/s][A
 34%|███▍      | 76/221 [00:27<00:47,  3.03it/s][A
 35%|███▍      | 77/221 [00:28<00:44,  3.22it/s][A
 35%|███▌      | 78/221 [00:28<00:47,  3.01it/s][A
 36%|███▌      | 79/221 [00:29<00:58,  2.44it/s][A
 36%|███▌      | 80/221 [00:29<00:53,  2.62it/s][A
 37%|███▋      | 81/221 [00:29<00:52,  2.68it/s][A
 37%|███▋      | 82/221 [00:29<00:43,  3.22it/s][A
 38%|███▊      | 83/221 [00:30<00:37,  3.72it/s][A
 38%|███▊      | 84/221 [00:30<00:38,  3.56it/s][A
 38%|███▊      | 85/221 [00:30<00:32,  4.20it/s][A
 39%|███▉      | 86/221 [00:30<00:33,  4.04it/s][A
 39%|███▉      | 87/221 [00:31<00:50,  2.65it/s][A
 40%|███▉      | 88/221 [00:31<00:53,  2.48it/s][A
 40%|████      | 89/221 [00:33<01:22,  1.59it/s][A
 41%|████      | 90/221 [00:33<01:08,  1.93it/s][A
 41%|████      | 91/221 [00:33<00:54,  2.39it/s][A
 42%|████▏     | 92/221 [00:33<00:48,  2.64it/s][A
 42%|████▏     | 93/221 [00:34<00:55,  2.32it/s][A
 43%|████▎     | 94/221 [00:34<00:49,  2.57it/s][A
 43%|████▎     | 95/221 [00:34<00:42,  2.97it/s][A
 43%|████▎     | 96/221 [00:35<00:41,  3.01it/s][A
 44%|████▍     | 97/221 [00:35<00:34,  3.60it/s][A
 44%|████▍     | 98/221 [00:35<00:38,  3.21it/s][A
 45%|████▍     | 99/221 [00:35<00:32,  3.81it/s][A
 45%|████▌     | 100/221 [00:36<00:29,  4.04it/s][A
 46%|████▌     | 101/221 [00:36<00:28,  4.27it/s][A
 46%|████▌     | 102/221 [00:36<00:34,  3.40it/s][A
 47%|████▋     | 103/221 [00:36<00:30,  3.81it/s][A
 47%|████▋     | 104/221 [00:37<00:27,  4.32it/s][A
 48%|████▊     | 105/221 [00:37<00:30,  3.86it/s][A[h264 @ 0x55934ccea900] mmco: unref short failure

 48%|████▊     | 106/221 [00:38<00:47,  2.40it/s][A
 48%|████▊     | 107/221 [00:38<00:39,  2.92it/s][A
 49%|████▉     | 108/221 [00:38<00:35,  3.17it/s][A
 49%|████▉     | 109/221 [00:39<00:37,  3.00it/s][A
 50%|████▉     | 110/221 [00:39<00:37,  2.93it/s][A
 50%|█████     | 111/221 [00:39<00:44,  2.48it/s][A
 51%|█████     | 112/221 [00:40<00:39,  2.79it/s][A
 51%|█████     | 113/221 [00:40<00:37,  2.87it/s][A
 52%|█████▏    | 114/221 [00:40<00:29,  3.64it/s][A
 52%|█████▏    | 115/221 [00:40<00:24,  4.38it/s][A[h264 @ 0x559339f9d100] mmco: unref short failure
[h264 @ 0x55d4bfad1880] mmco: unref short failure

 52%|█████▏    | 116/221 [00:44<02:03,  1.18s/it][A
 53%|█████▎    | 117/221 [00:44<01:35,  1.08it/s][A
 53%|█████▎    | 118/221 [00:44<01:17,  1.32it/s][A
 54%|█████▍    | 119/221 [00:45<01:03,  1.60it/s][A
 54%|█████▍    | 120/221 [00:45<00:56,  1.79it/s][A
 55%|█████▍    | 121/221 [00:45<00:42,  2.35it/s][A
 55%|█████▌    | 122/221 [00:46<00:41,  2.40it/s][A
 56%|█████▌    | 123/221 [00:46<00:33,  2.95it/s][A
 56%|█████▌    | 124/221 [00:46<00:29,  3.27it/s][A
 57%|█████▋    | 125/221 [00:46<00:31,  3.08it/s][A
 57%|█████▋    | 126/221 [00:47<00:31,  3.02it/s][A
 57%|█████▋    | 127/221 [00:47<00:37,  2.51it/s][A[h264 @ 0x555fda120580] mmco: unref short failure

 58%|█████▊    | 128/221 [00:48<00:36,  2.52it/s][A
 58%|█████▊    | 129/221 [00:48<00:31,  2.88it/s][A
 59%|█████▉    | 130/221 [00:48<00:32,  2.83it/s][A
 59%|█████▉    | 131/221 [00:48<00:25,  3.55it/s][A
 60%|█████▉    | 132/221 [00:49<00:23,  3.77it/s][A
 60%|██████    | 133/221 [00:49<00:29,  2.94it/s][A[h264 @ 0x555ff29f3b00] mmco: unref short failure
[h264 @ 0x555ff29f3b00] mmco: unref short failure
[h264 @ 0x555ff29f3b00] mmco: unref short failure

 61%|██████    | 134/221 [00:49<00:28,  3.07it/s][A
 61%|██████    | 135/221 [00:50<00:29,  2.89it/s][A
 62%|██████▏   | 136/221 [00:50<00:31,  2.72it/s][A
 62%|██████▏   | 137/221 [00:50<00:29,  2.87it/s][A
 62%|██████▏   | 138/221 [00:51<00:30,  2.70it/s][A
 63%|██████▎   | 139/221 [00:51<00:35,  2.32it/s][A
 63%|██████▎   | 140/221 [00:52<00:32,  2.48it/s][A
 64%|██████▍   | 141/221 [00:52<00:27,  2.86it/s][A
 64%|██████▍   | 142/221 [00:52<00:27,  2.85it/s][A
 65%|██████▍   | 143/221 [00:53<00:32,  2.40it/s][A
 65%|██████▌   | 144/221 [00:53<00:26,  2.94it/s][A
 66%|██████▌   | 145/221 [00:53<00:21,  3.60it/s][A
 66%|██████▌   | 146/221 [00:53<00:18,  4.14it/s][A
 67%|██████▋   | 147/221 [00:54<00:17,  4.13it/s][A
 67%|██████▋   | 148/221 [00:54<00:19,  3.73it/s][A
 67%|██████▋   | 149/221 [00:54<00:16,  4.37it/s][A
 68%|██████▊   | 150/221 [00:54<00:16,  4.38it/s][A
 68%|██████▊   | 151/221 [00:55<00:31,  2.24it/s][A
 69%|██████▉   | 152/221 [00:56<00:32,  2.12it/s][A
 69%|██████▉   | 153/221 [00:56<00:28,  2.40it/s][A
 70%|██████▉   | 154/221 [00:57<00:28,  2.35it/s][A
 70%|███████   | 155/221 [00:57<00:24,  2.74it/s][A
 71%|███████   | 156/221 [00:57<00:21,  3.06it/s][A[h264 @ 0x55a011ea70c0] mmco: unref short failure
[h264 @ 0x55a011ea70c0] mmco: unref short failure

 71%|███████   | 157/221 [00:59<00:47,  1.34it/s][A
 71%|███████▏  | 158/221 [00:59<00:38,  1.62it/s][A
 72%|███████▏  | 159/221 [00:59<00:30,  2.01it/s][A
 72%|███████▏  | 160/221 [01:00<00:26,  2.33it/s][A
 73%|███████▎  | 161/221 [01:00<00:21,  2.85it/s][A
 73%|███████▎  | 162/221 [01:00<00:19,  3.01it/s][A
 74%|███████▍  | 163/221 [01:00<00:18,  3.12it/s][A
 74%|███████▍  | 164/221 [01:00<00:15,  3.74it/s][A
 75%|███████▍  | 165/221 [01:01<00:12,  4.38it/s][A[h264 @ 0x555fda0f8840] mmco: unref short failure

 75%|███████▌  | 166/221 [01:01<00:15,  3.47it/s][A
 76%|███████▌  | 167/221 [01:01<00:16,  3.22it/s][A
 76%|███████▌  | 168/221 [01:03<00:29,  1.79it/s][A
 76%|███████▋  | 169/221 [01:03<00:24,  2.16it/s][A
 77%|███████▋  | 170/221 [01:03<00:21,  2.39it/s][A
 77%|███████▋  | 171/221 [01:04<00:21,  2.28it/s][A
 78%|███████▊  | 172/221 [01:04<00:19,  2.53it/s][A[h264 @ 0x555fede8d240] mmco: unref short failure
[h264 @ 0x555fede8d240] mmco: unref short failure

 78%|███████▊  | 173/221 [01:04<00:15,  3.15it/s][A
 79%|███████▊  | 174/221 [01:04<00:12,  3.80it/s][A
 79%|███████▉  | 175/221 [01:04<00:11,  3.94it/s][A
 80%|███████▉  | 176/221 [01:05<00:11,  3.81it/s][A
 80%|████████  | 177/221 [01:05<00:10,  4.09it/s][A
 81%|████████  | 178/221 [01:05<00:12,  3.37it/s][A
 81%|████████  | 179/221 [01:06<00:14,  2.92it/s][A
 81%|████████▏ | 180/221 [01:06<00:11,  3.63it/s][A
 82%|████████▏ | 181/221 [01:06<00:11,  3.51it/s][A
 82%|████████▏ | 182/221 [01:06<00:10,  3.72it/s][A
 83%|████████▎ | 183/221 [01:07<00:09,  3.87it/s][A
 83%|████████▎ | 184/221 [01:07<00:11,  3.33it/s][A
 84%|████████▎ | 185/221 [01:07<00:11,  3.23it/s][A
 84%|████████▍ | 186/221 [01:08<00:13,  2.66it/s][A
 85%|████████▍ | 187/221 [01:08<00:10,  3.17it/s][A
 85%|████████▌ | 188/221 [01:08<00:11,  2.86it/s][A[h264 @ 0x555fe607e340] mmco: unref short failure
[h264 @ 0x555fe607e340] mmco: unref short failure

 86%|████████▌ | 189/221 [01:09<00:10,  3.06it/s][A
 86%|████████▌ | 190/221 [01:09<00:10,  2.90it/s][A
 86%|████████▋ | 191/221 [01:09<00:08,  3.50it/s][A
 87%|████████▋ | 192/221 [01:10<00:08,  3.43it/s][A
 87%|████████▋ | 193/221 [01:10<00:07,  3.66it/s][A
 88%|████████▊ | 194/221 [01:11<00:10,  2.51it/s][A
 88%|████████▊ | 195/221 [01:11<00:08,  2.99it/s][A
 89%|████████▊ | 196/221 [01:11<00:06,  3.69it/s][A
 89%|████████▉ | 197/221 [01:11<00:06,  3.96it/s][A
 90%|████████▉ | 198/221 [01:12<00:07,  2.95it/s][A
 90%|█████████ | 199/221 [01:12<00:06,  3.27it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.69it/s][A
 91%|█████████ | 201/221 [01:13<00:07,  2.70it/s][A
 91%|█████████▏| 202/221 [01:13<00:06,  2.87it/s][A
 92%|█████████▏| 203/221 [01:13<00:05,  3.25it/s][A
 92%|█████████▏| 204/221 [01:13<00:04,  3.65it/s][A
 93%|█████████▎| 205/221 [01:14<00:03,  4.19it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.72it/s][A
 94%|█████████▍| 208/221 [01:15<00:03,  3.71it/s][A
 95%|█████████▍| 209/221 [01:15<00:02,  4.29it/s][A
 95%|█████████▌| 210/221 [01:15<00:02,  5.00it/s][A
 95%|█████████▌| 211/221 [01:15<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  3.94it/s][A
 96%|█████████▋| 213/221 [01:16<00:01,  4.46it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  2.81it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.99it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  2.74it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.38it/s][A
 99%|█████████▊| 218/221 [01:18<00:01,  2.46it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.56it/s][A[h264 @ 0x55a010e7f400] mmco: unref short failure
[h264 @ 0x55a010e7f400] mmco: unref short failure
[h264 @ 0x55a010e7f400] mmco: unref short failure

100%|█████████▉| 220/221 [01:21<00:01,  1.08s/it][A
100%|██████████| 221/221 [01:21<00:00,  1.14it/s][A100%|██████████| 221/221 [01:21<00:00,  2.70it/s]
[h264 @ 0x55934db46780] mmco: unref short failure
[h264 @ 0x55934db46780] mmco: unref short failure
[h264 @ 0x559347952b40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:12,  3.01it/s][A
  1%|          | 2/221 [00:00<01:23,  2.61it/s][A
  1%|▏         | 3/221 [00:01<01:26,  2.51it/s][A
  2%|▏         | 4/221 [00:01<01:26,  2.51it/s][A
  2%|▏         | 5/221 [00:01<01:20,  2.67it/s][A
  3%|▎         | 6/221 [00:02<01:18,  2.75it/s][A
  3%|▎         | 7/221 [00:02<01:15,  2.83it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.84it/s][A
  4%|▍         | 9/221 [00:03<01:23,  2.53it/s][A
  5%|▍         | 10/221 [00:03<01:28,  2.39it/s][A[h264 @ 0x55d4daa53600] mmco: unref short failure
[h264 @ 0x55d4daa53600] mmco: unref short failure
[h264 @ 0x55a020ca2840] mmco: unref short failure

  5%|▍         | 11/221 [00:04<01:26,  2.41it/s][A
  5%|▌         | 12/221 [00:04<01:20,  2.59it/s][A
  6%|▌         | 13/221 [00:04<01:17,  2.69it/s][A
  6%|▋         | 14/221 [00:05<01:14,  2.77it/s][A[h264 @ 0x555fee705600] mmco: unref short failure
[h264 @ 0x555fee705600] mmco: unref short failure

  7%|▋         | 15/221 [00:05<01:12,  2.83it/s][A
  7%|▋         | 16/221 [00:05<01:10,  2.89it/s][A
  8%|▊         | 17/221 [00:06<01:12,  2.81it/s][A
  8%|▊         | 18/221 [00:06<01:13,  2.75it/s][A
  9%|▊         | 19/221 [00:07<01:11,  2.81it/s][A
  9%|▉         | 20/221 [00:07<01:09,  2.90it/s][A
 10%|▉         | 21/221 [00:07<01:07,  2.96it/s][A
 10%|▉         | 22/221 [00:08<01:06,  3.01it/s][A
 10%|█         | 23/221 [00:08<01:07,  2.91it/s][A
 11%|█         | 24/221 [00:08<01:06,  2.97it/s][A
 11%|█▏        | 25/221 [00:09<01:05,  2.97it/s][A
 12%|█▏        | 26/221 [00:09<01:07,  2.88it/s][A
 12%|█▏        | 27/221 [00:09<01:19,  2.45it/s][A
 13%|█▎        | 28/221 [00:10<01:17,  2.48it/s][A
 13%|█▎        | 29/221 [00:10<01:12,  2.63it/s][A
 14%|█▎        | 30/221 [00:11<01:09,  2.74it/s][A
 14%|█▍        | 31/221 [00:11<01:06,  2.87it/s][A
 14%|█▍        | 32/221 [00:11<01:06,  2.84it/s][A
 15%|█▍        | 33/221 [00:12<01:06,  2.82it/s][A
 15%|█▌        | 34/221 [00:12<01:07,  2.75it/s][A
 16%|█▌        | 35/221 [00:12<01:08,  2.70it/s][A
 16%|█▋        | 36/221 [00:13<01:07,  2.73it/s][A
 17%|█▋        | 37/221 [00:13<01:06,  2.79it/s][A
 17%|█▋        | 38/221 [00:13<01:04,  2.84it/s][A
 18%|█▊        | 39/221 [00:14<01:06,  2.75it/s][A
 18%|█▊        | 40/221 [00:14<01:08,  2.65it/s][A
 19%|█▊        | 41/221 [00:14<01:04,  2.78it/s][A
 19%|█▉        | 42/221 [00:15<01:03,  2.84it/s][A
 19%|█▉        | 43/221 [00:15<01:00,  2.92it/s][A
 20%|█▉        | 44/221 [00:15<00:59,  2.97it/s][A
 20%|██        | 45/221 [00:16<00:59,  2.95it/s][A
 21%|██        | 46/221 [00:16<00:59,  2.96it/s][A
 21%|██▏       | 47/221 [00:16<00:59,  2.93it/s][A
 22%|██▏       | 48/221 [00:17<00:58,  2.95it/s][A
 22%|██▏       | 49/221 [00:17<00:57,  3.00it/s][A
 23%|██▎       | 50/221 [00:17<00:57,  2.99it/s][A
 23%|██▎       | 51/221 [00:18<00:58,  2.89it/s][A
 24%|██▎       | 52/221 [00:18<00:59,  2.82it/s][A
 24%|██▍       | 53/221 [00:19<01:08,  2.45it/s][A
 24%|██▍       | 54/221 [00:19<01:06,  2.53it/s][A
 25%|██▍       | 55/221 [00:19<01:02,  2.67it/s][A
 25%|██▌       | 56/221 [00:20<01:00,  2.73it/s][A
 26%|██▌       | 57/221 [00:20<00:58,  2.79it/s][A[h264 @ 0x55a0346a0e00] mmco: unref short failure
[h264 @ 0x55a0346a0e00] mmco: unref short failure

 26%|██▌       | 58/221 [00:20<00:57,  2.85it/s][A
 27%|██▋       | 59/221 [00:21<00:57,  2.83it/s][A
 27%|██▋       | 60/221 [00:21<00:55,  2.89it/s][A
 28%|██▊       | 61/221 [00:21<00:55,  2.90it/s][A
 28%|██▊       | 62/221 [00:22<00:54,  2.90it/s][A
 29%|██▊       | 63/221 [00:22<00:53,  2.95it/s][A
 29%|██▉       | 64/221 [00:22<00:52,  2.97it/s][A
 29%|██▉       | 65/221 [00:23<00:55,  2.80it/s][A
 30%|██▉       | 66/221 [00:23<00:54,  2.86it/s][A
 30%|███       | 67/221 [00:24<00:52,  2.91it/s][A[h264 @ 0x55933ecd9540] mmco: unref short failure

 31%|███       | 68/221 [00:24<00:51,  2.95it/s][A
 31%|███       | 69/221 [00:24<00:50,  3.00it/s][A
 32%|███▏      | 70/221 [00:25<00:51,  2.94it/s][A
 32%|███▏      | 71/221 [00:25<00:53,  2.79it/s][A
 33%|███▎      | 72/221 [00:25<00:53,  2.80it/s][A
 33%|███▎      | 73/221 [00:26<00:54,  2.70it/s][A
 33%|███▎      | 74/221 [00:26<00:52,  2.78it/s][A
 34%|███▍      | 75/221 [00:26<00:51,  2.84it/s][A
 34%|███▍      | 76/221 [00:27<00:49,  2.92it/s][A
 35%|███▍      | 77/221 [00:27<00:50,  2.85it/s][A
 35%|███▌      | 78/221 [00:27<00:51,  2.76it/s][A
 36%|███▌      | 79/221 [00:28<00:50,  2.82it/s][A
 36%|███▌      | 80/221 [00:28<00:49,  2.84it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.87it/s][A
 37%|███▋      | 82/221 [00:29<00:49,  2.83it/s][A
 38%|███▊      | 83/221 [00:29<00:48,  2.85it/s][A
 38%|███▊      | 84/221 [00:30<00:47,  2.87it/s][A
 38%|███▊      | 85/221 [00:30<00:46,  2.93it/s][A[h264 @ 0x555ff7ca28c0] mmco: unref short failure

 39%|███▉      | 86/221 [00:30<00:44,  3.00it/s][A
 39%|███▉      | 87/221 [00:31<00:45,  2.94it/s][A
 40%|███▉      | 88/221 [00:31<00:48,  2.74it/s][A
 40%|████      | 89/221 [00:31<00:47,  2.77it/s][A
 41%|████      | 90/221 [00:32<00:46,  2.85it/s][A
 41%|████      | 91/221 [00:32<00:46,  2.81it/s][A
 42%|████▏     | 92/221 [00:32<00:45,  2.85it/s][A
 42%|████▏     | 93/221 [00:33<00:43,  2.92it/s][A
 43%|████▎     | 94/221 [00:33<00:47,  2.67it/s][A
 43%|████▎     | 95/221 [00:33<00:45,  2.78it/s][A
 43%|████▎     | 96/221 [00:34<00:43,  2.84it/s][A
 44%|████▍     | 97/221 [00:34<00:42,  2.91it/s][A
 44%|████▍     | 98/221 [00:34<00:41,  2.99it/s][A
 45%|████▍     | 99/221 [00:35<00:43,  2.82it/s][A
 45%|████▌     | 100/221 [00:35<00:44,  2.72it/s][A
 46%|████▌     | 101/221 [00:36<00:45,  2.62it/s][A
 46%|████▌     | 102/221 [00:36<00:43,  2.74it/s][A
 47%|████▋     | 103/221 [00:36<00:41,  2.86it/s][A
 47%|████▋     | 104/221 [00:37<00:40,  2.89it/s][A
 48%|████▊     | 105/221 [00:37<00:40,  2.84it/s][A
 48%|████▊     | 106/221 [00:37<00:39,  2.89it/s][A[h264 @ 0x5593490c85c0] mmco: unref short failure
[h264 @ 0x5593490c85c0] mmco: unref short failure

 48%|████▊     | 107/221 [00:38<00:39,  2.89it/s][A
 49%|████▉     | 108/221 [00:38<00:38,  2.93it/s][A
 49%|████▉     | 109/221 [00:38<00:37,  2.95it/s][A
 50%|████▉     | 110/221 [00:39<00:36,  3.05it/s][A
 50%|█████     | 111/221 [00:39<00:36,  2.98it/s][A
 51%|█████     | 112/221 [00:39<00:36,  3.00it/s][A
 51%|█████     | 113/221 [00:40<00:35,  3.04it/s][A09/17/2024 06:07:44 - INFO - __main__ -   current idx Q6X76LfJ4-U.35 from finetune_area returns wrong image/video, use 68508 instead.

 52%|█████▏    | 114/221 [00:40<00:34,  3.12it/s][A
 52%|█████▏    | 115/221 [00:40<00:34,  3.10it/s][A
 52%|█████▏    | 116/221 [00:41<00:33,  3.12it/s][A
 53%|█████▎    | 117/221 [00:41<00:33,  3.06it/s][A
 53%|█████▎    | 118/221 [00:41<00:36,  2.85it/s][A
 54%|█████▍    | 119/221 [00:42<00:35,  2.89it/s][A
 54%|█████▍    | 120/221 [00:42<00:34,  2.97it/s][A
 55%|█████▍    | 121/221 [00:42<00:33,  2.96it/s][A
 55%|█████▌    | 122/221 [00:43<00:32,  3.01it/s][A
 56%|█████▌    | 123/221 [00:43<00:32,  3.03it/s][A
 56%|█████▌    | 124/221 [00:43<00:31,  3.07it/s][A
 57%|█████▋    | 125/221 [00:44<00:31,  3.04it/s][A
 57%|█████▋    | 126/221 [00:44<00:31,  3.05it/s][A
 57%|█████▋    | 127/221 [00:44<00:30,  3.08it/s][A
 58%|█████▊    | 128/221 [00:45<00:31,  2.98it/s][A
 58%|█████▊    | 129/221 [00:45<00:30,  3.00it/s][A
 59%|█████▉    | 130/221 [00:45<00:30,  2.98it/s][A[h264 @ 0x5593421e7100] mmco: unref short failure
[h264 @ 0x5593421e7100] mmco: unref short failure
[h264 @ 0x5593421e7100] mmco: unref short failure

 59%|█████▉    | 131/221 [00:46<00:29,  3.01it/s][A
 60%|█████▉    | 132/221 [00:46<00:29,  2.97it/s][A
 60%|██████    | 133/221 [00:46<00:30,  2.93it/s][A
 61%|██████    | 134/221 [00:47<00:29,  2.94it/s][A
 61%|██████    | 135/221 [00:47<00:28,  3.00it/s][A
 62%|██████▏   | 136/221 [00:47<00:28,  3.00it/s][A
 62%|██████▏   | 137/221 [00:48<00:27,  3.07it/s][A
 62%|██████▏   | 138/221 [00:48<00:28,  2.89it/s][A
 63%|██████▎   | 139/221 [00:48<00:28,  2.92it/s][A
 63%|██████▎   | 140/221 [00:49<00:27,  2.92it/s][A
 64%|██████▍   | 141/221 [00:49<00:26,  2.99it/s][A
 64%|██████▍   | 142/221 [00:49<00:26,  2.98it/s][A
 65%|██████▍   | 143/221 [00:50<00:25,  3.02it/s][A
 65%|██████▌   | 144/221 [00:50<00:25,  3.01it/s][A
 66%|██████▌   | 145/221 [00:50<00:24,  3.07it/s][A09/17/2024 06:07:55 - INFO - __main__ -   current idx KQezF6-NY_o.24 from finetune_area returns wrong image/video, use 43162 instead.

 66%|██████▌   | 146/221 [00:51<00:26,  2.87it/s][A
 67%|██████▋   | 147/221 [00:51<00:25,  2.86it/s][A
 67%|██████▋   | 148/221 [00:51<00:24,  2.93it/s][A
 67%|██████▋   | 149/221 [00:52<00:24,  2.89it/s][A
 68%|██████▊   | 150/221 [00:52<00:24,  2.95it/s][A
 68%|██████▊   | 151/221 [00:52<00:23,  2.99it/s][A
 69%|██████▉   | 152/221 [00:53<00:22,  3.04it/s][A[h264 @ 0x55a01f800380] mmco: unref short failure
[h264 @ 0x55a01f800380] mmco: unref short failure

 69%|██████▉   | 153/221 [00:53<00:24,  2.80it/s][A
 70%|██████▉   | 154/221 [00:53<00:24,  2.76it/s][A
 70%|███████   | 155/221 [00:54<00:23,  2.83it/s][A
 71%|███████   | 156/221 [00:54<00:22,  2.89it/s][A
 71%|███████   | 157/221 [00:54<00:21,  2.92it/s][A
 71%|███████▏  | 158/221 [00:55<00:21,  2.94it/s][A
 72%|███████▏  | 159/221 [00:55<00:22,  2.73it/s][A
 72%|███████▏  | 160/221 [00:56<00:21,  2.81it/s][A
 73%|███████▎  | 161/221 [00:56<00:20,  2.87it/s][A
 73%|███████▎  | 162/221 [00:56<00:20,  2.90it/s][A
 74%|███████▍  | 163/221 [00:57<00:19,  2.96it/s][A
 74%|███████▍  | 164/221 [00:57<00:19,  2.90it/s][A
 75%|███████▍  | 165/221 [00:57<00:18,  2.98it/s][A
 75%|███████▌  | 166/221 [00:58<00:19,  2.85it/s][A
 76%|███████▌  | 167/221 [00:58<00:18,  2.91it/s][A
 76%|███████▌  | 168/221 [00:58<00:18,  2.85it/s][A
 76%|███████▋  | 169/221 [00:59<00:18,  2.79it/s][A
 77%|███████▋  | 170/221 [00:59<00:18,  2.77it/s][A
 77%|███████▋  | 171/221 [00:59<00:17,  2.83it/s][A
 78%|███████▊  | 172/221 [01:00<00:17,  2.88it/s][A
 78%|███████▊  | 173/221 [01:00<00:16,  2.94it/s][A
 79%|███████▊  | 174/221 [01:00<00:16,  2.87it/s][A
 79%|███████▉  | 175/221 [01:01<00:16,  2.86it/s][A
 80%|███████▉  | 176/221 [01:01<00:16,  2.66it/s][A
 80%|████████  | 177/221 [01:02<00:16,  2.62it/s][A[h264 @ 0x55a026be4fc0] mmco: unref short failure

 81%|████████  | 178/221 [01:02<00:17,  2.40it/s][A
 81%|████████  | 179/221 [01:02<00:17,  2.45it/s][A
 81%|████████▏ | 180/221 [01:03<00:15,  2.66it/s][A
 82%|████████▏ | 181/221 [01:03<00:14,  2.77it/s][A
 82%|████████▏ | 182/221 [01:03<00:13,  2.84it/s][A
 83%|████████▎ | 183/221 [01:04<00:12,  2.93it/s][A
 83%|████████▎ | 184/221 [01:04<00:12,  3.02it/s][A
 84%|████████▎ | 185/221 [01:04<00:11,  3.07it/s][A
 84%|████████▍ | 186/221 [01:05<00:11,  3.07it/s][A
 85%|████████▍ | 187/221 [01:05<00:10,  3.16it/s][A
 85%|████████▌ | 188/221 [01:05<00:10,  3.18it/s][A
 86%|████████▌ | 189/221 [01:06<00:10,  3.08it/s][A
 86%|████████▌ | 190/221 [01:06<00:10,  3.04it/s][A
 86%|████████▋ | 191/221 [01:06<00:09,  3.04it/s][A
 87%|████████▋ | 192/221 [01:07<00:09,  3.08it/s][A
 87%|████████▋ | 193/221 [01:07<00:08,  3.11it/s][A
 88%|████████▊ | 194/221 [01:07<00:08,  3.01it/s][A
 88%|████████▊ | 195/221 [01:08<00:08,  2.98it/s][A
 89%|████████▊ | 196/221 [01:08<00:08,  3.00it/s][A
 89%|████████▉ | 197/221 [01:08<00:07,  3.00it/s][A
 90%|████████▉ | 198/221 [01:09<00:07,  3.05it/s][A
 90%|█████████ | 199/221 [01:09<00:07,  2.87it/s][A
 90%|█████████ | 200/221 [01:09<00:07,  2.91it/s][A
 91%|█████████ | 201/221 [01:10<00:07,  2.77it/s][A
 91%|█████████▏| 202/221 [01:10<00:06,  2.88it/s][A
 92%|█████████▏| 203/221 [01:10<00:05,  3.00it/s][A
 92%|█████████▏| 204/221 [01:11<00:05,  2.92it/s][A
 93%|█████████▎| 205/221 [01:11<00:05,  2.84it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.85it/s][A
 94%|█████████▎| 207/221 [01:12<00:04,  2.92it/s][A
 94%|█████████▍| 208/221 [01:12<00:04,  2.92it/s][A
 95%|█████████▍| 209/221 [01:12<00:04,  2.83it/s][A
 95%|█████████▌| 210/221 [01:13<00:03,  2.83it/s][A
 95%|█████████▌| 211/221 [01:13<00:03,  2.96it/s][A
 96%|█████████▌| 212/221 [01:13<00:03,  2.93it/s][A
 96%|█████████▋| 213/221 [01:14<00:02,  3.00it/s][A
 97%|█████████▋| 214/221 [01:14<00:02,  2.98it/s][A
 97%|█████████▋| 215/221 [01:14<00:02,  3.00it/s][A
 98%|█████████▊| 216/221 [01:15<00:01,  3.07it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  3.16it/s][A
 99%|█████████▊| 218/221 [01:15<00:00,  3.22it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  3.13it/s][A
100%|█████████▉| 220/221 [01:16<00:00,  3.19it/s][A
100%|██████████| 221/221 [01:16<00:00,  3.16it/s][A100%|██████████| 221/221 [01:16<00:00,  2.88it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.40it/s][A
  1%|          | 2/221 [00:00<00:58,  3.75it/s][A
  1%|▏         | 3/221 [00:01<01:25,  2.55it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.39it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.83it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.24it/s][A
  4%|▎         | 8/221 [00:02<00:58,  3.64it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.62it/s][A
  5%|▍         | 10/221 [00:02<00:50,  4.20it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.77it/s][A
  5%|▌         | 12/221 [00:03<00:51,  4.05it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.46it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.89it/s][A
  7%|▋         | 15/221 [00:04<01:09,  2.94it/s][A
  7%|▋         | 16/221 [00:04<01:13,  2.78it/s][A
  8%|▊         | 17/221 [00:05<01:20,  2.54it/s][A
  8%|▊         | 18/221 [00:05<01:11,  2.82it/s][A
  9%|▊         | 19/221 [00:05<00:57,  3.52it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.06it/s][A
 10%|▉         | 22/221 [00:06<00:47,  4.17it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.24it/s][A
 11%|█▏        | 25/221 [00:07<00:48,  4.00it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.74it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  3.97it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:54,  3.50it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.25it/s][A
 14%|█▍        | 31/221 [00:09<01:02,  3.05it/s][A
 14%|█▍        | 32/221 [00:09<00:53,  3.52it/s][A
 15%|█▍        | 33/221 [00:09<00:53,  3.50it/s][A
 15%|█▌        | 34/221 [00:10<01:12,  2.60it/s][A
 16%|█▌        | 35/221 [00:10<01:04,  2.87it/s][A
 16%|█▋        | 36/221 [00:10<01:01,  3.03it/s][A
 17%|█▋        | 37/221 [00:10<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:57,  3.19it/s][A
 18%|█▊        | 39/221 [00:11<00:48,  3.77it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.45it/s][A
 19%|█▊        | 41/221 [00:11<00:49,  3.66it/s][A
 19%|█▉        | 42/221 [00:12<00:43,  4.16it/s][A
 19%|█▉        | 43/221 [00:12<00:45,  3.88it/s][A
 20%|█▉        | 44/221 [00:12<00:43,  4.10it/s][A
 20%|██        | 45/221 [00:12<00:46,  3.77it/s][A
 21%|██        | 46/221 [00:13<00:43,  4.07it/s][A
 21%|██▏       | 47/221 [00:13<00:36,  4.77it/s][A
 22%|██▏       | 48/221 [00:13<00:30,  5.58it/s][A
 22%|██▏       | 49/221 [00:13<00:28,  6.07it/s][A
 23%|██▎       | 50/221 [00:13<00:32,  5.24it/s][A
 23%|██▎       | 51/221 [00:14<00:36,  4.64it/s][A
 24%|██▎       | 52/221 [00:14<00:33,  5.07it/s][A
 24%|██▍       | 53/221 [00:14<00:36,  4.63it/s][A
 24%|██▍       | 54/221 [00:14<00:38,  4.36it/s][A
 25%|██▍       | 55/221 [00:15<00:43,  3.81it/s][A
 25%|██▌       | 56/221 [00:15<00:42,  3.88it/s][A[h264 @ 0x555fe3a248c0] mmco: unref short failure
[h264 @ 0x555fe3a248c0] mmco: unref short failure

 26%|██▌       | 57/221 [00:15<00:47,  3.48it/s][A
 26%|██▌       | 58/221 [00:15<00:44,  3.68it/s][A
 27%|██▋       | 59/221 [00:16<00:42,  3.80it/s][A
 27%|██▋       | 60/221 [00:16<00:43,  3.71it/s][A
 28%|██▊       | 61/221 [00:16<00:43,  3.71it/s][A
 28%|██▊       | 62/221 [00:16<00:43,  3.64it/s][A
 29%|██▊       | 63/221 [00:17<00:35,  4.50it/s][A
 29%|██▉       | 64/221 [00:17<00:33,  4.63it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.53it/s][A
 30%|██▉       | 66/221 [00:17<00:40,  3.87it/s][A
 30%|███       | 67/221 [00:18<00:52,  2.93it/s][A
 31%|███       | 68/221 [00:18<00:47,  3.25it/s][A
 31%|███       | 69/221 [00:18<00:46,  3.25it/s][A
 32%|███▏      | 70/221 [00:19<00:40,  3.71it/s][A
 32%|███▏      | 71/221 [00:19<00:47,  3.14it/s][A
 33%|███▎      | 72/221 [00:20<00:55,  2.68it/s][A
 33%|███▎      | 73/221 [00:20<00:53,  2.75it/s][A
 33%|███▎      | 74/221 [00:20<00:48,  3.04it/s][A
 34%|███▍      | 75/221 [00:21<00:50,  2.87it/s][A
 34%|███▍      | 76/221 [00:21<00:40,  3.60it/s][A
 35%|███▍      | 77/221 [00:21<00:40,  3.54it/s][A
 35%|███▌      | 78/221 [00:21<00:44,  3.20it/s][A
 36%|███▌      | 79/221 [00:22<00:45,  3.15it/s][A
 36%|███▌      | 80/221 [00:22<00:44,  3.17it/s][A
 37%|███▋      | 81/221 [00:22<00:43,  3.24it/s][A
 37%|███▋      | 82/221 [00:22<00:39,  3.54it/s][A
 38%|███▊      | 83/221 [00:23<00:33,  4.18it/s][A
 38%|███▊      | 84/221 [00:23<00:38,  3.54it/s][A
 38%|███▊      | 85/221 [00:23<00:42,  3.20it/s][A
 39%|███▉      | 86/221 [00:24<00:48,  2.77it/s][A
 39%|███▉      | 87/221 [00:24<00:57,  2.33it/s][A
 40%|███▉      | 88/221 [00:25<00:49,  2.68it/s][A
 40%|████      | 89/221 [00:25<00:50,  2.64it/s][A[h264 @ 0x55d4d4680640] mmco: unref short failure

 41%|████      | 90/221 [00:25<00:48,  2.68it/s][A
 41%|████      | 91/221 [00:26<00:43,  3.01it/s][A
 42%|████▏     | 92/221 [00:26<00:41,  3.09it/s][A
 42%|████▏     | 93/221 [00:27<00:52,  2.42it/s][A
 43%|████▎     | 94/221 [00:27<00:44,  2.84it/s][A
 43%|████▎     | 95/221 [00:27<00:51,  2.47it/s][A
 43%|████▎     | 96/221 [00:28<00:49,  2.54it/s][A
 44%|████▍     | 97/221 [00:28<00:43,  2.83it/s][A
 44%|████▍     | 98/221 [00:28<00:40,  3.07it/s][A
 45%|████▍     | 99/221 [00:28<00:36,  3.34it/s][A
 45%|████▌     | 100/221 [00:29<00:30,  3.91it/s][A
 46%|████▌     | 101/221 [00:29<00:29,  4.13it/s][A
 46%|████▌     | 102/221 [00:29<00:30,  3.96it/s][A
 47%|████▋     | 103/221 [00:29<00:28,  4.20it/s][A
 47%|████▋     | 104/221 [00:30<00:26,  4.48it/s][A
 48%|████▊     | 105/221 [00:30<00:30,  3.86it/s][A
 48%|████▊     | 106/221 [00:30<00:34,  3.32it/s][A
 48%|████▊     | 107/221 [00:30<00:31,  3.65it/s][A
 49%|████▉     | 108/221 [00:31<00:28,  4.04it/s][A
 49%|████▉     | 109/221 [00:31<00:27,  4.05it/s][A
 50%|████▉     | 110/221 [00:31<00:29,  3.72it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.36it/s][A
 51%|█████     | 112/221 [00:32<00:36,  2.98it/s][A
 51%|█████     | 113/221 [00:32<00:32,  3.36it/s][A
 52%|█████▏    | 115/221 [00:33<00:24,  4.29it/s][A
 52%|█████▏    | 116/221 [00:33<00:23,  4.38it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.21it/s][A
 53%|█████▎    | 118/221 [00:33<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:34,  2.99it/s][A
 54%|█████▍    | 120/221 [00:34<00:32,  3.06it/s][A
 55%|█████▍    | 121/221 [00:34<00:26,  3.76it/s][A
 55%|█████▌    | 122/221 [00:35<00:25,  3.90it/s][A
 56%|█████▌    | 123/221 [00:35<00:27,  3.60it/s][A
 56%|█████▌    | 124/221 [00:35<00:26,  3.69it/s][A
 57%|█████▋    | 125/221 [00:36<00:37,  2.58it/s][A
 57%|█████▋    | 126/221 [00:36<00:32,  2.95it/s][A[h264 @ 0x55d4cb31eb00] mmco: unref short failure

 57%|█████▋    | 127/221 [00:37<00:44,  2.13it/s][A
 58%|█████▊    | 128/221 [00:37<00:37,  2.48it/s][A
 58%|█████▊    | 129/221 [00:37<00:32,  2.81it/s][A
 59%|█████▉    | 130/221 [00:38<00:33,  2.70it/s][A
 59%|█████▉    | 131/221 [00:38<00:29,  3.09it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.45it/s][A
 60%|██████    | 133/221 [00:39<00:39,  2.22it/s][A
 61%|██████    | 134/221 [00:39<00:37,  2.33it/s][A
 61%|██████    | 135/221 [00:39<00:29,  2.88it/s][A
 62%|██████▏   | 136/221 [00:40<00:29,  2.90it/s][A
 62%|██████▏   | 137/221 [00:40<00:26,  3.15it/s][A
 62%|██████▏   | 138/221 [00:40<00:26,  3.13it/s][A
 63%|██████▎   | 139/221 [00:41<00:28,  2.90it/s][A
 63%|██████▎   | 140/221 [00:41<00:25,  3.23it/s][A
 64%|██████▍   | 141/221 [00:41<00:27,  2.86it/s][A
 64%|██████▍   | 142/221 [00:42<00:24,  3.28it/s][A
 65%|██████▍   | 143/221 [00:42<00:24,  3.15it/s][A
 65%|██████▌   | 144/221 [00:42<00:21,  3.59it/s][A
 66%|██████▌   | 145/221 [00:43<00:21,  3.49it/s][A
 66%|██████▌   | 146/221 [00:43<00:22,  3.36it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.50it/s][A
 67%|██████▋   | 148/221 [00:43<00:19,  3.71it/s][A
 67%|██████▋   | 149/221 [00:43<00:17,  4.19it/s][A
 68%|██████▊   | 150/221 [00:44<00:18,  3.79it/s][A
 68%|██████▊   | 151/221 [00:45<00:29,  2.39it/s][A
 69%|██████▉   | 152/221 [00:45<00:37,  1.84it/s][A
 69%|██████▉   | 153/221 [00:46<00:29,  2.28it/s][A
 70%|██████▉   | 154/221 [00:46<00:25,  2.61it/s][A
 70%|███████   | 155/221 [00:46<00:28,  2.32it/s][A
 71%|███████   | 156/221 [00:47<00:24,  2.65it/s][A
 71%|███████   | 157/221 [00:47<00:23,  2.71it/s][A
 71%|███████▏  | 158/221 [00:47<00:22,  2.74it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.01it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.57it/s][A
 73%|███████▎  | 161/221 [00:48<00:16,  3.54it/s][A
 73%|███████▎  | 162/221 [00:48<00:14,  4.02it/s][A
 74%|███████▍  | 163/221 [00:48<00:14,  4.00it/s][A
 74%|███████▍  | 164/221 [00:49<00:12,  4.58it/s][A
 75%|███████▍  | 165/221 [00:49<00:10,  5.36it/s][A
 75%|███████▌  | 166/221 [00:49<00:12,  4.37it/s][A
 76%|███████▌  | 167/221 [00:49<00:11,  4.57it/s][A
 76%|███████▌  | 168/221 [00:50<00:13,  3.95it/s][A
 76%|███████▋  | 169/221 [00:50<00:11,  4.68it/s][A
 77%|███████▋  | 170/221 [00:51<00:19,  2.68it/s][A
 77%|███████▋  | 171/221 [00:51<00:20,  2.48it/s][A
 78%|███████▊  | 172/221 [00:51<00:18,  2.66it/s][A
 78%|███████▊  | 173/221 [00:52<00:16,  2.86it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.20it/s][A
 79%|███████▉  | 175/221 [00:52<00:16,  2.79it/s][A
 80%|███████▉  | 176/221 [00:52<00:14,  3.06it/s][A
 80%|████████  | 177/221 [00:53<00:13,  3.22it/s][A[h264 @ 0x55a0221034c0] mmco: unref short failure
[h264 @ 0x55a0221034c0] mmco: unref short failure

 81%|████████  | 178/221 [00:54<00:18,  2.29it/s][A
 81%|████████  | 179/221 [00:54<00:16,  2.49it/s][A
 81%|████████▏ | 180/221 [00:54<00:13,  3.09it/s][A
 82%|████████▏ | 181/221 [00:54<00:13,  2.97it/s][A
 82%|████████▏ | 182/221 [00:55<00:11,  3.31it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  3.06it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  3.05it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.73it/s][A
 84%|████████▍ | 186/221 [00:56<00:12,  2.72it/s][A
 85%|████████▍ | 187/221 [00:56<00:11,  3.05it/s][A
 85%|████████▌ | 188/221 [00:57<00:11,  2.77it/s][A
 86%|████████▌ | 189/221 [00:57<00:10,  3.13it/s][A
 86%|████████▌ | 190/221 [00:57<00:10,  2.86it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.46it/s][A
 87%|████████▋ | 192/221 [00:58<00:08,  3.60it/s][A
 87%|████████▋ | 193/221 [00:58<00:06,  4.00it/s][A
 88%|████████▊ | 194/221 [00:58<00:06,  3.91it/s][A
 88%|████████▊ | 195/221 [00:58<00:06,  3.83it/s][A
 89%|████████▊ | 196/221 [00:59<00:09,  2.52it/s][A
 89%|████████▉ | 197/221 [00:59<00:08,  2.68it/s][A
 90%|████████▉ | 198/221 [01:00<00:09,  2.37it/s][A
 90%|█████████ | 199/221 [01:00<00:07,  2.87it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.17it/s][A
 91%|█████████ | 201/221 [01:01<00:05,  3.44it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.34it/s][A
 92%|█████████▏| 203/221 [01:01<00:05,  3.24it/s][A
 92%|█████████▏| 204/221 [01:02<00:05,  3.38it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.54it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.77it/s][A
 94%|█████████▎| 207/221 [01:03<00:05,  2.60it/s][A
 94%|█████████▍| 208/221 [01:03<00:04,  2.90it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.08it/s][A
 95%|█████████▌| 210/221 [01:04<00:03,  3.32it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.23it/s][A
 96%|█████████▋| 213/221 [01:05<00:02,  3.20it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  2.86it/s][A
 97%|█████████▋| 215/221 [01:05<00:01,  3.10it/s][A
 98%|█████████▊| 216/221 [01:06<00:01,  2.96it/s][A
 98%|█████████▊| 217/221 [01:06<00:01,  2.99it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.29it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.26it/s][A
100%|█████████▉| 220/221 [01:07<00:00,  3.61it/s][A
100%|██████████| 221/221 [01:07<00:00,  3.10it/s][A100%|██████████| 221/221 [01:07<00:00,  3.27it/s]
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'area_r1': 39.6, 'area_recall': '39.6/66.4/75.8', 'area_ravg': 60.6}
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'forward_r1': 38.0, 'forward_recall': '38.0/64.4/76.4', 'forward_ravg': 59.6}
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'area_video_r1': 39.8, 'area_video_recall': '39.8/66.9/77.4', 'area_video_ravg': 61.3}
09/17/2024 06:09:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 06:09:34 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'area_video_r1': 51.8, 'area_video_recall': '51.8/74.8/83.3', 'area_video_ravg': 69.9, 'area_video_back_r1': 47.5, 'area_video_back_recall': '47.5/73.6/81.1', 'area_video_back_ravg': 67.4}
09/17/2024 06:09:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 06:09:34 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'video_r1': 36.0, 'video_recall': '36.0/64.0/74.1', 'video_ravg': 58.0}
09/17/2024 06:09:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 06:09:34 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/66.6/75.7', 'video_ravg': 59.8}
09/17/2024 06:09:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 599--===========

09/17/2024 06:09:34 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/75.9/83.3', 'video_ravg': 70.3}
09/17/2024 06:09:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 06:09:34 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x559339c18e40] mmco: unref short failure
09/17/2024 06:10:05 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.006873610429465771, 'loss_ret%tv%ta--finetune_area/loss_area': 1.194448471069336, 'loss_ret%tv%ta--finetune_area/total_loss': 1.201322078704834}
[h264 @ 0x55d4db141b80] mmco: unref short failure
[h264 @ 0x55d4db141b80] mmco: unref short failure
 41%|████      | 600/1455 [6:29:48<39:53:19, 167.95s/it][h264 @ 0x55a011e19d00] mmco: unref short failure
[h264 @ 0x55a04600f540] mmco: unref short failure
[h264 @ 0x55a04600f540] mmco: unref short failure
 41%|████▏     | 601/1455 [6:29:55<28:22:44, 119.63s/it][h264 @ 0x55d4cd725140] mmco: unref short failure
[h264 @ 0x555ff41ed580] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 41%|████▏     | 602/1455 [6:30:02<20:21:44, 85.94s/it]  41%|████▏     | 603/1455 [6:30:10<14:46:19, 62.42s/it][h264 @ 0x5593571e0800] mmco: unref short failure
[h264 @ 0x5593571e0800] mmco: unref short failure
[h264 @ 0x559338679e40] mmco: unref short failure
 42%|████▏     | 604/1455 [6:30:18<10:53:42, 46.09s/it][h264 @ 0x55a01aae6200] mmco: unref short failure
 42%|████▏     | 605/1455 [6:30:26<8:11:19, 34.68s/it]  42%|████▏     | 606/1455 [6:30:34<6:19:28, 26.82s/it][h264 @ 0x55933f3e8880] mmco: unref short failure
[h264 @ 0x55933f3e8880] mmco: unref short failure
[h264 @ 0x55933f3e8880] mmco: unref short failure
[h264 @ 0x55933f3e8880] mmco: unref short failure
 42%|████▏     | 607/1455 [6:30:44<5:04:11, 21.52s/it][h264 @ 0x555fef3bb640] mmco: unref short failure
[h264 @ 0x555fef3bb640] mmco: unref short failure
 42%|████▏     | 608/1455 [6:30:54<4:15:32, 18.10s/it][h264 @ 0x55a020bdd340] mmco: unref short failure
[h264 @ 0x55a020bdd340] mmco: unref short failure
 42%|████▏     | 609/1455 [6:31:03<3:37:18, 15.41s/it] 42%|████▏     | 610/1455 [6:31:12<3:09:53, 13.48s/it] 42%|████▏     | 611/1455 [6:31:21<2:51:50, 12.22s/it][h264 @ 0x55a020bdcb00] mmco: unref short failure
09/17/2024 06:11:46 - INFO - __main__ -   current idx AP5rCSSlwrk.27 from finetune_area returns wrong image/video, use 21546 instead.
 42%|████▏     | 612/1455 [6:31:30<2:38:59, 11.32s/it][h264 @ 0x555ff9f25c80] mmco: unref short failure
[h264 @ 0x555ff9f25c80] mmco: unref short failure
[h264 @ 0x5593531e13c0] mmco: unref short failure
 42%|████▏     | 613/1455 [6:31:39<2:29:05, 10.62s/it]09/17/2024 06:12:04 - INFO - __main__ -   current idx 14WUuya94QE.50 from finetune_area returns wrong image/video, use 2142 instead.
 42%|████▏     | 614/1455 [6:31:49<2:26:21, 10.44s/it][h264 @ 0x55d4c34842c0] mmco: unref short failure
[h264 @ 0x55934f26a400] mmco: unref short failure
 42%|████▏     | 615/1455 [6:31:59<2:22:00, 10.14s/it][h264 @ 0x55a01b45dac0] mmco: unref short failure
[h264 @ 0x55d4cdda0dc0] mmco: unref short failure
[h264 @ 0x55d4cdda0dc0] mmco: unref short failure
[h264 @ 0x55a01b45dac0] mmco: unref short failure
[h264 @ 0x555ffb29a180] mmco: unref short failure
[h264 @ 0x55d4befb92c0] mmco: unref short failure
[h264 @ 0x55d4befb92c0] mmco: unref short failure
[h264 @ 0x55a020bdd1c0] mmco: unref short failure
[h264 @ 0x5560285c4740] mmco: unref short failure
[h264 @ 0x5560285c4740] mmco: unref short failure
[h264 @ 0x55a023e7b440] mmco: unref short failure
[h264 @ 0x55a023e7b440] mmco: unref short failure
[h264 @ 0x55a02b01fac0] mmco: unref short failure
09/17/2024 06:13:01 - INFO - __main__ -   current idx eIBeK5EEG4o.35 from finetune_area returns wrong image/video, use 72996 instead.
[h264 @ 0x55934b0960c0] mmco: unref short failure
[h264 @ 0x55935809ce00] mmco: unref short failure
[h264 @ 0x55d4d158de40] mmco: unref short failure
[h264 @ 0x55a0112a0b40] mmco: unref short failure
[h264 @ 0x55a0112a0b40] mmco: unref short failure
[h264 @ 0x559337bd24c0] mmco: unref short failure
[h264 @ 0x559337bd24c0] mmco: unref short failure
[h264 @ 0x55a01e60d9c0] mmco: unref short failure
[h264 @ 0x55a01024a100] mmco: unref short failure
[h264 @ 0x55a03b8da700] mmco: unref short failure
[h264 @ 0x55a03b8da700] mmco: unref short failure
[h264 @ 0x555fe14ac980] mmco: unref short failure
[h264 @ 0x555fe14ac980] mmco: unref short failure
[h264 @ 0x555fdd6a9540] mmco: unref short failure
[h264 @ 0x55a00efed880] mmco: unref short failure
[h264 @ 0x555ff4168d80] mmco: unref short failure
[h264 @ 0x555ff4168d80] mmco: unref short failure
[h264 @ 0x55a0247c50c0] mmco: unref short failure
[h264 @ 0x55a0247c50c0] mmco: unref short failure
[h264 @ 0x55d4d6e8f000] mmco: unref short failure
[h264 @ 0x55d4d6e8f000] mmco: unref short failure
[h264 @ 0x555fda747900] mmco: unref short failure
[h264 @ 0x555fda747700] mmco: unref short failure
 42%|████▏     | 616/1455 [6:33:51<9:31:45, 40.89s/it][h264 @ 0x55a02dfe33c0] mmco: unref short failure
[h264 @ 0x55a02dfe33c0] mmco: unref short failure
[h264 @ 0x55935977a980] mmco: unref short failure
[h264 @ 0x55935977a980] mmco: unref short failure
[h264 @ 0x555fe2e11a00] mmco: unref short failure
[h264 @ 0x55a03b8dae40] mmco: unref short failure
[h264 @ 0x55a03b8dae40] mmco: unref short failure
[h264 @ 0x55a02ffae940] mmco: unref short failure
[h264 @ 0x55a02ffae940] mmco: unref short failure
[h264 @ 0x55a033850600] mmco: unref short failure
[h264 @ 0x55a033850600] mmco: unref short failure
 42%|████▏     | 617/1455 [6:34:26<9:06:28, 39.13s/it][h264 @ 0x559335db67c0] mmco: unref short failure
[h264 @ 0x559335db67c0] mmco: unref short failure
[h264 @ 0x55d4daa53a40] mmco: unref short failure
[h264 @ 0x55d4daa53a40] mmco: unref short failure
 42%|████▏     | 618/1455 [6:34:42<7:28:15, 32.13s/it][h264 @ 0x55d4da598500] mmco: unref short failure
[h264 @ 0x55d4da598500] mmco: unref short failure
[h264 @ 0x555feaa10000] mmco: unref short failure
[h264 @ 0x55d4c08235c0] mmco: unref short failure
[h264 @ 0x55d4c08235c0] mmco: unref short failure
 43%|████▎     | 619/1455 [6:35:00<6:29:26, 27.95s/it][h264 @ 0x555fef813700] mmco: unref short failure
[h264 @ 0x555fef813700] mmco: unref short failure
[h264 @ 0x5593388b1c80] mmco: unref short failure
[h264 @ 0x5593388b1c80] mmco: unref short failure
[h264 @ 0x5560053ab380] mmco: unref short failure
[h264 @ 0x55934fb073c0] mmco: unref short failure
[h264 @ 0x555fdbc58a40] mmco: unref short failure
[h264 @ 0x555fdbc58a40] mmco: unref short failure
[h264 @ 0x55a035401ec0] mmco: unref short failure
[h264 @ 0x55a035401ec0] mmco: unref short failure
 43%|████▎     | 620/1455 [6:35:15<5:35:05, 24.08s/it][h264 @ 0x55a014994580] mmco: unref short failure
[h264 @ 0x55935e2b6200] mmco: unref short failure
[h264 @ 0x55935e2b6200] mmco: unref short failure
[h264 @ 0x55a019b89000] mmco: unref short failure
[h264 @ 0x55a019b89000] mmco: unref short failure
[h264 @ 0x55a019b89000] mmco: unref short failure
 43%|████▎     | 621/1455 [6:35:37<5:22:43, 23.22s/it][h264 @ 0x55d4c1a13500] mmco: unref short failure
[h264 @ 0x55a017e48f40] mmco: unref short failure
[h264 @ 0x5560027e2940] mmco: unref short failure
[h264 @ 0x5560027e2940] mmco: unref short failure
 43%|████▎     | 622/1455 [6:35:45<4:21:00, 18.80s/it][h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
[h264 @ 0x555ffa36d040] mmco: unref short failure
 43%|████▎     | 623/1455 [6:35:53<3:37:23, 15.68s/it][h264 @ 0x556002908840] mmco: unref short failure
[h264 @ 0x556002908840] mmco: unref short failure
[h264 @ 0x55a02951d200] mmco: unref short failure
[h264 @ 0x55a02951d200] mmco: unref short failure
[h264 @ 0x55a01d2ec900] mmco: unref short failure
[h264 @ 0x55a01d2ec900] mmco: unref short failure
[h264 @ 0x55a01a1e7080] mmco: unref short failure
[h264 @ 0x55a01a1e7080] mmco: unref short failure
[h264 @ 0x55a0512b2d80] mmco: unref short failure
[h264 @ 0x55a0512b2d80] mmco: unref short failure
[h264 @ 0x55933df952c0] mmco: unref short failure
[h264 @ 0x55a038b51300] mmco: unref short failure
[h264 @ 0x55a038b51300] mmco: unref short failure
[h264 @ 0x55600118d900] mmco: unref short failure
[h264 @ 0x55d4ca8cdc80] mmco: unref short failure
[h264 @ 0x55d4ca8cdc80] mmco: unref short failure
[h264 @ 0x55d4ca8cdc80] mmco: unref short failure
[h264 @ 0x55d4ca8cdc80] mmco: unref short failure
[h264 @ 0x5560242f8a00] mmco: unref short failure
[h264 @ 0x5560242f8a00] mmco: unref short failure
[h264 @ 0x555ff6bd0280] mmco: unref short failure
[h264 @ 0x555ff6bd0280] mmco: unref short failure
[h264 @ 0x559355c03c40] mmco: unref short failure
[h264 @ 0x559355c03c40] mmco: unref short failure
[h264 @ 0x55933e582c40] mmco: unref short failure
[h264 @ 0x55933e582c40] mmco: unref short failure
[h264 @ 0x555ffc1bc780] mmco: unref short failure
[h264 @ 0x555ffc1bc780] mmco: unref short failure
[h264 @ 0x55a023808ac0] mmco: unref short failure
[h264 @ 0x555ffb718d40] mmco: unref short failure
[h264 @ 0x555ffb718d40] mmco: unref short failure
[h264 @ 0x55a022cab940] mmco: unref short failure
[h264 @ 0x55933e47c980] mmco: unref short failure
[h264 @ 0x55933e47c980] mmco: unref short failure
[h264 @ 0x55a02d82c7c0] mmco: unref short failure
[h264 @ 0x55a02d82c7c0] mmco: unref short failure
[h264 @ 0x55a02b9d61c0] mmco: unref short failure
[h264 @ 0x55a02b9d61c0] mmco: unref short failure
[h264 @ 0x55a02b98b380] mmco: unref short failure
[h264 @ 0x55a02b98b380] mmco: unref short failure
[h264 @ 0x55a02f37ab00] mmco: unref short failure
[h264 @ 0x55a02f37ab00] mmco: unref short failure
[h264 @ 0x55a02f37ab00] mmco: unref short failure
[h264 @ 0x55a02f37ab00] mmco: unref short failure
[h264 @ 0x55d4cac6bb80] mmco: unref short failure
[h264 @ 0x55d4cac6bb80] mmco: unref short failure
[h264 @ 0x55a02dfe33c0] mmco: unref short failure
[h264 @ 0x55a01a8ab740] mmco: unref short failure
[h264 @ 0x55a01a8ab740] mmco: unref short failure
[h264 @ 0x55d4d57e1300] mmco: unref short failure
[h264 @ 0x55d4d57e1300] mmco: unref short failure
[h264 @ 0x55a01e45fcc0] mmco: unref short failure
09/17/2024 06:19:06 - INFO - __main__ -   current idx ULdsvnXj9Hc.89 from finetune_area returns wrong image/video, use 112057 instead.
 43%|████▎     | 624/1455 [6:38:47<14:33:22, 63.06s/it][h264 @ 0x556006258d00] mmco: unref short failure
[h264 @ 0x559344602cc0] mmco: unref short failure
[h264 @ 0x555ff5aae000] mmco: unref short failure
[h264 @ 0x555ff5aae000] mmco: unref short failure
[h264 @ 0x5593596af700] mmco: unref short failure
[h264 @ 0x5593596af700] mmco: unref short failure
 43%|████▎     | 625/1455 [6:39:16<12:08:54, 52.69s/it][h264 @ 0x555fe7b62680] mmco: unref short failure
[h264 @ 0x555fe7b62680] mmco: unref short failure
[h264 @ 0x55a01acf2ec0] mmco: unref short failure
[h264 @ 0x55a01acf2ec0] mmco: unref short failure
[h264 @ 0x555ff99e4f40] mmco: unref short failure
[h264 @ 0x555ff99e4f40] mmco: unref short failure
[h264 @ 0x55a02f37a440] mmco: unref short failure
[h264 @ 0x55a02f37a440] mmco: unref short failure
[h264 @ 0x55934fdc6980] mmco: unref short failure
[h264 @ 0x559355b76d00] mmco: unref short failure
[h264 @ 0x559355b76d00] mmco: unref short failure
[h264 @ 0x559355b76d00] mmco: unref short failure
[h264 @ 0x559355b76d00] mmco: unref short failure
[h264 @ 0x55d4c7203080] mmco: unref short failure
[h264 @ 0x55d4c7203080] mmco: unref short failure
[h264 @ 0x559341791fc0] mmco: unref short failure
[h264 @ 0x559341791fc0] mmco: unref short failure
[h264 @ 0x55d4c56ae380] mmco: unref short failure
[h264 @ 0x55d4c56ae380] mmco: unref short failure
 43%|████▎     | 626/1455 [6:39:47<10:39:26, 46.28s/it] 43%|████▎     | 627/1455 [6:39:58<8:11:56, 35.65s/it] [h264 @ 0x5560274e6f80] mmco: unref short failure
[h264 @ 0x5560274e6f80] mmco: unref short failure
[h264 @ 0x55935ec4f680] mmco: unref short failure
09/17/2024 06:20:23 - INFO - __main__ -   current idx g0isRLf0U2E.7 from finetune_area returns wrong image/video, use 32576 instead.
[h264 @ 0x55d4bfe748c0] mmco: unref short failure
[h264 @ 0x55a03678f480] mmco: unref short failure
[h264 @ 0x555fedec48c0] mmco: unref short failure
[h264 @ 0x555fedec48c0] mmco: unref short failure
[h264 @ 0x5593346ba840] mmco: unref short failure
[h264 @ 0x5593346ba840] mmco: unref short failure
[h264 @ 0x5593346ba840] mmco: unref short failure
[h264 @ 0x5593346ba840] mmco: unref short failure
[h264 @ 0x55a03848b280] mmco: unref short failure
[h264 @ 0x55a03848b280] mmco: unref short failure
[h264 @ 0x55a03848b280] mmco: unref short failure
[h264 @ 0x55a03848b280] mmco: unref short failure
 43%|████▎     | 628/1455 [6:40:27<7:46:03, 33.81s/it][h264 @ 0x55a03848b280] mmco: unref short failure
[h264 @ 0x55a03848b280] mmco: unref short failure
[h264 @ 0x555ff99e5140] mmco: unref short failure
[h264 @ 0x559355379b00] mmco: unref short failure
[h264 @ 0x559355379b00] mmco: unref short failure
 43%|████▎     | 629/1455 [6:40:37<6:04:45, 26.50s/it][h264 @ 0x55d4c70a4500] mmco: unref short failure
[h264 @ 0x55935e1a5540] mmco: unref short failure
[h264 @ 0x55935e1a5540] mmco: unref short failure
[h264 @ 0x55d4d65804c0] mmco: unref short failure
[h264 @ 0x55a03848abc0] mmco: unref short failure
[h264 @ 0x5560276673c0] mmco: unref short failure
[h264 @ 0x5560276673c0] mmco: unref short failure
 43%|████▎     | 630/1455 [6:40:50<5:11:32, 22.66s/it][h264 @ 0x559355c9c2c0] mmco: unref short failure
[h264 @ 0x559360e772c0] mmco: unref short failure
[h264 @ 0x555fe2eb3840] mmco: unref short failure
[h264 @ 0x55a01215a9c0] mmco: unref short failure
 43%|████▎     | 631/1455 [6:40:59<4:14:17, 18.52s/it][h264 @ 0x55a012996a40] mmco: unref short failure
[h264 @ 0x55a012996a40] mmco: unref short failure
[h264 @ 0x55d4df184f80] mmco: unref short failure
[h264 @ 0x55933e62cb00] mmco: unref short failure
[h264 @ 0x55933e62cb00] mmco: unref short failure
[h264 @ 0x555ff42ae1c0] mmco: unref short failure
[h264 @ 0x555ff42ae1c0] mmco: unref short failure
[h264 @ 0x55d4ba4c6780] mmco: unref short failure
[h264 @ 0x55d4ba4c6780] mmco: unref short failure
[h264 @ 0x55d4bc692cc0] mmco: unref short failure
[h264 @ 0x55d4bc692cc0] mmco: unref short failure
09/17/2024 06:21:56 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 123437 instead.
[h264 @ 0x55a0323b20c0] mmco: unref short failure
[h264 @ 0x55a0323b20c0] mmco: unref short failure
[h264 @ 0x559351b5ba80] mmco: unref short failure
[h264 @ 0x559351b5ba80] mmco: unref short failure
[h264 @ 0x55d4df932f40] mmco: unref short failure
[h264 @ 0x55d4df932f40] mmco: unref short failure
[h264 @ 0x55d4e13a9840] mmco: unref short failure
[h264 @ 0x55d4e13a9840] mmco: unref short failure
[h264 @ 0x55d4e13a9840] mmco: unref short failure
[h264 @ 0x55d4e13a9840] mmco: unref short failure
[h264 @ 0x556007d5e880] mmco: unref short failure
[h264 @ 0x55933877be00] mmco: unref short failure
[h264 @ 0x55933877be00] mmco: unref short failure
[h264 @ 0x55934da54040] mmco: unref short failure
[h264 @ 0x55934da54040] mmco: unref short failure
09/17/2024 06:22:36 - INFO - __main__ -   current idx A-E7Tr5PbZI.14 from finetune_area returns wrong image/video, use 29144 instead.
[h264 @ 0x55933bb5cdc0] mmco: unref short failure
[h264 @ 0x55933bb5cdc0] mmco: unref short failure
[h264 @ 0x555fdfd60680] mmco: unref short failure
[h264 @ 0x55a016bcc3c0] mmco: unref short failure
[h264 @ 0x55a016bcc3c0] mmco: unref short failure
[h264 @ 0x55a04eed9f40] mmco: unref short failure
[h264 @ 0x55a04eed9f40] mmco: unref short failure
[h264 @ 0x555fe1a5c580] mmco: unref short failure
[h264 @ 0x55935af55140] mmco: unref short failure
[h264 @ 0x555fdbcef600] mmco: unref short failure
[h264 @ 0x555fdbcef600] mmco: unref short failure
[h264 @ 0x55935bd55800] mmco: unref short failure
[h264 @ 0x55d4c9e3e340] mmco: unref short failure
[h264 @ 0x55935756f940] mmco: unref short failure
[h264 @ 0x55935756f940] mmco: unref short failure
[h264 @ 0x5593608b85c0] mmco: unref short failure
[h264 @ 0x5593627914c0] mmco: unref short failure
[h264 @ 0x5593627914c0] mmco: unref short failure
09/17/2024 06:23:51 - INFO - __main__ -   current idx aKaIctkC1IU.24 from finetune_area returns wrong image/video, use 16094 instead.
[h264 @ 0x555fe30b75c0] mmco: unref short failure
[h264 @ 0x55a031395e00] mmco: unref short failure
[h264 @ 0x55a031395e00] mmco: unref short failure
[h264 @ 0x55a031395e00] mmco: unref short failure
[h264 @ 0x55a031395e00] mmco: unref short failure
[h264 @ 0x55935a0df240] mmco: unref short failure
[h264 @ 0x55935a0df240] mmco: unref short failure
[h264 @ 0x559363d36740] mmco: unref short failure
[h264 @ 0x559363d36740] mmco: unref short failure
[h264 @ 0x55934b9f6d00] mmco: unref short failure
 43%|████▎     | 632/1455 [6:43:42<14:09:22, 61.92s/it][h264 @ 0x55934b1f3a80] mmco: unref short failure
[h264 @ 0x55934b1f3a80] mmco: unref short failure
[h264 @ 0x559339fac5c0] mmco: unref short failure
[h264 @ 0x559339fac5c0] mmco: unref short failure
[h264 @ 0x555ffd0649c0] mmco: unref short failure
[h264 @ 0x555ffd0649c0] mmco: unref short failure
[h264 @ 0x55a037cce540] mmco: unref short failure
[h264 @ 0x55a029f8a5c0] mmco: unref short failure
[h264 @ 0x55a029f8a5c0] mmco: unref short failure
[h264 @ 0x55a029f8a5c0] mmco: unref short failure
[h264 @ 0x55a029f8a5c0] mmco: unref short failure
not have audios GAwav3sZcGw.4
 44%|████▎     | 633/1455 [6:44:24<12:45:08, 55.85s/it][h264 @ 0x55d4cb272440] mmco: unref short failure
[h264 @ 0x55d4cb272440] mmco: unref short failure
[h264 @ 0x55a0353a8a00] mmco: unref short failure
[h264 @ 0x55a0353a8a00] mmco: unref short failure
[h264 @ 0x55a031d3ce00] mmco: unref short failure
[h264 @ 0x555fe2e34480] mmco: unref short failure
[h264 @ 0x555fe2e34480] mmco: unref short failure
[h264 @ 0x55a0260a8b80] mmco: unref short failure
[h264 @ 0x55d4ca4827c0] mmco: unref short failure
[h264 @ 0x55d4ca4827c0] mmco: unref short failure
[h264 @ 0x559333afbec0] mmco: unref short failure
[h264 @ 0x559333afbec0] mmco: unref short failure
[h264 @ 0x55935d7dad40] mmco: unref short failure
 44%|████▎     | 634/1455 [6:44:54<10:57:15, 48.03s/it][h264 @ 0x5593560a3180] mmco: unref short failure
[h264 @ 0x5593560a3180] mmco: unref short failure
[h264 @ 0x55a054445b80] mmco: unref short failure
[h264 @ 0x55a054445b80] mmco: unref short failure
 44%|████▎     | 635/1455 [6:45:03<8:16:36, 36.34s/it] [h264 @ 0x555ff271e780] mmco: unref short failure
[h264 @ 0x555fec3d0200] mmco: unref short failure
[h264 @ 0x555fec3d0200] mmco: unref short failure
[h264 @ 0x555fec3d0200] mmco: unref short failure
[h264 @ 0x555fec3d0200] mmco: unref short failure
[h264 @ 0x555ff5aa23c0] mmco: unref short failure
[h264 @ 0x555ffb7996c0] mmco: unref short failure
 44%|████▎     | 636/1455 [6:45:25<7:18:36, 32.13s/it][h264 @ 0x55d4e6f168c0] mmco: unref short failure
[h264 @ 0x55d4e6f168c0] mmco: unref short failure
 44%|████▍     | 637/1455 [6:45:34<5:43:13, 25.17s/it][h264 @ 0x55a0378bbf40] mmco: unref short failure
[h264 @ 0x55a0378bbf40] mmco: unref short failure
[h264 @ 0x55d4e401cf00] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55a051c67900] mmco: unref short failure
[h264 @ 0x55d4de5e33c0] mmco: unref short failure
[h264 @ 0x55d4de5e33c0] mmco: unref short failure
 44%|████▍     | 638/1455 [6:46:19<7:02:01, 30.99s/it][h264 @ 0x559341205100] mmco: unref short failure
[h264 @ 0x55934b133e40] mmco: unref short failure
[h264 @ 0x55934b133e40] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x5560027e2dc0] mmco: unref short failure
[h264 @ 0x555fdeecc200] mmco: unref short failure
[h264 @ 0x555fdeecc200] mmco: unref short failure
[h264 @ 0x55a0263f3b00] mmco: unref short failure
[h264 @ 0x55a0263f3b00] mmco: unref short failure
[h264 @ 0x555ff6f5b340] mmco: unref short failure
[h264 @ 0x555ff6f5b340] mmco: unref short failure
 44%|████▍     | 639/1455 [6:46:28<5:31:29, 24.37s/it][h264 @ 0x55a03add8080] mmco: unref short failure
[h264 @ 0x55a0405765c0] mmco: unref short failure
[h264 @ 0x55a0405765c0] mmco: unref short failure
[h264 @ 0x55a0405765c0] mmco: unref short failure
[h264 @ 0x55a0405765c0] mmco: unref short failure
[h264 @ 0x55d4c098ba80] mmco: unref short failure
[h264 @ 0x55d4c098ba80] mmco: unref short failure
[h264 @ 0x55a0331e4500] mmco: unref short failure
[h264 @ 0x55a0331e4500] mmco: unref short failure
[h264 @ 0x555ff7860380] mmco: unref short failure
[h264 @ 0x555ff7860380] mmco: unref short failure
[h264 @ 0x55934df31ac0] mmco: unref short failure
[h264 @ 0x555fdef40140] mmco: unref short failure
[h264 @ 0x55a023621900] mmco: unref short failure
[h264 @ 0x55a023621900] mmco: unref short failure
[h264 @ 0x55d4c1f50c00] mmco: unref short failure
[h264 @ 0x55935a0c4000] mmco: unref short failure
[h264 @ 0x55935a0c4000] mmco: unref short failure
[h264 @ 0x55935a0c4000] mmco: unref short failure
[h264 @ 0x55a02845abc0] mmco: unref short failure
[h264 @ 0x55a02845abc0] mmco: unref short failure
[h264 @ 0x556004be9dc0] mmco: unref short failure
[h264 @ 0x556004be9dc0] mmco: unref short failure
[h264 @ 0x55d4e17860c0] mmco: unref short failure
[h264 @ 0x555fe90464c0] mmco: unref short failure
[h264 @ 0x555fdab5ad80] mmco: unref short failure
[h264 @ 0x559345944cc0] mmco: unref short failure
[h264 @ 0x559345944cc0] mmco: unref short failure
[h264 @ 0x559335eb5940] mmco: unref short failure
[h264 @ 0x559363d53540] mmco: unref short failure
[h264 @ 0x559363d53540] mmco: unref short failure
[h264 @ 0x559363d53540] mmco: unref short failure
[h264 @ 0x559363d53540] mmco: unref short failure
09/17/2024 06:28:40 - INFO - __main__ -   current idx Z9v3A-MeZGQ.15 from finetune_area returns wrong image/video, use 135972 instead.
[h264 @ 0x55d4e799c300] mmco: unref short failure
[h264 @ 0x55d4e799c300] mmco: unref short failure
[h264 @ 0x556010e46140] mmco: unref short failure
[h264 @ 0x556010e46140] mmco: unref short failure
09/17/2024 06:29:01 - INFO - __main__ -   current idx D5HFB_qydCY.50 from finetune_area returns wrong image/video, use 48679 instead.
 44%|████▍     | 640/1455 [6:48:41<12:55:12, 57.07s/it][h264 @ 0x55a03cf91880] mmco: unref short failure
[h264 @ 0x55a03cf91880] mmco: unref short failure
[h264 @ 0x55a03cf91880] mmco: unref short failure
[h264 @ 0x55a03cf91880] mmco: unref short failure
09/17/2024 06:29:21 - INFO - __main__ -   current idx QRr-nFmU9s8.3 from finetune_area returns wrong image/video, use 76323 instead.
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55600a77f540] mmco: unref short failure
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55d4dd08f780] mmco: unref short failure
[h264 @ 0x55d4ccf496c0] mmco: unref short failure
 44%|████▍     | 641/1455 [6:49:32<12:27:59, 55.13s/it][h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55a0234dc840] mmco: unref short failure
[h264 @ 0x55935681b100] mmco: unref short failure
[h264 @ 0x55a05663e240] mmco: unref short failure
[h264 @ 0x55935ef66c80] mmco: unref short failure
 44%|████▍     | 642/1455 [6:49:54<10:13:27, 45.27s/it] 44%|████▍     | 643/1455 [6:50:04<7:49:21, 34.68s/it] 09/17/2024 06:30:26 - INFO - __main__ -   current idx PXm6mn8_9zE.31 from finetune_area returns wrong image/video, use 93076 instead.
[h264 @ 0x55d4e0c57780] mmco: unref short failure
[h264 @ 0x55d4e0c57780] mmco: unref short failure
[h264 @ 0x555fe6407f80] mmco: unref short failure
[h264 @ 0x555fe6407f80] mmco: unref short failure
[h264 @ 0x55d4d5ec7600] mmco: unref short failure
[h264 @ 0x55933de765c0] mmco: unref short failure
[h264 @ 0x55a0416ce740] mmco: unref short failure
[h264 @ 0x55a0416ce740] mmco: unref short failure
 44%|████▍     | 644/1455 [6:50:20<6:35:03, 29.23s/it][h264 @ 0x559364689ec0] mmco: unref short failure
[h264 @ 0x559364689ec0] mmco: unref short failure
 44%|████▍     | 645/1455 [6:50:29<5:12:03, 23.12s/it][h264 @ 0x55d4e1661ac0] mmco: unref short failure
[h264 @ 0x555ffc41bb00] mmco: unref short failure
[h264 @ 0x55a02584ac80] mmco: unref short failure
[h264 @ 0x55a02584ac80] mmco: unref short failure
[h264 @ 0x55d4db3cb980] mmco: unref short failure
[h264 @ 0x55a04fc4dbc0] mmco: unref short failure
[h264 @ 0x55a04fc4dbc0] mmco: unref short failure
[h264 @ 0x55a04fc4dbc0] mmco: unref short failure
[h264 @ 0x55a04fc4dbc0] mmco: unref short failure
[h264 @ 0x55935e129700] mmco: unref short failure
[h264 @ 0x55935e129700] mmco: unref short failure
[h264 @ 0x55a03e9c6c80] mmco: unref short failure
[h264 @ 0x55a03e9c6c80] mmco: unref short failure
 44%|████▍     | 646/1455 [6:51:06<6:07:47, 27.28s/it] 44%|████▍     | 647/1455 [6:51:16<4:55:55, 21.97s/it]09/17/2024 06:32:03 - INFO - __main__ -   current idx 7tqvfeOf2ug.2 from finetune_area returns wrong image/video, use 134157 instead.
[h264 @ 0x55a05079ed40] mmco: unref short failure
[h264 @ 0x55a05079ed40] mmco: unref short failure
[h264 @ 0x55d4df88a340] mmco: unref short failure
[h264 @ 0x55d4df88a340] mmco: unref short failure
[h264 @ 0x55d4e3191140] mmco: unref short failure
[h264 @ 0x55d4e3191140] mmco: unref short failure
[h264 @ 0x5560022c0bc0] mmco: unref short failure
[h264 @ 0x5560022c0bc0] mmco: unref short failure
[h264 @ 0x555fe0124b80] mmco: unref short failure
[h264 @ 0x555fe0124b80] mmco: unref short failure
[h264 @ 0x555ff0b673c0] mmco: unref short failure
[h264 @ 0x556006b53740] mmco: unref short failure
[h264 @ 0x556006b53740] mmco: unref short failure
[h264 @ 0x55a059756240] mmco: unref short failure
[h264 @ 0x55a059756240] mmco: unref short failure
[h264 @ 0x55935eafe5c0] mmco: unref short failure
[h264 @ 0x555fe1fe7d00] mmco: unref short failure
[h264 @ 0x555fe1fe7d00] mmco: unref short failure
[h264 @ 0x555ffeb347c0] mmco: unref short failure
[h264 @ 0x555fdc7e2840] mmco: unref short failure
[h264 @ 0x559335da0680] mmco: unref short failure
[h264 @ 0x55933aa54480] mmco: unref short failure
[h264 @ 0x55933aa54480] mmco: unref short failure
[h264 @ 0x559342bd98c0] mmco: unref short failure
[h264 @ 0x559342bd98c0] mmco: unref short failure
[h264 @ 0x55a026826380] mmco: unref short failure
[h264 @ 0x55a026826380] mmco: unref short failure
[h264 @ 0x5593640e42c0] mmco: unref short failure
[h264 @ 0x5593640e42c0] mmco: unref short failure
[h264 @ 0x555fead27380] mmco: unref short failure
09/17/2024 06:33:46 - INFO - __main__ -   current idx YAXaCmky4Hw.31 from finetune_area returns wrong image/video, use 9904 instead.
[h264 @ 0x55d4db3cb740] mmco: unref short failure
[h264 @ 0x55d4db3cb740] mmco: unref short failure
[h264 @ 0x55d4db477680] mmco: unref short failure
 45%|████▍     | 648/1455 [6:53:53<14:00:59, 62.53s/it][h264 @ 0x55935ef66a00] mmco: unref short failure
[h264 @ 0x55935ef66a00] mmco: unref short failure
[h264 @ 0x55a05b0aee40] mmco: unref short failure
[h264 @ 0x55a05b0aee40] mmco: unref short failure
[h264 @ 0x55600d25b380] mmco: unref short failure
[h264 @ 0x55600d25b380] mmco: unref short failure
 45%|████▍     | 649/1455 [6:54:19<11:33:10, 51.60s/it]09/17/2024 06:34:41 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 06:34:41 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55a03adfbcc0] mmco: unref short failure
[h264 @ 0x55a03adfbcc0] mmco: unref short failure
[h264 @ 0x55a03adfbcc0] mmco: unref short failure
[h264 @ 0x55a03adfbcc0] mmco: unref short failure
[h264 @ 0x559369bbb100] mmco: unref short failure
[h264 @ 0x559369bbb100] mmco: unref short failure
[h264 @ 0x555fd93d8180] mmco: unref short failure
[h264 @ 0x55934665a080] mmco: unref short failure
[h264 @ 0x55934665a080] mmco: unref short failure
[h264 @ 0x55d4e8122cc0] mmco: unref short failure
[h264 @ 0x55d4e8122cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d4e3de9200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55d4c2270ac0] mmco: unref short failure
09/17/2024 06:36:05 - INFO - __main__ -   current idx TTR3lV4sfVY.61 from finetune_area returns wrong image/video, use 31900 instead.
[h264 @ 0x55a044ea94c0] mmco: unref short failure
[h264 @ 0x55a023f9ca00] mmco: unref short failure
09/17/2024 06:36:45 - INFO - __main__ -   current idx TUTUj9BQYwU.13 from finetune_area returns wrong image/video, use 15771 instead.
[h264 @ 0x559363e39280] mmco: unref short failure
[h264 @ 0x559363e39280] mmco: unref short failure
[h264 @ 0x55935abefb40] mmco: unref short failure
[h264 @ 0x55935abefb40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:32,  1.03it/s][A
  1%|          | 2/221 [00:01<02:46,  1.31it/s][A
  1%|▏         | 3/221 [00:01<01:55,  1.89it/s][A
  2%|▏         | 4/221 [00:04<04:35,  1.27s/it][A
  2%|▏         | 5/221 [00:04<03:07,  1.15it/s][A
  3%|▎         | 6/221 [00:04<02:11,  1.63it/s][A
  3%|▎         | 7/221 [00:04<01:51,  1.91it/s][A
  4%|▎         | 8/221 [00:05<01:55,  1.84it/s][A
  4%|▍         | 9/221 [00:05<01:36,  2.19it/s][A[h264 @ 0x55a05c187d00] mmco: unref short failure

  5%|▍         | 10/221 [00:06<01:54,  1.85it/s][A
  5%|▍         | 11/221 [00:06<01:27,  2.39it/s][A
  5%|▌         | 12/221 [00:07<01:27,  2.40it/s][A
  6%|▌         | 13/221 [00:07<01:13,  2.82it/s][A
  6%|▋         | 14/221 [00:08<02:31,  1.37it/s][A
  7%|▋         | 15/221 [00:09<02:02,  1.68it/s][A
  7%|▋         | 16/221 [00:09<01:51,  1.83it/s][A
  8%|▊         | 17/221 [00:09<01:35,  2.14it/s][A
  8%|▊         | 18/221 [00:10<01:22,  2.47it/s][A
  9%|▊         | 19/221 [00:10<01:06,  3.05it/s][A
  9%|▉         | 20/221 [00:10<00:55,  3.59it/s][A
 10%|▉         | 21/221 [00:10<00:49,  4.06it/s][A
 10%|▉         | 22/221 [00:10<00:50,  3.95it/s][A
 11%|█         | 24/221 [00:11<00:38,  5.08it/s][A
 11%|█▏        | 25/221 [00:11<00:39,  4.95it/s][A
 12%|█▏        | 26/221 [00:11<00:46,  4.19it/s][A
 13%|█▎        | 28/221 [00:12<00:48,  3.99it/s][A
 13%|█▎        | 29/221 [00:12<00:42,  4.55it/s][A
 14%|█▎        | 30/221 [00:12<00:43,  4.42it/s][A
 14%|█▍        | 31/221 [00:12<00:46,  4.11it/s][A
 14%|█▍        | 32/221 [00:12<00:39,  4.82it/s][A
 15%|█▍        | 33/221 [00:13<00:49,  3.81it/s][A
 15%|█▌        | 34/221 [00:13<00:46,  3.98it/s][A
 16%|█▌        | 35/221 [00:13<00:41,  4.49it/s][A
 16%|█▋        | 36/221 [00:13<00:43,  4.26it/s][A
 17%|█▋        | 37/221 [00:14<01:01,  3.00it/s][A
 17%|█▋        | 38/221 [00:15<01:08,  2.67it/s][A
 18%|█▊        | 39/221 [00:15<00:53,  3.39it/s][A
 18%|█▊        | 40/221 [00:15<00:56,  3.20it/s][A
 19%|█▊        | 41/221 [00:15<00:45,  3.92it/s][A
 19%|█▉        | 42/221 [00:16<00:55,  3.21it/s][A
 19%|█▉        | 43/221 [00:16<00:45,  3.92it/s][A
 20%|█▉        | 44/221 [00:16<00:43,  4.08it/s][A
 20%|██        | 45/221 [00:17<01:11,  2.45it/s][A
 21%|██        | 46/221 [00:17<01:07,  2.59it/s][A[h264 @ 0x55a02e395b40] mmco: unref short failure
[h264 @ 0x55a02e395b40] mmco: unref short failure

 21%|██▏       | 47/221 [00:18<01:17,  2.23it/s][A
 22%|██▏       | 48/221 [00:18<01:01,  2.83it/s][A
 22%|██▏       | 49/221 [00:18<00:52,  3.26it/s][A
 23%|██▎       | 50/221 [00:18<00:42,  4.05it/s][A
 24%|██▎       | 52/221 [00:18<00:34,  4.88it/s][A
 24%|██▍       | 53/221 [00:18<00:31,  5.33it/s][A
 24%|██▍       | 54/221 [00:20<01:19,  2.10it/s][A
 25%|██▍       | 55/221 [00:20<01:13,  2.26it/s][A
 25%|██▌       | 56/221 [00:20<01:03,  2.58it/s][A
 26%|██▌       | 57/221 [00:21<00:55,  2.93it/s][A
 26%|██▌       | 58/221 [00:21<00:44,  3.69it/s][A
 27%|██▋       | 59/221 [00:21<00:41,  3.89it/s][A
 27%|██▋       | 60/221 [00:21<00:50,  3.18it/s][A
 28%|██▊       | 61/221 [00:22<00:52,  3.06it/s][A
 28%|██▊       | 62/221 [00:22<00:47,  3.35it/s][A
 29%|██▊       | 63/221 [00:22<00:42,  3.72it/s][A[h264 @ 0x555ff0d714c0] mmco: unref short failure

 29%|██▉       | 64/221 [00:22<00:40,  3.92it/s][A[h264 @ 0x555ff0d714c0] mmco: unref short failure

 29%|██▉       | 65/221 [00:23<00:37,  4.20it/s][A
 30%|██▉       | 66/221 [00:23<00:46,  3.32it/s][A
 30%|███       | 67/221 [00:24<00:57,  2.67it/s][A[h264 @ 0x55d4d6198000] mmco: unref short failure

 31%|███       | 68/221 [00:24<00:51,  2.97it/s][A
 31%|███       | 69/221 [00:25<01:14,  2.04it/s][A
 32%|███▏      | 70/221 [00:25<00:59,  2.55it/s][A
 32%|███▏      | 71/221 [00:26<01:12,  2.07it/s][A
 33%|███▎      | 72/221 [00:26<01:04,  2.32it/s][A
 33%|███▎      | 73/221 [00:26<00:58,  2.52it/s][A
 33%|███▎      | 74/221 [00:26<00:47,  3.07it/s][A[h264 @ 0x55d4cd94b700] mmco: unref short failure
[h264 @ 0x55d4cd94b700] mmco: unref short failure

 34%|███▍      | 75/221 [00:27<00:50,  2.89it/s][A
 34%|███▍      | 76/221 [00:27<00:41,  3.49it/s][A
 35%|███▍      | 77/221 [00:27<00:38,  3.77it/s][A
 35%|███▌      | 78/221 [00:27<00:40,  3.53it/s][A
 36%|███▌      | 79/221 [00:28<00:48,  2.92it/s][A
 36%|███▌      | 80/221 [00:28<00:44,  3.20it/s][A
 37%|███▋      | 81/221 [00:28<00:45,  3.06it/s][A
 37%|███▋      | 82/221 [00:29<00:39,  3.54it/s][A
 38%|███▊      | 83/221 [00:29<00:32,  4.20it/s][A
 38%|███▊      | 84/221 [00:29<00:34,  3.95it/s][A
 38%|███▊      | 85/221 [00:29<00:31,  4.29it/s][A
 39%|███▉      | 86/221 [00:30<00:31,  4.32it/s][A
 39%|███▉      | 87/221 [00:30<00:47,  2.80it/s][A
 40%|███▉      | 88/221 [00:31<00:51,  2.59it/s][A
 40%|████      | 89/221 [00:32<01:27,  1.50it/s][A
 41%|████      | 90/221 [00:32<01:12,  1.82it/s][A
 41%|████      | 91/221 [00:32<00:57,  2.26it/s][A
 42%|████▏     | 92/221 [00:33<00:53,  2.43it/s][A
 42%|████▏     | 93/221 [00:33<00:58,  2.20it/s][A
 43%|████▎     | 94/221 [00:34<00:51,  2.45it/s][A
 43%|████▎     | 95/221 [00:34<00:40,  3.07it/s][A
 43%|████▎     | 96/221 [00:34<00:39,  3.20it/s][A
 44%|████▍     | 97/221 [00:34<00:32,  3.79it/s][A
 44%|████▍     | 98/221 [00:34<00:34,  3.56it/s][A
 45%|████▍     | 99/221 [00:35<00:28,  4.30it/s][A
 45%|████▌     | 100/221 [00:35<00:26,  4.65it/s][A
 46%|████▌     | 101/221 [00:35<00:24,  4.85it/s][A
 46%|████▌     | 102/221 [00:35<00:33,  3.52it/s][A
 47%|████▋     | 103/221 [00:36<00:29,  4.04it/s][A
 47%|████▋     | 104/221 [00:36<00:25,  4.63it/s][A
 48%|████▊     | 105/221 [00:36<00:27,  4.23it/s][A
 48%|████▊     | 106/221 [00:37<00:44,  2.56it/s][A
 48%|████▊     | 107/221 [00:37<00:37,  3.08it/s][A
 49%|████▉     | 108/221 [00:37<00:32,  3.48it/s][A
 49%|████▉     | 109/221 [00:37<00:34,  3.25it/s][A
 50%|████▉     | 110/221 [00:38<00:37,  2.99it/s][A
 50%|█████     | 111/221 [00:38<00:41,  2.66it/s][A
 51%|█████     | 112/221 [00:39<00:35,  3.04it/s][A
 51%|█████     | 113/221 [00:39<00:35,  3.06it/s][A
 52%|█████▏    | 115/221 [00:39<00:23,  4.52it/s][A
 52%|█████▏    | 116/221 [00:43<01:59,  1.14s/it][A
 53%|█████▎    | 117/221 [00:43<01:38,  1.05it/s][A
 53%|█████▎    | 118/221 [00:44<01:23,  1.24it/s][A
 54%|█████▍    | 119/221 [00:44<01:04,  1.59it/s][A
 54%|█████▍    | 120/221 [00:44<00:54,  1.86it/s][A
 55%|█████▍    | 121/221 [00:45<00:42,  2.33it/s][A
 55%|█████▌    | 122/221 [00:45<00:37,  2.66it/s][A
 56%|█████▌    | 123/221 [00:45<00:31,  3.09it/s][A[h264 @ 0x559349854140] mmco: unref short failure

 56%|█████▌    | 124/221 [00:45<00:30,  3.22it/s][A[h264 @ 0x559349854140] mmco: unref short failure

 57%|█████▋    | 125/221 [00:46<00:30,  3.13it/s][A
 57%|█████▋    | 126/221 [00:46<00:32,  2.95it/s][A09/17/2024 06:37:45 - INFO - __main__ -   current idx eB3AXJxM634.13 from finetune_area returns wrong image/video, use 55381 instead.

 57%|█████▋    | 127/221 [00:46<00:37,  2.51it/s][A
 58%|█████▊    | 128/221 [00:47<00:36,  2.54it/s][A[h264 @ 0x55a03918cc80] mmco: unref short failure

 58%|█████▊    | 129/221 [00:47<00:30,  2.98it/s][A
 59%|█████▉    | 130/221 [00:47<00:29,  3.12it/s][A
 59%|█████▉    | 131/221 [00:48<00:25,  3.54it/s][A
 60%|█████▉    | 132/221 [00:48<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:48<00:29,  3.01it/s][A
 61%|██████    | 134/221 [00:49<00:27,  3.15it/s][A
 61%|██████    | 135/221 [00:49<00:26,  3.20it/s][A
 62%|██████▏   | 136/221 [00:49<00:29,  2.90it/s][A
 62%|██████▏   | 137/221 [00:50<00:26,  3.17it/s][A
 62%|██████▏   | 138/221 [00:50<00:29,  2.81it/s][A
 63%|██████▎   | 139/221 [00:51<00:34,  2.38it/s][A
 63%|██████▎   | 140/221 [00:51<00:32,  2.48it/s][A
 64%|██████▍   | 141/221 [00:51<00:30,  2.66it/s][A[h264 @ 0x55d4e688eb00] mmco: unref short failure

 64%|██████▍   | 142/221 [00:52<00:28,  2.82it/s][A[h264 @ 0x55934b36e940] mmco: unref short failure

 65%|██████▍   | 143/221 [00:52<00:33,  2.36it/s][A
 65%|██████▌   | 144/221 [00:52<00:28,  2.74it/s][A
 66%|██████▌   | 145/221 [00:53<00:23,  3.23it/s][A
 66%|██████▌   | 146/221 [00:53<00:21,  3.56it/s][A
 67%|██████▋   | 147/221 [00:53<00:21,  3.47it/s][A
 67%|██████▋   | 148/221 [00:53<00:22,  3.30it/s][A
 67%|██████▋   | 149/221 [00:54<00:18,  3.94it/s][A
 68%|██████▊   | 150/221 [00:54<00:16,  4.27it/s][A
 68%|██████▊   | 151/221 [00:55<00:31,  2.24it/s][A
 69%|██████▉   | 152/221 [00:55<00:33,  2.06it/s][A
 69%|██████▉   | 153/221 [00:56<00:29,  2.27it/s][A
 70%|██████▉   | 154/221 [00:56<00:27,  2.42it/s][A
 70%|███████   | 155/221 [00:56<00:22,  2.95it/s][A
 71%|███████   | 156/221 [00:56<00:20,  3.19it/s][A
 71%|███████   | 157/221 [00:59<01:08,  1.07s/it][A
 71%|███████▏  | 158/221 [01:00<00:55,  1.13it/s][A
 72%|███████▏  | 159/221 [01:00<00:42,  1.45it/s][A
 72%|███████▏  | 160/221 [01:00<00:33,  1.80it/s][A
 73%|███████▎  | 161/221 [01:00<00:26,  2.28it/s][A
 73%|███████▎  | 162/221 [01:00<00:21,  2.75it/s][A
 74%|███████▍  | 163/221 [01:01<00:19,  2.96it/s][A
 74%|███████▍  | 164/221 [01:01<00:16,  3.46it/s][A
 75%|███████▍  | 165/221 [01:01<00:14,  3.84it/s][A
 75%|███████▌  | 166/221 [01:02<00:18,  2.90it/s][A
 76%|███████▌  | 167/221 [01:02<00:19,  2.78it/s][A
 76%|███████▌  | 168/221 [01:05<00:52,  1.00it/s][A
 76%|███████▋  | 169/221 [01:05<00:40,  1.29it/s][A
 77%|███████▋  | 170/221 [01:05<00:32,  1.59it/s][A
 77%|███████▋  | 171/221 [01:05<00:26,  1.87it/s][A
 78%|███████▊  | 172/221 [01:06<00:22,  2.17it/s][A
 78%|███████▊  | 173/221 [01:06<00:18,  2.61it/s][A
 79%|███████▊  | 174/221 [01:06<00:15,  3.02it/s][A
 79%|███████▉  | 175/221 [01:06<00:14,  3.14it/s][A
 80%|███████▉  | 176/221 [01:07<00:14,  3.05it/s][A
 80%|████████  | 177/221 [01:07<00:11,  3.71it/s][A
 81%|████████  | 178/221 [01:07<00:14,  2.98it/s][A
 81%|████████  | 179/221 [01:08<00:16,  2.61it/s][A
 81%|████████▏ | 180/221 [01:08<00:12,  3.32it/s][A[h264 @ 0x55a00edc7c00] mmco: unref short failure

 82%|████████▏ | 181/221 [01:08<00:11,  3.57it/s][A[h264 @ 0x559333d4a600] mmco: unref short failure

 82%|████████▏ | 182/221 [01:09<00:11,  3.45it/s][A[h264 @ 0x559333d4a600] mmco: unref short failure

 83%|████████▎ | 183/221 [01:09<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [01:09<00:11,  3.12it/s][A
 84%|████████▎ | 185/221 [01:09<00:11,  3.20it/s][A
 84%|████████▍ | 186/221 [01:10<00:14,  2.42it/s][A[h264 @ 0x556005b2bf80] mmco: unref short failure
[h264 @ 0x556005b2bf80] mmco: unref short failure

 85%|████████▍ | 187/221 [01:10<00:12,  2.78it/s][A
 85%|████████▌ | 188/221 [01:11<00:12,  2.62it/s][A
 86%|████████▌ | 189/221 [01:11<00:11,  2.73it/s][A
 86%|████████▌ | 190/221 [01:11<00:11,  2.77it/s][A
 86%|████████▋ | 191/221 [01:12<00:08,  3.43it/s][A
 87%|████████▋ | 192/221 [01:12<00:08,  3.34it/s][A
 87%|████████▋ | 193/221 [01:12<00:06,  4.13it/s][A
 88%|████████▊ | 194/221 [01:13<00:10,  2.51it/s][A
 88%|████████▊ | 195/221 [01:13<00:09,  2.87it/s][A
 89%|████████▊ | 196/221 [01:13<00:07,  3.46it/s][A
 89%|████████▉ | 197/221 [01:13<00:05,  4.04it/s][A
 90%|████████▉ | 198/221 [01:14<00:07,  2.93it/s][A
 90%|█████████ | 199/221 [01:14<00:06,  3.28it/s][A
 90%|█████████ | 200/221 [01:15<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [01:15<00:06,  3.31it/s][A
 91%|█████████▏| 202/221 [01:15<00:05,  3.49it/s][A
 92%|█████████▏| 203/221 [01:15<00:04,  3.87it/s][A
 92%|█████████▏| 204/221 [01:15<00:03,  4.34it/s][A
 93%|█████████▎| 205/221 [01:16<00:03,  4.80it/s][A
 93%|█████████▎| 206/221 [01:16<00:05,  2.89it/s][A
 94%|█████████▎| 207/221 [01:16<00:04,  3.39it/s][A
 94%|█████████▍| 208/221 [01:17<00:03,  3.64it/s][A
 95%|█████████▍| 209/221 [01:17<00:02,  4.15it/s][A
 95%|█████████▌| 210/221 [01:17<00:02,  4.96it/s][A
 95%|█████████▌| 211/221 [01:17<00:02,  3.62it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  4.03it/s][A
 96%|█████████▋| 213/221 [01:18<00:01,  4.51it/s][A
 97%|█████████▋| 214/221 [01:18<00:02,  2.79it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  3.03it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  3.04it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  2.30it/s][A[h264 @ 0x55d4c0b278c0] mmco: unref short failure
[h264 @ 0x55d4c0b278c0] mmco: unref short failure

 99%|█████████▊| 218/221 [01:20<00:01,  2.52it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.63it/s][A
100%|█████████▉| 220/221 [01:23<00:01,  1.22s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.07it/s][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]
[h264 @ 0x55600c976f40] mmco: unref short failure
[h264 @ 0x55600c976f40] mmco: unref short failure
[h264 @ 0x55600c976f40] mmco: unref short failure
[h264 @ 0x55600c976f40] mmco: unref short failure
[h264 @ 0x555fff652000] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:13,  2.98it/s][A
  1%|          | 2/221 [00:00<01:27,  2.50it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.71it/s][A
  2%|▏         | 4/221 [00:01<01:16,  2.85it/s][A
  2%|▏         | 5/221 [00:01<01:13,  2.93it/s][A
  3%|▎         | 6/221 [00:02<01:11,  2.99it/s][A
  3%|▎         | 7/221 [00:02<01:12,  2.97it/s][A[h264 @ 0x555fdca6e940] mmco: unref short failure
[h264 @ 0x555fdca6e940] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:15,  2.83it/s][A
  4%|▍         | 9/221 [00:03<01:19,  2.68it/s][A
  5%|▍         | 10/221 [00:03<01:17,  2.73it/s][A
  5%|▍         | 11/221 [00:03<01:15,  2.77it/s][A
  5%|▌         | 12/221 [00:04<01:12,  2.88it/s][A
  6%|▌         | 13/221 [00:04<01:13,  2.82it/s][A
  6%|▋         | 14/221 [00:04<01:12,  2.84it/s][A
  7%|▋         | 15/221 [00:05<01:13,  2.81it/s][A
  7%|▋         | 16/221 [00:05<01:11,  2.88it/s][A
  8%|▊         | 17/221 [00:05<01:10,  2.91it/s][A
  8%|▊         | 18/221 [00:06<01:07,  2.99it/s][A
  9%|▊         | 19/221 [00:06<01:07,  2.99it/s][A
  9%|▉         | 20/221 [00:06<01:06,  3.03it/s][A
 10%|▉         | 21/221 [00:07<01:05,  3.06it/s][A
 10%|▉         | 22/221 [00:07<01:04,  3.09it/s][A
 10%|█         | 23/221 [00:07<01:04,  3.08it/s][A
 11%|█         | 24/221 [00:08<01:06,  2.98it/s][A
 11%|█▏        | 25/221 [00:08<01:06,  2.94it/s][A
 12%|█▏        | 26/221 [00:08<01:07,  2.90it/s][A
 12%|█▏        | 27/221 [00:09<01:08,  2.83it/s][A
 13%|█▎        | 28/221 [00:09<01:07,  2.86it/s][A
 13%|█▎        | 29/221 [00:10<01:06,  2.91it/s][A
 14%|█▎        | 30/221 [00:10<01:06,  2.86it/s][A
 14%|█▍        | 31/221 [00:10<01:06,  2.87it/s][A
 14%|█▍        | 32/221 [00:11<01:05,  2.91it/s][A
 15%|█▍        | 33/221 [00:11<01:06,  2.84it/s][A
 15%|█▌        | 34/221 [00:11<01:04,  2.91it/s][A
 16%|█▌        | 35/221 [00:12<01:03,  2.91it/s][A
 16%|█▋        | 36/221 [00:12<01:09,  2.68it/s][A
 17%|█▋        | 37/221 [00:12<01:06,  2.75it/s][A
 17%|█▋        | 38/221 [00:13<01:05,  2.78it/s][A
 18%|█▊        | 39/221 [00:13<01:04,  2.83it/s][A
 18%|█▊        | 40/221 [00:13<01:04,  2.83it/s][A
 19%|█▊        | 41/221 [00:14<01:02,  2.87it/s][A
 19%|█▉        | 42/221 [00:14<01:02,  2.88it/s][A
 19%|█▉        | 43/221 [00:14<01:00,  2.94it/s][A09/17/2024 06:38:50 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 33831 instead.

 20%|█▉        | 44/221 [00:15<00:59,  2.99it/s][A
 20%|██        | 45/221 [00:15<00:59,  2.94it/s][A
 21%|██        | 46/221 [00:15<01:01,  2.86it/s][A
 21%|██▏       | 47/221 [00:16<01:00,  2.87it/s][A
 22%|██▏       | 48/221 [00:16<00:58,  2.94it/s][A
 22%|██▏       | 49/221 [00:17<01:01,  2.80it/s][A
 23%|██▎       | 50/221 [00:17<01:02,  2.72it/s][A
 23%|██▎       | 51/221 [00:17<00:59,  2.85it/s][A
 24%|██▎       | 52/221 [00:18<00:58,  2.88it/s][A
 24%|██▍       | 53/221 [00:18<00:59,  2.81it/s][A
 24%|██▍       | 54/221 [00:18<00:57,  2.88it/s][A
 25%|██▍       | 55/221 [00:19<00:57,  2.88it/s][A
 25%|██▌       | 56/221 [00:19<00:55,  2.97it/s][A
 26%|██▌       | 57/221 [00:19<00:57,  2.84it/s][A
 26%|██▌       | 58/221 [00:20<00:55,  2.92it/s][A
 27%|██▋       | 59/221 [00:20<00:56,  2.87it/s][A
 27%|██▋       | 60/221 [00:20<00:55,  2.91it/s][A
 28%|██▊       | 61/221 [00:21<00:54,  2.93it/s][A
 28%|██▊       | 62/221 [00:21<00:53,  2.98it/s][A
 29%|██▊       | 63/221 [00:21<00:52,  3.02it/s][A
 29%|██▉       | 64/221 [00:22<00:53,  2.95it/s][A
 29%|██▉       | 65/221 [00:22<00:51,  3.03it/s][A
 30%|██▉       | 66/221 [00:22<00:53,  2.91it/s][A
 30%|███       | 67/221 [00:23<00:54,  2.80it/s][A
 31%|███       | 68/221 [00:23<00:56,  2.71it/s][A
 31%|███       | 69/221 [00:24<00:56,  2.70it/s][A
 32%|███▏      | 70/221 [00:24<00:56,  2.67it/s][A
 32%|███▏      | 71/221 [00:24<00:56,  2.68it/s][A
 33%|███▎      | 72/221 [00:25<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:25<00:53,  2.76it/s][A
 33%|███▎      | 74/221 [00:25<00:53,  2.75it/s][A
 34%|███▍      | 75/221 [00:26<00:52,  2.76it/s][A[h264 @ 0x556025da8ac0] mmco: unref short failure
[h264 @ 0x556025da8ac0] mmco: unref short failure

 34%|███▍      | 76/221 [00:26<00:53,  2.73it/s][A
 35%|███▍      | 77/221 [00:26<00:52,  2.73it/s][A
 35%|███▌      | 78/221 [00:27<00:52,  2.75it/s][A
 36%|███▌      | 79/221 [00:27<00:50,  2.80it/s][A
 36%|███▌      | 80/221 [00:28<00:50,  2.78it/s][A
 37%|███▋      | 81/221 [00:28<00:49,  2.82it/s][A
 37%|███▋      | 82/221 [00:28<00:49,  2.83it/s][A
 38%|███▊      | 83/221 [00:29<00:50,  2.71it/s][A
 38%|███▊      | 84/221 [00:29<00:51,  2.68it/s][A
 38%|███▊      | 85/221 [00:29<00:53,  2.54it/s][A
 39%|███▉      | 86/221 [00:30<00:51,  2.60it/s][A[h264 @ 0x5593392e3340] mmco: unref short failure

 39%|███▉      | 87/221 [00:30<00:51,  2.59it/s][A
 40%|███▉      | 88/221 [00:31<00:49,  2.71it/s][A
 40%|████      | 89/221 [00:31<00:49,  2.67it/s][A
 41%|████      | 90/221 [00:31<00:50,  2.60it/s][A
 41%|████      | 91/221 [00:32<00:49,  2.64it/s][A
 42%|████▏     | 92/221 [00:32<00:47,  2.74it/s][A
 42%|████▏     | 93/221 [00:32<00:45,  2.81it/s][A
 43%|████▎     | 94/221 [00:33<00:44,  2.83it/s][A
 43%|████▎     | 95/221 [00:33<00:47,  2.64it/s][A
 43%|████▎     | 96/221 [00:34<00:47,  2.60it/s][A
 44%|████▍     | 97/221 [00:34<00:48,  2.56it/s][A
 44%|████▍     | 98/221 [00:34<00:47,  2.58it/s][A
 45%|████▍     | 99/221 [00:35<00:47,  2.58it/s][A
 45%|████▌     | 100/221 [00:35<00:44,  2.70it/s][A
 46%|████▌     | 101/221 [00:35<00:43,  2.77it/s][A
 46%|████▌     | 102/221 [00:36<00:41,  2.88it/s][A
 47%|████▋     | 103/221 [00:36<00:41,  2.85it/s][A
 47%|████▋     | 104/221 [00:36<00:40,  2.90it/s][A
 48%|████▊     | 105/221 [00:37<00:40,  2.87it/s][A
 48%|████▊     | 106/221 [00:37<00:41,  2.78it/s][A
 48%|████▊     | 107/221 [00:37<00:39,  2.85it/s][A
 49%|████▉     | 108/221 [00:38<00:42,  2.67it/s][A
 49%|████▉     | 109/221 [00:38<00:40,  2.78it/s][A
 50%|████▉     | 110/221 [00:39<00:40,  2.75it/s][A
 50%|█████     | 111/221 [00:39<00:39,  2.75it/s][A
 51%|█████     | 112/221 [00:39<00:39,  2.78it/s][A
 51%|█████     | 113/221 [00:40<00:39,  2.70it/s][A
 52%|█████▏    | 114/221 [00:40<00:39,  2.73it/s][A
 52%|█████▏    | 115/221 [00:40<00:38,  2.76it/s][A
 52%|█████▏    | 116/221 [00:41<00:37,  2.83it/s][A
 53%|█████▎    | 117/221 [00:41<00:36,  2.86it/s][A
 53%|█████▎    | 118/221 [00:41<00:37,  2.76it/s][A
 54%|█████▍    | 119/221 [00:42<00:37,  2.73it/s][A
 54%|█████▍    | 120/221 [00:42<00:39,  2.57it/s][A
 55%|█████▍    | 121/221 [00:43<00:37,  2.66it/s][A
 55%|█████▌    | 122/221 [00:43<00:35,  2.75it/s][A
 56%|█████▌    | 123/221 [00:43<00:35,  2.75it/s][A[h264 @ 0x55600a774a80] mmco: unref short failure
[h264 @ 0x55600a774a80] mmco: unref short failure

 56%|█████▌    | 124/221 [00:44<00:34,  2.85it/s][A
 57%|█████▋    | 125/221 [00:44<00:33,  2.87it/s][A
 57%|█████▋    | 126/221 [00:44<00:32,  2.96it/s][A[h264 @ 0x55d4b94b11c0] mmco: unref short failure
[h264 @ 0x55d4b94b11c0] mmco: unref short failure

 57%|█████▋    | 127/221 [00:45<00:32,  2.89it/s][A
 58%|█████▊    | 128/221 [00:45<00:32,  2.84it/s][A[h264 @ 0x55d4d6d9fe40] mmco: unref short failure
[h264 @ 0x55d4d6d9fe40] mmco: unref short failure
[h264 @ 0x556008dd19c0] mmco: unref short failure

 58%|█████▊    | 129/221 [00:45<00:34,  2.68it/s][A
 59%|█████▉    | 130/221 [00:46<00:33,  2.75it/s][A
 59%|█████▉    | 131/221 [00:46<00:31,  2.81it/s][A
 60%|█████▉    | 132/221 [00:46<00:31,  2.84it/s][A
 60%|██████    | 133/221 [00:47<00:31,  2.76it/s][A
 61%|██████    | 134/221 [00:47<00:32,  2.68it/s][A
 61%|██████    | 135/221 [00:48<00:37,  2.29it/s][A[h264 @ 0x55934418b580] mmco: unref short failure
[h264 @ 0x55934418b580] mmco: unref short failure

 62%|██████▏   | 136/221 [00:48<00:41,  2.05it/s][A
 62%|██████▏   | 137/221 [00:49<00:43,  1.93it/s][A
 62%|██████▏   | 138/221 [00:49<00:38,  2.16it/s][A
 63%|██████▎   | 139/221 [00:50<00:35,  2.34it/s][A
 63%|██████▎   | 140/221 [00:50<00:32,  2.51it/s][A
 64%|██████▍   | 141/221 [00:50<00:30,  2.65it/s][A
 64%|██████▍   | 142/221 [00:51<00:33,  2.38it/s][A
 65%|██████▍   | 143/221 [00:51<00:31,  2.47it/s][A
 65%|██████▌   | 144/221 [00:52<00:30,  2.53it/s][A
 66%|██████▌   | 145/221 [00:52<00:29,  2.57it/s][A
 66%|██████▌   | 146/221 [00:52<00:28,  2.63it/s][A
 67%|██████▋   | 147/221 [00:53<00:27,  2.70it/s][A
 67%|██████▋   | 148/221 [00:53<00:26,  2.78it/s][A
 67%|██████▋   | 149/221 [00:53<00:25,  2.81it/s][A
 68%|██████▊   | 150/221 [00:54<00:24,  2.85it/s][A
 68%|██████▊   | 151/221 [00:54<00:28,  2.49it/s][A
 69%|██████▉   | 152/221 [00:55<00:27,  2.49it/s][A
 69%|██████▉   | 153/221 [00:55<00:26,  2.53it/s][A
 70%|██████▉   | 154/221 [00:55<00:25,  2.68it/s][A
 70%|███████   | 155/221 [00:56<00:23,  2.75it/s][A
 71%|███████   | 156/221 [00:56<00:23,  2.80it/s][A
 71%|███████   | 157/221 [00:56<00:23,  2.73it/s][A
 71%|███████▏  | 158/221 [00:57<00:24,  2.55it/s][A
 72%|███████▏  | 159/221 [00:57<00:24,  2.57it/s][A
 72%|███████▏  | 160/221 [00:58<00:22,  2.69it/s][A
 73%|███████▎  | 161/221 [00:58<00:21,  2.74it/s][A
 73%|███████▎  | 162/221 [00:58<00:21,  2.76it/s][A
 74%|███████▍  | 163/221 [00:59<00:20,  2.77it/s][A
 74%|███████▍  | 164/221 [00:59<00:20,  2.84it/s][A
 75%|███████▍  | 165/221 [00:59<00:19,  2.83it/s][A
 75%|███████▌  | 166/221 [01:00<00:19,  2.89it/s][A[h264 @ 0x555fe21d5680] mmco: unref short failure
[h264 @ 0x555fe21d5680] mmco: unref short failure
[h264 @ 0x555fe21d5680] mmco: unref short failure
[h264 @ 0x555fe21d5680] mmco: unref short failure

 76%|███████▌  | 167/221 [01:00<00:18,  2.87it/s][A
 76%|███████▌  | 168/221 [01:00<00:19,  2.69it/s][A
 76%|███████▋  | 169/221 [01:01<00:19,  2.72it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.81it/s][A
 77%|███████▋  | 171/221 [01:02<00:17,  2.79it/s][A[h264 @ 0x5560014e8dc0] mmco: unref short failure
[h264 @ 0x5560014e8dc0] mmco: unref short failure

 78%|███████▊  | 172/221 [01:02<00:17,  2.81it/s][A
 78%|███████▊  | 173/221 [01:02<00:16,  2.90it/s][A
 79%|███████▊  | 174/221 [01:03<00:16,  2.87it/s][A
 79%|███████▉  | 175/221 [01:03<00:16,  2.83it/s][A
 80%|███████▉  | 176/221 [01:03<00:15,  2.83it/s][A[h264 @ 0x55935fbf84c0] mmco: unref short failure

 80%|████████  | 177/221 [01:04<00:16,  2.72it/s][A
 81%|████████  | 178/221 [01:04<00:15,  2.79it/s][A
 81%|████████  | 179/221 [01:04<00:14,  2.84it/s][A
 81%|████████▏ | 180/221 [01:05<00:14,  2.88it/s][A
 82%|████████▏ | 181/221 [01:05<00:14,  2.70it/s][A
 82%|████████▏ | 182/221 [01:06<00:14,  2.65it/s][A
 83%|████████▎ | 183/221 [01:06<00:14,  2.71it/s][A
 83%|████████▎ | 184/221 [01:06<00:13,  2.77it/s][A
 84%|████████▎ | 185/221 [01:07<00:12,  2.79it/s][A
 84%|████████▍ | 186/221 [01:07<00:12,  2.84it/s][A
 85%|████████▍ | 187/221 [01:07<00:12,  2.81it/s][A
 85%|████████▌ | 188/221 [01:08<00:11,  2.76it/s][A
 86%|████████▌ | 189/221 [01:08<00:11,  2.85it/s][A
 86%|████████▌ | 190/221 [01:08<00:10,  2.91it/s][A
 86%|████████▋ | 191/221 [01:09<00:10,  2.94it/s][A
 87%|████████▋ | 192/221 [01:09<00:10,  2.86it/s][A
 87%|████████▋ | 193/221 [01:09<00:10,  2.75it/s][A
 88%|████████▊ | 194/221 [01:10<00:10,  2.67it/s][A
 88%|████████▊ | 195/221 [01:10<00:09,  2.72it/s][A
 89%|████████▊ | 196/221 [01:10<00:09,  2.75it/s][A
 89%|████████▉ | 197/221 [01:11<00:08,  2.84it/s][A
 90%|████████▉ | 198/221 [01:11<00:07,  2.91it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.91it/s][A
 90%|█████████ | 200/221 [01:12<00:07,  2.94it/s][A
 91%|█████████ | 201/221 [01:12<00:06,  2.99it/s][A
 91%|█████████▏| 202/221 [01:12<00:06,  2.90it/s][A
 92%|█████████▏| 203/221 [01:13<00:06,  2.98it/s][A
 92%|█████████▏| 204/221 [01:13<00:05,  2.95it/s][A[h264 @ 0x55d4d6198000] mmco: unref short failure

 93%|█████████▎| 205/221 [01:14<00:05,  2.91it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.88it/s][A
 94%|█████████▎| 207/221 [01:14<00:04,  2.85it/s][A[h264 @ 0x55601214fe00] mmco: unref short failure

 94%|█████████▍| 208/221 [01:15<00:04,  2.83it/s][A
 95%|█████████▍| 209/221 [01:15<00:04,  2.91it/s][A
 95%|█████████▌| 210/221 [01:15<00:03,  2.82it/s][A
 95%|█████████▌| 211/221 [01:16<00:03,  2.84it/s][A
 96%|█████████▌| 212/221 [01:16<00:03,  2.89it/s][A
 96%|█████████▋| 213/221 [01:16<00:02,  2.92it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  3.00it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.95it/s][A
 98%|█████████▊| 216/221 [01:17<00:01,  2.96it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.98it/s][A
 99%|█████████▊| 218/221 [01:18<00:00,  3.03it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  3.05it/s][A
100%|█████████▉| 220/221 [01:19<00:00,  2.97it/s][A
100%|██████████| 221/221 [01:19<00:00,  2.76it/s][A100%|██████████| 221/221 [01:19<00:00,  2.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:43,  5.05it/s][A
  1%|          | 2/221 [00:00<01:00,  3.63it/s][A[h264 @ 0x55d4df0b5d40] mmco: unref short failure
[h264 @ 0x55d4df0b5d40] mmco: unref short failure

  1%|▏         | 3/221 [00:01<01:23,  2.62it/s][A[h264 @ 0x555fd9b735c0] mmco: unref short failure

  2%|▏         | 4/221 [00:01<01:07,  3.23it/s][A[h264 @ 0x55d4df0b5d40] mmco: unref short failure
[h264 @ 0x55d4df0b5d40] mmco: unref short failure

  2%|▏         | 5/221 [00:01<01:08,  3.16it/s][A
  3%|▎         | 6/221 [00:01<00:55,  3.91it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.35it/s][A
  4%|▎         | 8/221 [00:02<01:13,  2.88it/s][A
  4%|▍         | 9/221 [00:02<01:11,  2.96it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.35it/s][A[h264 @ 0x559338816f80] mmco: unref short failure

  5%|▍         | 11/221 [00:03<01:10,  2.99it/s][A
  5%|▌         | 12/221 [00:03<01:14,  2.80it/s][A
  6%|▌         | 13/221 [00:04<01:38,  2.11it/s][A
  6%|▋         | 14/221 [00:04<01:23,  2.49it/s][A
  7%|▋         | 15/221 [00:05<01:20,  2.55it/s][A
  7%|▋         | 16/221 [00:05<01:33,  2.19it/s][A
  8%|▊         | 17/221 [00:06<01:32,  2.20it/s][A
  8%|▊         | 18/221 [00:06<01:22,  2.47it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.94it/s][A
  9%|▉         | 20/221 [00:07<01:10,  2.87it/s][A
 10%|▉         | 21/221 [00:07<00:57,  3.47it/s][A
 10%|▉         | 22/221 [00:07<00:54,  3.62it/s][A
 10%|█         | 23/221 [00:07<00:48,  4.10it/s][A
 11%|█         | 24/221 [00:07<00:46,  4.22it/s][A
 11%|█▏        | 25/221 [00:08<00:59,  3.27it/s][A
 12%|█▏        | 26/221 [00:08<00:58,  3.32it/s][A
 12%|█▏        | 27/221 [00:09<01:08,  2.82it/s][A
 13%|█▎        | 28/221 [00:09<01:07,  2.86it/s][A
 13%|█▎        | 29/221 [00:09<01:05,  2.94it/s][A
 14%|█▎        | 30/221 [00:10<01:13,  2.59it/s][A
 14%|█▍        | 31/221 [00:10<01:12,  2.62it/s][A
 14%|█▍        | 32/221 [00:10<01:05,  2.89it/s][A
 15%|█▍        | 33/221 [00:11<01:03,  2.97it/s][A
 15%|█▌        | 34/221 [00:11<01:22,  2.26it/s][A
 16%|█▌        | 35/221 [00:12<01:13,  2.53it/s][A[h264 @ 0x55d4d63e5080] mmco: unref short failure
[h264 @ 0x55d4d63e5080] mmco: unref short failure

 16%|█▋        | 36/221 [00:12<01:13,  2.51it/s][A
 17%|█▋        | 37/221 [00:12<01:03,  2.89it/s][A
 17%|█▋        | 38/221 [00:13<01:09,  2.62it/s][A
 18%|█▊        | 39/221 [00:13<00:57,  3.16it/s][A
 18%|█▊        | 40/221 [00:13<01:00,  2.99it/s][A
 19%|█▊        | 41/221 [00:14<00:58,  3.06it/s][A
 19%|█▉        | 42/221 [00:14<00:53,  3.37it/s][A
 19%|█▉        | 43/221 [00:14<00:56,  3.18it/s][A
 20%|█▉        | 44/221 [00:15<00:55,  3.18it/s][A
 20%|██        | 45/221 [00:15<01:01,  2.87it/s][A
 21%|██        | 46/221 [00:15<00:53,  3.28it/s][A
 21%|██▏       | 47/221 [00:15<00:46,  3.73it/s][A
 22%|██▏       | 48/221 [00:16<00:40,  4.31it/s][A
 22%|██▏       | 49/221 [00:16<00:36,  4.68it/s][A
 23%|██▎       | 50/221 [00:16<00:42,  4.02it/s][A
 23%|██▎       | 51/221 [00:16<00:45,  3.72it/s][A
 24%|██▎       | 52/221 [00:17<00:39,  4.26it/s][A
 24%|██▍       | 53/221 [00:17<00:44,  3.73it/s][A
 24%|██▍       | 54/221 [00:17<00:46,  3.56it/s][A
 25%|██▍       | 55/221 [00:18<00:50,  3.27it/s][A
 25%|██▌       | 56/221 [00:18<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:18<00:52,  3.13it/s][A
 26%|██▌       | 58/221 [00:19<00:52,  3.13it/s][A
 27%|██▋       | 59/221 [00:19<00:52,  3.08it/s][A
 27%|██▋       | 60/221 [00:19<00:51,  3.14it/s][A
 28%|██▊       | 61/221 [00:19<00:47,  3.34it/s][A
 28%|██▊       | 62/221 [00:20<00:48,  3.27it/s][A
 29%|██▊       | 63/221 [00:20<00:39,  4.04it/s][A
 29%|██▉       | 64/221 [00:20<00:39,  3.97it/s][A
 29%|██▉       | 65/221 [00:20<00:39,  3.92it/s][A
 30%|██▉       | 66/221 [00:21<00:49,  3.16it/s][A
 30%|███       | 67/221 [00:22<01:08,  2.26it/s][A
 31%|███       | 68/221 [00:22<00:58,  2.61it/s][A
 31%|███       | 69/221 [00:22<01:04,  2.35it/s][A
 32%|███▏      | 70/221 [00:23<01:03,  2.38it/s][A
 32%|███▏      | 71/221 [00:23<01:07,  2.21it/s][A
 33%|███▎      | 72/221 [00:24<01:10,  2.12it/s][A
 33%|███▎      | 73/221 [00:24<01:03,  2.35it/s][A
 33%|███▎      | 74/221 [00:24<00:58,  2.52it/s][A
 34%|███▍      | 75/221 [00:25<00:57,  2.54it/s][A
 34%|███▍      | 76/221 [00:25<00:50,  2.85it/s][A
 35%|███▍      | 77/221 [00:25<00:51,  2.80it/s][A
 35%|███▌      | 78/221 [00:26<00:52,  2.71it/s][A
 36%|███▌      | 79/221 [00:26<00:52,  2.69it/s][A
 36%|███▌      | 80/221 [00:27<00:56,  2.51it/s][A
 37%|███▋      | 81/221 [00:27<00:54,  2.55it/s][A
 37%|███▋      | 82/221 [00:27<00:49,  2.78it/s][A
 38%|███▊      | 83/221 [00:28<00:45,  3.00it/s][A
 38%|███▊      | 84/221 [00:28<00:52,  2.63it/s][A
 38%|███▊      | 85/221 [00:28<00:51,  2.63it/s][A
 39%|███▉      | 86/221 [00:29<00:55,  2.45it/s][A
 39%|███▉      | 87/221 [00:30<01:09,  1.94it/s][A
 40%|███▉      | 88/221 [00:30<00:57,  2.30it/s][A
 40%|████      | 89/221 [00:30<00:58,  2.27it/s][A
 41%|████      | 90/221 [00:31<00:58,  2.25it/s][A
 41%|████      | 91/221 [00:31<00:49,  2.64it/s][A
 42%|████▏     | 92/221 [00:31<00:46,  2.76it/s][A
 42%|████▏     | 93/221 [00:32<00:56,  2.27it/s][A
 43%|████▎     | 94/221 [00:32<00:49,  2.55it/s][A
 43%|████▎     | 95/221 [00:33<00:56,  2.23it/s][A
 43%|████▎     | 96/221 [00:33<00:56,  2.22it/s][A
 44%|████▍     | 97/221 [00:34<00:49,  2.52it/s][A
 44%|████▍     | 98/221 [00:34<00:45,  2.68it/s][A
 45%|████▍     | 99/221 [00:34<00:40,  3.00it/s][A
 45%|████▌     | 100/221 [00:34<00:35,  3.36it/s][A
 46%|████▌     | 101/221 [00:35<00:36,  3.31it/s][A
 46%|████▌     | 102/221 [00:35<00:36,  3.22it/s][A
 47%|████▋     | 103/221 [00:35<00:33,  3.54it/s][A
 47%|████▋     | 104/221 [00:35<00:29,  3.96it/s][A
 48%|████▊     | 105/221 [00:36<00:31,  3.71it/s][A[h264 @ 0x5593548fd440] mmco: unref short failure
[h264 @ 0x5593548fd440] mmco: unref short failure

 48%|████▊     | 106/221 [00:36<00:34,  3.35it/s][A
 48%|████▊     | 107/221 [00:36<00:35,  3.24it/s][A
 49%|████▉     | 108/221 [00:37<00:33,  3.39it/s][A[h264 @ 0x55935d1f0540] mmco: unref short failure
[h264 @ 0x55d4b6b52800] mmco: unref short failure
[h264 @ 0x55d4b6b52800] mmco: unref short failure
[h264 @ 0x55935d1f0540] mmco: unref short failure

 49%|████▉     | 109/221 [00:37<00:33,  3.38it/s][A
 50%|████▉     | 110/221 [00:37<00:33,  3.34it/s][A
 50%|█████     | 111/221 [00:38<00:37,  2.97it/s][A
 51%|█████     | 112/221 [00:38<00:39,  2.75it/s][A
 51%|█████     | 113/221 [00:38<00:35,  3.08it/s][A
 52%|█████▏    | 114/221 [00:39<00:29,  3.60it/s][A
 52%|█████▏    | 115/221 [00:39<00:28,  3.66it/s][A
 52%|█████▏    | 116/221 [00:39<00:27,  3.77it/s][A
 53%|█████▎    | 117/221 [00:39<00:29,  3.58it/s][A
 53%|█████▎    | 118/221 [00:40<00:33,  3.05it/s][A
 54%|█████▍    | 119/221 [00:40<00:36,  2.82it/s][A
 54%|█████▍    | 120/221 [00:41<00:35,  2.86it/s][A
 55%|█████▍    | 121/221 [00:41<00:30,  3.24it/s][A
 55%|█████▌    | 122/221 [00:41<00:27,  3.56it/s][A
 56%|█████▌    | 123/221 [00:41<00:30,  3.22it/s][A
 56%|█████▌    | 124/221 [00:42<00:33,  2.89it/s][A
 57%|█████▋    | 125/221 [00:42<00:42,  2.26it/s][A
 57%|█████▋    | 126/221 [00:43<00:36,  2.59it/s][A
 57%|█████▋    | 127/221 [00:43<00:46,  2.04it/s][A
 58%|█████▊    | 128/221 [00:44<00:42,  2.19it/s][A
 58%|█████▊    | 129/221 [00:44<00:36,  2.50it/s][A
 59%|█████▉    | 130/221 [00:44<00:34,  2.62it/s][A
 59%|█████▉    | 131/221 [00:45<00:28,  3.12it/s][A
 60%|█████▉    | 132/221 [00:45<00:30,  2.96it/s][A
 60%|██████    | 133/221 [00:46<00:40,  2.15it/s][A
 61%|██████    | 134/221 [00:46<00:42,  2.06it/s][A
 61%|██████    | 135/221 [00:46<00:33,  2.54it/s][A
 62%|██████▏   | 136/221 [00:47<00:32,  2.60it/s][A
 62%|██████▏   | 137/221 [00:47<00:29,  2.84it/s][A
 62%|██████▏   | 138/221 [00:47<00:28,  2.96it/s][A
 63%|██████▎   | 139/221 [00:48<00:30,  2.67it/s][A
 63%|██████▎   | 140/221 [00:48<00:27,  2.94it/s][A
 64%|██████▍   | 141/221 [00:49<00:32,  2.46it/s][A
 64%|██████▍   | 142/221 [00:49<00:27,  2.85it/s][A
 65%|██████▍   | 143/221 [00:49<00:28,  2.73it/s][A
 65%|██████▌   | 144/221 [00:50<00:26,  2.89it/s][A
 66%|██████▌   | 145/221 [00:50<00:25,  2.95it/s][A
 66%|██████▌   | 146/221 [00:50<00:25,  2.92it/s][A
 67%|██████▋   | 147/221 [00:51<00:23,  3.16it/s][A[h264 @ 0x5593343ad380] mmco: unref short failure
[h264 @ 0x5593343ad380] mmco: unref short failure

 67%|██████▋   | 148/221 [00:51<00:25,  2.89it/s][A
 67%|██████▋   | 149/221 [00:51<00:23,  3.04it/s][A
 68%|██████▊   | 150/221 [00:52<00:23,  2.98it/s][A
 68%|██████▊   | 151/221 [00:52<00:31,  2.23it/s][A
 69%|██████▉   | 152/221 [00:53<00:38,  1.78it/s][A
 69%|██████▉   | 153/221 [00:53<00:30,  2.20it/s][A
 70%|██████▉   | 154/221 [00:54<00:26,  2.50it/s][A
 70%|███████   | 155/221 [00:54<00:26,  2.53it/s][A
 71%|███████   | 156/221 [00:54<00:23,  2.82it/s][A
 71%|███████   | 157/221 [00:55<00:23,  2.76it/s][A
 71%|███████▏  | 158/221 [00:55<00:22,  2.76it/s][A
 72%|███████▏  | 159/221 [00:55<00:20,  2.96it/s][A
 72%|███████▏  | 160/221 [00:55<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:56<00:17,  3.40it/s][A[h264 @ 0x555ff9be1e00] mmco: unref short failure
[h264 @ 0x555ff9be1e00] mmco: unref short failure

 73%|███████▎  | 162/221 [00:56<00:15,  3.87it/s][A
 74%|███████▍  | 163/221 [00:56<00:15,  3.77it/s][A
 74%|███████▍  | 164/221 [00:56<00:13,  4.24it/s][A
 75%|███████▍  | 165/221 [00:57<00:12,  4.58it/s][A
 75%|███████▌  | 166/221 [00:57<00:13,  4.17it/s][A
 76%|███████▌  | 167/221 [00:57<00:12,  4.31it/s][A
 76%|███████▌  | 168/221 [00:57<00:14,  3.74it/s][A
 76%|███████▋  | 169/221 [00:58<00:11,  4.36it/s][A
 77%|███████▋  | 170/221 [00:58<00:18,  2.73it/s][A[h264 @ 0x55a013275b40] mmco: unref short failure
[h264 @ 0x55a013275b40] mmco: unref short failure
[h264 @ 0x55a013275b40] mmco: unref short failure
[h264 @ 0x55a013275b40] mmco: unref short failure

 77%|███████▋  | 171/221 [00:59<00:19,  2.51it/s][A
 78%|███████▊  | 172/221 [00:59<00:18,  2.66it/s][A
 78%|███████▊  | 173/221 [00:59<00:17,  2.78it/s][A
 79%|███████▊  | 174/221 [01:00<00:15,  2.97it/s][A
 79%|███████▉  | 175/221 [01:00<00:17,  2.59it/s][A
 80%|███████▉  | 176/221 [01:00<00:15,  2.88it/s][A
 80%|████████  | 177/221 [01:01<00:14,  3.10it/s][A
 81%|████████  | 178/221 [01:02<00:20,  2.13it/s][A
 81%|████████  | 179/221 [01:02<00:17,  2.34it/s][A
 81%|████████▏ | 180/221 [01:02<00:14,  2.84it/s][A
 82%|████████▏ | 181/221 [01:02<00:14,  2.68it/s][A
 82%|████████▏ | 182/221 [01:03<00:12,  3.04it/s][A
 83%|████████▎ | 183/221 [01:03<00:12,  2.95it/s][A
 83%|████████▎ | 184/221 [01:03<00:12,  2.95it/s][A
 84%|████████▎ | 185/221 [01:03<00:09,  3.69it/s][A
 84%|████████▍ | 186/221 [01:04<00:12,  2.69it/s][A
 85%|████████▍ | 187/221 [01:04<00:11,  2.89it/s][A
 85%|████████▌ | 188/221 [01:05<00:11,  2.88it/s][A
 86%|████████▌ | 189/221 [01:05<00:09,  3.27it/s][A
 86%|████████▌ | 190/221 [01:05<00:10,  3.01it/s][A
 86%|████████▋ | 191/221 [01:05<00:08,  3.71it/s][A
 87%|████████▋ | 192/221 [01:06<00:07,  3.73it/s][A
 87%|████████▋ | 193/221 [01:06<00:07,  3.99it/s][A
 88%|████████▊ | 194/221 [01:06<00:06,  3.86it/s][A
 88%|████████▊ | 195/221 [01:06<00:07,  3.67it/s][A
 89%|████████▊ | 196/221 [01:07<00:09,  2.72it/s][A
 89%|████████▉ | 197/221 [01:08<00:09,  2.57it/s][A
 90%|████████▉ | 198/221 [01:08<00:09,  2.36it/s][A
 90%|█████████ | 199/221 [01:08<00:07,  2.77it/s][A
 90%|█████████ | 200/221 [01:08<00:06,  3.10it/s][A
 91%|█████████ | 201/221 [01:09<00:05,  3.40it/s][A
 91%|█████████▏| 202/221 [01:09<00:05,  3.35it/s][A
 92%|█████████▏| 203/221 [01:09<00:05,  3.30it/s][A
 92%|█████████▏| 204/221 [01:10<00:05,  2.97it/s][A
 93%|█████████▎| 205/221 [01:10<00:05,  3.08it/s][A
 93%|█████████▎| 206/221 [01:11<00:05,  2.55it/s][A
 94%|█████████▎| 207/221 [01:11<00:05,  2.53it/s][A
 94%|█████████▍| 208/221 [01:11<00:04,  2.89it/s][A
 95%|█████████▍| 209/221 [01:12<00:03,  3.04it/s][A
 95%|█████████▌| 210/221 [01:12<00:03,  3.25it/s][A
 95%|█████████▌| 211/221 [01:12<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:12<00:02,  3.19it/s][A
 96%|█████████▋| 213/221 [01:13<00:02,  3.06it/s][A
 97%|█████████▋| 214/221 [01:13<00:02,  2.70it/s][A
 97%|█████████▋| 215/221 [01:14<00:02,  2.86it/s][A
 98%|█████████▊| 216/221 [01:14<00:01,  2.79it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  2.82it/s][A
 99%|█████████▊| 218/221 [01:15<00:01,  2.72it/s][A
 99%|█████████▉| 219/221 [01:15<00:00,  2.84it/s][A
100%|█████████▉| 220/221 [01:15<00:00,  3.28it/s][A
100%|██████████| 221/221 [01:16<00:00,  2.90it/s][A100%|██████████| 221/221 [01:16<00:00,  2.90it/s]
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'area_r1': 40.2, 'area_recall': '40.2/66.5/76.1', 'area_ravg': 60.9}
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'forward_r1': 37.7, 'forward_recall': '37.7/65.4/77.4', 'forward_ravg': 60.1}
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'area_video_r1': 39.5, 'area_video_recall': '39.5/67.5/77.7', 'area_video_ravg': 61.6}
09/17/2024 06:41:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 06:41:25 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'area_video_r1': 51.7, 'area_video_recall': '51.7/75.5/83.0', 'area_video_ravg': 70.1, 'area_video_back_r1': 46.8, 'area_video_back_recall': '46.8/74.2/81.2', 'area_video_back_ravg': 67.4}
09/17/2024 06:41:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 06:41:25 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/64.5/73.8', 'video_ravg': 58.5}
09/17/2024 06:41:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 649=======

09/17/2024 06:41:25 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/64.5/73.8', 'video_ravg': 58.5}
09/17/2024 06:41:25 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 649--===========

09/17/2024 06:41:25 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/76.5/83.1', 'video_ravg': 70.5}
09/17/2024 06:41:25 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 06:41:25 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x5593437aaa00] mmco: unref short failure
[h264 @ 0x5593437aaa00] mmco: unref short failure
[h264 @ 0x55d4c4a98900] mmco: unref short failure
[h264 @ 0x55d4c4a98900] mmco: unref short failure
[h264 @ 0x5593421e6f00] mmco: unref short failure
[h264 @ 0x5593421e6f00] mmco: unref short failure
[h264 @ 0x5593421e6f00] mmco: unref short failure
[h264 @ 0x5593421e6f00] mmco: unref short failure
[h264 @ 0x55d4c2d87140] mmco: unref short failure
[h264 @ 0x55a03eb60640] mmco: unref short failure
[h264 @ 0x559337ab1c00] mmco: unref short failure
[h264 @ 0x559337ab1c00] mmco: unref short failure
09/17/2024 06:42:12 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.0064860060811042786, 'loss_ret%tv%ta--finetune_area/loss_area': 1.2032545804977417, 'loss_ret%tv%ta--finetune_area/total_loss': 1.2097406387329102}
 45%|████▍     | 650/1455 [7:01:55<38:40:30, 172.96s/it][h264 @ 0x55d4e8233000] mmco: unref short failure
 45%|████▍     | 651/1455 [7:02:02<27:31:11, 123.22s/it][h264 @ 0x555fe4981580] mmco: unref short failure
[h264 @ 0x55d4d71b4d00] mmco: unref short failure
[h264 @ 0x55d4d71b4d00] mmco: unref short failure
[h264 @ 0x559369c783c0] mmco: unref short failure
 45%|████▍     | 652/1455 [7:02:10<19:44:23, 88.50s/it] [h264 @ 0x55a02a9b4180] mmco: unref short failure
[h264 @ 0x55d4d49ee640] mmco: unref short failure
 45%|████▍     | 653/1455 [7:02:18<14:21:02, 64.42s/it][h264 @ 0x559334dcbac0] mmco: unref short failure
 45%|████▍     | 654/1455 [7:02:26<10:35:00, 47.57s/it][h264 @ 0x555fda4d0200] mmco: unref short failure
[h264 @ 0x555fda4d0200] mmco: unref short failure
[h264 @ 0x555fda4d0200] mmco: unref short failure
[h264 @ 0x555fda4d0200] mmco: unref short failure
 45%|████▌     | 655/1455 [7:02:34<7:56:09, 35.71s/it] [h264 @ 0x55934418b780] mmco: unref short failure
[h264 @ 0x55933318aa40] mmco: unref short failure
 45%|████▌     | 656/1455 [7:02:43<6:08:15, 27.65s/it] 45%|████▌     | 657/1455 [7:02:52<4:53:36, 22.08s/it][h264 @ 0x55d4b70b6c40] mmco: unref short failure
[h264 @ 0x55a01a1c9e40] mmco: unref short failure
 45%|████▌     | 658/1455 [7:03:02<4:03:27, 18.33s/it][h264 @ 0x555fe79b8700] mmco: unref short failure
 45%|████▌     | 659/1455 [7:03:11<3:24:53, 15.44s/it]09/17/2024 06:43:32 - INFO - __main__ -   current idx 6wN4IYAiKIg.50 from finetune_area returns wrong image/video, use 53801 instead.
[h264 @ 0x555ff105bc00] mmco: unref short failure
[h264 @ 0x55a023f9ce80] mmco: unref short failure
[h264 @ 0x55a023f9ce80] mmco: unref short failure
 45%|████▌     | 660/1455 [7:03:20<3:00:13, 13.60s/it] 45%|████▌     | 661/1455 [7:03:29<2:41:49, 12.23s/it] 45%|████▌     | 662/1455 [7:03:38<2:27:16, 11.14s/it][h264 @ 0x55d4baebb980] mmco: unref short failure
[h264 @ 0x55933aa337c0] mmco: unref short failure
 46%|████▌     | 663/1455 [7:03:47<2:20:26, 10.64s/it][h264 @ 0x55a0404dd2c0] mmco: unref short failure
[h264 @ 0x55a0404dd2c0] mmco: unref short failure
[h264 @ 0x55935c402980] mmco: unref short failure
[h264 @ 0x55935c402980] mmco: unref short failure
[h264 @ 0x5593342a9280] mmco: unref short failure
[h264 @ 0x5593342a9280] mmco: unref short failure
[h264 @ 0x55934042d100] mmco: unref short failure
[h264 @ 0x55934042d100] mmco: unref short failure
 46%|████▌     | 664/1455 [7:03:56<2:14:01, 10.17s/it][h264 @ 0x55a036d7c340] mmco: unref short failure
[h264 @ 0x55a036d7c340] mmco: unref short failure
[h264 @ 0x5593452c5e00] mmco: unref short failure
[h264 @ 0x55d4d6e86840] mmco: unref short failure
 46%|████▌     | 665/1455 [7:04:06<2:10:57,  9.95s/it][h264 @ 0x55d4be73b380] mmco: unref short failure
[h264 @ 0x55a013562000] mmco: unref short failure
[h264 @ 0x555ff7c9fa80] mmco: unref short failure
[h264 @ 0x5593536feb40] mmco: unref short failure
[h264 @ 0x5593536feb40] mmco: unref short failure
[h264 @ 0x559334b22cc0] mmco: unref short failure
[h264 @ 0x559334b22cc0] mmco: unref short failure
[h264 @ 0x556008da0b80] mmco: unref short failure
[h264 @ 0x555ff5db7180] mmco: unref short failure
[h264 @ 0x555ff5db7180] mmco: unref short failure
[h264 @ 0x55934b575480] mmco: unref short failure
[h264 @ 0x55934b575480] mmco: unref short failure
[h264 @ 0x5593342a8e00] mmco: unref short failure
[h264 @ 0x5593342a8e00] mmco: unref short failure
[h264 @ 0x55d4baebbe00] mmco: unref short failure
[h264 @ 0x55d4baebbe00] mmco: unref short failure
[h264 @ 0x556008095ec0] mmco: unref short failure
[h264 @ 0x556008095ec0] mmco: unref short failure
[h264 @ 0x555fdfd05ac0] mmco: unref short failure
[h264 @ 0x555fef29d4c0] mmco: unref short failure
[h264 @ 0x555fef29d4c0] mmco: unref short failure
[h264 @ 0x55933319d800] mmco: unref short failure
[h264 @ 0x55933319d800] mmco: unref short failure
[h264 @ 0x55933319d800] mmco: unref short failure
[h264 @ 0x55933319d800] mmco: unref short failure
[h264 @ 0x55a01cee0100] mmco: unref short failure
[h264 @ 0x55a01cee0100] mmco: unref short failure
[h264 @ 0x55d4b7092000] mmco: unref short failure
[h264 @ 0x55d4b7092000] mmco: unref short failure
[h264 @ 0x55d4db4781c0] mmco: unref short failure
[h264 @ 0x55d4db4781c0] mmco: unref short failure
[h264 @ 0x55d4db4781c0] mmco: unref short failure
[h264 @ 0x555fe1b3ea80] mmco: unref short failure
[h264 @ 0x555ff5d7a3c0] mmco: unref short failure
[h264 @ 0x555ff5d7a3c0] mmco: unref short failure
[h264 @ 0x55935b461180] mmco: unref short failure
[h264 @ 0x55935b461180] mmco: unref short failure
[h264 @ 0x5593375fe8c0] mmco: unref short failure
[h264 @ 0x55933304c440] mmco: unref short failure
[h264 @ 0x555ff072ce00] mmco: unref short failure
[h264 @ 0x555ff072ce00] mmco: unref short failure
[h264 @ 0x55d4c3367e40] mmco: unref short failure
[h264 @ 0x55934add2980] mmco: unref short failure
[h264 @ 0x55934add2980] mmco: unref short failure
[h264 @ 0x55a01d4f8080] mmco: unref short failure
[h264 @ 0x55a01d4f8080] mmco: unref short failure
[h264 @ 0x55a0159dea40] mmco: unref short failure
[h264 @ 0x55a0159dea40] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x55d4df6e7b80] mmco: unref short failure
[h264 @ 0x55d4df6e7b80] mmco: unref short failure
[h264 @ 0x55d4e4067d00] mmco: unref short failure
[h264 @ 0x55d4e4067d00] mmco: unref short failure
[h264 @ 0x555fd99c6dc0] mmco: unref short failure
[h264 @ 0x555fd99c6dc0] mmco: unref short failure
[h264 @ 0x5593344b2980] mmco: unref short failure
[h264 @ 0x5593344b2980] mmco: unref short failure
 46%|████▌     | 666/1455 [7:06:20<10:23:09, 47.39s/it][h264 @ 0x55d4e5a72800] mmco: unref short failure
[h264 @ 0x55d4e5a72800] mmco: unref short failure
 46%|████▌     | 667/1455 [7:06:44<8:49:01, 40.28s/it] 09/17/2024 06:47:10 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 148632 instead.
[h264 @ 0x555fe8234480] mmco: unref short failure
[h264 @ 0x555fe8234480] mmco: unref short failure
 46%|████▌     | 668/1455 [7:06:53<6:45:32, 30.92s/it][h264 @ 0x55d4baccc500] mmco: unref short failure
[h264 @ 0x55d4baccc500] mmco: unref short failure
[h264 @ 0x55a03dd282c0] mmco: unref short failure
[h264 @ 0x55a03dd282c0] mmco: unref short failure
[h264 @ 0x55a03dd282c0] mmco: unref short failure
[h264 @ 0x55a03dd282c0] mmco: unref short failure
[h264 @ 0x55a02c789540] mmco: unref short failure
[h264 @ 0x55a02630f440] mmco: unref short failure
 46%|████▌     | 669/1455 [7:07:11<5:52:13, 26.89s/it][h264 @ 0x556004f6ed80] mmco: unref short failure
[h264 @ 0x556004f6ed80] mmco: unref short failure
[h264 @ 0x55d4d4928040] mmco: unref short failure
[h264 @ 0x55d4d4928040] mmco: unref short failure
[h264 @ 0x55d4d4928040] mmco: unref short failure
[h264 @ 0x55d4d4928040] mmco: unref short failure
[h264 @ 0x555fdf844880] mmco: unref short failure
 46%|████▌     | 670/1455 [7:07:30<5:23:12, 24.70s/it] 46%|████▌     | 671/1455 [7:07:39<4:20:43, 19.95s/it][h264 @ 0x55a0163d6080] mmco: unref short failure
[h264 @ 0x55a0163d6080] mmco: unref short failure
[h264 @ 0x55a0163d6080] mmco: unref short failure
 46%|████▌     | 672/1455 [7:07:49<3:42:43, 17.07s/it][h264 @ 0x559339e11780] mmco: unref short failure
[h264 @ 0x555fe79b9040] mmco: unref short failure
[h264 @ 0x555fe79b9040] mmco: unref short failure
[h264 @ 0x555fe79b9040] mmco: unref short failure
[h264 @ 0x555fe79b9040] mmco: unref short failure
[h264 @ 0x55933864fa80] mmco: unref short failure
[h264 @ 0x555fd9be6100] mmco: unref short failure
 46%|████▋     | 673/1455 [7:08:02<3:23:20, 15.60s/it][h264 @ 0x55a00ef329c0] mmco: unref short failure
[h264 @ 0x55a00ef329c0] mmco: unref short failure
[h264 @ 0x55a00ef329c0] mmco: unref short failure
[h264 @ 0x55a00ef329c0] mmco: unref short failure
[h264 @ 0x559338cd1500] mmco: unref short failure
[h264 @ 0x55d4c25a8880] mmco: unref short failure
[h264 @ 0x55d4c25a8880] mmco: unref short failure
[h264 @ 0x55d4c25a8880] mmco: unref short failure
[h264 @ 0x555fdf9fa140] mmco: unref short failure
[h264 @ 0x55a00f2e4d40] mmco: unref short failure
[h264 @ 0x55a00f2e4d40] mmco: unref short failure
[h264 @ 0x55d4d3616e80] mmco: unref short failure
[h264 @ 0x559363091400] mmco: unref short failure
[h264 @ 0x559363091400] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55933a8a2080] mmco: unref short failure
[h264 @ 0x55a01cf33fc0] mmco: unref short failure
[h264 @ 0x55a01cf33fc0] mmco: unref short failure
[h264 @ 0x55d4c99f9800] mmco: unref short failure
[h264 @ 0x55d4c99f9800] mmco: unref short failure
[h264 @ 0x55d4b753a840] mmco: unref short failure
[h264 @ 0x559341f6b840] mmco: unref short failure
[h264 @ 0x55a010b1b2c0] mmco: unref short failure
[h264 @ 0x55a010b1b2c0] mmco: unref short failure
[h264 @ 0x55a010b1b2c0] mmco: unref short failure
[h264 @ 0x55a010b1b2c0] mmco: unref short failure
[h264 @ 0x55d4cb657cc0] mmco: unref short failure
[h264 @ 0x55d4cb657cc0] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
[h264 @ 0x559349849140] mmco: unref short failure
09/17/2024 06:49:38 - INFO - __main__ -   current idx 1-hr71oylIM.38 from finetune_area returns wrong image/video, use 10932 instead.
[h264 @ 0x5593637db3c0] mmco: unref short failure
[h264 @ 0x5593637db3c0] mmco: unref short failure
[h264 @ 0x55a0130cc980] mmco: unref short failure
[h264 @ 0x55a0130cc980] mmco: unref short failure
[h264 @ 0x555fe66d3ac0] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x55d4c757d540] mmco: unref short failure
[h264 @ 0x555fe4500a80] mmco: unref short failure
[h264 @ 0x555fe30b7a40] mmco: unref short failure
[h264 @ 0x55d4df540300] mmco: unref short failure
09/17/2024 06:50:19 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 8331 instead.
[h264 @ 0x55d4da8dc000] mmco: unref short failure
[h264 @ 0x55d4da8dc000] mmco: unref short failure
[h264 @ 0x55600c1e4e40] mmco: unref short failure
[h264 @ 0x55600c1e4e40] mmco: unref short failure
[h264 @ 0x55d4bb09b400] mmco: unref short failure
[h264 @ 0x55a025881700] mmco: unref short failure
[h264 @ 0x55a025881700] mmco: unref short failure
[h264 @ 0x55d4c0f5fc40] mmco: unref short failure
[h264 @ 0x55d4c0f5fc40] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x555ff0bd7f00] mmco: unref short failure
[h264 @ 0x55d4d678df80] mmco: unref short failure
[h264 @ 0x55d4d678df80] mmco: unref short failure
[h264 @ 0x5593545c2dc0] mmco: unref short failure
[h264 @ 0x5593545c2dc0] mmco: unref short failure
[h264 @ 0x5593545c2dc0] mmco: unref short failure
[h264 @ 0x5593545c2dc0] mmco: unref short failure
[h264 @ 0x55934ba288c0] mmco: unref short failure
09/17/2024 06:51:10 - INFO - __main__ -   current idx TvUQDltj3Vw.16 from finetune_area returns wrong image/video, use 94895 instead.
[h264 @ 0x55d4b6cf7d80] mmco: unref short failure
[h264 @ 0x55d4b6cf7d80] mmco: unref short failure
[h264 @ 0x55935c98c4c0] mmco: unref short failure
[h264 @ 0x556009fd4d00] mmco: unref short failure
[h264 @ 0x556009fd4d00] mmco: unref short failure
[h264 @ 0x555ff5198d00] mmco: unref short failure
[h264 @ 0x555ff5198d00] mmco: unref short failure
[h264 @ 0x55d4ec71f980] mmco: unref short failure
[h264 @ 0x559337a8ca40] mmco: unref short failure
[h264 @ 0x559337a8ca40] mmco: unref short failure
 46%|████▋     | 674/1455 [7:11:17<15:06:57, 69.68s/it][h264 @ 0x55a00e51db40] mmco: unref short failure
[h264 @ 0x55d4b70d2380] mmco: unref short failure
[h264 @ 0x55d4b70d2380] mmco: unref short failure
[h264 @ 0x555feee468c0] mmco: unref short failure
[h264 @ 0x555feee468c0] mmco: unref short failure
[h264 @ 0x55d4d4927b80] mmco: unref short failure
 46%|████▋     | 675/1455 [7:11:33<11:33:38, 53.36s/it] 46%|████▋     | 676/1455 [7:11:42<8:39:35, 40.02s/it] [h264 @ 0x555fe15508c0] mmco: unref short failure
[h264 @ 0x555fddfd7f00] mmco: unref short failure
 47%|████▋     | 677/1455 [7:12:01<7:17:39, 33.75s/it][h264 @ 0x55933b1166c0] mmco: unref short failure
 47%|████▋     | 678/1455 [7:12:23<6:32:19, 30.30s/it] 47%|████▋     | 679/1455 [7:12:36<5:25:42, 25.18s/it][h264 @ 0x559363e38e40] mmco: unref short failure
[h264 @ 0x559363e38e40] mmco: unref short failure
[h264 @ 0x559363e38e40] mmco: unref short failure
[h264 @ 0x556003f56c40] mmco: unref short failure
[h264 @ 0x556003f56c40] mmco: unref short failure
 47%|████▋     | 680/1455 [7:12:45<4:20:49, 20.19s/it]09/17/2024 06:53:11 - INFO - __main__ -   current idx Uy2GKmZtj5Y.37 from finetune_area returns wrong image/video, use 92347 instead.
 47%|████▋     | 681/1455 [7:12:53<3:35:29, 16.70s/it][h264 @ 0x55935dbc8840] mmco: unref short failure
[h264 @ 0x55d4e1f57780] mmco: unref short failure
[h264 @ 0x55a00e5873c0] mmco: unref short failure
[h264 @ 0x55d4c1893e40] mmco: unref short failure
[h264 @ 0x55d4c1893e40] mmco: unref short failure
[h264 @ 0x55d4b7140480] mmco: unref short failure
[h264 @ 0x55a00e740b80] mmco: unref short failure
[h264 @ 0x55a00e740b80] mmco: unref short failure
[h264 @ 0x55d4c13c5400] mmco: unref short failure
[h264 @ 0x55d4c13c5400] mmco: unref short failure
[h264 @ 0x55a0354f9940] mmco: unref short failure
[h264 @ 0x55a0354f9940] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
[h264 @ 0x559337496600] mmco: unref short failure
09/17/2024 06:53:55 - INFO - __main__ -   current idx 37nPbMq5QY0.46 from finetune_area returns wrong image/video, use 103515 instead.
[h264 @ 0x55a00f280d40] mmco: unref short failure
[h264 @ 0x55a026327e40] mmco: unref short failure
[h264 @ 0x55a026327e40] mmco: unref short failure
[h264 @ 0x55935e129700] mmco: unref short failure
[h264 @ 0x559336036f00] mmco: unref short failure
[h264 @ 0x559336036f00] mmco: unref short failure
[h264 @ 0x55d4ebb4a880] mmco: unref short failure
[h264 @ 0x55d4ebb4a880] mmco: unref short failure
[h264 @ 0x55d4ebb4a880] mmco: unref short failure
[h264 @ 0x55d4b9f15cc0] mmco: unref short failure
[h264 @ 0x555fe17e0400] mmco: unref short failure
[h264 @ 0x555fe17e0400] mmco: unref short failure
[h264 @ 0x555fe17e0400] mmco: unref short failure
[h264 @ 0x555fe17e0400] mmco: unref short failure
[h264 @ 0x555fddfd8180] mmco: unref short failure
[h264 @ 0x555fddfd8180] mmco: unref short failure
[h264 @ 0x555fe3afcc80] mmco: unref short failure
[h264 @ 0x555fe3afcc80] mmco: unref short failure
[h264 @ 0x555fe3afcc80] mmco: unref short failure
[h264 @ 0x555fe3afcc80] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55d4c32a62c0] mmco: unref short failure
[h264 @ 0x55a0163d6080] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x555fda002100] mmco: unref short failure
[h264 @ 0x55933864f5c0] mmco: unref short failure
[h264 @ 0x55933864f5c0] mmco: unref short failure
[h264 @ 0x55933864f5c0] mmco: unref short failure
[h264 @ 0x55933864f5c0] mmco: unref short failure
[h264 @ 0x556003f56540] mmco: unref short failure
[h264 @ 0x55a03df9a2c0] mmco: unref short failure
[h264 @ 0x55d4ba825700] mmco: unref short failure
[h264 @ 0x55d4ba825700] mmco: unref short failure
[h264 @ 0x55d4ba825700] mmco: unref short failure
[h264 @ 0x55d4ba825700] mmco: unref short failure
[h264 @ 0x55a05015c340] mmco: unref short failure
[h264 @ 0x55a05015c340] mmco: unref short failure
09/17/2024 06:55:13 - INFO - __main__ -   current idx JX1V1Vr8KcE.96 from finetune_area returns wrong image/video, use 95984 instead.
[h264 @ 0x555fe2731300] mmco: unref short failure
[h264 @ 0x55a03011ef80] mmco: unref short failure
[h264 @ 0x555fda1f26c0] mmco: unref short failure
[h264 @ 0x5593344b2c00] mmco: unref short failure
[h264 @ 0x5593344b2c00] mmco: unref short failure
[h264 @ 0x555ff11dcb40] mmco: unref short failure
[h264 @ 0x55933ac9e480] mmco: unref short failure
[h264 @ 0x55933ac9e480] mmco: unref short failure
[h264 @ 0x55934fafbf40] mmco: unref short failure
[h264 @ 0x55934fafbf40] mmco: unref short failure
09/17/2024 06:55:28 - INFO - __main__ -   current idx VedQGAhjkEM.4 from finetune_area returns wrong image/video, use 144408 instead.
[h264 @ 0x55a012dafe00] mmco: unref short failure
[h264 @ 0x55a012dafe00] mmco: unref short failure
09/17/2024 06:55:30 - INFO - __main__ -   current idx R9Nk3i_WMpU.10 from finetune_area returns wrong image/video, use 36489 instead.
[h264 @ 0x555fdf6b9240] mmco: unref short failure
[h264 @ 0x555fdf6b9240] mmco: unref short failure
[h264 @ 0x55d4c7c9b300] mmco: unref short failure
[h264 @ 0x55d4c7c9b300] mmco: unref short failure
[h264 @ 0x555fda967e00] mmco: unref short failure
[h264 @ 0x555fda967e00] mmco: unref short failure
09/17/2024 06:55:56 - INFO - __main__ -   current idx TlZDDACt8Nw.3 from finetune_area returns wrong image/video, use 98113 instead.
[h264 @ 0x55935c402540] mmco: unref short failure
[h264 @ 0x55934a8b5e40] mmco: unref short failure
[h264 @ 0x55d4c99d44c0] mmco: unref short failure
[h264 @ 0x55d4c99d44c0] mmco: unref short failure
[h264 @ 0x55d4eba43180] mmco: unref short failure
[h264 @ 0x55d4eba43180] mmco: unref short failure
[h264 @ 0x555fde307300] mmco: unref short failure
[h264 @ 0x555fde307300] mmco: unref short failure
 47%|████▋     | 682/1455 [7:16:11<15:13:14, 70.89s/it] 47%|████▋     | 683/1455 [7:16:27<11:39:57, 54.40s/it] 47%|████▋     | 684/1455 [7:16:36<8:45:37, 40.90s/it] [h264 @ 0x555fe4203780] mmco: unref short failure
[h264 @ 0x555fd93f1300] mmco: unref short failure
[h264 @ 0x555fd93f1300] mmco: unref short failure
 47%|████▋     | 685/1455 [7:16:48<6:53:01, 32.18s/it][h264 @ 0x55d4cb797040] mmco: unref short failure
[h264 @ 0x55d4cb797040] mmco: unref short failure
[h264 @ 0x555fdb9f3040] mmco: unref short failure
[h264 @ 0x55d4c7da2f40] mmco: unref short failure
[h264 @ 0x55d4c7da2f40] mmco: unref short failure
[h264 @ 0x555fdc1067c0] mmco: unref short failure
[h264 @ 0x555fdc1067c0] mmco: unref short failure
[h264 @ 0x555fddd24b00] mmco: unref short failure
[h264 @ 0x555fddd24b00] mmco: unref short failure
[h264 @ 0x555fddd24b00] mmco: unref short failure
[h264 @ 0x55a012dafe00] mmco: unref short failure
[h264 @ 0x55a012dafe00] mmco: unref short failure
[h264 @ 0x55a00f575dc0] mmco: unref short failure
[h264 @ 0x55a00f575dc0] mmco: unref short failure
 47%|████▋     | 686/1455 [7:17:15<6:33:20, 30.69s/it][h264 @ 0x55d4c7da2880] mmco: unref short failure
[h264 @ 0x55d4c7da2880] mmco: unref short failure
[h264 @ 0x555ffecf5380] mmco: unref short failure
[h264 @ 0x55d4ebb4a680] mmco: unref short failure
[h264 @ 0x55d4ebb4a680] mmco: unref short failure
 47%|████▋     | 687/1455 [7:17:32<5:38:10, 26.42s/it][h264 @ 0x55a01b54e740] mmco: unref short failure
 47%|████▋     | 688/1455 [7:17:40<4:29:44, 21.10s/it] 47%|████▋     | 689/1455 [7:17:50<3:44:17, 17.57s/it][h264 @ 0x55a024c0aec0] mmco: unref short failure
[h264 @ 0x55a024c0aec0] mmco: unref short failure
[h264 @ 0x55a024c0aec0] mmco: unref short failure
[h264 @ 0x55a024c0aec0] mmco: unref short failure
[h264 @ 0x55a02a39ae00] mmco: unref short failure
[h264 @ 0x55a025e52a40] mmco: unref short failure
[h264 @ 0x55a025e52a40] mmco: unref short failure
[h264 @ 0x55a025e52a40] mmco: unref short failure
[h264 @ 0x55a025e52a40] mmco: unref short failure
[h264 @ 0x55a01a54fa80] mmco: unref short failure
[h264 @ 0x55a01a54fa80] mmco: unref short failure
[h264 @ 0x555fd944cfc0] mmco: unref short failure
[h264 @ 0x55d4bad37bc0] mmco: unref short failure
[h264 @ 0x55d4bad37bc0] mmco: unref short failure
[h264 @ 0x55d4bad37bc0] mmco: unref short failure
[h264 @ 0x55d4bad37bc0] mmco: unref short failure
[h264 @ 0x55d4bad37bc0] mmco: unref short failure
09/17/2024 06:59:13 - INFO - __main__ -   current idx FqNEx17crMI.14 from finetune_area returns wrong image/video, use 75518 instead.
[h264 @ 0x55d4b6c1c3c0] mmco: unref short failure
[h264 @ 0x559356263140] mmco: unref short failure
[h264 @ 0x559356263140] mmco: unref short failure
[h264 @ 0x555fdd3b74c0] mmco: unref short failure
[h264 @ 0x5593379cf740] mmco: unref short failure
[h264 @ 0x5593379cf740] mmco: unref short failure
[h264 @ 0x55a00ee0e140] mmco: unref short failure
[h264 @ 0x55a00ee0e140] mmco: unref short failure
[h264 @ 0x55a0107c1fc0] mmco: unref short failure
[h264 @ 0x55935c27ca00] mmco: unref short failure
[h264 @ 0x55935c27ca00] mmco: unref short failure
[h264 @ 0x559369c78a40] mmco: unref short failure
[h264 @ 0x555fe5a2f180] mmco: unref short failure
[h264 @ 0x559344a29500] mmco: unref short failure
[h264 @ 0x555fd9455280] mmco: unref short failure
[h264 @ 0x55d4e4df0680] mmco: unref short failure
[h264 @ 0x55d4e4df0680] mmco: unref short failure
[h264 @ 0x55933a826880] mmco: unref short failure
[h264 @ 0x55d4c9892080] mmco: unref short failure
[h264 @ 0x55d4c4e32f00] mmco: unref short failure
[h264 @ 0x555fffc28180] mmco: unref short failure
[h264 @ 0x555fffc28180] mmco: unref short failure
[h264 @ 0x555ff282a980] mmco: unref short failure
[h264 @ 0x559334980880] mmco: unref short failure
[h264 @ 0x55933864f1c0] mmco: unref short failure
[h264 @ 0x55933864f1c0] mmco: unref short failure
[h264 @ 0x555fef372240] mmco: unref short failure
[h264 @ 0x555fef372240] mmco: unref short failure
[h264 @ 0x55d4d4927b80] mmco: unref short failure
[h264 @ 0x55a02e1bda40] mmco: unref short failure
[h264 @ 0x559354dc9180] mmco: unref short failure
[h264 @ 0x5593349c1780] mmco: unref short failure
[h264 @ 0x5593349c1780] mmco: unref short failure
[h264 @ 0x5593349c1780] mmco: unref short failure
[h264 @ 0x556022cf4340] mmco: unref short failure
09/17/2024 07:01:29 - INFO - __main__ -   current idx c-OFuj2DzPc.20 from finetune_area returns wrong image/video, use 117514 instead.
[h264 @ 0x555fea8a50c0] mmco: unref short failure
[h264 @ 0x555fea8a50c0] mmco: unref short failure
 47%|████▋     | 690/1455 [7:21:14<15:40:36, 73.77s/it][h264 @ 0x55d4b6be5a40] mmco: unref short failure
[h264 @ 0x55d4b6be5a40] mmco: unref short failure
 47%|████▋     | 691/1455 [7:21:24<11:32:21, 54.37s/it]09/17/2024 07:01:47 - INFO - __main__ -   current idx hZOgYFh5bYI.55 from finetune_area returns wrong image/video, use 146821 instead.
[h264 @ 0x55d4d1c70b00] mmco: unref short failure
[h264 @ 0x55d4d1c70b00] mmco: unref short failure
[h264 @ 0x55a026c64300] mmco: unref short failure
[h264 @ 0x55d4c1893bc0] mmco: unref short failure
 48%|████▊     | 692/1455 [7:21:34<8:42:09, 41.06s/it] [h264 @ 0x55d4ea364340] mmco: unref short failure
[h264 @ 0x55d4ea364340] mmco: unref short failure
[h264 @ 0x55d4b7d3a300] mmco: unref short failure
[h264 @ 0x55d4b7d3a300] mmco: unref short failure
09/17/2024 07:02:01 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 66 instead.
 48%|████▊     | 693/1455 [7:21:43<6:39:20, 31.44s/it][h264 @ 0x55d4c0a6ef00] mmco: unref short failure
[h264 @ 0x55a038279fc0] mmco: unref short failure
[h264 @ 0x55a017cbddc0] mmco: unref short failure
[h264 @ 0x55a017cbddc0] mmco: unref short failure
 48%|████▊     | 694/1455 [7:22:08<6:16:13, 29.66s/it][h264 @ 0x55a0321f4080] mmco: unref short failure
[h264 @ 0x55a0321f4080] mmco: unref short failure
[h264 @ 0x55a0227fc000] mmco: unref short failure
[h264 @ 0x55d4c54c0dc0] mmco: unref short failure
[h264 @ 0x55d4c54c0dc0] mmco: unref short failure
[h264 @ 0x55d4c54c0dc0] mmco: unref short failure
[h264 @ 0x55d4c54c0dc0] mmco: unref short failure
[h264 @ 0x55933fd615c0] mmco: unref short failure
[h264 @ 0x55933fd615c0] mmco: unref short failure
[h264 @ 0x55934a9d1240] mmco: unref short failure
[h264 @ 0x55d4d678e180] mmco: unref short failure
[h264 @ 0x55d4d678e180] mmco: unref short failure
[h264 @ 0x55d4d678e180] mmco: unref short failure
[h264 @ 0x55d4d678e180] mmco: unref short failure
[h264 @ 0x55d4d678e180] mmco: unref short failure
 48%|████▊     | 695/1455 [7:22:27<5:33:21, 26.32s/it][h264 @ 0x55a025c0f040] mmco: unref short failure
[h264 @ 0x55a025c0f040] mmco: unref short failure
[h264 @ 0x555fe2646580] mmco: unref short failure
 48%|████▊     | 696/1455 [7:22:37<4:30:42, 21.40s/it][h264 @ 0x555fdb9f3040] mmco: unref short failure
[h264 @ 0x555fdb9f3040] mmco: unref short failure
[h264 @ 0x555fdb9f3040] mmco: unref short failure
[h264 @ 0x55d4d7fae440] mmco: unref short failure
[h264 @ 0x55d4d7fae440] mmco: unref short failure
09/17/2024 07:03:07 - INFO - __main__ -   current idx iVsSItydo2I.31 from finetune_area returns wrong image/video, use 142984 instead.
[h264 @ 0x55d4ed1405c0] mmco: unref short failure
[h264 @ 0x55d4ed1405c0] mmco: unref short failure
 48%|████▊     | 697/1455 [7:22:46<3:46:56, 17.96s/it][h264 @ 0x55d4c4cff380] mmco: unref short failure
[h264 @ 0x55d4c4cff380] mmco: unref short failure
[h264 @ 0x55d4e42c1800] mmco: unref short failure
[h264 @ 0x559349d2abc0] mmco: unref short failure
[h264 @ 0x559349d2abc0] mmco: unref short failure
[h264 @ 0x55a025c0f740] mmco: unref short failure
[h264 @ 0x55a025c0f740] mmco: unref short failure
[h264 @ 0x55936824cb00] mmco: unref short failure
[h264 @ 0x55936824cb00] mmco: unref short failure
[h264 @ 0x55a043a52940] mmco: unref short failure
[h264 @ 0x55d4b7f330c0] mmco: unref short failure
[h264 @ 0x55d4b7f330c0] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x5593460e5980] mmco: unref short failure
[h264 @ 0x5593339e5b40] mmco: unref short failure
[h264 @ 0x5593339e5b40] mmco: unref short failure
[h264 @ 0x5593339e5b40] mmco: unref short failure
[h264 @ 0x55a01c85af80] mmco: unref short failure
[h264 @ 0x555fe1e49500] mmco: unref short failure
[h264 @ 0x55d4bb66fc00] mmco: unref short failure
[h264 @ 0x55d4bb66fc00] mmco: unref short failure
[h264 @ 0x55d4c4cf6780] mmco: unref short failure
[h264 @ 0x55d4c4cf6780] mmco: unref short failure
[h264 @ 0x55a038d32b80] mmco: unref short failure
[h264 @ 0x55a038d32b80] mmco: unref short failure
[h264 @ 0x559353c5a2c0] mmco: unref short failure
[h264 @ 0x559353c5a2c0] mmco: unref short failure
[h264 @ 0x55d4c7556fc0] mmco: unref short failure
[h264 @ 0x55a00ddd5e40] mmco: unref short failure
[h264 @ 0x55a00ddd5e40] mmco: unref short failure
[h264 @ 0x55d4caa677c0] mmco: unref short failure
[h264 @ 0x55d4caa677c0] mmco: unref short failure
[h264 @ 0x555ff6abe7c0] mmco: unref short failure
09/17/2024 07:04:35 - INFO - __main__ -   current idx hYUBfT385zc.4 from finetune_area returns wrong image/video, use 29767 instead.
[h264 @ 0x559333afbf80] mmco: unref short failure
[h264 @ 0x55d4e8124580] mmco: unref short failure
[h264 @ 0x55d4e8124580] mmco: unref short failure
[h264 @ 0x55d4c5154040] mmco: unref short failure
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x555ff013c800] mmco: unref short failure
[h264 @ 0x555ffcfdd940] mmco: unref short failure
[h264 @ 0x555fee7aaa00] mmco: unref short failure
[h264 @ 0x555fee7aaa00] mmco: unref short failure
[h264 @ 0x55a0298a4400] mmco: unref short failure
[h264 @ 0x55a0298a4400] mmco: unref short failure
[h264 @ 0x55936305f440] mmco: unref short failure
[h264 @ 0x55936305f440] mmco: unref short failure
[h264 @ 0x55936305f440] mmco: unref short failure
[h264 @ 0x55936305f440] mmco: unref short failure
[h264 @ 0x55a05c10e040] mmco: unref short failure
[h264 @ 0x55a05c10e040] mmco: unref short failure
[h264 @ 0x55d4d31ab840] mmco: unref short failure
[h264 @ 0x55d4d31ab840] mmco: unref short failure
[h264 @ 0x55d4d31ab840] mmco: unref short failure
[h264 @ 0x55d4d31ab840] mmco: unref short failure
[h264 @ 0x55933a826bc0] mmco: unref short failure
[h264 @ 0x55933a826bc0] mmco: unref short failure
09/17/2024 07:05:42 - INFO - __main__ -   current idx dYEsNlBENWc.3 from finetune_area returns wrong image/video, use 101294 instead.
[h264 @ 0x559336102d00] mmco: unref short failure
[h264 @ 0x559336102d00] mmco: unref short failure
[h264 @ 0x55d4da8dc480] mmco: unref short failure
[h264 @ 0x55d4da8dc480] mmco: unref short failure
[h264 @ 0x55a00fd52380] mmco: unref short failure
[h264 @ 0x55d4e49c2c80] mmco: unref short failure
[h264 @ 0x555fdbd26ec0] mmco: unref short failure
[h264 @ 0x55934b624d80] mmco: unref short failure
[h264 @ 0x55d4dacf8740] mmco: unref short failure
[h264 @ 0x55d4dacf8740] mmco: unref short failure
[h264 @ 0x55d4da8dc6c0] mmco: unref short failure
[h264 @ 0x55d4da8dc6c0] mmco: unref short failure
 48%|████▊     | 698/1455 [7:26:12<15:36:21, 74.22s/it][h264 @ 0x55a02a9b3f80] mmco: unref short failure
[h264 @ 0x55a02a9b3f80] mmco: unref short failure
[h264 @ 0x55d4c38b1880] mmco: unref short failure
[h264 @ 0x555fef29db40] mmco: unref short failure
 48%|████▊     | 699/1455 [7:26:38<12:33:30, 59.80s/it]09/17/2024 07:07:00 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 07:07:00 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555ff04ce100] mmco: unref short failure
[h264 @ 0x555ff04ce100] mmco: unref short failure
[h264 @ 0x555fdb422e00] mmco: unref short failure
[h264 @ 0x559340d801c0] mmco: unref short failure
[h264 @ 0x55a00f044840] mmco: unref short failure
[h264 @ 0x55a00f044840] mmco: unref short failure
[h264 @ 0x55a00f044840] mmco: unref short failure
[h264 @ 0x55a00f044840] mmco: unref short failure
[h264 @ 0x55a03ee0eec0] mmco: unref short failure
[h264 @ 0x55a03ee0eec0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
[h264 @ 0x559335543cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55935686b8c0] mmco: unref short failure
[h264 @ 0x555fdfd36ac0] mmco: unref short failure
[h264 @ 0x55934a3d0300] mmco: unref short failure
[h264 @ 0x55a00f2a2a80] mmco: unref short failure
[h264 @ 0x55a00f2a2a80] mmco: unref short failure
[h264 @ 0x55934ba8dd80] mmco: unref short failure
[h264 @ 0x55d4dfd0bec0] mmco: unref short failure
[h264 @ 0x555fdd6638c0] mmco: unref short failure
[h264 @ 0x555fdd6638c0] mmco: unref short failure
[h264 @ 0x55935c8e03c0] mmco: unref short failure
[h264 @ 0x55935c8e03c0] mmco: unref short failure
[h264 @ 0x55935c8e03c0] mmco: unref short failure
[h264 @ 0x55935c8e03c0] mmco: unref short failure
[h264 @ 0x55d4c3a81d00] mmco: unref short failure
[h264 @ 0x55d4c3a81d00] mmco: unref short failure
[h264 @ 0x55933c33c300] mmco: unref short failure
[h264 @ 0x55a0234abdc0] mmco: unref short failure
[h264 @ 0x55a0234abdc0] mmco: unref short failure
[h264 @ 0x55a020c50b00] mmco: unref short failure
[h264 @ 0x55a020c50b00] mmco: unref short failure
[h264 @ 0x55d4e89a80c0] mmco: unref short failure
[h264 @ 0x55d4e89a80c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x55d4e8124780] mmco: unref short failure

  0%|          | 1/221 [00:01<03:44,  1.02s/it][A
  1%|          | 2/221 [00:01<02:48,  1.30it/s][A
  1%|▏         | 3/221 [00:01<01:59,  1.82it/s][A
  2%|▏         | 5/221 [00:02<01:04,  3.34it/s][A
  3%|▎         | 6/221 [00:02<00:52,  4.07it/s][A
  3%|▎         | 7/221 [00:02<00:57,  3.75it/s][A
  4%|▎         | 8/221 [00:03<01:19,  2.69it/s][A
  4%|▍         | 9/221 [00:03<01:14,  2.86it/s][A
  5%|▍         | 10/221 [00:04<01:33,  2.26it/s][A
  5%|▍         | 11/221 [00:04<01:13,  2.86it/s][A
  5%|▌         | 12/221 [00:04<01:22,  2.52it/s][A
  6%|▌         | 13/221 [00:04<01:11,  2.91it/s][A
  6%|▋         | 14/221 [00:06<02:43,  1.27it/s][A
  7%|▋         | 15/221 [00:07<02:11,  1.57it/s][A[h264 @ 0x555fed3ed640] mmco: unref short failure

  7%|▋         | 16/221 [00:07<02:01,  1.68it/s][A
  8%|▊         | 17/221 [00:07<01:46,  1.91it/s][A
  8%|▊         | 18/221 [00:08<01:34,  2.14it/s][A
  9%|▊         | 19/221 [00:08<01:20,  2.50it/s][A
  9%|▉         | 20/221 [00:08<01:07,  2.98it/s][A
 10%|▉         | 21/221 [00:08<00:59,  3.38it/s][A
 10%|▉         | 22/221 [00:09<01:01,  3.25it/s][A
 10%|█         | 23/221 [00:09<00:54,  3.66it/s][A
 11%|█         | 24/221 [00:09<00:50,  3.87it/s][A
 11%|█▏        | 25/221 [00:09<00:47,  4.14it/s][A
 12%|█▏        | 26/221 [00:10<00:48,  4.04it/s][A
 12%|█▏        | 27/221 [00:10<00:41,  4.63it/s][A
 13%|█▎        | 28/221 [00:10<00:55,  3.50it/s][A
 13%|█▎        | 29/221 [00:10<00:44,  4.34it/s][A
 14%|█▎        | 30/221 [00:11<00:48,  3.94it/s][A
 14%|█▍        | 31/221 [00:11<00:49,  3.82it/s][A[h264 @ 0x55a0298b8840] mmco: unref short failure

 14%|█▍        | 32/221 [00:11<00:41,  4.55it/s][A
 15%|█▍        | 33/221 [00:12<00:54,  3.44it/s][A
 15%|█▌        | 34/221 [00:12<00:48,  3.85it/s][A
 16%|█▌        | 35/221 [00:12<00:42,  4.38it/s][A
 16%|█▋        | 36/221 [00:12<00:45,  4.05it/s][A
 17%|█▋        | 37/221 [00:13<01:03,  2.91it/s][A
 17%|█▋        | 38/221 [00:13<01:05,  2.81it/s][A
 18%|█▊        | 40/221 [00:14<00:52,  3.43it/s][A09/17/2024 07:09:34 - INFO - __main__ -   current idx hI-_iZaM-ZY.36 from finetune_area returns wrong image/video, use 55769 instead.

 19%|█▊        | 41/221 [00:14<00:43,  4.09it/s][A
 19%|█▉        | 42/221 [00:14<00:55,  3.22it/s][A
 19%|█▉        | 43/221 [00:14<00:52,  3.40it/s][A
 20%|█▉        | 44/221 [00:15<00:49,  3.61it/s][A
 20%|██        | 45/221 [00:15<01:13,  2.40it/s][A
 21%|██        | 46/221 [00:16<01:15,  2.32it/s][A
 21%|██▏       | 47/221 [00:16<01:24,  2.06it/s][A
 22%|██▏       | 48/221 [00:17<01:04,  2.69it/s][A
 22%|██▏       | 49/221 [00:17<00:53,  3.21it/s][A
 23%|██▎       | 51/221 [00:17<00:44,  3.85it/s][A
 24%|██▎       | 52/221 [00:17<00:44,  3.81it/s][A
 24%|██▍       | 53/221 [00:18<00:39,  4.25it/s][A
 24%|██▍       | 54/221 [00:19<01:20,  2.07it/s][A
 25%|██▍       | 55/221 [00:19<01:11,  2.33it/s][A
 25%|██▌       | 56/221 [00:19<01:10,  2.34it/s][A
 26%|██▌       | 57/221 [00:20<01:08,  2.39it/s][A
 26%|██▌       | 58/221 [00:20<00:57,  2.82it/s][A
 27%|██▋       | 59/221 [00:20<00:52,  3.08it/s][A
 27%|██▋       | 60/221 [00:21<00:59,  2.73it/s][A
 28%|██▊       | 61/221 [00:21<00:53,  3.00it/s][A
 28%|██▊       | 62/221 [00:21<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:21<00:43,  3.65it/s][A
 29%|██▉       | 64/221 [00:22<00:39,  4.01it/s][A
 29%|██▉       | 65/221 [00:22<00:35,  4.38it/s][A
 30%|██▉       | 66/221 [00:22<00:48,  3.22it/s][A
 30%|███       | 67/221 [00:23<01:05,  2.34it/s][A
 31%|███       | 68/221 [00:23<00:58,  2.60it/s][A
 31%|███       | 69/221 [00:24<01:22,  1.84it/s][A
 32%|███▏      | 70/221 [00:24<01:07,  2.25it/s][A
 32%|███▏      | 71/221 [00:25<01:23,  1.80it/s][A
 33%|███▎      | 72/221 [00:26<01:11,  2.09it/s][A
 33%|███▎      | 73/221 [00:26<01:04,  2.30it/s][A
 33%|███▎      | 74/221 [00:26<00:51,  2.83it/s][A
 34%|███▍      | 75/221 [00:26<00:53,  2.75it/s][A
 34%|███▍      | 76/221 [00:27<00:45,  3.16it/s][A
 35%|███▍      | 77/221 [00:27<00:38,  3.76it/s][A
 35%|███▌      | 78/221 [00:27<00:43,  3.31it/s][A
 36%|███▌      | 79/221 [00:28<00:59,  2.40it/s][A
 36%|███▌      | 80/221 [00:28<00:48,  2.94it/s][A
 37%|███▋      | 81/221 [00:28<00:43,  3.19it/s][A
 37%|███▋      | 82/221 [00:28<00:38,  3.64it/s][A
 38%|███▊      | 83/221 [00:29<00:32,  4.27it/s][A
 38%|███▊      | 84/221 [00:29<00:34,  3.93it/s][A
 38%|███▊      | 85/221 [00:29<00:30,  4.41it/s][A
 39%|███▉      | 86/221 [00:29<00:30,  4.41it/s][A
 39%|███▉      | 87/221 [00:30<00:44,  3.00it/s][A
 40%|███▉      | 88/221 [00:30<00:46,  2.88it/s][A
 40%|████      | 89/221 [00:31<01:19,  1.67it/s][A
 41%|████      | 90/221 [00:32<01:09,  1.89it/s][A
 41%|████      | 91/221 [00:32<00:54,  2.39it/s][A
 42%|████▏     | 92/221 [00:32<00:48,  2.65it/s][A[h264 @ 0x55d4bc57bb00] mmco: unref short failure

 42%|████▏     | 93/221 [00:33<00:54,  2.34it/s][A
 43%|████▎     | 94/221 [00:33<00:48,  2.61it/s][A
 43%|████▎     | 95/221 [00:33<00:39,  3.16it/s][A
 43%|████▎     | 96/221 [00:33<00:39,  3.20it/s][A
 44%|████▍     | 97/221 [00:34<00:31,  3.97it/s][A
 44%|████▍     | 98/221 [00:34<00:35,  3.50it/s][A
 45%|████▍     | 99/221 [00:34<00:36,  3.30it/s][A
 45%|████▌     | 100/221 [00:35<00:34,  3.49it/s][A[h264 @ 0x55600a2bd400] mmco: unref short failure

 46%|████▌     | 101/221 [00:35<00:31,  3.85it/s][A
 46%|████▌     | 102/221 [00:35<00:37,  3.17it/s][A
 47%|████▋     | 103/221 [00:35<00:35,  3.35it/s][A
 47%|████▋     | 104/221 [00:36<00:31,  3.75it/s][A
 48%|████▊     | 105/221 [00:36<00:32,  3.61it/s][A
 48%|████▊     | 106/221 [00:37<00:44,  2.59it/s][A
 48%|████▊     | 107/221 [00:37<00:37,  3.06it/s][A
 49%|████▉     | 108/221 [00:37<00:35,  3.19it/s][A
 49%|████▉     | 109/221 [00:37<00:38,  2.89it/s][A
 50%|████▉     | 110/221 [00:38<00:41,  2.65it/s][A
 50%|█████     | 111/221 [00:39<00:50,  2.19it/s][A
 51%|█████     | 112/221 [00:39<00:43,  2.51it/s][A
 51%|█████     | 113/221 [00:39<00:41,  2.62it/s][A
 52%|█████▏    | 114/221 [00:39<00:31,  3.35it/s][A
 52%|█████▏    | 115/221 [00:39<00:26,  4.01it/s][A[h264 @ 0x55d4bbc8bd80] mmco: unref short failure
[h264 @ 0x55d4bbc8bd80] mmco: unref short failure
[h264 @ 0x55d4cd3ac600] mmco: unref short failure

 52%|█████▏    | 116/221 [00:43<02:12,  1.26s/it][A[h264 @ 0x55d4cd3ac600] mmco: unref short failure

 53%|█████▎    | 117/221 [00:43<01:42,  1.01it/s][A[h264 @ 0x555feb07ab80] mmco: unref short failure

 53%|█████▎    | 118/221 [00:44<01:22,  1.25it/s][A
 54%|█████▍    | 119/221 [00:44<01:04,  1.58it/s][A[h264 @ 0x55a0359f4180] mmco: unref short failure
[h264 @ 0x55a0359f4180] mmco: unref short failure

 54%|█████▍    | 120/221 [00:44<00:55,  1.82it/s][A
 55%|█████▍    | 121/221 [00:45<00:47,  2.13it/s][A
 55%|█████▌    | 122/221 [00:45<00:44,  2.20it/s][A
 56%|█████▌    | 123/221 [00:45<00:36,  2.70it/s][A
 56%|█████▌    | 124/221 [00:45<00:31,  3.06it/s][A
 57%|█████▋    | 125/221 [00:46<00:32,  2.96it/s][A
 57%|█████▋    | 126/221 [00:46<00:34,  2.72it/s][A[h264 @ 0x555fdb608700] mmco: unref short failure
[h264 @ 0x555fdb608700] mmco: unref short failure

 57%|█████▋    | 127/221 [00:47<00:40,  2.32it/s][A
 58%|█████▊    | 128/221 [00:47<00:37,  2.50it/s][A
 58%|█████▊    | 129/221 [00:47<00:32,  2.81it/s][A
 59%|█████▉    | 130/221 [00:48<00:30,  2.99it/s][A
 59%|█████▉    | 131/221 [00:48<00:24,  3.71it/s][A
 60%|█████▉    | 132/221 [00:48<00:24,  3.61it/s][A
 60%|██████    | 133/221 [00:49<00:31,  2.83it/s][A
 61%|██████    | 134/221 [00:49<00:33,  2.62it/s][A
 61%|██████    | 135/221 [00:50<00:34,  2.51it/s][A
 62%|██████▏   | 136/221 [00:50<00:35,  2.42it/s][A
 62%|██████▏   | 137/221 [00:50<00:30,  2.74it/s][A
 62%|██████▏   | 138/221 [00:51<00:31,  2.60it/s][A
 63%|██████▎   | 139/221 [00:51<00:35,  2.29it/s][A
 63%|██████▎   | 140/221 [00:52<00:32,  2.50it/s][A
 64%|██████▍   | 141/221 [00:52<00:28,  2.83it/s][A
 64%|██████▍   | 142/221 [00:52<00:29,  2.66it/s][A
 65%|██████▍   | 143/221 [00:53<00:34,  2.26it/s][A
 65%|██████▌   | 144/221 [00:53<00:27,  2.76it/s][A
 66%|██████▌   | 146/221 [00:53<00:18,  3.97it/s][A
 67%|██████▋   | 147/221 [00:53<00:18,  4.09it/s][A
 67%|██████▋   | 148/221 [00:54<00:20,  3.55it/s][A
 67%|██████▋   | 149/221 [00:54<00:17,  4.20it/s][A
 68%|██████▊   | 150/221 [00:54<00:15,  4.45it/s][A
 68%|██████▊   | 151/221 [00:55<00:31,  2.23it/s][A
 69%|██████▉   | 152/221 [00:56<00:33,  2.05it/s][A
 69%|██████▉   | 153/221 [00:56<00:30,  2.26it/s][A
 70%|██████▉   | 154/221 [00:56<00:28,  2.33it/s][A
 70%|███████   | 155/221 [00:57<00:23,  2.80it/s][A
 71%|███████   | 156/221 [00:57<00:20,  3.12it/s][A
 71%|███████   | 157/221 [00:59<00:59,  1.08it/s][A
 71%|███████▏  | 158/221 [01:00<00:46,  1.37it/s][A
 72%|███████▏  | 159/221 [01:00<00:36,  1.68it/s][A
 72%|███████▏  | 160/221 [01:00<00:30,  2.00it/s][A
 73%|███████▎  | 161/221 [01:00<00:24,  2.48it/s][A
 73%|███████▎  | 162/221 [01:00<00:19,  3.07it/s][A[h264 @ 0x55d4e18b81c0] mmco: unref short failure
[h264 @ 0x55d4e18b81c0] mmco: unref short failure

 74%|███████▍  | 163/221 [01:01<00:18,  3.21it/s][A
 74%|███████▍  | 164/221 [01:01<00:15,  3.79it/s][A
 75%|███████▍  | 165/221 [01:01<00:12,  4.44it/s][A
 75%|███████▌  | 166/221 [01:01<00:16,  3.28it/s][A
 76%|███████▌  | 167/221 [01:02<00:16,  3.37it/s][A
 76%|███████▌  | 168/221 [01:03<00:31,  1.71it/s][A
 76%|███████▋  | 169/221 [01:03<00:25,  2.04it/s][A
 77%|███████▋  | 170/221 [01:04<00:21,  2.35it/s][A
 77%|███████▋  | 171/221 [01:04<00:19,  2.54it/s][A
 78%|███████▊  | 172/221 [01:04<00:17,  2.83it/s][A
 78%|███████▊  | 173/221 [01:04<00:13,  3.51it/s][A
 79%|███████▊  | 174/221 [01:04<00:11,  4.25it/s][A
 79%|███████▉  | 175/221 [01:05<00:10,  4.21it/s][A
 80%|███████▉  | 176/221 [01:05<00:12,  3.56it/s][A
 80%|████████  | 177/221 [01:05<00:11,  3.79it/s][A
 81%|████████  | 178/221 [01:06<00:16,  2.62it/s][A
 81%|████████  | 179/221 [01:06<00:17,  2.44it/s][A
 81%|████████▏ | 180/221 [01:07<00:14,  2.79it/s][A
 82%|████████▏ | 181/221 [01:07<00:14,  2.79it/s][A
 82%|████████▏ | 182/221 [01:07<00:12,  3.13it/s][A
 83%|████████▎ | 183/221 [01:08<00:12,  2.94it/s][A
 83%|████████▎ | 184/221 [01:08<00:13,  2.73it/s][A
 84%|████████▎ | 185/221 [01:08<00:12,  2.98it/s][A
 84%|████████▍ | 186/221 [01:09<00:13,  2.51it/s][A
 85%|████████▍ | 187/221 [01:09<00:12,  2.82it/s][A[h264 @ 0x55a036c69c80] mmco: unref short failure

 85%|████████▌ | 188/221 [01:10<00:13,  2.38it/s][A
 86%|████████▌ | 189/221 [01:10<00:12,  2.62it/s][A
 86%|████████▌ | 190/221 [01:10<00:11,  2.68it/s][A
 86%|████████▋ | 191/221 [01:10<00:09,  3.28it/s][A
 87%|████████▋ | 192/221 [01:11<00:08,  3.56it/s][A
 87%|████████▋ | 193/221 [01:11<00:06,  4.28it/s][A
 88%|████████▊ | 194/221 [01:12<00:10,  2.49it/s][A
 88%|████████▊ | 195/221 [01:12<00:08,  2.90it/s][A
 89%|████████▊ | 196/221 [01:12<00:08,  3.02it/s][A
 89%|████████▉ | 197/221 [01:12<00:07,  3.38it/s][A
 90%|████████▉ | 198/221 [01:13<00:08,  2.76it/s][A
 90%|█████████ | 199/221 [01:13<00:06,  3.20it/s][A
 90%|█████████ | 200/221 [01:13<00:07,  2.77it/s][A
 91%|█████████ | 201/221 [01:14<00:06,  3.00it/s][A
 91%|█████████▏| 202/221 [01:14<00:05,  3.22it/s][A
 92%|█████████▏| 203/221 [01:14<00:04,  3.72it/s][A
 92%|█████████▏| 204/221 [01:14<00:04,  3.61it/s][A
 93%|█████████▎| 205/221 [01:15<00:03,  4.15it/s][A
 93%|█████████▎| 206/221 [01:15<00:05,  2.75it/s][A
 94%|█████████▎| 207/221 [01:15<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [01:16<00:03,  3.60it/s][A
 95%|█████████▍| 209/221 [01:16<00:03,  3.83it/s][A
 95%|█████████▌| 210/221 [01:16<00:02,  4.07it/s][A
 95%|█████████▌| 211/221 [01:17<00:03,  3.19it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  3.64it/s][A
 96%|█████████▋| 213/221 [01:17<00:01,  4.43it/s][A[h264 @ 0x5593370086c0] mmco: unref short failure

 97%|█████████▋| 214/221 [01:18<00:02,  2.71it/s][A[h264 @ 0x5593370086c0] mmco: unref short failure

 97%|█████████▋| 215/221 [01:18<00:02,  2.96it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  3.14it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:19<00:00,  3.02it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  3.14it/s][A
100%|█████████▉| 220/221 [01:22<00:01,  1.23s/it][A
100%|██████████| 221/221 [01:23<00:00,  1.05it/s][A100%|██████████| 221/221 [01:23<00:00,  2.65it/s]
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x55d4bfdedb80] mmco: unref short failure
[h264 @ 0x555ffcc66cc0] mmco: unref short failure
[h264 @ 0x555ffcc66cc0] mmco: unref short failure
[h264 @ 0x559334ad4680] mmco: unref short failure
[h264 @ 0x559334ad4680] mmco: unref short failure
09/17/2024 07:10:53 - INFO - __main__ -   current idx 6oFC5O_u-SI.107 from finetune_area returns wrong image/video, use 131652 instead.
[h264 @ 0x55d4c07b0a00] mmco: unref short failure
[h264 @ 0x55d4c07b0a00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x55a00f0930c0] mmco: unref short failure

  0%|          | 1/221 [00:00<01:14,  2.94it/s][A
  1%|          | 2/221 [00:00<01:09,  3.15it/s][A
  1%|▏         | 3/221 [00:01<01:16,  2.83it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.86it/s][A
  2%|▏         | 5/221 [00:01<01:15,  2.88it/s][A
  3%|▎         | 6/221 [00:02<01:15,  2.87it/s][A
  3%|▎         | 7/221 [00:02<01:16,  2.80it/s][A
  4%|▎         | 8/221 [00:02<01:15,  2.81it/s][A
  4%|▍         | 9/221 [00:03<01:14,  2.84it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A
  5%|▍         | 11/221 [00:03<01:13,  2.84it/s][A
  5%|▌         | 12/221 [00:04<01:16,  2.72it/s][A
  6%|▌         | 13/221 [00:04<01:15,  2.76it/s][A[h264 @ 0x555fe8062780] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:13,  2.80it/s][A[h264 @ 0x555fe8062780] mmco: unref short failure

  7%|▋         | 15/221 [00:05<01:11,  2.88it/s][A
  7%|▋         | 16/221 [00:05<01:10,  2.89it/s][A
  8%|▊         | 17/221 [00:05<01:09,  2.95it/s][A
  8%|▊         | 18/221 [00:06<01:09,  2.92it/s][A
  9%|▊         | 19/221 [00:06<01:11,  2.83it/s][A
  9%|▉         | 20/221 [00:07<01:12,  2.76it/s][A
 10%|▉         | 21/221 [00:07<01:18,  2.55it/s][A
 10%|▉         | 22/221 [00:08<01:24,  2.36it/s][A
 10%|█         | 23/221 [00:08<01:24,  2.35it/s][A
 11%|█         | 24/221 [00:08<01:17,  2.55it/s][A
 11%|█▏        | 25/221 [00:09<01:13,  2.66it/s][A
 12%|█▏        | 26/221 [00:09<01:11,  2.72it/s][A
 12%|█▏        | 27/221 [00:09<01:10,  2.74it/s][A
 13%|█▎        | 28/221 [00:10<01:09,  2.77it/s][A
 13%|█▎        | 29/221 [00:10<01:09,  2.77it/s][A
 14%|█▎        | 30/221 [00:10<01:08,  2.79it/s][A
 14%|█▍        | 31/221 [00:11<01:06,  2.85it/s][A
 14%|█▍        | 32/221 [00:11<01:07,  2.80it/s][A
 15%|█▍        | 33/221 [00:11<01:05,  2.87it/s][A
 15%|█▌        | 34/221 [00:12<01:03,  2.95it/s][A
 16%|█▌        | 35/221 [00:12<01:04,  2.88it/s][A
 16%|█▋        | 36/221 [00:12<01:06,  2.80it/s][A
 17%|█▋        | 37/221 [00:13<01:03,  2.90it/s][A
 17%|█▋        | 38/221 [00:13<01:02,  2.90it/s][A
 18%|█▊        | 39/221 [00:14<01:04,  2.80it/s][A[h264 @ 0x55d4bc111500] mmco: unref short failure

 18%|█▊        | 40/221 [00:14<01:04,  2.83it/s][A
 19%|█▊        | 41/221 [00:14<01:04,  2.77it/s][A
 19%|█▉        | 42/221 [00:15<01:06,  2.71it/s][A
 19%|█▉        | 43/221 [00:15<01:03,  2.81it/s][A
 20%|█▉        | 44/221 [00:15<01:01,  2.87it/s][A
 20%|██        | 45/221 [00:16<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:16<01:03,  2.77it/s][A
 21%|██▏       | 47/221 [00:16<01:02,  2.77it/s][A
 22%|██▏       | 48/221 [00:17<01:02,  2.77it/s][A
 22%|██▏       | 49/221 [00:17<01:04,  2.66it/s][A
 23%|██▎       | 50/221 [00:17<01:01,  2.77it/s][A
 23%|██▎       | 51/221 [00:18<01:00,  2.80it/s][A
 24%|██▎       | 52/221 [00:18<01:01,  2.73it/s][A
 24%|██▍       | 53/221 [00:19<01:00,  2.76it/s][A
 24%|██▍       | 54/221 [00:19<00:59,  2.79it/s][A
 25%|██▍       | 55/221 [00:19<00:59,  2.78it/s][A
 25%|██▌       | 56/221 [00:20<00:58,  2.84it/s][A
 26%|██▌       | 57/221 [00:20<00:59,  2.77it/s][A
 26%|██▌       | 58/221 [00:20<00:59,  2.74it/s][A
 27%|██▋       | 59/221 [00:21<01:00,  2.70it/s][A
 27%|██▋       | 60/221 [00:21<00:59,  2.72it/s][A
 28%|██▊       | 61/221 [00:21<00:57,  2.77it/s][A
 28%|██▊       | 62/221 [00:22<00:57,  2.77it/s][A
 29%|██▊       | 63/221 [00:22<00:56,  2.79it/s][A
 29%|██▉       | 64/221 [00:23<00:55,  2.84it/s][A
 29%|██▉       | 65/221 [00:23<00:53,  2.90it/s][A
 30%|██▉       | 66/221 [00:23<00:51,  2.98it/s][A
 30%|███       | 67/221 [00:24<00:57,  2.67it/s][A09/17/2024 07:11:22 - INFO - __main__ -   current idx EDyva2crZas.40 from finetune_area returns wrong image/video, use 62717 instead.

 31%|███       | 68/221 [00:24<00:58,  2.60it/s][A
 31%|███       | 69/221 [00:24<00:56,  2.68it/s][A
 32%|███▏      | 70/221 [00:25<00:53,  2.81it/s][A
 32%|███▏      | 71/221 [00:25<00:52,  2.85it/s][A
 33%|███▎      | 72/221 [00:25<00:52,  2.85it/s][A
 33%|███▎      | 73/221 [00:26<00:51,  2.89it/s][A
 33%|███▎      | 74/221 [00:26<00:50,  2.92it/s][A[h264 @ 0x55a01992c500] mmco: unref short failure

 34%|███▍      | 75/221 [00:26<00:53,  2.73it/s][A
 34%|███▍      | 76/221 [00:27<00:52,  2.79it/s][A
 35%|███▍      | 77/221 [00:27<00:50,  2.86it/s][A
 35%|███▌      | 78/221 [00:27<00:48,  2.92it/s][A
 36%|███▌      | 79/221 [00:28<00:48,  2.95it/s][A
 36%|███▌      | 80/221 [00:28<00:48,  2.92it/s][A
 37%|███▋      | 81/221 [00:28<00:48,  2.87it/s][A
 37%|███▋      | 82/221 [00:29<00:47,  2.91it/s][A
 38%|███▊      | 83/221 [00:29<00:46,  2.97it/s][A
 38%|███▊      | 84/221 [00:30<00:46,  2.94it/s][A
 38%|███▊      | 85/221 [00:30<00:49,  2.78it/s][A
 39%|███▉      | 86/221 [00:30<00:51,  2.60it/s][A
 39%|███▉      | 87/221 [00:31<00:51,  2.60it/s][A
 40%|███▉      | 88/221 [00:31<00:48,  2.72it/s][A
 40%|████      | 89/221 [00:31<00:46,  2.83it/s][A
 41%|████      | 90/221 [00:32<00:45,  2.88it/s][A
 41%|████      | 91/221 [00:32<00:44,  2.91it/s][A
 42%|████▏     | 92/221 [00:32<00:45,  2.85it/s][A
 42%|████▏     | 93/221 [00:33<00:46,  2.72it/s][A
 43%|████▎     | 94/221 [00:33<00:44,  2.83it/s][A09/17/2024 07:11:32 - INFO - __main__ -   current idx X5zUC2bqWt4.23 from finetune_area returns wrong image/video, use 15510 instead.

 43%|████▎     | 95/221 [00:33<00:43,  2.92it/s][A
 43%|████▎     | 96/221 [00:34<00:41,  2.98it/s][A
 44%|████▍     | 97/221 [00:34<00:42,  2.92it/s][A
 44%|████▍     | 98/221 [00:35<00:43,  2.84it/s][A
 45%|████▍     | 99/221 [00:35<00:42,  2.86it/s][A
 45%|████▌     | 100/221 [00:35<00:43,  2.77it/s][A
 46%|████▌     | 101/221 [00:36<00:42,  2.82it/s][A
 46%|████▌     | 102/221 [00:36<00:41,  2.90it/s][A
 47%|████▋     | 103/221 [00:36<00:40,  2.88it/s][A[h264 @ 0x55a036f02100] mmco: unref short failure
[h264 @ 0x55a036f02100] mmco: unref short failure

 47%|████▋     | 104/221 [00:37<00:39,  2.94it/s][A
 48%|████▊     | 105/221 [00:37<00:40,  2.89it/s][A[h264 @ 0x555fe3afc800] mmco: unref short failure

 48%|████▊     | 106/221 [00:37<00:39,  2.93it/s][A
 48%|████▊     | 107/221 [00:38<00:38,  2.95it/s][A
 49%|████▉     | 108/221 [00:38<00:38,  2.92it/s][A
 49%|████▉     | 109/221 [00:38<00:41,  2.67it/s][A
 50%|████▉     | 110/221 [00:39<00:41,  2.70it/s][A
 50%|█████     | 111/221 [00:39<00:39,  2.79it/s][A
 51%|█████     | 112/221 [00:39<00:37,  2.88it/s][A
 51%|█████     | 113/221 [00:40<00:36,  2.93it/s][A
 52%|█████▏    | 114/221 [00:40<00:36,  2.96it/s][A[h264 @ 0x555fee7ad980] mmco: unref short failure
[h264 @ 0x555fee7ad980] mmco: unref short failure
[h264 @ 0x555fee7ad980] mmco: unref short failure
[h264 @ 0x555fee7ad980] mmco: unref short failure

 52%|█████▏    | 115/221 [00:41<00:39,  2.67it/s][A
 52%|█████▏    | 116/221 [00:41<00:37,  2.79it/s][A
 53%|█████▎    | 117/221 [00:41<00:36,  2.85it/s][A
 53%|█████▎    | 118/221 [00:42<00:35,  2.87it/s][A
 54%|█████▍    | 119/221 [00:42<00:36,  2.78it/s][A
 54%|█████▍    | 120/221 [00:42<00:38,  2.66it/s][A
 55%|█████▍    | 121/221 [00:43<00:41,  2.39it/s][A
 55%|█████▌    | 122/221 [00:43<00:39,  2.54it/s][A
 56%|█████▌    | 123/221 [00:44<00:37,  2.60it/s][A
 56%|█████▌    | 124/221 [00:44<00:35,  2.72it/s][A
 57%|█████▋    | 125/221 [00:44<00:34,  2.76it/s][A
 57%|█████▋    | 126/221 [00:45<00:33,  2.83it/s][A
 57%|█████▋    | 127/221 [00:45<00:32,  2.90it/s][A
 58%|█████▊    | 128/221 [00:45<00:31,  2.96it/s][A
 58%|█████▊    | 129/221 [00:46<00:31,  2.92it/s][A
 59%|█████▉    | 130/221 [00:46<00:31,  2.88it/s][A
 59%|█████▉    | 131/221 [00:46<00:30,  2.97it/s][A
 60%|█████▉    | 132/221 [00:47<00:30,  2.90it/s][A
 60%|██████    | 133/221 [00:47<00:30,  2.90it/s][A
 61%|██████    | 134/221 [00:47<00:31,  2.79it/s][A
 61%|██████    | 135/221 [00:48<00:29,  2.89it/s][A
 62%|██████▏   | 136/221 [00:48<00:28,  2.94it/s][A
 62%|██████▏   | 137/221 [00:48<00:28,  2.96it/s][A
 62%|██████▏   | 138/221 [00:49<00:30,  2.74it/s][A
 63%|██████▎   | 139/221 [00:49<00:29,  2.82it/s][A
 63%|██████▎   | 140/221 [00:49<00:27,  2.91it/s][A[h264 @ 0x555fddbbd380] mmco: unref short failure
[h264 @ 0x555fddbbd380] mmco: unref short failure

 64%|██████▍   | 141/221 [00:50<00:27,  2.91it/s][A
 64%|██████▍   | 142/221 [00:50<00:28,  2.77it/s][A
 65%|██████▍   | 143/221 [00:50<00:27,  2.79it/s][A
 65%|██████▌   | 144/221 [00:51<00:27,  2.77it/s][A
 66%|██████▌   | 145/221 [00:51<00:27,  2.73it/s][A
 66%|██████▌   | 146/221 [00:52<00:26,  2.82it/s][A
 67%|██████▋   | 147/221 [00:52<00:26,  2.84it/s][A
 67%|██████▋   | 148/221 [00:52<00:25,  2.88it/s][A
 67%|██████▋   | 149/221 [00:53<00:24,  2.89it/s][A
 68%|██████▊   | 150/221 [00:53<00:24,  2.85it/s][A
 68%|██████▊   | 151/221 [00:53<00:26,  2.65it/s][A
 69%|██████▉   | 152/221 [00:54<00:25,  2.72it/s][A
 69%|██████▉   | 153/221 [00:54<00:24,  2.79it/s][A
 70%|██████▉   | 154/221 [00:54<00:23,  2.87it/s][A
 70%|███████   | 155/221 [00:55<00:22,  2.92it/s][A
 71%|███████   | 156/221 [00:55<00:22,  2.87it/s][A
 71%|███████   | 157/221 [00:55<00:21,  2.94it/s][A
 71%|███████▏  | 158/221 [00:56<00:21,  2.93it/s][A
 72%|███████▏  | 159/221 [00:56<00:20,  2.98it/s][A
 72%|███████▏  | 160/221 [00:56<00:21,  2.85it/s][A
 73%|███████▎  | 161/221 [00:57<00:21,  2.74it/s][A
 73%|███████▎  | 162/221 [00:57<00:21,  2.77it/s][A
 74%|███████▍  | 163/221 [00:58<00:20,  2.77it/s][A
 74%|███████▍  | 164/221 [00:58<00:20,  2.80it/s][A
 75%|███████▍  | 165/221 [00:58<00:19,  2.85it/s][A
 75%|███████▌  | 166/221 [00:59<00:18,  2.93it/s][A
 76%|███████▌  | 167/221 [00:59<00:18,  2.86it/s][A
 76%|███████▌  | 168/221 [00:59<00:18,  2.88it/s][A
 76%|███████▋  | 169/221 [01:00<00:17,  2.93it/s][A
 77%|███████▋  | 170/221 [01:00<00:18,  2.82it/s][A09/17/2024 07:11:58 - INFO - __main__ -   current idx WI5csPawDEg.3 from finetune_area returns wrong image/video, use 37699 instead.

 77%|███████▋  | 171/221 [01:00<00:17,  2.83it/s][A
 78%|███████▊  | 172/221 [01:01<00:16,  2.89it/s][A
 78%|███████▊  | 173/221 [01:01<00:16,  2.94it/s][A
 79%|███████▊  | 174/221 [01:01<00:15,  2.95it/s][A
 79%|███████▉  | 175/221 [01:02<00:16,  2.83it/s][A
 80%|███████▉  | 176/221 [01:02<00:16,  2.75it/s][A
 80%|████████  | 177/221 [01:02<00:15,  2.76it/s][A
 81%|████████  | 178/221 [01:03<00:15,  2.71it/s][A
 81%|████████  | 179/221 [01:03<00:15,  2.76it/s][A
 81%|████████▏ | 180/221 [01:04<00:14,  2.77it/s][A
 82%|████████▏ | 181/221 [01:04<00:15,  2.66it/s][A
 82%|████████▏ | 182/221 [01:04<00:14,  2.78it/s][A[h264 @ 0x55d4ba7ff5c0] mmco: unref short failure
[h264 @ 0x55d4ba7ff5c0] mmco: unref short failure

 83%|████████▎ | 183/221 [01:05<00:13,  2.86it/s][A
 83%|████████▎ | 184/221 [01:05<00:12,  2.92it/s][A
 84%|████████▎ | 185/221 [01:05<00:12,  2.99it/s][A
 84%|████████▍ | 186/221 [01:06<00:11,  2.98it/s][A
 85%|████████▍ | 187/221 [01:06<00:11,  2.95it/s][A
 85%|████████▌ | 188/221 [01:06<00:11,  2.92it/s][A
 86%|████████▌ | 189/221 [01:07<00:12,  2.55it/s][A
 86%|████████▌ | 190/221 [01:07<00:11,  2.65it/s][A
 86%|████████▋ | 191/221 [01:08<00:11,  2.61it/s][A
 87%|████████▋ | 192/221 [01:08<00:10,  2.74it/s][A
 87%|████████▋ | 193/221 [01:08<00:09,  2.84it/s][A
 88%|████████▊ | 194/221 [01:09<00:09,  2.81it/s][A
 88%|████████▊ | 195/221 [01:09<00:09,  2.78it/s][A
 89%|████████▊ | 196/221 [01:09<00:09,  2.73it/s][A
 89%|████████▉ | 197/221 [01:10<00:08,  2.77it/s][A
 90%|████████▉ | 198/221 [01:10<00:08,  2.87it/s][A
 90%|█████████ | 199/221 [01:10<00:07,  2.91it/s][A
 90%|█████████ | 200/221 [01:11<00:07,  2.96it/s][A
 91%|█████████ | 201/221 [01:11<00:06,  2.92it/s][A
 91%|█████████▏| 202/221 [01:11<00:06,  2.98it/s][A
 92%|█████████▏| 203/221 [01:12<00:06,  2.92it/s][A
 92%|█████████▏| 204/221 [01:12<00:06,  2.76it/s][A
 93%|█████████▎| 205/221 [01:12<00:05,  2.88it/s][A
 93%|█████████▎| 206/221 [01:13<00:05,  2.90it/s][A
 94%|█████████▎| 207/221 [01:13<00:04,  2.83it/s][A
 94%|█████████▍| 208/221 [01:13<00:04,  2.79it/s][A
 95%|█████████▍| 209/221 [01:14<00:04,  2.88it/s][A
 95%|█████████▌| 210/221 [01:14<00:03,  2.91it/s][A
 95%|█████████▌| 211/221 [01:14<00:03,  3.00it/s][A[h264 @ 0x555ff4939500] mmco: unref short failure
[h264 @ 0x555ff4939500] mmco: unref short failure
[h264 @ 0x555ff4939500] mmco: unref short failure
[h264 @ 0x555ff4939500] mmco: unref short failure

 96%|█████████▌| 212/221 [01:15<00:03,  2.97it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  3.00it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  2.96it/s][A
 97%|█████████▋| 215/221 [01:16<00:02,  2.90it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  2.83it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.84it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.90it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.98it/s][A
100%|█████████▉| 220/221 [01:17<00:00,  2.98it/s][A
100%|██████████| 221/221 [01:18<00:00,  2.98it/s][A100%|██████████| 221/221 [01:18<00:00,  2.82it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:42,  5.13it/s][A
  1%|          | 2/221 [00:00<01:02,  3.51it/s][A
  1%|▏         | 3/221 [00:01<01:28,  2.46it/s][A
  2%|▏         | 4/221 [00:01<01:26,  2.51it/s][A[h264 @ 0x559341dc0940] mmco: unref short failure

  2%|▏         | 5/221 [00:01<01:20,  2.70it/s][A
  3%|▎         | 7/221 [00:02<01:07,  3.17it/s][A
  4%|▎         | 8/221 [00:02<01:13,  2.90it/s][A
  4%|▍         | 9/221 [00:03<01:10,  2.99it/s][A
  5%|▍         | 10/221 [00:03<00:58,  3.59it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.21it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.55it/s][A
  6%|▌         | 13/221 [00:04<01:44,  2.00it/s][A
  6%|▋         | 14/221 [00:05<01:28,  2.35it/s][A
  7%|▋         | 15/221 [00:05<01:25,  2.42it/s][A
  7%|▋         | 16/221 [00:06<01:35,  2.16it/s][A
  8%|▊         | 17/221 [00:06<01:36,  2.12it/s][A
  8%|▊         | 18/221 [00:06<01:27,  2.33it/s][A
  9%|▊         | 19/221 [00:07<01:13,  2.76it/s][A
  9%|▉         | 20/221 [00:07<01:18,  2.55it/s][A
 10%|▉         | 21/221 [00:07<01:04,  3.08it/s][A
 10%|▉         | 22/221 [00:07<00:58,  3.42it/s][A
 10%|█         | 23/221 [00:08<00:49,  3.98it/s][A
 11%|█         | 24/221 [00:08<00:45,  4.32it/s][A
 11%|█▏        | 25/221 [00:08<00:56,  3.50it/s][A
 12%|█▏        | 26/221 [00:08<00:53,  3.64it/s][A
 12%|█▏        | 27/221 [00:09<01:04,  3.03it/s][A
 13%|█▎        | 28/221 [00:09<01:06,  2.89it/s][A
 13%|█▎        | 29/221 [00:10<01:10,  2.71it/s][A
 14%|█▎        | 30/221 [00:10<01:12,  2.65it/s][A
 14%|█▍        | 31/221 [00:11<01:21,  2.34it/s][A
 14%|█▍        | 32/221 [00:11<01:15,  2.49it/s][A
 15%|█▍        | 33/221 [00:11<01:15,  2.48it/s][A
 15%|█▌        | 34/221 [00:12<01:42,  1.82it/s][A
 16%|█▌        | 35/221 [00:13<01:26,  2.15it/s][A
 16%|█▋        | 36/221 [00:13<01:17,  2.38it/s][A
 17%|█▋        | 37/221 [00:13<01:09,  2.65it/s][A
 17%|█▋        | 38/221 [00:14<01:09,  2.65it/s][A
 18%|█▊        | 39/221 [00:14<01:00,  3.00it/s][A
 18%|█▊        | 40/221 [00:14<01:00,  3.02it/s][A
 19%|█▊        | 41/221 [00:14<00:59,  3.04it/s][A
 19%|█▉        | 42/221 [00:15<00:51,  3.48it/s][A
 19%|█▉        | 43/221 [00:15<00:57,  3.12it/s][A
 20%|█▉        | 44/221 [00:15<00:56,  3.11it/s][A
 20%|██        | 45/221 [00:16<00:58,  3.02it/s][A
 21%|██        | 46/221 [00:16<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:16<00:42,  4.09it/s][A
 22%|██▏       | 48/221 [00:16<00:37,  4.66it/s][A
 22%|██▏       | 49/221 [00:16<00:35,  4.81it/s][A
 23%|██▎       | 50/221 [00:17<00:43,  3.98it/s][A
 23%|██▎       | 51/221 [00:17<00:44,  3.84it/s][A
 24%|██▎       | 52/221 [00:17<00:36,  4.58it/s][A
 24%|██▍       | 53/221 [00:17<00:39,  4.22it/s][A
 24%|██▍       | 54/221 [00:18<00:40,  4.14it/s][A
 25%|██▍       | 55/221 [00:18<00:48,  3.45it/s][A
 25%|██▌       | 56/221 [00:18<00:45,  3.64it/s][A
 26%|██▌       | 57/221 [00:19<00:51,  3.20it/s][A[h264 @ 0x559364d08fc0] mmco: unref short failure

 26%|██▌       | 58/221 [00:19<00:52,  3.12it/s][A[h264 @ 0x55a02e92c140] mmco: unref short failure

 27%|██▋       | 59/221 [00:19<00:51,  3.14it/s][A[h264 @ 0x55a02e92c140] mmco: unref short failure

 27%|██▋       | 60/221 [00:20<00:50,  3.17it/s][A
 28%|██▊       | 61/221 [00:20<00:46,  3.46it/s][A
 28%|██▊       | 62/221 [00:20<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:20<00:38,  4.07it/s][A
 29%|██▉       | 64/221 [00:21<00:37,  4.23it/s][A
 29%|██▉       | 65/221 [00:21<00:36,  4.22it/s][A
 30%|██▉       | 66/221 [00:21<00:44,  3.47it/s][A
 30%|███       | 67/221 [00:22<00:59,  2.58it/s][A
 31%|███       | 68/221 [00:22<00:55,  2.73it/s][A
 31%|███       | 69/221 [00:23<01:03,  2.39it/s][A
 32%|███▏      | 70/221 [00:23<00:53,  2.81it/s][A[h264 @ 0x55934a3d0300] mmco: unref short failure
[h264 @ 0x55934a3d0300] mmco: unref short failure

 32%|███▏      | 71/221 [00:23<00:57,  2.60it/s][A
 33%|███▎      | 72/221 [00:24<01:02,  2.38it/s][A
 33%|███▎      | 73/221 [00:24<01:00,  2.45it/s][A
 33%|███▎      | 74/221 [00:24<00:50,  2.89it/s][A
 34%|███▍      | 75/221 [00:25<00:52,  2.80it/s][A
 34%|███▍      | 76/221 [00:25<00:43,  3.35it/s][A
 35%|███▍      | 77/221 [00:25<00:46,  3.11it/s][A
 35%|███▌      | 78/221 [00:26<00:52,  2.71it/s][A
 36%|███▌      | 79/221 [00:26<00:53,  2.67it/s][A
 36%|███▌      | 80/221 [00:26<00:50,  2.80it/s][A
 37%|███▋      | 81/221 [00:27<00:48,  2.91it/s][A
 37%|███▋      | 82/221 [00:27<00:44,  3.16it/s][A
 38%|███▊      | 83/221 [00:27<00:38,  3.61it/s][A09/17/2024 07:12:53 - INFO - __main__ -   current idx eR5wj0_pF4o.77 from finetune_area returns wrong image/video, use 37567 instead.

 38%|███▊      | 84/221 [00:28<00:46,  2.96it/s][A
 38%|███▊      | 85/221 [00:28<00:51,  2.66it/s][A
 39%|███▉      | 86/221 [00:29<00:55,  2.42it/s][A[h264 @ 0x55a014fa6c00] mmco: unref short failure
[h264 @ 0x55a014fa6c00] mmco: unref short failure

 39%|███▉      | 87/221 [00:29<01:00,  2.21it/s][A
 40%|███▉      | 88/221 [00:29<00:51,  2.60it/s][A
 40%|████      | 89/221 [00:30<00:54,  2.41it/s][A
 41%|████      | 90/221 [00:30<00:59,  2.19it/s][A
 41%|████      | 91/221 [00:31<00:50,  2.55it/s][A
 42%|████▏     | 92/221 [00:31<00:47,  2.71it/s][A
 42%|████▏     | 93/221 [00:32<00:58,  2.17it/s][A
 43%|████▎     | 94/221 [00:32<00:49,  2.55it/s][A
 43%|████▎     | 95/221 [00:33<00:58,  2.17it/s][A
 43%|████▎     | 96/221 [00:33<00:53,  2.33it/s][A
 44%|████▍     | 97/221 [00:33<00:47,  2.62it/s][A
 44%|████▍     | 98/221 [00:33<00:44,  2.78it/s][A
 45%|████▍     | 99/221 [00:34<00:38,  3.13it/s][A
 45%|████▌     | 100/221 [00:34<00:32,  3.70it/s][A
 46%|████▌     | 101/221 [00:34<00:29,  4.13it/s][A
 46%|████▌     | 102/221 [00:34<00:30,  3.86it/s][A
 47%|████▋     | 103/221 [00:35<00:29,  4.06it/s][A
 47%|████▋     | 104/221 [00:35<00:25,  4.60it/s][A
 48%|████▊     | 105/221 [00:35<00:30,  3.82it/s][A
 48%|████▊     | 106/221 [00:35<00:33,  3.39it/s][A
 48%|████▊     | 107/221 [00:36<00:31,  3.59it/s][A
 49%|████▉     | 108/221 [00:36<00:29,  3.85it/s][A
 49%|████▉     | 109/221 [00:36<00:29,  3.80it/s][A
 50%|████▉     | 110/221 [00:36<00:30,  3.66it/s][A
 50%|█████     | 111/221 [00:37<00:34,  3.22it/s][A
 51%|█████     | 112/221 [00:37<00:39,  2.76it/s][A
 51%|█████     | 113/221 [00:38<00:34,  3.14it/s][A[h264 @ 0x55a049ae6440] mmco: unref short failure
[h264 @ 0x55a049ae6440] mmco: unref short failure
[h264 @ 0x55a049ae6440] mmco: unref short failure
[h264 @ 0x55a049ae6440] mmco: unref short failure

 52%|█████▏    | 114/221 [00:38<00:27,  3.95it/s][A
 52%|█████▏    | 115/221 [00:38<00:26,  3.96it/s][A
 52%|█████▏    | 116/221 [00:38<00:25,  4.12it/s][A
 53%|█████▎    | 117/221 [00:39<00:29,  3.51it/s][A
 53%|█████▎    | 118/221 [00:39<00:35,  2.90it/s][A
 54%|█████▍    | 119/221 [00:39<00:37,  2.75it/s][A
 54%|█████▍    | 120/221 [00:40<00:34,  2.90it/s][A
 55%|█████▍    | 121/221 [00:40<00:29,  3.35it/s][A
 55%|█████▌    | 122/221 [00:40<00:27,  3.66it/s][A
 56%|█████▌    | 123/221 [00:40<00:29,  3.33it/s][A
 56%|█████▌    | 124/221 [00:41<00:28,  3.46it/s][A
 57%|█████▋    | 125/221 [00:41<00:35,  2.70it/s][A[h264 @ 0x555fdce76600] mmco: unref short failure
[h264 @ 0x555fdce76600] mmco: unref short failure

 57%|█████▋    | 126/221 [00:41<00:29,  3.20it/s][A
 57%|█████▋    | 127/221 [00:42<00:40,  2.35it/s][A
 58%|█████▊    | 128/221 [00:42<00:34,  2.70it/s][A
 58%|█████▊    | 129/221 [00:43<00:29,  3.13it/s][A
 59%|█████▉    | 130/221 [00:43<00:29,  3.07it/s][A
 59%|█████▉    | 131/221 [00:43<00:26,  3.44it/s][A
 60%|█████▉    | 132/221 [00:43<00:24,  3.57it/s][A
 60%|██████    | 133/221 [00:44<00:37,  2.33it/s][A
 61%|██████    | 134/221 [00:45<00:37,  2.34it/s][A
 61%|██████    | 135/221 [00:45<00:29,  2.92it/s][A
 62%|██████▏   | 136/221 [00:45<00:29,  2.91it/s][A
 62%|██████▏   | 137/221 [00:45<00:26,  3.22it/s][A
 62%|██████▏   | 138/221 [00:46<00:24,  3.35it/s][A
 63%|██████▎   | 139/221 [00:46<00:27,  3.03it/s][A
 63%|██████▎   | 140/221 [00:46<00:24,  3.33it/s][A
 64%|██████▍   | 141/221 [00:47<00:26,  2.99it/s][A
 64%|██████▍   | 142/221 [00:47<00:22,  3.47it/s][A
 65%|██████▍   | 143/221 [00:47<00:24,  3.24it/s][A
 65%|██████▌   | 144/221 [00:47<00:22,  3.44it/s][A
 66%|██████▌   | 145/221 [00:48<00:22,  3.32it/s][A
 66%|██████▌   | 146/221 [00:48<00:22,  3.27it/s][A
 67%|██████▋   | 147/221 [00:48<00:21,  3.38it/s][A
 67%|██████▋   | 148/221 [00:49<00:23,  3.13it/s][A
 67%|██████▋   | 149/221 [00:49<00:19,  3.69it/s][A
 68%|██████▊   | 150/221 [00:49<00:19,  3.65it/s][A
 68%|██████▊   | 151/221 [00:50<00:28,  2.42it/s][A
 69%|██████▉   | 152/221 [00:51<00:39,  1.73it/s][A
 69%|██████▉   | 153/221 [00:51<00:31,  2.15it/s][A
 70%|██████▉   | 154/221 [00:51<00:27,  2.41it/s][A
 70%|███████   | 155/221 [00:52<00:27,  2.43it/s][A
 71%|███████   | 156/221 [00:52<00:23,  2.79it/s][A[h264 @ 0x55a010bb5380] mmco: unref short failure
[h264 @ 0x55a010bb5380] mmco: unref short failure
[h264 @ 0x55a010bb5380] mmco: unref short failure

 71%|███████   | 157/221 [00:52<00:21,  2.95it/s][A
 71%|███████▏  | 158/221 [00:53<00:21,  2.96it/s][A
 72%|███████▏  | 159/221 [00:53<00:19,  3.24it/s][A
 72%|███████▏  | 160/221 [00:53<00:16,  3.72it/s][A
 73%|███████▎  | 161/221 [00:53<00:16,  3.56it/s][A
 73%|███████▎  | 162/221 [00:54<00:14,  4.10it/s][A
 74%|███████▍  | 163/221 [00:54<00:13,  4.16it/s][A
 74%|███████▍  | 164/221 [00:54<00:12,  4.52it/s][A
 75%|███████▍  | 165/221 [00:54<00:11,  5.05it/s][A
 75%|███████▌  | 166/221 [00:54<00:12,  4.25it/s][A
 76%|███████▌  | 167/221 [00:55<00:11,  4.54it/s][A
 76%|███████▌  | 168/221 [00:55<00:12,  4.19it/s][A
 76%|███████▋  | 169/221 [00:55<00:10,  4.84it/s][A
 77%|███████▋  | 170/221 [00:56<00:19,  2.65it/s][A
 77%|███████▋  | 171/221 [00:56<00:19,  2.57it/s][A
 78%|███████▊  | 172/221 [00:57<00:18,  2.71it/s][A
 78%|███████▊  | 173/221 [00:57<00:16,  2.86it/s][A
 79%|███████▊  | 174/221 [00:57<00:14,  3.25it/s][A
 79%|███████▉  | 175/221 [00:57<00:16,  2.86it/s][A
 80%|███████▉  | 176/221 [00:58<00:14,  3.20it/s][A
 80%|████████  | 177/221 [00:58<00:12,  3.44it/s][A
 81%|████████  | 178/221 [00:59<00:18,  2.29it/s][A
 81%|████████  | 179/221 [00:59<00:16,  2.55it/s][A
 81%|████████▏ | 180/221 [00:59<00:13,  3.01it/s][A
 82%|████████▏ | 181/221 [01:00<00:14,  2.77it/s][A
 82%|████████▏ | 182/221 [01:00<00:13,  2.90it/s][A
 83%|████████▎ | 183/221 [01:00<00:12,  2.95it/s][A
 83%|████████▎ | 184/221 [01:01<00:12,  2.94it/s][A
 84%|████████▎ | 185/221 [01:01<00:09,  3.62it/s][A
 84%|████████▍ | 186/221 [01:01<00:12,  2.84it/s][A
 85%|████████▍ | 187/221 [01:02<00:11,  3.03it/s][A
 85%|████████▌ | 188/221 [01:02<00:11,  2.85it/s][A
 86%|████████▌ | 189/221 [01:02<00:09,  3.35it/s][A
 86%|████████▌ | 190/221 [01:03<00:10,  3.04it/s][A
 86%|████████▋ | 191/221 [01:03<00:08,  3.68it/s][A
 87%|████████▋ | 192/221 [01:03<00:07,  3.94it/s][A
 87%|████████▋ | 193/221 [01:03<00:06,  4.30it/s][A
 88%|████████▊ | 194/221 [01:03<00:06,  4.07it/s][A
 88%|████████▊ | 195/221 [01:04<00:06,  3.72it/s][A
 89%|████████▊ | 196/221 [01:04<00:10,  2.48it/s][A
 89%|████████▉ | 197/221 [01:05<00:10,  2.40it/s][A
 90%|████████▉ | 198/221 [01:05<00:10,  2.20it/s][A
 90%|█████████ | 199/221 [01:06<00:08,  2.68it/s][A
 90%|█████████ | 200/221 [01:06<00:06,  3.02it/s][A
 91%|█████████ | 201/221 [01:06<00:05,  3.41it/s][A
 91%|█████████▏| 202/221 [01:06<00:05,  3.45it/s][A
 92%|█████████▏| 203/221 [01:07<00:05,  3.49it/s][A
 92%|█████████▏| 204/221 [01:07<00:05,  3.36it/s][A
 93%|█████████▎| 205/221 [01:07<00:04,  3.39it/s][A
 93%|█████████▎| 206/221 [01:08<00:05,  2.86it/s][A
 94%|█████████▎| 207/221 [01:08<00:05,  2.71it/s][A
 94%|█████████▍| 208/221 [01:08<00:04,  3.16it/s][A
 95%|█████████▍| 209/221 [01:09<00:03,  3.21it/s][A
 95%|█████████▌| 210/221 [01:09<00:03,  3.34it/s][A
 95%|█████████▌| 211/221 [01:09<00:02,  3.51it/s][A
 96%|█████████▌| 212/221 [01:09<00:02,  3.23it/s][A
 96%|█████████▋| 213/221 [01:10<00:02,  3.30it/s][A
 97%|█████████▋| 214/221 [01:10<00:02,  3.00it/s][A
 97%|█████████▋| 215/221 [01:10<00:01,  3.17it/s][A
 98%|█████████▊| 216/221 [01:11<00:01,  3.07it/s][A
 98%|█████████▊| 217/221 [01:11<00:01,  3.12it/s][A
 99%|█████████▊| 218/221 [01:11<00:01,  2.96it/s][A
 99%|█████████▉| 219/221 [01:12<00:00,  2.95it/s][A
100%|█████████▉| 220/221 [01:12<00:00,  3.41it/s][A
100%|██████████| 221/221 [01:12<00:00,  2.91it/s][A100%|██████████| 221/221 [01:12<00:00,  3.03it/s]
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'area_r1': 39.0, 'area_recall': '39.0/65.3/76.0', 'area_ravg': 60.1}
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'forward_r1': 38.0, 'forward_recall': '38.0/66.0/76.7', 'forward_ravg': 60.2}
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/67.1/77.5', 'area_video_ravg': 61.3}
09/17/2024 07:13:38 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 07:13:38 - INFO - __main__ -   {'area_video_r1': 41.6, 'area_video_recall': '41.6/67.9/77.9', 'area_video_ravg': 62.5}
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'area_video_r1': 52.4, 'area_video_recall': '52.4/75.6/83.0', 'area_video_ravg': 70.3, 'area_video_back_r1': 48.1, 'area_video_back_recall': '48.1/74.2/81.9', 'area_video_back_ravg': 68.1}
09/17/2024 07:13:38 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 07:13:38 - INFO - __main__ -   {'area_video_r1': 53.3, 'area_video_recall': '53.3/75.3/83.3', 'area_video_ravg': 70.6, 'area_video_back_r1': 50.0, 'area_video_back_recall': '50.0/75.1/82.0', 'area_video_back_ravg': 69.0}
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/64.9/73.5', 'video_ravg': 58.3}
09/17/2024 07:13:38 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 649=======

09/17/2024 07:13:38 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/64.5/73.8', 'video_ravg': 58.5}
09/17/2024 07:13:38 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 699--===========

09/17/2024 07:13:38 - INFO - __main__ -   {'video_r1': 52.5, 'video_recall': '52.5/76.1/83.1', 'video_ravg': 70.6}
09/17/2024 07:13:38 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 07:13:38 - INFO - __main__ -   {'video_r1': 53.3, 'video_recall': '53.3/75.5/82.9', 'video_ravg': 70.6}
[h264 @ 0x55d4c1729b80] mmco: unref short failure
[h264 @ 0x55d4c1729b80] mmco: unref short failure
[h264 @ 0x556006691440] mmco: unref short failure
[h264 @ 0x556006691440] mmco: unref short failure
[h264 @ 0x559341dc0740] mmco: unref short failure
[h264 @ 0x55a0194dd540] mmco: unref short failure
09/17/2024 07:14:13 - INFO - __main__ -   {'loss_ret%tv%ta--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta--finetune_area/loss_itm': 0.007572727277874947, 'loss_ret%tv%ta--finetune_area/loss_area': 1.1594536304473877, 'loss_ret%tv%ta--finetune_area/total_loss': 1.167026400566101}
 48%|████▊     | 700/1455 [7:33:57<36:22:11, 173.42s/it][h264 @ 0x559350556340] mmco: unref short failure
[h264 @ 0x55d4b9af6f00] mmco: unref short failure
 48%|████▊     | 701/1455 [7:34:05<25:56:12, 123.84s/it][h264 @ 0x555fdc1067c0] mmco: unref short failure
[h264 @ 0x555fdc1067c0] mmco: unref short failure
 48%|████▊     | 702/1455 [7:34:12<18:36:46, 88.99s/it] [h264 @ 0x55d4c389afc0] mmco: unref short failure
[h264 @ 0x55933320f8c0] mmco: unref short failure
[h264 @ 0x55933320f8c0] mmco: unref short failure
 48%|████▊     | 703/1455 [7:34:21<13:33:56, 64.94s/it][h264 @ 0x55934d93c900] mmco: unref short failure
[h264 @ 0x55d4c1729980] mmco: unref short failure
[h264 @ 0x55d4c1729980] mmco: unref short failure
[h264 @ 0x55d4c1729980] mmco: unref short failure
[h264 @ 0x55d4c1729980] mmco: unref short failure
[h264 @ 0x55934d93c700] mmco: unref short failure
[h264 @ 0x55934d93c700] mmco: unref short failure
 48%|████▊     | 704/1455 [7:34:30<10:01:06, 48.03s/it][h264 @ 0x55a036a17100] mmco: unref short failure
[h264 @ 0x55a036a17100] mmco: unref short failure
 48%|████▊     | 705/1455 [7:34:40<7:37:02, 36.56s/it] [h264 @ 0x5593570db900] mmco: unref short failure
[h264 @ 0x55d4daa85240] mmco: unref short failure
[h264 @ 0x55d4daa85240] mmco: unref short failure
[h264 @ 0x55a01ec6f640] mmco: unref short failure
 49%|████▊     | 706/1455 [7:34:49<5:55:52, 28.51s/it][h264 @ 0x555fedaec480] mmco: unref short failure
 49%|████▊     | 707/1455 [7:34:58<4:42:07, 22.63s/it][h264 @ 0x55d4e2bbfc80] mmco: unref short failure
[h264 @ 0x55d4e2bbfc80] mmco: unref short failure
[h264 @ 0x55d4e2bbfc80] mmco: unref short failure
[h264 @ 0x55d4e2bbfc80] mmco: unref short failure
09/17/2024 07:15:28 - INFO - __main__ -   current idx 6D_ahpoF_r4.148 from finetune_area returns wrong image/video, use 104192 instead.
 49%|████▊     | 708/1455 [7:35:07<3:50:26, 18.51s/it][h264 @ 0x55a026c69dc0] mmco: unref short failure
[h264 @ 0x55a026c69dc0] mmco: unref short failure
[h264 @ 0x55a019fd27c0] mmco: unref short failure
[h264 @ 0x55a019fd27c0] mmco: unref short failure
 49%|████▊     | 709/1455 [7:35:17<3:17:08, 15.86s/it][h264 @ 0x55a029da8f00] mmco: unref short failure
[h264 @ 0x555ff7d1b8c0] mmco: unref short failure
 49%|████▉     | 710/1455 [7:35:26<2:52:37, 13.90s/it] 49%|████▉     | 711/1455 [7:35:35<2:32:03, 12.26s/it][h264 @ 0x55933513ecc0] mmco: unref short failure
 49%|████▉     | 712/1455 [7:35:43<2:19:15, 11.25s/it][h264 @ 0x559360725c80] mmco: unref short failure
[h264 @ 0x55a036a16cc0] mmco: unref short failure
[h264 @ 0x55a036a16cc0] mmco: unref short failure
 49%|████▉     | 713/1455 [7:35:53<2:13:48, 10.82s/it]09/17/2024 07:16:15 - INFO - __main__ -   current idx 9pLQwa6SyZc.17 from finetune_area returns wrong image/video, use 27289 instead.
[h264 @ 0x555fed5e6980] mmco: unref short failure
[h264 @ 0x555fed5e6980] mmco: unref short failure
[h264 @ 0x55934ec21980] mmco: unref short failure
[h264 @ 0x55934ec21980] mmco: unref short failure
09/17/2024 07:16:31 - INFO - __main__ -   current idx 7rNZakrnk74.48 from finetune_area returns wrong image/video, use 42198 instead.
[h264 @ 0x55935bdf6b00] mmco: unref short failure
[h264 @ 0x55935bdf6b00] mmco: unref short failure
09/17/2024 07:16:37 - INFO - __main__ -   current idx 2xMe1diCHmI.53 from finetune_area returns wrong image/video, use 100778 instead.
[h264 @ 0x55934eaf99c0] mmco: unref short failure
[h264 @ 0x555ff6f51780] mmco: unref short failure
[h264 @ 0x555ff6f51780] mmco: unref short failure
[h264 @ 0x55d4d9700700] mmco: unref short failure
[h264 @ 0x555ff41aff00] mmco: unref short failure
[h264 @ 0x55a0354f92c0] mmco: unref short failure
[h264 @ 0x55d4df99d300] mmco: unref short failure
[h264 @ 0x55d4df99d300] mmco: unref short failure
[h264 @ 0x5593570db900] mmco: unref short failure
[h264 @ 0x55d4bd8a8a00] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x559368556780] mmco: unref short failure
 49%|████▉     | 714/1455 [7:37:27<7:19:25, 35.58s/it]09/17/2024 07:17:49 - INFO - __main__ -   current idx 3xMq89jLDYE.29 from finetune_area returns wrong image/video, use 68711 instead.
[h264 @ 0x55a0471e1300] mmco: unref short failure
 49%|████▉     | 715/1455 [7:37:35<5:39:51, 27.56s/it]09/17/2024 07:18:00 - INFO - __main__ -   current idx 5rnI-j8aqCQ.17 from finetune_area returns wrong image/video, use 143349 instead.
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x55a012534e40] mmco: unref short failure
[h264 @ 0x555fef372700] mmco: unref short failure
[h264 @ 0x55d4c1cf2940] mmco: unref short failure
[h264 @ 0x555fe463be80] mmco: unref short failure
[h264 @ 0x55a0377d0540] mmco: unref short failure
[h264 @ 0x555fe6eab640] mmco: unref short failure
[h264 @ 0x555fe6eab640] mmco: unref short failure
[h264 @ 0x55a04ff66180] mmco: unref short failure
[h264 @ 0x5593607c6fc0] mmco: unref short failure
[h264 @ 0x559335545d40] mmco: unref short failure
[h264 @ 0x55d4d2896d40] mmco: unref short failure
[h264 @ 0x55d4d2896d40] mmco: unref short failure
[h264 @ 0x55d4d2896d40] mmco: unref short failure
[h264 @ 0x55d4d2896d40] mmco: unref short failure
[h264 @ 0x55d4e497b640] mmco: unref short failure
not have audios ua_Kowav7hg.20
 49%|████▉     | 716/1455 [7:38:51<8:36:23, 41.93s/it][h264 @ 0x55d4e5ad1900] mmco: unref short failure
[h264 @ 0x55d4e5ad1900] mmco: unref short failure
09/17/2024 07:19:20 - INFO - __main__ -   current idx BPR07crK0oA.66 from finetune_area returns wrong image/video, use 51929 instead.
[h264 @ 0x55d4c87f1940] mmco: unref short failure
[h264 @ 0x55d4cfc1f5c0] mmco: unref short failure
[h264 @ 0x55d4cfc1f5c0] mmco: unref short failure
[h264 @ 0x55934baa47c0] mmco: unref short failure
[h264 @ 0x55934baa47c0] mmco: unref short failure
 49%|████▉     | 717/1455 [7:39:18<7:40:51, 37.47s/it][h264 @ 0x55d4d09b7c40] mmco: unref short failure
[h264 @ 0x55d4d09b7c40] mmco: unref short failure
[h264 @ 0x5593421cc240] mmco: unref short failure
[h264 @ 0x55d4cec20080] mmco: unref short failure
[h264 @ 0x55d4cec20080] mmco: unref short failure
 49%|████▉     | 718/1455 [7:39:33<6:18:43, 30.83s/it][h264 @ 0x5593382fd080] mmco: unref short failure
[h264 @ 0x5593382fd080] mmco: unref short failure
[h264 @ 0x55933c3ce780] mmco: unref short failure
[h264 @ 0x55933c3ce780] mmco: unref short failure
[h264 @ 0x55933c3ce780] mmco: unref short failure
 49%|████▉     | 719/1455 [7:39:42<4:58:08, 24.31s/it] 49%|████▉     | 720/1455 [7:39:51<4:01:41, 19.73s/it][h264 @ 0x5593330b2100] mmco: unref short failure
[h264 @ 0x5593330b2100] mmco: unref short failure
 50%|████▉     | 721/1455 [7:40:00<3:20:13, 16.37s/it][h264 @ 0x55d4cb0dd780] mmco: unref short failure
[h264 @ 0x55d4d0d7f3c0] mmco: unref short failure
[h264 @ 0x55d4d0d7f3c0] mmco: unref short failure
[h264 @ 0x55934fb0d040] mmco: unref short failure
[h264 @ 0x55934fb0d040] mmco: unref short failure
09/17/2024 07:20:37 - INFO - __main__ -   current idx VNq_KDwhBKQ.15 from finetune_area returns wrong image/video, use 6936 instead.
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x55933e190540] mmco: unref short failure
[h264 @ 0x555fe165ff00] mmco: unref short failure
[h264 @ 0x555fe165ff00] mmco: unref short failure
[h264 @ 0x555fee681140] mmco: unref short failure
09/17/2024 07:20:53 - INFO - __main__ -   current idx COB-O5fAcEY.0 from finetune_area returns wrong image/video, use 147140 instead.
[h264 @ 0x55a03addbdc0] mmco: unref short failure
[h264 @ 0x555fe0e91600] mmco: unref short failure
[h264 @ 0x555fe0e91600] mmco: unref short failure
[h264 @ 0x559360c44c00] mmco: unref short failure
[h264 @ 0x55a0400f2f40] mmco: unref short failure
[h264 @ 0x55a0400f2f40] mmco: unref short failure
[h264 @ 0x55a043b57440] mmco: unref short failure
[h264 @ 0x55a043b57440] mmco: unref short failure
[h264 @ 0x556007172100] mmco: unref short failure
[h264 @ 0x556007172100] mmco: unref short failure
[h264 @ 0x55602765cc00] mmco: unref short failure
[h264 @ 0x559336404c40] mmco: unref short failure
[h264 @ 0x559336404c40] mmco: unref short failure
[h264 @ 0x55a00f019e80] mmco: unref short failure
[h264 @ 0x55a00f019e80] mmco: unref short failure
[h264 @ 0x55a00f019e80] mmco: unref short failure
[h264 @ 0x55a00f019e80] mmco: unref short failure
[h264 @ 0x55a01f40aa80] mmco: unref short failure
[h264 @ 0x55933e18d880] mmco: unref short failure
[h264 @ 0x55a0104b4e00] mmco: unref short failure
[h264 @ 0x55d4c4528b80] mmco: unref short failure
[h264 @ 0x55d4c4528b80] mmco: unref short failure
[h264 @ 0x55a014f9e8c0] mmco: unref short failure
[h264 @ 0x55d4e8124cc0] mmco: unref short failure
[h264 @ 0x5593330b2100] mmco: unref short failure
[h264 @ 0x5593330b2100] mmco: unref short failure
[h264 @ 0x55a030e5e580] mmco: unref short failure
[h264 @ 0x55a030e5e580] mmco: unref short failure
[h264 @ 0x55933ec0a180] mmco: unref short failure
[h264 @ 0x555fdce55d40] mmco: unref short failure
[h264 @ 0x555fdce55f40] mmco: unref short failure
[h264 @ 0x555fdce55f40] mmco: unref short failure
[h264 @ 0x55d4e1675080] mmco: unref short failure
[h264 @ 0x55d4e1675080] mmco: unref short failure
[h264 @ 0x55a021482ec0] mmco: unref short failure
[h264 @ 0x55a021482ec0] mmco: unref short failure
09/17/2024 07:22:37 - INFO - __main__ -   current idx WplYsFZXXk0.6 from finetune_area returns wrong image/video, use 139312 instead.
09/17/2024 07:22:41 - INFO - __main__ -   current idx 98mW2i9a2kU.41 from finetune_area returns wrong image/video, use 98708 instead.
 50%|████▉     | 722/1455 [7:42:21<10:56:54, 53.77s/it][h264 @ 0x55d4b72b64c0] mmco: unref short failure
[h264 @ 0x55d4b72b64c0] mmco: unref short failure
 50%|████▉     | 723/1455 [7:42:30<8:11:13, 40.26s/it] [h264 @ 0x55934cdb30c0] mmco: unref short failure
[h264 @ 0x55934cdb30c0] mmco: unref short failure
[h264 @ 0x559349f12c00] mmco: unref short failure
[h264 @ 0x55a030e5e9c0] mmco: unref short failure
[h264 @ 0x55a026893700] mmco: unref short failure
[h264 @ 0x55a026893700] mmco: unref short failure
[h264 @ 0x55933544d940] mmco: unref short failure
[h264 @ 0x55933544d940] mmco: unref short failure
[h264 @ 0x55d4caec2740] mmco: unref short failure
[h264 @ 0x55d4e2c4d4c0] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x55935bdf6d80] mmco: unref short failure
[h264 @ 0x559340a782c0] mmco: unref short failure
[h264 @ 0x559340a782c0] mmco: unref short failure
[h264 @ 0x55a00ef01f40] mmco: unref short failure
[h264 @ 0x55d4dd4438c0] mmco: unref short failure
[h264 @ 0x55d4dd4438c0] mmco: unref short failure
[h264 @ 0x55d4cbddb900] mmco: unref short failure
[h264 @ 0x55d4cbddb900] mmco: unref short failure
[h264 @ 0x55933e47f400] mmco: unref short failure
[h264 @ 0x5593375e95c0] mmco: unref short failure
[h264 @ 0x55a05c19adc0] mmco: unref short failure
[h264 @ 0x55a05c19adc0] mmco: unref short failure
 50%|████▉     | 724/1455 [7:43:49<10:34:27, 52.08s/it][h264 @ 0x555ffabf8400] mmco: unref short failure
[h264 @ 0x555ffabf8400] mmco: unref short failure
[h264 @ 0x555ffabf8400] mmco: unref short failure
[h264 @ 0x559364e8d180] mmco: unref short failure
[h264 @ 0x559364e8d180] mmco: unref short failure
09/17/2024 07:24:17 - INFO - __main__ -   current idx 0BgzFFln3QI.33 from finetune_area returns wrong image/video, use 74328 instead.
[h264 @ 0x556001ecad80] mmco: unref short failure
[h264 @ 0x556001ecad80] mmco: unref short failure
[h264 @ 0x556001ecad80] mmco: unref short failure
[h264 @ 0x556001ecad80] mmco: unref short failure
[h264 @ 0x55d4b6e67840] mmco: unref short failure
 50%|████▉     | 725/1455 [7:44:24<9:28:20, 46.71s/it] [h264 @ 0x55a0298b8840] mmco: unref short failure
[h264 @ 0x555fda1831c0] mmco: unref short failure
[h264 @ 0x555fda1831c0] mmco: unref short failure
 50%|████▉     | 726/1455 [7:44:33<7:12:12, 35.57s/it][h264 @ 0x555fee302300] mmco: unref short failure
[h264 @ 0x5593618c9f40] mmco: unref short failure
[h264 @ 0x5593618c9f40] mmco: unref short failure
 50%|████▉     | 727/1455 [7:44:42<5:34:22, 27.56s/it] 50%|█████     | 728/1455 [7:44:56<4:43:43, 23.42s/it][h264 @ 0x55600c4c0000] mmco: unref short failure
[h264 @ 0x55600c4c0000] mmco: unref short failure
 50%|█████     | 729/1455 [7:45:04<3:48:07, 18.85s/it][h264 @ 0x55d4d6459140] mmco: unref short failure
[h264 @ 0x55d4d6459140] mmco: unref short failure
[h264 @ 0x555fddc9b1c0] mmco: unref short failure
[h264 @ 0x555fddc9b1c0] mmco: unref short failure
[h264 @ 0x5560034a1740] mmco: unref short failure
[h264 @ 0x55d4c6603d00] mmco: unref short failure
[h264 @ 0x55d4c6603d00] mmco: unref short failure
[h264 @ 0x55d4ecd69580] mmco: unref short failure
[h264 @ 0x55d4ecd69580] mmco: unref short failure
[h264 @ 0x55935e047180] mmco: unref short failure
[h264 @ 0x55935e047180] mmco: unref short failure
[h264 @ 0x5593592994c0] mmco: unref short failure
[h264 @ 0x5593592994c0] mmco: unref short failure
[h264 @ 0x55d4e6e49b00] mmco: unref short failure
[h264 @ 0x55d4e6e49b00] mmco: unref short failure
[h264 @ 0x555fedb9b700] mmco: unref short failure
[h264 @ 0x555fedb9b700] mmco: unref short failure
[h264 @ 0x55a016e3ad00] mmco: unref short failure
[h264 @ 0x55a016e3ad00] mmco: unref short failure
[h264 @ 0x559334366400] mmco: unref short failure
[h264 @ 0x559334366400] mmco: unref short failure
[h264 @ 0x55d4e994f1c0] mmco: unref short failure
[h264 @ 0x55d4e994f1c0] mmco: unref short failure
[h264 @ 0x555fec78be40] mmco: unref short failure
[h264 @ 0x555fec78be40] mmco: unref short failure
[h264 @ 0x559336c97300] mmco: unref short failure
[h264 @ 0x559336c97300] mmco: unref short failure
[h264 @ 0x55933ef89600] mmco: unref short failure
[h264 @ 0x55933ef89600] mmco: unref short failure
[h264 @ 0x555fedbc2640] mmco: unref short failure
[h264 @ 0x5593504cf4c0] mmco: unref short failure
[h264 @ 0x55a04fdb3b00] mmco: unref short failure
[h264 @ 0x55a04fdb3b00] mmco: unref short failure
[h264 @ 0x55a04fdb3b00] mmco: unref short failure
[h264 @ 0x55a04fdb3b00] mmco: unref short failure
[h264 @ 0x55934735b4c0] mmco: unref short failure
[h264 @ 0x55934735b4c0] mmco: unref short failure
[h264 @ 0x55934735b4c0] mmco: unref short failure
[h264 @ 0x55934735b4c0] mmco: unref short failure
[h264 @ 0x55a0435cc080] mmco: unref short failure
[h264 @ 0x55d4da33e900] mmco: unref short failure
[h264 @ 0x55d4da33e900] mmco: unref short failure
[h264 @ 0x55d4da33e900] mmco: unref short failure
[h264 @ 0x55d4da33e900] mmco: unref short failure
[h264 @ 0x55d4ead18040] mmco: unref short failure
[h264 @ 0x55d4ead18040] mmco: unref short failure
[h264 @ 0x55a015e6e4c0] mmco: unref short failure
[h264 @ 0x55a015e6e4c0] mmco: unref short failure
09/17/2024 07:27:31 - INFO - __main__ -   current idx cXoOWKkZ_K0.13 from finetune_area returns wrong image/video, use 89828 instead.
[h264 @ 0x559367845280] mmco: unref short failure
[h264 @ 0x55a016538240] mmco: unref short failure
[h264 @ 0x559336757280] mmco: unref short failure
[h264 @ 0x559336757280] mmco: unref short failure
[h264 @ 0x559336757280] mmco: unref short failure
[h264 @ 0x559336757280] mmco: unref short failure
 50%|█████     | 730/1455 [7:47:24<11:07:25, 55.23s/it][h264 @ 0x556026aa8700] mmco: unref short failure
[h264 @ 0x556026aa8700] mmco: unref short failure
 50%|█████     | 731/1455 [7:47:33<8:18:09, 41.28s/it] 09/17/2024 07:27:57 - INFO - __main__ -   current idx 8W9D8fiNodQ.9 from finetune_area returns wrong image/video, use 79611 instead.
[h264 @ 0x559356e81f40] mmco: unref short failure
[h264 @ 0x559346f0a5c0] mmco: unref short failure
09/17/2024 07:28:26 - INFO - __main__ -   current idx 4ZmeUj7cFu4.36 from finetune_area returns wrong image/video, use 15295 instead.
[h264 @ 0x55a05d097b00] mmco: unref short failure
[h264 @ 0x55d4e1a07140] mmco: unref short failure
[h264 @ 0x55d4e1a07140] mmco: unref short failure
[h264 @ 0x55a03465b3c0] mmco: unref short failure
[h264 @ 0x55a03465b3c0] mmco: unref short failure
[h264 @ 0x55d4c218bd80] mmco: unref short failure
[h264 @ 0x55d4c218bd80] mmco: unref short failure
[h264 @ 0x55a0538f0180] mmco: unref short failure
[h264 @ 0x55a0538f0180] mmco: unref short failure
[h264 @ 0x559336050a80] mmco: unref short failure
[h264 @ 0x55a033931140] mmco: unref short failure
[h264 @ 0x559364fbf000] mmco: unref short failure
[h264 @ 0x555fde7ba900] mmco: unref short failure
[h264 @ 0x555fde7ba900] mmco: unref short failure
 50%|█████     | 732/1455 [7:48:47<10:15:30, 51.08s/it][h264 @ 0x55a043f3fc00] mmco: unref short failure
[h264 @ 0x55a043f3fc00] mmco: unref short failure
[h264 @ 0x55a0353a0ac0] mmco: unref short failure
[h264 @ 0x55a0353a0ac0] mmco: unref short failure
[h264 @ 0x55a0353a0ac0] mmco: unref short failure
[h264 @ 0x55d4c2dc3ac0] mmco: unref short failure
[h264 @ 0x55d4c2dc3ac0] mmco: unref short failure
[h264 @ 0x55d4db7d8c00] mmco: unref short failure
[h264 @ 0x55a05d538480] mmco: unref short failure
[h264 @ 0x55d4da4f7700] mmco: unref short failure
[h264 @ 0x55d4da4f7700] mmco: unref short failure
[h264 @ 0x555fea29cf00] mmco: unref short failure
[h264 @ 0x555fea29cf00] mmco: unref short failure
[h264 @ 0x55d4e405dfc0] mmco: unref short failure
[h264 @ 0x55d4e405dfc0] mmco: unref short failure
[h264 @ 0x5593543e62c0] mmco: unref short failure
 50%|█████     | 733/1455 [7:49:28<9:40:29, 48.24s/it] [h264 @ 0x55d4d07cc4c0] mmco: unref short failure
 50%|█████     | 734/1455 [7:49:37<7:15:03, 36.20s/it][h264 @ 0x55a00e60f9c0] mmco: unref short failure
[h264 @ 0x55a00e60f9c0] mmco: unref short failure
 51%|█████     | 735/1455 [7:49:45<5:35:36, 27.97s/it][h264 @ 0x55a00f9d4c80] mmco: unref short failure
[h264 @ 0x55a00f9d4c80] mmco: unref short failure
[h264 @ 0x55d4c2dc3ac0] mmco: unref short failure
[h264 @ 0x55d4c2dc3ac0] mmco: unref short failure
[h264 @ 0x55a0355e2180] mmco: unref short failure
[h264 @ 0x55a0355e2180] mmco: unref short failure
[h264 @ 0x55a0355e2180] mmco: unref short failure
[h264 @ 0x55a0355e2180] mmco: unref short failure
 51%|█████     | 736/1455 [7:49:55<4:28:09, 22.38s/it][h264 @ 0x55a033840d40] mmco: unref short failure
[h264 @ 0x55a033840d40] mmco: unref short failure
[h264 @ 0x55a033840d40] mmco: unref short failure
[h264 @ 0x55a033840d40] mmco: unref short failure
[h264 @ 0x5560090ab440] mmco: unref short failure
[h264 @ 0x555ff93556c0] mmco: unref short failure
[h264 @ 0x55a0197cf5c0] mmco: unref short failure
[h264 @ 0x55a0197cf5c0] mmco: unref short failure
[h264 @ 0x55a0197cf5c0] mmco: unref short failure
[h264 @ 0x55a0197cf5c0] mmco: unref short failure
[h264 @ 0x55d4d601b0c0] mmco: unref short failure
[h264 @ 0x5593335e6840] mmco: unref short failure
[h264 @ 0x5593335e6840] mmco: unref short failure
 51%|█████     | 737/1455 [7:50:03<3:37:52, 18.21s/it][h264 @ 0x55a016025000] mmco: unref short failure
[h264 @ 0x55a029a1bd40] mmco: unref short failure
[h264 @ 0x55a029a1bd40] mmco: unref short failure
[h264 @ 0x555feeee5bc0] mmco: unref short failure
[h264 @ 0x55a034575000] mmco: unref short failure
[h264 @ 0x556008177400] mmco: unref short failure
[h264 @ 0x556002c43f00] mmco: unref short failure
[h264 @ 0x556002c43f00] mmco: unref short failure
[h264 @ 0x555fec1233c0] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559360725e80] mmco: unref short failure
[h264 @ 0x559345e20800] mmco: unref short failure
[h264 @ 0x559345e20800] mmco: unref short failure
[h264 @ 0x555fdc1942c0] mmco: unref short failure
[h264 @ 0x555fdc1942c0] mmco: unref short failure
09/17/2024 07:31:12 - INFO - __main__ -   current idx etzSHiVFPL8.12 from finetune_area returns wrong image/video, use 39728 instead.
[h264 @ 0x55d4e658fd80] mmco: unref short failure
[h264 @ 0x55d4e658fd80] mmco: unref short failure
[h264 @ 0x55936b4d8140] mmco: unref short failure
[h264 @ 0x55a021393c80] mmco: unref short failure
[h264 @ 0x55a021393c80] mmco: unref short failure
[h264 @ 0x55a0542da540] mmco: unref short failure
[h264 @ 0x55a0542da540] mmco: unref short failure
[h264 @ 0x55936564f500] mmco: unref short failure
[h264 @ 0x55d4bb2ff2c0] mmco: unref short failure
[h264 @ 0x55d4bb2ff2c0] mmco: unref short failure
[h264 @ 0x55600270a1c0] mmco: unref short failure
[h264 @ 0x55d4c3e58e40] mmco: unref short failure
[h264 @ 0x55d4c3e58e40] mmco: unref short failure
[h264 @ 0x55d4b8fcd600] mmco: unref short failure
[h264 @ 0x55a01696af40] mmco: unref short failure
[h264 @ 0x55a01696af40] mmco: unref short failure
09/17/2024 07:32:28 - INFO - __main__ -   current idx j2qj01KI9hk.13 from finetune_area returns wrong image/video, use 33327 instead.
[h264 @ 0x55a037145040] mmco: unref short failure
[h264 @ 0x55a037145040] mmco: unref short failure
[h264 @ 0x55d4c2dc3cc0] mmco: unref short failure
[h264 @ 0x55d4c2dc3cc0] mmco: unref short failure
 51%|█████     | 738/1455 [7:52:22<10:51:38, 54.53s/it][h264 @ 0x559338225cc0] mmco: unref short failure
[h264 @ 0x559338225cc0] mmco: unref short failure
[h264 @ 0x559338225cc0] mmco: unref short failure
[h264 @ 0x559338225cc0] mmco: unref short failure
[h264 @ 0x55d4bcb8b8c0] mmco: unref short failure
[h264 @ 0x55d4bcb8b8c0] mmco: unref short failure
 51%|█████     | 739/1455 [7:52:32<8:09:52, 41.05s/it] [h264 @ 0x55d4c744c140] mmco: unref short failure
[h264 @ 0x55d4c744c140] mmco: unref short failure
[h264 @ 0x55a026cfd100] mmco: unref short failure
[h264 @ 0x55a026cfd100] mmco: unref short failure
[h264 @ 0x555fd9af0cc0] mmco: unref short failure
[h264 @ 0x555fd9af0cc0] mmco: unref short failure
[h264 @ 0x559344af08c0] mmco: unref short failure
[h264 @ 0x559344af08c0] mmco: unref short failure
[h264 @ 0x55d4df13eb80] mmco: unref short failure
[h264 @ 0x55934ed66940] mmco: unref short failure
[h264 @ 0x55934ed66940] mmco: unref short failure
[h264 @ 0x559350b83480] mmco: unref short failure
[h264 @ 0x559350b83480] mmco: unref short failure
[h264 @ 0x55a04ff60600] mmco: unref short failure
[h264 @ 0x555fdc486380] mmco: unref short failure
[h264 @ 0x555fdc486380] mmco: unref short failure
[h264 @ 0x55a0277c3dc0] mmco: unref short failure
[h264 @ 0x55a0277c3dc0] mmco: unref short failure
[h264 @ 0x55a0277c3dc0] mmco: unref short failure
[h264 @ 0x55a0277c3dc0] mmco: unref short failure
[h264 @ 0x555ffed9e840] mmco: unref short failure
[h264 @ 0x555ffed9e840] mmco: unref short failure
[h264 @ 0x556020c36f00] mmco: unref short failure
[h264 @ 0x556020c36f00] mmco: unref short failure
[h264 @ 0x555fda252ac0] mmco: unref short failure
[h264 @ 0x555fda252ac0] mmco: unref short failure
[h264 @ 0x55935018eec0] mmco: unref short failure
[h264 @ 0x555fdd713c40] mmco: unref short failure
[h264 @ 0x555ff77277c0] mmco: unref short failure
[h264 @ 0x555ff77277c0] mmco: unref short failure
[h264 @ 0x555ff77277c0] mmco: unref short failure
[h264 @ 0x555ff77277c0] mmco: unref short failure
[h264 @ 0x559350188240] mmco: unref short failure
[h264 @ 0x55a0342082c0] mmco: unref short failure
[h264 @ 0x55a0342082c0] mmco: unref short failure
[h264 @ 0x55d4c4a6f500] mmco: unref short failure
[h264 @ 0x555fda3eb2c0] mmco: unref short failure
[h264 @ 0x555fda3eb2c0] mmco: unref short failure
[h264 @ 0x55a02024fa40] mmco: unref short failure
[h264 @ 0x55a02024fa40] mmco: unref short failure
[h264 @ 0x559333d39940] mmco: unref short failure
[h264 @ 0x55d4c8027840] mmco: unref short failure
09/17/2024 07:34:10 - INFO - __main__ -   current idx LinP-eK5Rvc.47 from finetune_area returns wrong image/video, use 136755 instead.
[h264 @ 0x55d4bd41af40] mmco: unref short failure
[h264 @ 0x55a0297f6100] mmco: unref short failure
[h264 @ 0x55a0297f6100] mmco: unref short failure
 51%|█████     | 740/1455 [7:54:04<11:11:44, 56.37s/it][h264 @ 0x55d4e9e94c00] mmco: unref short failure
[h264 @ 0x55d4b6bc8080] mmco: unref short failure
[h264 @ 0x55d4b6bc8080] mmco: unref short failure
[h264 @ 0x555ff8980ec0] mmco: unref short failure
[h264 @ 0x555ff8980ec0] mmco: unref short failure
09/17/2024 07:34:54 - INFO - __main__ -   current idx MmDkvBFAU-o.42 from finetune_area returns wrong image/video, use 40264 instead.
[h264 @ 0x55a01ec6f200] mmco: unref short failure
[h264 @ 0x55a01ec6f200] mmco: unref short failure
 51%|█████     | 741/1455 [7:54:36<9:44:23, 49.11s/it]  51%|█████     | 742/1455 [7:54:45<7:18:35, 36.91s/it][h264 @ 0x55d4d362a1c0] mmco: unref short failure
[h264 @ 0x55d4d362a1c0] mmco: unref short failure
[h264 @ 0x555fe4f54840] mmco: unref short failure
[h264 @ 0x555fdb4ba9c0] mmco: unref short failure
[h264 @ 0x555fdb4ba9c0] mmco: unref short failure
 51%|█████     | 743/1455 [7:54:54<5:38:17, 28.51s/it][h264 @ 0x55d4d07e1cc0] mmco: unref short failure
[h264 @ 0x55d4d07e1cc0] mmco: unref short failure
[h264 @ 0x55934334ee40] mmco: unref short failure
 51%|█████     | 744/1455 [7:55:08<4:46:08, 24.15s/it][h264 @ 0x556005dc2580] mmco: unref short failure
[h264 @ 0x556005dc2580] mmco: unref short failure
[h264 @ 0x556005dc2580] mmco: unref short failure
[h264 @ 0x556005dc2580] mmco: unref short failure
[h264 @ 0x55a05d538480] mmco: unref short failure
[h264 @ 0x55a05d538480] mmco: unref short failure
 51%|█████     | 745/1455 [7:55:17<3:52:34, 19.65s/it][h264 @ 0x556022985b40] mmco: unref short failure
[h264 @ 0x556022985b40] mmco: unref short failure
[h264 @ 0x5593504cf980] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
[h264 @ 0x55a037dba880] mmco: unref short failure
09/17/2024 07:36:03 - INFO - __main__ -   current idx EMPLLx_tfq8.250 from finetune_area returns wrong image/video, use 92716 instead.
[h264 @ 0x55d4bc6fea40] mmco: unref short failure
[h264 @ 0x55d4bc6fea40] mmco: unref short failure
[h264 @ 0x555fde0097c0] mmco: unref short failure
[h264 @ 0x555fde0097c0] mmco: unref short failure
[h264 @ 0x5593569b9800] mmco: unref short failure
[h264 @ 0x559333d39940] mmco: unref short failure
[h264 @ 0x55a01d05b7c0] mmco: unref short failure
[h264 @ 0x55a01d05b7c0] mmco: unref short failure
[h264 @ 0x55a00f2d8c00] mmco: unref short failure
[h264 @ 0x55a00f2d8c00] mmco: unref short failure
[h264 @ 0x55a00f2d8c00] mmco: unref short failure
[h264 @ 0x55a00f2d8c00] mmco: unref short failure
[h264 @ 0x55a0104a1900] mmco: unref short failure
[h264 @ 0x55a0104a1900] mmco: unref short failure
[h264 @ 0x55a0104a1900] mmco: unref short failure
[h264 @ 0x55a0104a1900] mmco: unref short failure
[h264 @ 0x555fde1fb800] mmco: unref short failure
[h264 @ 0x555fde1fb800] mmco: unref short failure
[h264 @ 0x555fde1fb800] mmco: unref short failure
[h264 @ 0x555fde1fb800] mmco: unref short failure
[h264 @ 0x55d4c34cba40] mmco: unref short failure
[h264 @ 0x5593550814c0] mmco: unref short failure
[h264 @ 0x5593550814c0] mmco: unref short failure
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
slurmstepd: error: *** STEP 7731927.0 ON lrdn3124 CANCELLED AT 2024-09-17T07:37:44 ***
slurmstepd: error: *** JOB 7731927 ON lrdn3124 CANCELLED AT 2024-09-17T07:37:44 ***
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 849035 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 849036 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 849037 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 849038 closing signal SIGTERM
