NODELIST=lrdn3182
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/distributed/launch.py:181: FutureWarning: The module torch.distributed.launch is deprecated
and will be removed in future. Use torchrun.
Note that --use-env is set by default in torchrun.
If your script expects `--local-rank` argument to be set, please
change it to read from `os.environ['LOCAL_RANK']` instead. See 
https://pytorch.org/docs/stable/distributed.html#launch-utility for 
further instructions

  warnings.warn(
WARNING:torch.distributed.run:
*****************************************
Setting OMP_NUM_THREADS environment variable for each process to be 1 in default, to avoid your system being overloaded, please further tune the variable for optimal performance in your application as needed. 
*****************************************
2
013


DEVICE SET
DEVICE SET
DEVICE SET
DEVICE SET
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 3
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 0
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 1
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Added key: store_based_barrier_key:1 to store for rank: 2
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Rank 3: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Rank 0: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Rank 2: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:46:19 - INFO - torch.distributed.distributed_c10d -   Rank 1: Completed store-based barrier for key:store_based_barrier_key:1 with 4 nodes.
09/16/2024 23:46:19 - INFO - __main__ -   ==================model_configs==================

09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_model_type : vast
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_itm_ratio : 0.1
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_frozen_vision : False
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_frozen_audio : False
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_checkpointing : True
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_max_caption_len : 40
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_max_omni_caption_len : 70
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_max_subtitle_len : 70
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_contra_dim : 512
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_inherit_keys : ['vision_encoder_type', 'audio_encoder_type', 'audio_melbins', 'audio_target_length']
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_frame_embedding_type : adaptive
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_vision_resolution : 224
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_vision_encoder_type : evaclip01_giant
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_audio_encoder_type : beats
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_audio_melbins : 64
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_audio_target_length : 1024
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_beam_size : 3
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_captioner_mode : False
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_generate_nums : 1
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_ret_bidirection_evaluation : False
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_itm_rerank_num : 50
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_evaluation_type : evaluation_mm
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_default : ./config/vast/default_model_cfg.json
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_max_vision_sample_num : 2
09/16/2024 23:46:19 - INFO - __main__ -   model_cfg_max_audio_sample_num : 1
09/16/2024 23:46:19 - INFO - __main__ -   ==================run_configs==================

09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_checkpoint : 
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_output_dir : ./output/vast/pretrain_vast/downstream/finetuneVolume256batchlossonlyvolume4Mod150kProvaCaption
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_gradient_accumulation_steps : 1
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_clip_lr : 5e-07
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_optim : adamw
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_learning_rate : 2e-05
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_betas : [0.9, 0.98]
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_weight_decay : 0.01
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_grad_norm : 2.0
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_warmup_ratio : 0.1
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_resume : False
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_seed : 50
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_fp16 : True
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_bf16 : False
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_zero_shot : False
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_scheduler : warmup_linear
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_new_lr : 0
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_new_params_name : []
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_valid_freq : 10
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_dataset_mix_type : random
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_remove_before_ckpt : True
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_first_eval : True
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_pretrain_dir : ./output/vast/pretrain_vast
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_num_train_steps : 0
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_save_best : True
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_pin_mem : True
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_vision_resolution : 224
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_use_ddp : False
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_mode : training
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_log_steps : 100
09/16/2024 23:46:19 - INFO - __main__ -   run_cfg_default : ./config/vast/default_run_cfg.json
09/16/2024 23:46:19 - INFO - __main__ -   ==================data_configs==================

09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_type : annoindexed
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_training : True
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_name : finetune_area
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_txt : ../vast27m/annotations150k.json
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_vision : ../vast27m/videos/
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_audio : ../vast27m/audios
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_vision_transforms : crop_flip
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_vision_format : video_rawvideo
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_vision_sample_num : 2
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_audio_sample_num : 1
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_task : ret%tv%ta_cap%tvas
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_epoch : 5
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_n_workers : 8
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_finetune_area_train_batch_size : 256
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_type : annoindexed
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_training : False
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_name : msrvtt_ret
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_txt : datasets/annotations/msrvtt/descs_ret_test.json
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision : ../MSRVTT/video_test
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_transforms : crop_flip
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_format : video_rawvideo
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio : ../MSRVTT/audio_test
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_vision_sample_num : 8
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_audio_sample_num : 1
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_task : ret%tva
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_n_workers : 8
09/16/2024 23:46:19 - INFO - __main__ -   data_cfg_msrvtt_ret_val_batch_size : 64
wandb: Tracking run with wandb version 0.17.8
wandb: W&B syncing is set to `offline` in this directory.  
wandb: Run `wandb online` or set WANDB_MODE=online to enable cloud syncing.
09/16/2024 23:46:23 - INFO - __main__ -   finetune_area Using clip mean and std.
09/16/2024 23:46:23 - INFO - __main__ -   finetune_area transforms crop_flip
ci sono 149153 labels
ci sono 149153 labels
ci sono 149153 labels
ci sono 149153 labels
09/16/2024 23:47:26 - INFO - __main__ -   Create Dataset finetune_area Success
09/16/2024 23:47:26 - INFO - __main__ -    loader ret%tv%ta_cap%tvas--finetune_area , ratio 2910 , bs_pergpu 64, n_workers 8
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/16/2024 23:47:30 - INFO - __main__ -   current idx Y6ZqQLFmpGU.39 from finetune_area returns wrong image/video, use 76870 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/16/2024 23:47:30 - INFO - __main__ -   msrvtt_ret Using clip mean and std.
09/16/2024 23:47:30 - INFO - __main__ -   msrvtt_ret transforms crop_flip
ci sono 884 labels
ci sono 884 labelsci sono 884 labels

09/16/2024 23:47:31 - INFO - __main__ -   Create Dataset msrvtt_ret Success
ci sono 884 labels
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
Please 'pip install xformers'Please 'pip install xformers'

Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
Please 'pip install xformers'
09/16/2024 23:47:32 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:47:32 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:47:32 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
09/16/2024 23:47:32 - INFO - root -   Loaded EVA01-CLIP-g-14 model config.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557669f32a00] mmco: unref short failure
[h264 @ 0x55857e7331c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55857e7331c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555616e07b80] mmco: unref short failure
[h264 @ 0x55857e8d7980] mmco: unref short failure
[h264 @ 0x5556172f1200] mmco: unref short failure
[h264 @ 0x5556172f1200] mmco: unref short failure
[h264 @ 0x5556172f1200] mmco: unref short failure
[h264 @ 0x5556172f1200] mmco: unref short failure
[h264 @ 0x55857e95bfc0] mmco: unref short failure
[h264 @ 0x56348d4a3780] mmco: unref short failure
[h264 @ 0x55857ea05800] mmco: unref short failure
09/16/2024 23:48:23 - INFO - __main__ -   current idx d018IFLZh_8.4 from finetune_area returns wrong image/video, use 17473 instead.
[h264 @ 0x55766a0348c0] mmco: unref short failure
[h264 @ 0x55766a0348c0] mmco: unref short failure
[h264 @ 0x56348d10bb00] mmco: unref short failure
09/16/2024 23:48:30 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:48:31 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
09/16/2024 23:48:31 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55857e6e2400] mmco: unref short failure
[h264 @ 0x55857e6e2400] mmco: unref short failure
09/16/2024 23:48:35 - INFO - root -   Loading pretrained EVA01-CLIP-g-14 weights (./pretrained_weights/clip/EVA01_CLIP_g_14_psz14_s11B.pt).
[h264 @ 0x55766aab3200] mmco: unref short failure
[h264 @ 0x55766aab3200] mmco: unref short failure
09/16/2024 23:48:39 - INFO - __main__ -   current idx GH7kTACMcMI.49 from finetune_area returns wrong image/video, use 13682 instead.
09/16/2024 23:48:43 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:48:43 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:48:43 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:48:45 - INFO - root -   incompatible_keys.missing_keys: []
09/16/2024 23:48:45 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:48:45 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:48:45 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:48:47 - INFO - model.audio_encoders.beats.beats -   BEATs Config: {'input_patch_size': 16, 'embed_dim': 512, 'conv_bias': False, 'encoder_layers': 12, 'encoder_embed_dim': 768, 'encoder_ffn_embed_dim': 3072, 'encoder_attention_heads': 12, 'activation_fn': 'gelu', 'layer_wise_gradient_decay_ratio': 1.0, 'layer_norm_first': False, 'deep_norm': True, 'dropout': 0.1, 'attention_dropout': 0.1, 'activation_dropout': 0.0, 'encoder_layerdrop': 0.05, 'dropout_input': 0.1, 'conv_pos': 128, 'conv_pos_groups': 16, 'relative_position_embedding': True, 'num_buckets': 320, 'max_distance': 800, 'gru_rel_pos': True, 'finetuned_model': False, 'predictor_dropout': 0.1, 'predictor_class': 527}
09/16/2024 23:48:55 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/16/2024 23:48:55 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
09/16/2024 23:48:55 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x55857e16bac0] mmco: unref short failure
[h264 @ 0x555616c93b40] mmco: unref short failure
[h264 @ 0x555616c93b40] mmco: unref short failure
09/16/2024 23:48:58 - WARNING - model.text_encoders.bert.bert -   If you want to use `BertForMaskedLM` make sure `config.is_decoder=False` for bi-directional self-attention.
[h264 @ 0x555616c93b40] mmco: unref short failure
[h264 @ 0x56348cfb4f80] mmco: unref short failure
[h264 @ 0x56348cfb4f80] mmco: unref short failure
[h264 @ 0x56348cfb4f80] mmco: unref short failure
[h264 @ 0x56348cfb4f80] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.7.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.query.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'cls.predictions.transform.dense.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.value.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.0.crossattention.self.value.weight', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.6.crossattention.output.dense.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.10.crossattention.output.dense.weight', 'cls.predictions.bias', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.weight']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'cls.predictions.transform.LayerNorm.weight', 'cls.predictions.transform.dense.weight', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.bias', 'cls.predictions.transform.dense.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.3.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.6.crossattention.self.query.bias', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.key.bias', 'cls.predictions.bias', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.value.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x563491c8e780] mmco: unref short failure
Some weights of BertForMaskedLM were not initialized from the model checkpoint at ./pretrained_weights/bert/bert-base-uncased and are newly initialized: ['encoder.layer.11.crossattention.self.value.weight', 'encoder.layer.10.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.query.bias', 'encoder.layer.2.crossattention.self.value.bias', 'encoder.layer.9.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.LayerNorm.weight', 'cls.predictions.bias', 'encoder.layer.8.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.value.bias', 'encoder.layer.5.crossattention.self.key.weight', 'encoder.layer.11.crossattention.self.value.bias', 'encoder.layer.7.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.value.weight', 'encoder.layer.11.crossattention.self.query.weight', 'encoder.layer.10.crossattention.self.key.weight', 'encoder.layer.1.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.output.dense.weight', 'encoder.layer.0.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.weight', 'encoder.layer.9.crossattention.output.dense.bias', 'encoder.layer.11.crossattention.self.query.bias', 'encoder.layer.3.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.key.weight', 'encoder.layer.6.crossattention.self.query.weight', 'encoder.layer.3.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.self.query.bias', 'cls.predictions.transform.LayerNorm.weight', 'encoder.layer.3.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.value.weight', 'encoder.layer.2.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.key.bias', 'encoder.layer.9.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.self.query.bias', 'encoder.layer.9.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.key.weight', 'encoder.layer.7.crossattention.output.dense.weight', 'encoder.layer.10.crossattention.self.value.bias', 'encoder.layer.4.crossattention.self.query.bias', 'encoder.layer.4.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.output.LayerNorm.bias', 'encoder.layer.0.crossattention.self.key.bias', 'encoder.layer.4.crossattention.output.dense.bias', 'encoder.layer.10.crossattention.output.dense.bias', 'encoder.layer.6.crossattention.self.key.bias', 'encoder.layer.0.crossattention.output.LayerNorm.bias', 'cls.predictions.transform.dense.bias', 'encoder.layer.9.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.LayerNorm.bias', 'encoder.layer.8.crossattention.self.key.weight', 'encoder.layer.8.crossattention.output.LayerNorm.bias', 'encoder.layer.7.crossattention.self.key.bias', 'encoder.layer.8.crossattention.output.LayerNorm.weight', 'encoder.layer.11.crossattention.output.LayerNorm.bias', 'encoder.layer.2.crossattention.self.key.bias', 'encoder.layer.11.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.key.bias', 'encoder.layer.4.crossattention.self.key.weight', 'encoder.layer.5.crossattention.self.key.bias', 'encoder.layer.10.crossattention.self.value.weight', 'encoder.layer.4.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.weight', 'encoder.layer.3.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.query.bias', 'encoder.layer.10.crossattention.self.query.weight', 'encoder.layer.3.crossattention.self.value.weight', 'encoder.layer.5.crossattention.output.dense.bias', 'encoder.layer.9.crossattention.self.query.bias', 'encoder.layer.7.crossattention.self.query.weight', 'encoder.layer.0.crossattention.self.query.bias', 'encoder.layer.1.crossattention.self.key.bias', 'encoder.layer.2.crossattention.output.LayerNorm.bias', 'encoder.layer.11.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.key.weight', 'encoder.layer.4.crossattention.self.value.weight', 'encoder.layer.0.crossattention.output.dense.bias', 'encoder.layer.7.crossattention.self.value.bias', 'encoder.layer.4.crossattention.output.LayerNorm.bias', 'encoder.layer.3.crossattention.self.key.weight', 'encoder.layer.10.crossattention.self.key.bias', 'encoder.layer.10.crossattention.output.dense.weight', 'encoder.layer.5.crossattention.output.dense.weight', 'encoder.layer.6.crossattention.output.dense.weight', 'encoder.layer.9.crossattention.self.query.weight', 'encoder.layer.4.crossattention.self.key.bias', 'encoder.layer.5.crossattention.self.query.bias', 'encoder.layer.11.crossattention.self.key.bias', 'encoder.layer.6.crossattention.self.value.weight', 'encoder.layer.3.crossattention.self.value.bias', 'cls.predictions.transform.LayerNorm.bias', 'encoder.layer.3.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.self.value.weight', 'encoder.layer.6.crossattention.output.dense.bias', 'encoder.layer.3.crossattention.self.query.bias', 'encoder.layer.9.crossattention.output.dense.weight', 'encoder.layer.11.crossattention.self.key.weight', 'encoder.layer.0.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.dense.bias', 'encoder.layer.0.crossattention.self.value.weight', 'encoder.layer.5.crossattention.self.query.weight', 'encoder.layer.10.crossattention.output.LayerNorm.bias', 'encoder.layer.5.crossattention.output.LayerNorm.weight', 'encoder.layer.7.crossattention.output.LayerNorm.weight', 'encoder.layer.1.crossattention.self.value.weight', 'encoder.layer.1.crossattention.output.LayerNorm.weight', 'encoder.layer.0.crossattention.self.query.weight', 'encoder.layer.2.crossattention.self.key.weight', 'encoder.layer.11.crossattention.output.dense.weight', 'encoder.layer.7.crossattention.output.LayerNorm.bias', 'encoder.layer.6.crossattention.self.value.bias', 'cls.predictions.transform.dense.weight', 'encoder.layer.1.crossattention.self.value.bias', 'encoder.layer.1.crossattention.self.key.weight', 'encoder.layer.9.crossattention.output.LayerNorm.weight', 'encoder.layer.5.crossattention.self.value.bias', 'encoder.layer.2.crossattention.output.dense.bias', 'encoder.layer.8.crossattention.self.query.bias', 'encoder.layer.2.crossattention.output.LayerNorm.weight', 'encoder.layer.8.crossattention.self.query.weight', 'encoder.layer.8.crossattention.output.dense.bias', 'encoder.layer.2.crossattention.output.dense.weight', 'encoder.layer.1.crossattention.output.LayerNorm.bias']
You should probably TRAIN this model on a down-stream task to be able to use it for predictions and inference.
[h264 @ 0x56348d689580] mmco: unref short failure
[h264 @ 0x558580a82f80] mmco: unref short failure
[h264 @ 0x558581131940] mmco: unref short failure
[h264 @ 0x558581131940] mmco: unref short failure
09/16/2024 23:49:26 - INFO - __main__ -   load_from_pretrained: ./output/vast/pretrain_vast/ckpt/model_step_204994.pt
09/16/2024 23:49:26 - INFO - __main__ -   Load from pretrained dir ./output/vast/pretrain_vast
09/16/2024 23:49:32 - INFO - __main__ -   Unexpected keys ['vision_encoder.text.logit_scale']
09/16/2024 23:49:32 - INFO - __main__ -   missing_keys  ['vision_encoder.logit_scale']
[h264 @ 0x56348f52de80] mmco: unref short failure
[h264 @ 0x56348f52de80] mmco: unref short failure
09/16/2024 23:49:38 - INFO - __main__ -   ==================learning_rate_settings==================

09/16/2024 23:49:38 - INFO - __main__ -     basic_lr : 2e-05
09/16/2024 23:49:38 - INFO - __main__ -     clip_lr_visual : 5e-07
09/16/2024 23:49:38 - INFO - __main__ -     clip_lr_visual_len : 245
09/16/2024 23:49:38 - INFO - __main__ -     new_lr : 0
09/16/2024 23:49:38 - INFO - __main__ -     new_params_name: []
09/16/2024 23:49:38 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/16/2024 23:49:38 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558583a86f80] mmco: unref short failure
[h264 @ 0x558581131240] mmco: unref short failure
[h264 @ 0x5556181bc800] mmco: unref short failure
[h264 @ 0x5556181bc800] mmco: unref short failure
[h264 @ 0x5585832bca00] mmco: unref short failure
[h264 @ 0x5585832bca00] mmco: unref short failure
[h264 @ 0x55857f19cec0] mmco: unref short failure
[h264 @ 0x5556174a4740] mmco: unref short failure
[h264 @ 0x557670e8b8c0] mmco: unref short failure
[h264 @ 0x557670e8b8c0] mmco: unref short failure
[h264 @ 0x557669bbdc80] mmco: unref short failure
[h264 @ 0x55561ba76580] mmco: unref short failure
[h264 @ 0x55561ba76580] mmco: unref short failure
[h264 @ 0x5585880cb740] mmco: unref short failure
[h264 @ 0x5585880cb740] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56348cd8eec0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55857ec12400] mmco: unref short failure
09/16/2024 23:50:18 - INFO - __main__ -   current idx BYYoxWKlR3E.11 from finetune_area returns wrong image/video, use 54238 instead.
09/16/2024 23:50:27 - INFO - __main__ -   current idx b1Hz-jQ4IM0.8 from finetune_area returns wrong image/video, use 35266 instead.
[h264 @ 0x555617a601c0] mmco: unref short failure
[h264 @ 0x555617a601c0] mmco: unref short failure
[h264 @ 0x56348e5f46c0] mmco: unref short failure
[h264 @ 0x56348e5f46c0] mmco: unref short failure
[h264 @ 0x56348d6a7880] mmco: unref short failure
[h264 @ 0x55766a0f4440] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torch/utils/checkpoint.py:31: UserWarning: None of the inputs have requires_grad=True. Gradients will be None
  warnings.warn("None of the inputs have requires_grad=True. Gradients will be None")
[h264 @ 0x557669da7b00] mmco: unref short failure
[h264 @ 0x557669da7b00] mmco: unref short failure
[h264 @ 0x55857ff13180] mmco: unref short failure
[h264 @ 0x555617e28a80] mmco: unref short failure
[h264 @ 0x555617e28a80] mmco: unref short failure
[h264 @ 0x56348d9bca40] mmco: unref short failure
[h264 @ 0x56348d9bca40] mmco: unref short failure
[h264 @ 0x5556195ac6c0] mmco: unref short failure
[h264 @ 0x555616dc80c0] mmco: unref short failure
[h264 @ 0x555616dc80c0] mmco: unref short failure
[h264 @ 0x555616dc80c0] mmco: unref short failure
[h264 @ 0x563490ff9280] mmco: unref short failure
[h264 @ 0x555619525440] mmco: unref short failure
[h264 @ 0x555618dbdbc0] mmco: unref short failure
[h264 @ 0x55561a09ea40] mmco: unref short failure
[h264 @ 0x55561a09ea40] mmco: unref short failure
[h264 @ 0x55767209bd40] mmco: unref short failure
09/16/2024 23:52:00 - INFO - __main__ -   current idx bVHcVa51-ds.15 from finetune_area returns wrong image/video, use 87000 instead.
[h264 @ 0x55766f10af80] mmco: unref short failure
09/16/2024 23:52:06 - INFO - __main__ -   current idx 1-hr71oylIM.38 from finetune_area returns wrong image/video, use 139748 instead.
[h264 @ 0x563494a190c0] mmco: unref short failure
[h264 @ 0x563494a190c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x558580dd20c0] mmco: unref short failure
[h264 @ 0x55766a29cc40] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
[h264 @ 0x558580dd6200] mmco: unref short failure
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:25,  8.54it/s]  1%|          | 2/221 [00:00<00:29,  7.53it/s]  1%|▏         | 3/221 [00:00<00:36,  6.05it/s]  2%|▏         | 5/221 [00:00<00:25,  8.43it/s]  3%|▎         | 7/221 [00:00<00:25,  8.45it/s]  4%|▎         | 8/221 [00:00<00:24,  8.65it/s]  5%|▍         | 10/221 [00:01<00:22,  9.36it/s]  5%|▌         | 12/221 [00:03<01:52,  1.86it/s]  6%|▌         | 13/221 [00:03<01:33,  2.23it/s]  7%|▋         | 15/221 [00:04<01:05,  3.12it/s]  8%|▊         | 17/221 [00:04<00:54,  3.72it/s]  8%|▊         | 18/221 [00:04<00:50,  4.03it/s][h264 @ 0x557670699880] mmco: unref short failure
[h264 @ 0x557670699880] mmco: unref short failure
  9%|▊         | 19/221 [00:04<00:49,  4.06it/s]  9%|▉         | 20/221 [00:04<00:46,  4.37it/s][h264 @ 0x557670699880] mmco: unref short failure
[h264 @ 0x557670699880] mmco: unref short failure
 10%|▉         | 21/221 [00:05<00:39,  5.02it/s] 10%|▉         | 22/221 [00:09<04:34,  1.38s/it] 11%|█         | 24/221 [00:09<02:42,  1.21it/s] 11%|█▏        | 25/221 [00:09<02:07,  1.53it/s] 12%|█▏        | 26/221 [00:10<01:42,  1.90it/s] 12%|█▏        | 27/221 [00:10<01:20,  2.41it/s] 13%|█▎        | 28/221 [00:10<01:04,  2.97it/s] 14%|█▎        | 30/221 [00:10<00:43,  4.38it/s] 14%|█▍        | 31/221 [00:10<00:38,  4.88it/s] 15%|█▍        | 33/221 [00:10<00:31,  5.90it/s][h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
 15%|█▌        | 34/221 [00:11<00:29,  6.32it/s][h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
[h264 @ 0x55561d126180] mmco: unref short failure
 16%|█▌        | 35/221 [00:11<00:28,  6.54it/s] 16%|█▋        | 36/221 [00:11<00:26,  7.10it/s] 17%|█▋        | 37/221 [00:11<00:26,  7.07it/s] 18%|█▊        | 39/221 [00:11<00:22,  8.19it/s] 18%|█▊        | 40/221 [00:11<00:23,  7.62it/s] 19%|█▊        | 41/221 [00:11<00:23,  7.76it/s] 19%|█▉        | 42/221 [00:12<00:22,  7.94it/s] 20%|█▉        | 44/221 [00:12<00:20,  8.74it/s] 20%|██        | 45/221 [00:12<00:35,  4.95it/s] 21%|██        | 46/221 [00:12<00:35,  4.98it/s][h264 @ 0x5585865bb440] mmco: unref short failure
[h264 @ 0x5585865bb440] mmco: unref short failure
 21%|██▏       | 47/221 [00:17<04:04,  1.41s/it] 22%|██▏       | 49/221 [00:17<02:24,  1.19it/s] 23%|██▎       | 51/221 [00:17<01:33,  1.82it/s] 24%|██▍       | 53/221 [00:18<01:04,  2.59it/s] 24%|██▍       | 54/221 [00:22<03:05,  1.11s/it] 25%|██▍       | 55/221 [00:23<03:18,  1.20s/it] 26%|██▌       | 57/221 [00:23<02:05,  1.31it/s] 27%|██▋       | 59/221 [00:24<01:28,  1.84it/s] 27%|██▋       | 60/221 [00:24<01:15,  2.15it/s] 28%|██▊       | 62/221 [00:24<00:52,  3.02it/s] 29%|██▉       | 64/221 [00:24<00:39,  4.02it/s] 29%|██▉       | 65/221 [00:24<00:35,  4.43it/s] 30%|██▉       | 66/221 [00:29<03:15,  1.26s/it] 30%|███       | 67/221 [00:29<02:36,  1.02s/it] 31%|███       | 68/221 [00:30<02:00,  1.27it/s] 31%|███       | 69/221 [00:30<01:38,  1.54it/s] 32%|███▏      | 70/221 [00:30<01:16,  1.96it/s] 32%|███▏      | 71/221 [00:30<00:59,  2.51it/s] 33%|███▎      | 72/221 [00:30<00:47,  3.17it/s] 33%|███▎      | 73/221 [00:30<00:37,  3.91it/s] 34%|███▍      | 75/221 [00:31<00:28,  5.19it/s] 34%|███▍      | 76/221 [00:31<00:28,  5.17it/s] 35%|███▍      | 77/221 [00:31<00:27,  5.20it/s] 35%|███▌      | 78/221 [00:31<00:24,  5.92it/s] 36%|███▌      | 79/221 [00:31<00:29,  4.74it/s] 37%|███▋      | 81/221 [00:32<00:22,  6.16it/s] 37%|███▋      | 82/221 [00:32<00:24,  5.77it/s] 38%|███▊      | 84/221 [00:32<00:18,  7.43it/s] 39%|███▉      | 86/221 [00:32<00:15,  8.91it/s] 40%|███▉      | 88/221 [00:32<00:16,  8.26it/s] 40%|████      | 89/221 [00:33<00:20,  6.31it/s] 41%|████      | 90/221 [00:33<00:22,  5.86it/s] 41%|████      | 91/221 [00:33<00:20,  6.42it/s] 42%|████▏     | 93/221 [00:33<00:24,  5.18it/s] 43%|████▎     | 94/221 [00:34<00:24,  5.23it/s] 43%|████▎     | 95/221 [00:34<00:22,  5.60it/s] 43%|████▎     | 96/221 [00:34<00:25,  4.90it/s] 44%|████▍     | 97/221 [00:34<00:22,  5.59it/s] 44%|████▍     | 98/221 [00:34<00:20,  6.10it/s] 45%|████▍     | 99/221 [00:34<00:18,  6.64it/s] 45%|████▌     | 100/221 [00:35<00:17,  6.98it/s] 46%|████▌     | 101/221 [00:35<00:16,  7.29it/s] 46%|████▌     | 102/221 [00:35<00:15,  7.50it/s] 47%|████▋     | 103/221 [00:35<00:14,  7.94it/s] 48%|████▊     | 105/221 [00:35<00:12,  9.38it/s] 48%|████▊     | 106/221 [00:36<00:24,  4.76it/s] 48%|████▊     | 107/221 [00:36<00:23,  4.77it/s] 49%|████▉     | 109/221 [00:36<00:17,  6.27it/s] 50%|█████     | 111/221 [00:36<00:18,  6.09it/s] 51%|█████     | 112/221 [00:37<00:19,  5.63it/s] 51%|█████     | 113/221 [00:37<00:21,  5.03it/s] 52%|█████▏    | 114/221 [00:37<00:23,  4.64it/s] 52%|█████▏    | 115/221 [00:37<00:22,  4.72it/s]09/16/2024 23:52:59 - INFO - __main__ -   current idx -c6ksbh044A.74 from finetune_area returns wrong image/video, use 106497 instead.
[h264 @ 0x558582cddb00] mmco: unref short failure
[h264 @ 0x558582cddb00] mmco: unref short failure
 52%|█████▏    | 116/221 [00:42<02:42,  1.55s/it] 53%|█████▎    | 117/221 [00:43<02:06,  1.22s/it] 53%|█████▎    | 118/221 [00:43<01:33,  1.10it/s] 54%|█████▍    | 119/221 [00:43<01:10,  1.44it/s] 55%|█████▍    | 121/221 [00:43<00:42,  2.36it/s] 55%|█████▌    | 122/221 [00:44<00:37,  2.62it/s] 56%|█████▌    | 123/221 [00:44<00:31,  3.07it/s] 56%|█████▌    | 124/221 [00:44<00:30,  3.22it/s] 57%|█████▋    | 125/221 [00:44<00:32,  2.99it/s] 57%|█████▋    | 126/221 [00:45<00:34,  2.72it/s] 57%|█████▋    | 127/221 [00:45<00:32,  2.87it/s] 58%|█████▊    | 128/221 [00:45<00:33,  2.77it/s] 58%|█████▊    | 129/221 [00:46<00:26,  3.44it/s] 59%|█████▉    | 130/221 [00:46<00:21,  4.14it/s] 59%|█████▉    | 131/221 [00:46<00:18,  4.93it/s] 60%|█████▉    | 132/221 [00:46<00:16,  5.28it/s] 60%|██████    | 133/221 [00:46<00:18,  4.68it/s] 61%|██████    | 134/221 [00:47<00:20,  4.29it/s] 61%|██████    | 135/221 [00:48<00:51,  1.66it/s] 62%|██████▏   | 136/221 [00:49<00:48,  1.76it/s][h264 @ 0x555619fd0980] mmco: unref short failure
[h264 @ 0x555619fd0980] mmco: unref short failure
 62%|██████▏   | 137/221 [00:51<01:33,  1.11s/it] 62%|██████▏   | 138/221 [00:51<01:12,  1.14it/s] 63%|██████▎   | 139/221 [00:52<01:01,  1.34it/s] 63%|██████▎   | 140/221 [00:52<00:49,  1.64it/s] 64%|██████▍   | 141/221 [00:52<00:41,  1.92it/s] 64%|██████▍   | 142/221 [00:52<00:32,  2.41it/s] 65%|██████▌   | 144/221 [00:53<00:20,  3.70it/s] 66%|██████▌   | 146/221 [00:53<00:14,  5.01it/s] 67%|██████▋   | 147/221 [00:53<00:13,  5.37it/s][h264 @ 0x5634960298c0] mmco: unref short failure
 67%|██████▋   | 148/221 [00:53<00:14,  5.01it/s] 67%|██████▋   | 149/221 [00:53<00:13,  5.41it/s] 68%|██████▊   | 150/221 [00:54<00:16,  4.36it/s] 68%|██████▊   | 151/221 [00:54<00:19,  3.61it/s] 69%|██████▉   | 152/221 [00:54<00:18,  3.65it/s] 69%|██████▉   | 153/221 [00:55<00:16,  4.07it/s] 70%|██████▉   | 154/221 [00:55<00:13,  4.83it/s] 70%|███████   | 155/221 [00:55<00:12,  5.35it/s][h264 @ 0x563497c30500] mmco: unref short failure
 71%|███████   | 156/221 [01:00<01:45,  1.62s/it] 71%|███████   | 157/221 [01:00<01:16,  1.19s/it] 72%|███████▏  | 159/221 [01:00<00:42,  1.45it/s] 72%|███████▏  | 160/221 [01:00<00:33,  1.84it/s] 73%|███████▎  | 162/221 [01:01<00:22,  2.62it/s] 74%|███████▍  | 163/221 [01:01<00:19,  2.91it/s] 74%|███████▍  | 164/221 [01:01<00:17,  3.18it/s][h264 @ 0x55561c157940] mmco: unref short failure
[h264 @ 0x55766c37d840] mmco: unref short failure
[h264 @ 0x563493c8e500] mmco: unref short failure
 75%|███████▍  | 165/221 [01:06<01:28,  1.59s/it] 75%|███████▌  | 166/221 [01:06<01:05,  1.19s/it] 76%|███████▌  | 167/221 [01:09<01:23,  1.54s/it] 76%|███████▌  | 168/221 [01:09<01:00,  1.15s/it] 76%|███████▋  | 169/221 [01:09<00:47,  1.09it/s][h264 @ 0x55561d505fc0] mmco: unref short failure
[h264 @ 0x55561d505fc0] mmco: unref short failure
 77%|███████▋  | 170/221 [01:10<00:36,  1.41it/s] 78%|███████▊  | 172/221 [01:10<00:20,  2.45it/s] 79%|███████▊  | 174/221 [01:10<00:14,  3.28it/s] 79%|███████▉  | 175/221 [01:10<00:12,  3.76it/s] 80%|████████  | 177/221 [01:10<00:08,  4.90it/s] 81%|████████  | 178/221 [01:11<00:16,  2.57it/s] 81%|████████▏ | 180/221 [01:11<00:10,  3.78it/s] 82%|████████▏ | 182/221 [01:12<00:07,  4.97it/s] 83%|████████▎ | 184/221 [01:12<00:05,  6.17it/s] 84%|████████▍ | 186/221 [01:12<00:04,  7.24it/s] 85%|████████▌ | 188/221 [01:12<00:04,  8.02it/s] 86%|████████▌ | 190/221 [01:12<00:03,  8.89it/s] 87%|████████▋ | 193/221 [01:12<00:02, 11.70it/s] 88%|████████▊ | 195/221 [01:13<00:02, 12.98it/s] 89%|████████▉ | 197/221 [01:13<00:01, 13.60it/s] 90%|█████████ | 199/221 [01:13<00:01, 13.60it/s] 91%|█████████ | 201/221 [01:13<00:01, 12.89it/s] 92%|█████████▏| 203/221 [01:13<00:01, 14.29it/s] 93%|█████████▎| 205/221 [01:13<00:01, 11.76it/s] 94%|█████████▎| 207/221 [01:14<00:01, 11.30it/s] 95%|█████████▍| 209/221 [01:14<00:00, 12.43it/s] 95%|█████████▌| 211/221 [01:14<00:00, 11.78it/s] 96%|█████████▋| 213/221 [01:14<00:01,  7.25it/s][h264 @ 0x55561a11f740] mmco: unref short failure
[h264 @ 0x55561a11f740] mmco: unref short failure
 98%|█████████▊| 216/221 [01:16<00:01,  2.92it/s] 99%|█████████▊| 218/221 [01:17<00:00,  3.77it/s]100%|█████████▉| 220/221 [01:22<00:00,  1.11it/s]100%|█████████▉| 220/221 [01:22<00:00,  2.68it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<01:04,  3.42it/s]  1%|          | 2/221 [00:00<01:03,  3.42it/s]  1%|▏         | 3/221 [00:00<01:03,  3.42it/s]  2%|▏         | 4/221 [00:01<01:03,  3.42it/s]  2%|▏         | 5/221 [00:01<01:03,  3.42it/s]  3%|▎         | 6/221 [00:01<01:02,  3.42it/s]  3%|▎         | 7/221 [00:02<01:02,  3.43it/s]  4%|▎         | 8/221 [00:02<01:02,  3.43it/s]  4%|▍         | 9/221 [00:02<01:01,  3.43it/s]  5%|▍         | 10/221 [00:02<01:01,  3.43it/s]  5%|▍         | 11/221 [00:03<01:01,  3.43it/s]  5%|▌         | 12/221 [00:03<01:01,  3.43it/s]  6%|▌         | 13/221 [00:03<01:00,  3.43it/s]  6%|▋         | 14/221 [00:04<01:00,  3.43it/s]  7%|▋         | 15/221 [00:04<01:00,  3.43it/s]  7%|▋         | 16/221 [00:04<00:59,  3.43it/s]  8%|▊         | 17/221 [00:04<00:59,  3.43it/s]  8%|▊         | 18/221 [00:05<00:59,  3.43it/s]  9%|▊         | 19/221 [00:05<00:58,  3.43it/s]  9%|▉         | 20/221 [00:05<00:58,  3.43it/s] 10%|▉         | 21/221 [00:06<00:58,  3.43it/s] 10%|▉         | 22/221 [00:06<00:58,  3.43it/s] 10%|█         | 23/221 [00:06<00:57,  3.43it/s] 11%|█         | 24/221 [00:07<00:57,  3.43it/s] 11%|█▏        | 25/221 [00:07<00:57,  3.43it/s] 12%|█▏        | 26/221 [00:07<00:56,  3.43it/s] 12%|█▏        | 27/221 [00:07<00:56,  3.43it/s] 13%|█▎        | 28/221 [00:08<00:56,  3.43it/s] 13%|█▎        | 29/221 [00:08<00:56,  3.43it/s] 14%|█▎        | 30/221 [00:08<00:55,  3.43it/s] 14%|█▍        | 31/221 [00:09<00:55,  3.43it/s] 14%|█▍        | 32/221 [00:09<00:55,  3.42it/s] 15%|█▍        | 33/221 [00:09<00:54,  3.43it/s] 15%|█▌        | 34/221 [00:09<00:54,  3.43it/s] 16%|█▌        | 35/221 [00:10<00:54,  3.43it/s] 16%|█▋        | 36/221 [00:10<00:54,  3.43it/s] 17%|█▋        | 37/221 [00:10<00:53,  3.42it/s] 17%|█▋        | 38/221 [00:11<00:53,  3.43it/s] 18%|█▊        | 39/221 [00:11<00:53,  3.43it/s] 18%|█▊        | 40/221 [00:11<00:52,  3.43it/s] 19%|█▊        | 41/221 [00:11<00:52,  3.43it/s] 19%|█▉        | 42/221 [00:12<00:52,  3.43it/s] 19%|█▉        | 43/221 [00:12<00:51,  3.43it/s] 20%|█▉        | 44/221 [00:12<00:51,  3.43it/s] 20%|██        | 45/221 [00:13<00:51,  3.43it/s] 21%|██        | 46/221 [00:13<00:51,  3.43it/s] 21%|██▏       | 47/221 [00:13<00:50,  3.43it/s] 22%|██▏       | 48/221 [00:14<00:50,  3.43it/s] 22%|██▏       | 49/221 [00:14<00:50,  3.43it/s] 23%|██▎       | 50/221 [00:14<00:49,  3.43it/s] 23%|██▎       | 51/221 [00:14<00:49,  3.43it/s] 24%|██▎       | 52/221 [00:15<00:49,  3.43it/s] 24%|██▍       | 53/221 [00:15<00:49,  3.43it/s] 24%|██▍       | 54/221 [00:15<00:48,  3.43it/s] 25%|██▍       | 55/221 [00:16<00:48,  3.43it/s] 25%|██▌       | 56/221 [00:16<00:48,  3.43it/s] 26%|██▌       | 57/221 [00:16<00:47,  3.43it/s] 26%|██▌       | 58/221 [00:16<00:47,  3.42it/s] 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s] 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s] 28%|██▊       | 61/221 [00:17<00:46,  3.42it/s] 28%|██▊       | 62/221 [00:18<00:46,  3.43it/s] 29%|██▊       | 63/221 [00:18<00:46,  3.43it/s] 29%|██▉       | 64/221 [00:18<00:45,  3.43it/s] 29%|██▉       | 65/221 [00:18<00:45,  3.43it/s] 30%|██▉       | 66/221 [00:19<00:45,  3.43it/s] 30%|███       | 67/221 [00:19<00:44,  3.43it/s] 31%|███       | 68/221 [00:19<00:44,  3.43it/s] 31%|███       | 69/221 [00:20<00:44,  3.43it/s] 32%|███▏      | 70/221 [00:20<00:44,  3.43it/s] 32%|███▏      | 71/221 [00:20<00:43,  3.43it/s] 33%|███▎      | 72/221 [00:21<00:43,  3.43it/s] 33%|███▎      | 73/221 [00:21<00:43,  3.43it/s] 33%|███▎      | 74/221 [00:21<00:42,  3.43it/s] 34%|███▍      | 75/221 [00:21<00:42,  3.43it/s] 34%|███▍      | 76/221 [00:22<00:42,  3.43it/s] 35%|███▍      | 77/221 [00:22<00:42,  3.43it/s] 35%|███▌      | 78/221 [00:22<00:41,  3.43it/s] 36%|███▌      | 79/221 [00:23<00:41,  3.43it/s] 36%|███▌      | 80/221 [00:23<00:41,  3.43it/s] 37%|███▋      | 81/221 [00:23<00:40,  3.43it/s] 37%|███▋      | 82/221 [00:23<00:40,  3.43it/s] 38%|███▊      | 83/221 [00:24<00:40,  3.43it/s] 38%|███▊      | 84/221 [00:24<00:39,  3.43it/s] 38%|███▊      | 85/221 [00:24<00:39,  3.43it/s] 39%|███▉      | 86/221 [00:25<00:39,  3.43it/s] 39%|███▉      | 87/221 [00:25<00:39,  3.43it/s] 40%|███▉      | 88/221 [00:25<00:38,  3.43it/s] 40%|████      | 89/221 [00:25<00:38,  3.43it/s] 41%|████      | 90/221 [00:26<00:38,  3.43it/s] 41%|████      | 91/221 [00:26<00:37,  3.43it/s] 42%|████▏     | 92/221 [00:26<00:37,  3.43it/s] 42%|████▏     | 93/221 [00:27<00:37,  3.43it/s] 43%|████▎     | 94/221 [00:27<00:37,  3.43it/s] 43%|████▎     | 95/221 [00:27<00:36,  3.43it/s] 43%|████▎     | 96/221 [00:28<00:36,  3.43it/s] 44%|████▍     | 97/221 [00:28<00:36,  3.43it/s] 44%|████▍     | 98/221 [00:28<00:35,  3.43it/s] 45%|████▍     | 99/221 [00:28<00:35,  3.43it/s] 45%|████▌     | 100/221 [00:29<00:35,  3.43it/s] 46%|████▌     | 101/221 [00:29<00:35,  3.43it/s] 46%|████▌     | 102/221 [00:29<00:34,  3.43it/s] 47%|████▋     | 103/221 [00:30<00:34,  3.43it/s] 47%|████▋     | 104/221 [00:30<00:34,  3.43it/s] 48%|████▊     | 105/221 [00:30<00:33,  3.43it/s] 48%|████▊     | 106/221 [00:30<00:33,  3.43it/s] 48%|████▊     | 107/221 [00:31<00:33,  3.43it/s] 49%|████▉     | 108/221 [00:31<00:32,  3.43it/s] 49%|████▉     | 109/221 [00:31<00:32,  3.43it/s] 50%|████▉     | 110/221 [00:32<00:32,  3.43it/s] 50%|█████     | 111/221 [00:32<00:32,  3.43it/s] 51%|█████     | 112/221 [00:32<00:31,  3.43it/s] 51%|█████     | 113/221 [00:32<00:31,  3.43it/s] 52%|█████▏    | 114/221 [00:33<00:31,  3.43it/s] 52%|█████▏    | 115/221 [00:33<00:30,  3.43it/s] 52%|█████▏    | 116/221 [00:33<00:30,  3.43it/s] 53%|█████▎    | 117/221 [00:34<00:30,  3.43it/s] 53%|█████▎    | 118/221 [00:34<00:30,  3.43it/s] 54%|█████▍    | 119/221 [00:34<00:29,  3.43it/s] 54%|█████▍    | 120/221 [00:35<00:29,  3.43it/s] 55%|█████▍    | 121/221 [00:35<00:29,  3.43it/s] 55%|█████▌    | 122/221 [00:35<00:28,  3.43it/s] 56%|█████▌    | 123/221 [00:35<00:28,  3.43it/s] 56%|█████▌    | 124/221 [00:36<00:28,  3.43it/s] 57%|█████▋    | 125/221 [00:36<00:28,  3.43it/s] 57%|█████▋    | 126/221 [00:36<00:27,  3.43it/s] 57%|█████▋    | 127/221 [00:37<00:27,  3.43it/s] 58%|█████▊    | 128/221 [00:37<00:27,  3.43it/s] 58%|█████▊    | 129/221 [00:37<00:26,  3.43it/s] 59%|█████▉    | 130/221 [00:37<00:26,  3.43it/s] 59%|█████▉    | 131/221 [00:38<00:26,  3.43it/s] 60%|█████▉    | 132/221 [00:38<00:25,  3.43it/s] 60%|██████    | 133/221 [00:38<00:25,  3.43it/s] 61%|██████    | 134/221 [00:39<00:25,  3.43it/s] 61%|██████    | 135/221 [00:39<00:25,  3.43it/s] 62%|██████▏   | 136/221 [00:39<00:24,  3.43it/s] 62%|██████▏   | 137/221 [00:39<00:24,  3.43it/s] 62%|██████▏   | 138/221 [00:40<00:24,  3.43it/s] 63%|██████▎   | 139/221 [00:40<00:23,  3.43it/s] 63%|██████▎   | 140/221 [00:40<00:23,  3.43it/s] 64%|██████▍   | 141/221 [00:41<00:23,  3.43it/s] 64%|██████▍   | 142/221 [00:41<00:23,  3.43it/s] 65%|██████▍   | 143/221 [00:41<00:22,  3.43it/s] 65%|██████▌   | 144/221 [00:42<00:22,  3.43it/s] 66%|██████▌   | 145/221 [00:42<00:22,  3.43it/s] 66%|██████▌   | 146/221 [00:42<00:21,  3.43it/s] 67%|██████▋   | 147/221 [00:42<00:21,  3.43it/s] 67%|██████▋   | 148/221 [00:43<00:21,  3.43it/s] 67%|██████▋   | 149/221 [00:43<00:21,  3.43it/s] 68%|██████▊   | 150/221 [00:43<00:20,  3.43it/s] 68%|██████▊   | 151/221 [00:44<00:20,  3.43it/s] 69%|██████▉   | 152/221 [00:44<00:20,  3.43it/s] 69%|██████▉   | 153/221 [00:44<00:19,  3.43it/s] 70%|██████▉   | 154/221 [00:44<00:19,  3.43it/s] 70%|███████   | 155/221 [00:45<00:19,  3.43it/s] 71%|███████   | 156/221 [00:45<00:18,  3.43it/s] 71%|███████   | 157/221 [00:45<00:18,  3.43it/s] 71%|███████▏  | 158/221 [00:46<00:18,  3.43it/s] 72%|███████▏  | 159/221 [00:46<00:18,  3.43it/s] 72%|███████▏  | 160/221 [00:46<00:17,  3.43it/s] 73%|███████▎  | 161/221 [00:46<00:17,  3.43it/s] 73%|███████▎  | 162/221 [00:47<00:17,  3.43it/s] 74%|███████▍  | 163/221 [00:47<00:16,  3.43it/s] 74%|███████▍  | 164/221 [00:47<00:16,  3.43it/s] 75%|███████▍  | 165/221 [00:48<00:16,  3.43it/s] 75%|███████▌  | 166/221 [00:48<00:16,  3.43it/s] 76%|███████▌  | 167/221 [00:48<00:15,  3.43it/s] 76%|███████▌  | 168/221 [00:49<00:15,  3.43it/s] 76%|███████▋  | 169/221 [00:49<00:15,  3.43it/s] 77%|███████▋  | 170/221 [00:49<00:14,  3.43it/s] 77%|███████▋  | 171/221 [00:49<00:14,  3.43it/s] 78%|███████▊  | 172/221 [00:50<00:14,  3.43it/s] 78%|███████▊  | 173/221 [00:50<00:14,  3.43it/s] 79%|███████▊  | 174/221 [00:50<00:13,  3.43it/s] 79%|███████▉  | 175/221 [00:51<00:13,  3.43it/s] 80%|███████▉  | 176/221 [00:51<00:13,  3.43it/s] 80%|████████  | 177/221 [00:51<00:12,  3.43it/s] 81%|████████  | 178/221 [00:51<00:12,  3.43it/s] 81%|████████  | 179/221 [00:52<00:12,  3.43it/s] 81%|████████▏ | 180/221 [00:52<00:11,  3.43it/s] 82%|████████▏ | 181/221 [00:52<00:11,  3.43it/s] 82%|████████▏ | 182/221 [00:53<00:11,  3.43it/s] 83%|████████▎ | 183/221 [00:53<00:11,  3.43it/s] 83%|████████▎ | 184/221 [00:53<00:10,  3.43it/s] 84%|████████▎ | 185/221 [00:54<00:10,  3.43it/s] 84%|████████▍ | 186/221 [00:54<00:10,  3.43it/s] 85%|████████▍ | 187/221 [00:54<00:09,  3.43it/s] 85%|████████▌ | 188/221 [00:54<00:09,  3.43it/s] 86%|████████▌ | 189/221 [00:55<00:09,  3.43it/s] 86%|████████▌ | 190/221 [00:55<00:09,  3.43it/s] 86%|████████▋ | 191/221 [00:55<00:08,  3.43it/s] 87%|████████▋ | 192/221 [00:56<00:08,  3.43it/s] 87%|████████▋ | 193/221 [00:56<00:08,  3.43it/s] 88%|████████▊ | 194/221 [00:56<00:07,  3.43it/s] 88%|████████▊ | 195/221 [00:56<00:07,  3.43it/s] 89%|████████▊ | 196/221 [00:57<00:07,  3.43it/s] 89%|████████▉ | 197/221 [00:57<00:07,  3.43it/s] 90%|████████▉ | 198/221 [00:57<00:06,  3.43it/s] 90%|█████████ | 199/221 [00:58<00:06,  3.43it/s] 90%|█████████ | 200/221 [00:58<00:06,  3.43it/s] 91%|█████████ | 201/221 [00:58<00:05,  3.43it/s] 91%|█████████▏| 202/221 [00:58<00:05,  3.43it/s] 92%|█████████▏| 203/221 [00:59<00:05,  3.43it/s] 92%|█████████▏| 204/221 [00:59<00:04,  3.43it/s] 93%|█████████▎| 205/221 [00:59<00:04,  3.43it/s] 93%|█████████▎| 206/221 [01:00<00:04,  3.43it/s] 94%|█████████▎| 207/221 [01:00<00:04,  3.43it/s] 94%|█████████▍| 208/221 [01:00<00:03,  3.43it/s] 95%|█████████▍| 209/221 [01:01<00:03,  3.43it/s] 95%|█████████▌| 210/221 [01:01<00:03,  3.43it/s] 95%|█████████▌| 211/221 [01:01<00:02,  3.43it/s] 96%|█████████▌| 212/221 [01:01<00:02,  3.43it/s] 96%|█████████▋| 213/221 [01:02<00:02,  3.43it/s] 97%|█████████▋| 214/221 [01:02<00:02,  3.43it/s] 97%|█████████▋| 215/221 [01:02<00:01,  3.43it/s] 98%|█████████▊| 216/221 [01:03<00:01,  3.43it/s] 98%|█████████▊| 217/221 [01:03<00:01,  3.43it/s] 99%|█████████▊| 218/221 [01:03<00:00,  3.43it/s] 99%|█████████▉| 219/221 [01:03<00:00,  3.43it/s]100%|█████████▉| 220/221 [01:04<00:00,  3.43it/s]100%|██████████| 221/221 [01:04<00:00,  3.43it/s]100%|██████████| 221/221 [01:04<00:00,  3.43it/s]
  0%|          | 0/221 [00:00<?, ?it/s]  0%|          | 1/221 [00:00<00:42,  5.15it/s]  1%|          | 2/221 [00:00<01:05,  3.34it/s]  1%|▏         | 3/221 [00:01<01:18,  2.77it/s]  2%|▏         | 4/221 [00:01<01:14,  2.91it/s]  2%|▏         | 5/221 [00:01<01:02,  3.45it/s]  3%|▎         | 6/221 [00:01<00:51,  4.17it/s]  3%|▎         | 7/221 [00:01<00:47,  4.52it/s]  4%|▎         | 8/221 [00:02<00:48,  4.41it/s]  4%|▍         | 9/221 [00:02<01:20,  2.65it/s]  5%|▍         | 10/221 [00:03<01:18,  2.68it/s]  5%|▍         | 11/221 [00:03<01:30,  2.32it/s]  5%|▌         | 12/221 [00:04<01:23,  2.51it/s]  6%|▌         | 13/221 [00:04<01:39,  2.10it/s]  6%|▋         | 14/221 [00:04<01:23,  2.49it/s]  7%|▋         | 15/221 [00:05<01:15,  2.73it/s]  7%|▋         | 16/221 [00:05<01:06,  3.10it/s]  8%|▊         | 17/221 [00:05<01:18,  2.61it/s]  8%|▊         | 18/221 [00:06<01:20,  2.53it/s]  9%|▊         | 19/221 [00:06<01:06,  3.02it/s]  9%|▉         | 20/221 [00:06<00:58,  3.43it/s] 10%|▉         | 22/221 [00:07<00:48,  4.08it/s] 10%|█         | 23/221 [00:07<00:45,  4.38it/s] 11%|█         | 24/221 [00:07<00:47,  4.17it/s] 11%|█▏        | 25/221 [00:07<00:45,  4.27it/s] 12%|█▏        | 26/221 [00:07<00:42,  4.60it/s] 12%|█▏        | 27/221 [00:08<00:48,  4.00it/s] 13%|█▎        | 28/221 [00:08<00:52,  3.67it/s] 13%|█▎        | 29/221 [00:09<01:07,  2.84it/s] 14%|█▎        | 30/221 [00:09<00:56,  3.38it/s] 14%|█▍        | 31/221 [00:09<00:49,  3.81it/s] 14%|█▍        | 32/221 [00:09<00:55,  3.38it/s] 15%|█▍        | 33/221 [00:10<00:49,  3.79it/s] 15%|█▌        | 34/221 [00:10<00:50,  3.74it/s] 16%|█▌        | 35/221 [00:10<00:44,  4.17it/s] 16%|█▋        | 36/221 [00:10<00:49,  3.74it/s] 17%|█▋        | 37/221 [00:11<00:49,  3.68it/s] 17%|█▋        | 38/221 [00:11<00:46,  3.96it/s] 18%|█▊        | 39/221 [00:11<00:41,  4.34it/s] 18%|█▊        | 40/221 [00:11<00:38,  4.71it/s] 19%|█▊        | 41/221 [00:11<00:34,  5.25it/s] 19%|█▉        | 42/221 [00:11<00:31,  5.76it/s] 19%|█▉        | 43/221 [00:12<00:40,  4.44it/s] 20%|█▉        | 44/221 [00:12<00:41,  4.25it/s] 20%|██        | 45/221 [00:13<01:01,  2.87it/s] 21%|██        | 46/221 [00:13<01:00,  2.91it/s] 21%|██▏       | 47/221 [00:13<00:48,  3.56it/s] 22%|██▏       | 48/221 [00:13<00:41,  4.20it/s] 23%|██▎       | 50/221 [00:14<00:39,  4.36it/s] 23%|██▎       | 51/221 [00:14<00:37,  4.56it/s] 24%|██▎       | 52/221 [00:14<00:33,  5.11it/s] 24%|██▍       | 53/221 [00:15<00:47,  3.56it/s] 24%|██▍       | 54/221 [00:15<00:45,  3.68it/s] 25%|██▍       | 55/221 [00:15<00:43,  3.85it/s] 25%|██▌       | 56/221 [00:15<00:43,  3.80it/s] 26%|██▌       | 57/221 [00:16<00:45,  3.58it/s] 26%|██▌       | 58/221 [00:16<00:37,  4.36it/s] 27%|██▋       | 59/221 [00:16<00:37,  4.30it/s] 27%|██▋       | 60/221 [00:16<00:35,  4.59it/s] 28%|██▊       | 61/221 [00:17<00:42,  3.74it/s] 28%|██▊       | 62/221 [00:17<00:38,  4.10it/s] 29%|██▊       | 63/221 [00:17<00:38,  4.12it/s] 29%|██▉       | 64/221 [00:17<00:33,  4.70it/s] 29%|██▉       | 65/221 [00:17<00:32,  4.79it/s] 30%|██▉       | 66/221 [00:18<00:37,  4.15it/s] 30%|███       | 67/221 [00:18<00:41,  3.71it/s] 31%|███       | 68/221 [00:18<00:43,  3.54it/s] 31%|███       | 69/221 [00:19<01:07,  2.27it/s] 32%|███▏      | 70/221 [00:19<00:57,  2.64it/s] 32%|███▏      | 71/221 [00:20<00:59,  2.50it/s] 33%|███▎      | 72/221 [00:20<00:53,  2.77it/s] 33%|███▎      | 73/221 [00:20<00:47,  3.14it/s] 33%|███▎      | 74/221 [00:20<00:39,  3.68it/s] 34%|███▍      | 75/221 [00:21<00:42,  3.43it/s] 34%|███▍      | 76/221 [00:21<00:42,  3.38it/s] 35%|███▍      | 77/221 [00:21<00:35,  4.00it/s] 35%|███▌      | 78/221 [00:22<00:39,  3.59it/s] 36%|███▌      | 79/221 [00:22<00:33,  4.22it/s] 36%|███▌      | 80/221 [00:22<00:33,  4.26it/s] 37%|███▋      | 81/221 [00:22<00:30,  4.53it/s] 37%|███▋      | 82/221 [00:22<00:36,  3.85it/s] 38%|███▊      | 83/221 [00:23<00:35,  3.87it/s] 38%|███▊      | 84/221 [00:23<00:40,  3.39it/s] 38%|███▊      | 85/221 [00:24<00:44,  3.09it/s] 39%|███▉      | 86/221 [00:24<00:36,  3.68it/s] 39%|███▉      | 87/221 [00:24<00:41,  3.24it/s] 40%|███▉      | 88/221 [00:24<00:37,  3.59it/s] 40%|████      | 89/221 [00:25<00:46,  2.86it/s] 41%|████      | 90/221 [00:25<00:44,  2.93it/s] 41%|████      | 91/221 [00:25<00:35,  3.68it/s] 42%|████▏     | 92/221 [00:25<00:30,  4.25it/s] 42%|████▏     | 93/221 [00:26<00:38,  3.34it/s] 43%|████▎     | 94/221 [00:26<00:34,  3.64it/s] 43%|████▎     | 95/221 [00:27<00:57,  2.19it/s] 43%|████▎     | 96/221 [00:27<00:50,  2.49it/s] 44%|████▍     | 97/221 [00:28<00:52,  2.36it/s] 44%|████▍     | 98/221 [00:28<00:46,  2.63it/s] 45%|████▍     | 99/221 [00:28<00:42,  2.86it/s] 45%|████▌     | 100/221 [00:29<00:46,  2.62it/s] 46%|████▌     | 101/221 [00:29<00:40,  2.99it/s] 46%|████▌     | 102/221 [00:29<00:38,  3.11it/s] 47%|████▋     | 103/221 [00:29<00:33,  3.55it/s] 48%|████▊     | 105/221 [00:30<00:24,  4.65it/s] 48%|████▊     | 106/221 [00:30<00:29,  3.86it/s] 49%|████▉     | 108/221 [00:30<00:19,  5.72it/s] 49%|████▉     | 109/221 [00:30<00:20,  5.58it/s] 50%|████▉     | 110/221 [00:31<00:22,  4.89it/s] 50%|█████     | 111/221 [00:31<00:24,  4.48it/s] 51%|█████     | 112/221 [00:31<00:30,  3.63it/s] 51%|█████     | 113/221 [00:32<00:29,  3.61it/s] 52%|█████▏    | 114/221 [00:32<00:24,  4.31it/s] 52%|█████▏    | 116/221 [00:32<00:21,  4.85it/s] 53%|█████▎    | 117/221 [00:32<00:22,  4.60it/s] 53%|█████▎    | 118/221 [00:33<00:23,  4.32it/s] 54%|█████▍    | 119/221 [00:33<00:26,  3.87it/s] 54%|█████▍    | 120/221 [00:33<00:30,  3.34it/s] 55%|█████▍    | 121/221 [00:34<00:27,  3.58it/s] 55%|█████▌    | 122/221 [00:34<00:34,  2.85it/s] 56%|█████▌    | 123/221 [00:34<00:29,  3.30it/s] 56%|█████▌    | 124/221 [00:35<00:37,  2.55it/s] 57%|█████▋    | 125/221 [00:35<00:43,  2.22it/s] 57%|█████▋    | 126/221 [00:36<00:37,  2.55it/s] 57%|█████▋    | 127/221 [00:36<00:34,  2.71it/s] 58%|█████▊    | 128/221 [00:36<00:31,  2.99it/s] 58%|█████▊    | 129/221 [00:36<00:24,  3.72it/s] 59%|█████▉    | 130/221 [00:37<00:23,  3.85it/s] 59%|█████▉    | 131/221 [00:37<00:20,  4.46it/s] 60%|█████▉    | 132/221 [00:37<00:26,  3.40it/s] 60%|██████    | 133/221 [00:38<00:31,  2.75it/s] 61%|██████    | 134/221 [00:38<00:28,  3.00it/s] 61%|██████    | 135/221 [00:38<00:25,  3.40it/s] 62%|██████▏   | 136/221 [00:39<00:27,  3.08it/s] 62%|██████▏   | 137/221 [00:39<00:26,  3.20it/s] 62%|██████▏   | 138/221 [00:39<00:24,  3.36it/s] 63%|██████▎   | 139/221 [00:40<00:30,  2.71it/s] 63%|██████▎   | 140/221 [00:40<00:25,  3.22it/s] 64%|██████▍   | 141/221 [00:40<00:25,  3.17it/s] 64%|██████▍   | 142/221 [00:40<00:22,  3.53it/s] 65%|██████▍   | 143/221 [00:41<00:23,  3.36it/s] 65%|██████▌   | 144/221 [00:41<00:22,  3.40it/s] 66%|██████▌   | 145/221 [00:42<00:26,  2.86it/s] 66%|██████▌   | 146/221 [00:42<00:25,  2.92it/s] 67%|██████▋   | 147/221 [00:42<00:20,  3.55it/s] 67%|██████▋   | 148/221 [00:43<00:36,  2.02it/s] 67%|██████▋   | 149/221 [00:43<00:28,  2.51it/s] 68%|██████▊   | 150/221 [00:43<00:23,  3.03it/s] 68%|██████▊   | 151/221 [00:44<00:37,  1.89it/s] 69%|██████▉   | 152/221 [00:45<00:40,  1.68it/s] 69%|██████▉   | 153/221 [00:45<00:34,  1.95it/s] 70%|██████▉   | 154/221 [00:46<00:28,  2.39it/s] 70%|███████   | 155/221 [00:46<00:25,  2.58it/s] 71%|███████   | 156/221 [00:46<00:23,  2.75it/s] 71%|███████   | 157/221 [00:46<00:21,  2.97it/s] 71%|███████▏  | 158/221 [00:47<00:21,  2.87it/s] 72%|███████▏  | 159/221 [00:47<00:19,  3.22it/s] 72%|███████▏  | 160/221 [00:47<00:20,  3.04it/s] 73%|███████▎  | 161/221 [00:48<00:16,  3.71it/s] 74%|███████▍  | 163/221 [00:48<00:12,  4.72it/s] 74%|███████▍  | 164/221 [00:48<00:12,  4.46it/s] 75%|███████▍  | 165/221 [00:48<00:12,  4.42it/s] 75%|███████▌  | 166/221 [00:49<00:16,  3.36it/s] 76%|███████▌  | 167/221 [00:49<00:14,  3.66it/s] 76%|███████▌  | 168/221 [00:49<00:14,  3.63it/s] 77%|███████▋  | 170/221 [00:50<00:14,  3.53it/s] 77%|███████▋  | 171/221 [00:50<00:15,  3.20it/s] 78%|███████▊  | 172/221 [00:51<00:13,  3.51it/s] 78%|███████▊  | 173/221 [00:51<00:12,  3.69it/s] 79%|███████▊  | 174/221 [00:51<00:13,  3.49it/s] 79%|███████▉  | 175/221 [00:51<00:13,  3.39it/s] 80%|███████▉  | 176/221 [00:52<00:11,  4.02it/s] 80%|████████  | 177/221 [00:52<00:09,  4.62it/s] 81%|████████  | 178/221 [00:52<00:13,  3.18it/s] 81%|████████  | 179/221 [00:53<00:13,  3.15it/s] 81%|████████▏ | 180/221 [00:53<00:10,  3.78it/s] 82%|████████▏ | 181/221 [00:53<00:12,  3.33it/s] 82%|████████▏ | 182/221 [00:53<00:09,  4.01it/s] 83%|████████▎ | 183/221 [00:53<00:09,  3.97it/s] 83%|████████▎ | 184/221 [00:54<00:10,  3.49it/s] 84%|████████▎ | 185/221 [00:54<00:10,  3.55it/s] 84%|████████▍ | 186/221 [00:55<00:12,  2.82it/s] 85%|████████▌ | 188/221 [00:55<00:08,  3.76it/s] 86%|████████▌ | 189/221 [00:55<00:07,  4.03it/s] 86%|████████▌ | 190/221 [00:55<00:08,  3.80it/s] 87%|████████▋ | 192/221 [00:56<00:06,  4.46it/s] 87%|████████▋ | 193/221 [00:56<00:07,  3.99it/s] 88%|████████▊ | 194/221 [00:56<00:06,  3.87it/s] 88%|████████▊ | 195/221 [00:57<00:06,  3.99it/s] 89%|████████▊ | 196/221 [00:57<00:08,  3.10it/s] 89%|████████▉ | 197/221 [00:57<00:06,  3.50it/s] 90%|████████▉ | 198/221 [00:58<00:06,  3.64it/s] 90%|█████████ | 199/221 [00:58<00:05,  4.23it/s] 90%|█████████ | 200/221 [00:58<00:04,  4.53it/s] 91%|█████████ | 201/221 [00:58<00:03,  5.35it/s] 91%|█████████▏| 202/221 [00:58<00:03,  5.25it/s] 92%|█████████▏| 203/221 [00:58<00:03,  5.31it/s] 92%|█████████▏| 204/221 [00:59<00:03,  4.92it/s] 93%|█████████▎| 205/221 [00:59<00:03,  4.95it/s] 93%|█████████▎| 206/221 [00:59<00:03,  4.18it/s] 94%|█████████▎| 207/221 [01:00<00:04,  3.18it/s] 94%|█████████▍| 208/221 [01:00<00:03,  3.95it/s] 95%|█████████▍| 209/221 [01:00<00:03,  3.95it/s] 95%|█████████▌| 210/221 [01:00<00:03,  3.42it/s] 95%|█████████▌| 211/221 [01:01<00:02,  3.37it/s] 96%|█████████▌| 212/221 [01:01<00:02,  3.21it/s] 96%|█████████▋| 213/221 [01:01<00:02,  3.29it/s] 97%|█████████▋| 214/221 [01:02<00:02,  2.65it/s] 97%|█████████▋| 215/221 [01:02<00:02,  2.86it/s] 98%|█████████▊| 216/221 [01:03<00:01,  2.75it/s] 98%|█████████▊| 217/221 [01:03<00:01,  2.81it/s] 99%|█████████▊| 218/221 [01:03<00:01,  2.38it/s] 99%|█████████▉| 219/221 [01:04<00:00,  2.46it/s]100%|█████████▉| 220/221 [01:04<00:00,  2.79it/s]100%|██████████| 221/221 [01:04<00:00,  2.75it/s]100%|██████████| 221/221 [01:04<00:00,  3.40it/s]
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_forward========

09/16/2024 23:55:58 - INFO - __main__ -   {'area_r1': 24.1, 'area_recall': '24.1/43.1/50.6', 'area_ravg': 39.3}
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_backard========

09/16/2024 23:55:58 - INFO - __main__ -   {'forward_r1': 33.3, 'forward_recall': '33.3/64.7/75.1', 'forward_ravg': 57.7}
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video========

09/16/2024 23:55:58 - INFO - __main__ -   {'area_video_r1': 33.3, 'area_video_recall': '33.3/64.4/75.9', 'area_video_ravg': 57.8}
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itm_area========

09/16/2024 23:55:58 - INFO - __main__ -   {'area_video_r1': 47.2, 'area_video_recall': '47.2/66.7/72.6', 'area_video_ravg': 62.2, 'area_video_back_r1': 43.9, 'area_video_back_recall': '43.9/68.9/78.2', 'area_video_back_ravg': 63.7}
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itc_tva========

09/16/2024 23:55:58 - INFO - __main__ -   {'video_r1': 35.7, 'video_recall': '35.7/63.6/72.5', 'video_ravg': 57.3}
09/16/2024 23:55:58 - INFO - __main__ -   ==== evaluation--ret%tva--msrvtt_ret_ret_itm_tva========

09/16/2024 23:55:58 - INFO - __main__ -   {'video_r1': 49.3, 'video_recall': '49.3/70.8/80.0', 'video_ravg': 66.7}
  0%|          | 0/2910 [00:00<?, ?it/s][h264 @ 0x563490bf7dc0] mmco: unref short failure
[h264 @ 0x563490bf7dc0] mmco: unref short failure
[h264 @ 0x563490bf7dc0] mmco: unref short failure
[h264 @ 0x563490bf7dc0] mmco: unref short failure
[h264 @ 0x55857fd84680] mmco: unref short failure
[h264 @ 0x55857fd84680] mmco: unref short failure
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
/leonardo_scratch/fast/IscrC_GenOpt/giordano/VAST/utils/build_optimizer.py:171: UserWarning: This overload of add_ is deprecated:
	add_(Number alpha, Tensor other)
Consider using one of the following signatures instead:
	add_(Tensor other, *, Number alpha) (Triggered internally at ../torch/csrc/utils/python_arg_parser.cpp:1485.)
  exp_avg.mul_(beta1).add_(1.0 - beta1, grad)
  0%|          | 1/2910 [00:09<7:49:31,  9.68s/it]  0%|          | 2/2910 [00:13<5:15:06,  6.50s/it]  0%|          | 3/2910 [00:18<4:33:35,  5.65s/it][h264 @ 0x55766dfa7900] mmco: unref short failure
[h264 @ 0x55766dfa7900] mmco: unref short failure
[h264 @ 0x56348f65a2c0] mmco: unref short failure
[h264 @ 0x56348f65a2c0] mmco: unref short failure
  0%|          | 4/2910 [00:23<4:23:59,  5.45s/it][h264 @ 0x55766c458c00] mmco: unref short failure
  0%|          | 5/2910 [00:28<4:18:34,  5.34s/it][h264 @ 0x555618badb00] mmco: unref short failure
[h264 @ 0x555618badb00] mmco: unref short failure
[h264 @ 0x56348e028f80] mmco: unref short failure
  0%|          | 6/2910 [00:35<4:32:34,  5.63s/it]09/16/2024 23:56:34 - INFO - __main__ -   current idx KX0TpgJdepY.11 from finetune_area returns wrong image/video, use 56889 instead.
[h264 @ 0x56348e8c9b40] mmco: unref short failure
  0%|          | 7/2910 [00:40<4:31:18,  5.61s/it][h264 @ 0x55857ed59880] mmco: unref short failure
[h264 @ 0x558581a2e440] mmco: unref short failure
[h264 @ 0x558581a2e440] mmco: unref short failure
[h264 @ 0x55858815c700] mmco: unref short failure
  0%|          | 8/2910 [00:47<4:47:57,  5.95s/it]  0%|          | 9/2910 [00:53<4:56:33,  6.13s/it]  0%|          | 10/2910 [01:00<4:57:32,  6.16s/it]  0%|          | 11/2910 [01:06<4:56:59,  6.15s/it]09/16/2024 23:57:10 - INFO - __main__ -   current idx f2vz8YAFQms.52 from finetune_area returns wrong image/video, use 47000 instead.
  0%|          | 12/2910 [01:12<5:00:36,  6.22s/it]09/16/2024 23:57:16 - INFO - __main__ -   current idx QzpF1yDPHf0.29 from finetune_area returns wrong image/video, use 139919 instead.
  0%|          | 13/2910 [01:20<5:19:00,  6.61s/it][h264 @ 0x55561bd26ac0] mmco: unref short failure
[h264 @ 0x563497ef5440] mmco: unref short failure
[h264 @ 0x563497ef5440] mmco: unref short failure
[h264 @ 0x563497ef5440] mmco: unref short failure
[h264 @ 0x563497ef5440] mmco: unref short failure
[h264 @ 0x557674644d40] mmco: unref short failure
[h264 @ 0x557674644d40] mmco: unref short failure
[h264 @ 0x555617efc980] mmco: unref short failure
[h264 @ 0x555617efc980] mmco: unref short failure
  0%|          | 14/2910 [01:25<5:08:30,  6.39s/it]  1%|          | 15/2910 [01:31<5:01:25,  6.25s/it][h264 @ 0x56348d808bc0] mmco: unref short failure
[h264 @ 0x55766abfa400] mmco: unref short failure
[h264 @ 0x55766abfa400] mmco: unref short failure
[h264 @ 0x56348e09c540] mmco: unref short failure
[h264 @ 0x558585ce2e00] mmco: unref short failure
[h264 @ 0x558585ce2e00] mmco: unref short failure
[h264 @ 0x55857fb57340] mmco: unref short failure
[h264 @ 0x55561fab8680] mmco: unref short failure
[h264 @ 0x55561fab8680] mmco: unref short failure
[h264 @ 0x55857ff40dc0] mmco: unref short failure
[h264 @ 0x55857ff40dc0] mmco: unref short failure
  1%|          | 16/2910 [02:11<13:05:28, 16.28s/it]  1%|          | 17/2910 [02:18<10:47:37, 13.43s/it][h264 @ 0x55767518ad40] mmco: unref short failure
[h264 @ 0x555617e403c0] mmco: unref short failure
[h264 @ 0x555617e403c0] mmco: unref short failure
[h264 @ 0x555617e403c0] mmco: unref short failure
[h264 @ 0x555617e403c0] mmco: unref short failure
[h264 @ 0x557676d78e80] mmco: unref short failure
[h264 @ 0x55561aaf7e40] mmco: unref short failure
[h264 @ 0x56348d757100] mmco: unref short failure
[h264 @ 0x56348d757100] mmco: unref short failure
  1%|          | 18/2910 [02:36<11:58:54, 14.91s/it][h264 @ 0x5556195ff640] mmco: unref short failure
  1%|          | 19/2910 [02:43<10:04:32, 12.55s/it][h264 @ 0x56348e9089c0] mmco: unref short failure
[h264 @ 0x56348e9089c0] mmco: unref short failure
[h264 @ 0x5585844a90c0] mmco: unref short failure
[h264 @ 0x5585844a90c0] mmco: unref short failure
  1%|          | 20/2910 [02:57<10:24:54, 12.97s/it][h264 @ 0x5634954b09c0] mmco: unref short failure
[h264 @ 0x5634954b09c0] mmco: unref short failure
[h264 @ 0x5634954b09c0] mmco: unref short failure
[h264 @ 0x5634954b09c0] mmco: unref short failure
  1%|          | 21/2910 [03:03<8:47:27, 10.95s/it] [h264 @ 0x5634955587c0] mmco: unref short failure
[h264 @ 0x55766ebf4c80] mmco: unref short failure
[h264 @ 0x55766ebf4c80] mmco: unref short failure
[h264 @ 0x558582afa6c0] mmco: unref short failure
[h264 @ 0x558582afa6c0] mmco: unref short failure
[h264 @ 0x55857ffbc700] mmco: unref short failure
[h264 @ 0x55857ffbc700] mmco: unref short failure
  1%|          | 22/2910 [03:17<9:27:48, 11.80s/it][h264 @ 0x56348e6c6b40] mmco: unref short failure
[h264 @ 0x56348e6c6b40] mmco: unref short failure
  1%|          | 23/2910 [03:23<8:07:16, 10.13s/it][h264 @ 0x555626362d40] mmco: unref short failure
[h264 @ 0x555626362d40] mmco: unref short failure
[h264 @ 0x555620a06e00] mmco: unref short failure
[h264 @ 0x55857e983b00] mmco: unref short failure
[h264 @ 0x55857e983b00] mmco: unref short failure
[h264 @ 0x563497c21a80] mmco: unref short failure
[h264 @ 0x557677761580] mmco: unref short failure
09/17/2024 00:00:23 - INFO - __main__ -   current idx IcQG8e_UOeA.24 from finetune_area returns wrong image/video, use 119424 instead.
[h264 @ 0x5556228c6100] mmco: unref short failure
[h264 @ 0x56349b1cf200] mmco: unref short failure
[h264 @ 0x555618bb9f00] mmco: unref short failure
[h264 @ 0x558589356040] mmco: unref short failure
[h264 @ 0x558589356040] mmco: unref short failure
[h264 @ 0x563491b2ff00] mmco: unref short failure
[h264 @ 0x563491b2ff00] mmco: unref short failure
  1%|          | 24/2910 [04:39<23:48:22, 29.70s/it][h264 @ 0x563491349c80] mmco: unref short failure
[h264 @ 0x557678ee66c0] mmco: unref short failure
  1%|          | 25/2910 [04:46<18:21:31, 22.91s/it]09/17/2024 00:00:54 - INFO - __main__ -   current idx XgAp7Dp862o.1 from finetune_area returns wrong image/video, use 80046 instead.
[h264 @ 0x563491bdc400] mmco: unref short failure
[h264 @ 0x563491bdc400] mmco: unref short failure
[h264 @ 0x563491bdc400] mmco: unref short failure
[h264 @ 0x563491bdc400] mmco: unref short failure
[h264 @ 0x563495dd8640] mmco: unref short failure
[h264 @ 0x563495dd8640] mmco: unref short failure
[h264 @ 0x56349af88b80] mmco: unref short failure
[h264 @ 0x55562009d9c0] mmco: unref short failure
[h264 @ 0x55562009d9c0] mmco: unref short failure
[h264 @ 0x55562009d9c0] mmco: unref short failure
[h264 @ 0x55858325c900] mmco: unref short failure
[h264 @ 0x55858325c900] mmco: unref short failure
[h264 @ 0x55857e344680] mmco: unref short failure
[h264 @ 0x55857e344680] mmco: unref short failure
  1%|          | 26/2910 [05:13<19:24:11, 24.22s/it][h264 @ 0x5634959e7e00] mmco: unref short failure
[h264 @ 0x557675dfdac0] mmco: unref short failure
  1%|          | 27/2910 [05:26<16:33:57, 20.69s/it][h264 @ 0x55561b3d8700] mmco: unref short failure
[h264 @ 0x55561b3d8700] mmco: unref short failure
[h264 @ 0x563496569d40] mmco: unref short failure
[h264 @ 0x563496569d40] mmco: unref short failure
[h264 @ 0x563496569d40] mmco: unref short failure
[h264 @ 0x563496569d40] mmco: unref short failure
  1%|          | 28/2910 [05:32<13:12:51, 16.51s/it]09/17/2024 00:01:36 - INFO - __main__ -   current idx zpVEmyBr_Hg.14 from finetune_area returns wrong image/video, use 62748 instead.
[h264 @ 0x557678b80c80] mmco: unref short failure
[h264 @ 0x557678b80c80] mmco: unref short failure
[h264 @ 0x56349d301740] mmco: unref short failure
[h264 @ 0x56349d301740] mmco: unref short failure
[h264 @ 0x56349d301740] mmco: unref short failure
[h264 @ 0x56349d301740] mmco: unref short failure
  1%|          | 29/2910 [05:39<10:48:13, 13.50s/it]  1%|          | 30/2910 [05:46<9:15:29, 11.57s/it]   1%|          | 31/2910 [05:52<7:55:55,  9.92s/it][h264 @ 0x55561e9a4d40] mmco: unref short failure
[h264 @ 0x55561e9a4d40] mmco: unref short failure
[h264 @ 0x5585831a20c0] mmco: unref short failure
[h264 @ 0x55766c5a3c40] mmco: unref short failure
[h264 @ 0x56349cf591c0] mmco: unref short failure
[h264 @ 0x56349cf591c0] mmco: unref short failure
[h264 @ 0x55561ef1e2c0] mmco: unref short failure
[h264 @ 0x55561ef1e2c0] mmco: unref short failure
[h264 @ 0x5556223d4d80] mmco: unref short failure
[h264 @ 0x5556223d4d80] mmco: unref short failure
[h264 @ 0x56348ed77400] mmco: unref short failure
[h264 @ 0x56348ed77400] mmco: unref short failure
[h264 @ 0x56348ed77400] mmco: unref short failure
[h264 @ 0x56348ed77400] mmco: unref short failure
[h264 @ 0x55857f96ae40] mmco: unref short failure
[h264 @ 0x55857f96ae40] mmco: unref short failure
09/17/2024 00:02:25 - INFO - __main__ -   current idx fQszS3V8sxI.1 from finetune_area returns wrong image/video, use 34076 instead.
[h264 @ 0x55766b744840] mmco: unref short failure
[h264 @ 0x5585896de1c0] mmco: unref short failure
[h264 @ 0x5585896de1c0] mmco: unref short failure
[h264 @ 0x558585cb3000] mmco: unref short failure
[h264 @ 0x558585cb3000] mmco: unref short failure
[h264 @ 0x555626027280] mmco: unref short failure
[h264 @ 0x555626027280] mmco: unref short failure
[h264 @ 0x558580301540] mmco: unref short failure
[h264 @ 0x558580301540] mmco: unref short failure
[h264 @ 0x5585919e0800] mmco: unref short failure
[h264 @ 0x5585919e0800] mmco: unref short failure
[h264 @ 0x55766b94ae80] mmco: unref short failure
09/17/2024 00:02:51 - INFO - __main__ -   current idx gy0BKAObQyw.14 from finetune_area returns wrong image/video, use 146105 instead.
[h264 @ 0x55858a48fac0] mmco: unref short failure
[h264 @ 0x55858a48fac0] mmco: unref short failure
  1%|          | 32/2910 [07:04<22:52:29, 28.61s/it][h264 @ 0x56349913b3c0] mmco: unref short failure
[h264 @ 0x56349913b3c0] mmco: unref short failure
  1%|          | 33/2910 [07:19<19:36:57, 24.55s/it][h264 @ 0x55562608b240] mmco: unref short failure
[h264 @ 0x55562608b240] mmco: unref short failure
[h264 @ 0x55562608b240] mmco: unref short failure
[h264 @ 0x55562608b240] mmco: unref short failure
[h264 @ 0x55858bfed140] mmco: unref short failure
[h264 @ 0x55561e3e1e40] mmco: unref short failure
[h264 @ 0x55766b94b100] mmco: unref short failure
[h264 @ 0x55766b94b100] mmco: unref short failure
[h264 @ 0x555625ef2680] mmco: unref short failure
[h264 @ 0x555625ef2680] mmco: unref short failure
  1%|          | 34/2910 [07:34<17:18:33, 21.67s/it][h264 @ 0x55767c9303c0] mmco: unref short failure
[h264 @ 0x55561a2bea40] mmco: unref short failure
[h264 @ 0x55561a2bea40] mmco: unref short failure
  1%|          | 35/2910 [07:52<16:22:58, 20.51s/it][h264 @ 0x557679b3cfc0] mmco: unref short failure
[h264 @ 0x557679b3cfc0] mmco: unref short failure
  1%|          | 36/2910 [07:58<12:55:27, 16.19s/it][h264 @ 0x55561ef0a400] mmco: unref short failure
[h264 @ 0x55561ef0a400] mmco: unref short failure
[h264 @ 0x55859130ffc0] mmco: unref short failure
[h264 @ 0x55859130ffc0] mmco: unref short failure
  1%|▏         | 37/2910 [08:04<10:28:47, 13.13s/it][h264 @ 0x55767b012e00] mmco: unref short failure
[h264 @ 0x55767b012e00] mmco: unref short failure
09/17/2024 00:04:08 - INFO - __main__ -   current idx HnCSd-QjKvs.136 from finetune_area returns wrong image/video, use 135996 instead.
  1%|▏         | 38/2910 [08:12<9:20:14, 11.70s/it]   1%|▏         | 39/2910 [08:18<7:59:03, 10.01s/it][h264 @ 0x563494fd5e40] mmco: unref short failure
[h264 @ 0x563494fd5e40] mmco: unref short failure
[h264 @ 0x55767ce80640] mmco: unref short failure
[h264 @ 0x55767ce80640] mmco: unref short failure
[h264 @ 0x55858e65be80] mmco: unref short failure
[h264 @ 0x56348fd1a000] mmco: unref short failure
[h264 @ 0x55858ded1f40] mmco: unref short failure
[h264 @ 0x55858ded1f40] mmco: unref short failure
[h264 @ 0x55561af0d480] mmco: unref short failure
[h264 @ 0x55561af0d480] mmco: unref short failure
[h264 @ 0x55561af0d480] mmco: unref short failure
[h264 @ 0x557670a57480] mmco: unref short failure
[h264 @ 0x555623804ec0] mmco: unref short failure
[h264 @ 0x56348d95a380] mmco: unref short failure
[h264 @ 0x56348d95a380] mmco: unref short failure
[h264 @ 0x5634974dda80] mmco: unref short failure
[h264 @ 0x5634974dda80] mmco: unref short failure
[h264 @ 0x56349a32af40] mmco: unref short failure
[h264 @ 0x55858b5e4b00] mmco: unref short failure
[h264 @ 0x55858b5e4b00] mmco: unref short failure
[h264 @ 0x55858a08e900] mmco: unref short failure
[h264 @ 0x558587edd0c0] mmco: unref short failure
[h264 @ 0x558587edd0c0] mmco: unref short failure
[h264 @ 0x558587edd0c0] mmco: unref short failure
[h264 @ 0x55766dcdb540] mmco: unref short failure
[h264 @ 0x55766dcdb540] mmco: unref short failure
[h264 @ 0x55766e4048c0] mmco: unref short failure
[h264 @ 0x55766e4048c0] mmco: unref short failure
[h264 @ 0x55766c5d3600] mmco: unref short failure
[h264 @ 0x55766c5d3600] mmco: unref short failure
  1%|▏         | 40/2910 [09:35<23:51:55, 29.94s/it][h264 @ 0x558583bf3d00] mmco: unref short failure
[h264 @ 0x55766c540c80] mmco: unref short failure
[h264 @ 0x55766c540c80] mmco: unref short failure
[h264 @ 0x56349403c7c0] mmco: unref short failure
[h264 @ 0x56349403c7c0] mmco: unref short failure
  1%|▏         | 41/2910 [09:50<20:21:11, 25.54s/it][h264 @ 0x5585844bac40] mmco: unref short failure
[h264 @ 0x5585844bac40] mmco: unref short failure
  1%|▏         | 42/2910 [10:07<18:19:02, 22.99s/it][h264 @ 0x55766de3b3c0] mmco: unref short failure
[h264 @ 0x55857f2e6a00] mmco: unref short failure
  1%|▏         | 43/2910 [10:20<15:52:07, 19.93s/it]09/17/2024 00:06:20 - INFO - __main__ -   current idx bcmbKN1aIOU.40 from finetune_area returns wrong image/video, use 123173 instead.
  2%|▏         | 44/2910 [10:26<12:37:02, 15.85s/it][h264 @ 0x5634953e7d80] mmco: unref short failure
  2%|▏         | 45/2910 [10:32<10:17:25, 12.93s/it][h264 @ 0x56349e8c7e80] mmco: unref short failure
  2%|▏         | 46/2910 [10:39<8:38:41, 10.87s/it]   2%|▏         | 47/2910 [10:45<7:31:49,  9.47s/it][h264 @ 0x56348cc63f80] mmco: unref short failure
[h264 @ 0x5585844b1e80] mmco: unref short failure
[h264 @ 0x55767c5ae6c0] mmco: unref short failure
[h264 @ 0x557675d0f340] mmco: unref short failure
[h264 @ 0x5634a0ada440] mmco: unref short failure
[h264 @ 0x5634a0ada440] mmco: unref short failure
[h264 @ 0x558588a93b40] mmco: unref short failure
[h264 @ 0x558588a93b40] mmco: unref short failure
[h264 @ 0x5576762535c0] mmco: unref short failure
[h264 @ 0x563494010ec0] mmco: unref short failure
[h264 @ 0x56349f7338c0] mmco: unref short failure
[h264 @ 0x56349f7338c0] mmco: unref short failure
[h264 @ 0x558583bd47c0] mmco: unref short failure
[h264 @ 0x55561faad080] mmco: unref short failure
[h264 @ 0x5634949b3ac0] mmco: unref short failure
[h264 @ 0x56349cfc2ac0] mmco: unref short failure
[h264 @ 0x56349cfc2ac0] mmco: unref short failure
  2%|▏         | 48/2910 [12:02<23:41:28, 29.80s/it][h264 @ 0x5576775c5780] mmco: unref short failure
[h264 @ 0x5576775c5780] mmco: unref short failure
[h264 @ 0x5576775c5780] mmco: unref short failure
[h264 @ 0x5576775c5780] mmco: unref short failure
[h264 @ 0x55562b0ba000] mmco: unref short failure
[h264 @ 0x55562b0ba000] mmco: unref short failure
[h264 @ 0x55562b0ba000] mmco: unref short failure
[h264 @ 0x55562b0ba000] mmco: unref short failure
[h264 @ 0x5556173806c0] mmco: unref short failure
[h264 @ 0x5556173806c0] mmco: unref short failure
  2%|▏         | 49/2910 [12:18<20:16:56, 25.52s/it]09/17/2024 00:08:16 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 00:08:16 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x557672ad2e80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558586a7e8c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x558599654ec0] mmco: unref short failure
[h264 @ 0x557669f7ab00] mmco: unref short failure
[h264 @ 0x557669f7ab00] mmco: unref short failure
[h264 @ 0x557669f7ab00] mmco: unref short failure
[h264 @ 0x557669f7ab00] mmco: unref short failure
[h264 @ 0x56348d486a80] mmco: unref short failure
[h264 @ 0x5576775c5500] mmco: unref short failure
[h264 @ 0x5576775c5500] mmco: unref short failure
[h264 @ 0x55767f27c3c0] mmco: unref short failure
[h264 @ 0x55767f27c3c0] mmco: unref short failure
[h264 @ 0x55767f27c3c0] mmco: unref short failure
[h264 @ 0x55767f27c3c0] mmco: unref short failure
[h264 @ 0x56349504dc80] mmco: unref short failure
[h264 @ 0x555620dd5380] mmco: unref short failure
[h264 @ 0x55767d5025c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.28it/s][A
  1%|          | 2/221 [00:00<00:30,  7.08it/s][A
  1%|▏         | 3/221 [00:00<00:40,  5.34it/s][A
  2%|▏         | 4/221 [00:00<00:34,  6.22it/s][A
  2%|▏         | 5/221 [00:00<00:32,  6.66it/s][A
  3%|▎         | 6/221 [00:00<00:31,  6.89it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.18it/s][A
  4%|▎         | 8/221 [00:01<00:36,  5.84it/s][A
  4%|▍         | 9/221 [00:01<00:34,  6.06it/s][A
  5%|▍         | 10/221 [00:01<00:37,  5.63it/s][A
  5%|▌         | 12/221 [00:03<01:38,  2.12it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.45it/s][A
  6%|▋         | 14/221 [00:03<01:07,  3.05it/s][A
  7%|▋         | 15/221 [00:03<00:55,  3.74it/s][A
  8%|▊         | 17/221 [00:04<00:51,  3.96it/s][A
  8%|▊         | 18/221 [00:04<00:46,  4.40it/s][A
  9%|▊         | 19/221 [00:04<00:41,  4.87it/s][A
  9%|▉         | 20/221 [00:04<00:39,  5.12it/s][A
 10%|▉         | 21/221 [00:04<00:42,  4.70it/s][A[h264 @ 0x557680440d80] mmco: unref short failure

 10%|▉         | 22/221 [00:08<04:00,  1.21s/it][A
 10%|█         | 23/221 [00:08<02:57,  1.11it/s][A
 11%|█         | 24/221 [00:08<02:13,  1.47it/s][A
 11%|█▏        | 25/221 [00:09<01:41,  1.93it/s][A
 12%|█▏        | 26/221 [00:09<01:21,  2.40it/s][A
 12%|█▏        | 27/221 [00:09<01:03,  3.08it/s][A
 13%|█▎        | 28/221 [00:09<00:52,  3.64it/s][A
 13%|█▎        | 29/221 [00:09<00:42,  4.49it/s][A
 14%|█▎        | 30/221 [00:09<00:39,  4.84it/s][A
 14%|█▍        | 31/221 [00:09<00:37,  5.08it/s][A
 14%|█▍        | 32/221 [00:10<00:31,  5.96it/s][A
 15%|█▍        | 33/221 [00:10<00:37,  5.05it/s][A
 15%|█▌        | 34/221 [00:10<00:32,  5.84it/s][A
 16%|█▌        | 35/221 [00:10<00:30,  6.10it/s][A
 16%|█▋        | 36/221 [00:10<00:27,  6.85it/s][A
 17%|█▋        | 37/221 [00:10<00:29,  6.26it/s][A
 17%|█▋        | 38/221 [00:10<00:28,  6.48it/s][A
 18%|█▊        | 40/221 [00:11<00:22,  7.89it/s][A
 19%|█▉        | 42/221 [00:11<00:21,  8.47it/s][A
 19%|█▉        | 43/221 [00:11<00:20,  8.70it/s][A
 20%|██        | 45/221 [00:12<00:32,  5.42it/s][A
 21%|██        | 46/221 [00:12<00:36,  4.75it/s][A
 21%|██▏       | 47/221 [00:17<03:53,  1.34s/it][A
 22%|██▏       | 48/221 [00:17<03:04,  1.06s/it][A
 22%|██▏       | 49/221 [00:17<02:27,  1.17it/s][A
 23%|██▎       | 50/221 [00:18<01:52,  1.52it/s][A
 23%|██▎       | 51/221 [00:18<01:30,  1.87it/s][A
 24%|██▎       | 52/221 [00:18<01:15,  2.24it/s][A
 24%|██▍       | 53/221 [00:18<00:59,  2.83it/s][A[h264 @ 0x55766ab97200] mmco: unref short failure

 24%|██▍       | 54/221 [00:22<03:55,  1.41s/it][A
 25%|██▍       | 55/221 [00:23<03:27,  1.25s/it][A
 26%|██▌       | 57/221 [00:23<01:58,  1.38it/s][A
 26%|██▌       | 58/221 [00:23<01:32,  1.75it/s][A
 27%|██▋       | 59/221 [00:23<01:13,  2.21it/s][A
 27%|██▋       | 60/221 [00:24<01:08,  2.36it/s][A
 28%|██▊       | 61/221 [00:24<00:55,  2.86it/s][A
 28%|██▊       | 62/221 [00:24<00:46,  3.45it/s][A
 29%|██▉       | 64/221 [00:24<00:31,  4.97it/s][A
 29%|██▉       | 65/221 [00:24<00:28,  5.43it/s][A
 30%|██▉       | 66/221 [00:29<03:21,  1.30s/it][A
 30%|███       | 67/221 [00:29<02:41,  1.05s/it][A
 31%|███       | 68/221 [00:29<02:03,  1.24it/s][A
 31%|███       | 69/221 [00:30<01:46,  1.43it/s][A
 32%|███▏      | 70/221 [00:30<01:19,  1.89it/s][A
 32%|███▏      | 71/221 [00:30<01:03,  2.38it/s][A
 33%|███▎      | 72/221 [00:30<00:51,  2.88it/s][A
 33%|███▎      | 73/221 [00:30<00:46,  3.15it/s][A
 33%|███▎      | 74/221 [00:31<00:43,  3.39it/s][A
 34%|███▍      | 75/221 [00:31<00:46,  3.15it/s][A
 34%|███▍      | 76/221 [00:31<00:40,  3.57it/s][A
 35%|███▍      | 77/221 [00:31<00:33,  4.29it/s][A
 35%|███▌      | 78/221 [00:32<00:32,  4.35it/s][A
 36%|███▌      | 79/221 [00:32<00:38,  3.71it/s][A
 36%|███▌      | 80/221 [00:32<00:32,  4.38it/s][A
 37%|███▋      | 81/221 [00:32<00:27,  5.06it/s][A
 37%|███▋      | 82/221 [00:33<00:30,  4.61it/s][A
 38%|███▊      | 83/221 [00:33<00:25,  5.38it/s][A
 38%|███▊      | 84/221 [00:33<00:21,  6.24it/s][A
 38%|███▊      | 85/221 [00:33<00:23,  5.88it/s][A
 39%|███▉      | 86/221 [00:33<00:23,  5.68it/s][A
 39%|███▉      | 87/221 [00:33<00:23,  5.78it/s][A
 40%|███▉      | 88/221 [00:34<00:24,  5.34it/s][A
 40%|████      | 89/221 [00:34<00:30,  4.39it/s][A
 41%|████      | 90/221 [00:34<00:25,  5.09it/s][A
 42%|████▏     | 92/221 [00:34<00:18,  6.91it/s][A
 42%|████▏     | 93/221 [00:35<00:25,  4.94it/s][A[h264 @ 0x56349cc49300] mmco: unref short failure
[h264 @ 0x56349cc49300] mmco: unref short failure

 43%|████▎     | 94/221 [00:35<00:25,  4.93it/s][A[h264 @ 0x56349cc49300] mmco: unref short failure
[h264 @ 0x56349cc49300] mmco: unref short failure

 43%|████▎     | 95/221 [00:35<00:28,  4.36it/s][A
 43%|████▎     | 96/221 [00:35<00:31,  4.01it/s][A
 44%|████▍     | 97/221 [00:35<00:27,  4.45it/s][A
 44%|████▍     | 98/221 [00:36<00:24,  5.01it/s][A
 45%|████▍     | 99/221 [00:36<00:21,  5.61it/s][A
 46%|████▌     | 101/221 [00:36<00:18,  6.43it/s][A
 46%|████▌     | 102/221 [00:36<00:20,  5.86it/s][A
 47%|████▋     | 103/221 [00:36<00:18,  6.51it/s][A
 47%|████▋     | 104/221 [00:36<00:17,  6.56it/s][A
 48%|████▊     | 105/221 [00:37<00:19,  5.96it/s][A[h264 @ 0x558583bf3840] mmco: unref short failure
[h264 @ 0x558583bf3840] mmco: unref short failure

 48%|████▊     | 106/221 [00:37<00:32,  3.56it/s][A
 48%|████▊     | 107/221 [00:37<00:27,  4.13it/s][A
 49%|████▉     | 108/221 [00:37<00:22,  4.97it/s][A
 49%|████▉     | 109/221 [00:38<00:19,  5.75it/s][A
 50%|█████     | 111/221 [00:38<00:18,  5.86it/s][A
 51%|█████     | 112/221 [00:38<00:17,  6.08it/s][A
 52%|█████▏    | 114/221 [00:38<00:14,  7.40it/s][A
 52%|█████▏    | 115/221 [00:38<00:15,  7.05it/s][A
 52%|█████▏    | 116/221 [00:44<02:23,  1.37s/it][A[h264 @ 0x55562c4b2780] mmco: unref short failure
[h264 @ 0x55562c4b2780] mmco: unref short failure

 53%|█████▎    | 117/221 [00:44<01:54,  1.10s/it][A
 53%|█████▎    | 118/221 [00:44<01:26,  1.19it/s][A
 54%|█████▍    | 120/221 [00:44<00:51,  1.95it/s][A
 55%|█████▌    | 122/221 [00:44<00:36,  2.74it/s][A
 56%|█████▌    | 123/221 [00:45<00:31,  3.14it/s][A[h264 @ 0x558586689e40] mmco: unref short failure

 56%|█████▌    | 124/221 [00:45<00:26,  3.68it/s][A[h264 @ 0x558586689e40] mmco: unref short failure

 57%|█████▋    | 125/221 [00:45<00:29,  3.23it/s][A
 57%|█████▋    | 126/221 [00:45<00:29,  3.22it/s][A
 57%|█████▋    | 127/221 [00:46<00:30,  3.03it/s][A
 58%|█████▊    | 128/221 [00:46<00:38,  2.43it/s][A
 58%|█████▊    | 129/221 [00:47<00:31,  2.97it/s][A
 59%|█████▉    | 130/221 [00:47<00:27,  3.26it/s][A
 59%|█████▉    | 131/221 [00:47<00:23,  3.91it/s][A
 60%|█████▉    | 132/221 [00:47<00:25,  3.54it/s][A
 60%|██████    | 133/221 [00:48<00:24,  3.60it/s][A
 61%|██████    | 134/221 [00:48<00:25,  3.46it/s][A
 61%|██████    | 135/221 [00:49<00:39,  2.19it/s][A
 62%|██████▏   | 136/221 [00:50<00:46,  1.84it/s][A
 62%|██████▏   | 137/221 [00:54<02:15,  1.62s/it][A
 62%|██████▏   | 138/221 [00:54<01:45,  1.28s/it][A
 63%|██████▎   | 139/221 [00:55<01:30,  1.10s/it][A
 63%|██████▎   | 140/221 [00:55<01:13,  1.10it/s][A
 64%|██████▍   | 141/221 [00:56<01:01,  1.30it/s][A
 64%|██████▍   | 142/221 [00:56<00:48,  1.62it/s][A
 65%|██████▍   | 143/221 [00:56<00:38,  2.04it/s][A
 66%|██████▌   | 145/221 [00:56<00:23,  3.17it/s][A
 67%|██████▋   | 147/221 [00:57<00:17,  4.30it/s][A
 67%|██████▋   | 148/221 [00:57<00:17,  4.23it/s][A
 67%|██████▋   | 149/221 [00:57<00:14,  4.91it/s][A
 68%|██████▊   | 150/221 [00:57<00:17,  3.98it/s][A
 68%|██████▊   | 151/221 [00:58<00:21,  3.24it/s][A
 69%|██████▉   | 152/221 [00:58<00:19,  3.54it/s][A
 69%|██████▉   | 153/221 [00:58<00:17,  3.85it/s][A
 70%|██████▉   | 154/221 [00:58<00:15,  4.26it/s][A
 70%|███████   | 155/221 [00:59<00:15,  4.31it/s][A09/17/2024 00:11:42 - INFO - __main__ -   current idx 3_mqkjCXK8E.83 from finetune_area returns wrong image/video, use 111731 instead.
[h264 @ 0x557675e01540] mmco: unref short failure
[h264 @ 0x557675e01540] mmco: unref short failure
[h264 @ 0x5556186e01c0] mmco: unref short failure

 71%|███████   | 156/221 [01:04<01:48,  1.66s/it][A
 71%|███████   | 157/221 [01:04<01:19,  1.24s/it][A
 71%|███████▏  | 158/221 [01:04<00:57,  1.09it/s][A
 72%|███████▏  | 159/221 [01:04<00:42,  1.47it/s][A
 72%|███████▏  | 160/221 [01:04<00:31,  1.93it/s][A
 73%|███████▎  | 161/221 [01:05<00:25,  2.38it/s][A
 73%|███████▎  | 162/221 [01:05<00:21,  2.69it/s][A
 74%|███████▍  | 163/221 [01:05<00:18,  3.20it/s][A
 74%|███████▍  | 164/221 [01:05<00:14,  4.00it/s][A
 75%|███████▍  | 165/221 [01:10<01:34,  1.68s/it][A[h264 @ 0x557671744500] mmco: unref short failure

 76%|███████▌  | 167/221 [01:13<01:27,  1.63s/it][A
 76%|███████▌  | 168/221 [01:13<01:07,  1.28s/it][A
 76%|███████▋  | 169/221 [01:14<00:55,  1.06s/it][A
 77%|███████▋  | 170/221 [01:14<00:43,  1.17it/s][A
 77%|███████▋  | 171/221 [01:14<00:32,  1.54it/s][A
 78%|███████▊  | 173/221 [01:15<00:19,  2.51it/s][A
 79%|███████▊  | 174/221 [01:15<00:15,  2.96it/s][A
 80%|███████▉  | 176/221 [01:15<00:10,  4.24it/s][A
 80%|████████  | 177/221 [01:15<00:09,  4.45it/s][A
 81%|████████  | 178/221 [01:19<00:47,  1.09s/it][A
 81%|████████▏ | 180/221 [01:19<00:27,  1.49it/s][A
 82%|████████▏ | 182/221 [01:19<00:17,  2.19it/s][A
 83%|████████▎ | 184/221 [01:19<00:12,  3.06it/s][A
 84%|████████▍ | 186/221 [01:19<00:08,  4.11it/s][A
 85%|████████▌ | 188/221 [01:20<00:06,  5.12it/s][A
 86%|████████▌ | 190/221 [01:20<00:05,  5.93it/s][A
 87%|████████▋ | 192/221 [01:20<00:03,  7.53it/s][A
 88%|████████▊ | 194/221 [01:20<00:03,  8.66it/s][A
 89%|████████▊ | 196/221 [01:20<00:02, 10.23it/s][A
 90%|████████▉ | 198/221 [01:20<00:02, 10.52it/s][A
 90%|█████████ | 200/221 [01:21<00:02,  9.65it/s][A
 91%|█████████▏| 202/221 [01:21<00:02,  9.01it/s][A
 92%|█████████▏| 204/221 [01:21<00:01,  9.63it/s][A
 93%|█████████▎| 206/221 [01:21<00:01,  8.95it/s][A
 94%|█████████▍| 208/221 [01:21<00:01,  9.76it/s][A
 95%|█████████▌| 210/221 [01:22<00:01,  9.17it/s][A
 95%|█████████▌| 211/221 [01:22<00:01,  9.05it/s][A
 96%|█████████▌| 212/221 [01:22<00:00,  9.06it/s][A
 96%|█████████▋| 213/221 [01:23<00:01,  4.55it/s][A
 97%|█████████▋| 215/221 [01:23<00:00,  6.35it/s][A09/17/2024 00:12:06 - INFO - __main__ -   current idx 6mjP2GVtPHA.82 from finetune_area returns wrong image/video, use 90531 instead.

 98%|█████████▊| 216/221 [01:27<00:05,  1.14s/it][A
 99%|█████████▊| 218/221 [01:28<00:02,  1.37it/s][A09/17/2024 00:12:11 - INFO - __main__ -   current idx DnpQpBpq4-8.30 from finetune_area returns wrong image/video, use 60115 instead.

 99%|█████████▉| 219/221 [01:33<00:03,  1.66s/it][A100%|█████████▉| 220/221 [01:33<00:00,  2.36it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:07,  3.27it/s][A
  1%|          | 2/221 [00:00<01:05,  3.35it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.34it/s][A[h264 @ 0x558592d9a580] mmco: unref short failure
[h264 @ 0x558592d9a580] mmco: unref short failure

  2%|▏         | 4/221 [00:01<01:04,  3.37it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 6/221 [00:01<01:03,  3.36it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.38it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.38it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.31it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.16it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.23it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.28it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.28it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.26it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.29it/s][A
  8%|▊         | 18/221 [00:05<01:03,  3.22it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.26it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.33it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.35it/s][A[h264 @ 0x558589d849c0] mmco: unref short failure
[h264 @ 0x558589d849c0] mmco: unref short failure

 10%|█         | 23/221 [00:06<00:58,  3.37it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.38it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.39it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.39it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.35it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.35it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.36it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.38it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.39it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.38it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.36it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.38it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.34it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.34it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.35it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.37it/s][A09/17/2024 00:12:28 - INFO - __main__ -   current idx Lzt-UMekcLY.51 from finetune_area returns wrong image/video, use 144801 instead.

 19%|█▊        | 41/221 [00:12<00:53,  3.38it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.38it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.39it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.39it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.39it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.40it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.40it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.40it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.40it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.41it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.41it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.41it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.41it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.41it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:38,  5.75it/s][A
  1%|          | 2/221 [00:00<01:16,  2.87it/s][A
  1%|▏         | 3/221 [00:01<01:27,  2.48it/s][A
  2%|▏         | 4/221 [00:01<01:21,  2.66it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.14it/s][A
  3%|▎         | 6/221 [00:01<00:54,  3.93it/s][A
  3%|▎         | 7/221 [00:01<00:46,  4.59it/s][A
  4%|▎         | 8/221 [00:02<00:47,  4.49it/s][A
  4%|▍         | 9/221 [00:02<01:21,  2.59it/s][A
  5%|▍         | 10/221 [00:03<01:21,  2.58it/s][A
  5%|▍         | 11/221 [00:03<01:24,  2.50it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.67it/s][A
  6%|▌         | 13/221 [00:04<01:35,  2.18it/s][A
  6%|▋         | 14/221 [00:04<01:21,  2.55it/s][A
  7%|▋         | 15/221 [00:05<01:17,  2.67it/s][A
  7%|▋         | 16/221 [00:05<01:07,  3.02it/s][A
  8%|▊         | 17/221 [00:06<01:19,  2.57it/s][A
  8%|▊         | 18/221 [00:06<01:21,  2.50it/s][A
  9%|▊         | 19/221 [00:06<01:09,  2.89it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 22/221 [00:07<00:51,  3.89it/s][A
 10%|█         | 23/221 [00:07<00:49,  4.02it/s][A
 11%|█         | 24/221 [00:07<00:46,  4.22it/s][A
 11%|█▏        | 25/221 [00:07<00:44,  4.41it/s][A
 12%|█▏        | 26/221 [00:08<00:40,  4.79it/s][A
 12%|█▏        | 27/221 [00:08<00:47,  4.07it/s][A
 13%|█▎        | 28/221 [00:08<00:52,  3.70it/s][A
 13%|█▎        | 29/221 [00:09<01:07,  2.85it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.35it/s][A
 14%|█▍        | 31/221 [00:09<00:50,  3.76it/s][A
 14%|█▍        | 32/221 [00:10<00:56,  3.35it/s][A
 15%|█▍        | 33/221 [00:10<00:50,  3.74it/s][A
 15%|█▌        | 34/221 [00:10<00:49,  3.76it/s][A
 16%|█▌        | 35/221 [00:10<00:42,  4.33it/s][A
 16%|█▋        | 36/221 [00:11<00:53,  3.48it/s][A
 17%|█▋        | 37/221 [00:11<00:53,  3.46it/s][A
 17%|█▋        | 38/221 [00:11<00:49,  3.67it/s][A
 18%|█▊        | 39/221 [00:11<00:45,  3.99it/s][A
 18%|█▊        | 40/221 [00:11<00:41,  4.37it/s][A
 19%|█▊        | 41/221 [00:12<00:37,  4.78it/s][A
 19%|█▉        | 42/221 [00:12<00:34,  5.12it/s][A
 19%|█▉        | 43/221 [00:12<00:44,  4.01it/s][A
 20%|█▉        | 44/221 [00:12<00:44,  3.96it/s][A
 20%|██        | 45/221 [00:13<01:03,  2.76it/s][A
 21%|██        | 46/221 [00:13<01:04,  2.73it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.39it/s][A
 22%|██▏       | 48/221 [00:14<00:42,  4.07it/s][A
 22%|██▏       | 49/221 [00:14<00:35,  4.91it/s][A
 23%|██▎       | 50/221 [00:14<00:43,  3.92it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.14it/s][A
 24%|██▎       | 52/221 [00:14<00:35,  4.78it/s][A
 24%|██▍       | 53/221 [00:15<00:46,  3.65it/s][A
 24%|██▍       | 54/221 [00:15<00:47,  3.50it/s][A
 25%|██▍       | 55/221 [00:15<00:43,  3.83it/s][A
 25%|██▌       | 56/221 [00:16<00:45,  3.60it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.40it/s][A
 26%|██▌       | 58/221 [00:16<00:40,  4.06it/s][A
 27%|██▋       | 59/221 [00:16<00:40,  4.00it/s][A
 27%|██▋       | 60/221 [00:17<00:37,  4.35it/s][A
 28%|██▊       | 61/221 [00:17<00:44,  3.57it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.87it/s][A
 29%|██▊       | 63/221 [00:18<00:40,  3.89it/s][A
 29%|██▉       | 64/221 [00:18<00:34,  4.57it/s][A
 29%|██▉       | 65/221 [00:18<00:35,  4.36it/s][A
 30%|██▉       | 66/221 [00:18<00:43,  3.60it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.35it/s][A
 31%|███       | 68/221 [00:19<00:48,  3.18it/s][A
 31%|███       | 69/221 [00:20<01:13,  2.06it/s][A
 32%|███▏      | 70/221 [00:20<01:02,  2.43it/s][A
 32%|███▏      | 71/221 [00:21<01:01,  2.42it/s][A
 33%|███▎      | 72/221 [00:21<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:21<00:50,  2.93it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.45it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.26it/s][A
 34%|███▍      | 76/221 [00:22<00:45,  3.21it/s][A
 35%|███▍      | 77/221 [00:22<00:36,  3.89it/s][A
 35%|███▌      | 78/221 [00:22<00:41,  3.47it/s][A
 36%|███▌      | 79/221 [00:23<00:34,  4.13it/s][A
 36%|███▌      | 80/221 [00:23<00:33,  4.22it/s][A
 37%|███▋      | 81/221 [00:23<00:30,  4.66it/s][A
 37%|███▋      | 82/221 [00:23<00:34,  4.03it/s][A
 38%|███▊      | 83/221 [00:23<00:32,  4.31it/s][A
 38%|███▊      | 84/221 [00:24<00:41,  3.31it/s][A
 38%|███▊      | 85/221 [00:24<00:43,  3.10it/s][A
 39%|███▉      | 86/221 [00:24<00:35,  3.83it/s][A
 39%|███▉      | 87/221 [00:25<00:42,  3.13it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.44it/s][A
 40%|████      | 89/221 [00:26<00:46,  2.85it/s][A
 41%|████      | 90/221 [00:26<00:47,  2.77it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.47it/s][A
 42%|████▏     | 92/221 [00:26<00:34,  3.72it/s][A
 42%|████▏     | 93/221 [00:27<00:40,  3.18it/s][A
 43%|████▎     | 94/221 [00:27<00:40,  3.13it/s][A
 43%|████▎     | 95/221 [00:28<00:58,  2.16it/s][A
 43%|████▎     | 96/221 [00:28<00:52,  2.38it/s][A
 44%|████▍     | 97/221 [00:29<00:50,  2.44it/s][A
 44%|████▍     | 98/221 [00:29<00:48,  2.55it/s][A
 45%|████▍     | 99/221 [00:29<00:43,  2.83it/s][A
 45%|████▌     | 100/221 [00:30<00:44,  2.69it/s][A
 46%|████▌     | 101/221 [00:30<00:39,  3.07it/s][A
 46%|████▌     | 102/221 [00:30<00:38,  3.07it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.45it/s][A
 48%|████▊     | 105/221 [00:31<00:25,  4.61it/s][A
 48%|████▊     | 106/221 [00:31<00:29,  3.84it/s][A
 49%|████▉     | 108/221 [00:31<00:20,  5.44it/s][A
 49%|████▉     | 109/221 [00:31<00:20,  5.44it/s][A
 50%|████▉     | 110/221 [00:32<00:22,  4.94it/s][A
 50%|█████     | 111/221 [00:32<00:24,  4.53it/s][A
 51%|█████     | 112/221 [00:32<00:28,  3.82it/s][A
 51%|█████     | 113/221 [00:33<00:29,  3.65it/s][A
 52%|█████▏    | 114/221 [00:33<00:24,  4.39it/s][A
 52%|█████▏    | 116/221 [00:33<00:20,  5.22it/s][A
 53%|█████▎    | 117/221 [00:33<00:21,  4.86it/s][A
 53%|█████▎    | 118/221 [00:33<00:22,  4.49it/s][A
 54%|█████▍    | 119/221 [00:34<00:27,  3.76it/s][A
 54%|█████▍    | 120/221 [00:34<00:30,  3.35it/s][A
 55%|█████▍    | 121/221 [00:34<00:28,  3.50it/s][A
 55%|█████▌    | 122/221 [00:35<00:30,  3.25it/s][A
 56%|█████▌    | 123/221 [00:35<00:26,  3.64it/s][A
 56%|█████▌    | 124/221 [00:36<00:36,  2.69it/s][A
 57%|█████▋    | 125/221 [00:36<00:39,  2.43it/s][A
 57%|█████▋    | 126/221 [00:36<00:34,  2.74it/s][A
 57%|█████▋    | 127/221 [00:37<00:33,  2.80it/s][A
 58%|█████▊    | 128/221 [00:37<00:30,  3.04it/s][A
 58%|█████▊    | 129/221 [00:37<00:25,  3.68it/s][A
 59%|█████▉    | 130/221 [00:37<00:22,  4.00it/s][A
 59%|█████▉    | 131/221 [00:38<00:20,  4.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:27,  3.28it/s][A
 60%|██████    | 133/221 [00:38<00:31,  2.81it/s][A
 61%|██████    | 134/221 [00:39<00:30,  2.82it/s][A
 61%|██████    | 135/221 [00:39<00:27,  3.10it/s][A
 62%|██████▏   | 136/221 [00:39<00:27,  3.07it/s][A
 62%|██████▏   | 137/221 [00:40<00:25,  3.27it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.54it/s][A
 63%|██████▎   | 139/221 [00:40<00:29,  2.79it/s][A
 63%|██████▎   | 140/221 [00:41<00:25,  3.19it/s][A
 64%|██████▍   | 141/221 [00:41<00:24,  3.30it/s][A
 64%|██████▍   | 142/221 [00:41<00:21,  3.75it/s][A
 65%|██████▍   | 143/221 [00:41<00:23,  3.29it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.46it/s][A
 66%|██████▌   | 145/221 [00:42<00:27,  2.80it/s][A
 66%|██████▌   | 146/221 [00:43<00:25,  2.90it/s][A
 67%|██████▋   | 147/221 [00:43<00:20,  3.53it/s][A
 67%|██████▋   | 148/221 [00:44<00:31,  2.31it/s][A
 67%|██████▋   | 149/221 [00:44<00:25,  2.83it/s][A
 68%|██████▊   | 150/221 [00:44<00:22,  3.16it/s][A
 68%|██████▊   | 151/221 [00:45<00:33,  2.12it/s][A
 69%|██████▉   | 152/221 [00:45<00:35,  1.92it/s][A
 69%|██████▉   | 153/221 [00:46<00:31,  2.14it/s][A
 70%|██████▉   | 154/221 [00:46<00:25,  2.61it/s][A
 70%|███████   | 155/221 [00:46<00:22,  2.89it/s][A
 71%|███████   | 156/221 [00:46<00:21,  3.07it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.23it/s][A
 71%|███████▏  | 158/221 [00:47<00:19,  3.28it/s][A
 72%|███████▏  | 159/221 [00:47<00:17,  3.55it/s][A
 72%|███████▏  | 160/221 [00:48<00:19,  3.08it/s][A
 73%|███████▎  | 161/221 [00:48<00:15,  3.81it/s][A
 74%|███████▍  | 163/221 [00:48<00:11,  4.84it/s][A
 74%|███████▍  | 164/221 [00:48<00:12,  4.48it/s][A
 75%|███████▍  | 165/221 [00:49<00:12,  4.35it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:14,  3.74it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  3.79it/s][A
 77%|███████▋  | 170/221 [00:50<00:13,  3.83it/s][A
 77%|███████▋  | 171/221 [00:50<00:15,  3.22it/s][A
 78%|███████▊  | 172/221 [00:51<00:13,  3.53it/s][A
 78%|███████▊  | 173/221 [00:51<00:13,  3.57it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.39it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.16it/s][A
 80%|███████▉  | 176/221 [00:52<00:11,  3.87it/s][A
 80%|████████  | 177/221 [00:52<00:10,  4.22it/s][A
 81%|████████  | 178/221 [00:53<00:14,  2.91it/s][A
 81%|████████  | 179/221 [00:53<00:14,  2.92it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.62it/s][A
 82%|████████▏ | 181/221 [00:53<00:12,  3.30it/s][A
 82%|████████▏ | 182/221 [00:54<00:09,  3.98it/s][A
 83%|████████▎ | 183/221 [00:54<00:09,  3.86it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.43it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.62it/s][A
 84%|████████▍ | 186/221 [00:55<00:12,  2.85it/s][A
 85%|████████▌ | 188/221 [00:55<00:08,  3.83it/s][A
 86%|████████▌ | 189/221 [00:55<00:07,  4.09it/s][A
 86%|████████▌ | 190/221 [00:56<00:08,  3.84it/s][A
 87%|████████▋ | 192/221 [00:56<00:06,  4.60it/s][A
 87%|████████▋ | 193/221 [00:56<00:07,  3.98it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.72it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  3.79it/s][A
 89%|████████▊ | 196/221 [00:57<00:08,  3.11it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.32it/s][A
 90%|█████████ | 199/221 [00:58<00:05,  3.83it/s][A
 90%|█████████ | 200/221 [00:58<00:04,  4.22it/s][A
 91%|█████████ | 201/221 [00:58<00:04,  4.88it/s][A
 91%|█████████▏| 202/221 [00:59<00:03,  5.11it/s][A
 92%|█████████▏| 203/221 [00:59<00:03,  4.78it/s][A
 92%|█████████▏| 204/221 [00:59<00:03,  4.64it/s][A
 93%|█████████▎| 205/221 [00:59<00:03,  4.78it/s][A
 93%|█████████▎| 206/221 [01:00<00:03,  3.97it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.20it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.70it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.73it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.48it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.58it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.48it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.46it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.60it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.77it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.74it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.80it/s][A
 99%|█████████▊| 218/221 [01:04<00:01,  2.59it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.67it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.08it/s][A
100%|██████████| 221/221 [01:05<00:00,  2.87it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'area_r1': 30.8, 'area_recall': '30.8/50.7/59.2', 'area_ravg': 46.9}
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'forward_r1': 34.2, 'forward_recall': '34.2/64.6/76.7', 'forward_ravg': 58.5}
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'area_video_r1': 34.5, 'area_video_recall': '34.5/65.4/76.7', 'area_video_ravg': 58.9}
09/17/2024 00:14:29 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 49=======

09/17/2024 00:14:29 - INFO - __main__ -   {'area_video_r1': 34.5, 'area_video_recall': '34.5/65.4/76.7', 'area_video_ravg': 58.9}
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'area_video_r1': 48.8, 'area_video_recall': '48.8/69.0/75.5', 'area_video_ravg': 64.4, 'area_video_back_r1': 44.2, 'area_video_back_recall': '44.2/69.5/76.8', 'area_video_back_ravg': 63.5}
09/17/2024 00:14:29 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 49=======

09/17/2024 00:14:29 - INFO - __main__ -   {'area_video_r1': 48.8, 'area_video_recall': '48.8/69.0/75.5', 'area_video_ravg': 64.4, 'area_video_back_r1': 44.2, 'area_video_back_recall': '44.2/69.5/76.8', 'area_video_back_ravg': 63.5}
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/65.0/73.4', 'video_ravg': 58.4}
09/17/2024 00:14:29 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 49=======

09/17/2024 00:14:29 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/65.0/73.4', 'video_ravg': 58.4}
09/17/2024 00:14:29 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 49--===========

09/17/2024 00:14:29 - INFO - __main__ -   {'video_r1': 49.4, 'video_recall': '49.4/71.2/78.7', 'video_ravg': 66.4}
09/17/2024 00:14:29 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 49=======

09/17/2024 00:14:29 - INFO - __main__ -   {'video_r1': 49.4, 'video_recall': '49.4/71.2/78.7', 'video_ravg': 66.4}
09/17/2024 00:15:06 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007912537083029747, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 4.6464009284973145, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.226093292236328, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 6.880406856536865}
[h264 @ 0x56349339bbc0] mmco: unref short failure
[h264 @ 0x56349339bbc0] mmco: unref short failure
[h264 @ 0x56349339bbc0] mmco: unref short failure
[h264 @ 0x56349339bbc0] mmco: unref short failure
[h264 @ 0x558583b75880] mmco: unref short failure
[h264 @ 0x558583b75880] mmco: unref short failure
  2%|▏         | 50/2910 [19:10<112:27:00, 141.55s/it]  2%|▏         | 51/2910 [19:14<79:36:54, 100.25s/it]   2%|▏         | 52/2910 [19:18<56:43:24, 71.45s/it] [h264 @ 0x5585831a1780] mmco: unref short failure
[h264 @ 0x5634a2cb2140] mmco: unref short failure
[h264 @ 0x5634a2cb2140] mmco: unref short failure
  2%|▏         | 53/2910 [19:22<40:40:57, 51.26s/it]  2%|▏         | 54/2910 [19:28<29:48:12, 37.57s/it]  2%|▏         | 55/2910 [19:33<22:07:25, 27.90s/it][h264 @ 0x555623f99ac0] mmco: unref short failure
  2%|▏         | 56/2910 [19:39<16:58:55, 21.42s/it][h264 @ 0x5585832d4400] mmco: unref short failure
[h264 @ 0x56348dbe33c0] mmco: unref short failure
  2%|▏         | 57/2910 [19:47<13:47:43, 17.41s/it][h264 @ 0x558589d849c0] mmco: unref short failure
[h264 @ 0x555627190a00] mmco: unref short failure
[h264 @ 0x555627190a00] mmco: unref short failure
[h264 @ 0x5585934f5ec0] mmco: unref short failure
[h264 @ 0x55859268d6c0] mmco: unref short failure
[h264 @ 0x55859268d6c0] mmco: unref short failure
  2%|▏         | 58/2910 [19:54<11:08:35, 14.07s/it][h264 @ 0x55563039bf00] mmco: unref short failure
[h264 @ 0x55563039bf00] mmco: unref short failure
[h264 @ 0x55767a4d2380] mmco: unref short failure
[h264 @ 0x55767a4d2380] mmco: unref short failure
  2%|▏         | 59/2910 [20:00<9:16:27, 11.71s/it] [h264 @ 0x558582658b40] mmco: unref short failure
[h264 @ 0x558582658b40] mmco: unref short failure
[h264 @ 0x5556305071c0] mmco: unref short failure
[h264 @ 0x5556305071c0] mmco: unref short failure
  2%|▏         | 60/2910 [20:06<7:59:05, 10.09s/it]  2%|▏         | 61/2910 [20:12<6:59:29,  8.83s/it][h264 @ 0x55562db12440] mmco: unref short failure
[h264 @ 0x55562db12440] mmco: unref short failure
  2%|▏         | 62/2910 [20:19<6:31:50,  8.26s/it][h264 @ 0x5585885dd7c0] mmco: unref short failure
[h264 @ 0x5556214f4180] mmco: unref short failure
  2%|▏         | 63/2910 [20:27<6:26:31,  8.15s/it][h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
  2%|▏         | 64/2910 [20:34<6:16:32,  7.94s/it][h264 @ 0x558589f2af80] mmco: unref short failure
[h264 @ 0x558589f2af80] mmco: unref short failure
  2%|▏         | 65/2910 [20:40<5:49:10,  7.36s/it][h264 @ 0x5556263b15c0] mmco: unref short failure
[h264 @ 0x5634a1db7a00] mmco: unref short failure
[h264 @ 0x563498eba900] mmco: unref short failure
[h264 @ 0x55562600d500] mmco: unref short failure
[h264 @ 0x55562600d500] mmco: unref short failure
[h264 @ 0x55561ab51200] mmco: unref short failure
[h264 @ 0x557672617e80] mmco: unref short failure
[h264 @ 0x557672617e80] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x557677ceea40] mmco: unref short failure
[h264 @ 0x557677ceea40] mmco: unref short failure
09/17/2024 00:17:01 - INFO - __main__ -   current idx LGB6ZEjGm7Q.29 from finetune_area returns wrong image/video, use 134176 instead.
09/17/2024 00:17:05 - INFO - __main__ -   current idx AqyH6qo2WI0.9 from finetune_area returns wrong image/video, use 117540 instead.
[h264 @ 0x55858eaaf3c0] mmco: unref short failure
[h264 @ 0x56349e5e5f40] mmco: unref short failure
[h264 @ 0x56349e5e5f40] mmco: unref short failure
[h264 @ 0x5576832137c0] mmco: unref short failure
[h264 @ 0x5576832137c0] mmco: unref short failure
[h264 @ 0x558591f80240] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x5585826ff140] mmco: unref short failure
[h264 @ 0x55767af92380] mmco: unref short failure
  2%|▏         | 66/2910 [21:37<17:30:16, 22.16s/it][h264 @ 0x555621bae340] mmco: unref short failure
  2%|▏         | 67/2910 [21:43<13:40:02, 17.31s/it][h264 @ 0x55766b2b2440] mmco: unref short failure
[h264 @ 0x55766b2b2440] mmco: unref short failure
[h264 @ 0x56349dbda280] mmco: unref short failure
[h264 @ 0x56349dbda280] mmco: unref short failure
  2%|▏         | 68/2910 [21:49<11:01:53, 13.97s/it]  2%|▏         | 69/2910 [21:59<9:59:23, 12.66s/it] [h264 @ 0x557672cca840] mmco: unref short failure
[h264 @ 0x557672cca840] mmco: unref short failure
[h264 @ 0x5556312bf880] mmco: unref short failure
[h264 @ 0x5556312bf880] mmco: unref short failure
[h264 @ 0x557682e5f680] mmco: unref short failure
  2%|▏         | 70/2910 [22:07<8:54:06, 11.28s/it][h264 @ 0x5585869275c0] mmco: unref short failure
[h264 @ 0x5585869275c0] mmco: unref short failure
[h264 @ 0x555617ffb280] mmco: unref short failure
[h264 @ 0x555617ffb280] mmco: unref short failure
  2%|▏         | 71/2910 [22:21<9:28:08, 12.01s/it][h264 @ 0x557678e74100] mmco: unref short failure
[h264 @ 0x557678e74100] mmco: unref short failure
[h264 @ 0x557672623e00] mmco: unref short failure
[h264 @ 0x557672623e00] mmco: unref short failure
  2%|▏         | 72/2910 [22:27<8:04:51, 10.25s/it]  3%|▎         | 73/2910 [22:33<7:06:29,  9.02s/it][h264 @ 0x56348f1a4e40] mmco: unref short failure
09/17/2024 00:18:43 - INFO - __main__ -   current idx UGjfq2kyBqs.34 from finetune_area returns wrong image/video, use 93098 instead.
[h264 @ 0x56348fa89700] mmco: unref short failure
[h264 @ 0x56348fa89700] mmco: unref short failure
[h264 @ 0x55767505a380] mmco: unref short failure
[h264 @ 0x55561aad9ec0] mmco: unref short failure
[h264 @ 0x55561aad9ec0] mmco: unref short failure
[h264 @ 0x5634a399b440] mmco: unref short failure
09/17/2024 00:19:19 - INFO - __main__ -   current idx 1cJZfRW1WbY.33 from finetune_area returns wrong image/video, use 109243 instead.
09/17/2024 00:19:26 - INFO - __main__ -   current idx Yn3caOZk6dk.38 from finetune_area returns wrong image/video, use 36582 instead.
[h264 @ 0x5576754315c0] mmco: unref short failure
[h264 @ 0x55768321c680] mmco: unref short failure
[h264 @ 0x55768321c680] mmco: unref short failure
[h264 @ 0x55768321c680] mmco: unref short failure
[h264 @ 0x55768321c680] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5634a355e940] mmco: unref short failure
[h264 @ 0x5576837d0480] mmco: unref short failure
[h264 @ 0x55561d3bf280] mmco: unref short failure
[h264 @ 0x55561d3bf280] mmco: unref short failure
  3%|▎         | 74/2910 [24:07<27:15:46, 34.61s/it][h264 @ 0x55561faabfc0] mmco: unref short failure
[h264 @ 0x55562052fc40] mmco: unref short failure
[h264 @ 0x55562052fc40] mmco: unref short failure
  3%|▎         | 75/2910 [24:13<20:30:22, 26.04s/it]  3%|▎         | 76/2910 [24:20<15:53:44, 20.19s/it][h264 @ 0x56349d9dcbc0] mmco: unref short failure
[h264 @ 0x5556199c5540] mmco: unref short failure
  3%|▎         | 77/2910 [24:26<12:34:01, 15.97s/it][h264 @ 0x5556179e72c0] mmco: unref short failure
[h264 @ 0x56349dbdbdc0] mmco: unref short failure
[h264 @ 0x56349dbdbdc0] mmco: unref short failure
  3%|▎         | 78/2910 [24:35<10:50:47, 13.79s/it]  3%|▎         | 79/2910 [24:43<9:37:21, 12.24s/it] [h264 @ 0x557685e2a5c0] mmco: unref short failure
[h264 @ 0x557685e2a5c0] mmco: unref short failure
  3%|▎         | 80/2910 [24:49<8:10:09, 10.39s/it]  3%|▎         | 81/2910 [24:55<7:04:42,  9.01s/it][h264 @ 0x5556209744c0] mmco: unref short failure
[h264 @ 0x5556209744c0] mmco: unref short failure
[h264 @ 0x5634957c3c80] mmco: unref short failure
[h264 @ 0x5634957c3c80] mmco: unref short failure
[h264 @ 0x5634957c3c80] mmco: unref short failure
[h264 @ 0x5634957c3c80] mmco: unref short failure
[h264 @ 0x5634a9638ec0] mmco: unref short failure
[h264 @ 0x558592765d00] mmco: unref short failure
[h264 @ 0x555619eda000] mmco: unref short failure
[h264 @ 0x555619eda000] mmco: unref short failure
[h264 @ 0x5634a01ffc80] mmco: unref short failure
[h264 @ 0x5634a01ffc80] mmco: unref short failure
[h264 @ 0x5634a01ffc80] mmco: unref short failure
09/17/2024 00:21:55 - INFO - __main__ -   current idx cLYenAzoWwo.8 from finetune_area returns wrong image/video, use 12933 instead.
09/17/2024 00:22:08 - INFO - __main__ -   current idx bhKtsohT-Xg.14 from finetune_area returns wrong image/video, use 106581 instead.
[h264 @ 0x558583b75880] mmco: unref short failure
[h264 @ 0x558593b068c0] mmco: unref short failure
[h264 @ 0x558593b068c0] mmco: unref short failure
[h264 @ 0x558599da4d40] mmco: unref short failure
[h264 @ 0x5585891913c0] mmco: unref short failure
[h264 @ 0x55859ce7a140] mmco: unref short failure
[h264 @ 0x55859ce7a140] mmco: unref short failure
  3%|▎         | 82/2910 [26:31<27:30:09, 35.01s/it][h264 @ 0x56348e6ebb40] mmco: unref short failure
[h264 @ 0x56348e6ebb40] mmco: unref short failure
  3%|▎         | 83/2910 [26:37<20:43:31, 26.39s/it][h264 @ 0x5634a06d0480] mmco: unref short failure
[h264 @ 0x5634a06d0480] mmco: unref short failure
  3%|▎         | 84/2910 [26:44<16:02:39, 20.44s/it][h264 @ 0x56349d854dc0] mmco: unref short failure
[h264 @ 0x56349d854dc0] mmco: unref short failure
  3%|▎         | 85/2910 [26:53<13:31:00, 17.23s/it][h264 @ 0x558594bc6900] mmco: unref short failure
[h264 @ 0x558594bc6900] mmco: unref short failure
[mov,mp4,m4a,3gp,3g2,mj2 @ 0x558588eea240] moov atom not found
  3%|▎         | 86/2910 [27:03<11:48:43, 15.06s/it][h264 @ 0x5576837c7380] mmco: unref short failure
  3%|▎         | 87/2910 [27:15<11:05:12, 14.14s/it]  3%|▎         | 88/2910 [27:23<9:33:40, 12.20s/it] [h264 @ 0x563494270dc0] mmco: unref short failure
[h264 @ 0x563494270dc0] mmco: unref short failure
  3%|▎         | 89/2910 [27:29<8:09:28, 10.41s/it][h264 @ 0x5576764e7b40] mmco: unref short failure
[h264 @ 0x5576764e7b40] mmco: unref short failure
[h264 @ 0x5576764e7d40] mmco: unref short failure
[h264 @ 0x5576764e7d40] mmco: unref short failure
[h264 @ 0x5576764e7d40] mmco: unref short failure
[h264 @ 0x5576764e7d40] mmco: unref short failure
[h264 @ 0x55859828d340] mmco: unref short failure
[h264 @ 0x55859bb41380] mmco: unref short failure
[h264 @ 0x55859bb41380] mmco: unref short failure
[h264 @ 0x555626332240] mmco: unref short failure
[h264 @ 0x555626332240] mmco: unref short failure
[h264 @ 0x55562e61f2c0] mmco: unref short failure
[h264 @ 0x55562e61f2c0] mmco: unref short failure
[h264 @ 0x55767005a240] mmco: unref short failure
[h264 @ 0x55767005a240] mmco: unref short failure
[h264 @ 0x55767005a240] mmco: unref short failure
[h264 @ 0x55767005a240] mmco: unref short failure
[h264 @ 0x55859b2b09c0] mmco: unref short failure
[h264 @ 0x55859b2b09c0] mmco: unref short failure
[h264 @ 0x5634a8dff8c0] mmco: unref short failure
[h264 @ 0x56349423d800] mmco: unref short failure
[h264 @ 0x56349423d800] mmco: unref short failure
[h264 @ 0x56349423d800] mmco: unref short failure
[h264 @ 0x5634a2a95e40] mmco: unref short failure
[h264 @ 0x5585992b92c0] mmco: unref short failure
[h264 @ 0x5585992b92c0] mmco: unref short failure
[h264 @ 0x5585837f4680] mmco: unref short failure
[h264 @ 0x5585837f4680] mmco: unref short failure
  3%|▎         | 90/2910 [29:05<28:18:08, 36.13s/it]  3%|▎         | 91/2910 [29:12<21:23:56, 27.33s/it][h264 @ 0x55766d942340] mmco: unref short failure
  3%|▎         | 92/2910 [29:18<16:19:31, 20.86s/it]  3%|▎         | 93/2910 [29:24<12:54:46, 16.50s/it][h264 @ 0x55766d942800] mmco: unref short failure
[h264 @ 0x55766d942800] mmco: unref short failure
[h264 @ 0x5556179e5900] mmco: unref short failure
[h264 @ 0x5556179e5900] mmco: unref short failure
  3%|▎         | 94/2910 [29:42<13:08:27, 16.80s/it][h264 @ 0x5634a66a9980] mmco: unref short failure
  3%|▎         | 95/2910 [29:55<12:18:46, 15.75s/it][h264 @ 0x563496225100] mmco: unref short failure
  3%|▎         | 96/2910 [30:02<10:21:32, 13.25s/it]  3%|▎         | 97/2910 [30:09<8:40:27, 11.10s/it] [h264 @ 0x557683141800] mmco: unref short failure
[h264 @ 0x557683141800] mmco: unref short failure
[h264 @ 0x5585851643c0] mmco: unref short failure
[h264 @ 0x5585851643c0] mmco: unref short failure
[h264 @ 0x5585851643c0] mmco: unref short failure
[h264 @ 0x5585851643c0] mmco: unref short failure
[h264 @ 0x55563164f880] mmco: unref short failure
[h264 @ 0x55563164f880] mmco: unref short failure
09/17/2024 00:26:22 - INFO - __main__ -   current idx JRTVXn0PfXQ.11 from finetune_area returns wrong image/video, use 109641 instead.
not have audios GAwav3sZcGw.4
[h264 @ 0x558587e56d00] mmco: unref short failure
[h264 @ 0x55858ba13e00] mmco: unref short failure
[h264 @ 0x55858ba13e00] mmco: unref short failure
[h264 @ 0x55562a4181c0] mmco: unref short failure
[h264 @ 0x55562a4181c0] mmco: unref short failure
[h264 @ 0x55562d88b480] mmco: unref short failure
[h264 @ 0x55562d88b480] mmco: unref short failure
[h264 @ 0x55562d88b480] mmco: unref short failure
[h264 @ 0x55562d88b480] mmco: unref short failure
[h264 @ 0x5556222a7ac0] mmco: unref short failure
[h264 @ 0x5556222a7ac0] mmco: unref short failure
[h264 @ 0x5556222a7ac0] mmco: unref short failure
[h264 @ 0x5556222a7ac0] mmco: unref short failure
[h264 @ 0x5634ac007a80] mmco: unref short failure
[h264 @ 0x5634ac007a80] mmco: unref short failure
[h264 @ 0x55859391a480] mmco: unref short failure
[h264 @ 0x55859391a480] mmco: unref short failure
[h264 @ 0x557669bfe400] mmco: unref short failure
[h264 @ 0x558591d654c0] mmco: unref short failure
[h264 @ 0x558591d654c0] mmco: unref short failure
[h264 @ 0x5556222a8180] mmco: unref short failure
[h264 @ 0x5556222a8180] mmco: unref short failure
[h264 @ 0x558583af1080] mmco: unref short failure
[h264 @ 0x55859905c2c0] mmco: unref short failure
[h264 @ 0x55859905c2c0] mmco: unref short failure
[h264 @ 0x558590aa6680] mmco: unref short failure
[h264 @ 0x5634ab2bb980] mmco: unref short failure
[h264 @ 0x555633c3b140] mmco: unref short failure
[h264 @ 0x55562dfc2000] mmco: unref short failure
[h264 @ 0x555619c414c0] mmco: unref short failure
[h264 @ 0x555619c414c0] mmco: unref short failure
[h264 @ 0x555635c48d00] mmco: unref short failure
[h264 @ 0x557686385640] mmco: unref short failure
[h264 @ 0x55561a758e80] mmco: unref short failure
[h264 @ 0x555630444e00] mmco: unref short failure
[h264 @ 0x555630444e00] mmco: unref short failure
[h264 @ 0x555630444e00] mmco: unref short failure
[h264 @ 0x555630444e00] mmco: unref short failure
[h264 @ 0x5585936584c0] mmco: unref short failure
[h264 @ 0x5585936584c0] mmco: unref short failure
[h264 @ 0x55561b2d2c40] mmco: unref short failure
[h264 @ 0x55561b2d2c40] mmco: unref short failure
[h264 @ 0x5634a67a7ac0] mmco: unref short failure
[h264 @ 0x5634a67a7ac0] mmco: unref short failure
[h264 @ 0x5634a67a7ac0] mmco: unref short failure
[h264 @ 0x5634a67a7ac0] mmco: unref short failure
[h264 @ 0x5634ac048240] mmco: unref short failure
  3%|▎         | 98/2910 [31:31<25:23:08, 32.50s/it]  3%|▎         | 99/2910 [31:37<19:15:00, 24.65s/it]09/17/2024 00:27:36 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 00:27:36 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5585951b7680] mmco: unref short failure
[h264 @ 0x5585951b7680] mmco: unref short failure
[h264 @ 0x55768099e780] mmco: unref short failure
[h264 @ 0x55768099e780] mmco: unref short failure
09/17/2024 00:28:05 - INFO - __main__ -   current idx AXNTPfihw4Y.36 from finetune_area returns wrong image/video, use 138393 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558599a392c0] mmco: unref short failure
[h264 @ 0x558599a392c0] mmco: unref short failure
[h264 @ 0x558599a392c0] mmco: unref short failure
[h264 @ 0x558599a392c0] mmco: unref short failure
[h264 @ 0x558599a392c0] mmco: unref short failure
[h264 @ 0x55561c1fd000] mmco: unref short failure
[h264 @ 0x55561c1fd000] mmco: unref short failure
[h264 @ 0x55859883a700] mmco: unref short failure
[h264 @ 0x56349fa11600] mmco: unref short failure
[h264 @ 0x56349fa11600] mmco: unref short failure
[h264 @ 0x563494271440] mmco: unref short failure
[h264 @ 0x555632319a00] mmco: unref short failure
[h264 @ 0x5634abf54740] mmco: unref short failure
[h264 @ 0x5634abf54740] mmco: unref short failure
[h264 @ 0x5556335bad80] mmco: unref short failure
[h264 @ 0x5556335bad80] mmco: unref short failure
[h264 @ 0x557686379f80] mmco: unref short failure
[h264 @ 0x555627b45480] mmco: unref short failure
[h264 @ 0x5634a8206040] mmco: unref short failure
[h264 @ 0x5634a8206040] mmco: unref short failure
[h264 @ 0x5576702ced80] mmco: unref short failure
[h264 @ 0x55561907dec0] mmco: unref short failure
[h264 @ 0x55561907dec0] mmco: unref short failure
09/17/2024 00:29:50 - INFO - __main__ -   current idx dYEsNlBENWc.3 from finetune_area returns wrong image/video, use 115903 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.31it/s][A
  1%|          | 2/221 [00:00<01:22,  2.67it/s][A
  1%|▏         | 3/221 [00:01<01:32,  2.35it/s][A
  2%|▏         | 4/221 [00:01<01:11,  3.04it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.37it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.33it/s][A
  3%|▎         | 7/221 [00:02<00:52,  4.09it/s][A
  4%|▎         | 8/221 [00:02<00:49,  4.30it/s][A
  4%|▍         | 9/221 [00:02<00:43,  4.92it/s][A
  5%|▍         | 10/221 [00:02<00:49,  4.27it/s][A
  5%|▌         | 12/221 [00:03<00:44,  4.71it/s][A
  6%|▌         | 13/221 [00:03<00:43,  4.83it/s][A
  6%|▋         | 14/221 [00:03<00:44,  4.70it/s][A
  7%|▋         | 15/221 [00:03<00:48,  4.24it/s][A
  7%|▋         | 16/221 [00:04<01:12,  2.85it/s][A
  8%|▊         | 17/221 [00:04<01:25,  2.38it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.72it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.23it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.76it/s][A
 10%|▉         | 21/221 [00:05<00:57,  3.47it/s][A
 10%|▉         | 22/221 [00:06<01:21,  2.45it/s][A
 10%|█         | 23/221 [00:06<01:08,  2.90it/s][A
 11%|█         | 24/221 [00:06<00:57,  3.43it/s][A
 11%|█▏        | 25/221 [00:07<00:50,  3.85it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.38it/s][A
 12%|█▏        | 27/221 [00:07<00:46,  4.18it/s][A
 13%|█▎        | 28/221 [00:08<00:53,  3.59it/s][A
 13%|█▎        | 29/221 [00:08<00:54,  3.50it/s][A
 14%|█▎        | 30/221 [00:08<01:01,  3.10it/s][A
 14%|█▍        | 31/221 [00:09<00:59,  3.17it/s][A
 15%|█▍        | 33/221 [00:09<00:42,  4.45it/s][A
 16%|█▌        | 35/221 [00:09<00:32,  5.64it/s][A
 16%|█▋        | 36/221 [00:09<00:32,  5.67it/s][A
 17%|█▋        | 37/221 [00:09<00:40,  4.57it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:10<00:49,  3.68it/s][A
 19%|█▊        | 41/221 [00:11<00:42,  4.21it/s][A
 19%|█▉        | 42/221 [00:11<01:10,  2.53it/s][A
 19%|█▉        | 43/221 [00:12<00:58,  3.04it/s][A
 20%|█▉        | 44/221 [00:12<00:48,  3.67it/s][A
 20%|██        | 45/221 [00:12<01:05,  2.68it/s][A
 21%|██        | 46/221 [00:13<01:00,  2.89it/s][A[h264 @ 0x55766bf73900] mmco: unref short failure
[h264 @ 0x55766bf73900] mmco: unref short failure

 21%|██▏       | 47/221 [00:16<03:19,  1.15s/it][A
 22%|██▏       | 49/221 [00:16<01:59,  1.44it/s][A
 23%|██▎       | 50/221 [00:16<01:42,  1.67it/s][A
 23%|██▎       | 51/221 [00:17<01:27,  1.95it/s][A[h264 @ 0x55766bf73900] mmco: unref short failure
[h264 @ 0x55766bf73900] mmco: unref short failure

 24%|██▎       | 52/221 [00:17<01:21,  2.07it/s][A
 24%|██▍       | 53/221 [00:17<01:05,  2.58it/s][A
 24%|██▍       | 54/221 [00:19<01:59,  1.40it/s][A[h264 @ 0x5556353684c0] mmco: unref short failure
[h264 @ 0x5556353684c0] mmco: unref short failure

09/17/2024 00:30:14 - INFO - __main__ -   current idx fGbJT-U6ymc.18 from finetune_area returns wrong image/video, use 96578 instead.
 25%|██▍       | 55/221 [00:19<01:52,  1.48it/s][A
 25%|██▌       | 56/221 [00:19<01:29,  1.85it/s][A
 26%|██▌       | 57/221 [00:20<01:20,  2.03it/s][A
 26%|██▌       | 58/221 [00:20<01:04,  2.52it/s][A
 27%|██▋       | 59/221 [00:20<00:54,  2.99it/s][A
 27%|██▋       | 60/221 [00:21<01:31,  1.76it/s][A
 28%|██▊       | 61/221 [00:22<01:17,  2.05it/s][A
 28%|██▊       | 62/221 [00:22<01:15,  2.12it/s][A
 29%|██▊       | 63/221 [00:22<01:00,  2.61it/s][A
 29%|██▉       | 64/221 [00:22<00:56,  2.79it/s][A
 29%|██▉       | 65/221 [00:23<00:48,  3.22it/s][A
 30%|██▉       | 66/221 [00:23<01:07,  2.29it/s][A
 30%|███       | 67/221 [00:24<00:57,  2.69it/s][A
 31%|███       | 68/221 [00:24<00:47,  3.24it/s][A09/17/2024 00:30:19 - INFO - __main__ -   current idx NK2f7abMxq4.56 from finetune_area returns wrong image/video, use 141039 instead.

 31%|███       | 69/221 [00:25<01:04,  2.34it/s][A
 32%|███▏      | 70/221 [00:25<00:55,  2.71it/s][A
 32%|███▏      | 71/221 [00:25<00:46,  3.23it/s][A[h264 @ 0x5576753ff140] mmco: unref short failure
[h264 @ 0x5576753ff140] mmco: unref short failure

 33%|███▎      | 72/221 [00:25<00:49,  2.98it/s][A
 33%|███▎      | 73/221 [00:26<00:58,  2.54it/s][A
 33%|███▎      | 74/221 [00:26<00:49,  2.95it/s][A
 34%|███▍      | 75/221 [00:26<00:47,  3.10it/s][A
 34%|███▍      | 76/221 [00:27<00:42,  3.41it/s][A09/17/2024 00:30:21 - INFO - __main__ -   current idx c0na5aaBMBE.58 from finetune_area returns wrong image/video, use 26302 instead.

 35%|███▍      | 77/221 [00:27<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:27<00:36,  3.97it/s][A
 36%|███▌      | 79/221 [00:27<00:42,  3.34it/s][A
 36%|███▌      | 80/221 [00:28<00:39,  3.55it/s][A
 37%|███▋      | 81/221 [00:28<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:28<00:47,  2.90it/s][A
 38%|███▊      | 83/221 [00:29<00:46,  2.99it/s][A
 38%|███▊      | 84/221 [00:29<00:41,  3.34it/s][A
 38%|███▊      | 85/221 [00:29<00:33,  4.10it/s][A[h264 @ 0x55561fac4440] mmco: unref short failure
[h264 @ 0x55561fac4440] mmco: unref short failure

 39%|███▉      | 86/221 [00:29<00:32,  4.14it/s][A
 39%|███▉      | 87/221 [00:30<00:54,  2.48it/s][A
 40%|███▉      | 88/221 [00:31<00:58,  2.27it/s][A
 40%|████      | 89/221 [00:31<00:54,  2.44it/s][A
 41%|████      | 90/221 [00:31<00:47,  2.73it/s][A
 41%|████      | 91/221 [00:31<00:39,  3.26it/s][A[h264 @ 0x558583c0c300] mmco: unref short failure

 42%|████▏     | 92/221 [00:32<00:48,  2.68it/s][A
 42%|████▏     | 93/221 [00:32<00:53,  2.41it/s][A
 43%|████▎     | 94/221 [00:33<00:49,  2.56it/s][A[h264 @ 0x55767e622040] mmco: unref short failure
[h264 @ 0x55767e622040] mmco: unref short failure
[h264 @ 0x55767e622040] mmco: unref short failure
[h264 @ 0x55767e622040] mmco: unref short failure

 43%|████▎     | 95/221 [00:33<00:47,  2.64it/s][A[h264 @ 0x55767e622040] mmco: unref short failure
[h264 @ 0x55767e622040] mmco: unref short failure

 43%|████▎     | 96/221 [00:34<01:04,  1.94it/s][A
 44%|████▍     | 97/221 [00:34<00:58,  2.13it/s][A
 44%|████▍     | 98/221 [00:35<01:06,  1.86it/s][A
 45%|████▍     | 99/221 [00:35<00:57,  2.14it/s][A
 45%|████▌     | 100/221 [00:36<00:49,  2.44it/s][A
 46%|████▌     | 101/221 [00:36<00:42,  2.84it/s][A
 46%|████▌     | 102/221 [00:36<00:49,  2.38it/s][A
 47%|████▋     | 103/221 [00:37<00:39,  2.97it/s][A
 47%|████▋     | 104/221 [00:37<00:32,  3.62it/s][A
 48%|████▊     | 105/221 [00:37<00:34,  3.32it/s][A
 48%|████▊     | 106/221 [00:38<00:47,  2.40it/s][A
 48%|████▊     | 107/221 [00:38<00:47,  2.41it/s][A
 49%|████▉     | 108/221 [00:38<00:40,  2.80it/s][A
 49%|████▉     | 109/221 [00:39<00:37,  3.02it/s][A
 50%|████▉     | 110/221 [00:39<00:29,  3.79it/s][A
 50%|█████     | 111/221 [00:39<00:29,  3.67it/s][A
 51%|█████     | 112/221 [00:39<00:28,  3.88it/s][A
 51%|█████     | 113/221 [00:39<00:24,  4.41it/s][A
 52%|█████▏    | 115/221 [00:40<00:17,  6.11it/s][A[h264 @ 0x55766eb72040] mmco: unref short failure

 52%|█████▏    | 116/221 [00:41<00:51,  2.06it/s][A[h264 @ 0x555627e29240] mmco: unref short failure

 53%|█████▎    | 117/221 [00:41<00:47,  2.19it/s][A
 53%|█████▎    | 118/221 [00:42<00:38,  2.69it/s][A
 54%|█████▍    | 119/221 [00:42<00:36,  2.82it/s][A
 54%|█████▍    | 120/221 [00:42<00:32,  3.12it/s][A
 55%|█████▍    | 121/221 [00:42<00:28,  3.49it/s][A[h264 @ 0x55859923b200] mmco: unref short failure
[h264 @ 0x55859923b200] mmco: unref short failure

 55%|█████▌    | 122/221 [00:43<00:29,  3.40it/s][A
 56%|█████▌    | 123/221 [00:43<00:26,  3.65it/s][A
 56%|█████▌    | 124/221 [00:43<00:28,  3.35it/s][A
 57%|█████▋    | 125/221 [00:44<00:35,  2.72it/s][A
 57%|█████▋    | 126/221 [00:44<00:33,  2.85it/s][A
 57%|█████▋    | 127/221 [00:45<00:47,  1.99it/s][A
 58%|█████▊    | 128/221 [00:45<00:45,  2.02it/s][A
 58%|█████▊    | 129/221 [00:45<00:34,  2.63it/s][A
 59%|█████▉    | 130/221 [00:46<00:28,  3.25it/s][A
 59%|█████▉    | 131/221 [00:46<00:25,  3.59it/s][A
 60%|█████▉    | 132/221 [00:47<00:45,  1.94it/s][A
 60%|██████    | 133/221 [00:47<00:39,  2.23it/s][A
 61%|██████    | 134/221 [00:48<00:45,  1.92it/s][A
 61%|██████    | 135/221 [00:48<00:45,  1.91it/s][A
 62%|██████▏   | 136/221 [00:49<00:43,  1.94it/s][A
 62%|██████▏   | 137/221 [00:49<00:41,  2.00it/s][A
 62%|██████▏   | 138/221 [00:50<00:39,  2.09it/s][A
 63%|██████▎   | 139/221 [00:51<00:54,  1.50it/s][A
 63%|██████▎   | 140/221 [00:51<00:46,  1.73it/s][A
 64%|██████▍   | 141/221 [00:52<00:48,  1.66it/s][A
 64%|██████▍   | 142/221 [00:52<00:43,  1.81it/s][A
 65%|██████▍   | 143/221 [00:53<00:38,  2.01it/s][A
 65%|██████▌   | 144/221 [00:53<00:32,  2.40it/s][A
 66%|██████▌   | 145/221 [00:53<00:25,  2.93it/s][A
 67%|██████▋   | 147/221 [00:54<00:20,  3.64it/s][A
 67%|██████▋   | 148/221 [00:54<00:31,  2.34it/s][A
 67%|██████▋   | 149/221 [00:55<00:30,  2.35it/s][A
 68%|██████▊   | 150/221 [00:55<00:25,  2.74it/s][A
 68%|██████▊   | 151/221 [00:55<00:25,  2.79it/s][A[h264 @ 0x5634a15aa480] mmco: unref short failure
[h264 @ 0x5634a15aa480] mmco: unref short failure

 69%|██████▉   | 152/221 [00:56<00:31,  2.17it/s][A
 69%|██████▉   | 153/221 [00:56<00:26,  2.61it/s][A
 70%|██████▉   | 154/221 [00:57<00:22,  2.94it/s][A
 70%|███████   | 155/221 [00:57<00:19,  3.34it/s][A
 71%|███████   | 156/221 [00:57<00:19,  3.34it/s][A
 71%|███████   | 157/221 [01:00<01:07,  1.05s/it][A
 71%|███████▏  | 158/221 [01:00<00:51,  1.23it/s][A
 72%|███████▏  | 159/221 [01:00<00:38,  1.61it/s][A
 72%|███████▏  | 160/221 [01:00<00:28,  2.11it/s][A
 73%|███████▎  | 161/221 [01:01<00:21,  2.76it/s][A
 73%|███████▎  | 162/221 [01:01<00:17,  3.33it/s][A
 74%|███████▍  | 163/221 [01:01<00:17,  3.37it/s][A
 74%|███████▍  | 164/221 [01:01<00:14,  3.92it/s][A
 75%|███████▍  | 165/221 [01:01<00:13,  4.26it/s][A
 75%|███████▌  | 166/221 [01:03<00:37,  1.48it/s][A
 76%|███████▌  | 167/221 [01:03<00:27,  1.94it/s][A
 76%|███████▌  | 168/221 [01:05<00:41,  1.27it/s][A
 76%|███████▋  | 169/221 [01:05<00:30,  1.72it/s][A
 77%|███████▋  | 170/221 [01:05<00:25,  1.96it/s][A
 77%|███████▋  | 171/221 [01:06<00:26,  1.86it/s][A
 78%|███████▊  | 172/221 [01:06<00:22,  2.22it/s][A
 78%|███████▊  | 173/221 [01:06<00:21,  2.19it/s][A
 79%|███████▉  | 175/221 [01:07<00:15,  3.04it/s][A
 80%|███████▉  | 176/221 [01:07<00:12,  3.57it/s][A
 80%|████████  | 177/221 [01:07<00:11,  3.78it/s][A
 81%|████████  | 178/221 [01:08<00:17,  2.44it/s][A
 81%|████████  | 179/221 [01:09<00:21,  2.00it/s][A
 81%|████████▏ | 180/221 [01:09<00:16,  2.50it/s][A
 82%|████████▏ | 181/221 [01:09<00:13,  3.03it/s][A
 82%|████████▏ | 182/221 [01:09<00:12,  3.20it/s][A
 83%|████████▎ | 183/221 [01:10<00:11,  3.28it/s][A
 83%|████████▎ | 184/221 [01:10<00:13,  2.83it/s][A
 84%|████████▎ | 185/221 [01:10<00:10,  3.31it/s][A
 84%|████████▍ | 186/221 [01:11<00:13,  2.57it/s][A
 85%|████████▍ | 187/221 [01:11<00:11,  2.91it/s][A
 85%|████████▌ | 188/221 [01:11<00:09,  3.40it/s][A
 86%|████████▌ | 189/221 [01:11<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [01:12<00:09,  3.41it/s][A
 87%|████████▋ | 192/221 [01:12<00:06,  4.70it/s][A
 87%|████████▋ | 193/221 [01:12<00:06,  4.58it/s][A
 88%|████████▊ | 194/221 [01:14<00:16,  1.65it/s][A
 88%|████████▊ | 195/221 [01:14<00:12,  2.08it/s][A
 89%|████████▊ | 196/221 [01:14<00:09,  2.59it/s][A
 89%|████████▉ | 197/221 [01:14<00:08,  2.99it/s][A
 90%|████████▉ | 198/221 [01:14<00:06,  3.57it/s][A
 90%|█████████ | 199/221 [01:15<00:06,  3.39it/s][A
 90%|█████████ | 200/221 [01:15<00:05,  3.99it/s][A
 91%|█████████ | 201/221 [01:15<00:04,  4.21it/s][A
 91%|█████████▏| 202/221 [01:15<00:04,  4.06it/s][A
 92%|█████████▏| 203/221 [01:16<00:04,  4.15it/s][A
 92%|█████████▏| 204/221 [01:16<00:03,  4.38it/s][A[h264 @ 0x55859922d380] mmco: unref short failure
[h264 @ 0x55859922d380] mmco: unref short failure

 93%|█████████▎| 205/221 [01:16<00:03,  4.11it/s][A
 93%|█████████▎| 206/221 [01:16<00:04,  3.72it/s][A
 94%|█████████▍| 208/221 [01:17<00:02,  4.35it/s][A
 95%|█████████▍| 209/221 [01:17<00:02,  4.57it/s][A
 95%|█████████▌| 211/221 [01:17<00:02,  4.52it/s][A
 96%|█████████▌| 212/221 [01:18<00:02,  4.10it/s][A
 96%|█████████▋| 213/221 [01:18<00:01,  4.50it/s][A
 97%|█████████▋| 214/221 [01:18<00:01,  3.61it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  4.33it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  4.25it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  2.26it/s][A
 99%|█████████▊| 218/221 [01:20<00:01,  2.72it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.96it/s][A
100%|█████████▉| 220/221 [01:22<00:00,  1.38it/s][A100%|██████████| 221/221 [01:22<00:00,  2.68it/s]
[h264 @ 0x55561fa8fb40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x557682962ec0] mmco: unref short failure

  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:04,  3.40it/s][A09/17/2024 00:31:19 - INFO - __main__ -   current idx 1DPLzfs419g.3 from finetune_area returns wrong image/video, use 1432 instead.

  1%|▏         | 3/221 [00:00<01:04,  3.39it/s][A[h264 @ 0x5585935e8800] mmco: unref short failure

  2%|▏         | 4/221 [00:01<01:04,  3.38it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.39it/s][A
  3%|▎         | 6/221 [00:01<01:03,  3.39it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.40it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.40it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.40it/s][A[h264 @ 0x55562a675880] mmco: unref short failure
[h264 @ 0x55562a675880] mmco: unref short failure

  5%|▍         | 10/221 [00:02<01:02,  3.39it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.35it/s][A[h264 @ 0x55561fa8f940] mmco: unref short failure
[h264 @ 0x55561fa8f940] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:03,  3.31it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.34it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.32it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.34it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.36it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.36it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.36it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.33it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.36it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.35it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.32it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.29it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.30it/s][A
 14%|█▍        | 31/221 [00:09<00:59,  3.17it/s][A
 14%|█▍        | 32/221 [00:09<00:58,  3.21it/s][A
 15%|█▍        | 33/221 [00:09<00:58,  3.24it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.27it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.28it/s][A
 16%|█▋        | 36/221 [00:10<00:57,  3.23it/s][A
 17%|█▋        | 37/221 [00:11<00:56,  3.28it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.32it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.30it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.28it/s][A[h264 @ 0x558583b75880] mmco: unref short failure

 19%|█▉        | 42/221 [00:12<00:53,  3.32it/s][A
 19%|█▉        | 43/221 [00:12<00:54,  3.29it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.32it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.34it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.35it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.36it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.37it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.38it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.39it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.39it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.39it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.40it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.40it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.40it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.40it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.41it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.41it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:19<00:45,  3.41it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.41it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.43it/s][A
  1%|          | 2/221 [00:00<01:04,  3.40it/s][A
  1%|▏         | 3/221 [00:01<01:25,  2.56it/s][A
  2%|▏         | 4/221 [00:01<01:01,  3.53it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.73it/s][A
  3%|▎         | 6/221 [00:01<00:54,  3.98it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.21it/s][A
  4%|▎         | 8/221 [00:02<00:59,  3.55it/s][A
  4%|▍         | 9/221 [00:02<01:09,  3.05it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.65it/s][A
  5%|▍         | 11/221 [00:03<01:18,  2.66it/s][A
  5%|▌         | 12/221 [00:03<01:12,  2.90it/s][A
  6%|▌         | 13/221 [00:04<01:22,  2.52it/s][A
  6%|▋         | 14/221 [00:04<01:20,  2.58it/s][A
  7%|▋         | 15/221 [00:05<01:20,  2.55it/s][A
  7%|▋         | 16/221 [00:05<01:15,  2.73it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:06<01:14,  2.73it/s][A
  9%|▊         | 19/221 [00:06<01:09,  2.92it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.63it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.03it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.28it/s][A
 10%|█         | 23/221 [00:07<00:40,  4.85it/s][A
 11%|█         | 24/221 [00:07<00:36,  5.37it/s][A
 11%|█▏        | 25/221 [00:07<00:38,  5.10it/s][A
 12%|█▏        | 26/221 [00:07<00:40,  4.83it/s][A
 12%|█▏        | 27/221 [00:07<00:41,  4.71it/s][A
 13%|█▎        | 28/221 [00:08<00:47,  4.06it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.33it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.26it/s][A
 14%|█▍        | 31/221 [00:09<00:53,  3.55it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.33it/s][A
 15%|█▍        | 33/221 [00:09<00:50,  3.73it/s][A
 15%|█▌        | 34/221 [00:09<00:44,  4.19it/s][A
 16%|█▋        | 36/221 [00:10<00:44,  4.17it/s][A
 17%|█▋        | 37/221 [00:10<00:46,  3.98it/s][A
 17%|█▋        | 38/221 [00:10<00:47,  3.84it/s][A
 18%|█▊        | 39/221 [00:11<00:43,  4.15it/s][A
 18%|█▊        | 40/221 [00:11<00:47,  3.80it/s][A
 19%|█▊        | 41/221 [00:11<00:46,  3.89it/s][A
 19%|█▉        | 42/221 [00:11<00:42,  4.21it/s][A
 19%|█▉        | 43/221 [00:12<00:46,  3.85it/s][A
 20%|█▉        | 44/221 [00:12<00:42,  4.14it/s][A
 20%|██        | 45/221 [00:12<00:54,  3.20it/s][A
 21%|██        | 46/221 [00:13<00:56,  3.10it/s][A
 21%|██▏       | 47/221 [00:13<00:48,  3.58it/s][A
 22%|██▏       | 49/221 [00:13<00:32,  5.35it/s][A
 23%|██▎       | 50/221 [00:14<00:46,  3.69it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.83it/s][A
 24%|██▎       | 52/221 [00:14<00:39,  4.27it/s][A
 24%|██▍       | 53/221 [00:14<00:43,  3.82it/s][A
 24%|██▍       | 54/221 [00:14<00:40,  4.12it/s][A
 25%|██▍       | 55/221 [00:15<00:35,  4.68it/s][A
 25%|██▌       | 56/221 [00:15<00:36,  4.52it/s][A
 26%|██▌       | 57/221 [00:15<00:40,  4.02it/s][A
 27%|██▋       | 59/221 [00:16<00:35,  4.57it/s][A
 27%|██▋       | 60/221 [00:16<00:32,  4.96it/s][A
 28%|██▊       | 61/221 [00:16<00:34,  4.67it/s][A
 28%|██▊       | 62/221 [00:16<00:39,  4.07it/s][A
 29%|██▊       | 63/221 [00:16<00:34,  4.63it/s][A
 29%|██▉       | 64/221 [00:17<00:39,  3.95it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.48it/s][A
 30%|██▉       | 66/221 [00:17<00:41,  3.73it/s][A
 30%|███       | 67/221 [00:18<00:42,  3.64it/s][A
 31%|███       | 68/221 [00:18<00:46,  3.31it/s][A
 31%|███       | 69/221 [00:19<01:03,  2.39it/s][A
 32%|███▏      | 70/221 [00:19<00:54,  2.76it/s][A
 32%|███▏      | 71/221 [00:19<00:53,  2.81it/s][A
 33%|███▎      | 72/221 [00:20<00:53,  2.76it/s][A
 33%|███▎      | 73/221 [00:20<00:52,  2.81it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:20<00:47,  3.11it/s][A
 34%|███▍      | 76/221 [00:21<00:47,  3.02it/s][A
 35%|███▍      | 77/221 [00:21<00:43,  3.35it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.44it/s][A
 36%|███▌      | 79/221 [00:22<00:37,  3.82it/s][A
 36%|███▌      | 80/221 [00:22<00:37,  3.72it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.87it/s][A
 37%|███▋      | 82/221 [00:22<00:36,  3.85it/s][A
 38%|███▊      | 84/221 [00:23<00:39,  3.44it/s][A
 38%|███▊      | 85/221 [00:23<00:34,  3.92it/s][A
 39%|███▉      | 86/221 [00:23<00:34,  3.92it/s][A
 39%|███▉      | 87/221 [00:24<00:40,  3.29it/s][A
 40%|███▉      | 88/221 [00:24<00:43,  3.06it/s][A
 40%|████      | 89/221 [00:25<00:47,  2.77it/s][A
 41%|████      | 90/221 [00:25<00:48,  2.70it/s][A
 41%|████      | 91/221 [00:25<00:41,  3.17it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.26it/s][A
 42%|████▏     | 93/221 [00:26<00:38,  3.36it/s][A
 43%|████▎     | 94/221 [00:26<00:37,  3.40it/s][A
 43%|████▎     | 95/221 [00:27<00:53,  2.34it/s][A
 43%|████▎     | 96/221 [00:27<00:52,  2.38it/s][A
 44%|████▍     | 97/221 [00:28<00:51,  2.39it/s][A
 44%|████▍     | 98/221 [00:28<00:58,  2.12it/s][A
 45%|████▍     | 99/221 [00:29<00:52,  2.31it/s][A
 45%|████▌     | 100/221 [00:29<00:55,  2.18it/s][A
 46%|████▌     | 101/221 [00:29<00:51,  2.33it/s][A
 46%|████▌     | 102/221 [00:30<00:45,  2.60it/s][A
 47%|████▋     | 103/221 [00:30<00:36,  3.22it/s][A
 48%|████▊     | 105/221 [00:30<00:28,  4.02it/s][A
 48%|████▊     | 106/221 [00:31<00:32,  3.54it/s][A
 48%|████▊     | 107/221 [00:31<00:28,  3.94it/s][A
 49%|████▉     | 108/221 [00:31<00:26,  4.31it/s][A
 49%|████▉     | 109/221 [00:31<00:27,  4.09it/s][A
 50%|████▉     | 110/221 [00:31<00:26,  4.21it/s][A
 50%|█████     | 111/221 [00:32<00:28,  3.82it/s][A
 51%|█████     | 112/221 [00:32<00:29,  3.73it/s][A
 51%|█████     | 113/221 [00:32<00:27,  3.92it/s][A
 52%|█████▏    | 115/221 [00:33<00:20,  5.09it/s][A
 52%|█████▏    | 116/221 [00:33<00:20,  5.21it/s][A
 53%|█████▎    | 117/221 [00:33<00:21,  4.83it/s][A
 53%|█████▎    | 118/221 [00:33<00:24,  4.23it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.47it/s][A
 54%|█████▍    | 120/221 [00:34<00:28,  3.49it/s][A
 55%|█████▍    | 121/221 [00:34<00:31,  3.21it/s][A
 55%|█████▌    | 122/221 [00:35<00:33,  2.93it/s][A
 56%|█████▌    | 123/221 [00:35<00:29,  3.37it/s][A
 56%|█████▌    | 124/221 [00:35<00:33,  2.89it/s][A
 57%|█████▋    | 125/221 [00:36<00:34,  2.76it/s][A
 57%|█████▋    | 126/221 [00:36<00:29,  3.17it/s][A
 57%|█████▋    | 127/221 [00:36<00:30,  3.07it/s][A
 58%|█████▊    | 128/221 [00:37<00:28,  3.27it/s][A
 58%|█████▊    | 129/221 [00:37<00:23,  3.95it/s][A
 59%|█████▉    | 130/221 [00:37<00:27,  3.27it/s][A
 59%|█████▉    | 131/221 [00:37<00:24,  3.64it/s][A
 60%|█████▉    | 132/221 [00:38<00:34,  2.61it/s][A
 60%|██████    | 133/221 [00:38<00:30,  2.85it/s][A
 61%|██████    | 134/221 [00:39<00:32,  2.70it/s][A
 61%|██████    | 135/221 [00:39<00:27,  3.17it/s][A
 62%|██████▏   | 136/221 [00:39<00:27,  3.13it/s][A
 62%|██████▏   | 137/221 [00:40<00:25,  3.25it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.50it/s][A
 63%|██████▎   | 139/221 [00:40<00:26,  3.12it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.38it/s][A
 64%|██████▍   | 141/221 [00:41<00:26,  2.99it/s][A
 64%|██████▍   | 142/221 [00:41<00:24,  3.27it/s][A
 65%|██████▍   | 143/221 [00:41<00:23,  3.38it/s][A
 65%|██████▌   | 144/221 [00:42<00:20,  3.75it/s][A
 66%|██████▌   | 145/221 [00:42<00:24,  3.11it/s][A
 66%|██████▌   | 146/221 [00:42<00:22,  3.39it/s][A
 67%|██████▋   | 148/221 [00:43<00:29,  2.44it/s][A
 67%|██████▋   | 149/221 [00:44<00:28,  2.56it/s][A
 68%|██████▊   | 150/221 [00:44<00:27,  2.57it/s][A
 68%|██████▊   | 151/221 [00:45<00:34,  2.00it/s][A
 69%|██████▉   | 152/221 [00:45<00:32,  2.11it/s][A
 69%|██████▉   | 153/221 [00:45<00:27,  2.46it/s][A
 70%|██████▉   | 154/221 [00:46<00:24,  2.78it/s][A
 70%|███████   | 155/221 [00:46<00:20,  3.26it/s][A
 71%|███████   | 156/221 [00:46<00:19,  3.40it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.34it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.14it/s][A
 72%|███████▏  | 159/221 [00:47<00:17,  3.54it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.75it/s][A
 73%|███████▎  | 162/221 [00:47<00:10,  5.77it/s][A
 74%|███████▍  | 163/221 [00:48<00:11,  5.27it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  5.06it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.18it/s][A
 75%|███████▌  | 166/221 [00:49<00:14,  3.69it/s][A
 76%|███████▌  | 167/221 [00:49<00:13,  3.89it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.68it/s][A
 77%|███████▋  | 170/221 [00:49<00:11,  4.28it/s][A
 77%|███████▋  | 171/221 [00:50<00:16,  2.95it/s][A
 78%|███████▊  | 172/221 [00:50<00:15,  3.19it/s][A
 78%|███████▊  | 173/221 [00:51<00:16,  2.97it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.59it/s][A
 79%|███████▉  | 175/221 [00:51<00:12,  3.73it/s][A
 80%|███████▉  | 176/221 [00:51<00:10,  4.45it/s][A
 80%|████████  | 177/221 [00:52<00:10,  4.02it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.59it/s][A
 81%|████████  | 179/221 [00:53<00:15,  2.69it/s][A
 82%|████████▏ | 181/221 [00:53<00:10,  3.82it/s][A
 82%|████████▏ | 182/221 [00:53<00:09,  3.91it/s][A
 83%|████████▎ | 183/221 [00:53<00:10,  3.68it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.29it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.40it/s][A
 85%|████████▍ | 187/221 [00:54<00:08,  3.91it/s][A
 85%|████████▌ | 188/221 [00:55<00:07,  4.40it/s][A
 86%|████████▌ | 189/221 [00:55<00:07,  4.50it/s][A
 86%|████████▌ | 190/221 [00:55<00:08,  3.68it/s][A
 87%|████████▋ | 192/221 [00:56<00:06,  4.33it/s][A
 87%|████████▋ | 193/221 [00:56<00:07,  3.67it/s][A
 88%|████████▊ | 194/221 [00:56<00:08,  3.08it/s][A
 88%|████████▊ | 195/221 [00:57<00:08,  3.09it/s][A
 89%|████████▊ | 196/221 [00:57<00:08,  3.10it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.84it/s][A
 90%|████████▉ | 198/221 [00:58<00:07,  3.12it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.30it/s][A
 90%|█████████ | 200/221 [00:58<00:05,  3.81it/s][A
 91%|█████████ | 201/221 [00:58<00:04,  4.06it/s][A
 91%|█████████▏| 202/221 [00:59<00:04,  4.17it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.92it/s][A
 92%|█████████▏| 204/221 [00:59<00:03,  4.71it/s][A
 93%|█████████▎| 205/221 [00:59<00:03,  4.13it/s][A
 93%|█████████▎| 206/221 [01:00<00:03,  3.79it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.50it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.43it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.66it/s][A
 95%|█████████▌| 210/221 [01:01<00:02,  3.76it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.71it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.40it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.75it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.11it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.22it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.31it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.07it/s][A
 99%|█████████▊| 218/221 [01:04<00:01,  2.70it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.63it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.15it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.34it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'area_r1': 41.7, 'area_recall': '41.7/68.7/77.7', 'area_ravg': 62.7}
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'forward_r1': 36.0, 'forward_recall': '36.0/64.7/74.2', 'forward_ravg': 58.3}
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'area_video_r1': 36.3, 'area_video_recall': '36.3/65.4/75.6', 'area_video_ravg': 59.1}
09/17/2024 00:33:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 99=======

09/17/2024 00:33:32 - INFO - __main__ -   {'area_video_r1': 36.3, 'area_video_recall': '36.3/65.4/75.6', 'area_video_ravg': 59.1}
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'area_video_r1': 50.5, 'area_video_recall': '50.5/73.3/81.7', 'area_video_ravg': 68.5, 'area_video_back_r1': 47.4, 'area_video_back_recall': '47.4/70.0/79.5', 'area_video_back_ravg': 65.6}
09/17/2024 00:33:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 99=======

09/17/2024 00:33:32 - INFO - __main__ -   {'area_video_r1': 50.5, 'area_video_recall': '50.5/73.3/81.7', 'area_video_ravg': 68.5, 'area_video_back_r1': 47.4, 'area_video_back_recall': '47.4/70.0/79.5', 'area_video_back_ravg': 65.6}
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'video_r1': 36.3, 'video_recall': '36.3/65.4/74.2', 'video_ravg': 58.6}
09/17/2024 00:33:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 49=======

09/17/2024 00:33:32 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/65.0/73.4', 'video_ravg': 58.4}
09/17/2024 00:33:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 99--===========

09/17/2024 00:33:32 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/71.6/80.3', 'video_ravg': 67.7}
09/17/2024 00:33:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 99=======

09/17/2024 00:33:32 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/71.6/80.3', 'video_ravg': 67.7}
09/17/2024 00:34:04 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.01193184033036232, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 2.9141433238983154, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.198232650756836, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 5.124307632446289}
  3%|▎         | 100/2910 [38:08<104:56:38, 134.45s/it]  3%|▎         | 101/2910 [38:12<74:19:42, 95.26s/it]  [h264 @ 0x55859a7df380] mmco: unref short failure
[h264 @ 0x55859a7df380] mmco: unref short failure
  4%|▎         | 102/2910 [38:16<52:57:22, 67.89s/it]  4%|▎         | 103/2910 [38:21<38:11:47, 48.99s/it]  4%|▎         | 104/2910 [38:26<27:58:12, 35.88s/it]  4%|▎         | 105/2910 [38:31<20:42:56, 26.59s/it][h264 @ 0x5576877bba80] mmco: unref short failure
[h264 @ 0x5576877bba80] mmco: unref short failure
  4%|▎         | 106/2910 [38:36<15:44:51, 20.22s/it][h264 @ 0x5556256e3c80] mmco: unref short failure
[h264 @ 0x5556256e3c80] mmco: unref short failure
[h264 @ 0x5576823cfe80] mmco: unref short failure
[h264 @ 0x5576823cfe80] mmco: unref short failure
  4%|▎         | 107/2910 [38:42<12:27:55, 16.01s/it][h264 @ 0x558596afb600] mmco: unref short failure
[h264 @ 0x558596afb600] mmco: unref short failure
[h264 @ 0x5585878c5dc0] mmco: unref short failure
[h264 @ 0x555635292f80] mmco: unref short failure
  4%|▎         | 108/2910 [38:50<10:22:34, 13.33s/it][h264 @ 0x55859c295600] mmco: unref short failure
[h264 @ 0x55859c295600] mmco: unref short failure
[h264 @ 0x55859c295600] mmco: unref short failure
[h264 @ 0x55859c295600] mmco: unref short failure
[h264 @ 0x55858eaaf3c0] mmco: unref short failure
[h264 @ 0x55858eaaf3c0] mmco: unref short failure
  4%|▎         | 109/2910 [38:55<8:38:21, 11.10s/it]   4%|▍         | 110/2910 [39:02<7:31:41,  9.68s/it]  4%|▍         | 111/2910 [39:08<6:41:31,  8.61s/it]  4%|▍         | 112/2910 [39:14<6:01:34,  7.75s/it]  4%|▍         | 113/2910 [39:20<5:41:58,  7.34s/it][h264 @ 0x563493ea7f80] mmco: unref short failure
[h264 @ 0x563493ea7f80] mmco: unref short failure
  4%|▍         | 114/2910 [39:26<5:19:38,  6.86s/it]09/17/2024 00:35:27 - INFO - __main__ -   current idx BYJeo2oa0SU.13 from finetune_area returns wrong image/video, use 23897 instead.
  4%|▍         | 115/2910 [39:32<5:17:19,  6.81s/it][h264 @ 0x5634a993b080] mmco: unref short failure
[h264 @ 0x5634a993b080] mmco: unref short failure
[h264 @ 0x5634a892c0c0] mmco: unref short failure
[h264 @ 0x5634a892c0c0] mmco: unref short failure
[h264 @ 0x558593843ec0] mmco: unref short failure
[h264 @ 0x5576876bfc00] mmco: unref short failure
[h264 @ 0x5576876bfc00] mmco: unref short failure
[h264 @ 0x55767db00340] mmco: unref short failure
[h264 @ 0x5585871ae200] mmco: unref short failure
[h264 @ 0x56349159fe80] mmco: unref short failure
[h264 @ 0x55767d5f4bc0] mmco: unref short failure
[h264 @ 0x5556359d7e40] mmco: unref short failure
[h264 @ 0x5556359d7e40] mmco: unref short failure
[h264 @ 0x55859bb469c0] mmco: unref short failure
[h264 @ 0x55859bb469c0] mmco: unref short failure
  4%|▍         | 116/2910 [40:17<14:06:27, 18.18s/it][h264 @ 0x55563264d780] mmco: unref short failure
  4%|▍         | 117/2910 [40:25<11:40:03, 15.04s/it][h264 @ 0x55562b823480] mmco: unref short failure
[h264 @ 0x55562b823480] mmco: unref short failure
  4%|▍         | 118/2910 [40:31<9:38:57, 12.44s/it] [h264 @ 0x5556229f23c0] mmco: unref short failure
[h264 @ 0x5556229f23c0] mmco: unref short failure
[h264 @ 0x56348e679840] mmco: unref short failure
  4%|▍         | 119/2910 [40:52<11:34:26, 14.93s/it]  4%|▍         | 120/2910 [40:59<9:37:32, 12.42s/it]   4%|▍         | 121/2910 [41:04<8:06:28, 10.47s/it][h264 @ 0x55562b7da980] mmco: unref short failure
  4%|▍         | 122/2910 [41:10<7:04:23,  9.13s/it][h264 @ 0x55767a9086c0] mmco: unref short failure
[h264 @ 0x55767a9086c0] mmco: unref short failure
[h264 @ 0x55766a2ac940] mmco: unref short failure
  4%|▍         | 123/2910 [41:30<9:24:32, 12.15s/it][h264 @ 0x5585a0f5bd00] mmco: unref short failure
09/17/2024 00:37:43 - INFO - __main__ -   current idx UqfcB6M8FA4.49 from finetune_area returns wrong image/video, use 7219 instead.
[h264 @ 0x5634abc5a7c0] mmco: unref short failure
[h264 @ 0x5634abc5a7c0] mmco: unref short failure
[h264 @ 0x55561f90aec0] mmco: unref short failure
[h264 @ 0x55561f90aec0] mmco: unref short failure
[h264 @ 0x56348f7d7700] mmco: unref short failure
[h264 @ 0x55562618e780] mmco: unref short failure
[h264 @ 0x55562618e780] mmco: unref short failure
[h264 @ 0x557672e9ba00] mmco: unref short failure
[h264 @ 0x557672e94340] mmco: unref short failure
[h264 @ 0x557672e94340] mmco: unref short failure
[h264 @ 0x5634902abd80] mmco: unref short failure
[h264 @ 0x5634902abd80] mmco: unref short failure
[h264 @ 0x5634abf3ebc0] mmco: unref short failure
[h264 @ 0x5634abf3ebc0] mmco: unref short failure
[h264 @ 0x555625b995c0] mmco: unref short failure
[h264 @ 0x5585886c1e00] mmco: unref short failure
[h264 @ 0x5585886c1e00] mmco: unref short failure
[h264 @ 0x5576781903c0] mmco: unref short failure
[h264 @ 0x5576781903c0] mmco: unref short failure
09/17/2024 00:38:49 - INFO - __main__ -   current idx M28z2aVJm9M.7 from finetune_area returns wrong image/video, use 148289 instead.
[h264 @ 0x55561f6e83c0] mmco: unref short failure
  4%|▍         | 124/2910 [42:53<26:00:57, 33.62s/it]  4%|▍         | 125/2910 [42:59<19:36:06, 25.34s/it][h264 @ 0x555627368ac0] mmco: unref short failure
[h264 @ 0x555627368ac0] mmco: unref short failure
[h264 @ 0x558592753bc0] mmco: unref short failure
[h264 @ 0x55768774be40] mmco: unref short failure
[h264 @ 0x55768774be40] mmco: unref short failure
  4%|▍         | 126/2910 [43:11<16:30:17, 21.34s/it]  4%|▍         | 127/2910 [43:18<13:04:51, 16.92s/it]  4%|▍         | 128/2910 [43:24<10:33:25, 13.66s/it][h264 @ 0x55857e08f880] mmco: unref short failure
[h264 @ 0x5634a63eed80] mmco: unref short failure
  4%|▍         | 129/2910 [43:34<9:39:09, 12.50s/it] [h264 @ 0x55859428f440] mmco: unref short failure
[h264 @ 0x555632f16340] mmco: unref short failure
[h264 @ 0x5585820db100] mmco: unref short failure
  4%|▍         | 130/2910 [43:43<8:57:29, 11.60s/it][h264 @ 0x55767b04f7c0] mmco: unref short failure
[h264 @ 0x55767b04f7c0] mmco: unref short failure
[h264 @ 0x55858cf03440] mmco: unref short failure
[h264 @ 0x55858cf03440] mmco: unref short failure
[h264 @ 0x55859590ebc0] mmco: unref short failure
  5%|▍         | 131/2910 [43:55<8:50:49, 11.46s/it][h264 @ 0x5634a1763100] mmco: unref short failure
[h264 @ 0x5634a1763100] mmco: unref short failure
[h264 @ 0x555621d1f8c0] mmco: unref short failure
[h264 @ 0x555621d1f8c0] mmco: unref short failure
09/17/2024 00:40:18 - INFO - __main__ -   current idx 6_p3rXnYE3Y.137 from finetune_area returns wrong image/video, use 38831 instead.
[h264 @ 0x5556371beb80] mmco: unref short failure
[h264 @ 0x55767cdbb900] mmco: unref short failure
[h264 @ 0x55767cdbb900] mmco: unref short failure
[h264 @ 0x5634a827b780] mmco: unref short failure
[h264 @ 0x5634a827b780] mmco: unref short failure
[h264 @ 0x5634a827b780] mmco: unref short failure
[h264 @ 0x5634a827b780] mmco: unref short failure
[h264 @ 0x5634a8a6a580] mmco: unref short failure
[h264 @ 0x5634a8a6a580] mmco: unref short failure
[h264 @ 0x5634a8a6a580] mmco: unref short failure
[h264 @ 0x563491404f80] mmco: unref short failure
[h264 @ 0x563491404f80] mmco: unref short failure
[h264 @ 0x5634a8b2e680] mmco: unref short failure
[h264 @ 0x5634a8b2e680] mmco: unref short failure
[h264 @ 0x557675a9c500] mmco: unref short failure
[h264 @ 0x557675a9c500] mmco: unref short failure
[h264 @ 0x558599750140] mmco: unref short failure
  5%|▍         | 132/2910 [45:19<25:39:06, 33.24s/it]  5%|▍         | 133/2910 [45:25<19:24:57, 25.17s/it][h264 @ 0x5585808506c0] mmco: unref short failure
[h264 @ 0x5585808506c0] mmco: unref short failure
[h264 @ 0x55561bc38e80] mmco: unref short failure
[h264 @ 0x55561bc38e80] mmco: unref short failure
[h264 @ 0x555630ea14c0] mmco: unref short failure
[h264 @ 0x555630ea14c0] mmco: unref short failure
  5%|▍         | 134/2910 [45:45<18:18:56, 23.75s/it][h264 @ 0x557689a4c3c0] mmco: unref short failure
[h264 @ 0x55562c3fe3c0] mmco: unref short failure
  5%|▍         | 135/2910 [45:52<14:18:45, 18.57s/it][h264 @ 0x56349c97ccc0] mmco: unref short failure
[h264 @ 0x56349c97ccc0] mmco: unref short failure
[h264 @ 0x555619ed9e00] mmco: unref short failure
[h264 @ 0x555619ed9e00] mmco: unref short failure
  5%|▍         | 136/2910 [45:59<11:34:20, 15.02s/it][h264 @ 0x55859c34bfc0] mmco: unref short failure
  5%|▍         | 137/2910 [46:05<9:32:38, 12.39s/it] [h264 @ 0x557684fabc80] mmco: unref short failure
[h264 @ 0x557684fabc80] mmco: unref short failure
[h264 @ 0x557684fabc80] mmco: unref short failure
[h264 @ 0x557684fabc80] mmco: unref short failure
[h264 @ 0x557684fabc80] mmco: unref short failure
[h264 @ 0x557684fabc80] mmco: unref short failure
  5%|▍         | 138/2910 [46:24<11:07:47, 14.45s/it][h264 @ 0x5634a704f140] mmco: unref short failure
[h264 @ 0x5634a704f140] mmco: unref short failure
  5%|▍         | 139/2910 [46:31<9:22:26, 12.18s/it] [h264 @ 0x56349c126840] mmco: unref short failure
[h264 @ 0x56349c126840] mmco: unref short failure
[h264 @ 0x55766cfd96c0] mmco: unref short failure
09/17/2024 00:42:48 - INFO - __main__ -   current idx fwdyHxHBek4.10 from finetune_area returns wrong image/video, use 51250 instead.
[h264 @ 0x55561b10d640] mmco: unref short failure
[h264 @ 0x55561b10d640] mmco: unref short failure
[h264 @ 0x5634aba2bf00] mmco: unref short failure
09/17/2024 00:43:14 - INFO - __main__ -   current idx Xlq5RVCHKWg.8 from finetune_area returns wrong image/video, use 58295 instead.
09/17/2024 00:43:18 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 16063 instead.
[h264 @ 0x55859449fc40] mmco: unref short failure
[h264 @ 0x55859449fc40] mmco: unref short failure
[h264 @ 0x555621ea6bc0] mmco: unref short failure
[h264 @ 0x5634ab0bf580] mmco: unref short failure
[h264 @ 0x5634ab0bf580] mmco: unref short failure
[h264 @ 0x5634ab0bf580] mmco: unref short failure
[h264 @ 0x5634ab0bf580] mmco: unref short failure
[h264 @ 0x55562361ce40] mmco: unref short failure
[h264 @ 0x55562361ce40] mmco: unref short failure
[h264 @ 0x555635682640] mmco: unref short failure
[h264 @ 0x55857e6f7ac0] mmco: unref short failure
[h264 @ 0x55857e6f7ac0] mmco: unref short failure
09/17/2024 00:43:28 - INFO - __main__ -   current idx MVC6nKCrOgI.12 from finetune_area returns wrong image/video, use 71575 instead.
[h264 @ 0x55561d545f00] mmco: unref short failure
[h264 @ 0x55561d545f00] mmco: unref short failure
[h264 @ 0x55561d545f00] mmco: unref short failure
[h264 @ 0x55561d545f00] mmco: unref short failure
[h264 @ 0x55858ce39600] mmco: unref short failure
[h264 @ 0x55858ce39600] mmco: unref short failure
  5%|▍         | 140/2910 [47:57<26:19:53, 34.22s/it]  5%|▍         | 141/2910 [48:03<19:48:25, 25.75s/it][h264 @ 0x5576860c3c40] mmco: unref short failure
[h264 @ 0x5576860c3c40] mmco: unref short failure
[h264 @ 0x5576860c3c40] mmco: unref short failure
[h264 @ 0x5576860c3c40] mmco: unref short failure
  5%|▍         | 142/2910 [48:09<15:20:15, 19.95s/it][h264 @ 0x55562c838b40] mmco: unref short failure
[h264 @ 0x55562c838b40] mmco: unref short failure
  5%|▍         | 143/2910 [48:15<12:07:15, 15.77s/it][h264 @ 0x55562cf59b00] mmco: unref short failure
[h264 @ 0x55562cf59b00] mmco: unref short failure
[h264 @ 0x55562cf59b00] mmco: unref short failure
[h264 @ 0x55562cf59b00] mmco: unref short failure
[h264 @ 0x55561979c9c0] mmco: unref short failure
09/17/2024 00:44:19 - INFO - __main__ -   current idx dIAiCVZ5tEo.28 from finetune_area returns wrong image/video, use 21760 instead.
[h264 @ 0x56348e832c40] mmco: unref short failure
[h264 @ 0x56348e832c40] mmco: unref short failure
  5%|▍         | 144/2910 [48:21<9:53:11, 12.87s/it]   5%|▍         | 145/2910 [48:27<8:15:44, 10.76s/it][h264 @ 0x5634a3e4ff80] mmco: unref short failure
[h264 @ 0x5634af96bd40] mmco: unref short failure
[h264 @ 0x5634af96bd40] mmco: unref short failure
[h264 @ 0x5634af96bd40] mmco: unref short failure
[h264 @ 0x55858e7cc580] mmco: unref short failure
[h264 @ 0x55859f0e9040] mmco: unref short failure
[h264 @ 0x5556345ce940] mmco: unref short failure
[h264 @ 0x5556345ce940] mmco: unref short failure
[h264 @ 0x558588e23c40] mmco: unref short failure
[h264 @ 0x558588e23c40] mmco: unref short failure
[h264 @ 0x5585886c1e00] mmco: unref short failure
[h264 @ 0x5634ab02d3c0] mmco: unref short failure
  5%|▌         | 146/2910 [48:52<11:36:30, 15.12s/it]  5%|▌         | 147/2910 [48:59<9:39:22, 12.58s/it] [h264 @ 0x55767572cf80] mmco: unref short failure
[h264 @ 0x55767572cf80] mmco: unref short failure
[h264 @ 0x55767572cf80] mmco: unref short failure
[h264 @ 0x55767572cf80] mmco: unref short failure
[h264 @ 0x56348e832380] mmco: unref short failure
[h264 @ 0x56348e832380] mmco: unref short failure
[h264 @ 0x555617ff0880] mmco: unref short failure
[h264 @ 0x55857ffe6400] mmco: unref short failure
[h264 @ 0x55857ffe6400] mmco: unref short failure
[h264 @ 0x55857ffe6400] mmco: unref short failure
[h264 @ 0x55857ffe6400] mmco: unref short failure
[h264 @ 0x557671390dc0] mmco: unref short failure
[h264 @ 0x557671390dc0] mmco: unref short failure
[h264 @ 0x557671390dc0] mmco: unref short failure
[h264 @ 0x557671390dc0] mmco: unref short failure
[h264 @ 0x558596f2c780] mmco: unref short failure
[h264 @ 0x558596f2c780] mmco: unref short failure
09/17/2024 00:45:25 - INFO - __main__ -   current idx gtp43VGk4b0.59 from finetune_area returns wrong image/video, use 42619 instead.
[h264 @ 0x555624b15a80] mmco: unref short failure
09/17/2024 00:45:35 - INFO - __main__ -   current idx 7rNZakrnk74.48 from finetune_area returns wrong image/video, use 146023 instead.
[h264 @ 0x55767f27bd40] mmco: unref short failure
[h264 @ 0x55563815df00] mmco: unref short failure
[h264 @ 0x55563815df00] mmco: unref short failure
[h264 @ 0x5634950c5a80] mmco: unref short failure
[h264 @ 0x5634ad61ef40] mmco: unref short failure
[h264 @ 0x5634ad61ef40] mmco: unref short failure
  5%|▌         | 148/2910 [50:22<25:55:12, 33.78s/it][h264 @ 0x55858000e900] mmco: unref short failure
[h264 @ 0x55858000e900] mmco: unref short failure
  5%|▌         | 149/2910 [50:28<19:32:38, 25.48s/it]09/17/2024 00:46:27 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 00:46:27 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x557669e0bcc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556181fc340] mmco: unref short failure
[h264 @ 0x5556181fc340] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56349f4a2ac0] mmco: unref short failure
[h264 @ 0x56349f4a2ac0] mmco: unref short failure
[h264 @ 0x56349f4a2ac0] mmco: unref short failure
[h264 @ 0x557680338fc0] mmco: unref short failure
[h264 @ 0x557680338fc0] mmco: unref short failure
[h264 @ 0x55859e1ae7c0] mmco: unref short failure
[h264 @ 0x55858f71e600] mmco: unref short failure
[h264 @ 0x558590a5b2c0] mmco: unref short failure
[h264 @ 0x558590a5b2c0] mmco: unref short failure
[h264 @ 0x55766a08cc80] mmco: unref short failure
[h264 @ 0x5634a703c840] mmco: unref short failure
[h264 @ 0x5634a703c840] mmco: unref short failure
[h264 @ 0x55766a966cc0] mmco: unref short failure
[h264 @ 0x55766a966cc0] mmco: unref short failure
[h264 @ 0x55857e251ac0] mmco: unref short failure
[h264 @ 0x55857e251ac0] mmco: unref short failure
[h264 @ 0x55766b0d9640] mmco: unref short failure
[h264 @ 0x55766b0d9640] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:22,  2.68it/s][A
  1%|          | 2/221 [00:00<01:24,  2.60it/s][A
  1%|▏         | 3/221 [00:01<01:26,  2.51it/s][A
  2%|▏         | 4/221 [00:01<01:10,  3.06it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.41it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.35it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.30it/s][A
  4%|▎         | 8/221 [00:02<00:44,  4.78it/s][A
  4%|▍         | 9/221 [00:02<00:46,  4.54it/s][A
  5%|▍         | 10/221 [00:02<00:58,  3.61it/s][A
  5%|▍         | 11/221 [00:02<00:46,  4.47it/s][A
  5%|▌         | 12/221 [00:03<00:49,  4.18it/s][A[h264 @ 0x55766cf7f4c0] mmco: unref short failure

  6%|▌         | 13/221 [00:03<00:47,  4.38it/s][A
  6%|▋         | 14/221 [00:03<00:44,  4.67it/s][A
  7%|▋         | 15/221 [00:03<00:44,  4.65it/s][A
  7%|▋         | 16/221 [00:04<00:57,  3.59it/s][A
  8%|▊         | 17/221 [00:04<01:20,  2.53it/s][A
  8%|▊         | 18/221 [00:05<01:12,  2.78it/s][A
  9%|▊         | 19/221 [00:05<01:04,  3.14it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.70it/s][A
 10%|▉         | 21/221 [00:05<00:54,  3.65it/s][A
 10%|▉         | 22/221 [00:06<01:11,  2.77it/s][A
 10%|█         | 23/221 [00:06<00:57,  3.45it/s][A
 11%|█         | 24/221 [00:06<00:50,  3.88it/s][A
 11%|█▏        | 25/221 [00:06<00:46,  4.25it/s][A
 12%|█▏        | 26/221 [00:07<00:56,  3.47it/s][A
 12%|█▏        | 27/221 [00:07<00:49,  3.93it/s][A
 13%|█▎        | 28/221 [00:08<01:08,  2.82it/s][A
 13%|█▎        | 29/221 [00:08<01:02,  3.09it/s][A
 14%|█▎        | 30/221 [00:08<01:01,  3.11it/s][A[h264 @ 0x555616c948c0] mmco: unref short failure
[h264 @ 0x555616c948c0] mmco: unref short failure

 14%|█▍        | 31/221 [00:08<00:59,  3.21it/s][A
 15%|█▍        | 33/221 [00:09<00:42,  4.42it/s][A
 16%|█▌        | 35/221 [00:09<00:35,  5.24it/s][A
 16%|█▋        | 36/221 [00:09<00:39,  4.66it/s][A
 17%|█▋        | 37/221 [00:10<00:49,  3.71it/s][A
 17%|█▋        | 38/221 [00:10<00:56,  3.26it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.87it/s][A
 18%|█▊        | 40/221 [00:11<00:48,  3.72it/s][A
 19%|█▊        | 41/221 [00:11<00:43,  4.10it/s][A
 19%|█▉        | 42/221 [00:11<01:04,  2.79it/s][A
 19%|█▉        | 43/221 [00:11<00:54,  3.28it/s][A
 20%|█▉        | 44/221 [00:12<00:44,  3.96it/s][A
 20%|██        | 45/221 [00:12<01:00,  2.92it/s][A[h264 @ 0x555616c948c0] mmco: unref short failure
[h264 @ 0x555616c948c0] mmco: unref short failure
[h264 @ 0x555616c948c0] mmco: unref short failure
[h264 @ 0x555616c948c0] mmco: unref short failure

 21%|██        | 46/221 [00:12<00:55,  3.13it/s][A
 21%|██▏       | 47/221 [00:13<01:32,  1.87it/s][A
 22%|██▏       | 48/221 [00:14<01:11,  2.43it/s][A
 22%|██▏       | 49/221 [00:14<01:01,  2.80it/s][A
 23%|██▎       | 50/221 [00:14<00:54,  3.13it/s][A[h264 @ 0x558596f2c780] mmco: unref short failure
[h264 @ 0x558596f2c780] mmco: unref short failure

 23%|██▎       | 51/221 [00:14<00:47,  3.55it/s][A
 24%|██▎       | 52/221 [00:15<00:52,  3.23it/s][A
 24%|██▍       | 53/221 [00:15<00:43,  3.87it/s][A
 24%|██▍       | 54/221 [00:17<02:13,  1.26it/s][A
 25%|██▍       | 55/221 [00:17<01:51,  1.48it/s][A
 25%|██▌       | 56/221 [00:17<01:25,  1.93it/s][A
 26%|██▌       | 57/221 [00:18<01:11,  2.29it/s][A
 26%|██▌       | 58/221 [00:18<01:00,  2.71it/s][A
 27%|██▋       | 59/221 [00:18<00:48,  3.33it/s][A[h264 @ 0x557672d02b00] mmco: unref short failure

 27%|██▋       | 60/221 [00:19<01:30,  1.78it/s][A
 28%|██▊       | 61/221 [00:19<01:11,  2.25it/s][A
 28%|██▊       | 62/221 [00:20<01:06,  2.38it/s][A
 29%|██▊       | 63/221 [00:20<00:58,  2.69it/s][A
 29%|██▉       | 64/221 [00:20<01:01,  2.54it/s][A
 29%|██▉       | 65/221 [00:21<00:54,  2.88it/s][A
 30%|██▉       | 66/221 [00:21<01:07,  2.30it/s][A
 30%|███       | 67/221 [00:21<00:56,  2.72it/s][A
 31%|███       | 68/221 [00:22<00:45,  3.33it/s][A
 31%|███       | 69/221 [00:22<01:09,  2.19it/s][A
 32%|███▏      | 70/221 [00:23<00:58,  2.59it/s][A
 32%|███▏      | 71/221 [00:23<00:50,  2.98it/s][A
 33%|███▎      | 72/221 [00:23<00:51,  2.87it/s][A
 33%|███▎      | 73/221 [00:24<00:59,  2.50it/s][A
 33%|███▎      | 74/221 [00:24<00:49,  2.97it/s][A
 34%|███▍      | 75/221 [00:24<00:49,  2.92it/s][A
 34%|███▍      | 76/221 [00:25<00:43,  3.37it/s][A
 35%|███▍      | 77/221 [00:25<00:47,  3.04it/s][A
 35%|███▌      | 78/221 [00:25<00:37,  3.77it/s][A
 36%|███▌      | 79/221 [00:25<00:44,  3.18it/s][A
 36%|███▌      | 80/221 [00:26<00:44,  3.16it/s][A
 37%|███▋      | 81/221 [00:26<00:48,  2.92it/s][A
 37%|███▋      | 82/221 [00:27<00:49,  2.83it/s][A
 38%|███▊      | 83/221 [00:27<00:51,  2.70it/s][A
 38%|███▊      | 84/221 [00:27<00:44,  3.08it/s][A09/17/2024 00:49:20 - INFO - __main__ -   current idx 3xMq89jLDYE.29 from finetune_area returns wrong image/video, use 48211 instead.

 39%|███▉      | 86/221 [00:27<00:33,  4.09it/s][A
 39%|███▉      | 87/221 [00:29<01:01,  2.16it/s][A[h264 @ 0x55766a3669c0] mmco: unref short failure
[h264 @ 0x55766a3669c0] mmco: unref short failure

 40%|███▉      | 88/221 [00:29<01:06,  2.00it/s][A[h264 @ 0x55857f1ab9c0] mmco: unref short failure
[h264 @ 0x55857f1ab9c0] mmco: unref short failure

 40%|████      | 89/221 [00:30<01:00,  2.19it/s][A
 41%|████      | 90/221 [00:30<00:57,  2.29it/s][A
 41%|████      | 91/221 [00:30<00:47,  2.71it/s][A
 42%|████▏     | 92/221 [00:30<00:43,  2.96it/s][A
 42%|████▏     | 93/221 [00:31<00:46,  2.76it/s][A
 43%|████▎     | 94/221 [00:31<00:42,  2.97it/s][A
 43%|████▎     | 95/221 [00:31<00:40,  3.10it/s][A
 43%|████▎     | 96/221 [00:32<00:52,  2.37it/s][A
 44%|████▍     | 97/221 [00:32<00:47,  2.59it/s][A
 44%|████▍     | 98/221 [00:33<01:02,  1.96it/s][A
 45%|████▍     | 99/221 [00:33<00:52,  2.34it/s][A
 45%|████▌     | 100/221 [00:34<00:45,  2.67it/s][A
 46%|████▌     | 101/221 [00:34<00:38,  3.09it/s][A
 46%|████▌     | 102/221 [00:34<00:41,  2.83it/s][A
 47%|████▋     | 103/221 [00:34<00:33,  3.55it/s][A
 47%|████▋     | 104/221 [00:35<00:29,  3.95it/s][A
 48%|████▊     | 105/221 [00:35<00:30,  3.80it/s][A
 48%|████▊     | 106/221 [00:36<00:48,  2.37it/s][A
 48%|████▊     | 107/221 [00:36<00:41,  2.76it/s][A
 49%|████▉     | 108/221 [00:36<00:36,  3.11it/s][A
 49%|████▉     | 109/221 [00:36<00:35,  3.19it/s][A
 50%|████▉     | 110/221 [00:37<00:29,  3.78it/s][A
 50%|█████     | 111/221 [00:37<00:33,  3.26it/s][A
 51%|█████     | 112/221 [00:37<00:30,  3.54it/s][A
 51%|█████     | 113/221 [00:38<00:41,  2.62it/s][A
 52%|█████▏    | 114/221 [00:38<00:32,  3.28it/s][A
 52%|█████▏    | 115/221 [00:38<00:26,  3.96it/s][A09/17/2024 00:49:31 - INFO - __main__ -   current idx dMEgMG6TS3c.6 from finetune_area returns wrong image/video, use 15518 instead.

 52%|█████▏    | 116/221 [00:39<00:47,  2.20it/s][A
 53%|█████▎    | 117/221 [00:39<00:44,  2.36it/s][A
 53%|█████▎    | 118/221 [00:39<00:35,  2.90it/s][A
 54%|█████▍    | 119/221 [00:40<00:34,  2.98it/s][A
 54%|█████▍    | 120/221 [00:40<00:28,  3.56it/s][A
 55%|█████▍    | 121/221 [00:40<00:22,  4.39it/s][A[h264 @ 0x555634348300] mmco: unref short failure

 55%|█████▌    | 122/221 [00:40<00:24,  4.04it/s][A
 56%|█████▌    | 123/221 [00:41<00:23,  4.16it/s][A
 56%|█████▌    | 124/221 [00:41<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:42<00:35,  2.70it/s][A
 57%|█████▋    | 126/221 [00:42<00:34,  2.78it/s][A
 57%|█████▋    | 127/221 [00:43<00:59,  1.58it/s][A
 58%|█████▊    | 128/221 [00:44<00:51,  1.80it/s][A
 58%|█████▊    | 129/221 [00:44<00:39,  2.32it/s][A
 59%|█████▉    | 130/221 [00:44<00:32,  2.80it/s][A
 59%|█████▉    | 131/221 [00:44<00:28,  3.21it/s][A
 60%|█████▉    | 132/221 [00:45<00:54,  1.64it/s][A[h264 @ 0x55857ecfb1c0] mmco: unref short failure

 60%|██████    | 133/221 [00:46<00:50,  1.73it/s][A
 61%|██████    | 134/221 [00:47<00:53,  1.62it/s][A
 61%|██████    | 135/221 [00:47<00:51,  1.67it/s][A
 62%|██████▏   | 136/221 [00:48<00:45,  1.87it/s][A
 62%|██████▏   | 137/221 [00:48<00:39,  2.13it/s][A
 62%|██████▏   | 138/221 [00:48<00:37,  2.19it/s][A
 63%|██████▎   | 139/221 [00:49<00:47,  1.71it/s][A
 63%|██████▎   | 140/221 [00:49<00:41,  1.94it/s][A
 64%|██████▍   | 141/221 [00:50<00:39,  2.05it/s][A
 64%|██████▍   | 142/221 [00:50<00:35,  2.22it/s][A
 65%|██████▍   | 143/221 [00:51<00:35,  2.19it/s][A
 65%|██████▌   | 144/221 [00:51<00:31,  2.41it/s][A
 66%|██████▌   | 145/221 [00:51<00:24,  3.05it/s][A
 66%|██████▌   | 146/221 [00:51<00:20,  3.75it/s][A
 67%|██████▋   | 147/221 [00:52<00:20,  3.57it/s][A
 67%|██████▋   | 148/221 [00:52<00:23,  3.05it/s][A
 67%|██████▋   | 149/221 [00:53<00:27,  2.58it/s][A
 68%|██████▊   | 150/221 [00:53<00:24,  2.89it/s][A
 68%|██████▊   | 151/221 [00:53<00:28,  2.44it/s][A
 69%|██████▉   | 152/221 [00:55<00:43,  1.57it/s][A
 69%|██████▉   | 153/221 [00:55<00:35,  1.93it/s][A
 70%|██████▉   | 154/221 [00:55<00:31,  2.15it/s][A
 70%|███████   | 155/221 [00:55<00:27,  2.42it/s][A
 71%|███████   | 156/221 [00:56<00:27,  2.37it/s][A
 71%|███████   | 157/221 [00:57<00:35,  1.82it/s][A
 71%|███████▏  | 158/221 [00:57<00:29,  2.13it/s][A
 72%|███████▏  | 159/221 [00:57<00:24,  2.53it/s][A
 72%|███████▏  | 160/221 [00:57<00:19,  3.06it/s][A
 73%|███████▎  | 161/221 [00:58<00:16,  3.60it/s][A
 73%|███████▎  | 162/221 [00:58<00:13,  4.25it/s][A
 74%|███████▍  | 163/221 [00:58<00:15,  3.75it/s][A
 74%|███████▍  | 164/221 [00:58<00:14,  3.90it/s][A
 75%|███████▍  | 165/221 [00:59<00:14,  3.76it/s][A
 75%|███████▌  | 166/221 [00:59<00:24,  2.29it/s][A
 76%|███████▌  | 167/221 [01:00<00:18,  2.94it/s][A
 76%|███████▌  | 168/221 [01:00<00:25,  2.04it/s][A
 76%|███████▋  | 169/221 [01:00<00:19,  2.62it/s][A
 77%|███████▋  | 170/221 [01:01<00:18,  2.80it/s][A
 77%|███████▋  | 171/221 [01:01<00:19,  2.59it/s][A
 78%|███████▊  | 172/221 [01:01<00:16,  2.91it/s][A
 78%|███████▊  | 173/221 [01:02<00:18,  2.59it/s][A
 79%|███████▊  | 174/221 [01:02<00:16,  2.83it/s][A
 79%|███████▉  | 175/221 [01:03<00:16,  2.73it/s][A
 80%|███████▉  | 176/221 [01:03<00:13,  3.24it/s][A
 80%|████████  | 177/221 [01:03<00:12,  3.57it/s][A
 81%|████████  | 178/221 [01:04<00:18,  2.32it/s][A
 81%|████████  | 179/221 [01:04<00:18,  2.29it/s][A
 81%|████████▏ | 180/221 [01:04<00:14,  2.87it/s][A
 82%|████████▏ | 182/221 [01:05<00:10,  3.77it/s][A
 83%|████████▎ | 183/221 [01:05<00:10,  3.70it/s][A
 83%|████████▎ | 184/221 [01:05<00:10,  3.43it/s][A
 84%|████████▍ | 186/221 [01:06<00:11,  2.99it/s][A
 85%|████████▍ | 187/221 [01:06<00:10,  3.22it/s][A
 85%|████████▌ | 188/221 [01:07<00:09,  3.38it/s][A
 86%|████████▌ | 189/221 [01:07<00:09,  3.28it/s][A
 86%|████████▌ | 190/221 [01:07<00:10,  2.99it/s][A[h264 @ 0x56348f873fc0] mmco: unref short failure

 87%|████████▋ | 192/221 [01:08<00:07,  3.90it/s][A
 88%|████████▊ | 194/221 [01:10<00:15,  1.72it/s][A
 88%|████████▊ | 195/221 [01:10<00:12,  2.06it/s][A
 89%|████████▊ | 196/221 [01:10<00:10,  2.40it/s][A
 89%|████████▉ | 197/221 [01:11<00:09,  2.58it/s][A
 90%|████████▉ | 198/221 [01:11<00:07,  2.95it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  2.92it/s][A
 90%|█████████ | 200/221 [01:11<00:06,  3.43it/s][A
 91%|█████████ | 201/221 [01:12<00:05,  3.44it/s][A
 91%|█████████▏| 202/221 [01:12<00:05,  3.41it/s][A
 92%|█████████▏| 203/221 [01:12<00:05,  3.24it/s][A[h264 @ 0x5634909a8b00] mmco: unref short failure
[h264 @ 0x5634909a8b00] mmco: unref short failure

 92%|█████████▏| 204/221 [01:12<00:04,  3.51it/s][A
 93%|█████████▎| 205/221 [01:13<00:04,  3.94it/s][A
 93%|█████████▎| 206/221 [01:13<00:04,  3.24it/s][A
 94%|█████████▍| 208/221 [01:13<00:03,  3.80it/s][A
 95%|█████████▍| 209/221 [01:14<00:02,  4.00it/s][A
 95%|█████████▌| 211/221 [01:14<00:02,  4.01it/s][A
 96%|█████████▌| 212/221 [01:14<00:02,  3.73it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  3.69it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  2.70it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  3.12it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  3.31it/s][A[h264 @ 0x5634a2c63ec0] mmco: unref short failure

 98%|█████████▊| 217/221 [01:16<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:17<00:00,  3.05it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  3.15it/s][A
100%|█████████▉| 220/221 [01:18<00:00,  1.87it/s][A100%|██████████| 221/221 [01:18<00:00,  2.81it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:05,  3.36it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.28it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.32it/s][A
  2%|▏         | 5/221 [00:01<01:07,  3.22it/s][A
  3%|▎         | 6/221 [00:01<01:09,  3.10it/s][A
  3%|▎         | 7/221 [00:02<01:09,  3.07it/s][A
  4%|▎         | 8/221 [00:02<01:10,  3.00it/s][A
  4%|▍         | 9/221 [00:02<01:08,  3.08it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.17it/s][A
  5%|▍         | 11/221 [00:03<01:08,  3.05it/s][A
  5%|▌         | 12/221 [00:03<01:07,  3.09it/s][A
  6%|▌         | 13/221 [00:04<01:05,  3.16it/s][A
  6%|▋         | 14/221 [00:04<01:04,  3.23it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.23it/s][A
  7%|▋         | 16/221 [00:05<01:02,  3.28it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.32it/s][A
  8%|▊         | 18/221 [00:05<01:02,  3.26it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.29it/s][A
 10%|▉         | 21/221 [00:06<01:01,  3.27it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.27it/s][A
 10%|█         | 23/221 [00:07<01:00,  3.27it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.31it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 26/221 [00:08<00:58,  3.36it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.38it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.39it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.28it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.27it/s][A
 15%|█▍        | 33/221 [00:10<00:57,  3.26it/s][A[h264 @ 0x557672d02880] mmco: unref short failure

 15%|█▌        | 34/221 [00:10<00:58,  3.22it/s][A
 16%|█▌        | 35/221 [00:10<00:58,  3.19it/s][A
 16%|█▋        | 36/221 [00:11<00:57,  3.20it/s][A
 17%|█▋        | 37/221 [00:11<00:58,  3.17it/s][A
 17%|█▋        | 38/221 [00:11<00:56,  3.23it/s][A
 18%|█▊        | 39/221 [00:12<00:55,  3.28it/s][A
 18%|█▊        | 40/221 [00:12<00:55,  3.26it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.28it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.33it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.33it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.35it/s][A
 21%|██        | 46/221 [00:14<00:52,  3.36it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.37it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.38it/s][A
 22%|██▏       | 49/221 [00:15<00:50,  3.38it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.33it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:50,  3.34it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.32it/s][A09/17/2024 00:50:31 - INFO - __main__ -   current idx DYY8KovKO3M.52 from finetune_area returns wrong image/video, use 146096 instead.

 24%|██▍       | 54/221 [00:16<00:49,  3.34it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.36it/s][A
 25%|██▌       | 56/221 [00:17<00:48,  3.37it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.37it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.38it/s][A
 27%|██▋       | 59/221 [00:18<00:48,  3.33it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.35it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.36it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.37it/s][A
 29%|██▊       | 63/221 [00:19<00:46,  3.37it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.38it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.38it/s][A
 30%|██▉       | 66/221 [00:20<00:45,  3.38it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.36it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.37it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.38it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.39it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.39it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 73/221 [00:22<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.40it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.40it/s][A
 34%|███▍      | 76/221 [00:23<00:42,  3.38it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.36it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.35it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.36it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.37it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.38it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.39it/s][A
 38%|███▊      | 83/221 [00:25<00:40,  3.39it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.40it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.40it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.40it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.40it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.40it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.40it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.40it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.40it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.40it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.41it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.41it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.41it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.41it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.41it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 115/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.41it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.41it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.41it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.41it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.41it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.41it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.41it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.41it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.70it/s][A
  1%|          | 2/221 [00:00<01:01,  3.56it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.43it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.33it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 6/221 [00:01<00:50,  4.24it/s][A
  3%|▎         | 7/221 [00:01<00:48,  4.43it/s][A
  4%|▎         | 8/221 [00:02<00:51,  4.16it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.51it/s][A
  5%|▍         | 10/221 [00:03<01:18,  2.68it/s][A
  5%|▍         | 11/221 [00:03<01:19,  2.65it/s][A
  5%|▌         | 12/221 [00:03<01:11,  2.93it/s][A
  6%|▌         | 13/221 [00:04<01:22,  2.51it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.64it/s][A
  7%|▋         | 15/221 [00:05<01:24,  2.43it/s][A
  7%|▋         | 16/221 [00:05<01:15,  2.71it/s][A
  8%|▊         | 17/221 [00:05<01:22,  2.47it/s][A
  8%|▊         | 18/221 [00:06<01:17,  2.62it/s][A
  9%|▊         | 19/221 [00:06<01:05,  3.08it/s][A
  9%|▉         | 20/221 [00:06<00:53,  3.73it/s][A
 10%|▉         | 21/221 [00:06<00:47,  4.23it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.53it/s][A
 10%|█         | 23/221 [00:06<00:37,  5.29it/s][A
 11%|█         | 24/221 [00:07<00:34,  5.71it/s][A
 11%|█▏        | 25/221 [00:07<00:38,  5.07it/s][A
 12%|█▏        | 26/221 [00:07<00:45,  4.31it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.32it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.35it/s][A
 13%|█▎        | 29/221 [00:08<00:59,  3.22it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.34it/s][A
 14%|█▍        | 31/221 [00:09<00:53,  3.56it/s][A
 14%|█▍        | 32/221 [00:09<00:51,  3.64it/s][A
 15%|█▍        | 33/221 [00:09<00:47,  3.95it/s][A
 15%|█▌        | 34/221 [00:09<00:44,  4.19it/s][A
 16%|█▌        | 35/221 [00:09<00:36,  5.03it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:10<00:56,  3.26it/s][A
 17%|█▋        | 38/221 [00:11<00:56,  3.24it/s][A
 18%|█▊        | 39/221 [00:11<00:47,  3.86it/s][A
 18%|█▊        | 40/221 [00:11<00:48,  3.76it/s][A
 19%|█▊        | 41/221 [00:11<00:48,  3.73it/s][A
 19%|█▉        | 42/221 [00:11<00:43,  4.09it/s][A
 19%|█▉        | 43/221 [00:12<00:51,  3.45it/s][A
 20%|█▉        | 44/221 [00:12<00:45,  3.90it/s][A
 20%|██        | 45/221 [00:12<00:52,  3.35it/s][A
 21%|██        | 46/221 [00:13<00:54,  3.22it/s][A
 21%|██▏       | 47/221 [00:13<00:45,  3.85it/s][A
 22%|██▏       | 49/221 [00:13<00:30,  5.69it/s][A
 23%|██▎       | 50/221 [00:14<00:44,  3.81it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.86it/s][A
 24%|██▎       | 52/221 [00:14<00:38,  4.36it/s][A
 24%|██▍       | 53/221 [00:14<00:47,  3.55it/s][A
 24%|██▍       | 54/221 [00:15<00:44,  3.72it/s][A
 25%|██▍       | 55/221 [00:15<00:40,  4.14it/s][A
 25%|██▌       | 56/221 [00:15<00:41,  3.93it/s][A
 26%|██▌       | 57/221 [00:15<00:44,  3.67it/s][A
 27%|██▋       | 59/221 [00:16<00:37,  4.31it/s][A
 27%|██▋       | 60/221 [00:16<00:33,  4.76it/s][A
 28%|██▊       | 61/221 [00:16<00:34,  4.65it/s][A
 28%|██▊       | 62/221 [00:17<00:39,  4.01it/s][A
 29%|██▉       | 64/221 [00:17<00:35,  4.38it/s][A
 29%|██▉       | 65/221 [00:17<00:32,  4.83it/s][A
 30%|██▉       | 66/221 [00:17<00:37,  4.15it/s][A
 30%|███       | 67/221 [00:18<00:41,  3.75it/s][A
 31%|███       | 68/221 [00:18<00:38,  3.94it/s][A
 31%|███       | 69/221 [00:19<00:53,  2.84it/s][A
 32%|███▏      | 70/221 [00:19<00:46,  3.22it/s][A
 32%|███▏      | 71/221 [00:19<00:47,  3.14it/s][A
 33%|███▎      | 72/221 [00:20<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  2.96it/s][A
 33%|███▎      | 74/221 [00:20<00:41,  3.55it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.21it/s][A
 34%|███▍      | 76/221 [00:21<00:45,  3.20it/s][A
 35%|███▍      | 77/221 [00:21<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.48it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.73it/s][A
 36%|███▌      | 80/221 [00:22<00:36,  3.88it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.88it/s][A
 37%|███▋      | 82/221 [00:22<00:33,  4.16it/s][A
 38%|███▊      | 83/221 [00:22<00:28,  4.90it/s][A
 38%|███▊      | 84/221 [00:23<00:35,  3.88it/s][A
 38%|███▊      | 85/221 [00:23<00:29,  4.56it/s][A
 39%|███▉      | 86/221 [00:23<00:28,  4.69it/s][A
 39%|███▉      | 87/221 [00:23<00:38,  3.52it/s][A
 40%|███▉      | 88/221 [00:24<00:44,  3.00it/s][A
 40%|████      | 89/221 [00:24<00:47,  2.77it/s][A
 41%|████      | 90/221 [00:25<00:49,  2.63it/s][A
 41%|████      | 91/221 [00:25<00:43,  3.00it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.25it/s][A
 42%|████▏     | 93/221 [00:26<00:41,  3.11it/s][A
 43%|████▎     | 94/221 [00:26<00:35,  3.57it/s][A
 43%|████▎     | 95/221 [00:26<00:52,  2.39it/s][A
 43%|████▎     | 96/221 [00:27<00:48,  2.58it/s][A
 44%|████▍     | 97/221 [00:27<00:47,  2.63it/s][A
 44%|████▍     | 98/221 [00:28<00:48,  2.55it/s][A
 45%|████▍     | 99/221 [00:28<00:45,  2.66it/s][A
 45%|████▌     | 100/221 [00:28<00:47,  2.57it/s][A
 46%|████▌     | 101/221 [00:29<00:46,  2.60it/s][A
 46%|████▌     | 102/221 [00:29<00:41,  2.89it/s][A
 47%|████▋     | 103/221 [00:29<00:33,  3.56it/s][A
 48%|████▊     | 105/221 [00:29<00:26,  4.40it/s][A
 48%|████▊     | 106/221 [00:30<00:30,  3.76it/s][A
 48%|████▊     | 107/221 [00:30<00:27,  4.12it/s][A
 49%|████▉     | 108/221 [00:30<00:28,  3.90it/s][A
 49%|████▉     | 109/221 [00:31<00:28,  3.88it/s][A
 50%|████▉     | 110/221 [00:31<00:27,  4.00it/s][A
 50%|█████     | 111/221 [00:31<00:30,  3.63it/s][A
 51%|█████     | 112/221 [00:31<00:30,  3.61it/s][A
 51%|█████     | 113/221 [00:32<00:28,  3.80it/s][A
 52%|█████▏    | 115/221 [00:32<00:20,  5.21it/s][A
 52%|█████▏    | 116/221 [00:32<00:19,  5.27it/s][A
 53%|█████▎    | 117/221 [00:32<00:21,  4.92it/s][A
 53%|█████▎    | 118/221 [00:33<00:24,  4.20it/s][A
 54%|█████▍    | 119/221 [00:33<00:29,  3.51it/s][A
 54%|█████▍    | 120/221 [00:33<00:29,  3.44it/s][A
 55%|█████▍    | 121/221 [00:34<00:31,  3.18it/s][A
 55%|█████▌    | 122/221 [00:34<00:32,  3.01it/s][A
 56%|█████▌    | 123/221 [00:34<00:27,  3.51it/s][A
 56%|█████▌    | 124/221 [00:35<00:33,  2.93it/s][A
 57%|█████▋    | 125/221 [00:35<00:36,  2.65it/s][A
 57%|█████▋    | 126/221 [00:35<00:30,  3.10it/s][A
 57%|█████▋    | 127/221 [00:36<00:32,  2.89it/s][A
 58%|█████▊    | 128/221 [00:36<00:28,  3.21it/s][A
 58%|█████▊    | 129/221 [00:36<00:23,  3.98it/s][A
 59%|█████▉    | 130/221 [00:36<00:25,  3.59it/s][A
 59%|█████▉    | 131/221 [00:37<00:22,  4.06it/s][A
 60%|█████▉    | 132/221 [00:37<00:29,  2.97it/s][A
 60%|██████    | 133/221 [00:37<00:29,  2.94it/s][A
 61%|██████    | 134/221 [00:38<00:34,  2.53it/s][A
 61%|██████    | 135/221 [00:38<00:30,  2.85it/s][A
 62%|██████▏   | 136/221 [00:39<00:29,  2.91it/s][A
 62%|██████▏   | 137/221 [00:39<00:26,  3.14it/s][A
 62%|██████▏   | 138/221 [00:39<00:24,  3.40it/s][A
 63%|██████▎   | 139/221 [00:39<00:26,  3.14it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.41it/s][A
 64%|██████▍   | 141/221 [00:40<00:26,  3.07it/s][A
 64%|██████▍   | 142/221 [00:40<00:23,  3.31it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.47it/s][A
 65%|██████▌   | 144/221 [00:41<00:20,  3.70it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.34it/s][A
 66%|██████▌   | 146/221 [00:41<00:20,  3.59it/s][A
 67%|██████▋   | 147/221 [00:42<00:16,  4.35it/s][A
 67%|██████▋   | 148/221 [00:43<00:34,  2.13it/s][A
 67%|██████▋   | 149/221 [00:43<00:29,  2.48it/s][A
 68%|██████▊   | 150/221 [00:43<00:25,  2.77it/s][A
 68%|██████▊   | 151/221 [00:44<00:38,  1.83it/s][A
 69%|██████▉   | 152/221 [00:45<00:35,  1.92it/s][A
 69%|██████▉   | 153/221 [00:45<00:30,  2.22it/s][A
 70%|██████▉   | 154/221 [00:45<00:26,  2.49it/s][A
 70%|███████   | 155/221 [00:45<00:22,  2.92it/s][A
 71%|███████   | 156/221 [00:46<00:20,  3.16it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.27it/s][A
 71%|███████▏  | 158/221 [00:46<00:21,  2.99it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.39it/s][A
 72%|███████▏  | 160/221 [00:47<00:18,  3.30it/s][A
 73%|███████▎  | 162/221 [00:47<00:11,  5.10it/s][A
 74%|███████▍  | 163/221 [00:47<00:12,  4.78it/s][A
 74%|███████▍  | 164/221 [00:47<00:11,  4.87it/s][A
 75%|███████▍  | 165/221 [00:48<00:12,  4.47it/s][A
 75%|███████▌  | 166/221 [00:48<00:13,  3.96it/s][A
 76%|███████▌  | 168/221 [00:48<00:11,  4.45it/s][A
 76%|███████▋  | 169/221 [00:48<00:10,  5.10it/s][A
 77%|███████▋  | 170/221 [00:49<00:11,  4.42it/s][A
 77%|███████▋  | 171/221 [00:49<00:16,  3.00it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.39it/s][A
 78%|███████▊  | 173/221 [00:50<00:15,  3.12it/s][A
 79%|███████▊  | 174/221 [00:50<00:12,  3.83it/s][A
 79%|███████▉  | 175/221 [00:50<00:12,  3.82it/s][A
 80%|███████▉  | 176/221 [00:51<00:10,  4.16it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.85it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.54it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.63it/s][A
 82%|████████▏ | 181/221 [00:52<00:10,  3.75it/s][A
 82%|████████▏ | 182/221 [00:52<00:10,  3.85it/s][A
 83%|████████▎ | 183/221 [00:53<00:10,  3.59it/s][A
 83%|████████▎ | 184/221 [00:53<00:11,  3.26it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.49it/s][A
 85%|████████▍ | 187/221 [00:54<00:08,  4.00it/s][A
 85%|████████▌ | 188/221 [00:54<00:07,  4.39it/s][A
 86%|████████▌ | 189/221 [00:54<00:07,  4.49it/s][A
 86%|████████▌ | 190/221 [00:55<00:08,  3.62it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  3.86it/s][A
 87%|████████▋ | 193/221 [00:55<00:07,  3.51it/s][A
 88%|████████▊ | 194/221 [00:56<00:09,  2.87it/s][A
 88%|████████▊ | 195/221 [00:56<00:09,  2.71it/s][A
 89%|████████▊ | 196/221 [00:57<00:09,  2.70it/s][A
 89%|████████▉ | 197/221 [00:57<00:10,  2.33it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.63it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  3.08it/s][A
 90%|█████████ | 200/221 [00:58<00:05,  3.72it/s][A
 91%|█████████ | 201/221 [00:58<00:04,  4.15it/s][A
 91%|█████████▏| 202/221 [00:58<00:05,  3.78it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.74it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  4.08it/s][A
 93%|█████████▎| 205/221 [00:59<00:03,  4.01it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.33it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.31it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.49it/s][A
 95%|█████████▍| 209/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:02,  3.83it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.76it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.46it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.71it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.05it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.01it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  3.23it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.07it/s][A
 99%|█████████▊| 218/221 [01:03<00:01,  2.49it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.65it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.24it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.48it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'area_r1': 40.7, 'area_recall': '40.7/69.0/79.6', 'area_ravg': 63.1}
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'forward_r1': 37.1, 'forward_recall': '37.1/64.0/75.6', 'forward_ravg': 58.9}
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'area_video_r1': 36.9, 'area_video_recall': '36.9/66.1/76.2', 'area_video_ravg': 59.7}
09/17/2024 00:52:27 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 149=======

09/17/2024 00:52:27 - INFO - __main__ -   {'area_video_r1': 36.9, 'area_video_recall': '36.9/66.1/76.2', 'area_video_ravg': 59.7}
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/75.0/82.7', 'area_video_ravg': 69.6, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/71.2/79.6', 'area_video_back_ravg': 66.6}
09/17/2024 00:52:27 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 149=======

09/17/2024 00:52:27 - INFO - __main__ -   {'area_video_r1': 51.0, 'area_video_recall': '51.0/75.0/82.7', 'area_video_ravg': 69.6, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/71.2/79.6', 'area_video_back_ravg': 66.6}
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/66.7/76.4', 'video_ravg': 60.0}
09/17/2024 00:52:27 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 00:52:27 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/66.7/76.4', 'video_ravg': 60.0}
09/17/2024 00:52:27 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 149--===========

09/17/2024 00:52:27 - INFO - __main__ -   {'video_r1': 50.8, 'video_recall': '50.8/74.0/81.7', 'video_ravg': 68.8}
09/17/2024 00:52:27 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 99=======

09/17/2024 00:52:27 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/71.6/80.3', 'video_ravg': 67.7}
09/17/2024 00:53:02 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.01280149258673191, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 2.587212562561035, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.216796636581421, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 4.816810607910156}
[h264 @ 0x5634aa648cc0] mmco: unref short failure
[h264 @ 0x5634aa648cc0] mmco: unref short failure
[h264 @ 0x5634936ff940] mmco: unref short failure
[h264 @ 0x5634936ff940] mmco: unref short failure
[h264 @ 0x5634936ff940] mmco: unref short failure
[h264 @ 0x5634936ff940] mmco: unref short failure
[h264 @ 0x5634936ff940] mmco: unref short failure
  5%|▌         | 150/2910 [57:06<105:07:57, 137.13s/it][h264 @ 0x56348d1f78c0] mmco: unref short failure
09/17/2024 00:53:07 - INFO - __main__ -   current idx rGthtRZl8B0.21 from finetune_area returns wrong image/video, use 30520 instead.
  5%|▌         | 151/2910 [57:10<74:29:15, 97.19s/it]  [h264 @ 0x55766cc47240] mmco: unref short failure
  5%|▌         | 152/2910 [57:15<53:20:03, 69.62s/it]  5%|▌         | 153/2910 [57:20<38:22:47, 50.12s/it]  5%|▌         | 154/2910 [57:26<28:11:13, 36.82s/it][h264 @ 0x557669dce9c0] mmco: unref short failure
  5%|▌         | 155/2910 [57:31<20:59:49, 27.44s/it][h264 @ 0x555636230100] mmco: unref short failure
  5%|▌         | 156/2910 [57:38<16:17:20, 21.29s/it]  5%|▌         | 157/2910 [57:44<12:44:42, 16.67s/it][h264 @ 0x5556345ce740] mmco: unref short failure
[h264 @ 0x55858f5eb300] mmco: unref short failure
[h264 @ 0x55858f5eb300] mmco: unref short failure
  5%|▌         | 158/2910 [57:50<10:13:59, 13.39s/it][h264 @ 0x55858f5eac40] mmco: unref short failure
[h264 @ 0x55858f5eac40] mmco: unref short failure
[h264 @ 0x5634a7da9500] mmco: unref short failure
[h264 @ 0x5634a7da9500] mmco: unref short failure
[h264 @ 0x5634a7da9500] mmco: unref short failure
[h264 @ 0x5634a7da9500] mmco: unref short failure
  5%|▌         | 159/2910 [57:56<8:39:24, 11.33s/it]   5%|▌         | 160/2910 [58:02<7:26:04,  9.73s/it]  6%|▌         | 161/2910 [58:09<6:42:16,  8.78s/it]  6%|▌         | 162/2910 [58:15<6:10:17,  8.09s/it]  6%|▌         | 163/2910 [58:21<5:43:31,  7.50s/it][h264 @ 0x5576887c3080] mmco: unref short failure
[h264 @ 0x5576887c3080] mmco: unref short failure
  6%|▌         | 164/2910 [58:27<5:22:46,  7.05s/it][h264 @ 0x56349e5e00c0] mmco: unref short failure
[h264 @ 0x5556172c3700] mmco: unref short failure
[h264 @ 0x5556172c3700] mmco: unref short failure
[h264 @ 0x56348cca9d80] mmco: unref short failure
[h264 @ 0x56348cca9d80] mmco: unref short failure
  6%|▌         | 165/2910 [58:33<4:59:27,  6.55s/it][h264 @ 0x55561d654e00] mmco: unref short failure
[h264 @ 0x55561d654e00] mmco: unref short failure
[h264 @ 0x555623d360c0] mmco: unref short failure
[h264 @ 0x555623d360c0] mmco: unref short failure
[h264 @ 0x557685e8f740] mmco: unref short failure
[h264 @ 0x557685e8f740] mmco: unref short failure
[h264 @ 0x557687264b80] mmco: unref short failure
[h264 @ 0x55561d147100] mmco: unref short failure
[h264 @ 0x55561d147100] mmco: unref short failure
[h264 @ 0x55767dd58940] mmco: unref short failure
[h264 @ 0x55767dd58940] mmco: unref short failure
[h264 @ 0x555620dae080] mmco: unref short failure
[h264 @ 0x555620dae080] mmco: unref short failure
[h264 @ 0x555620dae080] mmco: unref short failure
[h264 @ 0x555620dae080] mmco: unref short failure
[h264 @ 0x55561c3a5780] mmco: unref short failure
[h264 @ 0x55561c3a5780] mmco: unref short failure
[h264 @ 0x55561c3a5780] mmco: unref short failure
[h264 @ 0x55561c3a5780] mmco: unref short failure
  6%|▌         | 166/2910 [59:06<11:05:12, 14.55s/it][h264 @ 0x55857eaad000] mmco: unref short failure
[h264 @ 0x55857eaad000] mmco: unref short failure
[h264 @ 0x55766f2b3200] mmco: unref short failure
[h264 @ 0x55858147d200] mmco: unref short failure
[h264 @ 0x55766b676240] mmco: unref short failure
  6%|▌         | 167/2910 [59:29<12:54:45, 16.95s/it][h264 @ 0x5634a8800e80] mmco: unref short failure
[h264 @ 0x5634a8800e80] mmco: unref short failure
[h264 @ 0x5634af314580] mmco: unref short failure
[h264 @ 0x558586c9abc0] mmco: unref short failure
[h264 @ 0x558586c9abc0] mmco: unref short failure
09/17/2024 00:55:43 - INFO - __main__ -   current idx 6wN4IYAiKIg.70 from finetune_area returns wrong image/video, use 15062 instead.
  6%|▌         | 168/2910 [59:52<14:20:06, 18.82s/it][h264 @ 0x5585844a80c0] mmco: unref short failure
[h264 @ 0x55766ea3e3c0] mmco: unref short failure
[h264 @ 0x55857e2c5dc0] mmco: unref short failure
[h264 @ 0x55857e2c5dc0] mmco: unref short failure
  6%|▌         | 169/2910 [59:58<11:21:32, 14.92s/it][h264 @ 0x56349067a300] mmco: unref short failure
[h264 @ 0x56349067a300] mmco: unref short failure
  6%|▌         | 170/2910 [1:00:09<10:36:08, 13.93s/it][h264 @ 0x55858814dd40] mmco: unref short failure
[h264 @ 0x55858814dd40] mmco: unref short failure
  6%|▌         | 171/2910 [1:00:16<9:03:16, 11.90s/it]   6%|▌         | 172/2910 [1:00:25<8:13:54, 10.82s/it]09/17/2024 00:56:25 - INFO - __main__ -   current idx nCOpzvA0wgE.12 from finetune_area returns wrong image/video, use 6319 instead.
[h264 @ 0x563494e0a780] mmco: unref short failure
[h264 @ 0x563494e0a780] mmco: unref short failure
  6%|▌         | 173/2910 [1:00:31<7:06:12,  9.34s/it][h264 @ 0x5634a7d84500] mmco: unref short failure
[h264 @ 0x56348f873dc0] mmco: unref short failure
[h264 @ 0x55859a730380] mmco: unref short failure
[h264 @ 0x55859a730380] mmco: unref short failure
[h264 @ 0x55767bbc94c0] mmco: unref short failure
[h264 @ 0x55767bbc94c0] mmco: unref short failure
[h264 @ 0x5634ad64c080] mmco: unref short failure
[h264 @ 0x558591ba7e80] mmco: unref short failure
[h264 @ 0x558591ba7e80] mmco: unref short failure
09/17/2024 00:56:55 - INFO - __main__ -   current idx 7OpYRTupJJ0.44 from finetune_area returns wrong image/video, use 70154 instead.
[h264 @ 0x558582594a00] mmco: unref short failure
[h264 @ 0x558582594a00] mmco: unref short failure
[h264 @ 0x56349253d800] mmco: unref short failure
[h264 @ 0x56349253d800] mmco: unref short failure
[h264 @ 0x56349253d800] mmco: unref short failure
[h264 @ 0x5634a8dfb780] mmco: unref short failure
[h264 @ 0x55766dfb6980] mmco: unref short failure
[h264 @ 0x55766dfb6980] mmco: unref short failure
[h264 @ 0x55561825b500] mmco: unref short failure
[h264 @ 0x55561825b500] mmco: unref short failure
[h264 @ 0x555633f44900] mmco: unref short failure
[h264 @ 0x555633f44900] mmco: unref short failure
[h264 @ 0x558585dc8bc0] mmco: unref short failure
[h264 @ 0x558585dc8bc0] mmco: unref short failure
[h264 @ 0x55859194de00] mmco: unref short failure
  6%|▌         | 174/2910 [1:01:39<20:35:14, 27.09s/it][h264 @ 0x56348fd8ef40] mmco: unref short failure
[h264 @ 0x56348fd8ef40] mmco: unref short failure
[h264 @ 0x555623d36340] mmco: unref short failure
[h264 @ 0x555623d36340] mmco: unref short failure
[h264 @ 0x5634a914d6c0] mmco: unref short failure
09/17/2024 00:57:54 - INFO - __main__ -   current idx Yy-gLEskjRc.46 from finetune_area returns wrong image/video, use 78565 instead.
[h264 @ 0x55857e2c5dc0] mmco: unref short failure
[h264 @ 0x55857e2c5dc0] mmco: unref short failure
[h264 @ 0x55857e2c5dc0] mmco: unref short failure
[h264 @ 0x5634901a8180] mmco: unref short failure
  6%|▌         | 175/2910 [1:02:07<20:46:16, 27.34s/it][h264 @ 0x55561701a9c0] mmco: unref short failure
[h264 @ 0x55561701a9c0] mmco: unref short failure
[h264 @ 0x5634a903e340] mmco: unref short failure
[h264 @ 0x5634a903e340] mmco: unref short failure
09/17/2024 00:58:19 - INFO - __main__ -   current idx cdG0MaKc36M.46 from finetune_area returns wrong image/video, use 148488 instead.
  6%|▌         | 176/2910 [1:02:26<18:49:27, 24.79s/it][h264 @ 0x558587a65e40] mmco: unref short failure
[h264 @ 0x558587a65e40] mmco: unref short failure
  6%|▌         | 177/2910 [1:02:32<14:41:04, 19.34s/it]  6%|▌         | 178/2910 [1:02:46<13:23:59, 17.66s/it][h264 @ 0x55857ea1b240] mmco: unref short failure
[h264 @ 0x55857ea1b240] mmco: unref short failure
[h264 @ 0x55561e9ef600] mmco: unref short failure
[h264 @ 0x55561e9ef600] mmco: unref short failure
  6%|▌         | 179/2910 [1:02:53<10:51:46, 14.32s/it][h264 @ 0x55766f641cc0] mmco: unref short failure
[h264 @ 0x55766f2b38c0] mmco: unref short failure
  6%|▌         | 180/2910 [1:02:59<9:00:54, 11.89s/it] [h264 @ 0x5556372b0a00] mmco: unref short failure
[h264 @ 0x5556372b0a00] mmco: unref short failure
[h264 @ 0x5634a9875900] mmco: unref short failure
[h264 @ 0x5634a9875900] mmco: unref short failure
  6%|▌         | 181/2910 [1:03:04<7:33:37,  9.97s/it][h264 @ 0x555634707500] mmco: unref short failure
[h264 @ 0x555634707500] mmco: unref short failure
[h264 @ 0x55858814e1c0] mmco: unref short failure
[h264 @ 0x5576702ce800] mmco: unref short failure
[h264 @ 0x5576702ce800] mmco: unref short failure
[h264 @ 0x5556294a0280] mmco: unref short failure
[h264 @ 0x55561a25b080] mmco: unref short failure
[h264 @ 0x55561a25b080] mmco: unref short failure
[h264 @ 0x5556205c5d40] mmco: unref short failure
[h264 @ 0x55562296f100] mmco: unref short failure
[h264 @ 0x55562296f100] mmco: unref short failure
[h264 @ 0x5556195e6ac0] mmco: unref short failure
[h264 @ 0x558591995440] mmco: unref short failure
[h264 @ 0x555638f33f00] mmco: unref short failure
[h264 @ 0x56348f752040] mmco: unref short failure
[h264 @ 0x56348f752040] mmco: unref short failure
[h264 @ 0x5634955f6480] mmco: unref short failure
[h264 @ 0x5634955f6480] mmco: unref short failure
[h264 @ 0x555617515800] mmco: unref short failure
[h264 @ 0x555617515800] mmco: unref short failure
  6%|▋         | 182/2910 [1:04:07<19:37:51, 25.91s/it][h264 @ 0x56349555e440] mmco: unref short failure
[h264 @ 0x56349555e440] mmco: unref short failure
[h264 @ 0x558589ff4900] mmco: unref short failure
[h264 @ 0x56348ed9cc80] mmco: unref short failure
[h264 @ 0x56348ed9cc80] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x5556370fecc0] mmco: unref short failure
[h264 @ 0x5556370fecc0] mmco: unref short failure
  6%|▋         | 183/2910 [1:04:39<21:00:29, 27.73s/it][h264 @ 0x558585dc8bc0] mmco: unref short failure
[h264 @ 0x5556227eec00] mmco: unref short failure
  6%|▋         | 184/2910 [1:04:50<17:04:43, 22.55s/it][h264 @ 0x5556163cb9c0] mmco: unref short failure
[h264 @ 0x5556163cb9c0] mmco: unref short failure
[h264 @ 0x5634a1538040] mmco: unref short failure
[h264 @ 0x5634a1538040] mmco: unref short failure
  6%|▋         | 185/2910 [1:04:57<13:26:30, 17.76s/it][h264 @ 0x557675a9c300] mmco: unref short failure
[h264 @ 0x557675a9c300] mmco: unref short failure
[h264 @ 0x56349197c340] mmco: unref short failure
[h264 @ 0x56349197c340] mmco: unref short failure
[h264 @ 0x55859cadd9c0] mmco: unref short failure
[h264 @ 0x555619715d80] mmco: unref short failure
[h264 @ 0x555619715d80] mmco: unref short failure
  6%|▋         | 186/2910 [1:05:05<11:13:15, 14.83s/it][h264 @ 0x56348f602bc0] mmco: unref short failure
[h264 @ 0x56348f602bc0] mmco: unref short failure
  6%|▋         | 187/2910 [1:05:11<9:25:13, 12.45s/it] [h264 @ 0x555617e67880] mmco: unref short failure
[h264 @ 0x555617e67880] mmco: unref short failure
[h264 @ 0x55767d871b00] mmco: unref short failure
[h264 @ 0x55767d871b00] mmco: unref short failure
  6%|▋         | 188/2910 [1:05:23<9:16:40, 12.27s/it]  6%|▋         | 189/2910 [1:05:30<8:00:46, 10.60s/it][h264 @ 0x55563817ca00] mmco: unref short failure
[h264 @ 0x557685e8ee40] mmco: unref short failure
09/17/2024 01:01:35 - INFO - __main__ -   current idx eYV2bd-oyoQ.13 from finetune_area returns wrong image/video, use 132972 instead.
[h264 @ 0x55561b1aa0c0] mmco: unref short failure
[h264 @ 0x55561b1aa0c0] mmco: unref short failure
[h264 @ 0x55857f6074c0] mmco: unref short failure
[h264 @ 0x55857f6074c0] mmco: unref short failure
[h264 @ 0x5556345cee00] mmco: unref short failure
[h264 @ 0x5556345cee00] mmco: unref short failure
[h264 @ 0x5556358f2540] mmco: unref short failure
[h264 @ 0x5556358f2540] mmco: unref short failure
[h264 @ 0x55766e9a0300] mmco: unref short failure
[h264 @ 0x55766e9a0300] mmco: unref short failure
[h264 @ 0x55766e9a0300] mmco: unref short failure
[h264 @ 0x55766e9a0300] mmco: unref short failure
[h264 @ 0x563497477780] mmco: unref short failure
[h264 @ 0x563497477780] mmco: unref short failure
[h264 @ 0x557678959b00] mmco: unref short failure
[h264 @ 0x558580b645c0] mmco: unref short failure
[h264 @ 0x558580b645c0] mmco: unref short failure
[h264 @ 0x555619a51500] mmco: unref short failure
[h264 @ 0x555619a51500] mmco: unref short failure
  7%|▋         | 190/2910 [1:06:53<24:19:40, 32.20s/it][h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x56349b35e280] mmco: unref short failure
[h264 @ 0x55857f448ac0] mmco: unref short failure
[h264 @ 0x55857f448ac0] mmco: unref short failure
[h264 @ 0x55857f448ac0] mmco: unref short failure
[h264 @ 0x55857f448ac0] mmco: unref short failure
[h264 @ 0x558586ac3780] mmco: unref short failure
[h264 @ 0x558586ac3780] mmco: unref short failure
  7%|▋         | 191/2910 [1:07:08<20:37:41, 27.31s/it][h264 @ 0x55768a9c7400] mmco: unref short failure
[h264 @ 0x55768a9c7400] mmco: unref short failure
  7%|▋         | 192/2910 [1:07:22<17:34:03, 23.27s/it][h264 @ 0x55858152b900] mmco: unref short failure
[h264 @ 0x55858152b900] mmco: unref short failure
[h264 @ 0x558584aeb040] mmco: unref short failure
09/17/2024 01:03:23 - INFO - __main__ -   current idx 6oFC5O_u-SI.107 from finetune_area returns wrong image/video, use 102237 instead.
  7%|▋         | 193/2910 [1:07:29<13:42:58, 18.17s/it][h264 @ 0x558587883080] mmco: unref short failure
  7%|▋         | 194/2910 [1:07:34<10:52:09, 14.41s/it][h264 @ 0x55766b676240] mmco: unref short failure
  7%|▋         | 195/2910 [1:07:40<8:59:44, 11.93s/it] [h264 @ 0x5556186fb940] mmco: unref short failure
[h264 @ 0x56348cecc000] mmco: unref short failure
[h264 @ 0x56348cd6a200] mmco: unref short failure
[h264 @ 0x56348cd6a200] mmco: unref short failure
[h264 @ 0x55858215ef00] mmco: unref short failure
[h264 @ 0x558585e97c40] mmco: unref short failure
[h264 @ 0x56348d162ac0] mmco: unref short failure
  7%|▋         | 196/2910 [1:07:54<9:23:51, 12.47s/it][h264 @ 0x555634ba1500] mmco: unref short failure
[h264 @ 0x555634ba1500] mmco: unref short failure
[h264 @ 0x5585882ba240] mmco: unref short failure
  7%|▋         | 197/2910 [1:08:00<7:53:48, 10.48s/it][h264 @ 0x5556163cb740] mmco: unref short failure
09/17/2024 01:04:10 - INFO - __main__ -   current idx 988Ksd7axRY.8 from finetune_area returns wrong image/video, use 141681 instead.
[h264 @ 0x563497477100] mmco: unref short failure
[h264 @ 0x563497477100] mmco: unref short failure
09/17/2024 01:04:19 - INFO - __main__ -   current idx 9W2zPcc4Kl8.5 from finetune_area returns wrong image/video, use 35737 instead.
[h264 @ 0x55857f3e11c0] mmco: unref short failure
[h264 @ 0x55857f3e11c0] mmco: unref short failure
[h264 @ 0x558596f2d0c0] mmco: unref short failure
[h264 @ 0x56348d512040] mmco: unref short failure
[h264 @ 0x56348d512040] mmco: unref short failure
[h264 @ 0x55563346cb80] mmco: unref short failure
[h264 @ 0x55563346cb80] mmco: unref short failure
[h264 @ 0x5634ad64bc00] mmco: unref short failure
[h264 @ 0x5576898d1400] mmco: unref short failure
[h264 @ 0x55857f6a4540] mmco: unref short failure
[h264 @ 0x55857f6a4540] mmco: unref short failure
[h264 @ 0x56348f751700] mmco: unref short failure
[h264 @ 0x56348f9c6c80] mmco: unref short failure
[h264 @ 0x56348f9c6c80] mmco: unref short failure
[h264 @ 0x55857ee2a380] mmco: unref short failure
[h264 @ 0x55857ee2a380] mmco: unref short failure
[h264 @ 0x5556196f86c0] mmco: unref short failure
[h264 @ 0x558580a6ba80] mmco: unref short failure
[h264 @ 0x558580a6ba80] mmco: unref short failure
[h264 @ 0x557669e05780] mmco: unref short failure
[h264 @ 0x557671a497c0] mmco: unref short failure
[h264 @ 0x557671a497c0] mmco: unref short failure
  7%|▋         | 198/2910 [1:09:16<22:42:41, 30.15s/it][h264 @ 0x55766fdae3c0] mmco: unref short failure
[h264 @ 0x55766fdae3c0] mmco: unref short failure
[h264 @ 0x5634952219c0] mmco: unref short failure
[h264 @ 0x5634952219c0] mmco: unref short failure
  7%|▋         | 199/2910 [1:09:36<20:19:57, 27.00s/it]09/17/2024 01:05:35 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 01:05:35 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55859b7e9280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555633bf1d80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555617638cc0] mmco: unref short failure
[h264 @ 0x555617638cc0] mmco: unref short failure
[h264 @ 0x5556370fe5c0] mmco: unref short failure
[h264 @ 0x5556370fe5c0] mmco: unref short failure
[h264 @ 0x555616f7a500] mmco: unref short failure
[h264 @ 0x555616f7a500] mmco: unref short failure
[h264 @ 0x5634940c0e40] mmco: unref short failure
[h264 @ 0x56349182ef40] mmco: unref short failure
[h264 @ 0x56349182ef40] mmco: unref short failure
[h264 @ 0x56349182ef40] mmco: unref short failure
[h264 @ 0x5634ad64c280] mmco: unref short failure
[h264 @ 0x5634ad64c280] mmco: unref short failure
[h264 @ 0x55858606a400] mmco: unref short failure
09/17/2024 01:07:55 - INFO - __main__ -   current idx bdHJRIWkgos.39 from finetune_area returns wrong image/video, use 8538 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:30,  2.44it/s][A
  1%|          | 2/221 [00:00<01:23,  2.63it/s][A
  1%|▏         | 3/221 [00:01<01:27,  2.49it/s][A
  2%|▏         | 4/221 [00:01<01:07,  3.21it/s][A
  2%|▏         | 5/221 [00:01<00:54,  3.98it/s][A
  3%|▎         | 6/221 [00:01<00:53,  4.05it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.10it/s][A
  4%|▎         | 8/221 [00:02<00:43,  4.86it/s][A
  4%|▍         | 9/221 [00:02<00:45,  4.65it/s][A
  5%|▍         | 10/221 [00:02<01:07,  3.14it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.33it/s][A
  5%|▌         | 12/221 [00:03<01:07,  3.11it/s][A
  6%|▌         | 13/221 [00:03<00:59,  3.48it/s][A
  6%|▋         | 14/221 [00:03<00:54,  3.78it/s][A
  7%|▋         | 15/221 [00:04<00:50,  4.10it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.22it/s][A
  8%|▊         | 17/221 [00:05<01:32,  2.21it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.51it/s][A
  9%|▊         | 19/221 [00:05<01:06,  3.05it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.32it/s][A
 10%|▉         | 21/221 [00:06<00:55,  3.61it/s][A
 10%|▉         | 22/221 [00:06<01:07,  2.93it/s][A
 10%|█         | 23/221 [00:06<01:00,  3.29it/s][A
 11%|█         | 24/221 [00:07<00:51,  3.81it/s][A
 11%|█▏        | 25/221 [00:07<00:49,  3.96it/s][A
 12%|█▏        | 26/221 [00:07<01:08,  2.86it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:09<01:29,  2.15it/s][A
 13%|█▎        | 29/221 [00:09<01:16,  2.52it/s][A
 14%|█▎        | 30/221 [00:09<01:09,  2.74it/s][A
 14%|█▍        | 31/221 [00:09<01:06,  2.87it/s][A
 14%|█▍        | 32/221 [00:10<01:00,  3.12it/s][A
 15%|█▍        | 33/221 [00:10<00:58,  3.21it/s][A
 15%|█▌        | 34/221 [00:10<00:46,  4.01it/s][A
 16%|█▌        | 35/221 [00:10<00:47,  3.95it/s][A
 16%|█▋        | 36/221 [00:11<00:52,  3.54it/s][A
 17%|█▋        | 37/221 [00:11<01:03,  2.91it/s][A
 17%|█▋        | 38/221 [00:12<01:09,  2.63it/s][A
 18%|█▊        | 39/221 [00:12<00:58,  3.11it/s][A[h264 @ 0x55766dd34ec0] mmco: unref short failure
[h264 @ 0x55766dd34ec0] mmco: unref short failure

 18%|█▊        | 40/221 [00:12<00:56,  3.18it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:13<01:10,  2.55it/s][A
 19%|█▉        | 43/221 [00:13<00:56,  3.13it/s][A
 20%|█▉        | 44/221 [00:13<00:47,  3.73it/s][A
 20%|██        | 45/221 [00:14<01:04,  2.72it/s][A
 21%|██        | 46/221 [00:14<01:00,  2.91it/s][A
 21%|██▏       | 47/221 [00:15<01:35,  1.82it/s][A
 22%|██▏       | 48/221 [00:15<01:12,  2.38it/s][A
 22%|██▏       | 49/221 [00:16<01:06,  2.59it/s][A
 23%|██▎       | 50/221 [00:16<00:55,  3.06it/s][A
 23%|██▎       | 51/221 [00:16<00:46,  3.70it/s][A
 24%|██▎       | 52/221 [00:16<00:43,  3.92it/s][A
 24%|██▍       | 53/221 [00:16<00:37,  4.48it/s][A
 24%|██▍       | 54/221 [00:19<02:39,  1.05it/s][A
 25%|██▍       | 55/221 [00:19<02:14,  1.24it/s][A
 25%|██▌       | 56/221 [00:20<01:42,  1.60it/s][A
 26%|██▌       | 57/221 [00:20<01:20,  2.04it/s][A
 26%|██▌       | 58/221 [00:20<01:03,  2.58it/s][A
 27%|██▋       | 59/221 [00:20<00:51,  3.17it/s][A
 27%|██▋       | 60/221 [00:21<01:20,  1.99it/s][A
 28%|██▊       | 61/221 [00:21<01:11,  2.25it/s][A
 28%|██▊       | 62/221 [00:22<01:05,  2.45it/s][A
 29%|██▊       | 63/221 [00:22<00:53,  2.94it/s][A
 29%|██▉       | 64/221 [00:22<00:54,  2.88it/s][A
 29%|██▉       | 65/221 [00:22<00:46,  3.39it/s][A[h264 @ 0x55768097d1c0] mmco: unref short failure
[h264 @ 0x55768097d1c0] mmco: unref short failure

 30%|██▉       | 66/221 [00:23<01:06,  2.33it/s][A
 30%|███       | 67/221 [00:23<00:57,  2.70it/s][A
not have audios 7wavFXW3AFw.7
 31%|███       | 68/221 [00:23<00:44,  3.43it/s][A
 31%|███       | 69/221 [00:24<01:11,  2.12it/s][A[h264 @ 0x55561b78f340] mmco: unref short failure

 32%|███▏      | 70/221 [00:25<01:00,  2.49it/s][A
 32%|███▏      | 71/221 [00:25<00:51,  2.90it/s][A[h264 @ 0x56348d49abc0] mmco: unref short failure
[h264 @ 0x56348d49abc0] mmco: unref short failure

 33%|███▎      | 72/221 [00:25<00:48,  3.06it/s][A
 33%|███▎      | 73/221 [00:25<00:54,  2.74it/s][A
 33%|███▎      | 74/221 [00:26<00:45,  3.24it/s][A
 34%|███▍      | 75/221 [00:26<00:49,  2.94it/s][A
 34%|███▍      | 76/221 [00:26<00:43,  3.33it/s][A
 35%|███▍      | 77/221 [00:27<00:49,  2.91it/s][A
 35%|███▌      | 78/221 [00:27<00:39,  3.66it/s][A
 36%|███▌      | 79/221 [00:27<00:43,  3.26it/s][A
 36%|███▌      | 80/221 [00:27<00:40,  3.52it/s][A
 37%|███▋      | 81/221 [00:28<00:50,  2.76it/s][A
 37%|███▋      | 82/221 [00:29<00:57,  2.42it/s][A
 38%|███▊      | 83/221 [00:29<00:58,  2.36it/s][A
 38%|███▊      | 84/221 [00:29<00:50,  2.71it/s][A
 38%|███▊      | 85/221 [00:29<00:39,  3.41it/s][A
 39%|███▉      | 86/221 [00:30<00:36,  3.68it/s][A
 39%|███▉      | 87/221 [00:31<01:08,  1.94it/s][A
 40%|███▉      | 88/221 [00:31<01:14,  1.78it/s][A
 40%|████      | 89/221 [00:32<01:04,  2.04it/s][A
 41%|████      | 90/221 [00:32<00:55,  2.36it/s][A
 41%|████      | 91/221 [00:32<00:46,  2.83it/s][A
 42%|████▏     | 92/221 [00:32<00:39,  3.23it/s][A
 42%|████▏     | 93/221 [00:33<00:47,  2.69it/s][A
 43%|████▎     | 94/221 [00:33<00:43,  2.93it/s][A
 43%|████▎     | 95/221 [00:33<00:39,  3.19it/s][A
 43%|████▎     | 96/221 [00:34<00:55,  2.26it/s][A
 44%|████▍     | 97/221 [00:34<00:48,  2.55it/s][A
 44%|████▍     | 98/221 [00:35<00:57,  2.12it/s][A
 45%|████▍     | 99/221 [00:35<00:48,  2.51it/s][A
 45%|████▌     | 100/221 [00:35<00:42,  2.85it/s][A
 46%|████▌     | 101/221 [00:36<00:45,  2.64it/s][A
 46%|████▌     | 102/221 [00:36<00:49,  2.39it/s][A
 47%|████▋     | 103/221 [00:37<00:43,  2.69it/s][A
 47%|████▋     | 104/221 [00:37<00:40,  2.89it/s][A
 48%|████▊     | 105/221 [00:37<00:39,  2.97it/s][A
 48%|████▊     | 106/221 [00:38<00:55,  2.07it/s][A
 48%|████▊     | 107/221 [00:38<00:48,  2.34it/s][A
 49%|████▉     | 108/221 [00:39<00:41,  2.70it/s][A
 49%|████▉     | 109/221 [00:39<00:36,  3.11it/s][A
 50%|████▉     | 110/221 [00:39<00:29,  3.81it/s][A
 50%|█████     | 111/221 [00:39<00:32,  3.36it/s][A
 51%|█████     | 112/221 [00:40<00:30,  3.57it/s][A
 51%|█████     | 113/221 [00:40<00:32,  3.34it/s][A
 52%|█████▏    | 115/221 [00:40<00:23,  4.54it/s][A
 52%|█████▏    | 116/221 [00:41<00:49,  2.12it/s][A[h264 @ 0x557671a6aa80] mmco: unref short failure
[h264 @ 0x557671a6aa80] mmco: unref short failure

 53%|█████▎    | 117/221 [00:42<00:46,  2.24it/s][A
 53%|█████▎    | 118/221 [00:42<00:39,  2.62it/s][A
 54%|█████▍    | 119/221 [00:42<00:38,  2.65it/s][A
 54%|█████▍    | 120/221 [00:43<00:31,  3.18it/s][A
 55%|█████▍    | 121/221 [00:43<00:36,  2.74it/s][A[h264 @ 0x5634a4073240] mmco: unref short failure
[h264 @ 0x5634a4073240] mmco: unref short failure

 55%|█████▌    | 122/221 [00:43<00:34,  2.86it/s][A
 56%|█████▌    | 123/221 [00:44<00:29,  3.34it/s][A
 56%|█████▌    | 124/221 [00:44<00:39,  2.47it/s][A
 57%|█████▋    | 125/221 [00:45<00:45,  2.11it/s][A
 57%|█████▋    | 126/221 [00:45<00:41,  2.31it/s][A
 57%|█████▋    | 127/221 [00:47<01:16,  1.23it/s][A
 58%|█████▊    | 128/221 [00:47<01:04,  1.45it/s][A
 58%|█████▊    | 129/221 [00:47<00:48,  1.91it/s][A
 59%|█████▉    | 130/221 [00:48<00:40,  2.26it/s][A
 59%|█████▉    | 131/221 [00:48<00:33,  2.71it/s][A
 60%|█████▉    | 132/221 [00:49<00:58,  1.53it/s][A[h264 @ 0x563497502540] mmco: unref short failure
[h264 @ 0x563497502540] mmco: unref short failure

 60%|██████    | 133/221 [00:50<00:52,  1.68it/s][A
 61%|██████    | 134/221 [00:50<00:57,  1.51it/s][A
 61%|██████    | 135/221 [00:51<00:53,  1.60it/s][A
 62%|██████▏   | 136/221 [00:51<00:47,  1.80it/s][A
 62%|██████▏   | 137/221 [00:52<00:39,  2.13it/s][A[h264 @ 0x55766ade7a00] mmco: unref short failure
[h264 @ 0x55766ade7a00] mmco: unref short failure

 62%|██████▏   | 138/221 [00:52<00:38,  2.18it/s][A
 63%|██████▎   | 139/221 [00:53<00:47,  1.72it/s][A
 63%|██████▎   | 140/221 [00:53<00:42,  1.93it/s][A
 64%|██████▍   | 141/221 [00:54<00:38,  2.10it/s][A
 64%|██████▍   | 142/221 [00:54<00:37,  2.08it/s][A
 65%|██████▍   | 143/221 [00:55<00:38,  2.03it/s][A
 65%|██████▌   | 144/221 [00:55<00:33,  2.32it/s][A
 66%|██████▌   | 145/221 [00:55<00:26,  2.90it/s][A
 66%|██████▌   | 146/221 [00:55<00:21,  3.44it/s][A
 67%|██████▋   | 147/221 [00:56<00:22,  3.27it/s][A
 67%|██████▋   | 148/221 [00:56<00:21,  3.43it/s][A
 67%|██████▋   | 149/221 [00:56<00:22,  3.19it/s][A
 68%|██████▊   | 150/221 [00:56<00:19,  3.71it/s][A
 68%|██████▊   | 151/221 [00:57<00:29,  2.36it/s][A
 69%|██████▉   | 152/221 [00:59<00:57,  1.21it/s][A
 69%|██████▉   | 153/221 [00:59<00:43,  1.57it/s][A
 70%|██████▉   | 154/221 [01:00<00:36,  1.85it/s][A
 70%|███████   | 155/221 [01:00<00:32,  2.01it/s][A
 71%|███████   | 156/221 [01:00<00:30,  2.12it/s][A
 71%|███████   | 157/221 [01:01<00:42,  1.49it/s][A
 71%|███████▏  | 158/221 [01:02<00:35,  1.78it/s][A
 72%|███████▏  | 159/221 [01:02<00:27,  2.23it/s][A
 72%|███████▏  | 160/221 [01:02<00:23,  2.64it/s][A
 73%|███████▎  | 161/221 [01:02<00:18,  3.28it/s][A
 73%|███████▎  | 162/221 [01:02<00:14,  4.00it/s][A
 74%|███████▍  | 163/221 [01:03<00:15,  3.80it/s][A
 74%|███████▍  | 164/221 [01:03<00:16,  3.48it/s][A
 75%|███████▍  | 165/221 [01:03<00:14,  3.84it/s][A
 75%|███████▌  | 166/221 [01:04<00:17,  3.17it/s][A
 76%|███████▌  | 167/221 [01:04<00:14,  3.67it/s][A
 76%|███████▌  | 168/221 [01:05<00:27,  1.89it/s][A
 76%|███████▋  | 169/221 [01:05<00:21,  2.47it/s][A
 77%|███████▋  | 170/221 [01:05<00:18,  2.71it/s][A
 77%|███████▋  | 171/221 [01:06<00:19,  2.53it/s][A
 78%|███████▊  | 172/221 [01:06<00:17,  2.72it/s][A
 78%|███████▊  | 173/221 [01:07<00:18,  2.54it/s][A
 79%|███████▊  | 174/221 [01:07<00:15,  2.98it/s][A
 79%|███████▉  | 175/221 [01:07<00:14,  3.08it/s][A
 80%|███████▉  | 176/221 [01:07<00:13,  3.38it/s][A
 80%|████████  | 177/221 [01:07<00:11,  3.91it/s][A
 81%|████████  | 178/221 [01:08<00:17,  2.41it/s][A
 81%|████████  | 179/221 [01:09<00:17,  2.35it/s][A
 81%|████████▏ | 180/221 [01:09<00:14,  2.88it/s][A
 82%|████████▏ | 181/221 [01:09<00:11,  3.49it/s][A
 82%|████████▏ | 182/221 [01:09<00:11,  3.45it/s][A
 83%|████████▎ | 183/221 [01:10<00:11,  3.34it/s][A[h264 @ 0x563494ff8280] mmco: unref short failure
[h264 @ 0x563494ff8280] mmco: unref short failure

 83%|████████▎ | 184/221 [01:10<00:12,  3.05it/s][A
 84%|████████▍ | 186/221 [01:11<00:12,  2.89it/s][A
 85%|████████▍ | 187/221 [01:11<00:11,  2.95it/s][A
 85%|████████▌ | 188/221 [01:11<00:10,  3.29it/s][A
 86%|████████▌ | 189/221 [01:12<00:09,  3.22it/s][A
 86%|████████▌ | 190/221 [01:12<00:10,  2.95it/s][A
 86%|████████▋ | 191/221 [01:12<00:08,  3.59it/s][A
 87%|████████▋ | 192/221 [01:12<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [01:15<00:16,  1.59it/s][A
 88%|████████▊ | 195/221 [01:15<00:13,  1.91it/s][A
 89%|████████▊ | 196/221 [01:15<00:11,  2.27it/s][A
 89%|████████▉ | 197/221 [01:15<00:09,  2.56it/s][A
 90%|████████▉ | 198/221 [01:15<00:07,  2.98it/s][A
 90%|█████████ | 199/221 [01:16<00:07,  2.97it/s][A
 90%|█████████ | 200/221 [01:16<00:05,  3.54it/s][A
 91%|█████████ | 201/221 [01:16<00:05,  3.94it/s][A
 91%|█████████▏| 202/221 [01:16<00:05,  3.73it/s][A
 92%|█████████▏| 203/221 [01:17<00:04,  3.88it/s][A
 92%|█████████▏| 204/221 [01:17<00:04,  4.20it/s][A
 93%|█████████▎| 205/221 [01:17<00:03,  4.49it/s][A
 93%|█████████▎| 206/221 [01:17<00:04,  3.35it/s][A
 94%|█████████▍| 208/221 [01:18<00:03,  4.01it/s][A
 95%|█████████▍| 209/221 [01:18<00:02,  4.30it/s][A
 95%|█████████▌| 211/221 [01:18<00:02,  4.31it/s][A
 96%|█████████▌| 212/221 [01:19<00:02,  4.18it/s][A
 96%|█████████▋| 213/221 [01:19<00:01,  4.43it/s][A[h264 @ 0x56348d6d7400] mmco: unref short failure

 97%|█████████▋| 214/221 [01:20<00:02,  2.82it/s][A
 97%|█████████▋| 215/221 [01:20<00:01,  3.24it/s][A
 98%|█████████▊| 216/221 [01:20<00:01,  3.27it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  2.82it/s][A
 99%|█████████▊| 218/221 [01:21<00:01,  2.91it/s][A
 99%|█████████▉| 219/221 [01:21<00:00,  3.12it/s][A
100%|█████████▉| 220/221 [01:22<00:00,  1.82it/s][A
100%|██████████| 221/221 [01:22<00:00,  2.39it/s][A100%|██████████| 221/221 [01:22<00:00,  2.67it/s]
[h264 @ 0x56348f752040] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:11,  3.07it/s][A
  1%|          | 2/221 [00:00<01:08,  3.21it/s][A
  1%|▏         | 3/221 [00:00<01:07,  3.23it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.28it/s][A[h264 @ 0x56348ed86700] mmco: unref short failure

  2%|▏         | 5/221 [00:01<01:05,  3.30it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.32it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.36it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.33it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.35it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.33it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.34it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A[h264 @ 0x5585826a0140] mmco: unref short failure
[h264 @ 0x5585826a0140] mmco: unref short failure

  7%|▋         | 16/221 [00:04<01:03,  3.25it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.28it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.32it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.34it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.36it/s][A
 10%|▉         | 21/221 [00:06<01:04,  3.12it/s][A
 10%|▉         | 22/221 [00:06<01:02,  3.18it/s][A
 10%|█         | 23/221 [00:06<01:01,  3.24it/s][A
 11%|█         | 24/221 [00:07<01:00,  3.27it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.35it/s][A09/17/2024 01:09:29 - INFO - __main__ -   current idx 0GZSfBuhf6Y.63 from finetune_area returns wrong image/video, use 98921 instead.

 13%|█▎        | 28/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.38it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.34it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.31it/s][A
[h264 @ 0x55766ab31800] mmco: unref short failure
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.29it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.32it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.35it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.38it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.39it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.39it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.33it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.32it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.33it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:15<00:50,  3.32it/s][A
 24%|██▍       | 53/221 [00:15<00:50,  3.34it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.36it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.37it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.37it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.34it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.34it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.36it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.33it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.33it/s][A
 29%|██▊       | 63/221 [00:18<00:47,  3.35it/s][A[h264 @ 0x555631367980] mmco: unref short failure

 29%|██▉       | 64/221 [00:19<00:46,  3.36it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.37it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.38it/s][A[h264 @ 0x555621505940] mmco: unref short failure

 30%|███       | 67/221 [00:20<00:45,  3.39it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.39it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.39it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.40it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.39it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.40it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.40it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.40it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.40it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.40it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.40it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.41it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.41it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 86/221 [00:25<00:40,  3.37it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.38it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.39it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.40it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.40it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.41it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.41it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  7.00it/s][A
  1%|          | 2/221 [00:00<00:54,  4.03it/s][A
  1%|▏         | 3/221 [00:01<01:31,  2.38it/s][A
  2%|▏         | 4/221 [00:01<01:07,  3.20it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.81it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.37it/s][A
  3%|▎         | 7/221 [00:01<00:45,  4.71it/s][A
  4%|▎         | 8/221 [00:01<00:46,  4.59it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.56it/s][A
  5%|▍         | 10/221 [00:03<01:20,  2.61it/s][A
  5%|▍         | 11/221 [00:03<01:22,  2.54it/s][A
  5%|▌         | 12/221 [00:03<01:11,  2.94it/s][A
  6%|▌         | 13/221 [00:04<01:27,  2.37it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.64it/s][A
  7%|▋         | 15/221 [00:05<01:24,  2.45it/s][A
  7%|▋         | 16/221 [00:05<01:16,  2.68it/s][A
  8%|▊         | 17/221 [00:05<01:23,  2.44it/s][A
  8%|▊         | 18/221 [00:06<01:19,  2.57it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.96it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.61it/s][A
 10%|▉         | 21/221 [00:06<00:47,  4.19it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.56it/s][A
 10%|█         | 23/221 [00:06<00:38,  5.20it/s][A
 11%|█         | 24/221 [00:07<00:36,  5.45it/s][A
 11%|█▏        | 25/221 [00:07<00:40,  4.83it/s][A
 12%|█▏        | 26/221 [00:07<00:44,  4.41it/s][A
 12%|█▏        | 27/221 [00:07<00:43,  4.43it/s][A
 13%|█▎        | 28/221 [00:08<01:00,  3.21it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.27it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.35it/s][A
 14%|█▍        | 31/221 [00:09<00:53,  3.53it/s][A
 14%|█▍        | 32/221 [00:09<00:49,  3.83it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.12it/s][A
 15%|█▌        | 34/221 [00:09<00:42,  4.39it/s][A
 16%|█▌        | 35/221 [00:09<00:36,  5.15it/s][A
 16%|█▋        | 36/221 [00:10<01:01,  2.99it/s][A
 17%|█▋        | 37/221 [00:10<01:01,  3.00it/s][A
 17%|█▋        | 38/221 [00:11<00:58,  3.14it/s][A
 18%|█▊        | 39/221 [00:11<00:47,  3.87it/s][A
 18%|█▊        | 40/221 [00:11<00:46,  3.89it/s][A
 19%|█▊        | 41/221 [00:11<00:47,  3.82it/s][A
 19%|█▉        | 42/221 [00:12<00:42,  4.25it/s][A
 19%|█▉        | 43/221 [00:12<00:51,  3.44it/s][A
 20%|█▉        | 44/221 [00:12<00:46,  3.80it/s][A
 20%|██        | 45/221 [00:12<00:51,  3.41it/s][A
 21%|██        | 46/221 [00:13<00:50,  3.49it/s][A
 21%|██▏       | 47/221 [00:13<00:41,  4.15it/s][A
 22%|██▏       | 49/221 [00:13<00:29,  5.83it/s][A
 23%|██▎       | 50/221 [00:14<00:43,  3.94it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.06it/s][A
 24%|██▎       | 52/221 [00:14<00:36,  4.59it/s][A
 24%|██▍       | 53/221 [00:14<00:45,  3.70it/s][A
 24%|██▍       | 54/221 [00:15<00:44,  3.78it/s][A
 25%|██▍       | 55/221 [00:15<00:40,  4.12it/s][A
 25%|██▌       | 56/221 [00:15<00:44,  3.72it/s][A
 26%|██▌       | 57/221 [00:15<00:47,  3.48it/s][A
 27%|██▋       | 59/221 [00:16<00:39,  4.09it/s][A
 27%|██▋       | 60/221 [00:16<00:35,  4.60it/s][A
 28%|██▊       | 61/221 [00:16<00:35,  4.53it/s][A
 28%|██▊       | 62/221 [00:17<00:38,  4.10it/s][A
 29%|██▉       | 64/221 [00:17<00:32,  4.81it/s][A
 29%|██▉       | 65/221 [00:17<00:31,  5.02it/s][A
 30%|██▉       | 66/221 [00:17<00:35,  4.37it/s][A
 30%|███       | 67/221 [00:18<00:40,  3.78it/s][A
 31%|███       | 68/221 [00:18<00:36,  4.23it/s][A
 31%|███       | 69/221 [00:18<00:49,  3.04it/s][A
 32%|███▏      | 70/221 [00:19<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:19<00:47,  3.18it/s][A
 33%|███▎      | 72/221 [00:19<00:51,  2.89it/s][A
 33%|███▎      | 73/221 [00:20<00:48,  3.07it/s][A
 33%|███▎      | 74/221 [00:20<00:40,  3.66it/s][A
 34%|███▍      | 75/221 [00:20<00:46,  3.17it/s][A
 34%|███▍      | 76/221 [00:21<00:42,  3.38it/s][A
 35%|███▍      | 77/221 [00:21<00:44,  3.20it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.45it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.64it/s][A
 36%|███▌      | 80/221 [00:22<00:35,  3.95it/s][A
 37%|███▋      | 81/221 [00:22<00:35,  3.92it/s][A
 37%|███▋      | 82/221 [00:22<00:31,  4.40it/s][A
 38%|███▊      | 83/221 [00:22<00:29,  4.76it/s][A
 38%|███▊      | 84/221 [00:23<00:36,  3.78it/s][A
 38%|███▊      | 85/221 [00:23<00:30,  4.52it/s][A
 39%|███▉      | 86/221 [00:23<00:26,  5.09it/s][A
 39%|███▉      | 87/221 [00:23<00:34,  3.86it/s][A
 40%|███▉      | 88/221 [00:24<00:38,  3.41it/s][A
 40%|████      | 89/221 [00:24<00:42,  3.08it/s][A
 41%|████      | 90/221 [00:24<00:50,  2.57it/s][A
 41%|████      | 91/221 [00:25<00:42,  3.03it/s][A
 42%|████▏     | 92/221 [00:25<00:38,  3.32it/s][A
 42%|████▏     | 93/221 [00:25<00:41,  3.07it/s][A
 43%|████▎     | 94/221 [00:26<00:37,  3.36it/s][A
 43%|████▎     | 95/221 [00:26<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:26<00:45,  2.76it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.85it/s][A
 44%|████▍     | 98/221 [00:27<00:46,  2.67it/s][A
 45%|████▍     | 99/221 [00:28<00:44,  2.73it/s][A
 45%|████▌     | 100/221 [00:28<00:40,  3.00it/s][A
 46%|████▌     | 101/221 [00:28<00:43,  2.76it/s][A
 46%|████▌     | 102/221 [00:29<00:39,  2.98it/s][A
 47%|████▋     | 103/221 [00:29<00:32,  3.65it/s][A
 48%|████▊     | 105/221 [00:29<00:26,  4.37it/s][A
 48%|████▊     | 106/221 [00:29<00:30,  3.80it/s][A
 48%|████▊     | 107/221 [00:30<00:27,  4.13it/s][A
 49%|████▉     | 108/221 [00:30<00:30,  3.71it/s][A
 49%|████▉     | 109/221 [00:30<00:29,  3.75it/s][A
 50%|████▉     | 110/221 [00:30<00:28,  3.95it/s][A
 50%|█████     | 111/221 [00:31<00:30,  3.55it/s][A
 51%|█████     | 112/221 [00:31<00:30,  3.57it/s][A
 51%|█████     | 113/221 [00:31<00:29,  3.72it/s][A
 52%|█████▏    | 115/221 [00:31<00:20,  5.25it/s][A
 52%|█████▏    | 116/221 [00:32<00:20,  5.23it/s][A
 53%|█████▎    | 117/221 [00:32<00:21,  4.91it/s][A
 53%|█████▎    | 118/221 [00:32<00:25,  4.11it/s][A
 54%|█████▍    | 119/221 [00:33<00:29,  3.43it/s][A
 54%|█████▍    | 120/221 [00:33<00:30,  3.36it/s][A
 55%|█████▍    | 121/221 [00:33<00:30,  3.25it/s][A
 55%|█████▌    | 122/221 [00:34<00:31,  3.18it/s][A
 56%|█████▌    | 123/221 [00:34<00:26,  3.64it/s][A
 56%|█████▌    | 124/221 [00:34<00:31,  3.04it/s][A
 57%|█████▋    | 125/221 [00:35<00:36,  2.60it/s][A
 57%|█████▋    | 126/221 [00:35<00:31,  3.05it/s][A
 57%|█████▋    | 127/221 [00:35<00:35,  2.67it/s][A
 58%|█████▊    | 128/221 [00:36<00:31,  2.99it/s][A
 58%|█████▊    | 129/221 [00:36<00:25,  3.64it/s][A
 59%|█████▉    | 130/221 [00:36<00:24,  3.65it/s][A
 59%|█████▉    | 131/221 [00:36<00:22,  4.02it/s][A
 60%|█████▉    | 132/221 [00:37<00:28,  3.10it/s][A
 60%|██████    | 133/221 [00:37<00:29,  2.94it/s][A
 61%|██████    | 134/221 [00:38<00:34,  2.56it/s][A
 61%|██████    | 135/221 [00:38<00:30,  2.80it/s][A
 62%|██████▏   | 136/221 [00:38<00:29,  2.85it/s][A
 62%|██████▏   | 137/221 [00:39<00:26,  3.12it/s][A
 62%|██████▏   | 138/221 [00:39<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:39<00:26,  3.15it/s][A
 63%|██████▎   | 140/221 [00:39<00:24,  3.32it/s][A
 64%|██████▍   | 141/221 [00:40<00:25,  3.12it/s][A
 64%|██████▍   | 142/221 [00:40<00:23,  3.34it/s][A
 65%|██████▍   | 143/221 [00:40<00:22,  3.47it/s][A
 65%|██████▌   | 144/221 [00:40<00:20,  3.83it/s][A
 66%|██████▌   | 145/221 [00:41<00:21,  3.47it/s][A
 66%|██████▌   | 146/221 [00:41<00:20,  3.60it/s][A
 67%|██████▋   | 147/221 [00:41<00:17,  4.28it/s][A
 67%|██████▋   | 148/221 [00:42<00:29,  2.44it/s][A
 67%|██████▋   | 149/221 [00:42<00:25,  2.87it/s][A
 68%|██████▊   | 150/221 [00:42<00:22,  3.22it/s][A
 68%|██████▊   | 151/221 [00:43<00:35,  1.97it/s][A
 69%|██████▉   | 152/221 [00:44<00:35,  1.96it/s][A
 69%|██████▉   | 153/221 [00:44<00:30,  2.21it/s][A
 70%|██████▉   | 154/221 [00:45<00:27,  2.42it/s][A
 70%|███████   | 155/221 [00:45<00:23,  2.78it/s][A
 71%|███████   | 156/221 [00:45<00:21,  2.97it/s][A
 71%|███████   | 157/221 [00:45<00:20,  3.18it/s][A
 71%|███████▏  | 158/221 [00:46<00:21,  2.96it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.41it/s][A
 72%|███████▏  | 160/221 [00:46<00:21,  2.90it/s][A
 73%|███████▎  | 161/221 [00:47<00:16,  3.61it/s][A
 74%|███████▍  | 163/221 [00:47<00:12,  4.65it/s][A
 74%|███████▍  | 164/221 [00:47<00:11,  4.76it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.89it/s][A
 75%|███████▌  | 166/221 [00:48<00:13,  4.21it/s][A
 76%|███████▌  | 168/221 [00:48<00:11,  4.74it/s][A
 77%|███████▋  | 170/221 [00:48<00:10,  4.82it/s][A
 77%|███████▋  | 171/221 [00:49<00:14,  3.52it/s][A
 78%|███████▊  | 172/221 [00:49<00:13,  3.70it/s][A
 78%|███████▊  | 173/221 [00:49<00:14,  3.31it/s][A
 79%|███████▊  | 174/221 [00:50<00:11,  3.96it/s][A
 79%|███████▉  | 175/221 [00:50<00:12,  3.71it/s][A
 80%|███████▉  | 176/221 [00:50<00:11,  4.05it/s][A
 80%|████████  | 177/221 [00:50<00:11,  3.89it/s][A
 81%|████████  | 178/221 [00:51<00:16,  2.67it/s][A
 81%|████████  | 179/221 [00:51<00:15,  2.74it/s][A
 82%|████████▏ | 181/221 [00:52<00:10,  3.93it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  3.98it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.71it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.38it/s][A
 84%|████████▍ | 186/221 [00:53<00:09,  3.71it/s][A
 85%|████████▍ | 187/221 [00:53<00:08,  4.23it/s][A
 85%|████████▌ | 188/221 [00:53<00:07,  4.51it/s][A
 86%|████████▌ | 189/221 [00:54<00:06,  4.58it/s][A
 86%|████████▌ | 190/221 [00:54<00:08,  3.79it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.97it/s][A
 87%|████████▋ | 193/221 [00:55<00:07,  3.69it/s][A
 88%|████████▊ | 194/221 [00:55<00:08,  3.10it/s][A
 88%|████████▊ | 195/221 [00:56<00:08,  2.95it/s][A
 89%|████████▊ | 196/221 [00:56<00:09,  2.77it/s][A
 89%|████████▉ | 197/221 [00:57<00:10,  2.22it/s][A
 90%|████████▉ | 198/221 [00:57<00:09,  2.48it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  2.96it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.49it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.93it/s][A
 91%|█████████▏| 202/221 [00:58<00:04,  4.03it/s][A
 92%|█████████▏| 203/221 [00:58<00:04,  4.06it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  4.10it/s][A
 93%|█████████▎| 205/221 [00:58<00:03,  4.17it/s][A
 93%|█████████▎| 206/221 [00:59<00:04,  3.19it/s][A
 94%|█████████▎| 207/221 [00:59<00:04,  3.37it/s][A
 94%|█████████▍| 208/221 [00:59<00:03,  3.45it/s][A
 95%|█████████▍| 209/221 [01:00<00:03,  3.36it/s][A
 95%|█████████▌| 210/221 [01:00<00:02,  3.89it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  3.82it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.48it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.69it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  2.82it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.75it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  2.98it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  2.96it/s][A
 99%|█████████▊| 218/221 [01:03<00:01,  2.54it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.67it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.25it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.34it/s][A100%|██████████| 221/221 [01:04<00:00,  3.45it/s]
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'area_r1': 41.6, 'area_recall': '41.6/68.7/79.2', 'area_ravg': 63.2}
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'forward_r1': 37.9, 'forward_recall': '37.9/65.0/76.7', 'forward_ravg': 59.9}
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/66.5/76.5', 'area_video_ravg': 60.5}
09/17/2024 01:11:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 01:11:34 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/66.5/76.5', 'area_video_ravg': 60.5}
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/75.5/83.7', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/71.2/80.0', 'area_video_back_ravg': 66.8}
09/17/2024 01:11:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 199=======

09/17/2024 01:11:34 - INFO - __main__ -   {'area_video_r1': 51.1, 'area_video_recall': '51.1/75.5/83.7', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/71.2/80.0', 'area_video_back_ravg': 66.8}
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/66.9/76.6', 'video_ravg': 60.0}
09/17/2024 01:11:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 149=======

09/17/2024 01:11:34 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/66.7/76.4', 'video_ravg': 60.0}
09/17/2024 01:11:34 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 199--===========

09/17/2024 01:11:34 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/74.5/81.1', 'video_ravg': 68.9}
09/17/2024 01:11:34 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 99=======

09/17/2024 01:11:34 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/71.6/80.3', 'video_ravg': 67.7}
09/17/2024 01:12:04 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.012571263127028942, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 2.24739670753479, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.19638991355896, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 4.456357955932617}
  7%|▋         | 200/2910 [1:16:07<102:41:53, 136.43s/it]  7%|▋         | 201/2910 [1:16:11<72:42:07, 96.61s/it]    7%|▋         | 202/2910 [1:16:15<51:48:46, 68.88s/it][h264 @ 0x55766c403300] mmco: unref short failure
[h264 @ 0x55766c403300] mmco: unref short failure
[h264 @ 0x563492f695c0] mmco: unref short failure
[h264 @ 0x563492f695c0] mmco: unref short failure
  7%|▋         | 203/2910 [1:16:20<37:20:15, 49.65s/it][h264 @ 0x5585820daf00] mmco: unref short failure
[h264 @ 0x5634a65f9a00] mmco: unref short failure
  7%|▋         | 204/2910 [1:16:26<27:30:47, 36.60s/it]  7%|▋         | 205/2910 [1:16:32<20:28:50, 27.26s/it][h264 @ 0x56349c7f76c0] mmco: unref short failure
[h264 @ 0x558583a7ef00] mmco: unref short failure
  7%|▋         | 206/2910 [1:16:37<15:31:30, 20.67s/it]  7%|▋         | 207/2910 [1:16:43<12:17:53, 16.38s/it][h264 @ 0x55767da3ecc0] mmco: unref short failure
[h264 @ 0x55767da3ecc0] mmco: unref short failure
[h264 @ 0x557670691180] mmco: unref short failure
[h264 @ 0x557670691180] mmco: unref short failure
[h264 @ 0x5585997501c0] mmco: unref short failure
  7%|▋         | 208/2910 [1:16:49<9:52:42, 13.16s/it]   7%|▋         | 209/2910 [1:16:56<8:34:54, 11.44s/it][h264 @ 0x5556171ca3c0] mmco: unref short failure
[h264 @ 0x5556171ca3c0] mmco: unref short failure
  7%|▋         | 210/2910 [1:17:02<7:17:20,  9.72s/it]  7%|▋         | 211/2910 [1:17:09<6:33:29,  8.75s/it][h264 @ 0x55767d4ea080] mmco: unref short failure
[h264 @ 0x55767d4ea080] mmco: unref short failure
  7%|▋         | 212/2910 [1:17:15<6:06:13,  8.14s/it]  7%|▋         | 213/2910 [1:17:21<5:31:33,  7.38s/it]  7%|▋         | 214/2910 [1:17:27<5:19:01,  7.10s/it]  7%|▋         | 215/2910 [1:17:36<5:40:54,  7.59s/it][h264 @ 0x56348f34dc80] mmco: unref short failure
[h264 @ 0x555637aa1e00] mmco: unref short failure
[h264 @ 0x555637aa1e00] mmco: unref short failure
[h264 @ 0x557683fb8fc0] mmco: unref short failure
[h264 @ 0x563492f0dd00] mmco: unref short failure
[h264 @ 0x563492f0dd00] mmco: unref short failure
[h264 @ 0x558598af6500] mmco: unref short failure
[h264 @ 0x5634922bb180] mmco: unref short failure
[h264 @ 0x555618704e40] mmco: unref short failure
[h264 @ 0x555618704e40] mmco: unref short failure
  7%|▋         | 216/2910 [1:18:18<13:24:31, 17.92s/it][h264 @ 0x55766af32980] mmco: unref short failure
[h264 @ 0x55766af32980] mmco: unref short failure
[h264 @ 0x558586fe65c0] mmco: unref short failure
[h264 @ 0x5634a3b316c0] mmco: unref short failure
09/17/2024 01:14:25 - INFO - __main__ -   current idx bYqphpDyeRQ.22 from finetune_area returns wrong image/video, use 122375 instead.
[h264 @ 0x55767a564500] mmco: unref short failure
[h264 @ 0x55767a564500] mmco: unref short failure
[h264 @ 0x563490bcd580] mmco: unref short failure
  7%|▋         | 217/2910 [1:18:35<13:08:08, 17.56s/it][h264 @ 0x555616bf5900] mmco: unref short failure
[h264 @ 0x555630b6bd40] mmco: unref short failure
[h264 @ 0x555630b6bd40] mmco: unref short failure
  7%|▋         | 218/2910 [1:18:41<10:29:35, 14.03s/it][h264 @ 0x56349ce37a00] mmco: unref short failure
[h264 @ 0x56349ce37a00] mmco: unref short failure
[h264 @ 0x558591303f80] mmco: unref short failure
[h264 @ 0x558591303f80] mmco: unref short failure
  8%|▊         | 219/2910 [1:18:56<10:49:18, 14.48s/it][h264 @ 0x563495c49700] mmco: unref short failure
  8%|▊         | 220/2910 [1:19:03<9:07:01, 12.20s/it] [h264 @ 0x555617660bc0] mmco: unref short failure
[h264 @ 0x555617660bc0] mmco: unref short failure
[h264 @ 0x55857e14d400] mmco: unref short failure
[h264 @ 0x55857e14d400] mmco: unref short failure
  8%|▊         | 221/2910 [1:19:09<7:42:30, 10.32s/it][h264 @ 0x5634a4d31a80] mmco: unref short failure
[h264 @ 0x5634a4d31a80] mmco: unref short failure
[h264 @ 0x557672aba240] mmco: unref short failure
[h264 @ 0x557672aba240] mmco: unref short failure
  8%|▊         | 222/2910 [1:19:15<6:44:05,  9.02s/it][h264 @ 0x55859dbb4a80] mmco: unref short failure
[h264 @ 0x55859dbb4a80] mmco: unref short failure
09/17/2024 01:15:19 - INFO - __main__ -   current idx TXPcr1HyKkY.54 from finetune_area returns wrong image/video, use 68487 instead.
  8%|▊         | 223/2910 [1:19:22<6:19:04,  8.46s/it][h264 @ 0x555637944440] mmco: unref short failure
[h264 @ 0x555637944440] mmco: unref short failure
[h264 @ 0x558583a7ef00] mmco: unref short failure
[h264 @ 0x555638f33f00] mmco: unref short failure
[h264 @ 0x555638f33f00] mmco: unref short failure
[h264 @ 0x555627e30580] mmco: unref short failure
[h264 @ 0x558580a65b80] mmco: unref short failure
[h264 @ 0x55766c2606c0] mmco: unref short failure
[h264 @ 0x56349ce5acc0] mmco: unref short failure
[h264 @ 0x56349ce5acc0] mmco: unref short failure
[h264 @ 0x56349ce5acc0] mmco: unref short failure
[h264 @ 0x5556196f8ac0] mmco: unref short failure
[h264 @ 0x5556196f8ac0] mmco: unref short failure
[h264 @ 0x55767aa80400] mmco: unref short failure
[h264 @ 0x56349a32a600] mmco: unref short failure
[h264 @ 0x55766f4937c0] mmco: unref short failure
09/17/2024 01:16:19 - INFO - __main__ -   current idx yYJt_XCcAsY.15 from finetune_area returns wrong image/video, use 10302 instead.
[h264 @ 0x557680da3800] mmco: unref short failure
[h264 @ 0x557680da3800] mmco: unref short failure
[h264 @ 0x55561b639f80] mmco: unref short failure
[h264 @ 0x5585a180b900] mmco: unref short failure
[h264 @ 0x5585a180b900] mmco: unref short failure
09/17/2024 01:16:32 - INFO - __main__ -   current idx 1wUrnDB1U9c.8 from finetune_area returns wrong image/video, use 27324 instead.
[h264 @ 0x56349075fc80] mmco: unref short failure
[h264 @ 0x56349075fc80] mmco: unref short failure
[h264 @ 0x56348f252d80] mmco: unref short failure
[h264 @ 0x558586b5c740] mmco: unref short failure
[h264 @ 0x5585826a0140] mmco: unref short failure
[h264 @ 0x5585826a0140] mmco: unref short failure
[h264 @ 0x55562e714140] mmco: unref short failure
[h264 @ 0x55562e714140] mmco: unref short failure
[h264 @ 0x557672aba900] mmco: unref short failure
[h264 @ 0x557672aba900] mmco: unref short failure
[h264 @ 0x5576701b95c0] mmco: unref short failure
[h264 @ 0x5576701b95c0] mmco: unref short failure
  8%|▊         | 224/2910 [1:20:58<25:55:08, 34.74s/it][h264 @ 0x557685df1180] mmco: unref short failure
[h264 @ 0x557685df1180] mmco: unref short failure
  8%|▊         | 225/2910 [1:21:05<19:35:27, 26.27s/it][h264 @ 0x555617385800] mmco: unref short failure
[h264 @ 0x557671a18800] mmco: unref short failure
[h264 @ 0x557671a18800] mmco: unref short failure
  8%|▊         | 226/2910 [1:21:12<15:26:26, 20.71s/it][h264 @ 0x55859a730600] mmco: unref short failure
[h264 @ 0x55857d9da000] mmco: unref short failure
[h264 @ 0x55857d9da000] mmco: unref short failure
  8%|▊         | 227/2910 [1:21:31<15:01:27, 20.16s/it]09/17/2024 01:17:35 - INFO - __main__ -   current idx Zsx1-4aJ4ys.28 from finetune_area returns wrong image/video, use 101535 instead.
[h264 @ 0x56348e2cec00] mmco: unref short failure
  8%|▊         | 228/2910 [1:21:39<12:08:47, 16.30s/it][h264 @ 0x55561765d7c0] mmco: unref short failure
[h264 @ 0x55766f407640] mmco: unref short failure
[h264 @ 0x55766f407640] mmco: unref short failure
[h264 @ 0x56349f82d740] mmco: unref short failure
  8%|▊         | 229/2910 [1:21:45<10:02:20, 13.48s/it][h264 @ 0x558587311b40] mmco: unref short failure
[h264 @ 0x558587311b40] mmco: unref short failure
[h264 @ 0x558587311b40] mmco: unref short failure
[h264 @ 0x558587311b40] mmco: unref short failure
[h264 @ 0x56348cc32fc0] mmco: unref short failure
[h264 @ 0x563497a3ce00] mmco: unref short failure
[h264 @ 0x563497a3ce00] mmco: unref short failure
  8%|▊         | 230/2910 [1:21:52<8:32:22, 11.47s/it] [h264 @ 0x5634a34ad100] mmco: unref short failure
[h264 @ 0x5634a34ad100] mmco: unref short failure
  8%|▊         | 231/2910 [1:21:59<7:26:09,  9.99s/it][h264 @ 0x56348e31be00] mmco: unref short failure
[h264 @ 0x56348e31be00] mmco: unref short failure
[h264 @ 0x5556381cab80] mmco: unref short failure
[h264 @ 0x5556381cab80] mmco: unref short failure
[h264 @ 0x563498681880] mmco: unref short failure
[h264 @ 0x5634ae993240] mmco: unref short failure
[h264 @ 0x5634ae993240] mmco: unref short failure
[h264 @ 0x5634ae993240] mmco: unref short failure
[h264 @ 0x5585882ba440] mmco: unref short failure
[h264 @ 0x5585882ba440] mmco: unref short failure
[h264 @ 0x5634a34aca40] mmco: unref short failure
[h264 @ 0x5634a34aca40] mmco: unref short failure
[h264 @ 0x555618b0e100] mmco: unref short failure
[h264 @ 0x555618b0e100] mmco: unref short failure
[h264 @ 0x55858ccc38c0] mmco: unref short failure
[h264 @ 0x5634963c5a40] mmco: unref short failure
[h264 @ 0x5634963c5a40] mmco: unref short failure
[h264 @ 0x558580638300] mmco: unref short failure
[h264 @ 0x56348d9290c0] mmco: unref short failure
[h264 @ 0x56348d9290c0] mmco: unref short failure
[h264 @ 0x55561d7e3ec0] mmco: unref short failure
[h264 @ 0x55561d7e3ec0] mmco: unref short failure
09/17/2024 01:18:59 - INFO - __main__ -   current idx gtt8O0yuAiA.7 from finetune_area returns wrong image/video, use 92865 instead.
[h264 @ 0x55563aacc980] mmco: unref short failure
[h264 @ 0x55563aacc980] mmco: unref short failure
[h264 @ 0x55563aacc980] mmco: unref short failure
[h264 @ 0x55563aacc980] mmco: unref short failure
[h264 @ 0x55562f564b40] mmco: unref short failure
[h264 @ 0x55562f564b40] mmco: unref short failure
  8%|▊         | 232/2910 [1:23:23<23:53:27, 32.12s/it][h264 @ 0x5585939ed8c0] mmco: unref short failure
[h264 @ 0x5585939ed8c0] mmco: unref short failure
[h264 @ 0x5634aa9c6dc0] mmco: unref short failure
09/17/2024 01:19:25 - INFO - __main__ -   current idx Q_Kn3yzSJ5w.69 from finetune_area returns wrong image/video, use 43269 instead.
[h264 @ 0x5634a398e2c0] mmco: unref short failure
  8%|▊         | 233/2910 [1:23:32<18:43:07, 25.17s/it][h264 @ 0x558583b95140] mmco: unref short failure
[h264 @ 0x558583b95140] mmco: unref short failure
  8%|▊         | 234/2910 [1:23:38<14:26:49, 19.44s/it][h264 @ 0x55562bffce80] mmco: unref short failure
[h264 @ 0x555617cf1000] mmco: unref short failure
[h264 @ 0x55561ce17a80] mmco: unref short failure
[h264 @ 0x55561ce17a80] mmco: unref short failure
[h264 @ 0x55561ce17a80] mmco: unref short failure
[h264 @ 0x55561ce17a80] mmco: unref short failure
[h264 @ 0x5634959e89c0] mmco: unref short failure
  8%|▊         | 235/2910 [1:24:01<15:14:14, 20.51s/it][h264 @ 0x555616bdcc00] mmco: unref short failure
  8%|▊         | 236/2910 [1:24:07<12:03:41, 16.24s/it]  8%|▊         | 237/2910 [1:24:13<9:41:58, 13.06s/it] [h264 @ 0x55768940a240] mmco: unref short failure
  8%|▊         | 238/2910 [1:24:20<8:31:21, 11.48s/it][h264 @ 0x55858d4a4240] mmco: unref short failure
[h264 @ 0x55858d4a4240] mmco: unref short failure
  8%|▊         | 239/2910 [1:24:27<7:22:45,  9.95s/it]09/17/2024 01:20:37 - INFO - __main__ -   current idx kZsPqzB36mk.13 from finetune_area returns wrong image/video, use 109316 instead.
[h264 @ 0x563499281280] mmco: unref short failure
[h264 @ 0x563499281280] mmco: unref short failure
[h264 @ 0x5576735e15c0] mmco: unref short failure
[h264 @ 0x5576735e15c0] mmco: unref short failure
[h264 @ 0x55858bceac40] mmco: unref short failure
[h264 @ 0x55766aa6a500] mmco: unref short failure
[h264 @ 0x557685e96a40] mmco: unref short failure
[h264 @ 0x557685e96a40] mmco: unref short failure
[h264 @ 0x5576745e19c0] mmco: unref short failure
[h264 @ 0x55857e2c3700] mmco: unref short failure
[h264 @ 0x55857e2c3700] mmco: unref short failure
[h264 @ 0x55561aaa4d40] mmco: unref short failure
[h264 @ 0x55561aaa4d40] mmco: unref short failure
[h264 @ 0x55857f453880] mmco: unref short failure
[h264 @ 0x55857f453880] mmco: unref short failure
[h264 @ 0x5556240b3840] mmco: unref short failure
[h264 @ 0x5556240b3840] mmco: unref short failure
[h264 @ 0x5556240b3840] mmco: unref short failure
[h264 @ 0x5556240b3840] mmco: unref short failure
[h264 @ 0x56348ddb2e80] mmco: unref short failure
[h264 @ 0x56349cde0200] mmco: unref short failure
[h264 @ 0x56349cde0200] mmco: unref short failure
[h264 @ 0x55561ef78380] mmco: unref short failure
  8%|▊         | 240/2910 [1:25:44<22:21:39, 30.15s/it][h264 @ 0x5556186f1a00] mmco: unref short failure
[h264 @ 0x5556186f1a00] mmco: unref short failure
[h264 @ 0x5556186f1a00] mmco: unref short failure
[h264 @ 0x5556186f1a00] mmco: unref short failure
[h264 @ 0x557669dfd580] mmco: unref short failure
[h264 @ 0x557669dfd580] mmco: unref short failure
[h264 @ 0x5634a40792c0] mmco: unref short failure
  8%|▊         | 241/2910 [1:25:57<18:35:35, 25.08s/it][h264 @ 0x55561e4fd040] mmco: unref short failure
[h264 @ 0x5634b0c131c0] mmco: unref short failure
[h264 @ 0x5634b0c131c0] mmco: unref short failure
  8%|▊         | 242/2910 [1:26:04<14:29:37, 19.56s/it][h264 @ 0x56349b62f900] mmco: unref short failure
[h264 @ 0x56349b62f900] mmco: unref short failure
[h264 @ 0x56349b62f900] mmco: unref short failure
[h264 @ 0x56349b62f900] mmco: unref short failure
[h264 @ 0x5634ae993900] mmco: unref short failure
  8%|▊         | 243/2910 [1:26:25<14:49:22, 20.01s/it][h264 @ 0x5585891c4140] mmco: unref short failure
[h264 @ 0x5585891c4140] mmco: unref short failure
[h264 @ 0x558583cc7e40] mmco: unref short failure
[h264 @ 0x55766c5efa40] mmco: unref short failure
[h264 @ 0x55766c5efa40] mmco: unref short failure
[h264 @ 0x557686c525c0] mmco: unref short failure
[h264 @ 0x557686c525c0] mmco: unref short failure
[h264 @ 0x557686c525c0] mmco: unref short failure
[h264 @ 0x557686c525c0] mmco: unref short failure
[h264 @ 0x555624aeaa40] mmco: unref short failure
[h264 @ 0x555624aeaa40] mmco: unref short failure
09/17/2024 01:22:51 - INFO - __main__ -   current idx 4DqZp71UU3o.53 from finetune_area returns wrong image/video, use 33976 instead.
[h264 @ 0x5585952efec0] mmco: unref short failure
[h264 @ 0x5585952efec0] mmco: unref short failure
  8%|▊         | 244/2910 [1:26:57<17:32:18, 23.68s/it][h264 @ 0x5576726a6940] mmco: unref short failure
[h264 @ 0x5576726a6940] mmco: unref short failure
  8%|▊         | 245/2910 [1:27:03<13:34:44, 18.34s/it]  8%|▊         | 246/2910 [1:27:10<11:02:43, 14.93s/it][h264 @ 0x55562618e2c0] mmco: unref short failure
[h264 @ 0x555637fd6b80] mmco: unref short failure
[h264 @ 0x55766f080bc0] mmco: unref short failure
  8%|▊         | 247/2910 [1:27:16<9:04:35, 12.27s/it] [h264 @ 0x55857ecf0700] mmco: unref short failure
[h264 @ 0x55857ecf0700] mmco: unref short failure
[h264 @ 0x55561e4fb2c0] mmco: unref short failure
[h264 @ 0x5576748842c0] mmco: unref short failure
[h264 @ 0x5576748842c0] mmco: unref short failure
[h264 @ 0x557675a0ae00] mmco: unref short failure
[h264 @ 0x557675a0ae00] mmco: unref short failure
[h264 @ 0x5576776ac300] mmco: unref short failure
[h264 @ 0x5576776ac300] mmco: unref short failure
[h264 @ 0x56348ddb2800] mmco: unref short failure
[h264 @ 0x55561c518780] mmco: unref short failure
[h264 @ 0x55766ee58240] mmco: unref short failure
[h264 @ 0x55766ee58240] mmco: unref short failure
  9%|▊         | 248/2910 [1:28:14<19:11:36, 25.96s/it][h264 @ 0x56348f952cc0] mmco: unref short failure
[h264 @ 0x55561c132d80] mmco: unref short failure
[h264 @ 0x55561c132d80] mmco: unref short failure
[h264 @ 0x5576841ddb40] mmco: unref short failure
[h264 @ 0x5576841ddb40] mmco: unref short failure
  9%|▊         | 249/2910 [1:28:32<17:25:37, 23.58s/it]09/17/2024 01:24:31 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 01:24:31 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556228e12c0] mmco: unref short failure
09/17/2024 01:24:40 - INFO - __main__ -   current idx 66BbxK8sJjM.10 from finetune_area returns wrong image/video, use 130037 instead.
[h264 @ 0x558597f8bd80] mmco: unref short failure
[h264 @ 0x558597f8bd80] mmco: unref short failure
[h264 @ 0x558597f8bd80] mmco: unref short failure
[h264 @ 0x558597f8bd80] mmco: unref short failure
[h264 @ 0x558584fa0080] mmco: unref short failure
[h264 @ 0x558584fa0080] mmco: unref short failure
[h264 @ 0x558584fa0080] mmco: unref short failure
[h264 @ 0x558584fa0080] mmco: unref short failure
[h264 @ 0x5634a2dfb300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556172c1c00] mmco: unref short failure
[h264 @ 0x5556172c1c00] mmco: unref short failure
[h264 @ 0x5556172c1c00] mmco: unref short failure
[h264 @ 0x5556172c1c00] mmco: unref short failure
[h264 @ 0x55766e58ff00] mmco: unref short failure
[h264 @ 0x55766e58ff00] mmco: unref short failure
[h264 @ 0x55561e9e4240] mmco: unref short failure
[h264 @ 0x55561e9e4240] mmco: unref short failure
[h264 @ 0x555636807f00] mmco: unref short failure
[h264 @ 0x558589693a00] mmco: unref short failure
[h264 @ 0x55562e908a00] mmco: unref short failure
09/17/2024 01:26:25 - INFO - __main__ -   current idx G_BESfJVLFg.1 from finetune_area returns wrong image/video, use 4065 instead.
[h264 @ 0x555633ea8580] mmco: unref short failure
[h264 @ 0x56349bd2ae00] mmco: unref short failure
[h264 @ 0x56349bd2ae00] mmco: unref short failure
[h264 @ 0x557688ff9ac0] mmco: unref short failure
[h264 @ 0x557688ff9ac0] mmco: unref short failure
[h264 @ 0x56348d473600] mmco: unref short failure
[h264 @ 0x56348d473600] mmco: unref short failure
[h264 @ 0x56348d473600] mmco: unref short failure
[h264 @ 0x56348d473600] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:33,  2.35it/s][A
  1%|          | 2/221 [00:00<01:29,  2.45it/s][A
  1%|▏         | 3/221 [00:01<01:41,  2.14it/s][A
  2%|▏         | 4/221 [00:01<01:22,  2.62it/s][A
  2%|▏         | 5/221 [00:01<01:01,  3.49it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.81it/s][A
  4%|▎         | 8/221 [00:02<00:41,  5.15it/s][A
  4%|▍         | 9/221 [00:02<00:46,  4.59it/s][A
  5%|▍         | 10/221 [00:03<01:07,  3.12it/s][A
  5%|▍         | 11/221 [00:03<00:57,  3.67it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.34it/s][A
  6%|▌         | 13/221 [00:03<00:56,  3.70it/s][A
  6%|▋         | 14/221 [00:03<00:49,  4.15it/s][A
  7%|▋         | 15/221 [00:04<00:47,  4.35it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.43it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.50it/s][A
  8%|▊         | 18/221 [00:05<01:17,  2.61it/s][A
  9%|▊         | 19/221 [00:05<01:05,  3.08it/s][A
  9%|▉         | 20/221 [00:05<00:56,  3.54it/s][A[h264 @ 0x55562c059480] mmco: unref short failure
[h264 @ 0x55562c059480] mmco: unref short failure

 10%|▉         | 21/221 [00:06<00:52,  3.81it/s][A
 10%|▉         | 22/221 [00:06<01:02,  3.18it/s][A
 10%|█         | 23/221 [00:06<00:51,  3.82it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.79it/s][A
 11%|█▏        | 25/221 [00:07<00:53,  3.67it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 27/221 [00:07<00:47,  4.07it/s][A
 13%|█▎        | 28/221 [00:08<01:18,  2.45it/s][A
 13%|█▎        | 29/221 [00:08<01:06,  2.87it/s][A
 14%|█▎        | 30/221 [00:09<01:07,  2.85it/s][A
 14%|█▍        | 31/221 [00:09<01:11,  2.67it/s][A
 14%|█▍        | 32/221 [00:09<00:59,  3.15it/s][A
 15%|█▍        | 33/221 [00:09<00:50,  3.71it/s][A
 15%|█▌        | 34/221 [00:09<00:42,  4.43it/s][A
 16%|█▌        | 35/221 [00:10<00:43,  4.26it/s][A
 16%|█▋        | 36/221 [00:10<00:51,  3.63it/s][A
 17%|█▋        | 37/221 [00:11<01:03,  2.90it/s][A
 17%|█▋        | 38/221 [00:11<01:09,  2.62it/s][A
 18%|█▊        | 39/221 [00:11<00:56,  3.20it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.32it/s][A
 19%|█▊        | 41/221 [00:12<00:46,  3.84it/s][A
 19%|█▉        | 42/221 [00:12<01:10,  2.55it/s][A[h264 @ 0x55767d358500] mmco: unref short failure
[h264 @ 0x55767d358500] mmco: unref short failure

 19%|█▉        | 43/221 [00:13<00:58,  3.03it/s][A
 20%|█▉        | 44/221 [00:13<00:47,  3.69it/s][A
 20%|██        | 45/221 [00:13<01:07,  2.59it/s][A
 21%|██        | 46/221 [00:14<01:07,  2.59it/s][A
 21%|██▏       | 47/221 [00:14<01:25,  2.04it/s][A
 22%|██▏       | 48/221 [00:15<01:06,  2.62it/s][A
 22%|██▏       | 49/221 [00:15<01:00,  2.86it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.29it/s][A
 23%|██▎       | 51/221 [00:15<00:44,  3.84it/s][A
 24%|██▎       | 52/221 [00:15<00:40,  4.18it/s][A
 24%|██▍       | 53/221 [00:16<00:35,  4.76it/s][A[h264 @ 0x555621edda40] mmco: unref short failure
[h264 @ 0x555621edda40] mmco: unref short failure

 24%|██▍       | 54/221 [00:18<02:21,  1.18it/s][A
 25%|██▍       | 55/221 [00:18<02:01,  1.36it/s][A
 25%|██▌       | 56/221 [00:19<01:32,  1.79it/s][A[h264 @ 0x55766f407b00] mmco: unref short failure

 26%|██▌       | 57/221 [00:19<01:16,  2.14it/s][A
 26%|██▌       | 58/221 [00:19<00:58,  2.77it/s][A
 27%|██▋       | 59/221 [00:19<00:49,  3.25it/s][A
 27%|██▋       | 60/221 [00:20<01:14,  2.17it/s][A
 28%|██▊       | 61/221 [00:20<01:03,  2.52it/s][A
 28%|██▊       | 62/221 [00:20<00:58,  2.72it/s][A
 29%|██▊       | 63/221 [00:21<00:47,  3.33it/s][A
 29%|██▉       | 64/221 [00:21<00:46,  3.39it/s][A
 29%|██▉       | 65/221 [00:21<00:42,  3.66it/s][A
 30%|██▉       | 66/221 [00:22<01:03,  2.43it/s][A
 30%|███       | 67/221 [00:22<01:00,  2.55it/s][A
 31%|███       | 68/221 [00:22<00:48,  3.15it/s][A
 31%|███       | 69/221 [00:23<01:07,  2.25it/s][A
 32%|███▏      | 70/221 [00:23<00:57,  2.64it/s][A
 32%|███▏      | 71/221 [00:24<00:54,  2.77it/s][A
 33%|███▎      | 72/221 [00:24<00:49,  2.99it/s][A
 33%|███▎      | 73/221 [00:24<00:54,  2.72it/s][A
 33%|███▎      | 74/221 [00:24<00:45,  3.25it/s][A
 34%|███▍      | 75/221 [00:25<00:48,  2.99it/s][A
 34%|███▍      | 76/221 [00:25<00:44,  3.26it/s][A
 35%|███▍      | 77/221 [00:26<00:56,  2.54it/s][A
 35%|███▌      | 78/221 [00:26<00:44,  3.24it/s][A
 36%|███▌      | 79/221 [00:26<00:50,  2.83it/s][A
 36%|███▌      | 80/221 [00:27<00:45,  3.09it/s][A
 37%|███▋      | 81/221 [00:27<00:44,  3.13it/s][A
 37%|███▋      | 82/221 [00:27<00:50,  2.75it/s][A
 38%|███▊      | 83/221 [00:28<00:48,  2.83it/s][A
 38%|███▊      | 84/221 [00:28<00:44,  3.08it/s][A
 39%|███▉      | 86/221 [00:28<00:32,  4.12it/s][A
 39%|███▉      | 87/221 [00:29<00:59,  2.24it/s][A
 40%|███▉      | 88/221 [00:30<01:11,  1.86it/s][A
 40%|████      | 89/221 [00:30<01:06,  1.99it/s][A
 41%|████      | 90/221 [00:31<00:55,  2.36it/s][A
 41%|████      | 91/221 [00:31<00:45,  2.88it/s][A
 42%|████▏     | 92/221 [00:31<00:44,  2.92it/s][A
 42%|████▏     | 93/221 [00:32<00:52,  2.45it/s][A
 43%|████▎     | 94/221 [00:32<00:46,  2.75it/s][A
 43%|████▎     | 95/221 [00:32<00:41,  3.07it/s][A
 43%|████▎     | 96/221 [00:33<01:01,  2.03it/s][A
 44%|████▍     | 97/221 [00:33<00:49,  2.52it/s][A
 44%|████▍     | 98/221 [00:34<00:51,  2.37it/s][A[h264 @ 0x5556293c6440] mmco: unref short failure
[h264 @ 0x5556293c6440] mmco: unref short failure
[h264 @ 0x5556293c6440] mmco: unref short failure
[h264 @ 0x5556293c6440] mmco: unref short failure

 45%|████▍     | 99/221 [00:34<00:49,  2.44it/s][A
 45%|████▌     | 100/221 [00:34<00:46,  2.59it/s][A
 46%|████▌     | 101/221 [00:35<00:44,  2.68it/s][A[h264 @ 0x55766d9690c0] mmco: unref short failure

 46%|████▌     | 102/221 [00:35<00:49,  2.40it/s][A
 47%|████▋     | 103/221 [00:35<00:38,  3.07it/s][A
 47%|████▋     | 104/221 [00:36<00:33,  3.45it/s][A
 48%|████▊     | 105/221 [00:36<00:36,  3.18it/s][A
 48%|████▊     | 106/221 [00:37<00:52,  2.18it/s][A
 48%|████▊     | 107/221 [00:37<00:46,  2.46it/s][A
 49%|████▉     | 108/221 [00:37<00:42,  2.67it/s][A
 49%|████▉     | 109/221 [00:38<00:36,  3.06it/s][A[h264 @ 0x55561730aac0] mmco: unref short failure
[h264 @ 0x55561730aac0] mmco: unref short failure
[h264 @ 0x56348edf8400] mmco: unref short failure

 50%|████▉     | 110/221 [00:38<00:30,  3.65it/s][A
 50%|█████     | 111/221 [00:38<00:37,  2.97it/s][A
 51%|█████     | 112/221 [00:39<00:35,  3.07it/s][A
 51%|█████     | 113/221 [00:39<00:34,  3.12it/s][A
 52%|█████▏    | 114/221 [00:39<00:28,  3.75it/s][A
 52%|█████▏    | 115/221 [00:39<00:27,  3.81it/s][A
 52%|█████▏    | 116/221 [00:41<01:08,  1.54it/s][A
 53%|█████▎    | 117/221 [00:41<00:57,  1.81it/s][A
 53%|█████▎    | 118/221 [00:41<00:45,  2.29it/s][A
 54%|█████▍    | 119/221 [00:42<00:43,  2.36it/s][A
 54%|█████▍    | 120/221 [00:42<00:36,  2.77it/s][A
 55%|█████▍    | 121/221 [00:42<00:30,  3.26it/s][A
 55%|█████▌    | 122/221 [00:42<00:30,  3.29it/s][A
 56%|█████▌    | 123/221 [00:43<00:25,  3.86it/s][A
 56%|█████▌    | 124/221 [00:43<00:26,  3.63it/s][A
 57%|█████▋    | 125/221 [00:43<00:34,  2.79it/s][A
 57%|█████▋    | 126/221 [00:44<00:29,  3.17it/s][A
 57%|█████▋    | 127/221 [00:46<01:34,  1.00s/it][A
 58%|█████▊    | 128/221 [00:47<01:15,  1.24it/s][A
 58%|█████▊    | 129/221 [00:47<00:58,  1.58it/s][A
 59%|█████▉    | 130/221 [00:47<00:49,  1.84it/s][A
 59%|█████▉    | 131/221 [00:47<00:42,  2.14it/s][A
 60%|█████▉    | 132/221 [00:49<00:58,  1.52it/s][A09/17/2024 01:27:42 - INFO - __main__ -   current idx 9Ralave0cFg.16 from finetune_area returns wrong image/video, use 87295 instead.

 60%|██████    | 133/221 [00:49<00:52,  1.67it/s][A
 61%|██████    | 134/221 [00:50<00:56,  1.55it/s][A
 61%|██████    | 135/221 [00:50<00:49,  1.75it/s][A
 62%|██████▏   | 136/221 [00:51<00:44,  1.91it/s][A
 62%|██████▏   | 137/221 [00:51<00:36,  2.28it/s][A
 62%|██████▏   | 138/221 [00:51<00:36,  2.30it/s][A
 63%|██████▎   | 139/221 [00:52<00:45,  1.82it/s][A
 63%|██████▎   | 140/221 [00:52<00:40,  2.00it/s][A
 64%|██████▍   | 141/221 [00:53<00:35,  2.26it/s][A
 64%|██████▍   | 142/221 [00:53<00:33,  2.34it/s][A
 65%|██████▍   | 143/221 [00:54<00:32,  2.38it/s][A[h264 @ 0x55562fe0cd80] mmco: unref short failure
[h264 @ 0x55562fe0cd80] mmco: unref short failure

 65%|██████▌   | 144/221 [00:54<00:29,  2.64it/s][A
 66%|██████▌   | 145/221 [00:54<00:22,  3.35it/s][A
 66%|██████▌   | 146/221 [00:54<00:17,  4.18it/s][A
 67%|██████▋   | 147/221 [00:54<00:18,  3.95it/s][A[h264 @ 0x5634922bad00] mmco: unref short failure
[h264 @ 0x5634922bad00] mmco: unref short failure

 67%|██████▋   | 148/221 [00:55<00:20,  3.61it/s][A
 67%|██████▋   | 149/221 [00:55<00:22,  3.22it/s][A
 68%|██████▊   | 150/221 [00:55<00:20,  3.54it/s][A
 68%|██████▊   | 151/221 [00:56<00:30,  2.28it/s][A
 69%|██████▉   | 152/221 [00:58<00:52,  1.33it/s][A
 69%|██████▉   | 153/221 [00:58<00:42,  1.60it/s][A
 70%|██████▉   | 154/221 [00:58<00:36,  1.83it/s][A
 70%|███████   | 155/221 [00:59<00:31,  2.11it/s][A
 71%|███████   | 156/221 [00:59<00:30,  2.11it/s][A
 71%|███████   | 157/221 [01:00<00:42,  1.49it/s][A[h264 @ 0x5576713bd8c0] mmco: unref short failure
[h264 @ 0x5576713bd8c0] mmco: unref short failure

 71%|███████▏  | 158/221 [01:00<00:33,  1.88it/s][A
 72%|███████▏  | 159/221 [01:00<00:25,  2.45it/s][A
 72%|███████▏  | 160/221 [01:01<00:20,  2.91it/s][A
 73%|███████▎  | 161/221 [01:01<00:16,  3.67it/s][A
 73%|███████▎  | 162/221 [01:01<00:13,  4.36it/s][A
 74%|███████▍  | 163/221 [01:01<00:14,  4.08it/s][A
 74%|███████▍  | 164/221 [01:01<00:14,  3.90it/s][A
 75%|███████▍  | 165/221 [01:02<00:14,  3.87it/s][A
 75%|███████▌  | 166/221 [01:02<00:18,  3.03it/s][A
 76%|███████▌  | 167/221 [01:02<00:15,  3.55it/s][A
 76%|███████▌  | 168/221 [01:04<00:29,  1.80it/s][A
 76%|███████▋  | 169/221 [01:04<00:22,  2.32it/s][A
 77%|███████▋  | 170/221 [01:04<00:20,  2.45it/s][A
 77%|███████▋  | 171/221 [01:05<00:21,  2.36it/s][A
 78%|███████▊  | 172/221 [01:05<00:18,  2.62it/s][A
 78%|███████▊  | 173/221 [01:05<00:19,  2.51it/s][A
 79%|███████▊  | 174/221 [01:05<00:15,  2.98it/s][A
 79%|███████▉  | 175/221 [01:06<00:15,  3.00it/s][A
 80%|███████▉  | 176/221 [01:06<00:12,  3.49it/s][A
 80%|████████  | 177/221 [01:06<00:11,  3.69it/s][A
 81%|████████  | 178/221 [01:07<00:16,  2.61it/s][A
 81%|████████  | 179/221 [01:07<00:17,  2.46it/s][A
 81%|████████▏ | 180/221 [01:07<00:13,  3.05it/s][A
 82%|████████▏ | 182/221 [01:08<00:10,  3.80it/s][A
 83%|████████▎ | 183/221 [01:08<00:09,  3.93it/s][A
 83%|████████▎ | 184/221 [01:08<00:09,  3.89it/s][A[h264 @ 0x55859cd21700] mmco: unref short failure

 84%|████████▍ | 186/221 [01:09<00:08,  4.17it/s][A
 85%|████████▍ | 187/221 [01:09<00:08,  3.91it/s][A
 85%|████████▌ | 188/221 [01:09<00:08,  3.91it/s][A
 86%|████████▌ | 189/221 [01:10<00:08,  3.68it/s][A
 86%|████████▌ | 190/221 [01:10<00:10,  2.84it/s][A
 86%|████████▋ | 191/221 [01:10<00:08,  3.51it/s][A
 87%|████████▋ | 192/221 [01:11<00:07,  3.69it/s][A
 88%|████████▊ | 194/221 [01:12<00:13,  2.05it/s][A
 88%|████████▊ | 195/221 [01:12<00:10,  2.50it/s][A
 89%|████████▊ | 196/221 [01:12<00:08,  2.81it/s][A
 89%|████████▉ | 197/221 [01:13<00:07,  3.15it/s][A
 90%|████████▉ | 198/221 [01:13<00:06,  3.46it/s][A
 90%|█████████ | 199/221 [01:13<00:06,  3.40it/s][A
 90%|█████████ | 200/221 [01:13<00:05,  3.77it/s][A09/17/2024 01:28:07 - INFO - __main__ -   current idx uFCptSipOAs.53 from finetune_area returns wrong image/video, use 109667 instead.

 91%|█████████ | 201/221 [01:14<00:05,  3.85it/s][A
 91%|█████████▏| 202/221 [01:14<00:05,  3.80it/s][A
 92%|█████████▏| 203/221 [01:14<00:04,  3.69it/s][A
 92%|█████████▏| 204/221 [01:14<00:04,  4.24it/s][A
 93%|█████████▎| 205/221 [01:14<00:03,  4.86it/s][A
 93%|█████████▎| 206/221 [01:15<00:04,  3.49it/s][A
 94%|█████████▍| 208/221 [01:15<00:02,  4.42it/s][A
 95%|█████████▍| 209/221 [01:15<00:02,  4.22it/s][A
 95%|█████████▌| 211/221 [01:16<00:02,  4.37it/s][A
 96%|█████████▌| 212/221 [01:16<00:02,  4.17it/s][A
 96%|█████████▋| 213/221 [01:16<00:01,  4.35it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.58it/s][A
 97%|█████████▋| 215/221 [01:17<00:02,  2.88it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  2.90it/s][A[h264 @ 0x55766be65ac0] mmco: unref short failure

 98%|█████████▊| 217/221 [01:18<00:01,  2.53it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.52it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.46it/s][A
100%|█████████▉| 220/221 [01:21<00:00,  1.31it/s][A
100%|██████████| 221/221 [01:21<00:00,  1.74it/s][A100%|██████████| 221/221 [01:21<00:00,  2.72it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:05,  3.38it/s][A
  1%|          | 2/221 [00:00<01:07,  3.26it/s][A
  1%|▏         | 3/221 [00:00<01:07,  3.23it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.24it/s][A
  2%|▏         | 5/221 [00:01<01:06,  3.27it/s][A
  3%|▎         | 6/221 [00:01<01:06,  3.25it/s][A[h264 @ 0x5556321ef0c0] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.21it/s][A
  4%|▍         | 9/221 [00:02<01:06,  3.21it/s][A
  5%|▍         | 10/221 [00:03<01:05,  3.24it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.27it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.27it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.31it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.32it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.27it/s][A
  8%|▊         | 17/221 [00:05<01:03,  3.23it/s][A
  8%|▊         | 18/221 [00:05<01:02,  3.24it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.28it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.34it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.36it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.36it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.37it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.37it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.35it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.34it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.36it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.33it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.32it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.34it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.36it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.37it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.38it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.39it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.35it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.36it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.27it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.31it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.30it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.33it/s][A[h264 @ 0x55768ab7fb40] mmco: unref short failure
[h264 @ 0x55768ab7fb40] mmco: unref short failure
[h264 @ 0x55768ab7fb40] mmco: unref short failure
[h264 @ 0x55768ab7fb40] mmco: unref short failure

 21%|██        | 46/221 [00:13<00:52,  3.35it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.36it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.35it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.34it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.25it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.30it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.28it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.32it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.34it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.35it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.33it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.34it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.29it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.34it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.34it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.34it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.36it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.37it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.38it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.38it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.35it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.37it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.38it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.35it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.33it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.35it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.37it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.38it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.39it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.26it/s][A
 37%|███▋      | 82/221 [00:24<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:24<00:41,  3.29it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.32it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.32it/s][A
 39%|███▉      | 86/221 [00:25<00:40,  3.34it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.33it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.35it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.36it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.37it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.38it/s][A
 42%|████▏     | 92/221 [00:27<00:39,  3.28it/s][A
 42%|████▏     | 93/221 [00:27<00:38,  3.32it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.34it/s][A[h264 @ 0x55561e5ad780] mmco: unref short failure

 43%|████▎     | 95/221 [00:28<00:37,  3.36it/s][A
 43%|████▎     | 96/221 [00:28<00:37,  3.37it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.38it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.39it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.40it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.40it/s][A[h264 @ 0x56348f861900] mmco: unref short failure

 46%|████▌     | 101/221 [00:30<00:35,  3.40it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.40it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.17it/s][A
  1%|          | 2/221 [00:00<00:57,  3.78it/s][A
  1%|▏         | 3/221 [00:01<01:31,  2.39it/s][A
  2%|▏         | 4/221 [00:01<01:11,  3.03it/s][A
  2%|▏         | 5/221 [00:01<00:59,  3.65it/s][A
  3%|▎         | 6/221 [00:01<00:47,  4.54it/s][A
  3%|▎         | 7/221 [00:01<00:43,  4.91it/s][A
  4%|▎         | 8/221 [00:01<00:44,  4.79it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.81it/s][A
  5%|▍         | 10/221 [00:02<01:14,  2.81it/s][A
  5%|▍         | 11/221 [00:03<01:16,  2.75it/s][A
  5%|▌         | 12/221 [00:03<01:06,  3.16it/s][A
  6%|▌         | 13/221 [00:04<01:32,  2.25it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.63it/s][A
  7%|▋         | 15/221 [00:04<01:23,  2.47it/s][A
  7%|▋         | 16/221 [00:05<01:14,  2.77it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:06<01:17,  2.63it/s][A
  9%|▊         | 19/221 [00:06<01:03,  3.17it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.63it/s][A
 10%|▉         | 21/221 [00:06<00:45,  4.37it/s][A
 10%|▉         | 22/221 [00:06<00:44,  4.52it/s][A
 10%|█         | 23/221 [00:06<00:37,  5.28it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.70it/s][A
 11%|█▏        | 25/221 [00:07<00:36,  5.40it/s][A
 12%|█▏        | 26/221 [00:07<00:41,  4.64it/s][A
 12%|█▏        | 27/221 [00:07<00:40,  4.75it/s][A
 13%|█▎        | 28/221 [00:08<01:03,  3.02it/s][A
 13%|█▎        | 29/221 [00:08<01:03,  3.02it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.41it/s][A
 14%|█▍        | 32/221 [00:09<00:48,  3.86it/s][A
 15%|█▍        | 33/221 [00:09<00:46,  4.03it/s][A
 15%|█▌        | 34/221 [00:09<00:45,  4.12it/s][A
 16%|█▌        | 35/221 [00:09<00:41,  4.47it/s][A
 16%|█▋        | 36/221 [00:10<01:05,  2.82it/s][A
 17%|█▋        | 37/221 [00:10<01:01,  2.98it/s][A
 17%|█▋        | 38/221 [00:11<01:00,  3.03it/s][A
 18%|█▊        | 39/221 [00:11<00:49,  3.71it/s][A
 18%|█▊        | 40/221 [00:11<00:47,  3.77it/s][A
 19%|█▊        | 41/221 [00:11<00:48,  3.74it/s][A
 19%|█▉        | 42/221 [00:11<00:42,  4.18it/s][A
 19%|█▉        | 43/221 [00:12<00:56,  3.13it/s][A
 20%|█▉        | 44/221 [00:12<00:52,  3.35it/s][A
 20%|██        | 45/221 [00:13<00:55,  3.18it/s][A
 21%|██        | 46/221 [00:13<00:50,  3.43it/s][A
 21%|██▏       | 47/221 [00:13<00:41,  4.17it/s][A
 22%|██▏       | 49/221 [00:13<00:30,  5.66it/s][A
 23%|██▎       | 50/221 [00:14<00:42,  4.07it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.14it/s][A
 24%|██▎       | 52/221 [00:14<00:34,  4.85it/s][A
 24%|██▍       | 53/221 [00:14<00:42,  3.91it/s][A
 24%|██▍       | 54/221 [00:15<00:41,  3.99it/s][A
 25%|██▍       | 55/221 [00:15<00:38,  4.35it/s][A
 25%|██▌       | 56/221 [00:15<00:46,  3.57it/s][A
 26%|██▌       | 57/221 [00:16<00:54,  3.03it/s][A
 27%|██▋       | 59/221 [00:16<00:43,  3.69it/s][A
 27%|██▋       | 60/221 [00:16<00:38,  4.19it/s][A
 28%|██▊       | 61/221 [00:16<00:38,  4.14it/s][A
 28%|██▊       | 62/221 [00:17<00:42,  3.76it/s][A
 29%|██▉       | 64/221 [00:17<00:32,  4.79it/s][A
 29%|██▉       | 65/221 [00:17<00:32,  4.84it/s][A
 30%|██▉       | 66/221 [00:18<00:38,  4.05it/s][A
 30%|███       | 67/221 [00:18<00:45,  3.40it/s][A
 31%|███       | 68/221 [00:18<00:39,  3.84it/s][A
 31%|███       | 69/221 [00:19<00:52,  2.90it/s][A
 32%|███▏      | 70/221 [00:19<00:45,  3.35it/s][A
 32%|███▏      | 71/221 [00:19<00:49,  3.04it/s][A
 33%|███▎      | 72/221 [00:20<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  3.00it/s][A
 33%|███▎      | 74/221 [00:20<00:43,  3.39it/s][A
 34%|███▍      | 75/221 [00:21<00:47,  3.05it/s][A
 34%|███▍      | 76/221 [00:21<00:44,  3.29it/s][A
 35%|███▍      | 77/221 [00:21<00:46,  3.08it/s][A
 35%|███▌      | 78/221 [00:21<00:42,  3.35it/s][A
 36%|███▌      | 79/221 [00:22<00:42,  3.32it/s][A
 36%|███▌      | 80/221 [00:22<00:38,  3.66it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.79it/s][A
 37%|███▋      | 82/221 [00:22<00:33,  4.20it/s][A
 38%|███▊      | 83/221 [00:23<00:28,  4.80it/s][A
 38%|███▊      | 84/221 [00:23<00:30,  4.50it/s][A
 38%|███▊      | 85/221 [00:23<00:28,  4.84it/s][A
 39%|███▉      | 86/221 [00:23<00:25,  5.28it/s][A
 39%|███▉      | 87/221 [00:24<00:36,  3.70it/s][A
 40%|███▉      | 88/221 [00:24<00:39,  3.36it/s][A
 40%|████      | 89/221 [00:24<00:44,  2.99it/s][A
 41%|████      | 90/221 [00:25<00:48,  2.68it/s][A
 41%|████      | 91/221 [00:25<00:42,  3.04it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.24it/s][A
 42%|████▏     | 93/221 [00:26<00:43,  2.94it/s][A
 43%|████▎     | 94/221 [00:26<00:37,  3.35it/s][A
 43%|████▎     | 95/221 [00:27<00:50,  2.52it/s][A
 43%|████▎     | 96/221 [00:27<00:43,  2.87it/s][A
 44%|████▍     | 97/221 [00:27<00:40,  3.06it/s][A
 44%|████▍     | 98/221 [00:27<00:42,  2.93it/s][A
 45%|████▍     | 99/221 [00:28<00:40,  3.02it/s][A
 45%|████▌     | 100/221 [00:28<00:36,  3.32it/s][A
 46%|████▌     | 101/221 [00:28<00:40,  2.97it/s][A
 46%|████▌     | 102/221 [00:29<00:37,  3.15it/s][A
 47%|████▋     | 103/221 [00:29<00:32,  3.68it/s][A
 48%|████▊     | 105/221 [00:29<00:25,  4.60it/s][A
 48%|████▊     | 106/221 [00:29<00:28,  4.04it/s][A
 48%|████▊     | 107/221 [00:30<00:25,  4.55it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.08it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.95it/s][A
 50%|████▉     | 110/221 [00:30<00:26,  4.26it/s][A
 50%|█████     | 111/221 [00:31<00:30,  3.64it/s][A
 51%|█████     | 112/221 [00:31<00:29,  3.65it/s][A
 51%|█████     | 113/221 [00:31<00:28,  3.82it/s][A
 52%|█████▏    | 115/221 [00:32<00:20,  5.11it/s][A
 52%|█████▏    | 116/221 [00:32<00:20,  5.19it/s][A
 53%|█████▎    | 117/221 [00:32<00:21,  4.87it/s][A
 53%|█████▎    | 118/221 [00:32<00:25,  4.08it/s][A
 54%|█████▍    | 119/221 [00:33<00:31,  3.25it/s][A
 54%|█████▍    | 120/221 [00:33<00:33,  3.04it/s][A
 55%|█████▍    | 121/221 [00:34<00:33,  2.95it/s][A
 55%|█████▌    | 122/221 [00:34<00:32,  3.09it/s][A
 56%|█████▌    | 123/221 [00:34<00:27,  3.51it/s][A
 56%|█████▌    | 124/221 [00:35<00:34,  2.81it/s][A
 57%|█████▋    | 125/221 [00:35<00:39,  2.43it/s][A
 57%|█████▋    | 126/221 [00:35<00:33,  2.87it/s][A
 57%|█████▋    | 127/221 [00:36<00:38,  2.43it/s][A
 58%|█████▊    | 128/221 [00:36<00:32,  2.83it/s][A
 58%|█████▊    | 129/221 [00:36<00:26,  3.45it/s][A
 59%|█████▉    | 130/221 [00:36<00:23,  3.85it/s][A
 59%|█████▉    | 131/221 [00:37<00:22,  4.04it/s][A
 60%|█████▉    | 132/221 [00:37<00:28,  3.11it/s][A
 60%|██████    | 133/221 [00:37<00:30,  2.92it/s][A
 61%|██████    | 134/221 [00:38<00:36,  2.40it/s][A
 61%|██████    | 135/221 [00:38<00:30,  2.85it/s][A
 62%|██████▏   | 136/221 [00:39<00:29,  2.90it/s][A
 62%|██████▏   | 137/221 [00:39<00:25,  3.26it/s][A
 62%|██████▏   | 138/221 [00:39<00:23,  3.49it/s][A
 63%|██████▎   | 139/221 [00:39<00:25,  3.24it/s][A
 63%|██████▎   | 140/221 [00:40<00:22,  3.53it/s][A
 64%|██████▍   | 141/221 [00:40<00:21,  3.70it/s][A
 64%|██████▍   | 142/221 [00:40<00:20,  3.88it/s][A
 65%|██████▍   | 143/221 [00:40<00:21,  3.63it/s][A
 65%|██████▌   | 144/221 [00:41<00:19,  4.03it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.35it/s][A
 66%|██████▌   | 146/221 [00:41<00:22,  3.40it/s][A
 67%|██████▋   | 147/221 [00:41<00:19,  3.89it/s][A
 67%|██████▋   | 148/221 [00:42<00:24,  3.00it/s][A
 67%|██████▋   | 149/221 [00:42<00:21,  3.35it/s][A
 68%|██████▊   | 150/221 [00:42<00:19,  3.58it/s][A
 68%|██████▊   | 151/221 [00:43<00:32,  2.12it/s][A
 69%|██████▉   | 152/221 [00:44<00:35,  1.95it/s][A
 69%|██████▉   | 153/221 [00:44<00:29,  2.29it/s][A
 70%|██████▉   | 154/221 [00:44<00:25,  2.60it/s][A
 70%|███████   | 155/221 [00:45<00:23,  2.82it/s][A
 71%|███████   | 156/221 [00:45<00:22,  2.94it/s][A
 71%|███████   | 157/221 [00:45<00:20,  3.17it/s][A
 71%|███████▏  | 158/221 [00:46<00:21,  2.92it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.41it/s][A
 72%|███████▏  | 160/221 [00:46<00:20,  3.00it/s][A
 73%|███████▎  | 161/221 [00:46<00:16,  3.62it/s][A
 73%|███████▎  | 162/221 [00:47<00:13,  4.23it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.30it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.68it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.95it/s][A
 75%|███████▌  | 166/221 [00:48<00:13,  4.12it/s][A
 76%|███████▌  | 167/221 [00:48<00:11,  4.87it/s][A
 76%|███████▌  | 168/221 [00:48<00:11,  4.55it/s][A
 77%|███████▋  | 170/221 [00:48<00:11,  4.42it/s][A
 77%|███████▋  | 171/221 [00:49<00:16,  3.12it/s][A
 78%|███████▊  | 172/221 [00:49<00:14,  3.45it/s][A
 78%|███████▊  | 173/221 [00:50<00:15,  3.12it/s][A
 79%|███████▊  | 174/221 [00:50<00:12,  3.84it/s][A
 79%|███████▉  | 175/221 [00:50<00:12,  3.54it/s][A
 80%|███████▉  | 176/221 [00:50<00:11,  4.04it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.73it/s][A
 81%|████████  | 178/221 [00:51<00:15,  2.75it/s][A
 81%|████████  | 179/221 [00:51<00:14,  2.87it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.60it/s][A
 82%|████████▏ | 181/221 [00:52<00:10,  3.91it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.09it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.75it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.68it/s][A
 84%|████████▍ | 186/221 [00:53<00:08,  4.21it/s][A
 85%|████████▍ | 187/221 [00:53<00:07,  4.83it/s][A
 85%|████████▌ | 188/221 [00:53<00:06,  5.06it/s][A
 86%|████████▌ | 189/221 [00:53<00:06,  5.16it/s][A
 86%|████████▌ | 190/221 [00:54<00:08,  3.77it/s][A
 86%|████████▋ | 191/221 [00:54<00:06,  4.47it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.97it/s][A
 87%|████████▋ | 193/221 [00:55<00:07,  3.79it/s][A
 88%|████████▊ | 194/221 [00:55<00:08,  3.35it/s][A
 88%|████████▊ | 195/221 [00:55<00:07,  3.56it/s][A
 89%|████████▊ | 196/221 [00:56<00:08,  2.84it/s][A
 89%|████████▉ | 197/221 [00:56<00:10,  2.34it/s][A
 90%|████████▉ | 198/221 [00:57<00:09,  2.45it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  3.07it/s][A
 90%|█████████ | 200/221 [00:57<00:05,  3.75it/s][A
 91%|█████████ | 201/221 [00:57<00:04,  4.11it/s][A
 91%|█████████▏| 202/221 [00:57<00:04,  4.16it/s][A
 92%|█████████▏| 203/221 [00:58<00:04,  4.12it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.88it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.97it/s][A
 93%|█████████▎| 206/221 [00:59<00:05,  2.96it/s][A
 94%|█████████▎| 207/221 [00:59<00:04,  3.29it/s][A
 94%|█████████▍| 208/221 [00:59<00:04,  3.14it/s][A
 95%|█████████▍| 209/221 [01:00<00:04,  2.98it/s][A
 95%|█████████▌| 210/221 [01:00<00:03,  3.61it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  3.71it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  3.40it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.60it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  2.79it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.70it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  2.88it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:03<00:01,  2.58it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.79it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.38it/s][A
100%|██████████| 221/221 [01:04<00:00,  2.99it/s][A100%|██████████| 221/221 [01:04<00:00,  3.45it/s]
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'area_r1': 41.6, 'area_recall': '41.6/69.3/78.5', 'area_ravg': 63.2}
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'forward_r1': 37.8, 'forward_recall': '37.8/66.1/76.0', 'forward_ravg': 60.0}
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'area_video_r1': 38.3, 'area_video_recall': '38.3/65.7/77.4', 'area_video_ravg': 60.5}
09/17/2024 01:30:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 199=======

09/17/2024 01:30:31 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/66.5/76.5', 'area_video_ravg': 60.5}
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'area_video_r1': 51.7, 'area_video_recall': '51.7/75.6/82.7', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/70.2/79.6', 'area_video_back_ravg': 66.4}
09/17/2024 01:30:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 249=======

09/17/2024 01:30:31 - INFO - __main__ -   {'area_video_r1': 51.7, 'area_video_recall': '51.7/75.6/82.7', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/70.2/79.6', 'area_video_back_ravg': 66.4}
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 01:30:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 01:30:31 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 01:30:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 249--===========

09/17/2024 01:30:31 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.2/81.8', 'video_ravg': 69.5}
09/17/2024 01:30:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 249=======

09/17/2024 01:30:31 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.2/81.8', 'video_ravg': 69.5}
09/17/2024 01:31:07 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.013654395937919617, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 2.1537528038024902, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.179959535598755, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 4.347366809844971}
  9%|▊         | 250/2910 [1:35:10<100:31:17, 136.04s/it]  9%|▊         | 251/2910 [1:35:14<71:11:36, 96.39s/it]  09/17/2024 01:31:14 - INFO - __main__ -   current idx hvDXjC-_7uo.11 from finetune_area returns wrong image/video, use 17857 instead.
[h264 @ 0x5556342cd480] mmco: unref short failure
[h264 @ 0x563492689780] mmco: unref short failure
  9%|▊         | 252/2910 [1:35:18<50:43:07, 68.69s/it][h264 @ 0x555616e602c0] mmco: unref short failure
[h264 @ 0x555616e602c0] mmco: unref short failure
09/17/2024 01:31:21 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 145948 instead.
09/17/2024 01:31:22 - INFO - __main__ -   current idx 5cCEw9Tageg.3 from finetune_area returns wrong image/video, use 141833 instead.
  9%|▊         | 253/2910 [1:35:23<36:36:25, 49.60s/it][h264 @ 0x558588b9b0c0] mmco: unref short failure
  9%|▊         | 254/2910 [1:35:28<26:38:55, 36.12s/it]  9%|▉         | 255/2910 [1:35:33<19:44:21, 26.77s/it]  9%|▉         | 256/2910 [1:35:39<15:05:18, 20.47s/it][h264 @ 0x55766a8a4a00] mmco: unref short failure
[h264 @ 0x55766a8a4a00] mmco: unref short failure
  9%|▉         | 257/2910 [1:35:46<12:09:15, 16.49s/it]  9%|▉         | 258/2910 [1:35:52<9:52:52, 13.41s/it] [h264 @ 0x5634953825c0] mmco: unref short failure
[h264 @ 0x5634953825c0] mmco: unref short failure
[h264 @ 0x557682c40a40] mmco: unref short failure
[h264 @ 0x557682c40a40] mmco: unref short failure
[h264 @ 0x5585861d8700] mmco: unref short failure
[h264 @ 0x5585861d8700] mmco: unref short failure
[h264 @ 0x55766b5ade80] mmco: unref short failure
[h264 @ 0x55766b5ade80] mmco: unref short failure
  9%|▉         | 259/2910 [1:35:58<8:05:43, 10.99s/it][h264 @ 0x55562e713d40] mmco: unref short failure
[h264 @ 0x55562e713d40] mmco: unref short failure
[h264 @ 0x55562e713d40] mmco: unref short failure
[h264 @ 0x55562e713d40] mmco: unref short failure
  9%|▉         | 260/2910 [1:36:03<6:52:06,  9.33s/it][h264 @ 0x55859d411240] mmco: unref short failure
[h264 @ 0x563494ed6880] mmco: unref short failure
[h264 @ 0x563494ed6880] mmco: unref short failure
  9%|▉         | 261/2910 [1:36:09<6:13:02,  8.45s/it][h264 @ 0x56349ac91e80] mmco: unref short failure
  9%|▉         | 262/2910 [1:36:16<5:42:12,  7.75s/it][h264 @ 0x563495b4bb00] mmco: unref short failure
[h264 @ 0x563495b4bb00] mmco: unref short failure
  9%|▉         | 263/2910 [1:36:23<5:32:31,  7.54s/it][h264 @ 0x55561793d300] mmco: unref short failure
  9%|▉         | 264/2910 [1:36:30<5:29:05,  7.46s/it][h264 @ 0x555617cf1740] mmco: unref short failure
[h264 @ 0x555617cf1740] mmco: unref short failure
  9%|▉         | 265/2910 [1:36:36<5:11:47,  7.07s/it][h264 @ 0x55561b7a8440] mmco: unref short failure
[h264 @ 0x55766e975fc0] mmco: unref short failure
[h264 @ 0x55766e975fc0] mmco: unref short failure
[h264 @ 0x55562e714140] mmco: unref short failure
[h264 @ 0x55562e714140] mmco: unref short failure
09/17/2024 01:32:45 - INFO - __main__ -   current idx 8XNjcDFNZzM.6 from finetune_area returns wrong image/video, use 85484 instead.
[h264 @ 0x55766f4937c0] mmco: unref short failure
[h264 @ 0x557689c02300] mmco: unref short failure
[h264 @ 0x557689c02300] mmco: unref short failure
[h264 @ 0x5576841dd740] mmco: unref short failure
[h264 @ 0x5576841dd740] mmco: unref short failure
[h264 @ 0x557673a0b340] mmco: unref short failure
[h264 @ 0x55767bbc94c0] mmco: unref short failure
[h264 @ 0x55767bbc94c0] mmco: unref short failure
[h264 @ 0x5634a2c8d0c0] mmco: unref short failure
[h264 @ 0x5634a2c8d0c0] mmco: unref short failure
[h264 @ 0x5634a2c8d0c0] mmco: unref short failure
  9%|▉         | 266/2910 [1:37:14<12:02:50, 16.40s/it][h264 @ 0x56349cef7e40] mmco: unref short failure
  9%|▉         | 267/2910 [1:37:24<10:31:48, 14.34s/it][h264 @ 0x55561aaa4940] mmco: unref short failure
[h264 @ 0x55561aaa4940] mmco: unref short failure
[h264 @ 0x5634ad2dbc00] mmco: unref short failure
[h264 @ 0x5585921e3d00] mmco: unref short failure
[h264 @ 0x5585921e3d00] mmco: unref short failure
  9%|▉         | 268/2910 [1:37:42<11:28:51, 15.64s/it][h264 @ 0x5634910dd0c0] mmco: unref short failure
  9%|▉         | 269/2910 [1:37:57<11:13:10, 15.29s/it][h264 @ 0x55859d411240] mmco: unref short failure
[h264 @ 0x55859d411240] mmco: unref short failure
  9%|▉         | 270/2910 [1:38:03<9:11:16, 12.53s/it]   9%|▉         | 271/2910 [1:38:09<7:50:08, 10.69s/it]  9%|▉         | 272/2910 [1:38:17<7:15:18,  9.90s/it][h264 @ 0x56349d432a00] mmco: unref short failure
  9%|▉         | 273/2910 [1:38:24<6:27:38,  8.82s/it][h264 @ 0x55561a059e00] mmco: unref short failure
[h264 @ 0x56349cf9ffc0] mmco: unref short failure
[h264 @ 0x56349cf9ffc0] mmco: unref short failure
[h264 @ 0x555632800800] mmco: unref short failure
[h264 @ 0x555632800800] mmco: unref short failure
[h264 @ 0x5634a81f7700] mmco: unref short failure
[h264 @ 0x5585972952c0] mmco: unref short failure
[h264 @ 0x5585972952c0] mmco: unref short failure
not have audios xrsV4ybwavc.40
[h264 @ 0x55562fb3d080] mmco: unref short failure
[h264 @ 0x55857ec85240] mmco: unref short failure
[h264 @ 0x55857ec85240] mmco: unref short failure
[h264 @ 0x557675a9c300] mmco: unref short failure
[h264 @ 0x557675a9c300] mmco: unref short failure
[h264 @ 0x558598702f40] mmco: unref short failure
[h264 @ 0x558598702f40] mmco: unref short failure
[h264 @ 0x558594cd0840] mmco: unref short failure
[h264 @ 0x5634922bb3c0] mmco: unref short failure
09/17/2024 01:35:23 - INFO - __main__ -   current idx TXiTVBVNPyE.67 from finetune_area returns wrong image/video, use 54888 instead.
[h264 @ 0x555618eaf480] mmco: unref short failure
[h264 @ 0x5634a454fc80] mmco: unref short failure
  9%|▉         | 274/2910 [1:39:43<21:59:39, 30.04s/it][h264 @ 0x55767c470580] mmco: unref short failure
[h264 @ 0x55767c470580] mmco: unref short failure
[h264 @ 0x55767c470580] mmco: unref short failure
[h264 @ 0x55767c470580] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x5576713bd440] mmco: unref short failure
[h264 @ 0x558591d72340] mmco: unref short failure
  9%|▉         | 275/2910 [1:40:00<18:56:45, 25.88s/it][h264 @ 0x55767fef36c0] mmco: unref short failure
[h264 @ 0x55767fef36c0] mmco: unref short failure
[h264 @ 0x55767fef36c0] mmco: unref short failure
[h264 @ 0x55767fef36c0] mmco: unref short failure
[h264 @ 0x55767fef36c0] mmco: unref short failure
[h264 @ 0x55858a01e380] mmco: unref short failure
[h264 @ 0x55858a01e380] mmco: unref short failure
[h264 @ 0x56348d280100] mmco: unref short failure
  9%|▉         | 276/2910 [1:40:13<16:09:58, 22.10s/it][h264 @ 0x55561b488bc0] mmco: unref short failure
 10%|▉         | 277/2910 [1:40:29<14:57:07, 20.44s/it][h264 @ 0x55563152ec00] mmco: unref short failure
[h264 @ 0x55563152ec00] mmco: unref short failure
[h264 @ 0x558592033fc0] mmco: unref short failure
 10%|▉         | 278/2910 [1:40:36<11:50:51, 16.21s/it][h264 @ 0x55767f2eec00] mmco: unref short failure
[h264 @ 0x55767f2eec00] mmco: unref short failure
 10%|▉         | 279/2910 [1:40:41<9:32:22, 13.05s/it] [h264 @ 0x56349d98ea00] mmco: unref short failure
[h264 @ 0x55767befba00] mmco: unref short failure
 10%|▉         | 280/2910 [1:40:54<9:24:52, 12.89s/it][h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x55766c1da780] mmco: unref short failure
[h264 @ 0x56348d724180] mmco: unref short failure
[h264 @ 0x56348d724180] mmco: unref short failure
[h264 @ 0x56348d724180] mmco: unref short failure
[h264 @ 0x56348d724180] mmco: unref short failure
 10%|▉         | 281/2910 [1:41:00<7:55:46, 10.86s/it][h264 @ 0x557687359180] mmco: unref short failure
[h264 @ 0x5634a4d31f40] mmco: unref short failure
[h264 @ 0x55859806dfc0] mmco: unref short failure
[h264 @ 0x55859806dfc0] mmco: unref short failure
09/17/2024 01:37:18 - INFO - __main__ -   current idx 4VH9UPwnHCQ.1 from finetune_area returns wrong image/video, use 64300 instead.
[h264 @ 0x558588e49640] mmco: unref short failure
[h264 @ 0x558588e49640] mmco: unref short failure
[h264 @ 0x56348e2ab400] mmco: unref short failure
[h264 @ 0x56348e2ab400] mmco: unref short failure
[h264 @ 0x55859cfdfd80] mmco: unref short failure
[h264 @ 0x557673a0acc0] mmco: unref short failure
[h264 @ 0x55858803ef40] mmco: unref short failure
[h264 @ 0x55858803ef40] mmco: unref short failure
[h264 @ 0x55858803ef40] mmco: unref short failure
[h264 @ 0x55858803ef40] mmco: unref short failure
09/17/2024 01:37:36 - INFO - __main__ -   current idx aKaIctkC1IU.24 from finetune_area returns wrong image/video, use 39049 instead.
[h264 @ 0x5634a81f7700] mmco: unref short failure
[h264 @ 0x5634a81f7700] mmco: unref short failure
[h264 @ 0x5634a81f7700] mmco: unref short failure
[h264 @ 0x5634a81f7700] mmco: unref short failure
[h264 @ 0x5634ad2e8d40] mmco: unref short failure
[h264 @ 0x558582631e40] mmco: unref short failure
[h264 @ 0x558582631e40] mmco: unref short failure
[h264 @ 0x55858de62e00] mmco: unref short failure
[h264 @ 0x55858f5e1800] mmco: unref short failure
[h264 @ 0x55858f5e1800] mmco: unref short failure
[h264 @ 0x55562454e680] mmco: unref short failure
[h264 @ 0x557680114a00] mmco: unref short failure
[h264 @ 0x557680114a00] mmco: unref short failure
 10%|▉         | 282/2910 [1:42:10<20:51:55, 28.58s/it][h264 @ 0x557672ad1880] mmco: unref short failure
[h264 @ 0x557672ad1880] mmco: unref short failure
[h264 @ 0x55857f0341c0] mmco: unref short failure
[h264 @ 0x55859acba000] mmco: unref short failure
[h264 @ 0x55859acba000] mmco: unref short failure
[h264 @ 0x557675241340] mmco: unref short failure
[h264 @ 0x557675241340] mmco: unref short failure
[h264 @ 0x55766af49c00] mmco: unref short failure
 10%|▉         | 283/2910 [1:42:32<19:19:50, 26.49s/it][h264 @ 0x55766bb61180] mmco: unref short failure
[h264 @ 0x55766bb61180] mmco: unref short failure
 10%|▉         | 284/2910 [1:42:43<16:04:02, 22.03s/it][h264 @ 0x558582632240] mmco: unref short failure
[h264 @ 0x558582632240] mmco: unref short failure
[h264 @ 0x5556189b0e80] mmco: unref short failure
[h264 @ 0x5556189b0e80] mmco: unref short failure
[h264 @ 0x5585805cc480] mmco: unref short failure
[h264 @ 0x558598634800] mmco: unref short failure
 10%|▉         | 285/2910 [1:43:04<15:43:14, 21.56s/it] 10%|▉         | 286/2910 [1:43:10<12:23:46, 17.01s/it][h264 @ 0x5634ae9b12c0] mmco: unref short failure
[h264 @ 0x5634ae9b12c0] mmco: unref short failure
 10%|▉         | 287/2910 [1:43:16<9:53:53, 13.58s/it] [h264 @ 0x55767724ff40] mmco: unref short failure
[h264 @ 0x55767724ff40] mmco: unref short failure
[h264 @ 0x563495c7ee40] mmco: unref short failure
[h264 @ 0x55561a03fd80] mmco: unref short failure
[h264 @ 0x55561a03fd80] mmco: unref short failure
 10%|▉         | 288/2910 [1:43:22<8:12:48, 11.28s/it][h264 @ 0x5634905d4340] mmco: unref short failure
09/17/2024 01:39:22 - INFO - __main__ -   current idx edpFNTpJidw.6 from finetune_area returns wrong image/video, use 33504 instead.
[h264 @ 0x56349f18f780] mmco: unref short failure
 10%|▉         | 289/2910 [1:43:28<7:06:36,  9.77s/it][h264 @ 0x55561b78f340] mmco: unref short failure
[h264 @ 0x55561b78f340] mmco: unref short failure
[h264 @ 0x55561b071200] mmco: unref short failure
[h264 @ 0x5585808fc5c0] mmco: unref short failure
[h264 @ 0x5585808fc5c0] mmco: unref short failure
[h264 @ 0x5556333e5c80] mmco: unref short failure
[h264 @ 0x5556333e5c80] mmco: unref short failure
[h264 @ 0x558598828940] mmco: unref short failure
[h264 @ 0x558598828940] mmco: unref short failure
[h264 @ 0x55857ee1cf40] mmco: unref short failure
[h264 @ 0x55857ee1cf40] mmco: unref short failure
[h264 @ 0x56348d686080] mmco: unref short failure
[h264 @ 0x557670130b00] mmco: unref short failure
[h264 @ 0x5585a2f2af00] mmco: unref short failure
[h264 @ 0x5634aba30c00] mmco: unref short failure
[h264 @ 0x5634aba30c00] mmco: unref short failure
[h264 @ 0x55858803ed40] mmco: unref short failure
[h264 @ 0x563491496040] mmco: unref short failure
[h264 @ 0x563491496040] mmco: unref short failure
[h264 @ 0x557688917740] mmco: unref short failure
[h264 @ 0x55767f94a1c0] mmco: unref short failure
[h264 @ 0x55767f94a1c0] mmco: unref short failure
[h264 @ 0x55561d12b8c0] mmco: unref short failure
[h264 @ 0x55561d12b8c0] mmco: unref short failure
[h264 @ 0x5634950ce980] mmco: unref short failure
[h264 @ 0x5634950ce980] mmco: unref short failure
[h264 @ 0x55563a358480] mmco: unref short failure
 10%|▉         | 290/2910 [1:44:41<20:54:53, 28.74s/it][h264 @ 0x558598828940] mmco: unref short failure
[h264 @ 0x558598828940] mmco: unref short failure
09/17/2024 01:40:46 - INFO - __main__ -   current idx Wirilsgk0qk.51 from finetune_area returns wrong image/video, use 128368 instead.
[h264 @ 0x55767b2a4440] mmco: unref short failure
[h264 @ 0x55767b2a4440] mmco: unref short failure
[h264 @ 0x5585a27b32c0] mmco: unref short failure
 10%|█         | 291/2910 [1:45:13<21:41:06, 29.81s/it] 10%|█         | 292/2910 [1:45:19<16:27:59, 22.64s/it][h264 @ 0x5634920b1540] mmco: unref short failure
[h264 @ 0x555632eda200] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
[h264 @ 0x55767de0e640] mmco: unref short failure
 10%|█         | 293/2910 [1:45:34<14:42:16, 20.23s/it][h264 @ 0x5634ae21b700] mmco: unref short failure
[h264 @ 0x5634ae21b700] mmco: unref short failure
 10%|█         | 294/2910 [1:45:40<11:45:20, 16.18s/it][h264 @ 0x5576794bf700] mmco: unref short failure
[h264 @ 0x5585907a3ac0] mmco: unref short failure
[h264 @ 0x5585907a3ac0] mmco: unref short failure
 10%|█         | 295/2910 [1:45:47<9:36:28, 13.23s/it] 09/17/2024 01:41:52 - INFO - __main__ -   current idx -H9yXYU9VP4.53 from finetune_area returns wrong image/video, use 143939 instead.
 10%|█         | 296/2910 [1:45:53<8:07:36, 11.19s/it][h264 @ 0x5634ae089740] mmco: unref short failure
[h264 @ 0x5634ae089740] mmco: unref short failure
[h264 @ 0x557683b6de80] mmco: unref short failure
[h264 @ 0x557683b6de80] mmco: unref short failure
 10%|█         | 297/2910 [1:45:59<7:01:07,  9.67s/it][h264 @ 0x563491496040] mmco: unref short failure
[h264 @ 0x558588e1c1c0] mmco: unref short failure
[h264 @ 0x5556248df680] mmco: unref short failure
[h264 @ 0x558594298900] mmco: unref short failure
[h264 @ 0x55562e702740] mmco: unref short failure
[h264 @ 0x55562e702740] mmco: unref short failure
[h264 @ 0x55766a8a4c00] mmco: unref short failure
[h264 @ 0x55766a8a4c00] mmco: unref short failure
[h264 @ 0x55561b58ef40] mmco: unref short failure
[h264 @ 0x55561b58ef40] mmco: unref short failure
[h264 @ 0x55561b58ef40] mmco: unref short failure
[h264 @ 0x55561b58ef40] mmco: unref short failure
[h264 @ 0x56348e2ab400] mmco: unref short failure
[h264 @ 0x56348e2ab400] mmco: unref short failure
[h264 @ 0x5576860c3000] mmco: unref short failure
[h264 @ 0x5585864256c0] mmco: unref short failure
[h264 @ 0x5585864256c0] mmco: unref short failure
[h264 @ 0x5585864256c0] mmco: unref short failure
[h264 @ 0x5585864256c0] mmco: unref short failure
[h264 @ 0x55767d118800] mmco: unref short failure
[h264 @ 0x558582829880] mmco: unref short failure
[h264 @ 0x55562b2bb180] mmco: unref short failure
[h264 @ 0x55857e46ba40] mmco: unref short failure
 10%|█         | 298/2910 [1:47:08<19:46:52, 27.26s/it][h264 @ 0x5634ada2b080] mmco: unref short failure
[h264 @ 0x5634ada2b080] mmco: unref short failure
[h264 @ 0x55767d35afc0] mmco: unref short failure
[h264 @ 0x55767d35afc0] mmco: unref short failure
[h264 @ 0x5585967be900] mmco: unref short failure
[h264 @ 0x5585967be900] mmco: unref short failure
[h264 @ 0x5556337ddfc0] mmco: unref short failure
[h264 @ 0x5556337ddfc0] mmco: unref short failure
 10%|█         | 299/2910 [1:47:31<19:02:12, 26.25s/it]09/17/2024 01:43:30 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 01:43:30 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5634a8fca5c0] mmco: unref short failure
[h264 @ 0x5634a8fca5c0] mmco: unref short failure
09/17/2024 01:43:40 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 133852 instead.
[h264 @ 0x55766ad3cb40] mmco: unref short failure
[h264 @ 0x55766ad3cb40] mmco: unref short failure
[h264 @ 0x557689d1f8c0] mmco: unref short failure
[h264 @ 0x558588e2e6c0] mmco: unref short failure
[h264 @ 0x558588e2e6c0] mmco: unref short failure
[h264 @ 0x557673a0acc0] mmco: unref short failure
[h264 @ 0x557673a0acc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55563627adc0] mmco: unref short failure
[h264 @ 0x55563627adc0] mmco: unref short failure
[h264 @ 0x557689c02500] mmco: unref short failure
[h264 @ 0x557689c02500] mmco: unref short failure
[h264 @ 0x55766af48f00] mmco: unref short failure
[h264 @ 0x55766af48f00] mmco: unref short failure
09/17/2024 01:45:00 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 109565 instead.
[h264 @ 0x563491361580] mmco: unref short failure
[h264 @ 0x563491361580] mmco: unref short failure
[h264 @ 0x5585838db140] mmco: unref short failure
[h264 @ 0x5556361662c0] mmco: unref short failure
[h264 @ 0x55562bf1b780] mmco: unref short failure
[h264 @ 0x55562bf1b780] mmco: unref short failure
[h264 @ 0x55767248b2c0] mmco: unref short failure
[h264 @ 0x55857e98d740] mmco: unref short failure
[h264 @ 0x55857e98d740] mmco: unref short failure
[h264 @ 0x55857e98d740] mmco: unref short failure
[h264 @ 0x55857e98d740] mmco: unref short failure
09/17/2024 01:45:14 - INFO - __main__ -   current idx 1Ubj2kIiKMw.71 from finetune_area returns wrong image/video, use 105471 instead.
[h264 @ 0x55859214fd80] mmco: unref short failure
[h264 @ 0x56348fb37480] mmco: unref short failure
[h264 @ 0x5576756fc740] mmco: unref short failure
[h264 @ 0x5576756fc740] mmco: unref short failure
[h264 @ 0x558580bdd400] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:08,  1.71it/s][A
  1%|          | 2/221 [00:01<01:47,  2.03it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.44it/s][A
  2%|▏         | 4/221 [00:01<01:08,  3.16it/s][A
  2%|▏         | 5/221 [00:01<00:53,  4.07it/s][A
  3%|▎         | 6/221 [00:01<00:45,  4.78it/s][A
  3%|▎         | 7/221 [00:02<00:48,  4.38it/s][A
  4%|▎         | 8/221 [00:02<00:47,  4.47it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.65it/s][A
  5%|▍         | 10/221 [00:03<01:10,  2.98it/s][A
  5%|▍         | 11/221 [00:03<00:57,  3.65it/s][A[h264 @ 0x558587019780] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:09,  3.01it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.31it/s][A
  6%|▋         | 14/221 [00:04<00:58,  3.54it/s][A
  7%|▋         | 15/221 [00:04<00:54,  3.79it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.34it/s][A
  8%|▊         | 17/221 [00:05<01:12,  2.81it/s][A[h264 @ 0x55563627afc0] mmco: unref short failure
[h264 @ 0x55563627afc0] mmco: unref short failure

  8%|▊         | 18/221 [00:05<01:10,  2.89it/s][A
  9%|▊         | 19/221 [00:05<00:57,  3.54it/s][A
  9%|▉         | 20/221 [00:05<00:47,  4.25it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.02it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.35it/s][A
 10%|█         | 23/221 [00:06<00:51,  3.87it/s][A
 11%|█         | 24/221 [00:06<00:52,  3.73it/s][A
 11%|█▏        | 25/221 [00:07<00:54,  3.61it/s][A
 12%|█▏        | 26/221 [00:07<01:01,  3.15it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.45it/s][A
 13%|█▎        | 29/221 [00:08<00:54,  3.50it/s][A
 14%|█▎        | 30/221 [00:08<00:53,  3.55it/s][A
 14%|█▍        | 31/221 [00:09<00:53,  3.57it/s][A
 15%|█▍        | 33/221 [00:09<00:38,  4.82it/s][A
 16%|█▌        | 35/221 [00:09<00:36,  5.05it/s][A
 16%|█▋        | 36/221 [00:10<00:46,  3.95it/s][A
 17%|█▋        | 37/221 [00:10<00:55,  3.30it/s][A
 17%|█▋        | 38/221 [00:11<01:06,  2.74it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.27it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:11<00:49,  3.66it/s][A
 19%|█▉        | 42/221 [00:12<01:39,  1.80it/s][A
 19%|█▉        | 43/221 [00:13<01:19,  2.25it/s][A
 20%|█▉        | 44/221 [00:13<01:03,  2.79it/s][A
 20%|██        | 45/221 [00:13<01:20,  2.18it/s][A
 21%|██        | 46/221 [00:14<01:22,  2.13it/s][A
 21%|██▏       | 47/221 [00:15<01:32,  1.88it/s][A
 22%|██▏       | 48/221 [00:15<01:15,  2.28it/s][A
 22%|██▏       | 49/221 [00:15<01:08,  2.51it/s][A
 23%|██▎       | 50/221 [00:15<00:56,  3.04it/s][A
 23%|██▎       | 51/221 [00:15<00:44,  3.81it/s][A
 24%|██▎       | 52/221 [00:16<00:40,  4.19it/s][A
 24%|██▍       | 53/221 [00:16<00:37,  4.48it/s][A
 24%|██▍       | 54/221 [00:17<01:24,  1.99it/s][A
 25%|██▍       | 55/221 [00:17<01:19,  2.09it/s][A
 25%|██▌       | 56/221 [00:18<01:04,  2.58it/s][A
 26%|██▌       | 57/221 [00:18<00:59,  2.74it/s][A
 26%|██▌       | 58/221 [00:18<00:48,  3.38it/s][A
 27%|██▋       | 59/221 [00:18<00:44,  3.68it/s][A
 27%|██▋       | 60/221 [00:20<01:34,  1.71it/s][A
 28%|██▊       | 61/221 [00:20<01:20,  1.98it/s][A
 28%|██▊       | 62/221 [00:20<01:13,  2.17it/s][A
 29%|██▊       | 63/221 [00:20<00:56,  2.79it/s][A
 29%|██▉       | 64/221 [00:21<00:55,  2.82it/s][A
 29%|██▉       | 65/221 [00:21<00:50,  3.06it/s][A
 30%|██▉       | 66/221 [00:22<01:10,  2.20it/s][A[h264 @ 0x5634ae606980] mmco: unref short failure
[h264 @ 0x5634ae606980] mmco: unref short failure
[h264 @ 0x5634ae606980] mmco: unref short failure

 30%|███       | 67/221 [00:22<01:06,  2.33it/s][A
 31%|███       | 68/221 [00:22<00:53,  2.87it/s][A
 31%|███       | 69/221 [00:23<00:56,  2.70it/s][A
 32%|███▏      | 70/221 [00:23<00:47,  3.18it/s][A
 32%|███▏      | 71/221 [00:23<00:55,  2.71it/s][A
 33%|███▎      | 72/221 [00:24<01:00,  2.48it/s][A[h264 @ 0x558583cd5a80] mmco: unref short failure

 33%|███▎      | 73/221 [00:24<01:05,  2.27it/s][A
 33%|███▎      | 74/221 [00:25<00:52,  2.82it/s][A
 34%|███▍      | 75/221 [00:25<00:50,  2.92it/s][A
 34%|███▍      | 76/221 [00:25<00:43,  3.31it/s][A
 35%|███▍      | 77/221 [00:25<00:49,  2.90it/s][A[h264 @ 0x5585994468c0] mmco: unref short failure

 35%|███▌      | 78/221 [00:26<00:41,  3.46it/s][A
 36%|███▌      | 79/221 [00:27<01:05,  2.18it/s][A
 36%|███▌      | 80/221 [00:27<00:55,  2.54it/s][A
 37%|███▋      | 81/221 [00:27<00:47,  2.96it/s][A
 37%|███▋      | 82/221 [00:27<00:54,  2.57it/s][A
 38%|███▊      | 83/221 [00:28<00:51,  2.68it/s][A
 38%|███▊      | 84/221 [00:28<00:49,  2.77it/s][A
 39%|███▉      | 86/221 [00:28<00:36,  3.66it/s][A
 39%|███▉      | 87/221 [00:29<00:57,  2.33it/s][A
 40%|███▉      | 88/221 [00:30<01:13,  1.82it/s][A[h264 @ 0x557677276280] mmco: unref short failure

 40%|████      | 89/221 [00:31<01:10,  1.88it/s][A
 41%|████      | 90/221 [00:31<01:05,  2.01it/s][A
 41%|████      | 91/221 [00:31<00:52,  2.46it/s][A
 42%|████▏     | 92/221 [00:32<00:49,  2.60it/s][A
 42%|████▏     | 93/221 [00:32<00:48,  2.66it/s][A
 43%|████▎     | 94/221 [00:32<00:45,  2.80it/s][A
 43%|████▎     | 95/221 [00:33<00:40,  3.09it/s][A
 43%|████▎     | 96/221 [00:33<00:46,  2.67it/s][A
 44%|████▍     | 97/221 [00:33<00:41,  2.96it/s][A[h264 @ 0x5585962c3500] mmco: unref short failure

 44%|████▍     | 98/221 [00:34<00:46,  2.66it/s][A09/17/2024 01:46:27 - INFO - __main__ -   current idx 0mdFhko5-lk.77 from finetune_area returns wrong image/video, use 30674 instead.

 45%|████▍     | 99/221 [00:34<00:44,  2.72it/s][A
 45%|████▌     | 100/221 [00:34<00:41,  2.93it/s][A
 46%|████▌     | 101/221 [00:35<00:38,  3.14it/s][A
 46%|████▌     | 102/221 [00:35<00:40,  2.92it/s][A
 47%|████▋     | 103/221 [00:35<00:32,  3.58it/s][A
 47%|████▋     | 104/221 [00:35<00:29,  4.03it/s][A[h264 @ 0x557684196cc0] mmco: unref short failure
[h264 @ 0x557684196cc0] mmco: unref short failure

 48%|████▊     | 105/221 [00:36<00:33,  3.49it/s][A
 48%|████▊     | 106/221 [00:37<01:00,  1.89it/s][A
 48%|████▊     | 107/221 [00:37<00:48,  2.36it/s][A
 49%|████▉     | 108/221 [00:37<00:42,  2.67it/s][A
 49%|████▉     | 109/221 [00:38<00:38,  2.92it/s][A
 50%|████▉     | 110/221 [00:38<00:37,  2.98it/s][A
 50%|█████     | 111/221 [00:38<00:43,  2.54it/s][A
 51%|█████     | 112/221 [00:39<00:38,  2.86it/s][A
 51%|█████     | 113/221 [00:39<00:37,  2.91it/s][A
 52%|█████▏    | 114/221 [00:39<00:29,  3.68it/s][A
 52%|█████▏    | 115/221 [00:39<00:23,  4.45it/s][A
 52%|█████▏    | 116/221 [00:40<00:54,  1.94it/s][A
 53%|█████▎    | 117/221 [00:41<00:53,  1.95it/s][A
 53%|█████▎    | 118/221 [00:41<00:44,  2.32it/s][A
 54%|█████▍    | 119/221 [00:42<00:43,  2.33it/s][A
 54%|█████▍    | 120/221 [00:42<00:36,  2.74it/s][A
 55%|█████▍    | 121/221 [00:42<00:29,  3.40it/s][A
 55%|█████▌    | 122/221 [00:42<00:28,  3.50it/s][A[h264 @ 0x5585925f4e40] mmco: unref short failure

 56%|█████▌    | 123/221 [00:42<00:24,  3.98it/s][A
 56%|█████▌    | 124/221 [00:43<00:23,  4.04it/s][A
 57%|█████▋    | 125/221 [00:43<00:33,  2.82it/s][A
 57%|█████▋    | 126/221 [00:43<00:28,  3.35it/s][A
 57%|█████▋    | 127/221 [00:44<00:49,  1.90it/s][A
 58%|█████▊    | 128/221 [00:45<00:45,  2.05it/s][A
 58%|█████▊    | 129/221 [00:45<00:36,  2.54it/s][A
 59%|█████▉    | 130/221 [00:45<00:32,  2.76it/s][A
 59%|█████▉    | 131/221 [00:45<00:28,  3.21it/s][A
 60%|█████▉    | 132/221 [00:46<00:41,  2.13it/s][A
 60%|██████    | 133/221 [00:47<00:43,  2.01it/s][A
 61%|██████    | 134/221 [00:47<00:43,  2.00it/s][A
 61%|██████    | 135/221 [00:48<00:37,  2.31it/s][A
 62%|██████▏   | 136/221 [00:48<00:35,  2.36it/s][A
 62%|██████▏   | 137/221 [00:48<00:34,  2.43it/s][A[h264 @ 0x563491361580] mmco: unref short failure
[h264 @ 0x563491361580] mmco: unref short failure

[h264 @ 0x563491361580] mmco: unref short failure
[h264 @ 0x563491361580] mmco: unref short failure
 62%|██████▏   | 138/221 [00:49<00:37,  2.23it/s][A
 63%|██████▎   | 139/221 [00:50<00:41,  1.98it/s][A
 63%|██████▎   | 140/221 [00:50<00:38,  2.08it/s][A
 64%|██████▍   | 141/221 [00:50<00:36,  2.18it/s][A
 64%|██████▍   | 142/221 [00:51<00:34,  2.32it/s][A
 65%|██████▍   | 143/221 [00:51<00:32,  2.43it/s][A
 65%|██████▌   | 144/221 [00:51<00:28,  2.68it/s][A
 66%|██████▌   | 145/221 [00:52<00:22,  3.32it/s][A
 66%|██████▌   | 146/221 [00:52<00:19,  3.93it/s][A
 67%|██████▋   | 147/221 [00:52<00:21,  3.46it/s][A
 67%|██████▋   | 148/221 [00:52<00:22,  3.22it/s][A
 67%|██████▋   | 149/221 [00:53<00:24,  2.96it/s][A
 68%|██████▊   | 150/221 [00:53<00:22,  3.22it/s][A
 68%|██████▊   | 151/221 [00:54<00:27,  2.51it/s][A
 69%|██████▉   | 152/221 [00:55<00:37,  1.85it/s][A
 69%|██████▉   | 153/221 [00:55<00:32,  2.08it/s][A
 70%|██████▉   | 154/221 [00:55<00:27,  2.44it/s][A
 70%|███████   | 155/221 [00:55<00:25,  2.63it/s][A
 71%|███████   | 156/221 [00:56<00:27,  2.36it/s][A
 71%|███████   | 157/221 [00:57<00:33,  1.93it/s][A
 71%|███████▏  | 158/221 [00:57<00:27,  2.31it/s][A
 72%|███████▏  | 159/221 [00:57<00:21,  2.84it/s][A
 72%|███████▏  | 160/221 [00:57<00:20,  2.95it/s][A
 73%|███████▎  | 161/221 [00:58<00:16,  3.60it/s][A
 73%|███████▎  | 162/221 [00:58<00:15,  3.84it/s][A
 74%|███████▍  | 163/221 [00:58<00:16,  3.57it/s][A
 74%|███████▍  | 164/221 [00:59<00:17,  3.22it/s][A
 75%|███████▍  | 165/221 [00:59<00:17,  3.19it/s][A
 75%|███████▌  | 166/221 [00:59<00:19,  2.76it/s][A
 76%|███████▌  | 167/221 [01:00<00:16,  3.25it/s][A[h264 @ 0x563498f6f280] mmco: unref short failure
[h264 @ 0x563498f6f280] mmco: unref short failure
[h264 @ 0x563498f6f280] mmco: unref short failure
[h264 @ 0x563498f6f280] mmco: unref short failure

 76%|███████▌  | 168/221 [01:01<00:29,  1.80it/s][A
 76%|███████▋  | 169/221 [01:01<00:24,  2.10it/s][A
 77%|███████▋  | 170/221 [01:01<00:22,  2.26it/s][A[h264 @ 0x5576733e2540] mmco: unref short failure

 77%|███████▋  | 171/221 [01:02<00:23,  2.17it/s][A
 78%|███████▊  | 172/221 [01:02<00:21,  2.32it/s][A
 78%|███████▊  | 173/221 [01:03<00:21,  2.28it/s][A
 79%|███████▊  | 174/221 [01:03<00:16,  2.81it/s][A
 79%|███████▉  | 175/221 [01:03<00:16,  2.81it/s][A
 80%|███████▉  | 176/221 [01:04<00:16,  2.77it/s][A
 80%|████████  | 177/221 [01:04<00:14,  3.06it/s][A
 81%|████████  | 178/221 [01:04<00:17,  2.44it/s][A
 81%|████████  | 179/221 [01:05<00:17,  2.44it/s][A
 81%|████████▏ | 180/221 [01:05<00:14,  2.85it/s][A
 82%|████████▏ | 181/221 [01:05<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [01:05<00:11,  3.32it/s][A
 83%|████████▎ | 183/221 [01:06<00:12,  3.13it/s][A
 83%|████████▎ | 184/221 [01:06<00:11,  3.27it/s][A
 84%|████████▍ | 186/221 [01:06<00:08,  3.96it/s][A
 85%|████████▍ | 187/221 [01:07<00:10,  3.38it/s][A
 85%|████████▌ | 188/221 [01:07<00:09,  3.58it/s][A
 86%|████████▌ | 189/221 [01:07<00:09,  3.46it/s][A
 86%|████████▌ | 190/221 [01:08<00:11,  2.78it/s][A
 86%|████████▋ | 191/221 [01:08<00:08,  3.44it/s][A[h264 @ 0x55766c41b240] mmco: unref short failure
[h264 @ 0x55766c41b240] mmco: unref short failure

 87%|████████▋ | 192/221 [01:08<00:08,  3.27it/s][A
 88%|████████▊ | 194/221 [01:10<00:13,  1.96it/s][A
 88%|████████▊ | 195/221 [01:10<00:11,  2.30it/s][A
 89%|████████▊ | 196/221 [01:10<00:09,  2.65it/s][A
 89%|████████▉ | 197/221 [01:11<00:08,  2.73it/s][A
 90%|████████▉ | 198/221 [01:11<00:07,  2.97it/s][A
 90%|█████████ | 199/221 [01:11<00:07,  3.07it/s][A
 90%|█████████ | 200/221 [01:12<00:06,  3.40it/s][A
 91%|█████████ | 201/221 [01:12<00:05,  3.64it/s][A
 91%|█████████▏| 202/221 [01:12<00:05,  3.59it/s][A
 92%|█████████▏| 203/221 [01:12<00:05,  3.29it/s][A
 92%|█████████▏| 204/221 [01:13<00:04,  3.50it/s][A
 93%|█████████▎| 205/221 [01:13<00:03,  4.21it/s][A
 93%|█████████▎| 206/221 [01:13<00:04,  3.26it/s][A
 94%|█████████▎| 207/221 [01:13<00:03,  3.75it/s][A
 94%|█████████▍| 208/221 [01:14<00:03,  4.18it/s][A
 95%|█████████▍| 209/221 [01:14<00:03,  3.96it/s][A
 95%|█████████▌| 210/221 [01:14<00:02,  4.62it/s][A[h264 @ 0x563492bb43c0] mmco: unref short failure

 95%|█████████▌| 211/221 [01:14<00:02,  3.60it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  3.48it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  3.72it/s][A[h264 @ 0x558589c89e40] mmco: unref short failure

 97%|█████████▋| 214/221 [01:15<00:02,  2.90it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  3.08it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  2.77it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.59it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.40it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.12it/s][A[h264 @ 0x55859f8a48c0] mmco: unref short failure
[h264 @ 0x55859f8a48c0] mmco: unref short failure
[h264 @ 0x55859f8a48c0] mmco: unref short failure
[h264 @ 0x55859f8a48c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:19<00:00,  1.21it/s][A
100%|██████████| 221/221 [01:20<00:00,  1.56it/s][A100%|██████████| 221/221 [01:20<00:00,  2.76it/s]
[h264 @ 0x5585906dc8c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:07,  3.27it/s][A
  1%|          | 2/221 [00:00<01:07,  3.23it/s][A
  1%|▏         | 3/221 [00:00<01:07,  3.25it/s][A
  2%|▏         | 4/221 [00:01<01:13,  2.94it/s][A
  2%|▏         | 5/221 [00:01<01:11,  3.03it/s][A
  3%|▎         | 6/221 [00:01<01:10,  3.07it/s][A
  3%|▎         | 7/221 [00:02<01:12,  2.96it/s][A
  4%|▎         | 8/221 [00:02<01:10,  3.01it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.12it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.20it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.13it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.21it/s][A
  6%|▌         | 13/221 [00:04<01:04,  3.25it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.27it/s][A09/17/2024 01:47:23 - INFO - __main__ -   current idx hDAA1fIvxDY.2 from finetune_area returns wrong image/video, use 96774 instead.

  7%|▋         | 15/221 [00:04<01:03,  3.23it/s][A
  7%|▋         | 16/221 [00:05<01:03,  3.21it/s][A
  8%|▊         | 17/221 [00:05<01:03,  3.21it/s][A
  8%|▊         | 18/221 [00:05<01:02,  3.24it/s][A
  9%|▊         | 19/221 [00:06<01:02,  3.21it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.27it/s][A[h264 @ 0x55561a2a9600] mmco: unref short failure
[h264 @ 0x55561a2a9600] mmco: unref short failure
[h264 @ 0x55561a2a9600] mmco: unref short failure
[h264 @ 0x55561a2a9600] mmco: unref short failure

 10%|▉         | 21/221 [00:06<01:00,  3.31it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.29it/s][A
 10%|█         | 23/221 [00:07<01:00,  3.27it/s][A
 11%|█         | 24/221 [00:07<01:00,  3.26it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:08<00:59,  3.25it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:09<01:01,  3.14it/s][A
 14%|█▎        | 30/221 [00:09<00:59,  3.19it/s][A
 14%|█▍        | 31/221 [00:09<00:58,  3.25it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.28it/s][A
 15%|█▍        | 33/221 [00:10<00:58,  3.23it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.28it/s][A
 16%|█▌        | 35/221 [00:10<00:57,  3.26it/s][A
 16%|█▋        | 36/221 [00:11<00:58,  3.18it/s][A
 17%|█▋        | 37/221 [00:11<00:57,  3.22it/s][A
 17%|█▋        | 38/221 [00:11<00:56,  3.25it/s][A
 18%|█▊        | 39/221 [00:12<00:55,  3.29it/s][A
 18%|█▊        | 40/221 [00:12<00:55,  3.27it/s][A
 19%|█▊        | 41/221 [00:12<00:55,  3.27it/s][A
 19%|█▉        | 42/221 [00:13<00:54,  3.27it/s][A
 19%|█▉        | 43/221 [00:13<00:57,  3.09it/s][A
 20%|█▉        | 44/221 [00:13<00:55,  3.17it/s][A
 20%|██        | 45/221 [00:14<00:55,  3.16it/s][A
 21%|██        | 46/221 [00:14<00:54,  3.23it/s][A
 21%|██▏       | 47/221 [00:14<00:53,  3.28it/s][A
 22%|██▏       | 48/221 [00:14<00:53,  3.26it/s][A
 22%|██▏       | 49/221 [00:15<00:52,  3.30it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.28it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.27it/s][A
 24%|██▎       | 52/221 [00:16<00:53,  3.18it/s][A
 24%|██▍       | 53/221 [00:16<00:51,  3.24it/s][A
 24%|██▍       | 54/221 [00:16<00:51,  3.22it/s][A
 25%|██▍       | 55/221 [00:17<00:50,  3.27it/s][A
 25%|██▌       | 56/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.32it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.35it/s][A[h264 @ 0x55859e58e7c0] mmco: unref short failure
[h264 @ 0x55859e58e7c0] mmco: unref short failure
[h264 @ 0x55859e58e7c0] mmco: unref short failure
[h264 @ 0x55859e58e7c0] mmco: unref short failure

 27%|██▋       | 59/221 [00:18<00:48,  3.31it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.33it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.35it/s][A
 28%|██▊       | 62/221 [00:19<00:47,  3.36it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.35it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 65/221 [00:20<00:46,  3.34it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:20<00:47,  3.27it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.31it/s][A
 31%|███       | 69/221 [00:21<00:45,  3.34it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.29it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.33it/s][A
 33%|███▎      | 72/221 [00:22<00:45,  3.27it/s][A
 33%|███▎      | 73/221 [00:22<00:45,  3.24it/s][A
 33%|███▎      | 74/221 [00:22<00:45,  3.25it/s][A
 34%|███▍      | 75/221 [00:23<00:44,  3.27it/s][A[h264 @ 0x555618b44f40] mmco: unref short failure
[h264 @ 0x555618b44f40] mmco: unref short failure

 34%|███▍      | 76/221 [00:23<00:43,  3.31it/s][A[h264 @ 0x555618b44f40] mmco: unref short failure
[h264 @ 0x555618b44f40] mmco: unref short failure

 35%|███▍      | 77/221 [00:23<00:43,  3.34it/s][A
 35%|███▌      | 78/221 [00:24<00:42,  3.36it/s][A
 36%|███▌      | 79/221 [00:24<00:42,  3.34it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.36it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.37it/s][A
 37%|███▋      | 82/221 [00:25<00:41,  3.37it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.35it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.33it/s][A
 38%|███▊      | 85/221 [00:26<00:40,  3.35it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.37it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.38it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.38it/s][A
 40%|████      | 89/221 [00:27<00:39,  3.38it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.39it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.39it/s][A
 42%|████▏     | 92/221 [00:28<00:38,  3.36it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.37it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.38it/s][A
 43%|████▎     | 95/221 [00:29<00:37,  3.39it/s][A
 43%|████▎     | 96/221 [00:29<00:36,  3.39it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.40it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.40it/s][A
 45%|████▍     | 99/221 [00:30<00:35,  3.40it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.40it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 102/221 [00:31<00:34,  3.41it/s][A
 47%|████▋     | 103/221 [00:31<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 106/221 [00:32<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:33<00:32,  3.41it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.41it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.41it/s][A
 51%|█████     | 112/221 [00:34<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 115/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 116/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:36<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:38<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:43<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:45<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:46<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:50<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:52<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:55<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:58<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.35it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  7.01it/s][A
  1%|          | 2/221 [00:00<01:01,  3.57it/s][A
  1%|▏         | 3/221 [00:01<01:25,  2.55it/s][A
  2%|▏         | 4/221 [00:01<01:12,  3.01it/s][A
  2%|▏         | 5/221 [00:01<00:59,  3.64it/s][A
  3%|▎         | 7/221 [00:01<00:46,  4.65it/s][A
  4%|▎         | 8/221 [00:02<00:47,  4.46it/s][A
  4%|▍         | 9/221 [00:02<00:49,  4.28it/s][A
  5%|▍         | 10/221 [00:02<00:54,  3.85it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.60it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.76it/s][A
  6%|▌         | 13/221 [00:04<01:30,  2.29it/s][A
  6%|▋         | 14/221 [00:04<01:12,  2.86it/s][A
  7%|▋         | 15/221 [00:04<01:13,  2.81it/s][A
  7%|▋         | 16/221 [00:04<01:11,  2.88it/s][A
  8%|▊         | 17/221 [00:05<01:19,  2.56it/s][A
  8%|▊         | 18/221 [00:05<01:18,  2.57it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.25it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.62it/s][A
 10%|▉         | 21/221 [00:06<00:45,  4.44it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.39it/s][A
 10%|█         | 23/221 [00:06<00:37,  5.23it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.34it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.97it/s][A
 12%|█▏        | 26/221 [00:07<00:46,  4.19it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.35it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.69it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.29it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.67it/s][A
 14%|█▍        | 31/221 [00:08<00:52,  3.63it/s][A
 14%|█▍        | 32/221 [00:08<00:44,  4.21it/s][A
 15%|█▍        | 33/221 [00:09<00:43,  4.28it/s][A
 15%|█▌        | 34/221 [00:09<00:43,  4.34it/s][A
 16%|█▌        | 35/221 [00:09<00:42,  4.37it/s][A
 16%|█▋        | 36/221 [00:10<00:59,  3.11it/s][A
 17%|█▋        | 37/221 [00:10<00:58,  3.13it/s][A
 17%|█▋        | 38/221 [00:10<00:57,  3.17it/s][A
 18%|█▊        | 40/221 [00:11<00:49,  3.66it/s][A
 19%|█▊        | 41/221 [00:11<00:46,  3.91it/s][A
 19%|█▉        | 42/221 [00:11<00:41,  4.28it/s][A
 19%|█▉        | 43/221 [00:11<00:52,  3.36it/s][A
 20%|█▉        | 44/221 [00:12<00:49,  3.61it/s][A
 20%|██        | 45/221 [00:12<00:54,  3.23it/s][A
 21%|██        | 46/221 [00:12<00:49,  3.53it/s][A
 22%|██▏       | 48/221 [00:12<00:33,  5.12it/s][A
 22%|██▏       | 49/221 [00:13<00:31,  5.53it/s][A
 23%|██▎       | 50/221 [00:13<00:34,  4.96it/s][A
 23%|██▎       | 51/221 [00:13<00:36,  4.61it/s][A
 24%|██▍       | 53/221 [00:13<00:33,  5.02it/s][A
 24%|██▍       | 54/221 [00:14<00:34,  4.91it/s][A
 25%|██▍       | 55/221 [00:14<00:31,  5.26it/s][A
 25%|██▌       | 56/221 [00:14<00:39,  4.22it/s][A
 26%|██▌       | 57/221 [00:15<00:49,  3.32it/s][A
 27%|██▋       | 59/221 [00:15<00:41,  3.87it/s][A
 27%|██▋       | 60/221 [00:15<00:38,  4.21it/s][A
 28%|██▊       | 61/221 [00:15<00:37,  4.27it/s][A
 28%|██▊       | 62/221 [00:16<00:40,  3.91it/s][A
 29%|██▉       | 64/221 [00:16<00:33,  4.71it/s][A
 29%|██▉       | 65/221 [00:16<00:32,  4.84it/s][A
 30%|██▉       | 66/221 [00:17<00:38,  4.07it/s][A
 30%|███       | 67/221 [00:17<00:47,  3.23it/s][A
 31%|███       | 68/221 [00:17<00:42,  3.60it/s][A
 31%|███       | 69/221 [00:18<00:47,  3.23it/s][A
 32%|███▏      | 70/221 [00:18<00:40,  3.71it/s][A
 32%|███▏      | 71/221 [00:18<00:45,  3.33it/s][A
 33%|███▎      | 72/221 [00:19<00:51,  2.89it/s][A
 33%|███▎      | 73/221 [00:19<00:49,  2.99it/s][A
 33%|███▎      | 74/221 [00:19<00:45,  3.22it/s][A
 34%|███▍      | 75/221 [00:20<00:47,  3.07it/s][A
 34%|███▍      | 76/221 [00:20<00:40,  3.61it/s][A
 35%|███▍      | 77/221 [00:20<00:42,  3.37it/s][A
 35%|███▌      | 78/221 [00:20<00:41,  3.45it/s][A
 36%|███▌      | 79/221 [00:21<00:42,  3.36it/s][A
 36%|███▌      | 80/221 [00:21<00:40,  3.52it/s][A
 37%|███▋      | 81/221 [00:21<00:39,  3.52it/s][A
 37%|███▋      | 82/221 [00:22<00:37,  3.74it/s][A
 38%|███▊      | 83/221 [00:22<00:33,  4.15it/s][A
 38%|███▊      | 84/221 [00:22<00:33,  4.09it/s][A
 38%|███▊      | 85/221 [00:22<00:33,  4.02it/s][A
 39%|███▉      | 86/221 [00:22<00:30,  4.42it/s][A
 39%|███▉      | 87/221 [00:23<00:45,  2.96it/s][A
 40%|███▉      | 88/221 [00:23<00:44,  3.00it/s][A
 40%|████      | 89/221 [00:24<00:45,  2.87it/s][A
 41%|████      | 90/221 [00:24<00:48,  2.69it/s][A
 41%|████      | 91/221 [00:24<00:42,  3.09it/s][A
 42%|████▏     | 92/221 [00:25<00:40,  3.21it/s][A
 42%|████▏     | 93/221 [00:25<00:43,  2.96it/s][A
 43%|████▎     | 94/221 [00:25<00:40,  3.15it/s][A
 43%|████▎     | 95/221 [00:26<00:51,  2.44it/s][A
 43%|████▎     | 96/221 [00:26<00:45,  2.77it/s][A
 44%|████▍     | 97/221 [00:26<00:42,  2.90it/s][A
 44%|████▍     | 98/221 [00:27<00:42,  2.88it/s][A
 45%|████▍     | 99/221 [00:27<00:36,  3.32it/s][A
 45%|████▌     | 100/221 [00:27<00:31,  3.82it/s][A
 46%|████▌     | 101/221 [00:28<00:35,  3.36it/s][A
 46%|████▌     | 102/221 [00:28<00:34,  3.50it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.92it/s][A
 48%|████▊     | 105/221 [00:28<00:25,  4.63it/s][A
 48%|████▊     | 106/221 [00:29<00:30,  3.82it/s][A
 48%|████▊     | 107/221 [00:29<00:26,  4.35it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.30it/s][A
 49%|████▉     | 109/221 [00:29<00:29,  3.76it/s][A
 50%|████▉     | 110/221 [00:30<00:31,  3.56it/s][A
 50%|█████     | 111/221 [00:30<00:33,  3.32it/s][A
 51%|█████     | 112/221 [00:30<00:33,  3.26it/s][A
 51%|█████     | 113/221 [00:31<00:29,  3.65it/s][A
 52%|█████▏    | 115/221 [00:31<00:21,  4.98it/s][A
 52%|█████▏    | 116/221 [00:31<00:20,  5.12it/s][A
 53%|█████▎    | 117/221 [00:31<00:22,  4.61it/s][A
 53%|█████▎    | 118/221 [00:32<00:26,  3.83it/s][A
 54%|█████▍    | 119/221 [00:32<00:33,  3.08it/s][A
 54%|█████▍    | 120/221 [00:33<00:34,  2.97it/s][A
 55%|█████▍    | 121/221 [00:33<00:30,  3.26it/s][A
 55%|█████▌    | 122/221 [00:33<00:28,  3.45it/s][A
 56%|█████▌    | 123/221 [00:33<00:26,  3.67it/s][A
 56%|█████▌    | 124/221 [00:34<00:32,  2.97it/s][A
 57%|█████▋    | 125/221 [00:34<00:41,  2.30it/s][A
 57%|█████▋    | 126/221 [00:35<00:35,  2.68it/s][A
 57%|█████▋    | 127/221 [00:35<00:39,  2.40it/s][A
 58%|█████▊    | 128/221 [00:35<00:33,  2.77it/s][A
 58%|█████▊    | 129/221 [00:36<00:26,  3.52it/s][A
 59%|█████▉    | 130/221 [00:36<00:23,  3.89it/s][A
 59%|█████▉    | 131/221 [00:36<00:23,  3.82it/s][A
 60%|█████▉    | 132/221 [00:36<00:27,  3.19it/s][A
 60%|██████    | 133/221 [00:37<00:32,  2.73it/s][A
 61%|██████    | 134/221 [00:37<00:35,  2.43it/s][A
 62%|██████▏   | 136/221 [00:38<00:27,  3.11it/s][A
 62%|██████▏   | 137/221 [00:38<00:25,  3.34it/s][A
 62%|██████▏   | 138/221 [00:38<00:24,  3.36it/s][A
 63%|██████▎   | 139/221 [00:39<00:25,  3.20it/s][A
 63%|██████▎   | 140/221 [00:39<00:23,  3.50it/s][A
 64%|██████▍   | 141/221 [00:39<00:22,  3.63it/s][A
 64%|██████▍   | 142/221 [00:39<00:20,  3.78it/s][A
 65%|██████▍   | 143/221 [00:40<00:20,  3.75it/s][A
 65%|██████▌   | 144/221 [00:40<00:20,  3.80it/s][A
 66%|██████▌   | 145/221 [00:40<00:22,  3.36it/s][A
 66%|██████▌   | 146/221 [00:41<00:22,  3.31it/s][A
 67%|██████▋   | 147/221 [00:41<00:19,  3.70it/s][A
 67%|██████▋   | 148/221 [00:41<00:21,  3.44it/s][A
 67%|██████▋   | 149/221 [00:41<00:21,  3.37it/s][A
 68%|██████▊   | 150/221 [00:42<00:19,  3.58it/s][A
 68%|██████▊   | 151/221 [00:43<00:30,  2.28it/s][A
 69%|██████▉   | 152/221 [00:43<00:36,  1.87it/s][A
 69%|██████▉   | 153/221 [00:44<00:30,  2.22it/s][A
 70%|██████▉   | 154/221 [00:44<00:25,  2.59it/s][A
 70%|███████   | 155/221 [00:44<00:24,  2.67it/s][A
 71%|███████   | 156/221 [00:44<00:23,  2.76it/s][A
 71%|███████   | 157/221 [00:45<00:20,  3.07it/s][A
 71%|███████▏  | 158/221 [00:45<00:22,  2.81it/s][A
 72%|███████▏  | 159/221 [00:45<00:18,  3.33it/s][A
 72%|███████▏  | 160/221 [00:46<00:19,  3.08it/s][A
 73%|███████▎  | 161/221 [00:46<00:16,  3.56it/s][A
 73%|███████▎  | 162/221 [00:46<00:14,  3.97it/s][A
 74%|███████▍  | 163/221 [00:46<00:13,  4.21it/s][A
 74%|███████▍  | 164/221 [00:46<00:12,  4.65it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.96it/s][A
 75%|███████▌  | 166/221 [00:47<00:13,  4.05it/s][A
 76%|███████▌  | 167/221 [00:47<00:11,  4.69it/s][A
 76%|███████▌  | 168/221 [00:47<00:11,  4.47it/s][A
 76%|███████▋  | 169/221 [00:47<00:09,  5.20it/s][A
 77%|███████▋  | 170/221 [00:48<00:13,  3.68it/s][A
 77%|███████▋  | 171/221 [00:49<00:20,  2.50it/s][A
 78%|███████▊  | 172/221 [00:49<00:17,  2.79it/s][A
 78%|███████▊  | 173/221 [00:49<00:17,  2.70it/s][A
 79%|███████▉  | 175/221 [00:50<00:13,  3.35it/s][A
 80%|███████▉  | 176/221 [00:50<00:11,  3.75it/s][A
 80%|████████  | 177/221 [00:50<00:12,  3.66it/s][A
 81%|████████  | 178/221 [00:51<00:15,  2.83it/s][A
 81%|████████  | 179/221 [00:51<00:14,  2.92it/s][A
 82%|████████▏ | 181/221 [00:51<00:10,  3.82it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  3.96it/s][A
 83%|████████▎ | 183/221 [00:52<00:09,  3.98it/s][A
 83%|████████▎ | 184/221 [00:52<00:09,  3.85it/s][A
 84%|████████▍ | 186/221 [00:53<00:08,  4.17it/s][A
 85%|████████▍ | 187/221 [00:53<00:07,  4.51it/s][A
 85%|████████▌ | 188/221 [00:53<00:07,  4.71it/s][A
 86%|████████▌ | 189/221 [00:53<00:06,  4.85it/s][A
 86%|████████▌ | 190/221 [00:54<00:08,  3.54it/s][A
 86%|████████▋ | 191/221 [00:54<00:07,  4.23it/s][A
 87%|████████▋ | 192/221 [00:54<00:06,  4.17it/s][A
 87%|████████▋ | 193/221 [00:54<00:07,  3.92it/s][A
 88%|████████▊ | 194/221 [00:55<00:08,  3.04it/s][A
 88%|████████▊ | 195/221 [00:55<00:07,  3.54it/s][A
 89%|████████▊ | 196/221 [00:55<00:08,  2.93it/s][A
 89%|████████▉ | 197/221 [00:56<00:09,  2.49it/s][A
 90%|████████▉ | 198/221 [00:56<00:09,  2.55it/s][A
 90%|█████████ | 199/221 [00:56<00:07,  3.04it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.34it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.82it/s][A
 91%|█████████▏| 202/221 [00:57<00:04,  3.92it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  3.82it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.95it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.82it/s][A
 93%|█████████▎| 206/221 [00:58<00:05,  2.91it/s][A
 94%|█████████▎| 207/221 [00:59<00:04,  3.30it/s][A
 94%|█████████▍| 208/221 [00:59<00:04,  3.19it/s][A
 95%|█████████▍| 209/221 [00:59<00:03,  3.03it/s][A
 95%|█████████▌| 210/221 [00:59<00:02,  3.71it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  3.84it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  3.25it/s][A
 96%|█████████▋| 213/221 [01:00<00:02,  3.41it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  3.22it/s][A
 97%|█████████▋| 215/221 [01:01<00:01,  3.05it/s][A
 98%|█████████▊| 216/221 [01:01<00:01,  3.03it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  3.06it/s][A
 99%|█████████▊| 218/221 [01:02<00:01,  2.99it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.83it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.31it/s][A
100%|██████████| 221/221 [01:03<00:00,  2.89it/s][A100%|██████████| 221/221 [01:03<00:00,  3.47it/s]
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'area_r1': 42.1, 'area_recall': '42.1/67.3/76.6', 'area_ravg': 62.0}
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'forward_r1': 37.3, 'forward_recall': '37.3/63.0/73.8', 'forward_ravg': 58.0}
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'area_video_r1': 40.2, 'area_video_recall': '40.2/67.6/78.4', 'area_video_ravg': 62.1}
09/17/2024 01:49:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 299=======

09/17/2024 01:49:31 - INFO - __main__ -   {'area_video_r1': 40.2, 'area_video_recall': '40.2/67.6/78.4', 'area_video_ravg': 62.1}
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'area_video_r1': 51.9, 'area_video_recall': '51.9/75.8/82.5', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/70.9/79.8', 'area_video_back_ravg': 66.5}
09/17/2024 01:49:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 01:49:31 - INFO - __main__ -   {'area_video_r1': 51.9, 'area_video_recall': '51.9/75.8/82.5', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/70.9/79.8', 'area_video_back_ravg': 66.5}
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/65.0/74.9', 'video_ravg': 58.8}
09/17/2024 01:49:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 01:49:31 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 01:49:31 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 299--===========

09/17/2024 01:49:31 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.2/81.9', 'video_ravg': 69.5}
09/17/2024 01:49:31 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 299=======

09/17/2024 01:49:31 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.2/81.9', 'video_ravg': 69.5}
09/17/2024 01:50:09 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.01105877198278904, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.8804726600646973, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.0049901008605957, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.89652156829834}
 10%|█         | 300/2910 [1:54:13<100:36:50, 138.78s/it][h264 @ 0x55561b071440] mmco: unref short failure
[h264 @ 0x55561b071440] mmco: unref short failure
[h264 @ 0x55561b071440] mmco: unref short failure
[h264 @ 0x55561b071440] mmco: unref short failure
 10%|█         | 301/2910 [1:54:17<71:16:46, 98.35s/it]  [h264 @ 0x555621c2a5c0] mmco: unref short failure
 10%|█         | 302/2910 [1:54:21<50:51:10, 70.20s/it][h264 @ 0x55766cf7f700] mmco: unref short failure
[h264 @ 0x55766cf7f700] mmco: unref short failure
[h264 @ 0x555616d84380] mmco: unref short failure
 10%|█         | 303/2910 [1:54:26<36:38:24, 50.60s/it][h264 @ 0x558583f2e140] mmco: unref short failure
[h264 @ 0x558583f2e140] mmco: unref short failure
 10%|█         | 304/2910 [1:54:31<26:45:48, 36.97s/it][h264 @ 0x5585856cc9c0] mmco: unref short failure
 10%|█         | 305/2910 [1:54:36<19:48:56, 27.38s/it][h264 @ 0x558593bc1800] mmco: unref short failure
[h264 @ 0x558593bc1800] mmco: unref short failure
[h264 @ 0x558593bc1800] mmco: unref short failure
[h264 @ 0x558593bc1800] mmco: unref short failure
[h264 @ 0x5634a0420a00] mmco: unref short failure
[h264 @ 0x5634a0420a00] mmco: unref short failure
[h264 @ 0x5634ab87ef00] mmco: unref short failure
 11%|█         | 306/2910 [1:54:42<15:09:50, 20.96s/it][h264 @ 0x55766cf7f900] mmco: unref short failure
[h264 @ 0x55766cf7f900] mmco: unref short failure
 11%|█         | 307/2910 [1:54:49<12:04:13, 16.69s/it]09/17/2024 01:50:50 - INFO - __main__ -   current idx KPOxRziYDzs.2 from finetune_area returns wrong image/video, use 119381 instead.
 11%|█         | 308/2910 [1:54:55<9:40:37, 13.39s/it] [h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x557688fb7cc0] mmco: unref short failure
[h264 @ 0x5556228e10c0] mmco: unref short failure
[h264 @ 0x5556228e10c0] mmco: unref short failure
 11%|█         | 309/2910 [1:55:01<8:07:23, 11.24s/it][h264 @ 0x555616ddf8c0] mmco: unref short failure
 11%|█         | 310/2910 [1:55:08<7:08:05,  9.88s/it] 11%|█         | 311/2910 [1:55:14<6:22:50,  8.84s/it] 11%|█         | 312/2910 [1:55:20<5:48:06,  8.04s/it] 11%|█         | 313/2910 [1:55:26<5:21:10,  7.42s/it][h264 @ 0x55562a203c40] mmco: unref short failure
[h264 @ 0x55562a203c40] mmco: unref short failure
[h264 @ 0x555631c16000] mmco: unref short failure
 11%|█         | 314/2910 [1:55:34<5:23:41,  7.48s/it][h264 @ 0x557670cc36c0] mmco: unref short failure
[h264 @ 0x557670cc36c0] mmco: unref short failure
 11%|█         | 315/2910 [1:55:41<5:13:24,  7.25s/it][h264 @ 0x55563b668f00] mmco: unref short failure
[h264 @ 0x55563b668f00] mmco: unref short failure
[h264 @ 0x5576747d3400] mmco: unref short failure
[h264 @ 0x5576747d3400] mmco: unref short failure
[h264 @ 0x5576747d3400] mmco: unref short failure
[h264 @ 0x5576747d3400] mmco: unref short failure
[h264 @ 0x5576824ea4c0] mmco: unref short failure
[h264 @ 0x557674620d00] mmco: unref short failure
[h264 @ 0x557674620d00] mmco: unref short failure
[h264 @ 0x555619b3c080] mmco: unref short failure
[h264 @ 0x555619b3c080] mmco: unref short failure
[h264 @ 0x563497a2adc0] mmco: unref short failure
[h264 @ 0x563497a2adc0] mmco: unref short failure
[h264 @ 0x55859c272dc0] mmco: unref short failure
[h264 @ 0x55859c272dc0] mmco: unref short failure
[h264 @ 0x55859c272dc0] mmco: unref short failure
[h264 @ 0x55859c272dc0] mmco: unref short failure
[h264 @ 0x5585964b5f00] mmco: unref short failure
[h264 @ 0x5585964b5f00] mmco: unref short failure
 11%|█         | 316/2910 [1:56:25<13:17:34, 18.45s/it] 11%|█         | 317/2910 [1:56:31<10:37:34, 14.75s/it][h264 @ 0x55768a539180] mmco: unref short failure
09/17/2024 01:52:34 - INFO - __main__ -   current idx QRr-nFmU9s8.3 from finetune_area returns wrong image/video, use 113549 instead.
 11%|█         | 318/2910 [1:56:39<9:08:02, 12.69s/it] [h264 @ 0x558588fd0c80] mmco: unref short failure
[h264 @ 0x558588fd0c80] mmco: unref short failure
 11%|█         | 319/2910 [1:56:54<9:42:17, 13.48s/it][h264 @ 0x5585807b0500] mmco: unref short failure
[h264 @ 0x5585807b0500] mmco: unref short failure
[h264 @ 0x55766e157a00] mmco: unref short failure
[h264 @ 0x55766e157a00] mmco: unref short failure
[h264 @ 0x5576824ea4c0] mmco: unref short failure
[h264 @ 0x5576824ea4c0] mmco: unref short failure
09/17/2024 01:53:07 - INFO - __main__ -   current idx 9lm2wYzoyd4.69 from finetune_area returns wrong image/video, use 76286 instead.
 11%|█         | 320/2910 [1:57:08<9:46:51, 13.60s/it][h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555634eb7380] mmco: unref short failure
[h264 @ 0x555621940240] mmco: unref short failure
[h264 @ 0x56348d723f40] mmco: unref short failure
[h264 @ 0x56348d723f40] mmco: unref short failure
[h264 @ 0x5585a2730d80] mmco: unref short failure
[h264 @ 0x557688231480] mmco: unref short failure
[h264 @ 0x55562999b0c0] mmco: unref short failure
[h264 @ 0x55562999b0c0] mmco: unref short failure
[h264 @ 0x557684196cc0] mmco: unref short failure
[h264 @ 0x557684196cc0] mmco: unref short failure
 11%|█         | 321/2910 [1:57:23<9:59:04, 13.88s/it]09/17/2024 01:53:27 - INFO - __main__ -   current idx U2DBfiveIQ0.26 from finetune_area returns wrong image/video, use 128011 instead.
[h264 @ 0x55859d9d2780] mmco: unref short failure
[h264 @ 0x55859d9d2780] mmco: unref short failure
 11%|█         | 322/2910 [1:57:29<8:19:27, 11.58s/it][h264 @ 0x555630a02580] mmco: unref short failure
 11%|█         | 323/2910 [1:57:35<7:08:44,  9.94s/it][h264 @ 0x557680113040] mmco: unref short failure
[h264 @ 0x557680113040] mmco: unref short failure
[h264 @ 0x557680113040] mmco: unref short failure
[h264 @ 0x557680113040] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x5634a1b73900] mmco: unref short failure
[h264 @ 0x555617660f40] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x5585a190c3c0] mmco: unref short failure
[h264 @ 0x555632ed0ec0] mmco: unref short failure
[h264 @ 0x555632ed0ec0] mmco: unref short failure
[h264 @ 0x56348d2a8100] mmco: unref short failure
09/17/2024 01:54:14 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 132935 instead.
[h264 @ 0x558598ae71c0] mmco: unref short failure
[h264 @ 0x5585825e0a80] mmco: unref short failure
[h264 @ 0x555622f6eb40] mmco: unref short failure
[h264 @ 0x5556366e6e80] mmco: unref short failure
[h264 @ 0x5556366e6e80] mmco: unref short failure
[h264 @ 0x56348edffb80] mmco: unref short failure
[h264 @ 0x5585854e88c0] mmco: unref short failure
[h264 @ 0x5585854e88c0] mmco: unref short failure
[h264 @ 0x5585854e88c0] mmco: unref short failure
[h264 @ 0x5585854e88c0] mmco: unref short failure
[h264 @ 0x55859db32d00] mmco: unref short failure
[h264 @ 0x55859db32d00] mmco: unref short failure
[h264 @ 0x55561c51bf40] mmco: unref short failure
[h264 @ 0x55561c51bf40] mmco: unref short failure
 11%|█         | 324/2910 [1:58:59<23:07:34, 32.19s/it][h264 @ 0x55561f7a5180] mmco: unref short failure
[h264 @ 0x55561f7a5180] mmco: unref short failure
 11%|█         | 325/2910 [1:59:05<17:29:25, 24.36s/it][h264 @ 0x5634a746a540] mmco: unref short failure
[h264 @ 0x5634a746a540] mmco: unref short failure
[h264 @ 0x5634a746a540] mmco: unref short failure
[h264 @ 0x5634a746a540] mmco: unref short failure
[h264 @ 0x555618c29cc0] mmco: unref short failure
[h264 @ 0x555618c29cc0] mmco: unref short failure
[h264 @ 0x5556380bf980] mmco: unref short failure
 11%|█         | 326/2910 [1:59:22<15:42:26, 21.88s/it][h264 @ 0x555626da1a00] mmco: unref short failure
[h264 @ 0x555626da1a00] mmco: unref short failure
[h264 @ 0x557683ea9400] mmco: unref short failure
[h264 @ 0x55858813ee40] mmco: unref short failure
09/17/2024 01:55:49 - INFO - __main__ -   current idx _4-lJ7UF30Y.22 from finetune_area returns wrong image/video, use 148252 instead.
 11%|█         | 327/2910 [1:59:50<17:04:18, 23.79s/it][h264 @ 0x55561c0372c0] mmco: unref short failure
[h264 @ 0x55561c0372c0] mmco: unref short failure
[h264 @ 0x5634a4e9bf40] mmco: unref short failure
 11%|█▏        | 328/2910 [1:59:56<13:18:48, 18.56s/it][h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x5634a8fe2b80] mmco: unref short failure
[h264 @ 0x55766a486d40] mmco: unref short failure
[h264 @ 0x55766a486d40] mmco: unref short failure
 11%|█▏        | 329/2910 [2:00:02<10:38:58, 14.85s/it] 11%|█▏        | 330/2910 [2:00:09<8:52:07, 12.38s/it] [h264 @ 0x5556356daac0] mmco: unref short failure
[h264 @ 0x5556356daac0] mmco: unref short failure
[h264 @ 0x5585a4e30d40] mmco: unref short failure
[h264 @ 0x5585a4e30d40] mmco: unref short failure
[h264 @ 0x5585a4e30d40] mmco: unref short failure
[h264 @ 0x5585a4e30d40] mmco: unref short failure
 11%|█▏        | 331/2910 [2:00:15<7:24:52, 10.35s/it][h264 @ 0x55766a4b9980] mmco: unref short failure
[h264 @ 0x55766a4b9980] mmco: unref short failure
[h264 @ 0x55858c33ea00] mmco: unref short failure
[h264 @ 0x55858c33ea00] mmco: unref short failure
[h264 @ 0x55858c33ea00] mmco: unref short failure
[h264 @ 0x55858c33ea00] mmco: unref short failure
[h264 @ 0x55561ac60bc0] mmco: unref short failure
[h264 @ 0x55561ac60bc0] mmco: unref short failure
[h264 @ 0x555619330000] mmco: unref short failure
[h264 @ 0x5634a0ea8e40] mmco: unref short failure
[h264 @ 0x5634a0ea8e40] mmco: unref short failure
[h264 @ 0x5634afcd5940] mmco: unref short failure
[h264 @ 0x5634afcd5940] mmco: unref short failure
[h264 @ 0x558585547cc0] mmco: unref short failure
09/17/2024 01:56:48 - INFO - __main__ -   current idx NplowkZTvc0.7 from finetune_area returns wrong image/video, use 60065 instead.
09/17/2024 01:56:50 - INFO - __main__ -   current idx MuqZDGESIMY.30 from finetune_area returns wrong image/video, use 101214 instead.
[h264 @ 0x55768883e740] mmco: unref short failure
[h264 @ 0x55768b2f9fc0] mmco: unref short failure
[h264 @ 0x55768b2f9fc0] mmco: unref short failure
[h264 @ 0x55563a7559c0] mmco: unref short failure
[h264 @ 0x55563a7559c0] mmco: unref short failure
[h264 @ 0x55858128c3c0] mmco: unref short failure
[h264 @ 0x55858128c3c0] mmco: unref short failure
[h264 @ 0x5634ac626840] mmco: unref short failure
[h264 @ 0x557670439740] mmco: unref short failure
[h264 @ 0x557670439740] mmco: unref short failure
[h264 @ 0x557670439740] mmco: unref short failure
[h264 @ 0x557670439740] mmco: unref short failure
[h264 @ 0x5634aedd9480] mmco: unref short failure
[h264 @ 0x5634aedd9480] mmco: unref short failure
 11%|█▏        | 332/2910 [2:01:37<22:54:25, 31.99s/it][h264 @ 0x5576769ded00] mmco: unref short failure
[h264 @ 0x5576769ded00] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
 11%|█▏        | 333/2910 [2:01:43<17:16:42, 24.14s/it][h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x555617c2ad40] mmco: unref short failure
[h264 @ 0x555617c2ad40] mmco: unref short failure
 11%|█▏        | 334/2910 [2:02:01<16:03:54, 22.45s/it][h264 @ 0x558583ed7ec0] mmco: unref short failure
[h264 @ 0x558583ed7ec0] mmco: unref short failure
[h264 @ 0x55859c8cf4c0] mmco: unref short failure
[h264 @ 0x55859c8cf4c0] mmco: unref short failure
[h264 @ 0x55768af3ca00] mmco: unref short failure
[h264 @ 0x55768af3ca00] mmco: unref short failure
[h264 @ 0x5634a97ecbc0] mmco: unref short failure
[h264 @ 0x55859ab84100] mmco: unref short failure
 12%|█▏        | 335/2910 [2:02:22<15:33:41, 21.76s/it][h264 @ 0x555623d32a00] mmco: unref short failure
 12%|█▏        | 336/2910 [2:02:28<12:12:54, 17.08s/it][h264 @ 0x557676245200] mmco: unref short failure
 12%|█▏        | 337/2910 [2:02:34<9:59:04, 13.97s/it] [h264 @ 0x555626ef3640] mmco: unref short failure
[h264 @ 0x555626ef3640] mmco: unref short failure
 12%|█▏        | 338/2910 [2:02:40<8:16:16, 11.58s/it][h264 @ 0x56348f77a840] mmco: unref short failure
 12%|█▏        | 339/2910 [2:02:46<7:05:24,  9.93s/it][h264 @ 0x557676245200] mmco: unref short failure
[h264 @ 0x55859ea8d7c0] mmco: unref short failure
[h264 @ 0x55859ea8d7c0] mmco: unref short failure
[h264 @ 0x55858c48d500] mmco: unref short failure
[h264 @ 0x55858c48d500] mmco: unref short failure
[h264 @ 0x55859743f840] mmco: unref short failure
[h264 @ 0x557674850ec0] mmco: unref short failure
[h264 @ 0x557674850ec0] mmco: unref short failure
09/17/2024 01:59:14 - INFO - __main__ -   current idx DTaJjznuY74.20 from finetune_area returns wrong image/video, use 138921 instead.
[h264 @ 0x5556228e10c0] mmco: unref short failure
[h264 @ 0x5556228e10c0] mmco: unref short failure
[h264 @ 0x558595ffa600] mmco: unref short failure
[h264 @ 0x55858938bd80] mmco: unref short failure
[h264 @ 0x555638f3c480] mmco: unref short failure
[h264 @ 0x56349f2c7c00] mmco: unref short failure
[h264 @ 0x56349f2c7c00] mmco: unref short failure
[h264 @ 0x558598121600] mmco: unref short failure
[h264 @ 0x558598121600] mmco: unref short failure
[h264 @ 0x558598121600] mmco: unref short failure
[h264 @ 0x558598121600] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x55858dc8e6c0] mmco: unref short failure
[h264 @ 0x55766d0447c0] mmco: unref short failure
[h264 @ 0x5576729f90c0] mmco: unref short failure
[h264 @ 0x55858130a240] mmco: unref short failure
[h264 @ 0x55562e1dc1c0] mmco: unref short failure
 12%|█▏        | 340/2910 [2:04:11<22:59:45, 32.21s/it] 12%|█▏        | 341/2910 [2:04:18<17:37:10, 24.69s/it]09/17/2024 02:00:23 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 12696 instead.
[h264 @ 0x5585831a2e40] mmco: unref short failure
[h264 @ 0x5585831a2e40] mmco: unref short failure
[h264 @ 0x55858b9be280] mmco: unref short failure
 12%|█▏        | 342/2910 [2:04:38<16:36:44, 23.29s/it][h264 @ 0x55859e1a4c80] mmco: unref short failure
[h264 @ 0x55859e1a4c80] mmco: unref short failure
[h264 @ 0x55562f4d3f80] mmco: unref short failure
[h264 @ 0x5576861c9780] mmco: unref short failure
[h264 @ 0x5576861c9780] mmco: unref short failure
[h264 @ 0x563490f37700] mmco: unref short failure
[h264 @ 0x563490f37700] mmco: unref short failure
 12%|█▏        | 343/2910 [2:04:50<14:07:34, 19.81s/it][h264 @ 0x56348f5e0880] mmco: unref short failure
 12%|█▏        | 344/2910 [2:04:55<11:07:42, 15.61s/it][h264 @ 0x55561b024800] mmco: unref short failure
[h264 @ 0x55561b024800] mmco: unref short failure
[h264 @ 0x55563bd9b480] mmco: unref short failure
[h264 @ 0x55563bd9b480] mmco: unref short failure
 12%|█▏        | 345/2910 [2:05:02<9:08:02, 12.82s/it] [h264 @ 0x5556332b6500] mmco: unref short failure
[h264 @ 0x55859e58e7c0] mmco: unref short failure
[h264 @ 0x55766a0b7980] mmco: unref short failure
[h264 @ 0x55766a0b7980] mmco: unref short failure
 12%|█▏        | 346/2910 [2:05:10<8:06:21, 11.38s/it][h264 @ 0x557682716400] mmco: unref short failure
09/17/2024 02:01:12 - INFO - __main__ -   current idx 1HAnFYVSFkk.3 from finetune_area returns wrong image/video, use 35169 instead.
 12%|█▏        | 347/2910 [2:05:15<6:53:01,  9.67s/it][h264 @ 0x55561b71d680] mmco: unref short failure
[h264 @ 0x55561f7a5180] mmco: unref short failure
[h264 @ 0x55561f7a5180] mmco: unref short failure
[h264 @ 0x5556218d9400] mmco: unref short failure
[h264 @ 0x5556218d9400] mmco: unref short failure
[h264 @ 0x5556218d9400] mmco: unref short failure
[h264 @ 0x5556218d9400] mmco: unref short failure
[h264 @ 0x55562c728ec0] mmco: unref short failure
[h264 @ 0x5634a1858b00] mmco: unref short failure
[h264 @ 0x5634a1858b00] mmco: unref short failure
[h264 @ 0x5634a1858b00] mmco: unref short failure
[h264 @ 0x5634a1858b00] mmco: unref short failure
[h264 @ 0x5585a4e4cc40] mmco: unref short failure
[h264 @ 0x5585a4e4cc40] mmco: unref short failure
[h264 @ 0x5585a4e4cc40] mmco: unref short failure
[h264 @ 0x5585a4e4cc40] mmco: unref short failure
[h264 @ 0x56348fa53400] mmco: unref short failure
[h264 @ 0x56348fa53400] mmco: unref short failure
[h264 @ 0x557689587840] mmco: unref short failure
 12%|█▏        | 348/2910 [2:06:40<22:48:47, 32.06s/it][h264 @ 0x55767026f140] mmco: unref short failure
[h264 @ 0x55767026f140] mmco: unref short failure
[h264 @ 0x5634a8b27cc0] mmco: unref short failure
 12%|█▏        | 349/2910 [2:06:45<17:10:23, 24.14s/it]09/17/2024 02:02:44 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:02:44 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55766c403100] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5585901eb8c0] mmco: unref short failure
[h264 @ 0x55561c150a80] mmco: unref short failure
[h264 @ 0x55561c150a80] mmco: unref short failure
[h264 @ 0x557680323380] mmco: unref short failure
[h264 @ 0x557672c280c0] mmco: unref short failure
[h264 @ 0x557672c280c0] mmco: unref short failure
[h264 @ 0x55767638a000] mmco: unref short failure
[h264 @ 0x55857ea04700] mmco: unref short failure
[h264 @ 0x55857ea04700] mmco: unref short failure
[h264 @ 0x557672c280c0] mmco: unref short failure
[h264 @ 0x557672c280c0] mmco: unref short failure
09/17/2024 02:04:37 - INFO - __main__ -   current idx T9SsQafdxnY.19 from finetune_area returns wrong image/video, use 67620 instead.
[h264 @ 0x55857f92da00] mmco: unref short failure
[h264 @ 0x55857f92da00] mmco: unref short failure
[h264 @ 0x5556171e9bc0] mmco: unref short failure
[h264 @ 0x5556171e9bc0] mmco: unref short failure
[h264 @ 0x5634abfa8980] mmco: unref short failure
[h264 @ 0x5634abfa8980] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:22,  1.54it/s][A
  1%|          | 2/221 [00:01<02:12,  1.66it/s][A
  1%|▏         | 3/221 [00:01<01:39,  2.20it/s][A
  2%|▏         | 4/221 [00:01<01:15,  2.89it/s][A
  2%|▏         | 5/221 [00:01<01:06,  3.26it/s][A
  3%|▎         | 6/221 [00:02<00:56,  3.81it/s][A
  3%|▎         | 7/221 [00:02<00:56,  3.79it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.77it/s][A
  4%|▍         | 9/221 [00:03<01:05,  3.22it/s][A
  5%|▍         | 10/221 [00:03<01:18,  2.68it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.72it/s][A
  5%|▌         | 12/221 [00:04<01:26,  2.43it/s][A
  6%|▌         | 13/221 [00:04<01:16,  2.71it/s][A
  6%|▋         | 14/221 [00:05<01:19,  2.60it/s][A
  7%|▋         | 15/221 [00:05<01:09,  2.97it/s][A
  7%|▋         | 16/221 [00:05<01:14,  2.74it/s][A
  8%|▊         | 17/221 [00:06<01:31,  2.22it/s][A
  8%|▊         | 18/221 [00:06<01:23,  2.45it/s][A
  9%|▊         | 19/221 [00:06<01:10,  2.87it/s][A
  9%|▉         | 20/221 [00:07<01:04,  3.10it/s][A
 10%|▉         | 21/221 [00:07<01:01,  3.24it/s][A[h264 @ 0x55859616a340] mmco: unref short failure
[h264 @ 0x55766ed780c0] mmco: unref short failure
[h264 @ 0x55766ed780c0] mmco: unref short failure
[h264 @ 0x55766ed780c0] mmco: unref short failure
[h264 @ 0x55766ed780c0] mmco: unref short failure

 10%|▉         | 22/221 [00:07<00:58,  3.39it/s][A[h264 @ 0x56348e654100] mmco: unref short failure

 10%|█         | 23/221 [00:07<00:48,  4.11it/s][A
 11%|█         | 24/221 [00:08<00:44,  4.40it/s][A
 11%|█▏        | 25/221 [00:08<00:44,  4.42it/s][A
 12%|█▏        | 26/221 [00:08<00:57,  3.39it/s][A
 12%|█▏        | 27/221 [00:08<00:47,  4.09it/s][A[h264 @ 0x5556171276c0] mmco: unref short failure
[h264 @ 0x5556171276c0] mmco: unref short failure

 13%|█▎        | 28/221 [00:09<01:06,  2.89it/s][A
 13%|█▎        | 29/221 [00:09<01:07,  2.84it/s][A
 14%|█▎        | 30/221 [00:10<01:04,  2.96it/s][A
 14%|█▍        | 31/221 [00:10<01:01,  3.07it/s][A
 14%|█▍        | 32/221 [00:10<00:54,  3.46it/s][A
 15%|█▍        | 33/221 [00:10<00:47,  3.98it/s][A
 15%|█▌        | 34/221 [00:10<00:40,  4.66it/s][A
 16%|█▌        | 35/221 [00:11<00:44,  4.18it/s][A
 16%|█▋        | 36/221 [00:11<00:57,  3.20it/s][A[h264 @ 0x5585901eb8c0] mmco: unref short failure

 17%|█▋        | 37/221 [00:12<01:08,  2.69it/s][A
 17%|█▋        | 38/221 [00:12<01:15,  2.44it/s][A
 18%|█▊        | 39/221 [00:13<01:10,  2.59it/s][A
 18%|█▊        | 40/221 [00:13<01:06,  2.74it/s][A
 19%|█▊        | 41/221 [00:13<00:54,  3.32it/s][A
 19%|█▉        | 42/221 [00:14<01:17,  2.32it/s][A
 19%|█▉        | 43/221 [00:14<01:05,  2.71it/s][A
 20%|█▉        | 44/221 [00:14<00:53,  3.33it/s][A
 20%|██        | 45/221 [00:15<01:11,  2.46it/s][A
 21%|██        | 46/221 [00:15<01:12,  2.40it/s][A
 21%|██▏       | 47/221 [00:16<01:17,  2.25it/s][A
 22%|██▏       | 48/221 [00:16<01:02,  2.78it/s][A
 22%|██▏       | 49/221 [00:16<01:10,  2.45it/s][A
 23%|██▎       | 50/221 [00:17<01:02,  2.74it/s][A
 24%|██▎       | 52/221 [00:17<00:42,  3.98it/s][A
 24%|██▍       | 53/221 [00:17<00:38,  4.39it/s][A
 24%|██▍       | 54/221 [00:18<01:23,  2.01it/s][A
 25%|██▍       | 55/221 [00:19<01:20,  2.06it/s][A
 25%|██▌       | 56/221 [00:19<01:05,  2.51it/s][A
 26%|██▌       | 57/221 [00:19<00:59,  2.78it/s][A
 26%|██▌       | 58/221 [00:19<00:48,  3.37it/s][A
 27%|██▋       | 59/221 [00:20<00:44,  3.68it/s][A
 27%|██▋       | 60/221 [00:21<01:23,  1.92it/s][A
 28%|██▊       | 61/221 [00:21<01:13,  2.18it/s][A
 28%|██▊       | 62/221 [00:21<01:12,  2.18it/s][A
 29%|██▊       | 63/221 [00:22<01:07,  2.34it/s][A
 29%|██▉       | 64/221 [00:22<00:59,  2.64it/s][A
 29%|██▉       | 65/221 [00:22<00:54,  2.87it/s][A
 30%|██▉       | 66/221 [00:23<01:07,  2.31it/s][A
 30%|███       | 67/221 [00:24<01:19,  1.93it/s][A
 31%|███       | 68/221 [00:24<01:05,  2.35it/s][A
 31%|███       | 69/221 [00:24<01:06,  2.27it/s][A
 32%|███▏      | 70/221 [00:25<00:53,  2.82it/s][A
 32%|███▏      | 71/221 [00:25<01:09,  2.15it/s][A
 33%|███▎      | 72/221 [00:26<01:10,  2.11it/s][A[h264 @ 0x55858c074c80] mmco: unref short failure
[h264 @ 0x55858c074c80] mmco: unref short failure

 33%|███▎      | 73/221 [00:26<01:10,  2.11it/s][A
 33%|███▎      | 74/221 [00:26<01:01,  2.41it/s][A
 34%|███▍      | 75/221 [00:27<00:55,  2.64it/s][A
 34%|███▍      | 76/221 [00:27<00:45,  3.18it/s][A
 35%|███▍      | 77/221 [00:27<00:46,  3.11it/s][A
 35%|███▌      | 78/221 [00:27<00:37,  3.79it/s][A[h264 @ 0x557669992080] mmco: unref short failure

 36%|███▌      | 79/221 [00:28<00:53,  2.63it/s][A
 36%|███▌      | 80/221 [00:28<00:48,  2.93it/s][A
 37%|███▋      | 81/221 [00:28<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:29<00:51,  2.71it/s][A
 38%|███▊      | 83/221 [00:29<00:53,  2.57it/s][A
 38%|███▊      | 84/221 [00:30<00:51,  2.65it/s][A
 38%|███▊      | 85/221 [00:30<00:46,  2.94it/s][A
 39%|███▉      | 86/221 [00:31<00:48,  2.80it/s][A
 39%|███▉      | 87/221 [00:32<01:16,  1.76it/s][A
 40%|███▉      | 88/221 [00:32<01:23,  1.59it/s][A
 40%|████      | 89/221 [00:33<01:15,  1.75it/s][A
 41%|████      | 90/221 [00:33<01:01,  2.14it/s][A
 41%|████      | 91/221 [00:33<00:49,  2.60it/s][A
 42%|████▏     | 92/221 [00:33<00:46,  2.76it/s][A
 42%|████▏     | 93/221 [00:34<00:46,  2.73it/s][A
 43%|████▎     | 94/221 [00:34<00:42,  3.00it/s][A
[h264 @ 0x55768ead9600] mmco: unref short failure
 43%|████▎     | 95/221 [00:34<00:39,  3.19it/s][A
 43%|████▎     | 96/221 [00:35<00:43,  2.91it/s][A
 44%|████▍     | 97/221 [00:35<00:36,  3.39it/s][A
 44%|████▍     | 98/221 [00:35<00:42,  2.89it/s][A
 45%|████▍     | 99/221 [00:36<00:35,  3.40it/s][A
 45%|████▌     | 100/221 [00:36<00:34,  3.55it/s][A
 46%|████▌     | 101/221 [00:36<00:30,  3.97it/s][A
 46%|████▌     | 102/221 [00:36<00:32,  3.64it/s][A
 47%|████▋     | 103/221 [00:37<00:29,  3.99it/s][A[h264 @ 0x555621c2a5c0] mmco: unref short failure

 47%|████▋     | 104/221 [00:37<00:33,  3.50it/s][A
 48%|████▊     | 105/221 [00:37<00:37,  3.08it/s][A
 48%|████▊     | 106/221 [00:38<01:02,  1.85it/s][A
 48%|████▊     | 107/221 [00:39<00:50,  2.28it/s][A
 49%|████▉     | 108/221 [00:39<00:45,  2.51it/s][A
 49%|████▉     | 109/221 [00:39<00:40,  2.79it/s][A
 50%|████▉     | 110/221 [00:40<00:42,  2.61it/s][A
 50%|█████     | 111/221 [00:40<00:48,  2.27it/s][A
 51%|█████     | 112/221 [00:40<00:41,  2.64it/s][A
 51%|█████     | 113/221 [00:41<00:40,  2.67it/s][A
 52%|█████▏    | 114/221 [00:41<00:34,  3.10it/s][A
 52%|█████▏    | 115/221 [00:41<00:31,  3.38it/s][A[h264 @ 0x5634a1bf1e00] mmco: unref short failure
[h264 @ 0x5634a1bf1e00] mmco: unref short failure
[h264 @ 0x558598a824c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:43<01:07,  1.56it/s][A
 53%|█████▎    | 117/221 [00:43<00:59,  1.76it/s][A
 53%|█████▎    | 118/221 [00:43<00:47,  2.16it/s][A
 54%|█████▍    | 119/221 [00:44<00:46,  2.18it/s][A
 54%|█████▍    | 120/221 [00:44<00:41,  2.41it/s][A
 55%|█████▍    | 121/221 [00:44<00:34,  2.86it/s][A
 55%|█████▌    | 122/221 [00:45<00:32,  3.05it/s][A
 56%|█████▌    | 123/221 [00:45<00:27,  3.54it/s][A
 56%|█████▌    | 124/221 [00:45<00:26,  3.70it/s][A
 57%|█████▋    | 125/221 [00:45<00:30,  3.12it/s][A
 57%|█████▋    | 126/221 [00:46<00:27,  3.47it/s][A
 57%|█████▋    | 127/221 [00:46<00:38,  2.47it/s][A
 58%|█████▊    | 128/221 [00:47<00:40,  2.27it/s][A
 58%|█████▊    | 129/221 [00:47<00:35,  2.60it/s][A
 59%|█████▉    | 130/221 [00:47<00:33,  2.73it/s][A
 59%|█████▉    | 131/221 [00:48<00:28,  3.13it/s][A
 60%|█████▉    | 132/221 [00:48<00:26,  3.32it/s][A
 60%|██████    | 133/221 [00:48<00:30,  2.87it/s][A
 61%|██████    | 134/221 [00:49<00:30,  2.84it/s][A
 61%|██████    | 135/221 [00:49<00:30,  2.78it/s][A
 62%|██████▏   | 136/221 [00:50<00:30,  2.74it/s][A
 62%|██████▏   | 137/221 [00:50<00:37,  2.27it/s][A
 62%|██████▏   | 138/221 [00:50<00:36,  2.26it/s][A
 63%|██████▎   | 139/221 [00:51<00:40,  2.00it/s][A
 63%|██████▎   | 140/221 [00:51<00:37,  2.15it/s][A
 64%|██████▍   | 141/221 [00:52<00:34,  2.29it/s][A[h264 @ 0x56348d648b40] mmco: unref short failure

 64%|██████▍   | 142/221 [00:52<00:31,  2.52it/s][A[h264 @ 0x56348d648b40] mmco: unref short failure

 65%|██████▍   | 143/221 [00:52<00:29,  2.65it/s][A
 65%|██████▌   | 144/221 [00:53<00:27,  2.78it/s][A
 66%|██████▌   | 145/221 [00:53<00:23,  3.21it/s][A[h264 @ 0x55859bb9b9c0] mmco: unref short failure
[h264 @ 0x55859bb9b9c0] mmco: unref short failure

 66%|██████▌   | 146/221 [00:53<00:22,  3.29it/s][A
 67%|██████▋   | 147/221 [00:54<00:21,  3.41it/s][A
 67%|██████▋   | 148/221 [00:54<00:23,  3.05it/s][A
 67%|██████▋   | 149/221 [00:54<00:22,  3.25it/s][A
 68%|██████▊   | 150/221 [00:54<00:20,  3.54it/s][A
 68%|██████▊   | 151/221 [00:55<00:27,  2.57it/s][A
 69%|██████▉   | 152/221 [00:56<00:43,  1.59it/s][A[h264 @ 0x563494857cc0] mmco: unref short failure
[h264 @ 0x563494857cc0] mmco: unref short failure

 69%|██████▉   | 153/221 [00:57<00:37,  1.82it/s][A
 70%|██████▉   | 154/221 [00:57<00:30,  2.16it/s][A
 70%|███████   | 155/221 [00:57<00:26,  2.48it/s][A
 71%|███████   | 156/221 [00:58<00:25,  2.53it/s][A
 71%|███████   | 157/221 [00:58<00:30,  2.10it/s][A
 71%|███████▏  | 158/221 [00:59<00:26,  2.34it/s][A
 72%|███████▏  | 159/221 [00:59<00:21,  2.95it/s][A
 72%|███████▏  | 160/221 [00:59<00:21,  2.79it/s][A
 73%|███████▎  | 161/221 [00:59<00:17,  3.45it/s][A09/17/2024 02:06:05 - INFO - __main__ -   current idx DhOkpvuskU4.32 from finetune_area returns wrong image/video, use 112773 instead.

 73%|███████▎  | 162/221 [01:00<00:20,  2.88it/s][A
 74%|███████▍  | 163/221 [01:00<00:20,  2.82it/s][A[h264 @ 0x55766eff0280] mmco: unref short failure

 74%|███████▍  | 164/221 [01:01<00:24,  2.35it/s][A
 75%|███████▍  | 165/221 [01:01<00:20,  2.76it/s][A
 75%|███████▌  | 166/221 [01:01<00:22,  2.41it/s][A
 76%|███████▌  | 167/221 [01:02<00:19,  2.77it/s][A
 76%|███████▌  | 168/221 [01:02<00:26,  1.98it/s][A
 76%|███████▋  | 169/221 [01:03<00:20,  2.50it/s][A
 77%|███████▋  | 170/221 [01:03<00:19,  2.67it/s][A
 77%|███████▋  | 171/221 [01:03<00:21,  2.32it/s][A
 78%|███████▊  | 172/221 [01:04<00:18,  2.70it/s][A
 78%|███████▊  | 173/221 [01:04<00:18,  2.64it/s][A
 79%|███████▊  | 174/221 [01:04<00:15,  3.02it/s][A
 79%|███████▉  | 175/221 [01:05<00:16,  2.79it/s][A
 80%|███████▉  | 176/221 [01:05<00:14,  3.16it/s][A
 80%|████████  | 177/221 [01:05<00:12,  3.50it/s][A[h264 @ 0x55857e961140] mmco: unref short failure
[h264 @ 0x55857e961140] mmco: unref short failure

 81%|████████  | 178/221 [01:06<00:13,  3.24it/s][A
 81%|████████  | 179/221 [01:06<00:13,  3.03it/s][A
 81%|████████▏ | 180/221 [01:06<00:11,  3.47it/s][A
 82%|████████▏ | 181/221 [01:06<00:10,  3.69it/s][A
 82%|████████▏ | 182/221 [01:07<00:09,  4.00it/s][A
 83%|████████▎ | 183/221 [01:07<00:08,  4.47it/s][A
 83%|████████▎ | 184/221 [01:07<00:08,  4.16it/s][A
 84%|████████▍ | 186/221 [01:07<00:07,  4.63it/s][A
 85%|████████▍ | 187/221 [01:08<00:07,  4.35it/s][A
 85%|████████▌ | 188/221 [01:08<00:07,  4.24it/s][A
 86%|████████▌ | 189/221 [01:08<00:08,  3.70it/s][A
 86%|████████▌ | 190/221 [01:09<00:10,  3.05it/s][A
 87%|████████▋ | 192/221 [01:09<00:07,  3.73it/s][A
 88%|████████▊ | 194/221 [01:10<00:11,  2.41it/s][A
 88%|████████▊ | 195/221 [01:11<00:09,  2.60it/s][A
 89%|████████▊ | 196/221 [01:11<00:08,  2.81it/s][A
 89%|████████▉ | 197/221 [01:11<00:07,  3.17it/s][A
 90%|████████▉ | 198/221 [01:11<00:06,  3.29it/s][A
 90%|█████████ | 199/221 [01:12<00:05,  3.79it/s][A
 90%|█████████ | 200/221 [01:12<00:05,  3.69it/s][A
 91%|█████████ | 201/221 [01:12<00:05,  3.87it/s][A
 91%|█████████▏| 202/221 [01:12<00:04,  3.91it/s][A
 92%|█████████▏| 203/221 [01:13<00:04,  4.17it/s][A
 92%|█████████▏| 204/221 [01:13<00:04,  3.92it/s][A
 93%|█████████▎| 205/221 [01:13<00:03,  4.25it/s][A
 93%|█████████▎| 206/221 [01:14<00:05,  2.96it/s][A
 94%|█████████▎| 207/221 [01:14<00:03,  3.69it/s][A
 94%|█████████▍| 208/221 [01:14<00:03,  4.05it/s][A
 95%|█████████▍| 209/221 [01:14<00:02,  4.21it/s][A
 95%|█████████▌| 210/221 [01:14<00:02,  4.37it/s][A
 95%|█████████▌| 211/221 [01:15<00:02,  3.55it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  3.63it/s][A
 96%|█████████▋| 213/221 [01:15<00:02,  3.88it/s][A
 97%|█████████▋| 214/221 [01:16<00:02,  3.36it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  3.47it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  3.36it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  2.85it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.50it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  2.38it/s][A
100%|█████████▉| 220/221 [01:20<00:00,  1.17it/s][A
100%|██████████| 221/221 [01:20<00:00,  1.51it/s][A100%|██████████| 221/221 [01:20<00:00,  2.76it/s]
[h264 @ 0x55562f26ad00] mmco: unref short failure
[h264 @ 0x55562f26ad00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.40it/s][A
  1%|          | 2/221 [00:00<01:05,  3.36it/s][A
  1%|▏         | 3/221 [00:00<01:07,  3.22it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.28it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.33it/s][A[h264 @ 0x56349386a680] mmco: unref short failure
[h264 @ 0x56349386a680] mmco: unref short failure

  3%|▎         | 6/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.36it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.29it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.32it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.34it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.34it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.36it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.33it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.37it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.38it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.38it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.36it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.37it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.37it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.34it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.36it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.36it/s][A09/17/2024 02:06:37 - INFO - __main__ -   current idx R8HHCsDQ1cs.27 from finetune_area returns wrong image/video, use 15213 instead.

 12%|█▏        | 27/221 [00:08<00:58,  3.29it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.33it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.29it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.29it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.27it/s][A
 15%|█▍        | 33/221 [00:09<00:57,  3.26it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.28it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.27it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.34it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.35it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.31it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.33it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.35it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.32it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.35it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.33it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.33it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.27it/s][A
 24%|██▍       | 53/221 [00:15<00:50,  3.30it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.30it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.30it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.33it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.35it/s][A
 27%|██▋       | 60/221 [00:18<00:47,  3.36it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.35it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.35it/s][A
 29%|██▊       | 63/221 [00:18<00:47,  3.36it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.37it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.38it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.37it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.38it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.38it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.38it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.39it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.40it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:22<00:45,  3.23it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.26it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.30it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.33it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.35it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.32it/s][A
 36%|███▌      | 80/221 [00:23<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.36it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.38it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.39it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.39it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.40it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.40it/s][A[h264 @ 0x55858c118fc0] mmco: unref short failure
[h264 @ 0x55858c118fc0] mmco: unref short failure

 39%|███▉      | 87/221 [00:26<00:39,  3.40it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.41it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.41it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.41it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.17it/s][A
  1%|          | 2/221 [00:00<01:12,  3.02it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.44it/s][A
  2%|▏         | 4/221 [00:01<01:14,  2.92it/s][A
  2%|▏         | 5/221 [00:01<01:02,  3.46it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.31it/s][A
  4%|▎         | 8/221 [00:02<00:52,  4.06it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.90it/s][A
  5%|▍         | 10/221 [00:02<00:55,  3.78it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.89it/s][A
  5%|▌         | 12/221 [00:03<00:52,  4.00it/s][A
  6%|▌         | 13/221 [00:04<01:29,  2.32it/s][A
  6%|▋         | 14/221 [00:04<01:10,  2.93it/s][A
  7%|▋         | 15/221 [00:04<01:09,  2.95it/s][A
  7%|▋         | 16/221 [00:04<01:09,  2.93it/s][A
  8%|▊         | 17/221 [00:05<01:19,  2.55it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.51it/s][A
  9%|▊         | 19/221 [00:05<01:03,  3.20it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.03it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.07it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.38it/s][A
 11%|█▏        | 25/221 [00:07<00:38,  5.08it/s][A
 12%|█▏        | 26/221 [00:07<00:42,  4.59it/s][A
 12%|█▏        | 27/221 [00:07<00:41,  4.67it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.70it/s][A
 13%|█▎        | 29/221 [00:08<00:55,  3.49it/s][A
 14%|█▎        | 30/221 [00:08<00:51,  3.70it/s][A
 14%|█▍        | 31/221 [00:08<00:53,  3.54it/s][A
 14%|█▍        | 32/221 [00:08<00:47,  4.01it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.13it/s][A
 15%|█▌        | 34/221 [00:09<00:44,  4.19it/s][A
 16%|█▌        | 35/221 [00:09<00:45,  4.09it/s][A
 16%|█▋        | 36/221 [00:10<00:59,  3.10it/s][A
 17%|█▋        | 37/221 [00:10<00:56,  3.25it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:10<00:45,  3.99it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.48it/s][A
 19%|█▊        | 41/221 [00:11<00:42,  4.24it/s][A
 19%|█▉        | 42/221 [00:11<00:38,  4.67it/s][A
 19%|█▉        | 43/221 [00:11<00:51,  3.44it/s][A
 20%|█▉        | 44/221 [00:12<00:48,  3.67it/s][A
 20%|██        | 45/221 [00:12<00:54,  3.21it/s][A
 21%|██        | 46/221 [00:12<00:45,  3.85it/s][A
 22%|██▏       | 48/221 [00:12<00:30,  5.61it/s][A
 22%|██▏       | 49/221 [00:13<00:30,  5.73it/s][A
 23%|██▎       | 50/221 [00:13<00:34,  5.00it/s][A
 23%|██▎       | 51/221 [00:13<00:38,  4.44it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.36it/s][A
 24%|██▍       | 54/221 [00:14<00:33,  4.94it/s][A
 25%|██▍       | 55/221 [00:14<00:34,  4.83it/s][A
 25%|██▌       | 56/221 [00:14<00:41,  4.01it/s][A
 26%|██▌       | 57/221 [00:15<00:47,  3.46it/s][A
 26%|██▌       | 58/221 [00:15<00:39,  4.15it/s][A
 27%|██▋       | 59/221 [00:15<00:39,  4.07it/s][A
 27%|██▋       | 60/221 [00:15<00:38,  4.14it/s][A
 28%|██▊       | 61/221 [00:16<00:37,  4.23it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.86it/s][A
 29%|██▊       | 63/221 [00:16<00:34,  4.60it/s][A
 29%|██▉       | 64/221 [00:16<00:34,  4.52it/s][A
 29%|██▉       | 65/221 [00:16<00:31,  5.01it/s][A
 30%|██▉       | 66/221 [00:17<00:37,  4.08it/s][A
 30%|███       | 67/221 [00:17<00:54,  2.83it/s][A
 31%|███       | 68/221 [00:17<00:48,  3.18it/s][A
 31%|███       | 69/221 [00:18<00:50,  3.03it/s][A
 32%|███▏      | 70/221 [00:18<00:40,  3.70it/s][A
 32%|███▏      | 71/221 [00:18<00:43,  3.44it/s][A
 33%|███▎      | 72/221 [00:19<00:50,  2.94it/s][A
 33%|███▎      | 73/221 [00:19<00:45,  3.22it/s][A
 33%|███▎      | 74/221 [00:19<00:45,  3.21it/s][A
 34%|███▍      | 75/221 [00:20<00:46,  3.15it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:38,  3.70it/s][A
 35%|███▌      | 78/221 [00:20<00:38,  3.67it/s][A
 36%|███▌      | 79/221 [00:21<00:41,  3.46it/s][A
 36%|███▌      | 80/221 [00:21<00:40,  3.45it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.77it/s][A
 37%|███▋      | 82/221 [00:21<00:35,  3.95it/s][A
 38%|███▊      | 83/221 [00:22<00:32,  4.20it/s][A
 38%|███▊      | 84/221 [00:22<00:35,  3.84it/s][A
 38%|███▊      | 85/221 [00:22<00:41,  3.30it/s][A
 39%|███▉      | 86/221 [00:23<00:37,  3.58it/s][A
 39%|███▉      | 87/221 [00:23<00:49,  2.71it/s][A
 40%|███▉      | 88/221 [00:23<00:43,  3.03it/s][A
 40%|████      | 89/221 [00:24<00:43,  3.01it/s][A
 41%|████      | 90/221 [00:24<00:47,  2.78it/s][A
 41%|████      | 91/221 [00:24<00:39,  3.25it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.30it/s][A
 42%|████▏     | 93/221 [00:25<00:41,  3.08it/s][A
 43%|████▎     | 94/221 [00:25<00:37,  3.37it/s][A
 43%|████▎     | 95/221 [00:26<00:46,  2.72it/s][A
 43%|████▎     | 96/221 [00:26<00:39,  3.17it/s][A
 44%|████▍     | 97/221 [00:26<00:38,  3.26it/s][A
 44%|████▍     | 98/221 [00:27<00:38,  3.20it/s][A
 45%|████▍     | 99/221 [00:27<00:35,  3.47it/s][A
 45%|████▌     | 100/221 [00:27<00:29,  4.09it/s][A
 46%|████▌     | 101/221 [00:27<00:34,  3.47it/s][A
 46%|████▌     | 102/221 [00:28<00:33,  3.56it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.88it/s][A
 48%|████▊     | 105/221 [00:28<00:24,  4.71it/s][A
 48%|████▊     | 106/221 [00:29<00:30,  3.76it/s][A
 48%|████▊     | 107/221 [00:29<00:26,  4.25it/s][A
 49%|████▉     | 108/221 [00:29<00:24,  4.57it/s][A
 49%|████▉     | 109/221 [00:29<00:27,  4.11it/s][A
 50%|████▉     | 110/221 [00:30<00:29,  3.74it/s][A
 50%|█████     | 111/221 [00:30<00:30,  3.64it/s][A
 51%|█████     | 112/221 [00:30<00:30,  3.61it/s][A
 51%|█████     | 113/221 [00:30<00:27,  3.91it/s][A
 52%|█████▏    | 115/221 [00:31<00:21,  5.02it/s][A
 52%|█████▏    | 116/221 [00:31<00:20,  5.12it/s][A
 53%|█████▎    | 117/221 [00:31<00:22,  4.53it/s][A
 53%|█████▎    | 118/221 [00:31<00:27,  3.79it/s][A
 54%|█████▍    | 119/221 [00:32<00:35,  2.89it/s][A
 54%|█████▍    | 120/221 [00:32<00:36,  2.75it/s][A
 55%|█████▍    | 121/221 [00:33<00:29,  3.38it/s][A
 55%|█████▌    | 122/221 [00:33<00:26,  3.72it/s][A
 56%|█████▌    | 123/221 [00:33<00:25,  3.85it/s][A
 56%|█████▌    | 124/221 [00:33<00:31,  3.04it/s][A
 57%|█████▋    | 125/221 [00:34<00:44,  2.16it/s][A
 57%|█████▋    | 126/221 [00:34<00:38,  2.49it/s][A
 57%|█████▋    | 127/221 [00:35<00:45,  2.09it/s][A
 58%|█████▊    | 128/221 [00:35<00:37,  2.47it/s][A
 59%|█████▉    | 130/221 [00:36<00:26,  3.48it/s][A
 59%|█████▉    | 131/221 [00:36<00:25,  3.59it/s][A
 60%|█████▉    | 132/221 [00:36<00:26,  3.40it/s][A
 60%|██████    | 133/221 [00:37<00:30,  2.85it/s][A
 61%|██████    | 134/221 [00:37<00:34,  2.50it/s][A
 61%|██████    | 135/221 [00:37<00:27,  3.15it/s][A
 62%|██████▏   | 136/221 [00:38<00:27,  3.09it/s][A
 62%|██████▏   | 137/221 [00:38<00:24,  3.40it/s][A
 62%|██████▏   | 138/221 [00:38<00:24,  3.46it/s][A
 63%|██████▎   | 139/221 [00:39<00:25,  3.18it/s][A
 63%|██████▎   | 140/221 [00:39<00:22,  3.61it/s][A
 64%|██████▍   | 141/221 [00:39<00:22,  3.61it/s][A
 64%|██████▍   | 142/221 [00:39<00:20,  3.94it/s][A
 65%|██████▍   | 143/221 [00:40<00:20,  3.80it/s][A
 65%|██████▌   | 144/221 [00:40<00:20,  3.70it/s][A
 66%|██████▌   | 145/221 [00:40<00:23,  3.29it/s][A
 66%|██████▌   | 146/221 [00:41<00:23,  3.17it/s][A
 67%|██████▋   | 147/221 [00:41<00:20,  3.62it/s][A
 67%|██████▋   | 148/221 [00:41<00:18,  3.93it/s][A
 67%|██████▋   | 149/221 [00:41<00:19,  3.66it/s][A
 68%|██████▊   | 150/221 [00:42<00:18,  3.84it/s][A
 68%|██████▊   | 151/221 [00:42<00:28,  2.43it/s][A
 69%|██████▉   | 152/221 [00:43<00:37,  1.83it/s][A
 69%|██████▉   | 153/221 [00:43<00:31,  2.16it/s][A
 70%|██████▉   | 154/221 [00:44<00:25,  2.59it/s][A
 70%|███████   | 155/221 [00:44<00:27,  2.40it/s][A
 71%|███████   | 156/221 [00:44<00:24,  2.67it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.86it/s][A
 71%|███████▏  | 158/221 [00:45<00:24,  2.56it/s][A
 72%|███████▏  | 159/221 [00:45<00:19,  3.17it/s][A
 72%|███████▏  | 160/221 [00:46<00:20,  2.96it/s][A
 73%|███████▎  | 161/221 [00:46<00:17,  3.36it/s][A
 73%|███████▎  | 162/221 [00:46<00:15,  3.71it/s][A
 74%|███████▍  | 163/221 [00:46<00:14,  3.91it/s][A
 74%|███████▍  | 164/221 [00:46<00:13,  4.38it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.89it/s][A
 75%|███████▌  | 166/221 [00:47<00:14,  3.70it/s][A
 76%|███████▌  | 167/221 [00:47<00:12,  4.46it/s][A
 76%|███████▌  | 168/221 [00:47<00:12,  4.36it/s][A
 76%|███████▋  | 169/221 [00:48<00:10,  4.78it/s][A
 77%|███████▋  | 170/221 [00:48<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:49<00:19,  2.60it/s][A
 78%|███████▊  | 172/221 [00:49<00:16,  3.02it/s][A
 78%|███████▊  | 173/221 [00:49<00:16,  2.99it/s][A
 79%|███████▊  | 174/221 [00:49<00:13,  3.58it/s][A
 79%|███████▉  | 175/221 [00:50<00:13,  3.37it/s][A
 80%|███████▉  | 176/221 [00:50<00:11,  3.83it/s][A
 80%|████████  | 177/221 [00:50<00:11,  3.84it/s][A
 81%|████████  | 178/221 [00:51<00:14,  2.98it/s][A
 81%|████████  | 179/221 [00:51<00:13,  3.06it/s][A
 82%|████████▏ | 181/221 [00:51<00:09,  4.05it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  4.00it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.74it/s][A
 83%|████████▎ | 184/221 [00:52<00:09,  3.79it/s][A
 84%|████████▎ | 185/221 [00:52<00:08,  4.24it/s][A
 84%|████████▍ | 186/221 [00:53<00:09,  3.52it/s][A
 85%|████████▍ | 187/221 [00:53<00:08,  3.90it/s][A
 85%|████████▌ | 188/221 [00:53<00:07,  4.25it/s][A
 86%|████████▌ | 189/221 [00:53<00:06,  4.60it/s][A
 86%|████████▌ | 190/221 [00:54<00:09,  3.21it/s][A
 86%|████████▋ | 191/221 [00:54<00:07,  3.97it/s][A
 87%|████████▋ | 192/221 [00:54<00:06,  4.32it/s][A
 87%|████████▋ | 193/221 [00:54<00:05,  4.69it/s][A
 88%|████████▊ | 194/221 [00:55<00:07,  3.78it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  3.89it/s][A
 89%|████████▊ | 196/221 [00:55<00:08,  2.83it/s][A
 89%|████████▉ | 197/221 [00:56<00:09,  2.60it/s][A
 90%|████████▉ | 198/221 [00:56<00:08,  2.60it/s][A
 90%|█████████ | 199/221 [00:56<00:07,  3.13it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.23it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.64it/s][A
 91%|█████████▏| 202/221 [00:57<00:05,  3.60it/s][A
 92%|█████████▏| 203/221 [00:57<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [00:58<00:04,  3.71it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.80it/s][A
 93%|█████████▎| 206/221 [00:59<00:05,  2.74it/s][A
 94%|█████████▎| 207/221 [00:59<00:04,  2.88it/s][A
 94%|█████████▍| 208/221 [00:59<00:04,  3.15it/s][A
 95%|█████████▍| 209/221 [00:59<00:03,  3.14it/s][A
 95%|█████████▌| 210/221 [01:00<00:02,  3.88it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  4.01it/s][A
 96%|█████████▌| 212/221 [01:00<00:02,  3.38it/s][A
 96%|█████████▋| 213/221 [01:00<00:02,  3.39it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  3.06it/s][A
 97%|█████████▋| 215/221 [01:01<00:02,  2.95it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  3.00it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  3.11it/s][A
 99%|█████████▊| 218/221 [01:02<00:00,  3.22it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.84it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.33it/s][A
100%|██████████| 221/221 [01:03<00:00,  3.17it/s][A100%|██████████| 221/221 [01:03<00:00,  3.47it/s]
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'area_r1': 41.0, 'area_recall': '41.0/68.4/76.1', 'area_ravg': 61.8}
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'forward_r1': 37.1, 'forward_recall': '37.1/62.8/74.4', 'forward_ravg': 58.1}
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 02:08:43 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 02:08:43 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'area_video_r1': 51.4, 'area_video_recall': '51.4/74.9/82.6', 'area_video_ravg': 69.6, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/71.7/80.9', 'area_video_back_ravg': 67.1}
09/17/2024 02:08:43 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 02:08:43 - INFO - __main__ -   {'area_video_r1': 51.9, 'area_video_recall': '51.9/75.8/82.5', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/70.9/79.8', 'area_video_back_ravg': 66.5}
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'video_r1': 36.4, 'video_recall': '36.4/64.6/74.5', 'video_ravg': 58.5}
09/17/2024 02:08:43 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 02:08:43 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 02:08:43 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 349--===========

09/17/2024 02:08:43 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/75.5/82.1', 'video_ravg': 69.8}
09/17/2024 02:08:43 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 349=======

09/17/2024 02:08:43 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/75.5/82.1', 'video_ravg': 69.8}
09/17/2024 02:09:14 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.011313090100884438, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.501508116722107, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.3642935752868652, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.877114772796631}
[h264 @ 0x557681b0f7c0] mmco: unref short failure
 12%|█▏        | 350/2910 [2:13:17<95:40:52, 134.55s/it] 12%|█▏        | 351/2910 [2:13:21<67:45:50, 95.33s/it]  12%|█▏        | 352/2910 [2:13:25<48:17:18, 67.96s/it][h264 @ 0x557674dbb100] mmco: unref short failure
 12%|█▏        | 353/2910 [2:13:30<34:44:50, 48.92s/it][h264 @ 0x56348d1312c0] mmco: unref short failure
[h264 @ 0x56348d1312c0] mmco: unref short failure
 12%|█▏        | 354/2910 [2:13:35<25:20:48, 35.70s/it][h264 @ 0x557686bbea00] mmco: unref short failure
[h264 @ 0x557686bbea00] mmco: unref short failure
[h264 @ 0x557686bbea00] mmco: unref short failure
[h264 @ 0x557686bbea00] mmco: unref short failure
[h264 @ 0x5576702ccd40] mmco: unref short failure
[h264 @ 0x5576702ccd40] mmco: unref short failure
 12%|█▏        | 355/2910 [2:13:40<18:52:08, 26.59s/it][h264 @ 0x558599e01740] mmco: unref short failure
[h264 @ 0x558599e01740] mmco: unref short failure
 12%|█▏        | 356/2910 [2:13:46<14:24:37, 20.31s/it][h264 @ 0x558598115f80] mmco: unref short failure
 12%|█▏        | 357/2910 [2:13:52<11:22:24, 16.04s/it] 12%|█▏        | 358/2910 [2:13:58<9:12:10, 12.98s/it] [h264 @ 0x555617259780] mmco: unref short failure
[h264 @ 0x5556257c2980] mmco: unref short failure
 12%|█▏        | 359/2910 [2:14:03<7:39:43, 10.81s/it][h264 @ 0x557681239400] mmco: unref short failure
[h264 @ 0x557681239400] mmco: unref short failure
 12%|█▏        | 360/2910 [2:14:10<6:42:55,  9.48s/it] 12%|█▏        | 361/2910 [2:14:18<6:27:01,  9.11s/it][h264 @ 0x555625842240] mmco: unref short failure
[h264 @ 0x555625842240] mmco: unref short failure
 12%|█▏        | 362/2910 [2:14:24<5:50:27,  8.25s/it] 12%|█▏        | 363/2910 [2:14:32<5:45:58,  8.15s/it][h264 @ 0x55561a69d280] mmco: unref short failure
[h264 @ 0x55561a69d280] mmco: unref short failure
[h264 @ 0x55766fc138c0] mmco: unref short failure
[h264 @ 0x55766fc138c0] mmco: unref short failure
[h264 @ 0x55561a69d280] mmco: unref short failure
[h264 @ 0x55561a69d280] mmco: unref short failure
 13%|█▎        | 364/2910 [2:14:39<5:30:12,  7.78s/it] 13%|█▎        | 365/2910 [2:14:45<5:07:28,  7.25s/it][h264 @ 0x563494166f40] mmco: unref short failure
[h264 @ 0x563494166f40] mmco: unref short failure
09/17/2024 02:10:53 - INFO - __main__ -   current idx 3bpzUtvVmrY.16 from finetune_area returns wrong image/video, use 28433 instead.
[h264 @ 0x55562c052540] mmco: unref short failure
[h264 @ 0x55562c052540] mmco: unref short failure
[h264 @ 0x558583d4ea80] mmco: unref short failure
[h264 @ 0x5585a13b1a00] mmco: unref short failure
[h264 @ 0x5585a13b1a00] mmco: unref short failure
[h264 @ 0x55857e9e1f40] mmco: unref short failure
[h264 @ 0x555623024bc0] mmco: unref short failure
[h264 @ 0x555623024bc0] mmco: unref short failure
[h264 @ 0x557671abf600] mmco: unref short failure
[h264 @ 0x557671abf600] mmco: unref short failure
[h264 @ 0x557671abf600] mmco: unref short failure
[h264 @ 0x557671abf600] mmco: unref short failure
[h264 @ 0x55561d871600] mmco: unref short failure
[h264 @ 0x555617c0e9c0] mmco: unref short failure
[h264 @ 0x555617c0e9c0] mmco: unref short failure
 13%|█▎        | 366/2910 [2:15:26<12:12:49, 17.28s/it][h264 @ 0x56349d5fc780] mmco: unref short failure
[h264 @ 0x56349d5fc780] mmco: unref short failure
[h264 @ 0x557670592340] mmco: unref short failure
[h264 @ 0x557670592340] mmco: unref short failure
09/17/2024 02:11:33 - INFO - __main__ -   current idx Qvo7ULfoowQ.43 from finetune_area returns wrong image/video, use 120356 instead.
[h264 @ 0x5576702e8b40] mmco: unref short failure
[h264 @ 0x55561730b6c0] mmco: unref short failure
[h264 @ 0x558592fe5200] mmco: unref short failure
[h264 @ 0x558592fe5200] mmco: unref short failure
 13%|█▎        | 367/2910 [2:15:45<12:30:47, 17.71s/it][h264 @ 0x5585831dbbc0] mmco: unref short failure
[h264 @ 0x5585831dbbc0] mmco: unref short failure
 13%|█▎        | 368/2910 [2:15:50<10:00:27, 14.17s/it][h264 @ 0x5634959d7000] mmco: unref short failure
[h264 @ 0x5634959d7000] mmco: unref short failure
[h264 @ 0x55768a629300] mmco: unref short failure
[h264 @ 0x55768a629300] mmco: unref short failure
[h264 @ 0x555638ae9600] mmco: unref short failure
 13%|█▎        | 369/2910 [2:15:56<8:08:19, 11.53s/it] [h264 @ 0x558588a3b080] mmco: unref short failure
[h264 @ 0x5556184d9400] mmco: unref short failure
[h264 @ 0x5585872f8040] mmco: unref short failure
[h264 @ 0x5585872f8040] mmco: unref short failure
 13%|█▎        | 370/2910 [2:16:17<10:12:23, 14.47s/it][h264 @ 0x55767aae7fc0] mmco: unref short failure
[h264 @ 0x55767aae7fc0] mmco: unref short failure
[av1 @ 0x55562a739100] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x55562a739100] Failed to get pixel format.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x55562a739100] Failed to get pixel format.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x55562a739100] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Missing Sequence Header.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
[av1 @ 0x5556177dd5c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556177dd5c0] Failed to get pixel format.
 13%|█▎        | 371/2910 [2:16:23<8:25:24, 11.94s/it] [h264 @ 0x55857e9e1f40] mmco: unref short failure
[h264 @ 0x55857e9e1f40] mmco: unref short failure
[h264 @ 0x55857e9e1f40] mmco: unref short failure
 13%|█▎        | 372/2910 [2:16:30<7:16:52, 10.33s/it][h264 @ 0x55858139bd00] mmco: unref short failure
 13%|█▎        | 373/2910 [2:16:38<6:53:16,  9.77s/it][h264 @ 0x5576738f7400] mmco: unref short failure
[h264 @ 0x5576769dabc0] mmco: unref short failure
[h264 @ 0x5576769dabc0] mmco: unref short failure
[h264 @ 0x5576769dabc0] mmco: unref short failure
[h264 @ 0x5576769dabc0] mmco: unref short failure
[h264 @ 0x5556172ab240] mmco: unref short failure
[h264 @ 0x5556172ab240] mmco: unref short failure
[h264 @ 0x55767e805d00] mmco: unref short failure
[h264 @ 0x55766a756e80] mmco: unref short failure
[h264 @ 0x55766a756e80] mmco: unref short failure
09/17/2024 02:13:00 - INFO - __main__ -   current idx budftLR432g.60 from finetune_area returns wrong image/video, use 61327 instead.
[h264 @ 0x5556185dce80] mmco: unref short failure
[h264 @ 0x5556185dce80] mmco: unref short failure
[h264 @ 0x55857e978380] mmco: unref short failure
[h264 @ 0x55857e978380] mmco: unref short failure
[h264 @ 0x5634afd04840] mmco: unref short failure
09/17/2024 02:13:06 - INFO - __main__ -   current idx WwLGb5RDcG0.21 from finetune_area returns wrong image/video, use 84277 instead.
09/17/2024 02:13:09 - INFO - __main__ -   current idx JZAjDUTk1oc.91 from finetune_area returns wrong image/video, use 146093 instead.
09/17/2024 02:13:13 - INFO - __main__ -   current idx _-um52MYvA8.26 from finetune_area returns wrong image/video, use 60048 instead.
[h264 @ 0x563496e10e40] mmco: unref short failure
[h264 @ 0x563496e10e40] mmco: unref short failure
[h264 @ 0x563496e10e40] mmco: unref short failure
[h264 @ 0x55857ea341c0] mmco: unref short failure
09/17/2024 02:13:22 - INFO - __main__ -   current idx ybadhoHjH4Q.28 from finetune_area returns wrong image/video, use 77530 instead.
[h264 @ 0x563499e77a00] mmco: unref short failure
[h264 @ 0x563499e77a00] mmco: unref short failure
[h264 @ 0x563493b3eb80] mmco: unref short failure
 13%|█▎        | 374/2910 [2:17:54<20:44:49, 29.45s/it][h264 @ 0x55859605e9c0] mmco: unref short failure
[h264 @ 0x55859605e9c0] mmco: unref short failure
[h264 @ 0x5556171c6e40] mmco: unref short failure
[h264 @ 0x5556171c6e40] mmco: unref short failure
[h264 @ 0x55859adc1100] mmco: unref short failure
[h264 @ 0x55859adc1100] mmco: unref short failure
[h264 @ 0x5576710f3b80] mmco: unref short failure
[h264 @ 0x5556171a9040] mmco: unref short failure
[h264 @ 0x5556171a9040] mmco: unref short failure
 13%|█▎        | 375/2910 [2:18:11<18:16:35, 25.95s/it][h264 @ 0x5576738f7400] mmco: unref short failure
[h264 @ 0x557674813800] mmco: unref short failure
[h264 @ 0x557674813800] mmco: unref short failure
 13%|█▎        | 376/2910 [2:18:20<14:35:59, 20.74s/it][h264 @ 0x55857e273cc0] mmco: unref short failure
 13%|█▎        | 377/2910 [2:18:26<11:29:48, 16.34s/it][h264 @ 0x5556213c67c0] mmco: unref short failure
[h264 @ 0x5556213c67c0] mmco: unref short failure
[h264 @ 0x558582fcbd80] mmco: unref short failure
[h264 @ 0x55857e952f40] mmco: unref short failure
[h264 @ 0x55857e952f40] mmco: unref short failure
[h264 @ 0x55561717dc80] mmco: unref short failure
[h264 @ 0x55561717dc80] mmco: unref short failure
[h264 @ 0x55561717dc80] mmco: unref short failure
[h264 @ 0x55561717dc80] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
 13%|█▎        | 378/2910 [2:18:55<14:06:37, 20.06s/it][h264 @ 0x5634ae62b0c0] mmco: unref short failure
[h264 @ 0x55766c64c240] mmco: unref short failure
 13%|█▎        | 379/2910 [2:19:01<11:13:09, 15.96s/it][h264 @ 0x555617cb27c0] mmco: unref short failure
 13%|█▎        | 380/2910 [2:19:07<9:03:40, 12.89s/it] [h264 @ 0x5556190d9a80] mmco: unref short failure
[h264 @ 0x5556190d9a80] mmco: unref short failure
 13%|█▎        | 381/2910 [2:19:14<7:53:19, 11.23s/it][h264 @ 0x55561f7a5180] mmco: unref short failure
[h264 @ 0x55561f7a5180] mmco: unref short failure
[h264 @ 0x563499dfbf00] mmco: unref short failure
[h264 @ 0x563499dfbf00] mmco: unref short failure
[h264 @ 0x56348d267ac0] mmco: unref short failure
[h264 @ 0x56348d267ac0] mmco: unref short failure
[h264 @ 0x563496926680] mmco: unref short failure
[h264 @ 0x563496926680] mmco: unref short failure
[h264 @ 0x5634b0367080] mmco: unref short failure
[h264 @ 0x5634b0367080] mmco: unref short failure
[h264 @ 0x563497c800c0] mmco: unref short failure
[h264 @ 0x563497c800c0] mmco: unref short failure
[h264 @ 0x55858fa0a240] mmco: unref short failure
[h264 @ 0x55858fa0a240] mmco: unref short failure
[h264 @ 0x55562c728ec0] mmco: unref short failure
[h264 @ 0x55562c728ec0] mmco: unref short failure
[h264 @ 0x5576841ef100] mmco: unref short failure
[h264 @ 0x5576841ef100] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
09/17/2024 02:15:51 - INFO - __main__ -   current idx VIh8Li4uUFk.0 from finetune_area returns wrong image/video, use 28920 instead.
[h264 @ 0x5556171c6e40] mmco: unref short failure
[h264 @ 0x5556171c6e40] mmco: unref short failure
[h264 @ 0x5634ab7c3c00] mmco: unref short failure
[h264 @ 0x55857e953740] mmco: unref short failure
[h264 @ 0x5585958783c0] mmco: unref short failure
[h264 @ 0x5585958783c0] mmco: unref short failure
[h264 @ 0x5585958783c0] mmco: unref short failure
[h264 @ 0x5585958783c0] mmco: unref short failure
[h264 @ 0x558587e593c0] mmco: unref short failure
[h264 @ 0x558587e593c0] mmco: unref short failure
[h264 @ 0x558587e593c0] mmco: unref short failure
[h264 @ 0x558587e593c0] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
[h264 @ 0x557678b87b80] mmco: unref short failure
[h264 @ 0x557678b87b80] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
[h264 @ 0x557677bc2680] mmco: unref short failure
 13%|█▎        | 382/2910 [2:20:26<20:33:31, 29.28s/it][h264 @ 0x5576759b1e40] mmco: unref short failure
[h264 @ 0x563490f342c0] mmco: unref short failure
 13%|█▎        | 383/2910 [2:20:38<17:01:43, 24.26s/it][h264 @ 0x55767d70e3c0] mmco: unref short failure
[h264 @ 0x5634a800d3c0] mmco: unref short failure
[h264 @ 0x5634a800d3c0] mmco: unref short failure
 13%|█▎        | 384/2910 [2:20:56<15:38:26, 22.29s/it][h264 @ 0x558589d75800] mmco: unref short failure
[h264 @ 0x558589d75800] mmco: unref short failure
 13%|█▎        | 385/2910 [2:21:02<12:16:08, 17.49s/it][h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
[h264 @ 0x555639db9f40] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
[h264 @ 0x5556255c1d80] mmco: unref short failure
[h264 @ 0x558592146440] mmco: unref short failure
[h264 @ 0x558592146440] mmco: unref short failure
 13%|█▎        | 386/2910 [2:21:22<12:48:01, 18.26s/it]09/17/2024 02:17:21 - INFO - __main__ -   current idx cUO419RDXpY.18 from finetune_area returns wrong image/video, use 142751 instead.
 13%|█▎        | 387/2910 [2:21:28<10:14:32, 14.61s/it] 13%|█▎        | 388/2910 [2:21:34<8:24:30, 12.00s/it]  13%|█▎        | 389/2910 [2:21:41<7:17:08, 10.40s/it][h264 @ 0x55561717dc80] mmco: unref short failure
[h264 @ 0x56349772d240] mmco: unref short failure
[h264 @ 0x56349772d240] mmco: unref short failure
09/17/2024 02:17:44 - INFO - __main__ -   current idx bFHOzJ5hSFg.79 from finetune_area returns wrong image/video, use 93857 instead.
09/17/2024 02:17:46 - INFO - __main__ -   current idx aan7-sOxqOc.37 from finetune_area returns wrong image/video, use 133099 instead.
[h264 @ 0x55857e953740] mmco: unref short failure
[h264 @ 0x558590acb800] mmco: unref short failure
[h264 @ 0x558590acb800] mmco: unref short failure
[h264 @ 0x558590acb800] mmco: unref short failure
[h264 @ 0x558590acb800] mmco: unref short failure
[h264 @ 0x5576832a3900] mmco: unref short failure
[h264 @ 0x5576832a3900] mmco: unref short failure
[h264 @ 0x55858e4fb380] mmco: unref short failure
[h264 @ 0x55858e4fb380] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x563496a06b40] mmco: unref short failure
[h264 @ 0x563496a06b40] mmco: unref short failure
09/17/2024 02:18:18 - INFO - __main__ -   current idx ulxAF450jro.5 from finetune_area returns wrong image/video, use 50708 instead.
[h264 @ 0x5634ab88fa40] mmco: unref short failure
[h264 @ 0x5634ab88fa40] mmco: unref short failure
[h264 @ 0x563490f342c0] mmco: unref short failure
[h264 @ 0x563490f342c0] mmco: unref short failure
[h264 @ 0x5556170d0040] mmco: unref short failure
[h264 @ 0x5556170d0040] mmco: unref short failure
[h264 @ 0x5556170d0040] mmco: unref short failure
[h264 @ 0x5556170d0040] mmco: unref short failure
[h264 @ 0x557669fb5c00] mmco: unref short failure
[h264 @ 0x557669fb5c00] mmco: unref short failure
 13%|█▎        | 390/2910 [2:22:56<20:48:09, 29.72s/it] 13%|█▎        | 391/2910 [2:23:03<15:59:14, 22.85s/it][h264 @ 0x563497bcc300] mmco: unref short failure
[h264 @ 0x563497bcc300] mmco: unref short failure
[h264 @ 0x563497bcc300] mmco: unref short failure
[h264 @ 0x563497bcc300] mmco: unref short failure
[h264 @ 0x56348d267ac0] mmco: unref short failure
[h264 @ 0x55561b4bb080] mmco: unref short failure
[h264 @ 0x55561b4bb080] mmco: unref short failure
[h264 @ 0x555618628b40] mmco: unref short failure
[h264 @ 0x55561f7c3cc0] mmco: unref short failure
[h264 @ 0x55561f7c3cc0] mmco: unref short failure
 13%|█▎        | 392/2910 [2:23:18<14:26:50, 20.66s/it][h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
 14%|█▎        | 393/2910 [2:23:24<11:19:37, 16.20s/it][h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x55766a291e00] mmco: unref short failure
[h264 @ 0x55766a291e00] mmco: unref short failure
[h264 @ 0x5556185d2600] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
[h264 @ 0x558584834780] mmco: unref short failure
 14%|█▎        | 394/2910 [2:23:42<11:49:14, 16.91s/it][h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x55766eb32ac0] mmco: unref short failure
 14%|█▎        | 395/2910 [2:23:54<10:37:13, 15.20s/it][h264 @ 0x55767f201140] mmco: unref short failure
[h264 @ 0x5576822d3300] mmco: unref short failure
[h264 @ 0x5576822d3300] mmco: unref short failure
[h264 @ 0x558591550500] mmco: unref short failure
[h264 @ 0x558591550500] mmco: unref short failure
[h264 @ 0x558591550500] mmco: unref short failure
[h264 @ 0x558591550500] mmco: unref short failure
[h264 @ 0x555621a83700] mmco: unref short failure
[h264 @ 0x563497403300] mmco: unref short failure
[h264 @ 0x563497403300] mmco: unref short failure
[h264 @ 0x55767035cc00] mmco: unref short failure
[h264 @ 0x55767035cc00] mmco: unref short failure
[h264 @ 0x55561a8a55c0] mmco: unref short failure
[h264 @ 0x55561a8a55c0] mmco: unref short failure
 14%|█▎        | 396/2910 [2:24:08<10:21:51, 14.84s/it][h264 @ 0x557671b240c0] mmco: unref short failure
 14%|█▎        | 397/2910 [2:24:14<8:28:52, 12.15s/it] [h264 @ 0x5576708eef40] mmco: unref short failure
[h264 @ 0x563497fbaf00] mmco: unref short failure
[h264 @ 0x5634a7dbbec0] mmco: unref short failure
[h264 @ 0x5634a7dbbec0] mmco: unref short failure
[h264 @ 0x55562912a740] mmco: unref short failure
[h264 @ 0x55562912a740] mmco: unref short failure
[h264 @ 0x558591562ec0] mmco: unref short failure
[h264 @ 0x558591562ec0] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x56348e8219c0] mmco: unref short failure
[h264 @ 0x56348e8219c0] mmco: unref short failure
[h264 @ 0x55767aff7240] mmco: unref short failure
[h264 @ 0x557669dfe180] mmco: unref short failure
09/17/2024 02:20:58 - INFO - __main__ -   current idx eBDMGQmep9I.8 from finetune_area returns wrong image/video, use 47055 instead.
[h264 @ 0x558582fcbd80] mmco: unref short failure
[h264 @ 0x56348dfbde40] mmco: unref short failure
[h264 @ 0x56348dfbde40] mmco: unref short failure
[h264 @ 0x56348dfbde40] mmco: unref short failure
[h264 @ 0x56348dfbde40] mmco: unref short failure
[h264 @ 0x55859674af40] mmco: unref short failure
[h264 @ 0x558591550500] mmco: unref short failure
[h264 @ 0x558598098300] mmco: unref short failure
[h264 @ 0x557673649080] mmco: unref short failure
[h264 @ 0x55767e7604c0] mmco: unref short failure
 14%|█▎        | 398/2910 [2:25:24<20:46:25, 29.77s/it] 14%|█▎        | 399/2910 [2:25:31<15:50:09, 22.70s/it]09/17/2024 02:21:30 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:21:30 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558588cc2380] mmco: unref short failure
[h264 @ 0x558588cc2380] mmco: unref short failure
[h264 @ 0x5585865aba80] mmco: unref short failure
[h264 @ 0x5585865aba80] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
[h264 @ 0x558586a66bc0] mmco: unref short failure
09/17/2024 02:21:54 - INFO - __main__ -   current idx YSb87fytH2o.16 from finetune_area returns wrong image/video, use 57613 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563498337d40] mmco: unref short failure
[h264 @ 0x563491f542c0] mmco: unref short failure
[h264 @ 0x563491f542c0] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x5556202f4ec0] mmco: unref short failure
[h264 @ 0x55562f598c40] mmco: unref short failure
[h264 @ 0x5634ad065600] mmco: unref short failure
[h264 @ 0x557682e249c0] mmco: unref short failure
[h264 @ 0x557682e249c0] mmco: unref short failure
[h264 @ 0x55767991dac0] mmco: unref short failure
[h264 @ 0x563494ff8ec0] mmco: unref short failure
[h264 @ 0x563494ff8ec0] mmco: unref short failure
[h264 @ 0x5556171e01c0] mmco: unref short failure
[h264 @ 0x558591c5e680] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:07,  1.72it/s][A
  1%|          | 2/221 [00:01<01:53,  1.92it/s][A
  1%|▏         | 3/221 [00:01<01:24,  2.59it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.74it/s][A
  3%|▎         | 6/221 [00:01<00:53,  4.02it/s][A
  3%|▎         | 7/221 [00:02<00:56,  3.81it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.35it/s][A
  4%|▍         | 9/221 [00:02<01:13,  2.89it/s][A
  5%|▍         | 10/221 [00:03<01:20,  2.61it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.25it/s][A
  5%|▌         | 12/221 [00:04<01:18,  2.66it/s][A
  6%|▌         | 13/221 [00:04<01:14,  2.80it/s][A
  6%|▋         | 14/221 [00:04<01:09,  2.97it/s][A
  7%|▋         | 15/221 [00:05<01:07,  3.07it/s][A
  7%|▋         | 16/221 [00:05<01:11,  2.87it/s][A
  8%|▊         | 17/221 [00:06<01:28,  2.32it/s][A
[h264 @ 0x55857e8ee6c0] mmco: unref short failure
[h264 @ 0x55857e8ee6c0] mmco: unref short failure
  8%|▊         | 18/221 [00:06<01:21,  2.48it/s][A
  9%|▊         | 19/221 [00:06<01:06,  3.02it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.60it/s][A
 10%|▉         | 21/221 [00:07<00:58,  3.43it/s][A
 10%|▉         | 22/221 [00:07<01:05,  3.02it/s][A
 10%|█         | 23/221 [00:07<00:52,  3.76it/s][A
 11%|█         | 24/221 [00:07<00:45,  4.29it/s][A
 11%|█▏        | 25/221 [00:07<00:42,  4.58it/s][A
 12%|█▏        | 26/221 [00:08<00:59,  3.28it/s][A
 13%|█▎        | 28/221 [00:09<00:59,  3.26it/s][A
 13%|█▎        | 29/221 [00:09<01:11,  2.70it/s][A
 14%|█▎        | 30/221 [00:09<01:09,  2.76it/s][A
 14%|█▍        | 31/221 [00:10<01:05,  2.89it/s][A
 14%|█▍        | 32/221 [00:10<00:52,  3.58it/s][A
 15%|█▍        | 33/221 [00:10<00:47,  3.94it/s][A
 15%|█▌        | 34/221 [00:10<00:41,  4.56it/s][A
 16%|█▌        | 35/221 [00:11<00:46,  4.04it/s][A
 16%|█▋        | 36/221 [00:11<01:03,  2.91it/s][A
 17%|█▋        | 37/221 [00:12<01:24,  2.19it/s][A
 17%|█▋        | 38/221 [00:12<01:30,  2.03it/s][A
 18%|█▊        | 39/221 [00:13<01:24,  2.15it/s][A
 18%|█▊        | 40/221 [00:13<01:21,  2.23it/s][A
 19%|█▊        | 41/221 [00:13<01:04,  2.80it/s][A
 19%|█▉        | 42/221 [00:14<01:17,  2.32it/s][A
 19%|█▉        | 43/221 [00:14<01:03,  2.80it/s][A
 20%|█▉        | 44/221 [00:14<00:49,  3.54it/s][A
 20%|██        | 45/221 [00:15<01:13,  2.40it/s][A
 21%|██        | 46/221 [00:15<01:13,  2.37it/s][A
 21%|██▏       | 47/221 [00:16<01:15,  2.30it/s][A
 22%|██▏       | 48/221 [00:16<01:01,  2.82it/s][A
 22%|██▏       | 49/221 [00:17<01:15,  2.27it/s][A
 23%|██▎       | 50/221 [00:17<01:04,  2.64it/s][A
 23%|██▎       | 51/221 [00:17<00:51,  3.31it/s][A
 24%|██▎       | 52/221 [00:17<00:45,  3.71it/s][A
 24%|██▍       | 53/221 [00:17<00:40,  4.18it/s][A
 24%|██▍       | 54/221 [00:19<01:52,  1.48it/s][A
 25%|██▍       | 55/221 [00:19<01:35,  1.73it/s][A
 25%|██▌       | 56/221 [00:20<01:22,  1.99it/s][A
 26%|██▌       | 57/221 [00:20<01:15,  2.16it/s][A
 26%|██▌       | 58/221 [00:20<01:06,  2.45it/s][A
 27%|██▋       | 59/221 [00:21<01:03,  2.56it/s][A
 27%|██▋       | 60/221 [00:22<01:35,  1.69it/s][A
 28%|██▊       | 61/221 [00:22<01:19,  2.02it/s][A
 28%|██▊       | 62/221 [00:22<01:12,  2.21it/s][A
 29%|██▊       | 63/221 [00:23<00:58,  2.68it/s][A
 29%|██▉       | 64/221 [00:23<00:50,  3.13it/s][A
[h264 @ 0x5634942be7c0] mmco: unref short failure
 29%|██▉       | 65/221 [00:23<00:48,  3.20it/s][A
 30%|██▉       | 66/221 [00:24<01:01,  2.51it/s][A
 30%|███       | 67/221 [00:24<01:18,  1.96it/s][A
 31%|███       | 68/221 [00:25<01:08,  2.23it/s][A
 31%|███       | 69/221 [00:25<01:08,  2.22it/s][A
 32%|███▏      | 70/221 [00:25<00:57,  2.62it/s][A
 32%|███▏      | 71/221 [00:26<01:19,  1.89it/s][A
 33%|███▎      | 72/221 [00:27<01:16,  1.96it/s][A
 33%|███▎      | 73/221 [00:27<01:12,  2.05it/s][A
 33%|███▎      | 74/221 [00:27<00:58,  2.53it/s][A
 34%|███▍      | 75/221 [00:28<00:53,  2.72it/s][A
 34%|███▍      | 76/221 [00:28<00:48,  3.01it/s][A
 35%|███▍      | 77/221 [00:28<00:48,  3.00it/s][A
 35%|███▌      | 78/221 [00:29<00:46,  3.10it/s][A
 36%|███▌      | 79/221 [00:29<00:58,  2.43it/s][A
 36%|███▌      | 80/221 [00:30<00:52,  2.68it/s][A
 37%|███▋      | 81/221 [00:30<00:44,  3.14it/s][A
 37%|███▋      | 82/221 [00:30<00:53,  2.58it/s][A
 38%|███▊      | 83/221 [00:31<00:55,  2.50it/s][A
 38%|███▊      | 84/221 [00:31<00:49,  2.77it/s][A
 38%|███▊      | 85/221 [00:31<00:38,  3.51it/s][A
 39%|███▉      | 86/221 [00:31<00:39,  3.46it/s][A
 39%|███▉      | 87/221 [00:32<00:58,  2.30it/s][A
 40%|███▉      | 88/221 [00:33<01:03,  2.11it/s][A
 40%|████      | 89/221 [00:33<01:05,  2.02it/s][A
 41%|████      | 90/221 [00:33<00:53,  2.43it/s][A
 41%|████      | 91/221 [00:34<00:44,  2.89it/s][A
 42%|████▏     | 92/221 [00:34<00:43,  2.98it/s][A
 42%|████▏     | 93/221 [00:34<00:44,  2.91it/s][A
 43%|████▎     | 94/221 [00:35<00:41,  3.06it/s][A
 43%|████▎     | 95/221 [00:35<00:39,  3.18it/s][A
 43%|████▎     | 96/221 [00:35<00:40,  3.06it/s][A
 44%|████▍     | 97/221 [00:35<00:33,  3.71it/s][A
 44%|████▍     | 98/221 [00:36<00:38,  3.17it/s][A
 45%|████▍     | 99/221 [00:36<00:31,  3.88it/s][A
 45%|████▌     | 100/221 [00:36<00:31,  3.85it/s][A
 46%|████▌     | 101/221 [00:36<00:27,  4.38it/s][A
 46%|████▌     | 102/221 [00:37<00:32,  3.69it/s][A
 47%|████▋     | 103/221 [00:37<00:27,  4.36it/s][A
 47%|████▋     | 104/221 [00:37<00:24,  4.84it/s][A
 48%|████▊     | 105/221 [00:37<00:27,  4.16it/s][A
 48%|████▊     | 106/221 [00:38<00:53,  2.16it/s][A
 48%|████▊     | 107/221 [00:38<00:42,  2.69it/s][A[h264 @ 0x5634942be7c0] mmco: unref short failure
[h264 @ 0x5634942be7c0] mmco: unref short failure

 49%|████▉     | 108/221 [00:39<00:38,  2.91it/s][A
 49%|████▉     | 109/221 [00:39<00:36,  3.03it/s][A
 50%|████▉     | 110/221 [00:40<00:43,  2.57it/s][A[h264 @ 0x55766a27bd00] mmco: unref short failure
[h264 @ 0x55766a27bd00] mmco: unref short failure

 50%|█████     | 111/221 [00:40<00:50,  2.19it/s][A
 51%|█████     | 112/221 [00:40<00:42,  2.57it/s][A
 51%|█████     | 113/221 [00:41<00:43,  2.47it/s][A
 52%|█████▏    | 114/221 [00:41<00:40,  2.65it/s][A
 52%|█████▏    | 115/221 [00:41<00:35,  3.02it/s][A[h264 @ 0x5576877cf280] mmco: unref short failure
[h264 @ 0x5576877cf280] mmco: unref short failure

 52%|█████▏    | 116/221 [00:43<01:28,  1.18it/s][A
[h264 @ 0x55562210c340] mmco: unref short failure
 53%|█████▎    | 117/221 [00:44<01:14,  1.40it/s][A
 53%|█████▎    | 118/221 [00:44<00:59,  1.72it/s][A
 54%|█████▍    | 119/221 [00:45<00:56,  1.81it/s][A
 54%|█████▍    | 120/221 [00:45<00:50,  2.00it/s][A
 55%|█████▍    | 121/221 [00:45<00:39,  2.52it/s][A
 55%|█████▌    | 122/221 [00:45<00:33,  2.91it/s][A
 56%|█████▌    | 123/221 [00:46<00:28,  3.47it/s][A
 56%|█████▌    | 124/221 [00:46<00:26,  3.68it/s][A
 57%|█████▋    | 125/221 [00:46<00:28,  3.32it/s][A
 57%|█████▋    | 126/221 [00:46<00:30,  3.08it/s][A
 57%|█████▋    | 127/221 [00:47<00:38,  2.46it/s][A
 58%|█████▊    | 128/221 [00:48<00:39,  2.37it/s][A
 58%|█████▊    | 129/221 [00:48<00:33,  2.72it/s][A
 59%|█████▉    | 130/221 [00:48<00:31,  2.92it/s][A
 59%|█████▉    | 131/221 [00:48<00:26,  3.40it/s][A
 60%|█████▉    | 132/221 [00:48<00:23,  3.80it/s][A
 60%|██████    | 133/221 [00:49<00:31,  2.83it/s][A
 61%|██████    | 134/221 [00:49<00:30,  2.90it/s][A
 61%|██████    | 135/221 [00:50<00:28,  3.05it/s][A
 62%|██████▏   | 136/221 [00:50<00:30,  2.80it/s][A
 62%|██████▏   | 137/221 [00:50<00:27,  3.06it/s][A
 62%|██████▏   | 138/221 [00:51<00:39,  2.11it/s][A
 63%|██████▎   | 139/221 [00:52<00:40,  2.02it/s][A
 63%|██████▎   | 140/221 [00:52<00:37,  2.18it/s][A
 64%|██████▍   | 141/221 [00:52<00:35,  2.28it/s][A[h264 @ 0x55858d1b9000] mmco: unref short failure

 64%|██████▍   | 142/221 [00:53<00:33,  2.33it/s][A
 65%|██████▍   | 143/221 [00:53<00:32,  2.39it/s][A
 65%|██████▌   | 144/221 [00:54<00:31,  2.47it/s][A
 66%|██████▌   | 145/221 [00:54<00:24,  3.15it/s][A
 66%|██████▌   | 146/221 [00:54<00:19,  3.85it/s][A
 67%|██████▋   | 147/221 [00:54<00:19,  3.84it/s][A
 67%|██████▋   | 148/221 [00:55<00:22,  3.31it/s][A
 67%|██████▋   | 149/221 [00:55<00:20,  3.53it/s][A
 68%|██████▊   | 150/221 [00:55<00:18,  3.75it/s][A
 68%|██████▊   | 151/221 [00:56<00:24,  2.88it/s][A
 69%|██████▉   | 152/221 [00:57<00:51,  1.33it/s][A[h264 @ 0x5576839ac180] mmco: unref short failure

 69%|██████▉   | 153/221 [00:58<00:44,  1.53it/s][A
 70%|██████▉   | 154/221 [00:58<00:36,  1.82it/s][A
 70%|███████   | 155/221 [00:58<00:31,  2.10it/s][A
 71%|███████   | 156/221 [00:59<00:27,  2.38it/s][A
 71%|███████   | 157/221 [00:59<00:36,  1.75it/s][A
 71%|███████▏  | 158/221 [01:00<00:31,  2.02it/s][A
 72%|███████▏  | 159/221 [01:00<00:24,  2.55it/s][A
 72%|███████▏  | 160/221 [01:00<00:23,  2.54it/s][A
 73%|███████▎  | 161/221 [01:00<00:19,  3.14it/s][A
 73%|███████▎  | 162/221 [01:01<00:25,  2.29it/s][A
 74%|███████▍  | 163/221 [01:01<00:23,  2.49it/s][A
 74%|███████▍  | 164/221 [01:02<00:27,  2.06it/s][A
 75%|███████▍  | 165/221 [01:02<00:21,  2.61it/s][A
 75%|███████▌  | 166/221 [01:03<00:25,  2.12it/s][A
 76%|███████▌  | 167/221 [01:03<00:20,  2.66it/s][A[h264 @ 0x55858dee7b80] mmco: unref short failure
[h264 @ 0x55858dee7b80] mmco: unref short failure

 76%|███████▌  | 168/221 [01:04<00:30,  1.75it/s][A
 76%|███████▋  | 169/221 [01:04<00:24,  2.14it/s][A
 77%|███████▋  | 170/221 [01:05<00:21,  2.32it/s][A
 77%|███████▋  | 171/221 [01:05<00:21,  2.35it/s][A
 78%|███████▊  | 172/221 [01:05<00:17,  2.75it/s][A
 78%|███████▊  | 173/221 [01:06<00:17,  2.77it/s][A
 79%|███████▊  | 174/221 [01:06<00:15,  3.06it/s][A
 79%|███████▉  | 175/221 [01:06<00:16,  2.84it/s][A
 80%|███████▉  | 176/221 [01:07<00:14,  3.06it/s][A
 80%|████████  | 177/221 [01:07<00:12,  3.40it/s][A
 81%|████████  | 178/221 [01:07<00:14,  3.03it/s][A
 81%|████████  | 179/221 [01:08<00:15,  2.72it/s][A
 81%|████████▏ | 180/221 [01:08<00:13,  3.02it/s][A
 82%|████████▏ | 181/221 [01:08<00:12,  3.29it/s][A
 82%|████████▏ | 182/221 [01:08<00:10,  3.82it/s][A
 83%|████████▎ | 183/221 [01:09<00:08,  4.26it/s][A
 83%|████████▎ | 184/221 [01:09<00:09,  3.91it/s][A
 84%|████████▍ | 186/221 [01:09<00:07,  4.44it/s][A
 85%|████████▍ | 187/221 [01:09<00:07,  4.37it/s][A
 85%|████████▌ | 188/221 [01:10<00:07,  4.22it/s][A
 86%|████████▌ | 189/221 [01:10<00:09,  3.25it/s][A
 86%|████████▌ | 190/221 [01:11<00:12,  2.56it/s][A
 86%|████████▋ | 191/221 [01:11<00:09,  3.07it/s][A
 87%|████████▋ | 192/221 [01:12<00:10,  2.72it/s][A
 87%|████████▋ | 193/221 [01:12<00:08,  3.28it/s][A
 88%|████████▊ | 194/221 [01:13<00:13,  2.05it/s][A
 88%|████████▊ | 195/221 [01:13<00:11,  2.29it/s][A
 89%|████████▊ | 196/221 [01:13<00:10,  2.43it/s][A
 89%|████████▉ | 197/221 [01:13<00:08,  2.81it/s][A
 90%|████████▉ | 198/221 [01:14<00:07,  3.07it/s][A
 90%|█████████ | 199/221 [01:14<00:06,  3.38it/s][A
 90%|█████████ | 200/221 [01:14<00:06,  3.03it/s][A
 91%|█████████ | 201/221 [01:15<00:06,  3.21it/s][A
 91%|█████████▏| 202/221 [01:15<00:05,  3.48it/s][A
 92%|█████████▏| 203/221 [01:15<00:05,  3.56it/s][A
 92%|█████████▏| 204/221 [01:15<00:04,  3.73it/s][A
 93%|█████████▎| 205/221 [01:16<00:03,  4.17it/s][A[h264 @ 0x5556296dd700] mmco: unref short failure
[h264 @ 0x55766a73a8c0] mmco: unref short failure
[h264 @ 0x55766a73a8c0] mmco: unref short failure

 93%|█████████▎| 206/221 [01:16<00:05,  2.88it/s][A
 94%|█████████▎| 207/221 [01:16<00:03,  3.50it/s][A
 94%|█████████▍| 208/221 [01:17<00:03,  3.75it/s][A
 95%|█████████▍| 209/221 [01:17<00:03,  3.82it/s][A
 95%|█████████▌| 211/221 [01:17<00:02,  3.81it/s][A
 96%|█████████▌| 212/221 [01:18<00:02,  3.68it/s][A
 96%|█████████▋| 213/221 [01:18<00:02,  3.87it/s][A
 97%|█████████▋| 214/221 [01:18<00:02,  3.27it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  3.13it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  2.99it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.74it/s][A
 99%|█████████▊| 218/221 [01:20<00:01,  2.56it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.43it/s][A
100%|█████████▉| 220/221 [01:23<00:01,  1.12s/it][A
100%|██████████| 221/221 [01:23<00:00,  1.16it/s][A100%|██████████| 221/221 [01:23<00:00,  2.63it/s]
[h264 @ 0x55766a73a8c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:09,  3.16it/s][A
  1%|          | 2/221 [00:00<01:07,  3.23it/s][A
  1%|▏         | 3/221 [00:00<01:11,  3.04it/s][A
  2%|▏         | 4/221 [00:01<01:14,  2.91it/s][A
  2%|▏         | 5/221 [00:01<01:12,  2.96it/s][A
  3%|▎         | 6/221 [00:02<01:10,  3.06it/s][A[h264 @ 0x56348d2c7380] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:10,  3.04it/s][A
  4%|▎         | 8/221 [00:02<01:07,  3.15it/s][A
  4%|▍         | 9/221 [00:02<01:06,  3.19it/s][A
  5%|▍         | 10/221 [00:03<01:11,  2.96it/s][A
  5%|▍         | 11/221 [00:03<01:10,  2.96it/s][A
  5%|▌         | 12/221 [00:03<01:09,  3.02it/s][A
  6%|▌         | 13/221 [00:04<01:08,  3.04it/s][A
  6%|▋         | 14/221 [00:04<01:06,  3.10it/s][A
  7%|▋         | 15/221 [00:04<01:06,  3.11it/s][A
  7%|▋         | 16/221 [00:05<01:05,  3.12it/s][A
  8%|▊         | 17/221 [00:05<01:04,  3.17it/s][A
  8%|▊         | 18/221 [00:05<01:02,  3.23it/s][A
  9%|▊         | 19/221 [00:06<01:02,  3.23it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 21/221 [00:06<01:02,  3.22it/s][A
 10%|▉         | 22/221 [00:07<01:00,  3.27it/s][A
 10%|█         | 23/221 [00:07<00:59,  3.31it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.34it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 26/221 [00:08<00:59,  3.27it/s][A
 12%|█▏        | 27/221 [00:08<00:59,  3.28it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:09<00:57,  3.32it/s][A
 14%|█▎        | 30/221 [00:09<01:01,  3.09it/s][A
 14%|█▍        | 31/221 [00:09<01:01,  3.07it/s][A
 14%|█▍        | 32/221 [00:10<01:00,  3.12it/s][A[h264 @ 0x557674f35640] mmco: unref short failure
[h264 @ 0x557674f35640] mmco: unref short failure

 15%|█▍        | 33/221 [00:10<00:59,  3.17it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.24it/s][A
 16%|█▌        | 35/221 [00:11<00:57,  3.21it/s][A
 16%|█▋        | 36/221 [00:11<00:57,  3.20it/s][A
 17%|█▋        | 37/221 [00:11<00:57,  3.19it/s][A
 17%|█▋        | 38/221 [00:12<00:57,  3.21it/s][A
 18%|█▊        | 39/221 [00:12<00:56,  3.23it/s][A
 18%|█▊        | 40/221 [00:12<00:55,  3.25it/s][A
 19%|█▊        | 41/221 [00:12<00:57,  3.12it/s][A
 19%|█▉        | 42/221 [00:13<00:56,  3.16it/s][A
 19%|█▉        | 43/221 [00:13<00:55,  3.21it/s][A
 20%|█▉        | 44/221 [00:13<00:54,  3.26it/s][A
 20%|██        | 45/221 [00:14<00:54,  3.26it/s][A
 21%|██        | 46/221 [00:14<00:53,  3.30it/s][A
 21%|██▏       | 47/221 [00:14<00:53,  3.23it/s][A
 22%|██▏       | 48/221 [00:15<00:53,  3.26it/s][A
 22%|██▏       | 49/221 [00:15<00:52,  3.28it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.25it/s][A
 23%|██▎       | 51/221 [00:16<00:52,  3.25it/s][A
 24%|██▎       | 52/221 [00:16<00:51,  3.30it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.33it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.35it/s][A
 25%|██▍       | 55/221 [00:17<00:49,  3.34it/s][A
 25%|██▌       | 56/221 [00:17<00:49,  3.34it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.34it/s][A
 26%|██▌       | 58/221 [00:18<00:48,  3.36it/s][A
 27%|██▋       | 59/221 [00:18<00:48,  3.33it/s][A
 27%|██▋       | 60/221 [00:18<00:47,  3.35it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.37it/s][A
 28%|██▊       | 62/221 [00:19<00:47,  3.35it/s][A
 29%|██▊       | 63/221 [00:19<00:46,  3.37it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.38it/s][A
 29%|██▉       | 65/221 [00:20<00:46,  3.34it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.36it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.33it/s][A
 31%|███       | 68/221 [00:21<00:45,  3.36it/s][A
 31%|███       | 69/221 [00:21<00:45,  3.35it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.36it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.37it/s][A
 33%|███▎      | 72/221 [00:22<00:44,  3.32it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.33it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.35it/s][A
 34%|███▍      | 75/221 [00:23<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:23<00:44,  3.28it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:24<00:42,  3.34it/s][A
 36%|███▌      | 79/221 [00:24<00:42,  3.31it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.34it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.36it/s][A
 37%|███▋      | 82/221 [00:25<00:41,  3.37it/s][A
 38%|███▊      | 83/221 [00:25<00:42,  3.28it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.31it/s][A
 38%|███▊      | 85/221 [00:26<00:42,  3.23it/s][A
 39%|███▉      | 86/221 [00:26<00:41,  3.28it/s][A
 39%|███▉      | 87/221 [00:26<00:40,  3.31it/s][A
 40%|███▉      | 88/221 [00:27<00:39,  3.34it/s][A
 40%|████      | 89/221 [00:27<00:39,  3.34it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.36it/s][A
 41%|████      | 91/221 [00:28<00:39,  3.33it/s][A
 42%|████▏     | 92/221 [00:28<00:38,  3.33it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.34it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.36it/s][A
 43%|████▎     | 95/221 [00:29<00:37,  3.33it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.29it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.30it/s][A
 44%|████▍     | 98/221 [00:30<00:37,  3.32it/s][A
 45%|████▍     | 99/221 [00:30<00:36,  3.33it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.35it/s][A
 46%|████▌     | 101/221 [00:31<00:37,  3.18it/s][A
 46%|████▌     | 102/221 [00:31<00:36,  3.25it/s][A
 47%|████▋     | 103/221 [00:31<00:36,  3.26it/s][A[h264 @ 0x5556171bbe00] mmco: unref short failure
[h264 @ 0x5556171bbe00] mmco: unref short failure

 47%|████▋     | 104/221 [00:31<00:35,  3.29it/s][A
 48%|████▊     | 105/221 [00:32<00:35,  3.30it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.33it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.35it/s][A
 49%|████▉     | 108/221 [00:33<00:33,  3.35it/s][A
 49%|████▉     | 109/221 [00:33<00:33,  3.32it/s][A
 50%|████▉     | 110/221 [00:33<00:33,  3.30it/s][A
 50%|█████     | 111/221 [00:34<00:33,  3.33it/s][A
 51%|█████     | 112/221 [00:34<00:32,  3.35it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.36it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.37it/s][A
 52%|█████▏    | 115/221 [00:35<00:31,  3.37it/s][A
 52%|█████▏    | 116/221 [00:35<00:31,  3.38it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.39it/s][A
 53%|█████▎    | 118/221 [00:36<00:30,  3.40it/s][A
 54%|█████▍    | 119/221 [00:36<00:30,  3.40it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.40it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.40it/s][A
 55%|█████▌    | 122/221 [00:37<00:29,  3.41it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.41it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.41it/s][A
 57%|█████▋    | 125/221 [00:38<00:28,  3.41it/s][A
 57%|█████▋    | 126/221 [00:38<00:27,  3.41it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.41it/s][A
 58%|█████▊    | 128/221 [00:39<00:27,  3.41it/s][A
 58%|█████▊    | 129/221 [00:39<00:26,  3.41it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.41it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.41it/s][A
 60%|█████▉    | 132/221 [00:40<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:41<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:42<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:43<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:43<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:44<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:45<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:45<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:46<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:46<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:47<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:48<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:49<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:50<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:51<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:51<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:52<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:53<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:55<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:58<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:58<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:02<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.42it/s][A100%|██████████| 221/221 [01:06<00:00,  3.34it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.18it/s][A
  1%|          | 2/221 [00:00<01:08,  3.19it/s][A
  1%|▏         | 3/221 [00:00<01:18,  2.76it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.38it/s][A
  2%|▏         | 5/221 [00:01<00:58,  3.70it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.09it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.77it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.71it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.74it/s][A
  5%|▍         | 11/221 [00:02<00:54,  3.86it/s][A
  5%|▌         | 12/221 [00:03<00:53,  3.94it/s][A
  6%|▌         | 13/221 [00:04<01:26,  2.40it/s][A
  6%|▋         | 14/221 [00:04<01:07,  3.05it/s][A
  7%|▋         | 15/221 [00:04<01:08,  3.00it/s][A
  7%|▋         | 16/221 [00:04<01:10,  2.90it/s][A
  8%|▊         | 17/221 [00:05<01:20,  2.54it/s][A
  8%|▊         | 18/221 [00:05<01:27,  2.32it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.26it/s][A
 10%|▉         | 21/221 [00:06<00:51,  3.88it/s][A
 10%|▉         | 22/221 [00:06<00:50,  3.98it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.16it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.98it/s][A
 12%|█▏        | 26/221 [00:07<00:45,  4.30it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.37it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.69it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.33it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.39it/s][A
 14%|█▍        | 31/221 [00:08<00:55,  3.40it/s][A
 14%|█▍        | 32/221 [00:09<00:47,  4.00it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.13it/s][A
 15%|█▌        | 34/221 [00:09<00:44,  4.22it/s][A
 16%|█▌        | 35/221 [00:09<00:49,  3.77it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.26it/s][A
 17%|█▋        | 37/221 [00:10<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:10<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.86it/s][A
 18%|█▊        | 40/221 [00:11<00:51,  3.54it/s][A
 19%|█▊        | 41/221 [00:11<00:42,  4.20it/s][A
 19%|█▉        | 42/221 [00:11<00:37,  4.78it/s][A
 19%|█▉        | 43/221 [00:12<00:51,  3.44it/s][A
 20%|█▉        | 44/221 [00:12<00:50,  3.49it/s][A
 20%|██        | 45/221 [00:12<00:58,  3.02it/s][A
 21%|██        | 46/221 [00:12<00:49,  3.53it/s][A
 22%|██▏       | 48/221 [00:13<00:33,  5.15it/s][A
 22%|██▏       | 49/221 [00:13<00:32,  5.31it/s][A
 23%|██▎       | 50/221 [00:13<00:34,  4.90it/s][A
 23%|██▎       | 51/221 [00:13<00:38,  4.39it/s][A
 24%|██▎       | 52/221 [00:13<00:33,  5.06it/s][A
 24%|██▍       | 53/221 [00:14<00:32,  5.21it/s][A
 24%|██▍       | 54/221 [00:14<00:35,  4.73it/s][A
 25%|██▍       | 55/221 [00:14<00:35,  4.61it/s][A
 25%|██▌       | 56/221 [00:14<00:41,  3.96it/s][A
 26%|██▌       | 57/221 [00:15<00:46,  3.51it/s][A
 26%|██▌       | 58/221 [00:15<00:39,  4.16it/s][A
 27%|██▋       | 59/221 [00:15<00:38,  4.16it/s][A
 27%|██▋       | 60/221 [00:15<00:39,  4.05it/s][A
 28%|██▊       | 61/221 [00:16<00:38,  4.14it/s][A
 28%|██▊       | 62/221 [00:16<00:40,  3.93it/s][A
 29%|██▊       | 63/221 [00:16<00:36,  4.34it/s][A
 29%|██▉       | 64/221 [00:16<00:36,  4.34it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.52it/s][A
 30%|██▉       | 66/221 [00:17<00:38,  4.00it/s][A
 30%|███       | 67/221 [00:17<00:52,  2.95it/s][A
 31%|███       | 68/221 [00:18<00:47,  3.19it/s][A
 31%|███       | 69/221 [00:18<00:51,  2.96it/s][A
 32%|███▏      | 70/221 [00:18<00:42,  3.58it/s][A
 32%|███▏      | 71/221 [00:19<00:44,  3.37it/s][A
 33%|███▎      | 72/221 [00:19<00:51,  2.90it/s][A
 33%|███▎      | 73/221 [00:19<00:46,  3.17it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.24it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.20it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:20<00:36,  3.91it/s][A
 35%|███▌      | 78/221 [00:21<00:39,  3.61it/s][A
 36%|███▌      | 79/221 [00:21<00:40,  3.47it/s][A
 36%|███▌      | 80/221 [00:21<00:40,  3.46it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.77it/s][A
 37%|███▋      | 82/221 [00:22<00:34,  4.03it/s][A
 38%|███▊      | 83/221 [00:22<00:33,  4.18it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.72it/s][A
 38%|███▊      | 85/221 [00:23<00:40,  3.37it/s][A
 39%|███▉      | 86/221 [00:23<00:37,  3.57it/s][A
 39%|███▉      | 87/221 [00:23<00:51,  2.59it/s][A
 40%|███▉      | 88/221 [00:24<00:44,  3.01it/s][A
 40%|████      | 89/221 [00:24<00:43,  3.01it/s][A
 41%|████      | 90/221 [00:24<00:44,  2.93it/s][A
 41%|████      | 91/221 [00:24<00:38,  3.38it/s][A
 42%|████▏     | 92/221 [00:25<00:37,  3.40it/s][A
 42%|████▏     | 93/221 [00:25<00:38,  3.29it/s][A
 43%|████▎     | 94/221 [00:25<00:35,  3.53it/s][A
 43%|████▎     | 95/221 [00:26<00:47,  2.65it/s][A
 43%|████▎     | 96/221 [00:26<00:40,  3.11it/s][A
 44%|████▍     | 97/221 [00:26<00:38,  3.22it/s][A
 44%|████▍     | 98/221 [00:27<00:38,  3.21it/s][A
 45%|████▍     | 99/221 [00:27<00:34,  3.49it/s][A
 45%|████▌     | 100/221 [00:27<00:29,  4.07it/s][A
 46%|████▌     | 101/221 [00:27<00:29,  4.03it/s][A
 46%|████▌     | 102/221 [00:28<00:32,  3.62it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.84it/s][A
 48%|████▊     | 105/221 [00:28<00:25,  4.62it/s][A
 48%|████▊     | 106/221 [00:29<00:30,  3.83it/s][A
 48%|████▊     | 107/221 [00:29<00:26,  4.32it/s][A
 49%|████▉     | 108/221 [00:29<00:24,  4.57it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.28it/s][A
 50%|████▉     | 110/221 [00:30<00:27,  3.99it/s][A
 50%|█████     | 111/221 [00:30<00:29,  3.67it/s][A
 51%|█████     | 112/221 [00:30<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:30<00:31,  3.45it/s][A
 52%|█████▏    | 115/221 [00:31<00:22,  4.76it/s][A
 52%|█████▏    | 116/221 [00:31<00:21,  4.80it/s][A
 53%|█████▎    | 117/221 [00:31<00:23,  4.34it/s][A
 53%|█████▎    | 118/221 [00:32<00:27,  3.72it/s][A
 54%|█████▍    | 119/221 [00:32<00:34,  2.92it/s][A
 54%|█████▍    | 120/221 [00:33<00:36,  2.78it/s][A
 55%|█████▍    | 121/221 [00:33<00:28,  3.48it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.84it/s][A
 56%|█████▌    | 123/221 [00:33<00:24,  3.93it/s][A
 56%|█████▌    | 124/221 [00:34<00:32,  3.03it/s][A
 57%|█████▋    | 125/221 [00:34<00:42,  2.27it/s][A
 57%|█████▋    | 126/221 [00:35<00:37,  2.54it/s][A
 57%|█████▋    | 127/221 [00:35<00:43,  2.16it/s][A
 58%|█████▊    | 128/221 [00:35<00:36,  2.53it/s][A
 59%|█████▉    | 130/221 [00:36<00:26,  3.39it/s][A
 59%|█████▉    | 131/221 [00:36<00:24,  3.62it/s][A
 60%|█████▉    | 132/221 [00:36<00:24,  3.57it/s][A
 60%|██████    | 133/221 [00:37<00:30,  2.91it/s][A
 61%|██████    | 134/221 [00:37<00:34,  2.53it/s][A
 62%|██████▏   | 136/221 [00:38<00:26,  3.17it/s][A
 62%|██████▏   | 137/221 [00:38<00:24,  3.39it/s][A
 62%|██████▏   | 138/221 [00:38<00:24,  3.46it/s][A
 63%|██████▎   | 139/221 [00:39<00:27,  2.96it/s][A
 63%|██████▎   | 140/221 [00:39<00:24,  3.33it/s][A
 64%|██████▍   | 141/221 [00:39<00:24,  3.31it/s][A
 64%|██████▍   | 142/221 [00:39<00:21,  3.65it/s][A
 65%|██████▍   | 143/221 [00:40<00:22,  3.50it/s][A
 65%|██████▌   | 144/221 [00:40<00:21,  3.55it/s][A
 66%|██████▌   | 145/221 [00:40<00:23,  3.26it/s][A
 66%|██████▌   | 146/221 [00:41<00:23,  3.14it/s][A
 67%|██████▋   | 147/221 [00:41<00:21,  3.52it/s][A
 67%|██████▋   | 148/221 [00:41<00:19,  3.78it/s][A
 67%|██████▋   | 149/221 [00:42<00:20,  3.51it/s][A
 68%|██████▊   | 150/221 [00:42<00:19,  3.68it/s][A
 68%|██████▊   | 151/221 [00:42<00:27,  2.53it/s][A
 69%|██████▉   | 152/221 [00:43<00:37,  1.85it/s][A
 69%|██████▉   | 153/221 [00:44<00:31,  2.16it/s][A
 70%|██████▉   | 154/221 [00:44<00:25,  2.59it/s][A
 70%|███████   | 155/221 [00:44<00:29,  2.21it/s][A
 71%|███████   | 156/221 [00:45<00:24,  2.66it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.79it/s][A
 71%|███████▏  | 158/221 [00:45<00:24,  2.59it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.18it/s][A
 72%|███████▏  | 160/221 [00:46<00:20,  3.04it/s][A
 73%|███████▎  | 161/221 [00:46<00:16,  3.58it/s][A
 73%|███████▎  | 162/221 [00:46<00:14,  4.09it/s][A
 74%|███████▍  | 163/221 [00:46<00:14,  4.12it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.70it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  5.06it/s][A
 75%|███████▌  | 166/221 [00:47<00:15,  3.50it/s][A
 76%|███████▌  | 167/221 [00:47<00:12,  4.25it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  4.05it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.42it/s][A
 77%|███████▋  | 170/221 [00:48<00:16,  3.11it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.72it/s][A
 78%|███████▊  | 172/221 [00:49<00:15,  3.17it/s][A
 78%|███████▊  | 173/221 [00:49<00:15,  3.08it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.52it/s][A
 79%|███████▉  | 175/221 [00:50<00:13,  3.33it/s][A
 80%|███████▉  | 176/221 [00:50<00:12,  3.73it/s][A
 80%|████████  | 177/221 [00:50<00:11,  3.75it/s][A
 81%|████████  | 178/221 [00:51<00:14,  2.91it/s][A
 81%|████████  | 179/221 [00:51<00:14,  2.98it/s][A
 82%|████████▏ | 181/221 [00:52<00:10,  3.89it/s][A
 82%|████████▏ | 182/221 [00:52<00:10,  3.83it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.61it/s][A
 83%|████████▎ | 184/221 [00:52<00:10,  3.68it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.89it/s][A
 84%|████████▍ | 186/221 [00:53<00:10,  3.34it/s][A
 85%|████████▍ | 187/221 [00:53<00:09,  3.62it/s][A
 85%|████████▌ | 188/221 [00:53<00:08,  3.71it/s][A
 86%|████████▌ | 189/221 [00:54<00:07,  4.04it/s][A
 86%|████████▌ | 190/221 [00:54<00:10,  3.00it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  4.04it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.37it/s][A
 88%|████████▊ | 194/221 [00:55<00:06,  3.91it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  3.83it/s][A
 89%|████████▊ | 196/221 [00:56<00:08,  3.01it/s][A
 89%|████████▉ | 197/221 [00:56<00:09,  2.64it/s][A
 90%|████████▉ | 198/221 [00:57<00:08,  2.61it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  3.14it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.28it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.64it/s][A
 91%|█████████▏| 202/221 [00:58<00:05,  3.43it/s][A
 92%|█████████▏| 203/221 [00:58<00:05,  3.50it/s][A
 92%|█████████▏| 204/221 [00:58<00:05,  3.22it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.61it/s][A
 93%|█████████▎| 206/221 [00:59<00:05,  2.58it/s][A
 94%|█████████▎| 207/221 [00:59<00:05,  2.80it/s][A
 94%|█████████▍| 208/221 [01:00<00:04,  3.00it/s][A
 95%|█████████▍| 209/221 [01:00<00:04,  2.99it/s][A
 95%|█████████▌| 210/221 [01:00<00:03,  3.59it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  3.79it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.20it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.22it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.97it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.75it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  2.85it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.96it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.24it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.85it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.29it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.11it/s][A100%|██████████| 221/221 [01:04<00:00,  3.43it/s]
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'area_r1': 40.5, 'area_recall': '40.5/66.7/76.1', 'area_ravg': 61.1}
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'forward_r1': 36.7, 'forward_recall': '36.7/63.6/75.0', 'forward_ravg': 58.4}
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'area_video_r1': 40.5, 'area_video_recall': '40.5/69.1/77.8', 'area_video_ravg': 62.5}
09/17/2024 02:27:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 02:27:32 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'area_video_r1': 51.7, 'area_video_recall': '51.7/75.0/82.2', 'area_video_ravg': 69.6, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/72.3/80.8', 'area_video_back_ravg': 67.3}
09/17/2024 02:27:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 299=======

09/17/2024 02:27:32 - INFO - __main__ -   {'area_video_r1': 51.9, 'area_video_recall': '51.9/75.8/82.5', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.8, 'area_video_back_recall': '48.8/70.9/79.8', 'area_video_back_ravg': 66.5}
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'video_r1': 36.8, 'video_recall': '36.8/64.3/74.7', 'video_ravg': 58.6}
09/17/2024 02:27:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 02:27:32 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 02:27:32 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 399--===========

09/17/2024 02:27:32 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.3/82.2', 'video_ravg': 69.7}
09/17/2024 02:27:32 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 349=======

09/17/2024 02:27:32 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/75.5/82.1', 'video_ravg': 69.8}
09/17/2024 02:27:54 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009735907427966595, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.3692896366119385, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.238450765609741, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.617476463317871}
not have audios ua_Kowav7hg.20
 14%|█▎        | 400/2910 [2:31:58<92:04:07, 132.05s/it] 14%|█▍        | 401/2910 [2:32:02<65:14:05, 93.60s/it] [h264 @ 0x5634abfa8980] mmco: unref short failure
 14%|█▍        | 402/2910 [2:32:06<46:32:47, 66.81s/it] 14%|█▍        | 403/2910 [2:32:11<33:30:34, 48.12s/it] 14%|█▍        | 404/2910 [2:32:16<24:29:43, 35.19s/it] 14%|█▍        | 405/2910 [2:32:21<18:10:48, 26.13s/it] 14%|█▍        | 406/2910 [2:32:26<13:52:54, 19.96s/it][h264 @ 0x55767790cb40] mmco: unref short failure
 14%|█▍        | 407/2910 [2:32:32<10:59:33, 15.81s/it][h264 @ 0x5556206f5240] mmco: unref short failure
[h264 @ 0x5556206f5240] mmco: unref short failure
 14%|█▍        | 408/2910 [2:32:38<8:52:15, 12.76s/it]  14%|█▍        | 409/2910 [2:32:44<7:32:05, 10.85s/it][h264 @ 0x557685ac3680] mmco: unref short failure
[h264 @ 0x557685ac3680] mmco: unref short failure
 14%|█▍        | 410/2910 [2:32:50<6:30:44,  9.38s/it][h264 @ 0x56349add29c0] mmco: unref short failure
[h264 @ 0x56349add29c0] mmco: unref short failure
 14%|█▍        | 411/2910 [2:32:57<6:00:53,  8.66s/it][h264 @ 0x563494549280] mmco: unref short failure
[h264 @ 0x563494549280] mmco: unref short failure
09/17/2024 02:29:00 - INFO - __main__ -   current idx ayNV3g3-K8g.35 from finetune_area returns wrong image/video, use 17312 instead.
 14%|█▍        | 412/2910 [2:33:04<5:32:39,  7.99s/it][h264 @ 0x557669887040] mmco: unref short failure
[h264 @ 0x557669887040] mmco: unref short failure
 14%|█▍        | 413/2910 [2:33:10<5:06:38,  7.37s/it][h264 @ 0x555617188000] mmco: unref short failure
[h264 @ 0x55767790cb40] mmco: unref short failure
 14%|█▍        | 414/2910 [2:33:16<4:55:18,  7.10s/it] 14%|█▍        | 415/2910 [2:33:21<4:32:26,  6.55s/it][h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x5576866b4700] mmco: unref short failure
[h264 @ 0x5556185fa040] mmco: unref short failure
[h264 @ 0x5576726b5480] mmco: unref short failure
[h264 @ 0x5576726b5480] mmco: unref short failure
[h264 @ 0x5576726b5480] mmco: unref short failure
[h264 @ 0x5576726b5480] mmco: unref short failure
[h264 @ 0x55859ebfc6c0] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x555620111900] mmco: unref short failure
[h264 @ 0x56348e8219c0] mmco: unref short failure
[h264 @ 0x56348e8219c0] mmco: unref short failure
[h264 @ 0x55766b7bab40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x558590a30580] mmco: unref short failure
[h264 @ 0x55563a45db40] mmco: unref short failure
[h264 @ 0x55563a45db40] mmco: unref short failure
[h264 @ 0x55561744f600] mmco: unref short failure
 14%|█▍        | 416/2910 [2:34:03<11:53:15, 17.16s/it][h264 @ 0x55859ebfc6c0] mmco: unref short failure
[h264 @ 0x55859ebfc6c0] mmco: unref short failure
 14%|█▍        | 417/2910 [2:34:21<12:06:27, 17.48s/it][h264 @ 0x563498670100] mmco: unref short failure
[h264 @ 0x5634943c4f80] mmco: unref short failure
[h264 @ 0x5634943c4f80] mmco: unref short failure
[h264 @ 0x56348ccd3bc0] mmco: unref short failure
[h264 @ 0x56348ccd3bc0] mmco: unref short failure
 14%|█▍        | 418/2910 [2:34:37<11:44:21, 16.96s/it][h264 @ 0x5585861f7400] mmco: unref short failure
[h264 @ 0x55768166c480] mmco: unref short failure
[h264 @ 0x55768166c480] mmco: unref short failure
 14%|█▍        | 419/2910 [2:34:47<10:18:54, 14.91s/it][h264 @ 0x55768c02f600] mmco: unref short failure
[h264 @ 0x55768c02f600] mmco: unref short failure
 14%|█▍        | 420/2910 [2:34:53<8:26:14, 12.20s/it]  14%|█▍        | 421/2910 [2:34:58<7:00:34, 10.14s/it] 15%|█▍        | 422/2910 [2:35:08<6:48:58,  9.86s/it][h264 @ 0x555616dfee80] mmco: unref short failure
[h264 @ 0x555616dfee80] mmco: unref short failure
[h264 @ 0x555616dfee80] mmco: unref short failure
[h264 @ 0x55768166c480] mmco: unref short failure
[h264 @ 0x55768166c480] mmco: unref short failure
 15%|█▍        | 423/2910 [2:35:18<6:59:30, 10.12s/it]09/17/2024 02:31:34 - INFO - __main__ -   current idx 5kvk51WxHH4.68 from finetune_area returns wrong image/video, use 114661 instead.
[h264 @ 0x55858389bf40] mmco: unref short failure
[h264 @ 0x5556227b6980] mmco: unref short failure
[h264 @ 0x5634940ffa80] mmco: unref short failure
[h264 @ 0x563492003ec0] mmco: unref short failure
[h264 @ 0x55859199dcc0] mmco: unref short failure
[h264 @ 0x55859199dcc0] mmco: unref short failure
[h264 @ 0x5556171e01c0] mmco: unref short failure
[h264 @ 0x5556171e01c0] mmco: unref short failure
[h264 @ 0x5576848cd240] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x55767e7604c0] mmco: unref short failure
[h264 @ 0x55767e7604c0] mmco: unref short failure
[h264 @ 0x55563572dc40] mmco: unref short failure
[h264 @ 0x55563572dc40] mmco: unref short failure
[h264 @ 0x555636509ac0] mmco: unref short failure
[h264 @ 0x555636509ac0] mmco: unref short failure
[h264 @ 0x555636509ac0] mmco: unref short failure
[h264 @ 0x555636509ac0] mmco: unref short failure
[h264 @ 0x557675143700] mmco: unref short failure
[h264 @ 0x557675143700] mmco: unref short failure
[h264 @ 0x55857ea0a000] mmco: unref short failure
[h264 @ 0x55857ea0a000] mmco: unref short failure
[h264 @ 0x55561744f600] mmco: unref short failure
[h264 @ 0x55561744f600] mmco: unref short failure
[h264 @ 0x55561744f600] mmco: unref short failure
[h264 @ 0x55561744f600] mmco: unref short failure
09/17/2024 02:32:15 - INFO - __main__ -   current idx JtVvdxUGRsg.70 from finetune_area returns wrong image/video, use 145939 instead.
[h264 @ 0x55858cf90640] mmco: unref short failure
[h264 @ 0x55858cf90640] mmco: unref short failure
[h264 @ 0x55858cf90640] mmco: unref short failure
[h264 @ 0x55858cf90640] mmco: unref short failure
[h264 @ 0x563496201500] mmco: unref short failure
[h264 @ 0x5556171e01c0] mmco: unref short failure
[h264 @ 0x55766bd80700] mmco: unref short failure
[h264 @ 0x55766bd80700] mmco: unref short failure
 15%|█▍        | 424/2910 [2:36:31<19:50:01, 28.72s/it] 15%|█▍        | 425/2910 [2:36:51<18:01:21, 26.11s/it][h264 @ 0x5585830a1600] mmco: unref short failure
[h264 @ 0x5585830a1600] mmco: unref short failure
[h264 @ 0x56348d1aee40] mmco: unref short failure
[h264 @ 0x5576785a0280] mmco: unref short failure
[h264 @ 0x5576785a0280] mmco: unref short failure
[h264 @ 0x55561aa27c80] mmco: unref short failure
 15%|█▍        | 426/2910 [2:37:14<17:22:25, 25.18s/it] 15%|█▍        | 427/2910 [2:37:20<13:28:34, 19.54s/it][h264 @ 0x56348d5e5f80] mmco: unref short failure
[h264 @ 0x56348d5e5f80] mmco: unref short failure
[h264 @ 0x557669e70840] mmco: unref short failure
[h264 @ 0x557669e70840] mmco: unref short failure
[h264 @ 0x56348d59a780] mmco: unref short failure
[h264 @ 0x557676504f80] mmco: unref short failure
[h264 @ 0x557676504f80] mmco: unref short failure
[h264 @ 0x55857dd28300] mmco: unref short failure
 15%|█▍        | 428/2910 [2:37:33<12:01:58, 17.45s/it][h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x56348d62b540] mmco: unref short failure
[h264 @ 0x56348d62b540] mmco: unref short failure
[h264 @ 0x558591b094c0] mmco: unref short failure
 15%|█▍        | 429/2910 [2:37:38<9:38:46, 14.00s/it] [h264 @ 0x5634aa5c0600] mmco: unref short failure
[h264 @ 0x5634aa5c0600] mmco: unref short failure
 15%|█▍        | 430/2910 [2:37:45<8:04:49, 11.73s/it][h264 @ 0x5556171b7940] mmco: unref short failure
[h264 @ 0x5556171b7940] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
 15%|█▍        | 431/2910 [2:37:54<7:34:06, 10.99s/it][h264 @ 0x55561d714c80] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x55561d714c80] mmco: unref short failure
[h264 @ 0x55561d714c80] mmco: unref short failure
[h264 @ 0x5556171fed40] mmco: unref short failure
[h264 @ 0x56348d1ca440] mmco: unref short failure
[h264 @ 0x56348d1ca440] mmco: unref short failure
[h264 @ 0x55857e74d100] mmco: unref short failure
[h264 @ 0x558581e7f680] mmco: unref short failure
[h264 @ 0x558581e7f680] mmco: unref short failure
[h264 @ 0x5634939aec80] mmco: unref short failure
[h264 @ 0x5634939aec80] mmco: unref short failure
[h264 @ 0x555617208240] mmco: unref short failure
[h264 @ 0x557682d60540] mmco: unref short failure
[h264 @ 0x557682d60540] mmco: unref short failure
[h264 @ 0x555617492280] mmco: unref short failure
[h264 @ 0x555617492280] mmco: unref short failure
[h264 @ 0x55857ec38d40] mmco: unref short failure
[h264 @ 0x55857ec38d40] mmco: unref short failure
[h264 @ 0x555617265f00] mmco: unref short failure
[h264 @ 0x5585865aba80] mmco: unref short failure
 15%|█▍        | 432/2910 [2:39:15<21:58:53, 31.93s/it][h264 @ 0x55857ebe3240] mmco: unref short failure
[h264 @ 0x55857ebe3240] mmco: unref short failure
[h264 @ 0x55857e742700] mmco: unref short failure
[h264 @ 0x55857e742700] mmco: unref short failure
 15%|█▍        | 433/2910 [2:39:21<16:37:26, 24.16s/it][h264 @ 0x55858ae26580] mmco: unref short failure
[h264 @ 0x55858ae26580] mmco: unref short failure
[h264 @ 0x56349add29c0] mmco: unref short failure
[h264 @ 0x56349add29c0] mmco: unref short failure
[h264 @ 0x55766a8e3b00] mmco: unref short failure
 15%|█▍        | 434/2910 [2:39:33<14:10:24, 20.61s/it]09/17/2024 02:35:32 - INFO - __main__ -   current idx hq2NNhzo-Lg.4 from finetune_area returns wrong image/video, use 114076 instead.
[h264 @ 0x55562e34d280] mmco: unref short failure
 15%|█▍        | 435/2910 [2:39:45<12:21:13, 17.97s/it][h264 @ 0x56348d59a000] mmco: unref short failure
[h264 @ 0x56348d59a000] mmco: unref short failure
 15%|█▍        | 436/2910 [2:39:58<11:22:19, 16.55s/it][h264 @ 0x55767afb6140] mmco: unref short failure
 15%|█▌        | 437/2910 [2:40:04<9:12:41, 13.41s/it] [h264 @ 0x55857e797740] mmco: unref short failure
 15%|█▌        | 438/2910 [2:40:11<7:48:26, 11.37s/it] 15%|█▌        | 439/2910 [2:40:23<7:59:55, 11.65s/it][h264 @ 0x5556222c9700] mmco: unref short failure
[h264 @ 0x5556222c9700] mmco: unref short failure
[h264 @ 0x5556222c9700] mmco: unref short failure
09/17/2024 02:36:32 - INFO - __main__ -   current idx 4ZmeUj7cFu4.36 from finetune_area returns wrong image/video, use 90779 instead.
[h264 @ 0x5556172dac40] mmco: unref short failure
[h264 @ 0x5556172dac40] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x55857e9c6480] mmco: unref short failure
[h264 @ 0x55857e953740] mmco: unref short failure
[h264 @ 0x5576766f8a80] mmco: unref short failure
[h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x5585843f4a00] mmco: unref short failure
[h264 @ 0x56348d2d9700] mmco: unref short failure
[h264 @ 0x56348d2d9700] mmco: unref short failure
[h264 @ 0x5556171db7c0] mmco: unref short failure
[h264 @ 0x5556171db7c0] mmco: unref short failure
[h264 @ 0x55857e74d900] mmco: unref short failure
[h264 @ 0x55857e74d900] mmco: unref short failure
[h264 @ 0x55561e1cde40] mmco: unref short failure
[h264 @ 0x55561e1cde40] mmco: unref short failure
[h264 @ 0x55561e1cde40] mmco: unref short failure
[h264 @ 0x555620975400] mmco: unref short failure
[h264 @ 0x555620975400] mmco: unref short failure
09/17/2024 02:37:33 - INFO - __main__ -   current idx g6Wl0SZpFMk.13 from finetune_area returns wrong image/video, use 141986 instead.
[h264 @ 0x55857e7ee980] mmco: unref short failure
[h264 @ 0x55857e7ee980] mmco: unref short failure
 15%|█▌        | 440/2910 [2:41:41<21:30:38, 31.35s/it][h264 @ 0x56348d1aee40] mmco: unref short failure
[h264 @ 0x56348d1aee40] mmco: unref short failure
 15%|█▌        | 441/2910 [2:41:54<17:43:10, 25.84s/it][h264 @ 0x5634943c4f80] mmco: unref short failure
[h264 @ 0x5634943c4f80] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
 15%|█▌        | 442/2910 [2:42:09<15:30:14, 22.62s/it] 15%|█▌        | 443/2910 [2:42:16<12:15:27, 17.89s/it][h264 @ 0x56348d566640] mmco: unref short failure
[h264 @ 0x56348d566640] mmco: unref short failure
[h264 @ 0x555623d32a00] mmco: unref short failure
 15%|█▌        | 444/2910 [2:42:26<10:39:54, 15.57s/it] 15%|█▌        | 445/2910 [2:42:33<8:55:34, 13.04s/it] 09/17/2024 02:38:37 - INFO - __main__ -   current idx Pj4BTw_2jIM.11 from finetune_area returns wrong image/video, use 88573 instead.
 15%|█▌        | 446/2910 [2:42:42<8:02:37, 11.75s/it] 15%|█▌        | 447/2910 [2:42:50<7:16:21, 10.63s/it][h264 @ 0x56348d5ac580] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
[h264 @ 0x55857e72d080] mmco: unref short failure
[h264 @ 0x55857e72d080] mmco: unref short failure
[h264 @ 0x56349586be00] mmco: unref short failure
[h264 @ 0x56349586be00] mmco: unref short failure
[h264 @ 0x56348d23d340] mmco: unref short failure
[h264 @ 0x56348d23d340] mmco: unref short failure
[h264 @ 0x55766e69ca80] mmco: unref short failure
[h264 @ 0x55766e69ca80] mmco: unref short failure
[h264 @ 0x55561f8cb1c0] mmco: unref short failure
[h264 @ 0x55561f8cb1c0] mmco: unref short failure
[h264 @ 0x55561f8cb1c0] mmco: unref short failure
[h264 @ 0x55561f8cb1c0] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x557686bc5940] mmco: unref short failure
[h264 @ 0x557673706940] mmco: unref short failure
[h264 @ 0x5634939aec80] mmco: unref short failure
[h264 @ 0x5634939aec80] mmco: unref short failure
[h264 @ 0x56348d2f5000] mmco: unref short failure
[h264 @ 0x55857e47df40] mmco: unref short failure
[h264 @ 0x55857e47df40] mmco: unref short failure
 15%|█▌        | 448/2910 [2:43:58<19:04:32, 27.89s/it][h264 @ 0x56348d598040] mmco: unref short failure
[h264 @ 0x56348d598040] mmco: unref short failure
[h264 @ 0x56348d2e96c0] mmco: unref short failure
[h264 @ 0x56348d2e96c0] mmco: unref short failure
[h264 @ 0x55857eb904c0] mmco: unref short failure
[h264 @ 0x55857eb904c0] mmco: unref short failure
[h264 @ 0x56349030cec0] mmco: unref short failure
[h264 @ 0x56349030cec0] mmco: unref short failure
[h264 @ 0x56349030cec0] mmco: unref short failure
[h264 @ 0x56349030cec0] mmco: unref short failure
[h264 @ 0x5556172a5440] mmco: unref short failure
[h264 @ 0x555630f749c0] mmco: unref short failure
[h264 @ 0x555630f749c0] mmco: unref short failure
[h264 @ 0x555622f2b6c0] mmco: unref short failure
[h264 @ 0x555617265f00] mmco: unref short failure
 15%|█▌        | 449/2910 [2:44:37<21:17:03, 31.14s/it]09/17/2024 02:40:35 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:40:35 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x555617fece40] mmco: unref short failure
[h264 @ 0x555617fece40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 02:41:07 - INFO - __main__ -   current idx WTKFIwRqMwk.18 from finetune_area returns wrong image/video, use 117529 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55857ec37940] mmco: unref short failure
[h264 @ 0x55857ec37940] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x56348d261540] mmco: unref short failure
[h264 @ 0x56348d261540] mmco: unref short failure
[h264 @ 0x5634ab08ba40] mmco: unref short failure
[h264 @ 0x55561a7ce900] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x563499598780] mmco: unref short failure
[h264 @ 0x563499598780] mmco: unref short failure
[h264 @ 0x55561715b3c0] mmco: unref short failure
[h264 @ 0x55561715b3c0] mmco: unref short failure
[h264 @ 0x55561715b3c0] mmco: unref short failure
[h264 @ 0x55561715b3c0] mmco: unref short failure
[h264 @ 0x555627f38a00] mmco: unref short failure
[h264 @ 0x555627f38a00] mmco: unref short failure
[h264 @ 0x555627f38a00] mmco: unref short failure
[h264 @ 0x555627f38a00] mmco: unref short failure
[h264 @ 0x56348d0dc380] mmco: unref short failure
09/17/2024 02:42:46 - INFO - __main__ -   current idx My9wyuAl8zM.76 from finetune_area returns wrong image/video, use 19048 instead.
[h264 @ 0x55857e8e3dc0] mmco: unref short failure
[h264 @ 0x55857e8e3dc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:46,  1.32it/s][A
  1%|          | 2/221 [00:01<02:07,  1.71it/s][A
  1%|▏         | 3/221 [00:01<01:29,  2.44it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.34it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.81it/s][A
  3%|▎         | 6/221 [00:01<00:54,  3.97it/s][A
  3%|▎         | 7/221 [00:02<00:58,  3.65it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.33it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.27it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.64it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:04<01:10,  2.97it/s][A
  6%|▌         | 13/221 [00:04<01:09,  2.99it/s][A
  6%|▋         | 14/221 [00:04<01:07,  3.05it/s][A
  7%|▋         | 15/221 [00:04<00:58,  3.51it/s][A
  7%|▋         | 16/221 [00:05<01:07,  3.04it/s][A
  8%|▊         | 17/221 [00:05<01:28,  2.31it/s][A
  8%|▊         | 18/221 [00:06<01:21,  2.50it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.93it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.40it/s][A
 10%|▉         | 21/221 [00:07<00:59,  3.37it/s][A
 10%|▉         | 22/221 [00:07<00:55,  3.60it/s][A
 11%|█         | 24/221 [00:07<00:42,  4.69it/s][A
 11%|█▏        | 25/221 [00:07<00:41,  4.74it/s][A
 12%|█▏        | 26/221 [00:08<00:54,  3.56it/s][A
 12%|█▏        | 27/221 [00:08<00:48,  4.03it/s][A
 13%|█▎        | 28/221 [00:09<01:09,  2.79it/s][A
 13%|█▎        | 29/221 [00:09<01:16,  2.52it/s][A
 14%|█▎        | 30/221 [00:09<01:07,  2.82it/s][A
 14%|█▍        | 31/221 [00:10<01:04,  2.93it/s][A
 14%|█▍        | 32/221 [00:10<00:55,  3.39it/s][A
 15%|█▍        | 33/221 [00:10<00:51,  3.64it/s][A
 15%|█▌        | 34/221 [00:10<00:42,  4.42it/s][A
 16%|█▌        | 35/221 [00:10<00:42,  4.42it/s][A
 16%|█▋        | 36/221 [00:11<00:53,  3.44it/s][A[h264 @ 0x555617215f80] mmco: unref short failure

 17%|█▋        | 37/221 [00:11<01:17,  2.39it/s][A
 17%|█▋        | 38/221 [00:12<01:15,  2.41it/s][A
 18%|█▊        | 39/221 [00:12<01:12,  2.51it/s][A
 18%|█▊        | 40/221 [00:13<01:07,  2.69it/s][A
 19%|█▊        | 41/221 [00:13<00:54,  3.30it/s][A
 19%|█▉        | 42/221 [00:13<01:08,  2.62it/s][A[h264 @ 0x55562bc4c3c0] mmco: unref short failure
[h264 @ 0x55562bc4c3c0] mmco: unref short failure

 19%|█▉        | 43/221 [00:13<01:00,  2.96it/s][A[h264 @ 0x5556195d8b00] mmco: unref short failure

 20%|██        | 45/221 [00:14<01:09,  2.52it/s][A
 21%|██        | 46/221 [00:15<01:10,  2.49it/s][A
 21%|██▏       | 47/221 [00:15<01:16,  2.28it/s][A
 22%|██▏       | 48/221 [00:15<01:01,  2.83it/s][A
 22%|██▏       | 49/221 [00:16<01:17,  2.23it/s][A
 23%|██▎       | 50/221 [00:16<01:08,  2.48it/s][A
 24%|██▎       | 52/221 [00:17<00:48,  3.50it/s][A
 24%|██▍       | 53/221 [00:17<00:41,  4.08it/s][A[h264 @ 0x5634954d3b40] mmco: unref short failure
[h264 @ 0x5634954d3b40] mmco: unref short failure
[h264 @ 0x5634954d3b40] mmco: unref short failure
[h264 @ 0x5634954d3b40] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<02:02,  1.37it/s][A
 25%|██▍       | 55/221 [00:19<01:45,  1.58it/s][A[h264 @ 0x56348d2e7200] mmco: unref short failure
[h264 @ 0x56348d2e7200] mmco: unref short failure

 25%|██▌       | 56/221 [00:20<01:25,  1.94it/s][A[h264 @ 0x55857e03c4c0] mmco: unref short failure

 26%|██▌       | 57/221 [00:20<01:14,  2.20it/s][A
 26%|██▌       | 58/221 [00:20<01:00,  2.69it/s][A
 27%|██▋       | 59/221 [00:20<00:56,  2.88it/s][A
 27%|██▋       | 60/221 [00:21<01:22,  1.96it/s][A
 28%|██▊       | 61/221 [00:21<01:08,  2.33it/s][A
 28%|██▊       | 62/221 [00:22<01:05,  2.42it/s][A
 29%|██▊       | 63/221 [00:22<00:56,  2.81it/s][A09/17/2024 02:43:16 - INFO - __main__ -   current idx 0dGVRi4angY.7 from finetune_area returns wrong image/video, use 3133 instead.

 29%|██▉       | 64/221 [00:22<00:49,  3.18it/s][A
 29%|██▉       | 65/221 [00:23<00:48,  3.19it/s][A
 30%|██▉       | 66/221 [00:23<00:58,  2.64it/s][A
 30%|███       | 67/221 [00:24<01:15,  2.05it/s][A
 31%|███       | 68/221 [00:24<01:01,  2.47it/s][A
 31%|███       | 69/221 [00:25<01:08,  2.21it/s][A
 32%|███▏      | 70/221 [00:25<00:54,  2.78it/s][A
 32%|███▏      | 71/221 [00:26<01:23,  1.79it/s][A
 33%|███▎      | 72/221 [00:26<01:12,  2.05it/s][A
 33%|███▎      | 73/221 [00:27<01:11,  2.06it/s][A
 33%|███▎      | 74/221 [00:27<00:56,  2.62it/s][A
 34%|███▍      | 75/221 [00:27<00:55,  2.65it/s][A
 34%|███▍      | 76/221 [00:27<00:45,  3.15it/s][A
 35%|███▍      | 77/221 [00:28<00:44,  3.27it/s][A
 35%|███▌      | 78/221 [00:28<00:40,  3.55it/s][A
 36%|███▌      | 79/221 [00:28<00:47,  3.01it/s][A
 36%|███▌      | 80/221 [00:29<00:46,  3.05it/s][A
 37%|███▋      | 81/221 [00:29<00:42,  3.29it/s][A
 37%|███▋      | 82/221 [00:30<01:00,  2.30it/s][A[h264 @ 0x5576708cd0c0] mmco: unref short failure

 38%|███▊      | 83/221 [00:30<01:02,  2.21it/s][A
 38%|███▊      | 84/221 [00:30<00:52,  2.60it/s][A
 38%|███▊      | 85/221 [00:31<00:45,  3.00it/s][A
 39%|███▉      | 86/221 [00:31<00:47,  2.86it/s][A
 39%|███▉      | 87/221 [00:32<01:08,  1.96it/s][A
 40%|███▉      | 88/221 [00:32<01:15,  1.77it/s][A
 40%|████      | 89/221 [00:33<01:14,  1.77it/s][A
 41%|████      | 90/221 [00:33<00:59,  2.19it/s][A
 41%|████      | 91/221 [00:33<00:46,  2.80it/s][A
 42%|████▏     | 92/221 [00:34<00:41,  3.13it/s][A
 42%|████▏     | 93/221 [00:34<00:39,  3.23it/s][A
 43%|████▎     | 94/221 [00:34<00:40,  3.14it/s][A
 43%|████▎     | 95/221 [00:35<00:40,  3.09it/s][A
 43%|████▎     | 96/221 [00:35<00:40,  3.10it/s][A
 44%|████▍     | 97/221 [00:35<00:33,  3.69it/s][A
 44%|████▍     | 98/221 [00:35<00:36,  3.38it/s][A
 45%|████▍     | 99/221 [00:36<00:31,  3.87it/s][A
 45%|████▌     | 100/221 [00:36<00:39,  3.08it/s][A
 46%|████▌     | 101/221 [00:36<00:40,  2.98it/s][A[h264 @ 0x56348d1db3c0] mmco: unref short failure

 46%|████▌     | 102/221 [00:37<00:58,  2.04it/s][A
 47%|████▋     | 103/221 [00:37<00:47,  2.46it/s][A
 47%|████▋     | 104/221 [00:38<00:39,  2.97it/s][A
 48%|████▊     | 105/221 [00:38<00:37,  3.11it/s][A
 48%|████▊     | 106/221 [00:39<00:55,  2.09it/s][A
 48%|████▊     | 107/221 [00:39<00:43,  2.62it/s][A
 49%|████▉     | 108/221 [00:39<00:36,  3.07it/s][A
 49%|████▉     | 109/221 [00:39<00:34,  3.27it/s][A
 50%|████▉     | 110/221 [00:40<00:36,  3.01it/s][A
 50%|█████     | 111/221 [00:40<00:43,  2.51it/s][A
 51%|█████     | 112/221 [00:41<00:36,  2.96it/s][A
 51%|█████     | 113/221 [00:41<00:39,  2.74it/s][A
 52%|█████▏    | 114/221 [00:41<00:30,  3.46it/s][A
 52%|█████▏    | 116/221 [00:44<01:30,  1.16it/s][A
 53%|█████▎    | 117/221 [00:45<01:18,  1.33it/s][A
 53%|█████▎    | 118/221 [00:45<01:04,  1.60it/s][A
 54%|█████▍    | 119/221 [00:45<00:56,  1.80it/s][A
 54%|█████▍    | 120/221 [00:45<00:48,  2.07it/s][A
 55%|█████▍    | 121/221 [00:46<00:38,  2.58it/s][A[h264 @ 0x557674813800] mmco: unref short failure

 55%|█████▌    | 122/221 [00:46<00:33,  2.97it/s][A
 56%|█████▌    | 123/221 [00:46<00:28,  3.44it/s][A
 56%|█████▌    | 124/221 [00:46<00:28,  3.35it/s][A09/17/2024 02:43:40 - INFO - __main__ -   current idx YejxNzlOkeM.23 from finetune_area returns wrong image/video, use 104493 instead.

 57%|█████▋    | 125/221 [00:47<00:30,  3.10it/s][A
 57%|█████▋    | 126/221 [00:47<00:33,  2.80it/s][A
 57%|█████▋    | 127/221 [00:48<00:39,  2.38it/s][A
 58%|█████▊    | 128/221 [00:48<00:38,  2.44it/s][A
 58%|█████▊    | 129/221 [00:48<00:35,  2.62it/s][A
 59%|█████▉    | 130/221 [00:49<00:32,  2.79it/s][A
 59%|█████▉    | 131/221 [00:49<00:27,  3.27it/s][A
 60%|█████▉    | 132/221 [00:49<00:23,  3.82it/s][A
 60%|██████    | 133/221 [00:49<00:27,  3.21it/s][A
 61%|██████    | 134/221 [00:50<00:24,  3.49it/s][A
 61%|██████    | 135/221 [00:50<00:25,  3.35it/s][A
 62%|██████▏   | 136/221 [00:50<00:28,  3.04it/s][A
 62%|██████▏   | 137/221 [00:51<00:25,  3.36it/s][A
 62%|██████▏   | 138/221 [00:51<00:26,  3.09it/s][A
 63%|██████▎   | 139/221 [00:52<00:33,  2.45it/s][A
 63%|██████▎   | 140/221 [00:52<00:30,  2.70it/s][A
 64%|██████▍   | 141/221 [00:52<00:27,  2.92it/s][A
 64%|██████▍   | 142/221 [00:53<00:25,  3.05it/s][A
 65%|██████▍   | 143/221 [00:53<00:26,  2.89it/s][A
 65%|██████▌   | 144/221 [00:53<00:31,  2.43it/s][A
 66%|██████▌   | 146/221 [00:54<00:19,  3.77it/s][A
 67%|██████▋   | 147/221 [00:54<00:18,  3.90it/s][A
 67%|██████▋   | 148/221 [00:54<00:19,  3.74it/s][A
 67%|██████▋   | 149/221 [00:54<00:17,  4.23it/s][A
 68%|██████▊   | 150/221 [00:55<00:16,  4.36it/s][A[h264 @ 0x56348d5f7940] mmco: unref short failure
[h264 @ 0x56348d5f7940] mmco: unref short failure

 68%|██████▊   | 151/221 [00:55<00:24,  2.87it/s][A
 69%|██████▉   | 152/221 [00:57<00:59,  1.17it/s][A
 69%|██████▉   | 153/221 [00:58<00:49,  1.37it/s][A
 70%|██████▉   | 154/221 [00:58<00:39,  1.69it/s][A
 70%|███████   | 155/221 [00:58<00:31,  2.07it/s][A
 71%|███████   | 156/221 [00:58<00:26,  2.42it/s][A
 71%|███████   | 157/221 [00:59<00:32,  2.00it/s][A
 71%|███████▏  | 158/221 [00:59<00:26,  2.38it/s][A
 72%|███████▏  | 159/221 [01:00<00:20,  3.04it/s][A
 72%|███████▏  | 160/221 [01:00<00:20,  2.99it/s][A
 73%|███████▎  | 161/221 [01:00<00:17,  3.43it/s][A
 73%|███████▎  | 162/221 [01:01<00:23,  2.52it/s][A
 74%|███████▍  | 163/221 [01:01<00:20,  2.78it/s][A
 74%|███████▍  | 164/221 [01:02<00:28,  2.00it/s][A
 75%|███████▍  | 165/221 [01:02<00:21,  2.58it/s][A
 75%|███████▌  | 166/221 [01:02<00:24,  2.24it/s][A
 76%|███████▌  | 167/221 [01:03<00:19,  2.83it/s][A
 76%|███████▌  | 168/221 [01:03<00:24,  2.17it/s][A
 76%|███████▋  | 169/221 [01:04<00:19,  2.68it/s][A
 77%|███████▋  | 170/221 [01:04<00:19,  2.68it/s][A
 77%|███████▋  | 171/221 [01:04<00:17,  2.86it/s][A
 78%|███████▊  | 172/221 [01:04<00:15,  3.24it/s][A
 78%|███████▊  | 173/221 [01:05<00:14,  3.31it/s][A
 79%|███████▊  | 174/221 [01:05<00:12,  3.84it/s][A[h264 @ 0x5576708cd0c0] mmco: unref short failure
[h264 @ 0x5576708cd0c0] mmco: unref short failure

 79%|███████▉  | 175/221 [01:05<00:14,  3.24it/s][A
 80%|███████▉  | 176/221 [01:06<00:13,  3.46it/s][A
 80%|████████  | 177/221 [01:06<00:11,  3.94it/s][A
 81%|████████  | 178/221 [01:06<00:12,  3.58it/s][A
 81%|████████  | 179/221 [01:06<00:12,  3.24it/s][A
 81%|████████▏ | 180/221 [01:07<00:10,  4.04it/s][A
 82%|████████▏ | 181/221 [01:07<00:09,  4.30it/s][A
 82%|████████▏ | 182/221 [01:07<00:08,  4.61it/s][A
 83%|████████▎ | 183/221 [01:07<00:07,  4.87it/s][A
 83%|████████▎ | 184/221 [01:07<00:07,  4.64it/s][A[h264 @ 0x55562cfaef80] mmco: unref short failure

 84%|████████▍ | 186/221 [01:08<00:07,  4.79it/s][A
 85%|████████▍ | 187/221 [01:08<00:06,  5.05it/s][A
 85%|████████▌ | 188/221 [01:08<00:06,  4.92it/s][A[h264 @ 0x55857fb63640] mmco: unref short failure

 86%|████████▌ | 189/221 [01:09<00:09,  3.50it/s][A
 86%|████████▌ | 190/221 [01:09<00:11,  2.74it/s][A
 86%|████████▋ | 191/221 [01:09<00:08,  3.40it/s][A
 87%|████████▋ | 192/221 [01:10<00:08,  3.44it/s][A
 88%|████████▊ | 194/221 [01:10<00:09,  2.78it/s][A
 88%|████████▊ | 195/221 [01:11<00:08,  3.13it/s][A
 89%|████████▊ | 196/221 [01:11<00:08,  2.88it/s][A
 89%|████████▉ | 197/221 [01:11<00:07,  3.43it/s][A
 90%|████████▉ | 198/221 [01:11<00:06,  3.73it/s][A
 90%|█████████ | 199/221 [01:12<00:05,  4.09it/s][A
 90%|█████████ | 200/221 [01:12<00:05,  3.91it/s][A
 91%|█████████ | 201/221 [01:12<00:04,  4.02it/s][A
 91%|█████████▏| 202/221 [01:12<00:04,  4.27it/s][A
 92%|█████████▏| 203/221 [01:13<00:04,  4.23it/s][A
 92%|█████████▏| 204/221 [01:13<00:03,  4.34it/s][A
 93%|█████████▎| 206/221 [01:13<00:04,  3.60it/s][A
 94%|█████████▎| 207/221 [01:14<00:03,  4.17it/s][A
 94%|█████████▍| 208/221 [01:14<00:02,  4.70it/s][A
 95%|█████████▍| 209/221 [01:14<00:02,  4.74it/s][A
 95%|█████████▌| 211/221 [01:14<00:02,  4.39it/s][A
 96%|█████████▌| 212/221 [01:15<00:02,  4.32it/s][A
 96%|█████████▋| 213/221 [01:15<00:01,  4.49it/s][A
 97%|█████████▋| 214/221 [01:15<00:01,  3.99it/s][A
 97%|█████████▋| 215/221 [01:15<00:01,  4.06it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  3.83it/s][A
 98%|█████████▊| 217/221 [01:16<00:01,  3.35it/s][A
 99%|█████████▊| 218/221 [01:16<00:00,  3.13it/s][A
 99%|█████████▉| 219/221 [01:17<00:00,  2.93it/s][A
100%|█████████▉| 220/221 [01:20<00:01,  1.13s/it][A[h264 @ 0x558591561800] mmco: unref short failure
[h264 @ 0x558591561800] mmco: unref short failure

100%|██████████| 221/221 [01:20<00:00,  1.18it/s][A100%|██████████| 221/221 [01:20<00:00,  2.74it/s]
[h264 @ 0x56348d135080] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.39it/s][A
  1%|          | 2/221 [00:00<01:04,  3.40it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.33it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.36it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.37it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.31it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.25it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.29it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.29it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.34it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.32it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.34it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.28it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.31it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.34it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.28it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.31it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.34it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.32it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.35it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.37it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.36it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.38it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.39it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.39it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.40it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.40it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.40it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.40it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.40it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.41it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.40it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.40it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.41it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.41it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.41it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.41it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.41it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:29,  7.43it/s][A
  1%|          | 2/221 [00:00<01:03,  3.46it/s][A
  1%|▏         | 3/221 [00:00<01:14,  2.93it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.58it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.82it/s][A
  3%|▎         | 6/221 [00:01<00:45,  4.76it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.10it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.74it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.58it/s][A
  5%|▍         | 10/221 [00:02<00:58,  3.59it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.57it/s][A
  5%|▌         | 12/221 [00:03<00:53,  3.92it/s][A
  6%|▌         | 13/221 [00:03<01:25,  2.44it/s][A
  6%|▋         | 14/221 [00:04<01:07,  3.07it/s][A
  7%|▋         | 15/221 [00:04<01:08,  3.01it/s][A
  7%|▋         | 16/221 [00:04<01:10,  2.91it/s][A
  8%|▊         | 17/221 [00:05<01:22,  2.48it/s][A
  8%|▊         | 18/221 [00:05<01:26,  2.34it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<00:51,  3.91it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.07it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.18it/s][A
 11%|█▏        | 25/221 [00:06<00:39,  4.99it/s][A
 12%|█▏        | 26/221 [00:07<00:46,  4.20it/s][A
 12%|█▏        | 27/221 [00:07<00:43,  4.41it/s][A
 13%|█▎        | 28/221 [00:07<00:55,  3.45it/s][A
 13%|█▎        | 29/221 [00:08<00:59,  3.23it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:08<00:56,  3.37it/s][A
 14%|█▍        | 32/221 [00:08<00:47,  3.95it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.09it/s][A
 15%|█▌        | 34/221 [00:09<00:44,  4.22it/s][A
 16%|█▌        | 35/221 [00:09<00:51,  3.65it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.36it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.59it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.57it/s][A
 18%|█▊        | 39/221 [00:10<00:45,  4.02it/s][A
 18%|█▊        | 40/221 [00:11<00:48,  3.70it/s][A
 19%|█▊        | 41/221 [00:11<00:43,  4.14it/s][A
 19%|█▉        | 42/221 [00:11<00:38,  4.68it/s][A
 19%|█▉        | 43/221 [00:11<00:50,  3.52it/s][A
 20%|█▉        | 44/221 [00:12<00:47,  3.70it/s][A
 20%|██        | 45/221 [00:12<00:54,  3.26it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.73it/s][A
 22%|██▏       | 48/221 [00:12<00:32,  5.33it/s][A
 22%|██▏       | 49/221 [00:13<00:31,  5.43it/s][A
 23%|██▎       | 50/221 [00:13<00:33,  5.17it/s][A
 23%|██▎       | 51/221 [00:13<00:38,  4.43it/s][A
 24%|██▍       | 53/221 [00:13<00:31,  5.38it/s][A
 24%|██▍       | 54/221 [00:14<00:33,  5.02it/s][A
 25%|██▍       | 55/221 [00:14<00:33,  4.96it/s][A
 25%|██▌       | 56/221 [00:14<00:37,  4.43it/s][A
 26%|██▌       | 57/221 [00:14<00:41,  3.97it/s][A
 26%|██▌       | 58/221 [00:15<00:36,  4.41it/s][A
 27%|██▋       | 59/221 [00:15<00:38,  4.22it/s][A
 27%|██▋       | 60/221 [00:15<00:38,  4.16it/s][A
 28%|██▊       | 61/221 [00:15<00:38,  4.20it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.72it/s][A
 29%|██▊       | 63/221 [00:16<00:37,  4.17it/s][A
 29%|██▉       | 64/221 [00:16<00:37,  4.21it/s][A
 29%|██▉       | 65/221 [00:16<00:36,  4.24it/s][A
 30%|██▉       | 66/221 [00:17<00:41,  3.78it/s][A
 30%|███       | 67/221 [00:17<00:51,  3.00it/s][A
 31%|███       | 68/221 [00:17<00:46,  3.27it/s][A
 31%|███       | 69/221 [00:18<00:49,  3.06it/s][A
 32%|███▏      | 70/221 [00:18<00:41,  3.68it/s][A
 32%|███▏      | 71/221 [00:18<00:42,  3.51it/s][A
 33%|███▎      | 72/221 [00:19<00:47,  3.12it/s][A
 33%|███▎      | 73/221 [00:19<00:44,  3.31it/s][A
 33%|███▎      | 74/221 [00:19<00:45,  3.27it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.19it/s][A
 34%|███▍      | 76/221 [00:20<00:37,  3.82it/s][A
 35%|███▍      | 77/221 [00:20<00:34,  4.17it/s][A
 35%|███▌      | 78/221 [00:20<00:39,  3.62it/s][A
 36%|███▌      | 79/221 [00:21<00:39,  3.63it/s][A
 36%|███▌      | 80/221 [00:21<00:40,  3.44it/s][A
 37%|███▋      | 81/221 [00:21<00:38,  3.67it/s][A
 37%|███▋      | 82/221 [00:21<00:37,  3.73it/s][A
 38%|███▊      | 83/221 [00:22<00:33,  4.14it/s][A
 38%|███▊      | 84/221 [00:22<00:38,  3.55it/s][A
 38%|███▊      | 85/221 [00:22<00:40,  3.33it/s][A
 39%|███▉      | 86/221 [00:22<00:38,  3.48it/s][A
 39%|███▉      | 87/221 [00:23<00:52,  2.55it/s][A
 40%|███▉      | 88/221 [00:23<00:44,  2.99it/s][A
 40%|████      | 89/221 [00:24<00:42,  3.14it/s][A
 41%|████      | 90/221 [00:24<00:41,  3.17it/s][A
 41%|████      | 91/221 [00:24<00:35,  3.63it/s][A
 42%|████▏     | 92/221 [00:24<00:35,  3.60it/s][A
 42%|████▏     | 93/221 [00:25<00:35,  3.58it/s][A
 43%|████▎     | 94/221 [00:25<00:33,  3.77it/s][A
 43%|████▎     | 95/221 [00:25<00:43,  2.93it/s][A
 43%|████▎     | 96/221 [00:26<00:37,  3.36it/s][A
 44%|████▍     | 97/221 [00:26<00:36,  3.38it/s][A
 44%|████▍     | 98/221 [00:26<00:35,  3.43it/s][A
 45%|████▍     | 99/221 [00:26<00:33,  3.63it/s][A
 45%|████▌     | 100/221 [00:27<00:29,  4.13it/s][A
 46%|████▌     | 101/221 [00:27<00:27,  4.34it/s][A
 46%|████▌     | 102/221 [00:27<00:31,  3.75it/s][A
 47%|████▋     | 103/221 [00:27<00:29,  3.96it/s][A
 47%|████▋     | 104/221 [00:27<00:24,  4.76it/s][A
 48%|████▊     | 105/221 [00:28<00:25,  4.48it/s][A
 48%|████▊     | 106/221 [00:28<00:32,  3.56it/s][A
 48%|████▊     | 107/221 [00:28<00:27,  4.18it/s][A
 49%|████▉     | 108/221 [00:28<00:24,  4.52it/s][A
 49%|████▉     | 109/221 [00:29<00:26,  4.28it/s][A
 50%|████▉     | 110/221 [00:29<00:31,  3.54it/s][A
 50%|█████     | 111/221 [00:29<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:30<00:32,  3.33it/s][A
 51%|█████     | 113/221 [00:30<00:31,  3.47it/s][A
 52%|█████▏    | 115/221 [00:30<00:24,  4.39it/s][A
 52%|█████▏    | 116/221 [00:31<00:22,  4.58it/s][A
 53%|█████▎    | 117/221 [00:31<00:24,  4.21it/s][A
 53%|█████▎    | 118/221 [00:31<00:28,  3.67it/s][A
 54%|█████▍    | 119/221 [00:32<00:36,  2.82it/s][A
 54%|█████▍    | 120/221 [00:32<00:36,  2.73it/s][A
 55%|█████▍    | 121/221 [00:32<00:29,  3.39it/s][A
 55%|█████▌    | 122/221 [00:32<00:25,  3.84it/s][A
 56%|█████▌    | 123/221 [00:33<00:25,  3.87it/s][A
 56%|█████▌    | 124/221 [00:33<00:32,  2.99it/s][A
 57%|█████▋    | 125/221 [00:34<00:44,  2.17it/s][A
 57%|█████▋    | 126/221 [00:34<00:38,  2.44it/s][A
 57%|█████▋    | 127/221 [00:35<00:44,  2.11it/s][A
 58%|█████▊    | 128/221 [00:35<00:37,  2.50it/s][A
 58%|█████▊    | 129/221 [00:35<00:28,  3.20it/s][A
 59%|█████▉    | 130/221 [00:35<00:26,  3.44it/s][A
 59%|█████▉    | 131/221 [00:36<00:23,  3.86it/s][A
 60%|█████▉    | 132/221 [00:36<00:23,  3.78it/s][A
 60%|██████    | 133/221 [00:36<00:29,  2.93it/s][A
 61%|██████    | 134/221 [00:37<00:32,  2.71it/s][A
 62%|██████▏   | 136/221 [00:37<00:25,  3.33it/s][A
 62%|██████▏   | 137/221 [00:38<00:23,  3.50it/s][A
 62%|██████▏   | 138/221 [00:38<00:23,  3.51it/s][A
 63%|██████▎   | 139/221 [00:38<00:27,  2.96it/s][A
 63%|██████▎   | 140/221 [00:39<00:24,  3.34it/s][A
 64%|██████▍   | 141/221 [00:39<00:24,  3.23it/s][A
 64%|██████▍   | 142/221 [00:39<00:22,  3.51it/s][A
 65%|██████▍   | 143/221 [00:39<00:23,  3.36it/s][A
 65%|██████▌   | 144/221 [00:40<00:21,  3.59it/s][A
 66%|██████▌   | 145/221 [00:40<00:23,  3.25it/s][A
 66%|██████▌   | 146/221 [00:40<00:23,  3.19it/s][A
 67%|██████▋   | 147/221 [00:41<00:20,  3.58it/s][A
 67%|██████▋   | 148/221 [00:41<00:18,  3.94it/s][A
 67%|██████▋   | 149/221 [00:41<00:19,  3.65it/s][A
 68%|██████▊   | 150/221 [00:41<00:18,  3.75it/s][A
 68%|██████▊   | 151/221 [00:42<00:24,  2.83it/s][A
 69%|██████▉   | 152/221 [00:43<00:32,  2.14it/s][A
 69%|██████▉   | 153/221 [00:43<00:28,  2.42it/s][A
 70%|██████▉   | 154/221 [00:43<00:22,  2.92it/s][A
 70%|███████   | 155/221 [00:44<00:27,  2.42it/s][A
 71%|███████   | 156/221 [00:44<00:23,  2.73it/s][A
 71%|███████   | 157/221 [00:44<00:22,  2.86it/s][A
 71%|███████▏  | 158/221 [00:45<00:23,  2.68it/s][A
 72%|███████▏  | 159/221 [00:45<00:18,  3.27it/s][A
 72%|███████▏  | 160/221 [00:45<00:18,  3.25it/s][A
 73%|███████▎  | 161/221 [00:45<00:16,  3.69it/s][A
 73%|███████▎  | 162/221 [00:45<00:14,  4.09it/s][A
 74%|███████▍  | 163/221 [00:46<00:14,  4.11it/s][A
 74%|███████▍  | 164/221 [00:46<00:12,  4.56it/s][A
 75%|███████▍  | 165/221 [00:46<00:11,  4.76it/s][A
 75%|███████▌  | 166/221 [00:47<00:15,  3.45it/s][A
 76%|███████▌  | 167/221 [00:47<00:13,  4.14it/s][A
 76%|███████▌  | 168/221 [00:47<00:13,  3.96it/s][A
 76%|███████▋  | 169/221 [00:47<00:11,  4.52it/s][A
 77%|███████▋  | 170/221 [00:48<00:16,  3.01it/s][A
 77%|███████▋  | 171/221 [00:48<00:19,  2.58it/s][A
 78%|███████▊  | 172/221 [00:48<00:16,  2.93it/s][A
 78%|███████▊  | 173/221 [00:49<00:16,  2.93it/s][A
 79%|███████▊  | 174/221 [00:49<00:14,  3.35it/s][A
 79%|███████▉  | 175/221 [00:49<00:14,  3.25it/s][A
 80%|███████▉  | 176/221 [00:49<00:12,  3.64it/s][A
 80%|████████  | 177/221 [00:50<00:11,  3.69it/s][A
 81%|████████  | 178/221 [00:50<00:14,  2.96it/s][A
 81%|████████  | 179/221 [00:51<00:13,  3.00it/s][A
 82%|████████▏ | 181/221 [00:51<00:10,  3.64it/s][A
 82%|████████▏ | 182/221 [00:51<00:10,  3.63it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.51it/s][A
 83%|████████▎ | 184/221 [00:52<00:10,  3.62it/s][A
 84%|████████▎ | 185/221 [00:52<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:53<00:12,  2.90it/s][A
 85%|████████▍ | 187/221 [00:53<00:10,  3.28it/s][A
 85%|████████▌ | 188/221 [00:53<00:09,  3.34it/s][A
 86%|████████▌ | 189/221 [00:53<00:08,  3.73it/s][A
 86%|████████▌ | 190/221 [00:54<00:11,  2.78it/s][A
 86%|████████▋ | 191/221 [00:54<00:08,  3.48it/s][A
 87%|████████▋ | 192/221 [00:54<00:07,  3.94it/s][A
 87%|████████▋ | 193/221 [00:54<00:06,  4.56it/s][A
 88%|████████▊ | 194/221 [00:55<00:06,  3.93it/s][A
 88%|████████▊ | 195/221 [00:55<00:06,  3.95it/s][A
 89%|████████▊ | 196/221 [00:56<00:09,  2.54it/s][A
 89%|████████▉ | 197/221 [00:56<00:10,  2.39it/s][A
 90%|████████▉ | 198/221 [00:57<00:09,  2.38it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  2.88it/s][A
 90%|█████████ | 200/221 [00:57<00:06,  3.02it/s][A
 91%|█████████ | 201/221 [00:57<00:05,  3.43it/s][A
 91%|█████████▏| 202/221 [00:57<00:05,  3.36it/s][A
 92%|█████████▏| 203/221 [00:58<00:05,  3.57it/s][A
 92%|█████████▏| 204/221 [00:58<00:05,  3.32it/s][A
 93%|█████████▎| 205/221 [00:58<00:04,  3.73it/s][A
 93%|█████████▎| 206/221 [00:59<00:05,  2.67it/s][A
 94%|█████████▎| 207/221 [00:59<00:04,  2.94it/s][A
 94%|█████████▍| 208/221 [00:59<00:04,  3.16it/s][A
 95%|█████████▍| 209/221 [01:00<00:04,  2.93it/s][A
 95%|█████████▌| 210/221 [01:00<00:03,  3.43it/s][A
 95%|█████████▌| 211/221 [01:00<00:02,  3.66it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.11it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.24it/s][A
 97%|█████████▋| 214/221 [01:01<00:02,  3.05it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.87it/s][A
 98%|█████████▊| 216/221 [01:02<00:01,  2.94it/s][A
 98%|█████████▊| 217/221 [01:02<00:01,  3.11it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.48it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  2.94it/s][A
100%|█████████▉| 220/221 [01:03<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.16it/s][A100%|██████████| 221/221 [01:04<00:00,  3.45it/s]
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'area_r1': 40.7, 'area_recall': '40.7/66.9/75.6', 'area_ravg': 61.0}
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'forward_r1': 36.4, 'forward_recall': '36.4/63.5/74.4', 'forward_ravg': 58.1}
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'area_video_r1': 41.1, 'area_video_recall': '41.1/68.8/78.2', 'area_video_ravg': 62.7}
09/17/2024 02:46:28 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 02:46:28 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/75.5/81.8', 'area_video_ravg': 69.9, 'area_video_back_r1': 48.2, 'area_video_back_recall': '48.2/72.5/80.7', 'area_video_back_ravg': 67.1}
09/17/2024 02:46:28 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 449=======

09/17/2024 02:46:28 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/75.5/81.8', 'area_video_ravg': 69.9, 'area_video_back_r1': 48.2, 'area_video_back_recall': '48.2/72.5/80.7', 'area_video_back_ravg': 67.1}
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'video_r1': 37.2, 'video_recall': '37.2/64.3/73.6', 'video_ravg': 58.4}
09/17/2024 02:46:28 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 02:46:28 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 02:46:28 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 449--===========

09/17/2024 02:46:28 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 02:46:28 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 02:46:28 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 02:47:02 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009839166887104511, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.2663459777832031, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.1331775188446045, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.40936279296875}
 15%|█▌        | 450/2910 [2:51:05<94:37:13, 138.47s/it] 15%|█▌        | 451/2910 [2:51:09<66:58:40, 98.06s/it]  16%|█▌        | 452/2910 [2:51:13<47:42:55, 69.88s/it][h264 @ 0x56348d23b140] mmco: unref short failure
 16%|█▌        | 453/2910 [2:51:18<34:21:30, 50.34s/it] 16%|█▌        | 454/2910 [2:51:24<25:11:10, 36.92s/it][h264 @ 0x555636242800] mmco: unref short failure
[h264 @ 0x555636242800] mmco: unref short failure
[h264 @ 0x555636242800] mmco: unref short failure
 16%|█▌        | 455/2910 [2:51:29<18:43:58, 27.47s/it] 16%|█▌        | 456/2910 [2:51:35<14:13:01, 20.86s/it][h264 @ 0x55857e77de80] mmco: unref short failure
09/17/2024 02:47:35 - INFO - __main__ -   current idx 37nPbMq5QY0.46 from finetune_area returns wrong image/video, use 120240 instead.
 16%|█▌        | 457/2910 [2:51:42<11:22:16, 16.69s/it][h264 @ 0x558598413080] mmco: unref short failure
 16%|█▌        | 458/2910 [2:51:48<9:11:14, 13.49s/it] [h264 @ 0x56349675bec0] mmco: unref short failure
[h264 @ 0x56349675bec0] mmco: unref short failure
 16%|█▌        | 459/2910 [2:51:54<7:44:35, 11.37s/it][h264 @ 0x5556262d6840] mmco: unref short failure
[h264 @ 0x55857eae5680] mmco: unref short failure
[h264 @ 0x55857eae5680] mmco: unref short failure
 16%|█▌        | 460/2910 [2:52:00<6:41:33,  9.83s/it][h264 @ 0x55857e85a640] mmco: unref short failure
[h264 @ 0x55857e85a640] mmco: unref short failure
[h264 @ 0x55857e85a640] mmco: unref short failure
[h264 @ 0x55857e85a640] mmco: unref short failure
[h264 @ 0x5634ab08ba40] mmco: unref short failure
[h264 @ 0x5634ab08ba40] mmco: unref short failure
 16%|█▌        | 461/2910 [2:52:07<6:10:12,  9.07s/it][h264 @ 0x5576713a37c0] mmco: unref short failure
[h264 @ 0x56348d5e9dc0] mmco: unref short failure
[h264 @ 0x56348d5e9dc0] mmco: unref short failure
[h264 @ 0x555636242800] mmco: unref short failure
[h264 @ 0x555636242800] mmco: unref short failure
 16%|█▌        | 462/2910 [2:52:14<5:35:42,  8.23s/it] 16%|█▌        | 463/2910 [2:52:20<5:10:10,  7.61s/it][h264 @ 0x55561760dc00] mmco: unref short failure
 16%|█▌        | 464/2910 [2:52:27<5:00:03,  7.36s/it][h264 @ 0x5556170f3280] mmco: unref short failure
[h264 @ 0x5556170f3280] mmco: unref short failure
[h264 @ 0x563499598780] mmco: unref short failure
[h264 @ 0x563499598780] mmco: unref short failure
 16%|█▌        | 465/2910 [2:52:32<4:38:09,  6.83s/it][h264 @ 0x563499598780] mmco: unref short failure
[h264 @ 0x563499598780] mmco: unref short failure
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x5634ae918e80] mmco: unref short failure
[h264 @ 0x5634ae918e80] mmco: unref short failure
09/17/2024 02:48:47 - INFO - __main__ -   current idx rJOs530YXYo.53 from finetune_area returns wrong image/video, use 140395 instead.
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x55561cfd4600] mmco: unref short failure
[h264 @ 0x55563099fa00] mmco: unref short failure
 16%|█▌        | 466/2910 [2:53:15<11:51:30, 17.47s/it] 16%|█▌        | 467/2910 [2:53:21<9:42:01, 14.29s/it] [h264 @ 0x5634a4facc40] mmco: unref short failure
[h264 @ 0x5634a4facc40] mmco: unref short failure
[h264 @ 0x5634a4facc40] mmco: unref short failure
[h264 @ 0x5634a4facc40] mmco: unref short failure
09/17/2024 02:49:37 - INFO - __main__ -   current idx EboJj8xv0Wo.48 from finetune_area returns wrong image/video, use 102431 instead.
[h264 @ 0x55767101d8c0] mmco: unref short failure
[h264 @ 0x55767101d8c0] mmco: unref short failure
 16%|█▌        | 468/2910 [2:53:53<13:15:54, 19.56s/it][h264 @ 0x55857e7b2240] mmco: unref short failure
[h264 @ 0x55857e7b2240] mmco: unref short failure
[h264 @ 0x55857e7b2240] mmco: unref short failure
[h264 @ 0x55857e7b2240] mmco: unref short failure
 16%|█▌        | 469/2910 [2:54:00<10:40:54, 15.75s/it][h264 @ 0x557674813800] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x55857fb63640] mmco: unref short failure
[h264 @ 0x55857fb63640] mmco: unref short failure
 16%|█▌        | 470/2910 [2:54:07<8:52:18, 13.09s/it] [h264 @ 0x5634ab08ba40] mmco: unref short failure
 16%|█▌        | 471/2910 [2:54:14<7:42:55, 11.39s/it][h264 @ 0x55858677a600] mmco: unref short failure
[h264 @ 0x55857ee53980] mmco: unref short failure
 16%|█▌        | 472/2910 [2:54:22<6:51:05, 10.12s/it][h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
[h264 @ 0x555620342d00] mmco: unref short failure
 16%|█▋        | 473/2910 [2:54:28<6:00:26,  8.87s/it][h264 @ 0x56349b25b680] mmco: unref short failure
[h264 @ 0x56349b25b680] mmco: unref short failure
[h264 @ 0x555621899e40] mmco: unref short failure
[h264 @ 0x55766a0b35c0] mmco: unref short failure
[h264 @ 0x5576708cd0c0] mmco: unref short failure
[h264 @ 0x5576708cd0c0] mmco: unref short failure
[h264 @ 0x5634a15ffb40] mmco: unref short failure
[h264 @ 0x5634a15ffb40] mmco: unref short failure
[h264 @ 0x5556203457c0] mmco: unref short failure
[h264 @ 0x5556203457c0] mmco: unref short failure
[h264 @ 0x555617704c00] mmco: unref short failure
[h264 @ 0x5556214fad80] mmco: unref short failure
[h264 @ 0x5556214fad80] mmco: unref short failure
[h264 @ 0x558598413080] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x56348d20d7c0] mmco: unref short failure
[h264 @ 0x56348d20d7c0] mmco: unref short failure
[h264 @ 0x56348d1ba780] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x56349cd96c00] mmco: unref short failure
[h264 @ 0x56349cd96c00] mmco: unref short failure
 16%|█▋        | 474/2910 [2:55:45<19:56:18, 29.47s/it][h264 @ 0x55561f0b5a00] mmco: unref short failure
[h264 @ 0x55561f0b5a00] mmco: unref short failure
[h264 @ 0x55561f0b5a00] mmco: unref short failure
[h264 @ 0x55561f0b5a00] mmco: unref short failure
[h264 @ 0x563491fab980] mmco: unref short failure
 16%|█▋        | 475/2910 [2:56:00<16:53:37, 24.98s/it][h264 @ 0x56348d60b280] mmco: unref short failure
[h264 @ 0x55857e8c4d80] mmco: unref short failure
[h264 @ 0x55857e8c4d80] mmco: unref short failure
[h264 @ 0x55857e8c4d80] mmco: unref short failure
[h264 @ 0x55857e8c4d80] mmco: unref short failure
[h264 @ 0x55857eb77a40] mmco: unref short failure
[h264 @ 0x55857eb77a40] mmco: unref short failure
09/17/2024 02:52:15 - INFO - __main__ -   current idx JyHu6qXDg1E.525 from finetune_area returns wrong image/video, use 123006 instead.
 16%|█▋        | 476/2910 [2:56:25<16:56:59, 25.07s/it]09/17/2024 02:52:28 - INFO - __main__ -   current idx bgTXI7WKWoY.26 from finetune_area returns wrong image/video, use 83183 instead.
 16%|█▋        | 477/2910 [2:56:31<13:10:26, 19.49s/it][h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857e783480] mmco: unref short failure
[h264 @ 0x55857ea4a200] mmco: unref short failure
[h264 @ 0x55857ea4a200] mmco: unref short failure
09/17/2024 02:52:36 - INFO - __main__ -   current idx 1wKPYAWLNkA.112 from finetune_area returns wrong image/video, use 50961 instead.
[h264 @ 0x55857e8c4d80] mmco: unref short failure
[h264 @ 0x5634aeb42f00] mmco: unref short failure
[h264 @ 0x5634aeb42f00] mmco: unref short failure
 16%|█▋        | 478/2910 [2:56:38<10:34:02, 15.64s/it][h264 @ 0x55857e7fb280] mmco: unref short failure
[h264 @ 0x55857e7fb280] mmco: unref short failure
 16%|█▋        | 479/2910 [2:56:44<8:31:48, 12.63s/it]  16%|█▋        | 480/2910 [2:56:50<7:19:53, 10.86s/it][h264 @ 0x55562cfaef80] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
 17%|█▋        | 481/2910 [2:56:57<6:23:01,  9.46s/it][h264 @ 0x56348d59a000] mmco: unref short failure
[h264 @ 0x55857e876bc0] mmco: unref short failure
[h264 @ 0x55857e876bc0] mmco: unref short failure
[h264 @ 0x55768258da00] mmco: unref short failure
[h264 @ 0x55768258da00] mmco: unref short failure
[h264 @ 0x55768258da00] mmco: unref short failure
[h264 @ 0x55561721e2c0] mmco: unref short failure
[h264 @ 0x55561721e2c0] mmco: unref short failure
[h264 @ 0x55561721e2c0] mmco: unref short failure
[h264 @ 0x55561721e2c0] mmco: unref short failure
[h264 @ 0x5634a9e1ff80] mmco: unref short failure
09/17/2024 02:53:37 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 115551 instead.
[h264 @ 0x555621899e40] mmco: unref short failure
[h264 @ 0x555621899e40] mmco: unref short failure
[h264 @ 0x555617704c00] mmco: unref short failure
[h264 @ 0x56349b25b680] mmco: unref short failure
[h264 @ 0x56349b25b680] mmco: unref short failure
[h264 @ 0x5634a2bb2800] mmco: unref short failure
[h264 @ 0x5634adb11ac0] mmco: unref short failure
[h264 @ 0x5634adb11ac0] mmco: unref short failure
[h264 @ 0x563496396d00] mmco: unref short failure
[h264 @ 0x55858cf17680] mmco: unref short failure
[h264 @ 0x5634aa19ea00] mmco: unref short failure
[h264 @ 0x5634aa19ea00] mmco: unref short failure
[h264 @ 0x5556173fa4c0] mmco: unref short failure
[h264 @ 0x5556173fa4c0] mmco: unref short failure
09/17/2024 02:54:14 - INFO - __main__ -   current idx 0Hu1HI7Jvzs.159 from finetune_area returns wrong image/video, use 104011 instead.
 17%|█▋        | 482/2910 [2:58:18<20:50:35, 30.90s/it] 17%|█▋        | 483/2910 [2:58:27<16:33:29, 24.56s/it][h264 @ 0x55767bbf4600] mmco: unref short failure
[h264 @ 0x558588e34380] mmco: unref short failure
[h264 @ 0x558588e34380] mmco: unref short failure
[h264 @ 0x555616c90e00] mmco: unref short failure
[h264 @ 0x5576774e27c0] mmco: unref short failure
[h264 @ 0x5576774e27c0] mmco: unref short failure
09/17/2024 02:54:47 - INFO - __main__ -   current idx 9Dbcu8BMaBw.7 from finetune_area returns wrong image/video, use 76933 instead.
[h264 @ 0x555633c132c0] mmco: unref short failure
[h264 @ 0x555617161c40] mmco: unref short failure
 17%|█▋        | 484/2910 [2:58:55<17:06:05, 25.38s/it][h264 @ 0x55766eb95780] mmco: unref short failure
[h264 @ 0x55766eb95780] mmco: unref short failure
09/17/2024 02:54:55 - INFO - __main__ -   current idx GuiTdPE-2G8.5 from finetune_area returns wrong image/video, use 36650 instead.
[h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x557671188080] mmco: unref short failure
 17%|█▋        | 485/2910 [2:59:01<13:12:06, 19.60s/it] 17%|█▋        | 486/2910 [2:59:09<10:51:05, 16.12s/it][h264 @ 0x55767eba0f40] mmco: unref short failure
[h264 @ 0x55767eba0f40] mmco: unref short failure
[h264 @ 0x55767eba0f40] mmco: unref short failure
 17%|█▋        | 487/2910 [2:59:15<8:46:45, 13.04s/it]  17%|█▋        | 488/2910 [2:59:22<7:33:29, 11.23s/it][h264 @ 0x5634940e2d80] mmco: unref short failure
[h264 @ 0x5634940e2d80] mmco: unref short failure
[h264 @ 0x55857e6d9440] mmco: unref short failure
[h264 @ 0x55857e6d9440] mmco: unref short failure
 17%|█▋        | 489/2910 [2:59:28<6:32:47,  9.73s/it][h264 @ 0x55767e232000] mmco: unref short failure
[h264 @ 0x55767e232000] mmco: unref short failure
[h264 @ 0x56349cf1cc80] mmco: unref short failure
[h264 @ 0x56349cf1cc80] mmco: unref short failure
[h264 @ 0x555621a40e40] mmco: unref short failure
[h264 @ 0x55857dd28300] mmco: unref short failure
[h264 @ 0x55857dd28300] mmco: unref short failure
[h264 @ 0x56349cf1cc80] mmco: unref short failure
[h264 @ 0x56349cf1cc80] mmco: unref short failure
[h264 @ 0x55857e8ee6c0] mmco: unref short failure
[h264 @ 0x55768546c200] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x55561680ad40] mmco: unref short failure
[h264 @ 0x56349a894a40] mmco: unref short failure
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x555630a02580] mmco: unref short failure
[h264 @ 0x55857e8ee6c0] mmco: unref short failure
[h264 @ 0x55857e8ee6c0] mmco: unref short failure
[h264 @ 0x5556170f3280] mmco: unref short failure
[h264 @ 0x555633ab7340] mmco: unref short failure
[h264 @ 0x555633ab7340] mmco: unref short failure
 17%|█▋        | 490/2910 [3:00:50<21:11:44, 31.53s/it][h264 @ 0x55857e654b40] mmco: unref short failure
[h264 @ 0x555617704c00] mmco: unref short failure
[h264 @ 0x555617704c00] mmco: unref short failure
[h264 @ 0x55857e7ee980] mmco: unref short failure
[h264 @ 0x55857e7ee980] mmco: unref short failure
[h264 @ 0x56349ce24900] mmco: unref short failure
[h264 @ 0x56349ce24900] mmco: unref short failure
 17%|█▋        | 491/2910 [3:01:05<17:44:50, 26.41s/it]09/17/2024 02:57:09 - INFO - __main__ -   current idx DWhC_3SVyTc.13 from finetune_area returns wrong image/video, use 22882 instead.
[h264 @ 0x55766ea44cc0] mmco: unref short failure
[h264 @ 0x55766ea44cc0] mmco: unref short failure
[h264 @ 0x555617264300] mmco: unref short failure
[h264 @ 0x555617264300] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure
09/17/2024 02:57:32 - INFO - __main__ -   current idx sisprxhsc6I.5 from finetune_area returns wrong image/video, use 53399 instead.
[h264 @ 0x56349831f480] mmco: unref short failure
 17%|█▋        | 492/2910 [3:01:36<18:47:18, 27.97s/it] 17%|█▋        | 493/2910 [3:01:42<14:20:57, 21.37s/it][h264 @ 0x5634aed9dac0] mmco: unref short failure
[h264 @ 0x5634aed9dac0] mmco: unref short failure
[h264 @ 0x563493b77640] mmco: unref short failure
[h264 @ 0x563493b77640] mmco: unref short failure
[h264 @ 0x563493b77640] mmco: unref short failure
 17%|█▋        | 494/2910 [3:01:49<11:26:03, 17.04s/it][h264 @ 0x55857e742700] mmco: unref short failure
[h264 @ 0x56348d313540] mmco: unref short failure
[h264 @ 0x55561d714c80] mmco: unref short failure
[h264 @ 0x55561d714c80] mmco: unref short failure
 17%|█▋        | 495/2910 [3:01:55<9:15:25, 13.80s/it]  17%|█▋        | 496/2910 [3:02:02<7:44:32, 11.55s/it][h264 @ 0x557674617600] mmco: unref short failure
[h264 @ 0x557674617600] mmco: unref short failure
 17%|█▋        | 497/2910 [3:02:08<6:39:49,  9.94s/it][h264 @ 0x555617234100] mmco: unref short failure
[h264 @ 0x555617234100] mmco: unref short failure
[h264 @ 0x555617234100] mmco: unref short failure
[h264 @ 0x5634a1b8bd00] mmco: unref short failure
[h264 @ 0x5634a1b8bd00] mmco: unref short failure
[h264 @ 0x5634a1b8bd00] mmco: unref short failure
[h264 @ 0x5634a1b8bd00] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x5556170f3280] mmco: unref short failure
[h264 @ 0x5556170f3280] mmco: unref short failure
[h264 @ 0x56348ee06c80] mmco: unref short failure
[h264 @ 0x55857e68f1c0] mmco: unref short failure
[h264 @ 0x55857e7fb280] mmco: unref short failure
[h264 @ 0x5576713a37c0] mmco: unref short failure
[h264 @ 0x5576713a37c0] mmco: unref short failure
[h264 @ 0x5576713a37c0] mmco: unref short failure
[h264 @ 0x5576713a37c0] mmco: unref short failure
[h264 @ 0x555617a42000] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x563496cbf3c0] mmco: unref short failure
[h264 @ 0x5576784bd400] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55561bfe4e40] mmco: unref short failure
[h264 @ 0x557685de8cc0] mmco: unref short failure
[h264 @ 0x557685de8cc0] mmco: unref short failure
[h264 @ 0x557674e7ad80] mmco: unref short failure
 17%|█▋        | 498/2910 [3:03:32<21:33:39, 32.18s/it][h264 @ 0x563491b900c0] mmco: unref short failure
[h264 @ 0x563491b900c0] mmco: unref short failure
 17%|█▋        | 499/2910 [3:03:39<16:30:01, 24.64s/it]09/17/2024 02:59:38 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 02:59:38 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x557680b38e00] mmco: unref short failure
[h264 @ 0x557680b38e00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556171ac2c0] mmco: unref short failure
[h264 @ 0x5556171ac2c0] mmco: unref short failure
[h264 @ 0x5556171ac2c0] mmco: unref short failure
[h264 @ 0x5556171ac2c0] mmco: unref short failure
[h264 @ 0x5585896b3700] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5634a9923f00] mmco: unref short failure
[h264 @ 0x5634a9923f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5634a9923f00] mmco: unref short failure
[h264 @ 0x5634a9923f00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x557671188080] mmco: unref short failure
09/17/2024 03:01:26 - INFO - __main__ -   current idx -A-7FmorgRU.15 from finetune_area returns wrong image/video, use 18171 instead.
[h264 @ 0x55766a451b40] mmco: unref short failure
[h264 @ 0x55766a451b40] mmco: unref short failure
[h264 @ 0x5556245d2d00] mmco: unref short failure
[h264 @ 0x5556245d2d00] mmco: unref short failure
[h264 @ 0x5556245d2d00] mmco: unref short failure
[h264 @ 0x5556245d2d00] mmco: unref short failure
[h264 @ 0x55767afb6140] mmco: unref short failure
[h264 @ 0x55767afb6140] mmco: unref short failure
[h264 @ 0x55766b7bab40] mmco: unref short failure
[h264 @ 0x55766b7bab40] mmco: unref short failure
[h264 @ 0x55857e877bc0] mmco: unref short failure
[h264 @ 0x55561bfe4e40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:23,  1.54it/s][A
  1%|          | 2/221 [00:01<01:55,  1.89it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.70it/s][A[h264 @ 0x5634a510e640] mmco: unref short failure

  2%|▏         | 4/221 [00:01<01:04,  3.36it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.39it/s][A
  3%|▎         | 6/221 [00:01<00:54,  3.98it/s][A[h264 @ 0x5634a6f5ce40] mmco: unref short failure

  3%|▎         | 7/221 [00:02<00:52,  4.08it/s][A
  4%|▎         | 8/221 [00:02<00:59,  3.59it/s][A[h264 @ 0x5634a2b6aac0] mmco: unref short failure
[h264 @ 0x5634a2b6aac0] mmco: unref short failure

  4%|▍         | 9/221 [00:02<01:03,  3.36it/s][A
  5%|▍         | 10/221 [00:03<01:25,  2.46it/s][A[h264 @ 0x5585990b2a80] mmco: unref short failure

  5%|▍         | 11/221 [00:03<01:07,  3.10it/s][A
  5%|▌         | 12/221 [00:04<01:11,  2.90it/s][A[h264 @ 0x55766bc91880] mmco: unref short failure
[h264 @ 0x55766bc91880] mmco: unref short failure

  6%|▌         | 13/221 [00:04<01:10,  2.96it/s][A
  6%|▋         | 14/221 [00:04<01:06,  3.09it/s][A
  7%|▋         | 15/221 [00:04<00:58,  3.52it/s][A
  7%|▋         | 16/221 [00:05<01:04,  3.17it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.49it/s][A
  8%|▊         | 18/221 [00:06<01:20,  2.51it/s][A
  9%|▊         | 19/221 [00:06<01:04,  3.15it/s][A
  9%|▉         | 20/221 [00:06<00:56,  3.58it/s][A
 10%|▉         | 21/221 [00:06<00:54,  3.64it/s][A
 10%|▉         | 22/221 [00:07<00:53,  3.70it/s][A
 10%|█         | 23/221 [00:07<00:44,  4.41it/s][A
 11%|█         | 24/221 [00:07<00:41,  4.77it/s][A
 11%|█▏        | 25/221 [00:07<00:46,  4.18it/s][A
 12%|█▏        | 26/221 [00:08<01:00,  3.22it/s][A
 12%|█▏        | 27/221 [00:08<00:56,  3.44it/s][A
 13%|█▎        | 28/221 [00:08<01:09,  2.77it/s][A
 13%|█▎        | 29/221 [00:09<01:20,  2.38it/s][A
 14%|█▎        | 30/221 [00:09<01:11,  2.66it/s][A
 14%|█▍        | 31/221 [00:09<01:03,  3.01it/s][A
 14%|█▍        | 32/221 [00:10<00:53,  3.54it/s][A
 15%|█▍        | 33/221 [00:10<00:47,  3.99it/s][A
 15%|█▌        | 34/221 [00:10<00:38,  4.80it/s][A
 16%|█▌        | 35/221 [00:10<00:39,  4.74it/s][A
 16%|█▋        | 36/221 [00:11<00:50,  3.63it/s][A
 17%|█▋        | 37/221 [00:11<01:14,  2.46it/s][A[h264 @ 0x5556262d6840] mmco: unref short failure
[h264 @ 0x5556262d6840] mmco: unref short failure

 17%|█▋        | 38/221 [00:12<01:12,  2.52it/s][A
 18%|█▊        | 39/221 [00:12<01:12,  2.50it/s][A
 18%|█▊        | 40/221 [00:12<01:10,  2.56it/s][A
 19%|█▊        | 41/221 [00:13<00:57,  3.12it/s][A
 19%|█▉        | 42/221 [00:13<01:07,  2.63it/s][A
 19%|█▉        | 43/221 [00:13<00:54,  3.29it/s][A
 20%|█▉        | 44/221 [00:13<00:48,  3.65it/s][A
 20%|██        | 45/221 [00:14<01:17,  2.28it/s][A[h264 @ 0x557682c0ea40] mmco: unref short failure
[h264 @ 0x557682c0ea40] mmco: unref short failure
[h264 @ 0x557682c0ea40] mmco: unref short failure
[h264 @ 0x557682c0ea40] mmco: unref short failure

 21%|██        | 46/221 [00:15<01:20,  2.19it/s][A
 21%|██▏       | 47/221 [00:15<01:29,  1.95it/s][A
 22%|██▏       | 48/221 [00:16<01:09,  2.49it/s][A
 22%|██▏       | 49/221 [00:16<01:23,  2.06it/s][A
 23%|██▎       | 50/221 [00:16<01:12,  2.35it/s][A
 23%|██▎       | 51/221 [00:17<00:58,  2.91it/s][A
 24%|██▎       | 52/221 [00:17<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:17<00:40,  4.13it/s][A[h264 @ 0x56348d646500] mmco: unref short failure
[h264 @ 0x56348d646500] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<02:45,  1.01it/s][A
 25%|██▍       | 55/221 [00:20<02:12,  1.25it/s][A
 25%|██▌       | 56/221 [00:20<01:42,  1.61it/s][A
 26%|██▌       | 57/221 [00:21<01:24,  1.95it/s][A
 26%|██▌       | 58/221 [00:21<01:08,  2.38it/s][A
 27%|██▋       | 59/221 [00:21<01:02,  2.60it/s][A
 27%|██▋       | 60/221 [00:22<01:26,  1.85it/s][A
 28%|██▊       | 61/221 [00:22<01:10,  2.26it/s][A
 28%|██▊       | 62/221 [00:22<01:06,  2.39it/s][A
 29%|██▊       | 63/221 [00:23<00:59,  2.66it/s][A
 29%|██▉       | 64/221 [00:23<00:57,  2.73it/s][A
 29%|██▉       | 65/221 [00:23<00:56,  2.76it/s][A
 30%|██▉       | 66/221 [00:24<01:06,  2.33it/s][A
 30%|███       | 67/221 [00:25<01:25,  1.81it/s][A
 31%|███       | 68/221 [00:25<01:08,  2.23it/s][A
 31%|███       | 69/221 [00:26<01:12,  2.11it/s][A
 32%|███▏      | 70/221 [00:26<00:59,  2.54it/s][A
 32%|███▏      | 71/221 [00:27<01:24,  1.77it/s][A
 33%|███▎      | 72/221 [00:27<01:14,  2.01it/s][A
 33%|███▎      | 73/221 [00:28<01:08,  2.17it/s][A
 33%|███▎      | 74/221 [00:28<00:55,  2.64it/s][A
 34%|███▍      | 75/221 [00:28<00:51,  2.81it/s][A
 34%|███▍      | 76/221 [00:28<00:43,  3.34it/s][A
 35%|███▍      | 77/221 [00:29<00:48,  3.00it/s][A
 35%|███▌      | 78/221 [00:29<00:45,  3.11it/s][A[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 36%|███▌      | 79/221 [00:29<00:55,  2.58it/s][A
 36%|███▌      | 80/221 [00:30<00:46,  3.01it/s][A
 37%|███▋      | 81/221 [00:30<00:46,  3.03it/s][A[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 37%|███▋      | 82/221 [00:31<01:06,  2.09it/s][A[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 38%|███▊      | 83/221 [00:31<01:06,  2.08it/s][A
 38%|███▊      | 84/221 [00:31<00:53,  2.58it/s][A
 38%|███▊      | 85/221 [00:32<00:41,  3.27it/s][A[h264 @ 0x557668c0fe00] mmco: unref short failure
[h264 @ 0x557668c0fe00] mmco: unref short failure

 39%|███▉      | 86/221 [00:32<00:44,  3.04it/s][A[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 39%|███▉      | 87/221 [00:33<01:01,  2.18it/s][A
 40%|███▉      | 88/221 [00:33<01:01,  2.17it/s][A[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 40%|████      | 89/221 [00:34<01:04,  2.05it/s][A
 41%|████      | 90/221 [00:34<00:59,  2.19it/s][A[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x557682c0ea40] mmco: unref short failure
[h264 @ 0x557682c0ea40] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure
[h264 @ 0x56349d9f5500] mmco: unref short failure

 41%|████      | 91/221 [00:34<00:49,  2.65it/s][A
 42%|████▏     | 92/221 [00:35<00:43,  2.97it/s][A
 42%|████▏     | 93/221 [00:35<00:44,  2.85it/s][A
 43%|████▎     | 94/221 [00:35<00:43,  2.94it/s][A
 43%|████▎     | 95/221 [00:36<00:41,  3.07it/s][A
 43%|████▎     | 96/221 [00:36<00:42,  2.91it/s][A
 44%|████▍     | 97/221 [00:36<00:36,  3.40it/s][A
 44%|████▍     | 98/221 [00:36<00:38,  3.21it/s][A
 45%|████▍     | 99/221 [00:37<00:35,  3.39it/s][A
 45%|████▌     | 100/221 [00:37<00:33,  3.63it/s][A[h264 @ 0x555627f7b780] mmco: unref short failure

 46%|████▌     | 101/221 [00:37<00:30,  3.95it/s][A
 46%|████▌     | 102/221 [00:38<00:37,  3.17it/s][A
 47%|████▋     | 103/221 [00:38<00:31,  3.77it/s][A
 47%|████▋     | 104/221 [00:38<00:26,  4.39it/s][A
 48%|████▊     | 105/221 [00:38<00:29,  3.90it/s][A
 48%|████▊     | 106/221 [00:39<00:48,  2.37it/s][A
 48%|████▊     | 107/221 [00:39<00:42,  2.69it/s][A
 49%|████▉     | 108/221 [00:40<00:38,  2.93it/s][A
 49%|████▉     | 109/221 [00:40<00:37,  2.96it/s][A
 50%|████▉     | 110/221 [00:40<00:38,  2.90it/s][A
 50%|█████     | 111/221 [00:41<00:44,  2.49it/s][A
 51%|█████     | 112/221 [00:41<00:38,  2.80it/s][A
 51%|█████     | 113/221 [00:41<00:39,  2.71it/s][A
 52%|█████▏    | 114/221 [00:42<00:32,  3.33it/s][A
 52%|█████▏    | 115/221 [00:42<00:26,  4.06it/s][A[h264 @ 0x55857e72d380] mmco: unref short failure
[h264 @ 0x55857e72d380] mmco: unref short failure
[h264 @ 0x55857e72d380] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure

 52%|█████▏    | 116/221 [00:45<01:47,  1.03s/it][A
 53%|█████▎    | 117/221 [00:45<01:25,  1.22it/s][A
 53%|█████▎    | 118/221 [00:45<01:06,  1.54it/s][A
 54%|█████▍    | 119/221 [00:45<00:56,  1.81it/s][A
 54%|█████▍    | 120/221 [00:46<00:47,  2.11it/s][A
 55%|█████▍    | 121/221 [00:46<00:37,  2.69it/s][A
 55%|█████▌    | 122/221 [00:46<00:32,  3.01it/s][A
 56%|█████▌    | 123/221 [00:46<00:27,  3.57it/s][A
 56%|█████▌    | 124/221 [00:46<00:25,  3.77it/s][A
 57%|█████▋    | 125/221 [00:47<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:47<00:27,  3.43it/s][A
 57%|█████▋    | 127/221 [00:48<00:33,  2.85it/s][A
 58%|█████▊    | 128/221 [00:48<00:34,  2.66it/s][A[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure

 58%|█████▊    | 129/221 [00:48<00:30,  2.97it/s][A[h264 @ 0x55768106a980] mmco: unref short failure
[h264 @ 0x55768106a980] mmco: unref short failure

 59%|█████▉    | 130/221 [00:49<00:28,  3.18it/s][A
 59%|█████▉    | 131/221 [00:49<00:23,  3.87it/s][A
 60%|█████▉    | 132/221 [00:49<00:20,  4.36it/s][A[h264 @ 0x555636b574c0] mmco: unref short failure

 60%|██████    | 133/221 [00:49<00:27,  3.16it/s][A
 61%|██████    | 134/221 [00:50<00:26,  3.31it/s][A
 61%|██████    | 135/221 [00:50<00:27,  3.15it/s][A
 62%|██████▏   | 136/221 [00:50<00:28,  2.95it/s][A
 62%|██████▏   | 137/221 [00:51<00:26,  3.20it/s][A
 62%|██████▏   | 138/221 [00:51<00:26,  3.08it/s][A
 63%|██████▎   | 139/221 [00:52<00:34,  2.37it/s][A
 63%|██████▎   | 140/221 [00:52<00:31,  2.55it/s][A
 64%|██████▍   | 141/221 [00:52<00:28,  2.79it/s][A
 64%|██████▍   | 142/221 [00:53<00:30,  2.59it/s][A
 65%|██████▍   | 143/221 [00:53<00:31,  2.44it/s][A
 65%|██████▌   | 144/221 [00:53<00:28,  2.66it/s][A
 66%|██████▌   | 145/221 [00:54<00:41,  1.82it/s][A
 66%|██████▌   | 146/221 [00:55<00:33,  2.26it/s][A
 67%|██████▋   | 147/221 [00:55<00:30,  2.39it/s][A
 67%|██████▋   | 148/221 [00:55<00:31,  2.30it/s][A
 67%|██████▋   | 149/221 [00:56<00:29,  2.42it/s][A
 68%|██████▊   | 150/221 [00:56<00:27,  2.58it/s][A
 68%|██████▊   | 151/221 [00:57<00:31,  2.19it/s][A
 69%|██████▉   | 152/221 [00:58<00:57,  1.21it/s][A
 69%|██████▉   | 153/221 [00:59<00:48,  1.42it/s][A
 70%|██████▉   | 154/221 [00:59<00:39,  1.69it/s][A
 70%|███████   | 155/221 [00:59<00:31,  2.11it/s][A
 71%|███████   | 156/221 [01:00<00:25,  2.53it/s][A
 71%|███████   | 157/221 [01:01<00:36,  1.78it/s][A
 71%|███████▏  | 158/221 [01:01<00:30,  2.08it/s][A
 72%|███████▏  | 159/221 [01:01<00:23,  2.67it/s][A
 72%|███████▏  | 160/221 [01:01<00:21,  2.84it/s][A
 73%|███████▎  | 161/221 [01:01<00:16,  3.55it/s][A
 73%|███████▎  | 162/221 [01:02<00:20,  2.83it/s][A
 74%|███████▍  | 163/221 [01:02<00:19,  3.04it/s][A[h264 @ 0x557671740900] mmco: unref short failure
[h264 @ 0x557671740900] mmco: unref short failure

 74%|███████▍  | 164/221 [01:03<00:24,  2.36it/s][A
 75%|███████▍  | 165/221 [01:03<00:19,  2.92it/s][A
 75%|███████▌  | 166/221 [01:03<00:21,  2.58it/s][A
 76%|███████▌  | 167/221 [01:04<00:16,  3.22it/s][A
 76%|███████▌  | 168/221 [01:05<00:26,  1.98it/s][A
 76%|███████▋  | 169/221 [01:05<00:21,  2.43it/s][A
 77%|███████▋  | 170/221 [01:05<00:20,  2.45it/s][A
 77%|███████▋  | 171/221 [01:06<00:20,  2.49it/s][A
 78%|███████▊  | 172/221 [01:06<00:17,  2.78it/s][A
 78%|███████▊  | 173/221 [01:06<00:15,  3.06it/s][A
 79%|███████▊  | 174/221 [01:06<00:14,  3.35it/s][A
 79%|███████▉  | 175/221 [01:07<00:15,  2.89it/s][A
 80%|███████▉  | 176/221 [01:07<00:14,  3.20it/s][A
 80%|████████  | 177/221 [01:07<00:12,  3.65it/s][A
 81%|████████  | 178/221 [01:07<00:12,  3.39it/s][A
 81%|████████  | 179/221 [01:08<00:13,  3.08it/s][A
 81%|████████▏ | 180/221 [01:08<00:10,  3.89it/s][A
 82%|████████▏ | 181/221 [01:08<00:09,  4.19it/s][A
 82%|████████▏ | 182/221 [01:08<00:09,  4.25it/s][A
 83%|████████▎ | 183/221 [01:09<00:08,  4.39it/s][A
 83%|████████▎ | 184/221 [01:09<00:08,  4.23it/s][A
 84%|████████▎ | 185/221 [01:09<00:07,  5.07it/s][A
 84%|████████▍ | 186/221 [01:09<00:08,  4.22it/s][A
 85%|████████▍ | 187/221 [01:10<00:07,  4.28it/s][A
 85%|████████▌ | 188/221 [01:10<00:07,  4.28it/s][A
 86%|████████▌ | 189/221 [01:10<00:12,  2.65it/s][A
 86%|████████▌ | 190/221 [01:11<00:11,  2.59it/s][A
 86%|████████▋ | 191/221 [01:11<00:09,  3.32it/s][A
 87%|████████▋ | 192/221 [01:11<00:08,  3.40it/s][A[h264 @ 0x56348d646500] mmco: unref short failure

 88%|████████▊ | 194/221 [01:12<00:09,  2.76it/s][A
 88%|████████▊ | 195/221 [01:12<00:08,  3.08it/s][A
 89%|████████▊ | 196/221 [01:13<00:08,  2.96it/s][A
 89%|████████▉ | 197/221 [01:13<00:06,  3.45it/s][A
 90%|████████▉ | 198/221 [01:13<00:06,  3.59it/s][A
 90%|█████████ | 199/221 [01:13<00:05,  3.83it/s][A
 90%|█████████ | 200/221 [01:14<00:05,  3.54it/s][A
 91%|█████████ | 201/221 [01:14<00:05,  3.77it/s][A
 91%|█████████▏| 202/221 [01:14<00:04,  3.95it/s][A
 92%|█████████▏| 203/221 [01:14<00:04,  4.10it/s][A
 92%|█████████▏| 204/221 [01:15<00:04,  3.91it/s][A
 93%|█████████▎| 206/221 [01:15<00:03,  3.86it/s][A
 94%|█████████▎| 207/221 [01:15<00:03,  4.17it/s][A
 94%|█████████▍| 208/221 [01:16<00:02,  4.69it/s][A
 95%|█████████▍| 209/221 [01:16<00:02,  4.53it/s][A
 95%|█████████▌| 211/221 [01:16<00:02,  4.30it/s][A
 96%|█████████▌| 212/221 [01:17<00:02,  3.97it/s][A
 96%|█████████▋| 213/221 [01:17<00:01,  4.11it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  3.49it/s][A
 97%|█████████▋| 215/221 [01:17<00:01,  3.68it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  3.61it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  3.17it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.94it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.82it/s][A[h264 @ 0x555616dfe9c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:22<00:01,  1.26s/it][A
100%|██████████| 221/221 [01:22<00:00,  1.08it/s][A100%|██████████| 221/221 [01:22<00:00,  2.66it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.30it/s][A
  1%|          | 2/221 [00:00<01:05,  3.35it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.34it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.36it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.38it/s][A
  3%|▎         | 6/221 [00:01<01:03,  3.38it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.38it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.32it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.32it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.35it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.37it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.34it/s][A
  6%|▌         | 13/221 [00:03<01:01,  3.36it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.32it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.33it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.33it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.31it/s][A
  9%|▉         | 20/221 [00:05<01:00,  3.34it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.33it/s][A[h264 @ 0x55857e7ca5c0] mmco: unref short failure

 10%|▉         | 22/221 [00:06<00:59,  3.33it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.35it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.37it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.36it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:08<01:02,  3.12it/s][A
 13%|█▎        | 28/221 [00:08<01:00,  3.20it/s][A
 13%|█▎        | 29/221 [00:08<01:00,  3.19it/s][A
 14%|█▎        | 30/221 [00:09<00:58,  3.25it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.30it/s][A
 15%|█▍        | 33/221 [00:09<00:57,  3.27it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.26it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.30it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:11<00:56,  3.27it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.29it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.34it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.36it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.39it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.39it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.40it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.35it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.27it/s][A
 24%|██▍       | 53/221 [00:15<00:52,  3.18it/s][A
 24%|██▍       | 54/221 [00:16<00:51,  3.24it/s][A
 25%|██▍       | 55/221 [00:16<00:50,  3.29it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.32it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.32it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.35it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.28it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.34it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.36it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.37it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.38it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.37it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.37it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.37it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.28it/s][A
 31%|███       | 69/221 [00:20<00:47,  3.20it/s][A
 32%|███▏      | 70/221 [00:21<00:46,  3.23it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.28it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.31it/s][A
 33%|███▎      | 73/221 [00:21<00:44,  3.34it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.36it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.37it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.38it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.37it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.38it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.39it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.40it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.40it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.40it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.41it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.41it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.41it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.41it/s][A[h264 @ 0x56348d646500] mmco: unref short failure
[h264 @ 0x56348d646500] mmco: unref short failure

 42%|████▏     | 93/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  7.02it/s][A
  1%|          | 2/221 [00:00<00:59,  3.68it/s][A
  1%|▏         | 3/221 [00:00<01:09,  3.13it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.76it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.85it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.10it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.49it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 11/221 [00:03<01:00,  3.47it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.57it/s][A
  6%|▌         | 13/221 [00:04<01:35,  2.17it/s][A
  6%|▋         | 14/221 [00:04<01:15,  2.75it/s][A
  7%|▋         | 15/221 [00:04<01:13,  2.82it/s][A
  7%|▋         | 16/221 [00:04<01:12,  2.83it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:06<01:28,  2.31it/s][A
  9%|▊         | 19/221 [00:06<01:08,  2.97it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 21/221 [00:06<00:48,  4.10it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.28it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.26it/s][A
 11%|█▏        | 25/221 [00:07<00:43,  4.53it/s][A
 12%|█▏        | 26/221 [00:07<00:49,  3.96it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.35it/s][A
 13%|█▎        | 28/221 [00:08<00:52,  3.67it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.32it/s][A
 14%|█▎        | 30/221 [00:08<00:53,  3.55it/s][A
 14%|█▍        | 31/221 [00:09<00:52,  3.59it/s][A
 14%|█▍        | 32/221 [00:09<00:47,  3.99it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.09it/s][A
 15%|█▌        | 34/221 [00:09<00:45,  4.11it/s][A
 16%|█▌        | 35/221 [00:10<00:51,  3.59it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.25it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.45it/s][A
 17%|█▋        | 38/221 [00:10<00:52,  3.47it/s][A
 18%|█▊        | 39/221 [00:11<00:45,  3.96it/s][A
 18%|█▊        | 40/221 [00:11<00:49,  3.66it/s][A
 19%|█▊        | 41/221 [00:11<00:43,  4.13it/s][A
 19%|█▉        | 42/221 [00:11<00:38,  4.66it/s][A
 19%|█▉        | 43/221 [00:12<00:45,  3.91it/s][A
 20%|█▉        | 44/221 [00:12<00:43,  4.09it/s][A
 20%|██        | 45/221 [00:12<00:49,  3.57it/s][A
 21%|██        | 46/221 [00:12<00:46,  3.76it/s][A
 22%|██▏       | 48/221 [00:13<00:32,  5.28it/s][A
 22%|██▏       | 49/221 [00:13<00:31,  5.47it/s][A
 23%|██▎       | 50/221 [00:13<00:32,  5.34it/s][A
 23%|██▎       | 51/221 [00:13<00:36,  4.70it/s][A
 24%|██▍       | 53/221 [00:14<00:30,  5.59it/s][A
 24%|██▍       | 54/221 [00:14<00:32,  5.16it/s][A
 25%|██▍       | 55/221 [00:14<00:45,  3.67it/s][A
 25%|██▌       | 56/221 [00:15<00:44,  3.72it/s][A
 26%|██▌       | 57/221 [00:15<00:45,  3.58it/s][A
 26%|██▌       | 58/221 [00:15<00:40,  4.03it/s][A
 27%|██▋       | 59/221 [00:15<00:39,  4.07it/s][A
 27%|██▋       | 60/221 [00:16<00:42,  3.80it/s][A
 28%|██▊       | 61/221 [00:16<00:40,  3.91it/s][A
 28%|██▊       | 62/221 [00:16<00:44,  3.57it/s][A
 29%|██▊       | 63/221 [00:16<00:37,  4.24it/s][A
 29%|██▉       | 64/221 [00:17<00:37,  4.22it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.29it/s][A
 30%|██▉       | 66/221 [00:17<00:42,  3.66it/s][A
 30%|███       | 67/221 [00:18<00:55,  2.76it/s][A
 31%|███       | 68/221 [00:18<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:18<00:51,  2.94it/s][A
 32%|███▏      | 70/221 [00:18<00:43,  3.44it/s][A
 32%|███▏      | 71/221 [00:19<00:46,  3.21it/s][A
 33%|███▎      | 72/221 [00:19<00:50,  2.95it/s][A
 33%|███▎      | 73/221 [00:20<00:47,  3.11it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.22it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.20it/s][A
 34%|███▍      | 76/221 [00:20<00:37,  3.82it/s][A
 35%|███▍      | 77/221 [00:20<00:34,  4.20it/s][A
 35%|███▌      | 78/221 [00:21<00:39,  3.61it/s][A
 36%|███▌      | 79/221 [00:21<00:39,  3.59it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.75it/s][A
 37%|███▋      | 81/221 [00:22<00:35,  3.97it/s][A
 37%|███▋      | 82/221 [00:22<00:33,  4.21it/s][A
 38%|███▊      | 83/221 [00:22<00:31,  4.42it/s][A
 38%|███▊      | 84/221 [00:22<00:38,  3.59it/s][A
 38%|███▊      | 85/221 [00:23<00:42,  3.20it/s][A
 39%|███▉      | 86/221 [00:23<00:42,  3.20it/s][A
 39%|███▉      | 87/221 [00:24<00:51,  2.58it/s][A
 40%|███▉      | 88/221 [00:24<00:45,  2.94it/s][A
 40%|████      | 89/221 [00:24<00:43,  3.07it/s][A
 41%|████      | 90/221 [00:25<00:44,  2.94it/s][A
 41%|████      | 91/221 [00:25<00:38,  3.39it/s][A
 42%|████▏     | 92/221 [00:25<00:35,  3.68it/s][A
 42%|████▏     | 93/221 [00:25<00:39,  3.21it/s][A
 43%|████▎     | 94/221 [00:26<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:26<00:46,  2.74it/s][A
 43%|████▎     | 96/221 [00:26<00:41,  3.05it/s][A
 44%|████▍     | 97/221 [00:27<00:38,  3.18it/s][A
 44%|████▍     | 98/221 [00:27<00:37,  3.31it/s][A
 45%|████▍     | 99/221 [00:27<00:34,  3.50it/s][A
 45%|████▌     | 100/221 [00:27<00:29,  4.08it/s][A
 46%|████▌     | 101/221 [00:28<00:28,  4.22it/s][A
 46%|████▌     | 102/221 [00:28<00:33,  3.57it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.82it/s][A
 47%|████▋     | 104/221 [00:28<00:26,  4.44it/s][A
 48%|████▊     | 105/221 [00:29<00:27,  4.25it/s][A
 48%|████▊     | 106/221 [00:29<00:35,  3.27it/s][A
 48%|████▊     | 107/221 [00:29<00:31,  3.67it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.29it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.89it/s][A
 50%|████▉     | 110/221 [00:30<00:31,  3.50it/s][A
 50%|█████     | 111/221 [00:30<00:33,  3.32it/s][A
 51%|█████     | 112/221 [00:31<00:34,  3.21it/s][A
 51%|█████     | 113/221 [00:31<00:32,  3.29it/s][A
 52%|█████▏    | 115/221 [00:31<00:23,  4.43it/s][A
 52%|█████▏    | 116/221 [00:31<00:22,  4.59it/s][A
 53%|█████▎    | 117/221 [00:32<00:24,  4.31it/s][A
 53%|█████▎    | 118/221 [00:32<00:27,  3.72it/s][A
 54%|█████▍    | 119/221 [00:33<00:35,  2.89it/s][A
 54%|█████▍    | 120/221 [00:33<00:35,  2.82it/s][A
 55%|█████▍    | 121/221 [00:33<00:28,  3.49it/s][A
 55%|█████▌    | 122/221 [00:33<00:25,  3.81it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.91it/s][A
 56%|█████▌    | 124/221 [00:34<00:30,  3.16it/s][A
 57%|█████▋    | 125/221 [00:35<00:41,  2.29it/s][A
 57%|█████▋    | 126/221 [00:35<00:38,  2.49it/s][A
 57%|█████▋    | 127/221 [00:36<00:41,  2.28it/s][A
 58%|█████▊    | 128/221 [00:36<00:35,  2.64it/s][A
 58%|█████▊    | 129/221 [00:36<00:27,  3.32it/s][A
 59%|█████▉    | 130/221 [00:36<00:26,  3.46it/s][A
 59%|█████▉    | 131/221 [00:36<00:23,  3.86it/s][A
 60%|█████▉    | 132/221 [00:37<00:23,  3.75it/s][A
 60%|██████    | 133/221 [00:37<00:32,  2.71it/s][A
 61%|██████    | 134/221 [00:38<00:34,  2.51it/s][A
 61%|██████    | 135/221 [00:38<00:27,  3.18it/s][A
 62%|██████▏   | 136/221 [00:38<00:27,  3.09it/s][A
 62%|██████▏   | 137/221 [00:38<00:25,  3.34it/s][A
 62%|██████▏   | 138/221 [00:39<00:24,  3.39it/s][A
 63%|██████▎   | 139/221 [00:39<00:28,  2.84it/s][A
 63%|██████▎   | 140/221 [00:39<00:24,  3.27it/s][A
 64%|██████▍   | 141/221 [00:40<00:24,  3.20it/s][A
 64%|██████▍   | 142/221 [00:40<00:22,  3.52it/s][A
 65%|██████▍   | 143/221 [00:40<00:24,  3.21it/s][A
 65%|██████▌   | 144/221 [00:41<00:20,  3.68it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.41it/s][A
 66%|██████▌   | 146/221 [00:41<00:21,  3.44it/s][A
 67%|██████▋   | 147/221 [00:41<00:19,  3.76it/s][A
 67%|██████▋   | 148/221 [00:42<00:18,  3.90it/s][A
 67%|██████▋   | 149/221 [00:42<00:19,  3.69it/s][A
 68%|██████▊   | 150/221 [00:42<00:18,  3.86it/s][A
 68%|██████▊   | 151/221 [00:43<00:25,  2.76it/s][A
 69%|██████▉   | 152/221 [00:44<00:33,  2.03it/s][A
 69%|██████▉   | 153/221 [00:44<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:44<00:24,  2.75it/s][A
 70%|███████   | 155/221 [00:45<00:27,  2.36it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.72it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.80it/s][A
 71%|███████▏  | 158/221 [00:46<00:23,  2.66it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.17it/s][A
 72%|███████▏  | 160/221 [00:46<00:19,  3.15it/s][A
 73%|███████▎  | 161/221 [00:46<00:16,  3.63it/s][A
 73%|███████▎  | 162/221 [00:46<00:14,  4.03it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.15it/s][A
 74%|███████▍  | 164/221 [00:47<00:11,  4.75it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  5.04it/s][A
 75%|███████▌  | 166/221 [00:47<00:14,  3.75it/s][A
 76%|███████▌  | 167/221 [00:48<00:12,  4.36it/s][A
 76%|███████▌  | 168/221 [00:48<00:12,  4.18it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.72it/s][A
 77%|███████▋  | 170/221 [00:49<00:17,  2.92it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.64it/s][A
 78%|███████▊  | 172/221 [00:49<00:16,  3.01it/s][A
 78%|███████▊  | 173/221 [00:50<00:15,  3.04it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.54it/s][A
 79%|███████▉  | 175/221 [00:50<00:13,  3.31it/s][A
 80%|███████▉  | 176/221 [00:50<00:12,  3.65it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.71it/s][A
 81%|████████  | 178/221 [00:51<00:14,  3.01it/s][A
 81%|████████  | 179/221 [00:51<00:14,  3.00it/s][A
 82%|████████▏ | 181/221 [00:52<00:10,  3.79it/s][A
 82%|████████▏ | 182/221 [00:52<00:09,  3.90it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.56it/s][A
 83%|████████▎ | 184/221 [00:53<00:09,  3.70it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.91it/s][A
 84%|████████▍ | 186/221 [00:53<00:11,  3.00it/s][A
 85%|████████▍ | 187/221 [00:54<00:10,  3.37it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.38it/s][A
 86%|████████▌ | 189/221 [00:54<00:08,  3.66it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  2.88it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.63it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  3.96it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.34it/s][A
 88%|████████▊ | 194/221 [00:55<00:07,  3.79it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  3.94it/s][A
 89%|████████▊ | 196/221 [00:56<00:08,  2.78it/s][A
 89%|████████▉ | 197/221 [00:57<00:09,  2.61it/s][A
 90%|████████▉ | 198/221 [00:57<00:08,  2.59it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  3.02it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.15it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.61it/s][A
 91%|█████████▏| 202/221 [00:58<00:05,  3.35it/s][A
 92%|█████████▏| 203/221 [00:58<00:05,  3.53it/s][A
 92%|█████████▏| 204/221 [00:59<00:05,  3.17it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.60it/s][A
 93%|█████████▎| 206/221 [00:59<00:05,  2.79it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  2.92it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:00<00:03,  3.32it/s][A
 95%|█████████▌| 210/221 [01:00<00:02,  3.76it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.90it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.33it/s][A
 96%|█████████▋| 213/221 [01:01<00:02,  3.27it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.90it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.72it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.82it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.94it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.34it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.94it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.39it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.11it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'area_r1': 41.1, 'area_recall': '41.1/67.2/77.4', 'area_ravg': 61.9}
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'forward_r1': 36.5, 'forward_recall': '36.5/64.0/76.6', 'forward_ravg': 59.0}
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'area_video_r1': 39.9, 'area_video_recall': '39.9/67.6/77.9', 'area_video_ravg': 61.8}
09/17/2024 03:05:37 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 03:05:37 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 03:05:37 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 03:05:37 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'video_r1': 36.8, 'video_recall': '36.8/63.8/73.9', 'video_ravg': 58.1}
09/17/2024 03:05:37 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 03:05:37 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 03:05:37 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 499--===========

09/17/2024 03:05:37 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/75.3/81.6', 'video_ravg': 69.4}
09/17/2024 03:05:37 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 03:05:37 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 03:06:06 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.012427477166056633, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.249333381652832, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 1.9263358116149902, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.188096523284912}
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x55859db17780] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
 17%|█▋        | 500/2910 [3:10:10<90:02:35, 134.50s/it] 17%|█▋        | 501/2910 [3:10:14<63:46:13, 95.30s/it] [h264 @ 0x56349376e500] mmco: unref short failure
[h264 @ 0x56349376e500] mmco: unref short failure
 17%|█▋        | 502/2910 [3:10:18<45:29:23, 68.01s/it] 17%|█▋        | 503/2910 [3:10:23<32:51:38, 49.15s/it]09/17/2024 03:06:25 - INFO - __main__ -   current idx OTXYBNGzWpQ.110 from finetune_area returns wrong image/video, use 97549 instead.
[h264 @ 0x557671188080] mmco: unref short failure
 17%|█▋        | 504/2910 [3:10:28<23:57:02, 35.84s/it] 17%|█▋        | 505/2910 [3:10:33<17:49:20, 26.68s/it][h264 @ 0x555617186000] mmco: unref short failure
 17%|█▋        | 506/2910 [3:10:41<14:06:33, 21.13s/it] 17%|█▋        | 507/2910 [3:10:48<11:11:15, 16.76s/it] 17%|█▋        | 508/2910 [3:10:54<8:59:11, 13.47s/it] [h264 @ 0x5634a43169c0] mmco: unref short failure
[h264 @ 0x5634a43169c0] mmco: unref short failure
 17%|█▋        | 509/2910 [3:11:00<7:28:15, 11.20s/it] 18%|█▊        | 510/2910 [3:11:07<6:37:04,  9.93s/it][h264 @ 0x563497e2f940] mmco: unref short failure
[h264 @ 0x563497e2f940] mmco: unref short failure
[h264 @ 0x55857ed5b4c0] mmco: unref short failure
[h264 @ 0x55857ed5b4c0] mmco: unref short failure
[h264 @ 0x55857ed5b4c0] mmco: unref short failure
 18%|█▊        | 511/2910 [3:11:15<6:18:01,  9.45s/it][h264 @ 0x557672c1c9c0] mmco: unref short failure
[h264 @ 0x557672c1c9c0] mmco: unref short failure
 18%|█▊        | 512/2910 [3:11:21<5:39:52,  8.50s/it] 18%|█▊        | 513/2910 [3:11:27<5:12:19,  7.82s/it][h264 @ 0x5634a72e8cc0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
 18%|█▊        | 514/2910 [3:11:34<4:54:34,  7.38s/it] 18%|█▊        | 515/2910 [3:11:40<4:41:49,  7.06s/it][h264 @ 0x55859bc115c0] mmco: unref short failure
[h264 @ 0x55859bc115c0] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
[h264 @ 0x56349376e500] mmco: unref short failure
[h264 @ 0x5634a2b6aac0] mmco: unref short failure
[h264 @ 0x5634a2b6aac0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x563499ab55c0] mmco: unref short failure
[h264 @ 0x557682c2bac0] mmco: unref short failure
[h264 @ 0x55857e6de880] mmco: unref short failure
[h264 @ 0x55857e6de880] mmco: unref short failure
[h264 @ 0x56348d60b280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x55857e7fa280] mmco: unref short failure
[h264 @ 0x5576749add80] mmco: unref short failure
 18%|█▊        | 516/2910 [3:12:32<13:36:45, 20.47s/it][h264 @ 0x563498ffe640] mmco: unref short failure
[h264 @ 0x563498ffe640] mmco: unref short failure
 18%|█▊        | 517/2910 [3:12:38<10:43:14, 16.13s/it][h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x5556186997c0] mmco: unref short failure
[h264 @ 0x5556186997c0] mmco: unref short failure
[h264 @ 0x55768b482bc0] mmco: unref short failure
 18%|█▊        | 518/2910 [3:12:45<8:57:01, 13.47s/it] [h264 @ 0x5634abef6340] mmco: unref short failure
[h264 @ 0x55858adc0640] mmco: unref short failure
[h264 @ 0x55858adc0640] mmco: unref short failure
[h264 @ 0x55766b4e6480] mmco: unref short failure
 18%|█▊        | 519/2910 [3:12:51<7:25:50, 11.19s/it][h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x55767afb6140] mmco: unref short failure
[h264 @ 0x55767afb6140] mmco: unref short failure
 18%|█▊        | 520/2910 [3:12:57<6:21:55,  9.59s/it][h264 @ 0x555621899e40] mmco: unref short failure
[h264 @ 0x555621899e40] mmco: unref short failure
[h264 @ 0x5576701307c0] mmco: unref short failure
[h264 @ 0x5576701307c0] mmco: unref short failure
 18%|█▊        | 521/2910 [3:13:11<7:13:51, 10.90s/it][h264 @ 0x557685439f00] mmco: unref short failure
 18%|█▊        | 522/2910 [3:13:18<6:30:39,  9.82s/it][h264 @ 0x5576893fe6c0] mmco: unref short failure
[h264 @ 0x55857e760400] mmco: unref short failure
[h264 @ 0x557672c40800] mmco: unref short failure
[h264 @ 0x557672c40800] mmco: unref short failure
[h264 @ 0x5556203457c0] mmco: unref short failure
 18%|█▊        | 523/2910 [3:13:45<9:56:32, 14.99s/it][h264 @ 0x558593ffb880] mmco: unref short failure
[h264 @ 0x558593ffb880] mmco: unref short failure
[h264 @ 0x55561a4fdb80] mmco: unref short failure
09/17/2024 03:10:06 - INFO - __main__ -   current idx ZJ3l8xjgJQw.15 from finetune_area returns wrong image/video, use 19056 instead.
[h264 @ 0x55561a7ce900] mmco: unref short failure
[h264 @ 0x55561a7ce900] mmco: unref short failure
[h264 @ 0x56348d2e65c0] mmco: unref short failure
[h264 @ 0x55561fadae00] mmco: unref short failure
[h264 @ 0x55561a4fdb80] mmco: unref short failure
[h264 @ 0x55561fadae00] mmco: unref short failure
[h264 @ 0x55561fadae00] mmco: unref short failure
[h264 @ 0x55766b7bab40] mmco: unref short failure
[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x5634a84cf200] mmco: unref short failure
[h264 @ 0x55766e604440] mmco: unref short failure
[h264 @ 0x55766e604440] mmco: unref short failure
[h264 @ 0x558594343f00] mmco: unref short failure
[h264 @ 0x5576893fe6c0] mmco: unref short failure
 18%|█▊        | 524/2910 [3:15:05<22:44:26, 34.31s/it]09/17/2024 03:11:06 - INFO - __main__ -   current idx cXoOWKkZ_K0.13 from finetune_area returns wrong image/video, use 51075 instead.
[h264 @ 0x5576807618c0] mmco: unref short failure
[h264 @ 0x5576807618c0] mmco: unref short failure
[h264 @ 0x5576807618c0] mmco: unref short failure
[h264 @ 0x5576807618c0] mmco: unref short failure
 18%|█▊        | 525/2910 [3:15:17<18:26:47, 27.84s/it][h264 @ 0x5634a510e640] mmco: unref short failure
[h264 @ 0x5634a510e640] mmco: unref short failure
 18%|█▊        | 526/2910 [3:15:23<14:05:57, 21.29s/it][h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x5585a06add00] mmco: unref short failure
 18%|█▊        | 527/2910 [3:15:29<11:04:27, 16.73s/it][h264 @ 0x5585a06add00] mmco: unref short failure
[h264 @ 0x55858adc0640] mmco: unref short failure
 18%|█▊        | 528/2910 [3:15:36<9:00:07, 13.61s/it] [h264 @ 0x558592239c40] mmco: unref short failure
[h264 @ 0x558592239c40] mmco: unref short failure
 18%|█▊        | 529/2910 [3:15:43<7:47:50, 11.79s/it][h264 @ 0x56348d22c640] mmco: unref short failure
[h264 @ 0x56348d22c640] mmco: unref short failure
 18%|█▊        | 530/2910 [3:15:52<7:15:24, 10.98s/it][h264 @ 0x55857e7ca5c0] mmco: unref short failure
[h264 @ 0x55857e7ca5c0] mmco: unref short failure
[h264 @ 0x558589d8a340] mmco: unref short failure
[h264 @ 0x558589d8a340] mmco: unref short failure
[h264 @ 0x558589d8a340] mmco: unref short failure
[h264 @ 0x558589d8a340] mmco: unref short failure
[h264 @ 0x5576749add80] mmco: unref short failure
[h264 @ 0x5576749add80] mmco: unref short failure
[h264 @ 0x5556245d2d00] mmco: unref short failure
 18%|█▊        | 531/2910 [3:16:18<10:08:42, 15.35s/it][h264 @ 0x5576893fe6c0] mmco: unref short failure
[h264 @ 0x5576893fe6c0] mmco: unref short failure
[h264 @ 0x5556170d0bc0] mmco: unref short failure
[h264 @ 0x5556170d0bc0] mmco: unref short failure
[h264 @ 0x56348f0ea940] mmco: unref short failure
[h264 @ 0x55858adc0640] mmco: unref short failure
[h264 @ 0x55858adc0640] mmco: unref short failure
[h264 @ 0x55857eaf2540] mmco: unref short failure
[h264 @ 0x55857eaf2540] mmco: unref short failure
[h264 @ 0x55562bf0be80] mmco: unref short failure
[h264 @ 0x558583ea5800] mmco: unref short failure
[h264 @ 0x558583ea5800] mmco: unref short failure
[h264 @ 0x558583ea5800] mmco: unref short failure
[h264 @ 0x558583ea5800] mmco: unref short failure
[h264 @ 0x5576854bde40] mmco: unref short failure
[h264 @ 0x5576854bde40] mmco: unref short failure
09/17/2024 03:13:23 - INFO - __main__ -   current idx EMPLLx_tfq8.250 from finetune_area returns wrong image/video, use 27288 instead.
09/17/2024 03:13:28 - INFO - __main__ -   current idx hvuxWKYHJlQ.82 from finetune_area returns wrong image/video, use 113831 instead.
[h264 @ 0x55766bba9a80] mmco: unref short failure
[h264 @ 0x557675c25980] mmco: unref short failure
[h264 @ 0x557675c25980] mmco: unref short failure
 18%|█▊        | 532/2910 [3:17:42<23:44:30, 35.94s/it]09/17/2024 03:13:41 - INFO - __main__ -   current idx 4Svr6BsWgeU.14 from finetune_area returns wrong image/video, use 37350 instead.
 18%|█▊        | 533/2910 [3:17:48<17:47:17, 26.94s/it][h264 @ 0x55857e8783c0] mmco: unref short failure
09/17/2024 03:13:50 - INFO - __main__ -   current idx DfKw_sMqEaA.16 from finetune_area returns wrong image/video, use 33748 instead.
[h264 @ 0x55857eaf2540] mmco: unref short failure
 18%|█▊        | 534/2910 [3:17:54<13:39:29, 20.69s/it][h264 @ 0x55766efb3880] mmco: unref short failure
[h264 @ 0x557668d04600] mmco: unref short failure
[h264 @ 0x555616530440] mmco: unref short failure
[h264 @ 0x555616530440] mmco: unref short failure
[h264 @ 0x555616530440] mmco: unref short failure
[h264 @ 0x555616530440] mmco: unref short failure
 18%|█▊        | 535/2910 [3:18:01<10:57:22, 16.61s/it][h264 @ 0x5634a488a940] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
 18%|█▊        | 536/2910 [3:18:07<8:51:11, 13.43s/it] [h264 @ 0x558593ffb880] mmco: unref short failure
[h264 @ 0x55857e915b40] mmco: unref short failure
 18%|█▊        | 537/2910 [3:18:13<7:21:29, 11.16s/it][h264 @ 0x55561715dc40] mmco: unref short failure
[h264 @ 0x55561715dc40] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x56348e9fc940] mmco: unref short failure
 18%|█▊        | 538/2910 [3:18:22<6:58:37, 10.59s/it][h264 @ 0x56348d62b540] mmco: unref short failure
[h264 @ 0x56348d62b540] mmco: unref short failure
[h264 @ 0x56348d62b540] mmco: unref short failure
[h264 @ 0x557674807c00] mmco: unref short failure
[h264 @ 0x557674807c00] mmco: unref short failure
[h264 @ 0x55766d82b5c0] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x5556203457c0] mmco: unref short failure
 19%|█▊        | 539/2910 [3:18:46<9:36:22, 14.59s/it][h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x558591da30c0] mmco: unref short failure
[h264 @ 0x5576862d1d40] mmco: unref short failure
[h264 @ 0x5576862d1d40] mmco: unref short failure
[h264 @ 0x55858868b6c0] mmco: unref short failure
[h264 @ 0x555622f18f40] mmco: unref short failure
[h264 @ 0x55859aa50200] mmco: unref short failure
[h264 @ 0x55859aa50200] mmco: unref short failure
[h264 @ 0x55859aa50200] mmco: unref short failure
[h264 @ 0x5585852d9400] mmco: unref short failure
[h264 @ 0x5585852d9400] mmco: unref short failure
[h264 @ 0x55857e705380] mmco: unref short failure
[h264 @ 0x55766e963480] mmco: unref short failure
[h264 @ 0x55766e963480] mmco: unref short failure
[h264 @ 0x55563937d5c0] mmco: unref short failure
[h264 @ 0x555617231a40] mmco: unref short failure
[h264 @ 0x557680b38e00] mmco: unref short failure
[h264 @ 0x557680b38e00] mmco: unref short failure
09/17/2024 03:16:09 - INFO - __main__ -   current idx 4hOPcrHDBvU.10 from finetune_area returns wrong image/video, use 131957 instead.
 19%|█▊        | 540/2910 [3:20:12<23:46:45, 36.12s/it][h264 @ 0x5634a030e340] mmco: unref short failure
[h264 @ 0x5634a030e340] mmco: unref short failure
[h264 @ 0x5576807618c0] mmco: unref short failure
[h264 @ 0x5576807618c0] mmco: unref short failure
[h264 @ 0x5634abef6340] mmco: unref short failure
[h264 @ 0x55767c743280] mmco: unref short failure
 19%|█▊        | 541/2910 [3:20:41<22:13:42, 33.78s/it] 19%|█▊        | 542/2910 [3:20:47<16:41:03, 25.36s/it][h264 @ 0x558589d8a340] mmco: unref short failure
[h264 @ 0x558589d8a340] mmco: unref short failure
 19%|█▊        | 543/2910 [3:20:53<12:57:10, 19.70s/it] 19%|█▊        | 544/2910 [3:20:59<10:17:27, 15.66s/it][h264 @ 0x56348d60b280] mmco: unref short failure
 19%|█▊        | 545/2910 [3:21:06<8:28:22, 12.90s/it] [h264 @ 0x5556204982c0] mmco: unref short failure
 19%|█▉        | 546/2910 [3:21:13<7:19:25, 11.15s/it][h264 @ 0x55561713ac80] mmco: unref short failure
[h264 @ 0x55561713ac80] mmco: unref short failure
09/17/2024 03:17:18 - INFO - __main__ -   current idx E852WPZZnME.32 from finetune_area returns wrong image/video, use 83757 instead.
 19%|█▉        | 547/2910 [3:21:19<6:21:00,  9.67s/it][h264 @ 0x555617704c00] mmco: unref short failure
[h264 @ 0x555617704c00] mmco: unref short failure
09/17/2024 03:17:26 - INFO - __main__ -   current idx _Z6qrnWrgYM.80 from finetune_area returns wrong image/video, use 87635 instead.
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x56349025ff80] mmco: unref short failure
[h264 @ 0x55561719ddc0] mmco: unref short failure
[h264 @ 0x55561719ddc0] mmco: unref short failure
[h264 @ 0x55767c2b3e00] mmco: unref short failure
[h264 @ 0x5634a1883f80] mmco: unref short failure
[h264 @ 0x5634a1883f80] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x55768546c200] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x56348d30e080] mmco: unref short failure
[h264 @ 0x56348d30e080] mmco: unref short failure
[h264 @ 0x55561d092cc0] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x555617186000] mmco: unref short failure
[h264 @ 0x555617186000] mmco: unref short failure
[h264 @ 0x55857ed11a00] mmco: unref short failure
[h264 @ 0x5634941b98c0] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55768613f180] mmco: unref short failure
[h264 @ 0x55768613f180] mmco: unref short failure
[h264 @ 0x55768a9c6f80] mmco: unref short failure
[h264 @ 0x55768a9c6f80] mmco: unref short failure
[h264 @ 0x55768a9c6f80] mmco: unref short failure
[h264 @ 0x55768a9c6f80] mmco: unref short failure
[h264 @ 0x55766e963480] mmco: unref short failure
 19%|█▉        | 548/2910 [3:22:41<20:29:40, 31.24s/it][h264 @ 0x56348d312680] mmco: unref short failure
[h264 @ 0x56348d312680] mmco: unref short failure
[h264 @ 0x56348d312680] mmco: unref short failure
[h264 @ 0x56348d312680] mmco: unref short failure
[h264 @ 0x5576738717c0] mmco: unref short failure
[h264 @ 0x56348e9fc940] mmco: unref short failure
[h264 @ 0x56348e9fc940] mmco: unref short failure
[h264 @ 0x5576867cb3c0] mmco: unref short failure
[h264 @ 0x5576867cb3c0] mmco: unref short failure
[h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x557671188080] mmco: unref short failure
[h264 @ 0x5634abef6340] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x55561f4a1640] mmco: unref short failure
 19%|█▉        | 549/2910 [3:23:07<19:36:27, 29.90s/it]09/17/2024 03:19:06 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 03:19:06 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5576862d1d40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558583e75ec0] mmco: unref short failure
[h264 @ 0x558583e75ec0] mmco: unref short failure
[h264 @ 0x555616db3d40] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x56349a839ec0] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x55858bcc9140] mmco: unref short failure
[h264 @ 0x5576848c86c0] mmco: unref short failure
[h264 @ 0x5576848c86c0] mmco: unref short failure
[h264 @ 0x56348d3761c0] mmco: unref short failure
[h264 @ 0x558588fe6fc0] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x557684d66200] mmco: unref short failure
[h264 @ 0x55768546c200] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:18,  1.58it/s][A
  1%|          | 2/221 [00:01<01:58,  1.85it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.71it/s][A
  2%|▏         | 4/221 [00:01<01:00,  3.60it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.43it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.23it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.78it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.75it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.77it/s][A
  5%|▍         | 10/221 [00:03<01:36,  2.19it/s][A
  5%|▌         | 12/221 [00:03<01:16,  2.73it/s][A
  6%|▌         | 13/221 [00:04<01:05,  3.19it/s][A
  6%|▋         | 14/221 [00:04<01:08,  3.04it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.36it/s][A
  7%|▋         | 16/221 [00:05<01:05,  3.13it/s][A
  8%|▊         | 17/221 [00:05<01:03,  3.19it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.36it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.35it/s][A
  9%|▉         | 20/221 [00:06<00:52,  3.86it/s][A
 10%|▉         | 21/221 [00:06<00:52,  3.83it/s][A
 10%|▉         | 22/221 [00:06<00:55,  3.61it/s][A
 11%|█         | 24/221 [00:06<00:41,  4.71it/s][A
 11%|█▏        | 25/221 [00:07<00:40,  4.84it/s][A[h264 @ 0x56348d233700] mmco: unref short failure
[h264 @ 0x56348d233700] mmco: unref short failure

 12%|█▏        | 26/221 [00:07<00:44,  4.42it/s][A
 12%|█▏        | 27/221 [00:07<00:41,  4.71it/s][A
 13%|█▎        | 28/221 [00:08<01:00,  3.20it/s][A
 13%|█▎        | 29/221 [00:08<00:48,  3.94it/s][A
 14%|█▎        | 30/221 [00:08<00:50,  3.81it/s][A
 14%|█▍        | 31/221 [00:08<00:47,  4.00it/s][A
 14%|█▍        | 32/221 [00:08<00:39,  4.73it/s][A
 15%|█▍        | 33/221 [00:09<00:40,  4.61it/s][A[h264 @ 0x55767c743280] mmco: unref short failure

 16%|█▌        | 35/221 [00:09<00:36,  5.03it/s][A[h264 @ 0x555618026b80] mmco: unref short failure
[h264 @ 0x555618026b80] mmco: unref short failure

 16%|█▋        | 36/221 [00:09<00:44,  4.11it/s][A
 17%|█▋        | 37/221 [00:10<01:03,  2.90it/s][A
 17%|█▋        | 38/221 [00:10<01:07,  2.70it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.29it/s][A
 18%|█▊        | 40/221 [00:11<00:57,  3.14it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.51it/s][A
 19%|█▉        | 42/221 [00:12<01:06,  2.71it/s][A
 19%|█▉        | 43/221 [00:12<00:54,  3.30it/s][A
 20%|█▉        | 44/221 [00:12<00:47,  3.72it/s][A
 20%|██        | 45/221 [00:13<01:35,  1.85it/s][A
 21%|██        | 46/221 [00:14<01:34,  1.84it/s][A
 21%|██▏       | 47/221 [00:15<02:01,  1.43it/s][A
 22%|██▏       | 48/221 [00:15<01:32,  1.87it/s][A
 22%|██▏       | 49/221 [00:15<01:15,  2.27it/s][A
 23%|██▎       | 50/221 [00:15<01:00,  2.82it/s][A
 23%|██▎       | 51/221 [00:16<00:54,  3.10it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.32it/s][A
 24%|██▍       | 53/221 [00:16<00:46,  3.60it/s][A[h264 @ 0x55857e8783c0] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<03:15,  1.17s/it][A
 25%|██▍       | 55/221 [00:20<02:36,  1.06it/s][A
 25%|██▌       | 56/221 [00:20<01:58,  1.39it/s][A
 26%|██▌       | 57/221 [00:20<01:35,  1.72it/s][A
 26%|██▌       | 58/221 [00:20<01:16,  2.13it/s][A
 27%|██▋       | 59/221 [00:21<01:01,  2.65it/s][A
 27%|██▋       | 60/221 [00:21<01:20,  2.00it/s][A
 28%|██▊       | 61/221 [00:22<01:06,  2.42it/s][A
 28%|██▊       | 62/221 [00:22<01:00,  2.65it/s][A
 29%|██▊       | 63/221 [00:22<00:52,  3.00it/s][A
 29%|██▉       | 64/221 [00:22<00:46,  3.40it/s][A
 29%|██▉       | 65/221 [00:23<00:45,  3.40it/s][A
 30%|██▉       | 66/221 [00:23<01:02,  2.48it/s][A
 30%|███       | 67/221 [00:24<01:21,  1.88it/s][A
 31%|███       | 68/221 [00:24<01:06,  2.29it/s][A
 31%|███       | 69/221 [00:25<01:19,  1.90it/s][A
 32%|███▏      | 70/221 [00:25<01:04,  2.33it/s][A[h264 @ 0x5556341cef40] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<02:05,  1.19it/s][A[h264 @ 0x55857e6cdc40] mmco: unref short failure
[h264 @ 0x55857e6cdc40] mmco: unref short failure

 33%|███▎      | 72/221 [00:27<01:43,  1.44it/s][A
 33%|███▎      | 73/221 [00:28<01:27,  1.69it/s][A
 33%|███▎      | 74/221 [00:28<01:07,  2.17it/s][A
 34%|███▍      | 75/221 [00:28<01:02,  2.33it/s][A
 34%|███▍      | 76/221 [00:28<00:51,  2.84it/s][A[h264 @ 0x56348d33fd00] mmco: unref short failure
[h264 @ 0x56348d33fd00] mmco: unref short failure

 35%|███▍      | 77/221 [00:29<00:52,  2.73it/s][A
 35%|███▌      | 78/221 [00:29<00:48,  2.94it/s][A
 36%|███▌      | 79/221 [00:30<00:55,  2.55it/s][A
 36%|███▌      | 80/221 [00:30<00:47,  2.96it/s][A
 37%|███▋      | 81/221 [00:30<00:45,  3.10it/s][A
 37%|███▋      | 82/221 [00:30<00:41,  3.33it/s][A
 38%|███▊      | 83/221 [00:31<00:35,  3.86it/s][A
 38%|███▊      | 84/221 [00:31<00:31,  4.30it/s][A
 38%|███▊      | 85/221 [00:31<00:26,  5.18it/s][A
 39%|███▉      | 86/221 [00:31<00:30,  4.42it/s][A
 39%|███▉      | 87/221 [00:32<00:48,  2.77it/s][A[h264 @ 0x55857eaf2540] mmco: unref short failure

 40%|███▉      | 88/221 [00:32<00:52,  2.54it/s][A
 40%|████      | 89/221 [00:33<01:02,  2.12it/s][A
 41%|████      | 90/221 [00:33<00:52,  2.50it/s][A
 41%|████      | 91/221 [00:33<00:40,  3.21it/s][A
 42%|████▏     | 92/221 [00:33<00:36,  3.49it/s][A
 42%|████▏     | 93/221 [00:34<00:41,  3.08it/s][A
 43%|████▎     | 94/221 [00:34<00:42,  3.02it/s][A
 43%|████▎     | 95/221 [00:34<00:33,  3.72it/s][A
 43%|████▎     | 96/221 [00:35<00:35,  3.51it/s][A
 44%|████▍     | 97/221 [00:35<00:30,  4.08it/s][A
 44%|████▍     | 98/221 [00:35<00:31,  3.92it/s][A
 45%|████▍     | 99/221 [00:35<00:27,  4.49it/s][A
 45%|████▌     | 100/221 [00:35<00:26,  4.62it/s][A
 46%|████▌     | 101/221 [00:36<00:22,  5.44it/s][A
 46%|████▌     | 102/221 [00:36<00:33,  3.51it/s][A
 47%|████▋     | 103/221 [00:36<00:27,  4.33it/s][A
 47%|████▋     | 104/221 [00:36<00:23,  4.96it/s][A
 48%|████▊     | 105/221 [00:37<00:26,  4.41it/s][A
 48%|████▊     | 106/221 [00:37<00:46,  2.50it/s][A
 48%|████▊     | 107/221 [00:38<00:36,  3.11it/s][A
 49%|████▉     | 108/221 [00:38<00:34,  3.31it/s][A
 49%|████▉     | 109/221 [00:38<00:30,  3.62it/s][A
 50%|████▉     | 110/221 [00:38<00:30,  3.61it/s][A
 50%|█████     | 111/221 [00:39<00:35,  3.10it/s][A
 51%|█████     | 112/221 [00:39<00:30,  3.56it/s][A
 51%|█████     | 113/221 [00:39<00:30,  3.54it/s][A
 52%|█████▏    | 115/221 [00:39<00:19,  5.37it/s][A
 52%|█████▏    | 116/221 [00:44<02:04,  1.18s/it][A
 53%|█████▎    | 117/221 [00:44<01:40,  1.03it/s][A
 53%|█████▎    | 118/221 [00:44<01:19,  1.30it/s][A
 54%|█████▍    | 119/221 [00:44<01:05,  1.56it/s][A
 54%|█████▍    | 120/221 [00:45<00:54,  1.84it/s][A
 55%|█████▌    | 122/221 [00:45<00:36,  2.72it/s][A
 56%|█████▌    | 123/221 [00:45<00:31,  3.16it/s][A
 56%|█████▌    | 124/221 [00:45<00:27,  3.50it/s][A
 57%|█████▋    | 125/221 [00:46<00:27,  3.45it/s][A
 57%|█████▋    | 126/221 [00:46<00:27,  3.50it/s][A
 57%|█████▋    | 127/221 [00:47<00:35,  2.67it/s][A
 58%|█████▊    | 128/221 [00:47<00:36,  2.58it/s][A
 58%|█████▊    | 129/221 [00:47<00:31,  2.96it/s][A
 59%|█████▉    | 130/221 [00:47<00:27,  3.28it/s][A
 60%|█████▉    | 132/221 [00:48<00:19,  4.54it/s][A
 60%|██████    | 133/221 [00:48<00:25,  3.40it/s][A
 61%|██████    | 134/221 [00:49<00:25,  3.43it/s][A
 61%|██████    | 135/221 [00:49<00:27,  3.16it/s][A
 62%|██████▏   | 136/221 [00:49<00:27,  3.05it/s][A
 62%|██████▏   | 137/221 [00:49<00:25,  3.27it/s][A
 62%|██████▏   | 138/221 [00:50<00:26,  3.19it/s][A
 63%|██████▎   | 139/221 [00:50<00:33,  2.47it/s][A
 63%|██████▎   | 140/221 [00:51<00:31,  2.56it/s][A
 64%|██████▍   | 141/221 [00:51<00:27,  2.88it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  3.01it/s][A
 65%|██████▍   | 143/221 [00:52<00:31,  2.48it/s][A
 65%|██████▌   | 144/221 [00:52<00:26,  2.91it/s][A
 66%|██████▌   | 146/221 [00:52<00:15,  4.74it/s][A
 67%|██████▋   | 147/221 [00:52<00:15,  4.83it/s][A
 67%|██████▋   | 148/221 [00:53<00:17,  4.21it/s][A
 67%|██████▋   | 149/221 [00:53<00:15,  4.68it/s][A
 68%|██████▊   | 150/221 [00:53<00:16,  4.36it/s][A
 68%|██████▊   | 151/221 [00:54<00:26,  2.62it/s][A[h264 @ 0x5576813e5ac0] mmco: unref short failure
[h264 @ 0x5576813e5ac0] mmco: unref short failure

 69%|██████▉   | 152/221 [00:55<00:33,  2.08it/s][A
 69%|██████▉   | 153/221 [00:55<00:29,  2.33it/s][A
 70%|██████▉   | 154/221 [00:55<00:26,  2.50it/s][A
 70%|███████   | 155/221 [00:55<00:22,  2.98it/s][A
 71%|███████   | 156/221 [00:56<00:19,  3.37it/s][A
 71%|███████   | 157/221 [00:58<00:55,  1.16it/s][A
 71%|███████▏  | 158/221 [00:58<00:43,  1.46it/s][A
 72%|███████▏  | 159/221 [00:58<00:32,  1.93it/s][A
 72%|███████▏  | 160/221 [00:59<00:28,  2.17it/s][A
 73%|███████▎  | 161/221 [00:59<00:21,  2.81it/s][A
 73%|███████▎  | 162/221 [00:59<00:19,  3.00it/s][A
 74%|███████▍  | 163/221 [00:59<00:18,  3.11it/s][A
 75%|███████▍  | 165/221 [01:00<00:12,  4.47it/s][A
 75%|███████▌  | 166/221 [01:00<00:14,  3.68it/s][A
 76%|███████▌  | 167/221 [01:00<00:12,  4.32it/s][A
 76%|███████▌  | 168/221 [01:01<00:29,  1.82it/s][A
 76%|███████▋  | 169/221 [01:02<00:22,  2.29it/s][A
 77%|███████▋  | 170/221 [01:02<00:20,  2.54it/s][A
 77%|███████▋  | 171/221 [01:02<00:18,  2.65it/s][A
 78%|███████▊  | 172/221 [01:02<00:16,  3.04it/s][A
 78%|███████▊  | 173/221 [01:03<00:14,  3.39it/s][A
 79%|███████▉  | 175/221 [01:03<00:10,  4.27it/s][A
 80%|███████▉  | 176/221 [01:03<00:11,  4.06it/s][A
 80%|████████  | 177/221 [01:03<00:10,  4.38it/s][A
 81%|████████  | 178/221 [01:04<00:11,  3.70it/s][A
 81%|████████  | 179/221 [01:04<00:12,  3.35it/s][A
 82%|████████▏ | 181/221 [01:04<00:08,  4.54it/s][A
 82%|████████▏ | 182/221 [01:05<00:08,  4.60it/s][A
 83%|████████▎ | 183/221 [01:05<00:08,  4.64it/s][A
 83%|████████▎ | 184/221 [01:05<00:08,  4.41it/s][A
 84%|████████▍ | 186/221 [01:05<00:07,  4.89it/s][A
 85%|████████▍ | 187/221 [01:06<00:06,  5.21it/s][A
 85%|████████▌ | 188/221 [01:06<00:06,  4.96it/s][A
 86%|████████▌ | 189/221 [01:06<00:06,  4.68it/s][A
 86%|████████▌ | 190/221 [01:06<00:08,  3.76it/s][A
 87%|████████▋ | 192/221 [01:07<00:06,  4.43it/s][A
 88%|████████▊ | 194/221 [01:08<00:08,  3.22it/s][A
 88%|████████▊ | 195/221 [01:08<00:07,  3.52it/s][A
 89%|████████▉ | 197/221 [01:08<00:05,  4.31it/s][A
 90%|████████▉ | 198/221 [01:08<00:05,  4.10it/s][A
 90%|█████████ | 199/221 [01:09<00:05,  4.13it/s][A
 90%|█████████ | 200/221 [01:09<00:05,  3.87it/s][A
 91%|█████████ | 201/221 [01:09<00:05,  3.89it/s][A
 91%|█████████▏| 202/221 [01:09<00:04,  4.14it/s][A
 92%|█████████▏| 203/221 [01:10<00:04,  4.18it/s][A
 92%|█████████▏| 204/221 [01:10<00:03,  4.98it/s][A
 93%|█████████▎| 205/221 [01:10<00:02,  5.80it/s][A
 93%|█████████▎| 206/221 [01:10<00:03,  4.03it/s][A
 94%|█████████▍| 208/221 [01:11<00:02,  5.67it/s][A
 95%|█████████▌| 210/221 [01:11<00:01,  6.87it/s][A
 95%|█████████▌| 211/221 [01:11<00:02,  4.84it/s][A
 96%|█████████▌| 212/221 [01:11<00:01,  4.70it/s][A
 97%|█████████▋| 214/221 [01:12<00:01,  4.24it/s][A
 97%|█████████▋| 215/221 [01:12<00:01,  4.26it/s][A
 98%|█████████▊| 216/221 [01:12<00:01,  4.04it/s][A
 98%|█████████▊| 217/221 [01:13<00:01,  3.40it/s][A
 99%|█████████▊| 218/221 [01:13<00:00,  3.15it/s][A
 99%|█████████▉| 219/221 [01:14<00:00,  2.98it/s][A
100%|█████████▉| 220/221 [01:17<00:01,  1.17s/it][A[h264 @ 0x56349025ff80] mmco: unref short failure

100%|██████████| 221/221 [01:17<00:00,  1.15it/s][A100%|██████████| 221/221 [01:17<00:00,  2.85it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.41it/s][A
  1%|          | 2/221 [00:00<01:07,  3.24it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.26it/s][A
  2%|▏         | 4/221 [00:01<01:07,  3.23it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.27it/s][A
  3%|▎         | 6/221 [00:01<01:06,  3.25it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.33it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.35it/s][A
  5%|▍         | 10/221 [00:03<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.38it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.38it/s][A
  6%|▌         | 13/221 [00:03<01:01,  3.39it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.39it/s][A
  7%|▋         | 15/221 [00:04<01:00,  3.39it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.40it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.40it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.40it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.41it/s][A
  9%|▉         | 20/221 [00:05<00:58,  3.41it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.41it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.41it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.41it/s][A
 11%|█         | 24/221 [00:07<00:57,  3.41it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.41it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.41it/s][A
 12%|█▏        | 27/221 [00:08<00:56,  3.41it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.41it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.41it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.41it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.41it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.41it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.41it/s][A
 15%|█▌        | 34/221 [00:10<00:54,  3.41it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.41it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.41it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.41it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.41it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.41it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.41it/s][A[h264 @ 0x56348d377840] mmco: unref short failure

 19%|█▉        | 43/221 [00:12<00:52,  3.41it/s][A
 20%|█▉        | 44/221 [00:12<00:51,  3.41it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.41it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:15<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:17<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:22<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:24<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:31<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:36<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:38<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:45<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:48<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.12it/s][A
  1%|          | 2/221 [00:00<00:59,  3.69it/s][A
  1%|▏         | 3/221 [00:00<01:11,  3.04it/s][A
  2%|▏         | 4/221 [00:01<00:57,  3.76it/s][A
  2%|▏         | 5/221 [00:01<00:53,  4.01it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.30it/s][A
  4%|▎         | 8/221 [00:02<00:54,  3.92it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.59it/s][A
  5%|▍         | 10/221 [00:02<00:58,  3.59it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.57it/s][A
  5%|▌         | 12/221 [00:03<00:58,  3.59it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.37it/s][A
  6%|▋         | 14/221 [00:04<01:10,  2.93it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.94it/s][A
  7%|▋         | 16/221 [00:04<01:11,  2.87it/s][A
  8%|▊         | 17/221 [00:05<01:19,  2.56it/s][A
  8%|▊         | 18/221 [00:05<01:23,  2.42it/s][A
  9%|▉         | 20/221 [00:06<00:58,  3.45it/s][A
 10%|▉         | 21/221 [00:06<00:50,  3.98it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.12it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.19it/s][A
 11%|█▏        | 25/221 [00:06<00:42,  4.66it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.08it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.32it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.63it/s][A
 13%|█▎        | 29/221 [00:08<00:59,  3.24it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.46it/s][A
 14%|█▍        | 31/221 [00:08<00:56,  3.38it/s][A
 14%|█▍        | 32/221 [00:09<00:51,  3.70it/s][A
 15%|█▍        | 33/221 [00:09<00:48,  3.86it/s][A
 15%|█▌        | 34/221 [00:09<00:48,  3.88it/s][A
 16%|█▌        | 35/221 [00:09<00:54,  3.40it/s][A
 16%|█▋        | 36/221 [00:10<00:57,  3.21it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.42it/s][A
 17%|█▋        | 38/221 [00:10<00:52,  3.49it/s][A
 18%|█▊        | 39/221 [00:10<00:45,  4.00it/s][A
 18%|█▊        | 40/221 [00:11<00:50,  3.59it/s][A
 19%|█▊        | 41/221 [00:11<00:45,  3.92it/s][A
 19%|█▉        | 42/221 [00:11<00:39,  4.48it/s][A
 19%|█▉        | 43/221 [00:12<00:50,  3.51it/s][A
 20%|█▉        | 44/221 [00:12<00:48,  3.63it/s][A
 20%|██        | 45/221 [00:12<00:52,  3.37it/s][A
 21%|██        | 46/221 [00:12<00:48,  3.57it/s][A
 22%|██▏       | 48/221 [00:13<00:34,  4.98it/s][A
 22%|██▏       | 49/221 [00:13<00:32,  5.32it/s][A
 23%|██▎       | 50/221 [00:13<00:34,  5.01it/s][A
 23%|██▎       | 51/221 [00:13<00:37,  4.48it/s][A
 24%|██▍       | 53/221 [00:14<00:31,  5.36it/s][A
 24%|██▍       | 54/221 [00:14<00:33,  5.01it/s][A
 25%|██▍       | 55/221 [00:14<00:34,  4.78it/s][A
 25%|██▌       | 56/221 [00:14<00:36,  4.48it/s][A
 26%|██▌       | 57/221 [00:15<00:39,  4.20it/s][A
 26%|██▌       | 58/221 [00:15<00:33,  4.82it/s][A
 27%|██▋       | 59/221 [00:15<00:36,  4.48it/s][A
 27%|██▋       | 60/221 [00:15<00:38,  4.14it/s][A
 28%|██▊       | 61/221 [00:16<00:38,  4.15it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.73it/s][A
 29%|██▊       | 63/221 [00:16<00:36,  4.35it/s][A
 29%|██▉       | 64/221 [00:16<00:38,  4.10it/s][A
 29%|██▉       | 65/221 [00:17<00:38,  4.08it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.53it/s][A
 30%|███       | 67/221 [00:17<00:56,  2.71it/s][A
 31%|███       | 68/221 [00:18<00:51,  2.99it/s][A
 31%|███       | 69/221 [00:18<00:53,  2.82it/s][A
 32%|███▏      | 70/221 [00:18<00:43,  3.43it/s][A
 32%|███▏      | 71/221 [00:19<00:46,  3.20it/s][A
 33%|███▎      | 72/221 [00:19<00:48,  3.04it/s][A
 33%|███▎      | 73/221 [00:19<00:45,  3.24it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.32it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.22it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.76it/s][A
 35%|███▍      | 77/221 [00:20<00:34,  4.16it/s][A
 35%|███▌      | 78/221 [00:21<00:40,  3.54it/s][A
 36%|███▌      | 79/221 [00:21<00:41,  3.43it/s][A
 36%|███▌      | 80/221 [00:21<00:38,  3.63it/s][A
 37%|███▋      | 81/221 [00:21<00:37,  3.77it/s][A
 37%|███▋      | 82/221 [00:22<00:35,  3.95it/s][A
 38%|███▊      | 83/221 [00:22<00:32,  4.28it/s][A
 38%|███▊      | 84/221 [00:22<00:39,  3.45it/s][A
 38%|███▊      | 85/221 [00:23<00:41,  3.31it/s][A
 39%|███▉      | 86/221 [00:23<00:42,  3.20it/s][A
 39%|███▉      | 87/221 [00:23<00:51,  2.59it/s][A
 40%|███▉      | 88/221 [00:24<00:46,  2.87it/s][A
 40%|████      | 89/221 [00:24<00:44,  2.98it/s][A
 41%|████      | 90/221 [00:24<00:47,  2.76it/s][A
 41%|████      | 91/221 [00:25<00:40,  3.24it/s][A
 42%|████▏     | 92/221 [00:25<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:25<00:38,  3.29it/s][A
 43%|████▎     | 94/221 [00:25<00:36,  3.48it/s][A
 43%|████▎     | 95/221 [00:26<00:45,  2.78it/s][A
 43%|████▎     | 96/221 [00:26<00:43,  2.87it/s][A
 44%|████▍     | 97/221 [00:27<00:41,  3.02it/s][A
 44%|████▍     | 98/221 [00:27<00:40,  3.06it/s][A
 45%|████▍     | 99/221 [00:27<00:36,  3.35it/s][A
 45%|████▌     | 100/221 [00:27<00:31,  3.78it/s][A
 46%|████▌     | 101/221 [00:28<00:29,  4.14it/s][A
 46%|████▌     | 102/221 [00:28<00:33,  3.60it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.82it/s][A
 47%|████▋     | 104/221 [00:28<00:25,  4.65it/s][A
 48%|████▊     | 105/221 [00:28<00:26,  4.41it/s][A
 48%|████▊     | 106/221 [00:29<00:34,  3.29it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.69it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.26it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.91it/s][A
 50%|████▉     | 110/221 [00:30<00:34,  3.19it/s][A
 50%|█████     | 111/221 [00:30<00:36,  2.99it/s][A
 51%|█████     | 112/221 [00:31<00:37,  2.91it/s][A
 51%|█████     | 113/221 [00:31<00:34,  3.13it/s][A
 52%|█████▏    | 115/221 [00:31<00:25,  4.23it/s][A
 52%|█████▏    | 116/221 [00:32<00:23,  4.40it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.14it/s][A
 53%|█████▎    | 118/221 [00:32<00:29,  3.50it/s][A
 54%|█████▍    | 119/221 [00:33<00:34,  2.96it/s][A
 54%|█████▍    | 120/221 [00:33<00:34,  2.89it/s][A
 55%|█████▍    | 121/221 [00:33<00:28,  3.51it/s][A
 55%|█████▌    | 122/221 [00:33<00:26,  3.77it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.84it/s][A
 56%|█████▌    | 124/221 [00:34<00:31,  3.04it/s][A
 57%|█████▋    | 125/221 [00:35<00:43,  2.23it/s][A
 57%|█████▋    | 126/221 [00:35<00:38,  2.44it/s][A
 57%|█████▋    | 127/221 [00:36<00:42,  2.23it/s][A
 58%|█████▊    | 128/221 [00:36<00:35,  2.60it/s][A
 58%|█████▊    | 129/221 [00:36<00:28,  3.19it/s][A
 59%|█████▉    | 130/221 [00:36<00:26,  3.40it/s][A
 59%|█████▉    | 131/221 [00:37<00:23,  3.89it/s][A
 60%|█████▉    | 132/221 [00:37<00:25,  3.47it/s][A
 60%|██████    | 133/221 [00:37<00:33,  2.66it/s][A
 61%|██████    | 134/221 [00:38<00:34,  2.54it/s][A
 62%|██████▏   | 136/221 [00:38<00:26,  3.18it/s][A
 62%|██████▏   | 137/221 [00:39<00:24,  3.39it/s][A
 62%|██████▏   | 138/221 [00:39<00:23,  3.49it/s][A
 63%|██████▎   | 139/221 [00:39<00:27,  3.00it/s][A
 63%|██████▎   | 140/221 [00:40<00:24,  3.32it/s][A
 64%|██████▍   | 141/221 [00:40<00:24,  3.21it/s][A
 64%|██████▍   | 142/221 [00:40<00:22,  3.55it/s][A
 65%|██████▍   | 143/221 [00:40<00:24,  3.22it/s][A
 65%|██████▌   | 144/221 [00:41<00:21,  3.66it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:41<00:21,  3.49it/s][A
 67%|██████▋   | 147/221 [00:41<00:18,  3.95it/s][A
 67%|██████▋   | 148/221 [00:42<00:19,  3.81it/s][A
 67%|██████▋   | 149/221 [00:42<00:20,  3.59it/s][A
 68%|██████▊   | 150/221 [00:42<00:18,  3.77it/s][A
 68%|██████▊   | 151/221 [00:43<00:25,  2.75it/s][A
 69%|██████▉   | 152/221 [00:44<00:33,  2.08it/s][A
 69%|██████▉   | 153/221 [00:44<00:28,  2.42it/s][A
 70%|██████▉   | 154/221 [00:44<00:24,  2.77it/s][A
 70%|███████   | 155/221 [00:45<00:26,  2.48it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.82it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.90it/s][A
 71%|███████▏  | 158/221 [00:46<00:23,  2.69it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.15it/s][A
 72%|███████▏  | 160/221 [00:46<00:18,  3.28it/s][A
 73%|███████▎  | 161/221 [00:46<00:15,  3.92it/s][A
 73%|███████▎  | 162/221 [00:46<00:13,  4.25it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.15it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.69it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.89it/s][A
 75%|███████▌  | 166/221 [00:47<00:14,  3.78it/s][A
 76%|███████▌  | 167/221 [00:48<00:12,  4.35it/s][A
 76%|███████▌  | 168/221 [00:48<00:12,  4.19it/s][A
 76%|███████▋  | 169/221 [00:48<00:10,  4.82it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.14it/s][A
 77%|███████▋  | 171/221 [00:49<00:19,  2.61it/s][A
 78%|███████▊  | 172/221 [00:49<00:16,  2.89it/s][A
 78%|███████▊  | 173/221 [00:50<00:16,  2.93it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.56it/s][A
 79%|███████▉  | 175/221 [00:50<00:13,  3.41it/s][A
 80%|███████▉  | 176/221 [00:50<00:11,  3.90it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.91it/s][A
 81%|████████  | 178/221 [00:51<00:14,  2.91it/s][A
 81%|████████  | 179/221 [00:51<00:13,  3.05it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.62it/s][A
 82%|████████▏ | 182/221 [00:52<00:10,  3.59it/s][A
 83%|████████▎ | 183/221 [00:52<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.47it/s][A
 84%|████████▎ | 185/221 [00:53<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:53<00:11,  3.08it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.44it/s][A
 85%|████████▌ | 188/221 [00:54<00:10,  3.24it/s][A
 86%|████████▌ | 189/221 [00:54<00:09,  3.52it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  2.84it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.58it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  3.77it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.07it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.51it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  3.73it/s][A
 89%|████████▊ | 196/221 [00:56<00:08,  2.90it/s][A
 89%|████████▉ | 197/221 [00:57<00:09,  2.62it/s][A
 90%|████████▉ | 198/221 [00:57<00:09,  2.52it/s][A
 90%|█████████ | 199/221 [00:57<00:07,  2.94it/s][A
 90%|█████████ | 200/221 [00:58<00:07,  2.99it/s][A
 91%|█████████ | 201/221 [00:58<00:06,  3.32it/s][A
 91%|█████████▏| 202/221 [00:58<00:05,  3.20it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.47it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.40it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.83it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.86it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.03it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.43it/s][A
 95%|█████████▍| 209/221 [01:00<00:03,  3.27it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.64it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.92it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.27it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.22it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.11it/s][A
 97%|█████████▋| 215/221 [01:02<00:02,  2.83it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.89it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.05it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.29it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.93it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.36it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.07it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'area_r1': 40.5, 'area_recall': '40.5/66.7/76.8', 'area_ravg': 61.3}
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'forward_r1': 38.0, 'forward_recall': '38.0/65.8/76.4', 'forward_ravg': 60.1}
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'area_video_r1': 39.6, 'area_video_recall': '39.6/67.3/77.6', 'area_video_ravg': 61.5}
09/17/2024 03:24:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 03:24:57 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'area_video_r1': 51.6, 'area_video_recall': '51.6/75.5/82.9', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/72.4/81.4', 'area_video_back_ravg': 67.6}
09/17/2024 03:24:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 03:24:57 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/62.9/73.4', 'video_ravg': 57.8}
09/17/2024 03:24:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 03:24:57 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 03:24:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 549--===========

09/17/2024 03:24:57 - INFO - __main__ -   {'video_r1': 51.0, 'video_recall': '51.0/75.5/81.8', 'video_ravg': 69.4}
09/17/2024 03:24:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 03:24:57 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 03:25:18 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009616538882255554, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0745269060134888, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.0095245838165283, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.093667984008789}
[h264 @ 0x55767c140780] mmco: unref short failure
[h264 @ 0x55767c140780] mmco: unref short failure
[h264 @ 0x55767c140780] mmco: unref short failure
[h264 @ 0x55767c140780] mmco: unref short failure
[h264 @ 0x55767c140780] mmco: unref short failure
[h264 @ 0x55767c140780] mmco: unref short failure
 19%|█▉        | 550/2910 [3:29:22<87:20:53, 133.24s/it] 19%|█▉        | 551/2910 [3:29:26<61:52:39, 94.43s/it] [h264 @ 0x5634a43169c0] mmco: unref short failure
[h264 @ 0x5634a43169c0] mmco: unref short failure
 19%|█▉        | 552/2910 [3:29:30<44:08:42, 67.40s/it][h264 @ 0x5576754cd540] mmco: unref short failure
[h264 @ 0x5576770cd0c0] mmco: unref short failure
 19%|█▉        | 553/2910 [3:29:34<31:44:56, 48.49s/it] 19%|█▉        | 554/2910 [3:29:39<23:10:11, 35.40s/it][h264 @ 0x5576862d1d40] mmco: unref short failure
[h264 @ 0x5576862d1d40] mmco: unref short failure
 19%|█▉        | 555/2910 [3:29:45<17:19:53, 26.49s/it][h264 @ 0x55857e7c1e40] mmco: unref short failure
[h264 @ 0x55857e7c1e40] mmco: unref short failure
[h264 @ 0x5634992b6840] mmco: unref short failure
[h264 @ 0x5634992b6840] mmco: unref short failure
[h264 @ 0x5634992b6840] mmco: unref short failure
not have audios CqzowavAOpc.38
 19%|█▉        | 556/2910 [3:29:51<13:16:20, 20.30s/it] 19%|█▉        | 557/2910 [3:29:57<10:36:44, 16.24s/it][h264 @ 0x557688a72380] mmco: unref short failure
[h264 @ 0x557688a72380] mmco: unref short failure
[h264 @ 0x55859747e3c0] mmco: unref short failure
 19%|█▉        | 558/2910 [3:30:03<8:36:35, 13.18s/it] 09/17/2024 03:26:06 - INFO - __main__ -   current idx _wZn-Jd_Dhg.25 from finetune_area returns wrong image/video, use 148226 instead.
[h264 @ 0x557672fd5ac0] mmco: unref short failure
 19%|█▉        | 559/2910 [3:30:10<7:12:45, 11.04s/it][h264 @ 0x555636fa4680] mmco: unref short failure
 19%|█▉        | 560/2910 [3:30:16<6:16:07,  9.60s/it][h264 @ 0x55766d82b5c0] mmco: unref short failure
[h264 @ 0x55766d82b5c0] mmco: unref short failure
 19%|█▉        | 561/2910 [3:30:22<5:39:33,  8.67s/it] 19%|█▉        | 562/2910 [3:30:29<5:12:29,  7.99s/it][h264 @ 0x55857ec14400] mmco: unref short failure
[h264 @ 0x55857ec14400] mmco: unref short failure
 19%|█▉        | 563/2910 [3:30:36<5:02:44,  7.74s/it] 19%|█▉        | 564/2910 [3:30:43<4:53:20,  7.50s/it][h264 @ 0x558594343f00] mmco: unref short failure
 19%|█▉        | 565/2910 [3:30:50<4:47:15,  7.35s/it][h264 @ 0x5585959eed80] mmco: unref short failure
[h264 @ 0x5585959eed80] mmco: unref short failure
[h264 @ 0x5585959eed80] mmco: unref short failure
[h264 @ 0x5585959eed80] mmco: unref short failure
[h264 @ 0x5585859595c0] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
[h264 @ 0x5556229486c0] mmco: unref short failure
[h264 @ 0x55563937d5c0] mmco: unref short failure
[h264 @ 0x55563937d5c0] mmco: unref short failure
[h264 @ 0x558588fe6fc0] mmco: unref short failure
[h264 @ 0x5556232f3b80] mmco: unref short failure
[h264 @ 0x5634992b6840] mmco: unref short failure
[h264 @ 0x5634992b6840] mmco: unref short failure
[h264 @ 0x55859b748840] mmco: unref short failure
[h264 @ 0x55858bcc9140] mmco: unref short failure
[h264 @ 0x55858bcc9140] mmco: unref short failure
 19%|█▉        | 566/2910 [3:31:29<11:06:31, 17.06s/it][h264 @ 0x56348de574c0] mmco: unref short failure
[h264 @ 0x56348de574c0] mmco: unref short failure
[h264 @ 0x56348de574c0] mmco: unref short failure
[h264 @ 0x56348de574c0] mmco: unref short failure
 19%|█▉        | 567/2910 [3:31:36<9:00:23, 13.84s/it] [h264 @ 0x55561f4a1640] mmco: unref short failure
[h264 @ 0x5634a6f5ce40] mmco: unref short failure
[h264 @ 0x5634a6f5ce40] mmco: unref short failure
[h264 @ 0x5634a6f5ce40] mmco: unref short failure
[h264 @ 0x5634a6f5ce40] mmco: unref short failure
[h264 @ 0x563491fab980] mmco: unref short failure
[h264 @ 0x563491fab980] mmco: unref short failure
 20%|█▉        | 568/2910 [3:31:47<8:27:30, 13.00s/it][h264 @ 0x55857e782a40] mmco: unref short failure
[h264 @ 0x55857e782a40] mmco: unref short failure
[h264 @ 0x563491fab980] mmco: unref short failure
[h264 @ 0x55561684e3c0] mmco: unref short failure
[h264 @ 0x55561684e3c0] mmco: unref short failure
[h264 @ 0x55561684e3c0] mmco: unref short failure
[h264 @ 0x55561684e3c0] mmco: unref short failure
[h264 @ 0x55858c81f080] mmco: unref short failure
[h264 @ 0x55858c81f080] mmco: unref short failure
[h264 @ 0x5556172a3fc0] mmco: unref short failure
[h264 @ 0x5556172a3fc0] mmco: unref short failure
[h264 @ 0x55859d1b91c0] mmco: unref short failure
[h264 @ 0x5634a9941ec0] mmco: unref short failure
[h264 @ 0x55766a451b40] mmco: unref short failure
[h264 @ 0x55766a451b40] mmco: unref short failure
[h264 @ 0x55768eae1400] mmco: unref short failure
[h264 @ 0x55768eae1400] mmco: unref short failure
[h264 @ 0x56348d30e080] mmco: unref short failure
[h264 @ 0x56348d30e080] mmco: unref short failure
 20%|█▉        | 569/2910 [3:32:17<11:48:48, 18.17s/it] 20%|█▉        | 570/2910 [3:32:23<9:24:01, 14.46s/it] [h264 @ 0x55859747e3c0] mmco: unref short failure
[h264 @ 0x55859747e3c0] mmco: unref short failure
[h264 @ 0x55857fb74340] mmco: unref short failure
[h264 @ 0x55857fb74340] mmco: unref short failure
[h264 @ 0x55857fb74340] mmco: unref short failure
[h264 @ 0x55857fb74340] mmco: unref short failure
 20%|█▉        | 571/2910 [3:32:30<8:01:18, 12.35s/it][h264 @ 0x5576754cd540] mmco: unref short failure
[h264 @ 0x5576754cd540] mmco: unref short failure
 20%|█▉        | 572/2910 [3:32:37<6:52:37, 10.59s/it] 20%|█▉        | 573/2910 [3:32:42<5:54:56,  9.11s/it][h264 @ 0x55858bcc9140] mmco: unref short failure
[h264 @ 0x55857e7ec580] mmco: unref short failure
[h264 @ 0x55858bcc9140] mmco: unref short failure
[h264 @ 0x55858bcc9140] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x55766a7f3500] mmco: unref short failure
[h264 @ 0x56348e9fc940] mmco: unref short failure
[h264 @ 0x56348e9fc940] mmco: unref short failure
[h264 @ 0x56348d247d00] mmco: unref short failure
[h264 @ 0x56348d247d00] mmco: unref short failure
[h264 @ 0x56348d247d00] mmco: unref short failure
[h264 @ 0x56348d247d00] mmco: unref short failure
[h264 @ 0x56349ccb4a80] mmco: unref short failure
[h264 @ 0x56349ccb4a80] mmco: unref short failure
[h264 @ 0x5634ac8e2ac0] mmco: unref short failure
[h264 @ 0x5634ac8e2ac0] mmco: unref short failure
[h264 @ 0x55766c4fdbc0] mmco: unref short failure
[h264 @ 0x557685439f00] mmco: unref short failure
[h264 @ 0x557685439f00] mmco: unref short failure
[h264 @ 0x55766e963480] mmco: unref short failure
[h264 @ 0x55766e963480] mmco: unref short failure
[h264 @ 0x56348d25a2c0] mmco: unref short failure
[h264 @ 0x555620fe60c0] mmco: unref short failure
[h264 @ 0x555620fe60c0] mmco: unref short failure
 20%|█▉        | 574/2910 [3:33:59<19:01:57, 29.33s/it] 20%|█▉        | 575/2910 [3:34:04<14:23:00, 22.18s/it][h264 @ 0x55857fb74340] mmco: unref short failure
[h264 @ 0x55561d092cc0] mmco: unref short failure
[h264 @ 0x55857e6dce00] mmco: unref short failure
[h264 @ 0x55857e6dce00] mmco: unref short failure
[h264 @ 0x55562ff4a580] mmco: unref short failure
 20%|█▉        | 576/2910 [3:34:20<13:01:30, 20.09s/it][h264 @ 0x5585825eb980] mmco: unref short failure
[h264 @ 0x5585825eb980] mmco: unref short failure
 20%|█▉        | 577/2910 [3:34:25<10:05:39, 15.58s/it] 20%|█▉        | 578/2910 [3:34:28<7:44:54, 11.96s/it]  20%|█▉        | 579/2910 [3:34:32<6:05:57,  9.42s/it] 20%|█▉        | 580/2910 [3:34:35<4:57:16,  7.66s/it] 20%|█▉        | 581/2910 [3:34:39<4:09:11,  6.42s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56353ef50880] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5576de5213c0] mmco: unref short failure
[h264 @ 0x5576decc5140] mmco: unref short failure
[h264 @ 0x5576decc5140] mmco: unref short failure
[h264 @ 0x563540957940] mmco: unref short failure
[h264 @ 0x563540957940] mmco: unref short failure
[h264 @ 0x5635415c3cc0] mmco: unref short failure
[h264 @ 0x5635415c3cc0] mmco: unref short failure
[h264 @ 0x5635415c3cc0] mmco: unref short failure
[h264 @ 0x5576df30bfc0] mmco: unref short failure
[h264 @ 0x557717856c40] mmco: unref short failure
[h264 @ 0x557717856c40] mmco: unref short failure
[h264 @ 0x557717856c40] mmco: unref short failure
[h264 @ 0x557717856c40] mmco: unref short failure
[h264 @ 0x5576dec83700] mmco: unref short failure
[h264 @ 0x5576dec83700] mmco: unref short failure
[h264 @ 0x5586320ecfc0] mmco: unref short failure
[h264 @ 0x5576de051940] mmco: unref short failure
[h264 @ 0x5576de051940] mmco: unref short failure
[h264 @ 0x5576de397a00] mmco: unref short failure
[h264 @ 0x55568bd5e100] mmco: unref short failure
[h264 @ 0x55568bd5e100] mmco: unref short failure
[h264 @ 0x55568bd5e100] mmco: unref short failure
[h264 @ 0x55568bd5e100] mmco: unref short failure
[h264 @ 0x55568d85e8c0] mmco: unref short failure
[h264 @ 0x55568d85e8c0] mmco: unref short failure
[h264 @ 0x5576dea6b800] mmco: unref short failure
[h264 @ 0x5576dea6b800] mmco: unref short failure
[h264 @ 0x55568c1acac0] mmco: unref short failure
[h264 @ 0x55568c1acac0] mmco: unref short failure
[h264 @ 0x5576de5cbe00] mmco: unref short failure
[h264 @ 0x5576de5cbe00] mmco: unref short failure
[h264 @ 0x5576de5cbe00] mmco: unref short failure
[h264 @ 0x5576de5cbe00] mmco: unref short failure
[h264 @ 0x5576de3fa880] mmco: unref short failure
[h264 @ 0x5576de3fa880] mmco: unref short failure
[h264 @ 0x56354099f2c0] mmco: unref short failure
[h264 @ 0x55568d4a4940] mmco: unref short failure
[h264 @ 0x55568d4a4940] mmco: unref short failure
[h264 @ 0x5556c62bf740] mmco: unref short failure
[h264 @ 0x5576ded06a00] mmco: unref short failure
[h264 @ 0x5576ded06a00] mmco: unref short failure
[h264 @ 0x5635460a2f80] mmco: unref short failure
[h264 @ 0x5635460a2f80] mmco: unref short failure
[h264 @ 0x5635460a2f80] mmco: unref short failure
[h264 @ 0x5635460a2f80] mmco: unref short failure
[h264 @ 0x5556c5e08dc0] mmco: unref short failure
[h264 @ 0x5556c5e08dc0] mmco: unref short failure
09/17/2024 03:32:59 - INFO - __main__ -   current idx A2e7HyCQqvE.54 from finetune_area returns wrong image/video, use 23649 instead.
[h264 @ 0x5576ded59880] mmco: unref short failure
[h264 @ 0x558633474300] mmco: unref short failure
[h264 @ 0x558633474300] mmco: unref short failure
[h264 @ 0x55568bdcb0c0] mmco: unref short failure
[h264 @ 0x55568bdcb0c0] mmco: unref short failure
[h264 @ 0x558639acc8c0] mmco: unref short failure
[h264 @ 0x558639acc8c0] mmco: unref short failure
[h264 @ 0x558639acc8c0] mmco: unref short failure
[h264 @ 0x5576def96440] mmco: unref short failure
[h264 @ 0x5576def96440] mmco: unref short failure
 20%|██        | 582/2910 [3:37:38<37:39:56, 58.25s/it][h264 @ 0x55568c71a100] mmco: unref short failure
 20%|██        | 583/2910 [3:37:45<27:43:55, 42.90s/it] 20%|██        | 584/2910 [3:37:51<20:32:35, 31.80s/it][h264 @ 0x56354163c940] mmco: unref short failure
[h264 @ 0x56354163c940] mmco: unref short failure
 20%|██        | 585/2910 [3:37:57<15:38:20, 24.22s/it][h264 @ 0x558634217e00] mmco: unref short failure
[h264 @ 0x558634217e00] mmco: unref short failure
[h264 @ 0x56354081d380] mmco: unref short failure
[h264 @ 0x56354081d380] mmco: unref short failure
09/17/2024 03:33:59 - INFO - __main__ -   current idx PHgL4zWa_eU.158 from finetune_area returns wrong image/video, use 134332 instead.
 20%|██        | 586/2910 [3:38:04<12:11:54, 18.90s/it][h264 @ 0x55863a524500] mmco: unref short failure
[h264 @ 0x55863a524500] mmco: unref short failure
 20%|██        | 587/2910 [3:38:10<9:43:35, 15.07s/it]  20%|██        | 588/2910 [3:38:16<7:55:12, 12.28s/it][h264 @ 0x5556c6cf7dc0] mmco: unref short failure
[h264 @ 0x5556c6cf7dc0] mmco: unref short failure
[h264 @ 0x5556c6cf7dc0] mmco: unref short failure
[h264 @ 0x5556c6cf7dc0] mmco: unref short failure
[h264 @ 0x5635463f6300] mmco: unref short failure
[h264 @ 0x5635463f6300] mmco: unref short failure
[h264 @ 0x563542be0bc0] mmco: unref short failure
[h264 @ 0x563542be0bc0] mmco: unref short failure
[h264 @ 0x5556c4feee40] mmco: unref short failure
[h264 @ 0x5556c4feee40] mmco: unref short failure
 20%|██        | 589/2910 [3:38:23<6:50:47, 10.62s/it][h264 @ 0x5576df0e0380] mmco: unref short failure
[h264 @ 0x558636a42940] mmco: unref short failure
[h264 @ 0x55568cb6e740] mmco: unref short failure
[h264 @ 0x5556c9031480] mmco: unref short failure
[h264 @ 0x5556c9031480] mmco: unref short failure
[h264 @ 0x55568c1cb940] mmco: unref short failure
[h264 @ 0x55568c1cb940] mmco: unref short failure
[h264 @ 0x55568c1cb940] mmco: unref short failure
[h264 @ 0x55568c1cb940] mmco: unref short failure
09/17/2024 03:34:39 - INFO - __main__ -   current idx KQezF6-NY_o.24 from finetune_area returns wrong image/video, use 3469 instead.
[h264 @ 0x56354251d800] mmco: unref short failure
[h264 @ 0x5577198b9f80] mmco: unref short failure
[h264 @ 0x5577198b9f80] mmco: unref short failure
[h264 @ 0x56354bf03380] mmco: unref short failure
[h264 @ 0x5556cda9d9c0] mmco: unref short failure
[h264 @ 0x55771a469100] mmco: unref short failure
[h264 @ 0x55771a469100] mmco: unref short failure
[h264 @ 0x55771a469100] mmco: unref short failure
[h264 @ 0x55863459e900] mmco: unref short failure
[h264 @ 0x55568b368cc0] mmco: unref short failure
 20%|██        | 590/2910 [3:40:02<24:04:32, 37.36s/it] 20%|██        | 591/2910 [3:40:09<18:04:38, 28.06s/it][h264 @ 0x558639aa2d00] mmco: unref short failure
[h264 @ 0x5576df435680] mmco: unref short failure
 20%|██        | 592/2910 [3:40:15<13:52:06, 21.54s/it][h264 @ 0x5556c72ae540] mmco: unref short failure
[h264 @ 0x5556c72ae540] mmco: unref short failure
 20%|██        | 593/2910 [3:40:22<11:07:05, 17.27s/it][h264 @ 0x5576e0c5be40] mmco: unref short failure
 20%|██        | 594/2910 [3:40:29<9:08:08, 14.20s/it] [h264 @ 0x563548458500] mmco: unref short failure
[h264 @ 0x563548458500] mmco: unref short failure
[h264 @ 0x563548458500] mmco: unref short failure
[h264 @ 0x563548458500] mmco: unref short failure
 20%|██        | 595/2910 [3:40:36<7:36:04, 11.82s/it][h264 @ 0x5556c44c7300] mmco: unref short failure
[h264 @ 0x563544b4e040] mmco: unref short failure
[h264 @ 0x563544b4e040] mmco: unref short failure
 20%|██        | 596/2910 [3:40:42<6:33:07, 10.19s/it][h264 @ 0x55863307d9c0] mmco: unref short failure
[h264 @ 0x55863307d9c0] mmco: unref short failure
[h264 @ 0x55863307d9c0] mmco: unref short failure
[h264 @ 0x55863307d9c0] mmco: unref short failure
[h264 @ 0x55568d700d00] mmco: unref short failure
[h264 @ 0x55568d700d00] mmco: unref short failure
[h264 @ 0x55568d1ae780] mmco: unref short failure
[h264 @ 0x55568d1ae780] mmco: unref short failure
[h264 @ 0x5556c3eec7c0] mmco: unref short failure
[h264 @ 0x5556c3eec7c0] mmco: unref short failure
 21%|██        | 597/2910 [3:40:48<5:48:42,  9.05s/it][h264 @ 0x558637fbf100] mmco: unref short failure
[h264 @ 0x5556ca19eb80] mmco: unref short failure
[h264 @ 0x5556ca19eb80] mmco: unref short failure
[h264 @ 0x55863a446b40] mmco: unref short failure
[h264 @ 0x55863a446b40] mmco: unref short failure
[h264 @ 0x55863333a740] mmco: unref short failure
[h264 @ 0x55863333a740] mmco: unref short failure
[h264 @ 0x5586331c6240] mmco: unref short failure
[h264 @ 0x55568d2cf940] mmco: unref short failure
not have audios GAwav3sZcGw.4
[h264 @ 0x55568d2d0080] mmco: unref short failure
[h264 @ 0x5635447b44c0] mmco: unref short failure
09/17/2024 03:37:31 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 25892 instead.
[h264 @ 0x55568b3cb9c0] mmco: unref short failure
[h264 @ 0x55771c7fccc0] mmco: unref short failure
[h264 @ 0x558633db5d40] mmco: unref short failure
[h264 @ 0x558633db5d40] mmco: unref short failure
[h264 @ 0x55771cbb9d80] mmco: unref short failure
[h264 @ 0x55771f460280] mmco: unref short failure
[h264 @ 0x563547114f40] mmco: unref short failure
[h264 @ 0x563547114f40] mmco: unref short failure
[h264 @ 0x56354c2baa80] mmco: unref short failure
[h264 @ 0x557718d70600] mmco: unref short failure
[h264 @ 0x557718d70600] mmco: unref short failure
[h264 @ 0x557718d70600] mmco: unref short failure
[h264 @ 0x557718d70600] mmco: unref short failure
09/17/2024 03:38:03 - INFO - __main__ -   current idx -c6ksbh044A.74 from finetune_area returns wrong image/video, use 34459 instead.
[h264 @ 0x558639d1dcc0] mmco: unref short failure
[h264 @ 0x558639d1dcc0] mmco: unref short failure
[h264 @ 0x558639d1dcc0] mmco: unref short failure
[h264 @ 0x558639d1dcc0] mmco: unref short failure
[h264 @ 0x557718747d00] mmco: unref short failure
[h264 @ 0x557718747d00] mmco: unref short failure
 21%|██        | 598/2910 [3:42:28<23:10:26, 36.08s/it][h264 @ 0x55771b18d080] mmco: unref short failure
[h264 @ 0x56354a865e00] mmco: unref short failure
[h264 @ 0x56354a865e00] mmco: unref short failure
[h264 @ 0x5556c82b5180] mmco: unref short failure
 21%|██        | 599/2910 [3:42:36<17:45:15, 27.66s/it]09/17/2024 03:38:35 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 03:38:35 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563543e11900] mmco: unref short failure
[h264 @ 0x56354c7ebf00] mmco: unref short failure
[h264 @ 0x56354c7ebf00] mmco: unref short failure
[h264 @ 0x563547d22440] mmco: unref short failure
[h264 @ 0x5586323d1700] mmco: unref short failure
[h264 @ 0x5586323d1700] mmco: unref short failure
[h264 @ 0x5586333d76c0] mmco: unref short failure
[h264 @ 0x563545730a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558632598080] mmco: unref short failure
[h264 @ 0x558632598080] mmco: unref short failure
[h264 @ 0x558632598080] mmco: unref short failure
[h264 @ 0x558632598080] mmco: unref short failure
[h264 @ 0x5556cb591ec0] mmco: unref short failure
[h264 @ 0x5556cb591ec0] mmco: unref short failure
[h264 @ 0x56354165fd80] mmco: unref short failure
[h264 @ 0x56354165fd80] mmco: unref short failure
[h264 @ 0x5556c53e2600] mmco: unref short failure
[h264 @ 0x563547958ec0] mmco: unref short failure
[h264 @ 0x558633117c40] mmco: unref short failure
[h264 @ 0x558633117c40] mmco: unref short failure
[h264 @ 0x5556c6734a80] mmco: unref short failure
[h264 @ 0x5586380e1280] mmco: unref short failure
[h264 @ 0x56354a905a40] mmco: unref short failure
09/17/2024 03:40:35 - INFO - __main__ -   current idx zpVEmyBr_Hg.14 from finetune_area returns wrong image/video, use 126865 instead.
[h264 @ 0x56354b417300] mmco: unref short failure
[h264 @ 0x56354b417300] mmco: unref short failure
[h264 @ 0x5577198d9a00] mmco: unref short failure
[h264 @ 0x5577198d9a00] mmco: unref short failure
[h264 @ 0x5577188215c0] mmco: unref short failure
[h264 @ 0x5577188215c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:17,  1.61it/s][A
  1%|          | 2/221 [00:01<01:57,  1.87it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.72it/s][A
  2%|▏         | 4/221 [00:01<01:02,  3.46it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.80it/s][A
  3%|▎         | 6/221 [00:01<00:52,  4.12it/s][A
  3%|▎         | 7/221 [00:02<00:54,  3.96it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.39it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.38it/s][A
  5%|▍         | 10/221 [00:03<01:20,  2.62it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.26it/s][A
  5%|▌         | 12/221 [00:04<01:14,  2.79it/s][A
  6%|▌         | 13/221 [00:04<01:03,  3.28it/s][A
  6%|▋         | 14/221 [00:04<01:07,  3.05it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.32it/s][A
  7%|▋         | 16/221 [00:05<01:06,  3.09it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.29it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.35it/s][A
  9%|▊         | 19/221 [00:05<00:49,  4.08it/s][A
  9%|▉         | 20/221 [00:06<00:47,  4.23it/s][A
 10%|▉         | 21/221 [00:06<00:53,  3.72it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.29it/s][A
 10%|█         | 23/221 [00:07<00:54,  3.65it/s][A
 11%|█         | 24/221 [00:07<00:47,  4.18it/s][A
 11%|█▏        | 25/221 [00:07<00:43,  4.49it/s][A
 12%|█▏        | 26/221 [00:07<00:48,  4.04it/s][A
 12%|█▏        | 27/221 [00:07<00:39,  4.88it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.40it/s][A
 13%|█▎        | 29/221 [00:08<00:46,  4.14it/s][A
 14%|█▎        | 30/221 [00:08<00:45,  4.18it/s][A
 14%|█▍        | 31/221 [00:08<00:45,  4.19it/s][A
 15%|█▍        | 33/221 [00:09<00:37,  4.97it/s][A
 15%|█▌        | 34/221 [00:09<00:33,  5.61it/s][A
 16%|█▌        | 35/221 [00:09<00:34,  5.32it/s][A
 16%|█▋        | 36/221 [00:09<00:45,  4.03it/s][A[h264 @ 0x563543fc4f80] mmco: unref short failure

 17%|█▋        | 37/221 [00:10<01:25,  2.15it/s][A
 17%|█▋        | 38/221 [00:11<01:26,  2.11it/s][A
 18%|█▊        | 39/221 [00:11<01:08,  2.66it/s][A
 18%|█▊        | 40/221 [00:11<01:05,  2.77it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 42/221 [00:12<01:09,  2.59it/s][A
 19%|█▉        | 43/221 [00:12<00:56,  3.16it/s][A
 20%|█▉        | 44/221 [00:12<00:46,  3.83it/s][A
 20%|██        | 45/221 [00:14<01:36,  1.82it/s][A[h264 @ 0x55771a756a80] mmco: unref short failure

 21%|██        | 46/221 [00:14<01:39,  1.76it/s][A
 21%|██▏       | 47/221 [00:16<02:15,  1.28it/s][A
 22%|██▏       | 48/221 [00:16<01:41,  1.71it/s][A
 22%|██▏       | 49/221 [00:16<01:24,  2.03it/s][A
 23%|██▎       | 51/221 [00:16<00:53,  3.15it/s][A
 24%|██▎       | 52/221 [00:16<00:47,  3.54it/s][A
 24%|██▍       | 53/221 [00:16<00:41,  4.10it/s][A
 24%|██▍       | 54/221 [00:19<02:46,  1.00it/s][A
 25%|██▍       | 55/221 [00:20<02:17,  1.21it/s][A
 25%|██▌       | 56/221 [00:20<01:50,  1.50it/s][A
 26%|██▌       | 57/221 [00:20<01:32,  1.78it/s][A
 27%|██▋       | 59/221 [00:21<00:58,  2.79it/s][A
 27%|██▋       | 60/221 [00:21<01:07,  2.39it/s][A
 28%|██▊       | 61/221 [00:21<00:59,  2.70it/s][A
 28%|██▊       | 62/221 [00:22<00:55,  2.85it/s][A
 29%|██▊       | 63/221 [00:22<00:49,  3.20it/s][A
 29%|██▉       | 64/221 [00:22<00:46,  3.39it/s][A
 29%|██▉       | 65/221 [00:23<00:47,  3.26it/s][A
 30%|██▉       | 66/221 [00:23<01:09,  2.22it/s][A
 30%|███       | 67/221 [00:24<01:30,  1.71it/s][A
 31%|███       | 68/221 [00:25<01:12,  2.11it/s][A
 31%|███       | 69/221 [00:25<01:21,  1.86it/s][A
 32%|███▏      | 70/221 [00:25<01:06,  2.26it/s][A
 32%|███▏      | 71/221 [00:28<02:20,  1.07it/s][A
 33%|███▎      | 72/221 [00:28<01:53,  1.31it/s][A
 33%|███▎      | 73/221 [00:28<01:36,  1.54it/s][A
 33%|███▎      | 74/221 [00:28<01:17,  1.90it/s][A
 34%|███▍      | 75/221 [00:29<01:08,  2.12it/s][A
 34%|███▍      | 76/221 [00:29<00:55,  2.63it/s][A
 35%|███▍      | 77/221 [00:29<00:54,  2.67it/s][A
 35%|███▌      | 78/221 [00:30<00:49,  2.92it/s][A
 36%|███▌      | 79/221 [00:30<00:52,  2.69it/s][A
 36%|███▌      | 80/221 [00:30<00:49,  2.86it/s][A
 37%|███▋      | 81/221 [00:31<00:45,  3.07it/s][A
 37%|███▋      | 82/221 [00:31<00:37,  3.69it/s][A
 38%|███▊      | 83/221 [00:31<00:31,  4.40it/s][A
 38%|███▊      | 84/221 [00:31<00:29,  4.57it/s][A
 39%|███▉      | 86/221 [00:31<00:26,  5.11it/s][A
 39%|███▉      | 87/221 [00:32<00:41,  3.21it/s][A
 40%|███▉      | 88/221 [00:33<00:46,  2.86it/s][A
 40%|████      | 89/221 [00:34<01:09,  1.91it/s][A
 41%|████      | 90/221 [00:34<01:01,  2.12it/s][A
 41%|████      | 91/221 [00:34<00:50,  2.56it/s][A
 42%|████▏     | 92/221 [00:34<00:43,  2.94it/s][A
 42%|████▏     | 93/221 [00:35<00:48,  2.63it/s][A
 43%|████▎     | 94/221 [00:35<00:47,  2.67it/s][A
 43%|████▎     | 95/221 [00:35<00:37,  3.34it/s][A
 43%|████▎     | 96/221 [00:36<00:37,  3.34it/s][A
 44%|████▍     | 97/221 [00:36<00:30,  4.04it/s][A
 44%|████▍     | 98/221 [00:36<00:32,  3.77it/s][A
 45%|████▍     | 99/221 [00:36<00:27,  4.38it/s][A
 45%|████▌     | 100/221 [00:36<00:27,  4.33it/s][A[h264 @ 0x55864564ee00] mmco: unref short failure

 46%|████▌     | 101/221 [00:36<00:23,  5.14it/s][A
 46%|████▌     | 102/221 [00:37<00:33,  3.52it/s][A
 47%|████▋     | 103/221 [00:37<00:27,  4.25it/s][A
 47%|████▋     | 104/221 [00:37<00:23,  4.97it/s][A
 48%|████▊     | 105/221 [00:37<00:26,  4.42it/s][A[h264 @ 0x55863c8733c0] mmco: unref short failure
[h264 @ 0x55863c8733c0] mmco: unref short failure
[h264 @ 0x55863c8733c0] mmco: unref short failure
[h264 @ 0x55863c8733c0] mmco: unref short failure

 48%|████▊     | 106/221 [00:38<00:48,  2.39it/s][A
 48%|████▊     | 107/221 [00:38<00:37,  3.02it/s][A
 49%|████▉     | 108/221 [00:39<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:39<00:29,  3.80it/s][A
 50%|████▉     | 110/221 [00:39<00:29,  3.71it/s][A
 50%|█████     | 111/221 [00:40<00:36,  3.03it/s][A
 51%|█████     | 112/221 [00:40<00:31,  3.51it/s][A
 51%|█████     | 113/221 [00:40<00:30,  3.55it/s][A
 52%|█████▏    | 115/221 [00:40<00:19,  5.46it/s][A
 52%|█████▏    | 116/221 [00:45<02:13,  1.27s/it][A
 53%|█████▎    | 117/221 [00:45<01:45,  1.01s/it][A
 53%|█████▎    | 118/221 [00:45<01:23,  1.24it/s][A
 54%|█████▍    | 119/221 [00:46<01:07,  1.50it/s][A
 54%|█████▍    | 120/221 [00:46<00:54,  1.86it/s][A
 55%|█████▌    | 122/221 [00:46<00:34,  2.83it/s][A
 56%|█████▌    | 123/221 [00:46<00:28,  3.38it/s][A
 56%|█████▌    | 124/221 [00:46<00:25,  3.75it/s][A
 57%|█████▋    | 125/221 [00:47<00:26,  3.67it/s][A
 57%|█████▋    | 126/221 [00:47<00:28,  3.32it/s][A
 57%|█████▋    | 127/221 [00:48<00:33,  2.80it/s][A
 58%|█████▊    | 128/221 [00:48<00:33,  2.81it/s][A
 58%|█████▊    | 129/221 [00:48<00:29,  3.08it/s][A
 59%|█████▉    | 130/221 [00:48<00:27,  3.36it/s][A
 60%|█████▉    | 132/221 [00:49<00:19,  4.53it/s][A
 60%|██████    | 133/221 [00:49<00:23,  3.83it/s][A
 61%|██████    | 134/221 [00:49<00:22,  3.89it/s][A[h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure

 61%|██████    | 135/221 [00:50<00:23,  3.59it/s][A
 62%|██████▏   | 136/221 [00:50<00:25,  3.39it/s][A
 62%|██████▏   | 137/221 [00:50<00:22,  3.74it/s][A
 62%|██████▏   | 138/221 [00:50<00:23,  3.56it/s][A
 63%|██████▎   | 139/221 [00:51<00:31,  2.63it/s][A
 63%|██████▎   | 140/221 [00:51<00:28,  2.82it/s][A
 64%|██████▍   | 141/221 [00:52<00:26,  3.05it/s][A
 64%|██████▍   | 142/221 [00:52<00:24,  3.22it/s][A
 65%|██████▍   | 143/221 [00:52<00:29,  2.63it/s][A
 65%|██████▌   | 144/221 [00:53<00:25,  3.05it/s][A
 66%|██████▌   | 146/221 [00:53<00:15,  4.79it/s][A
 67%|██████▋   | 147/221 [00:53<00:15,  4.93it/s][A
 67%|██████▋   | 148/221 [00:53<00:15,  4.73it/s][A
 67%|██████▋   | 149/221 [00:53<00:13,  5.22it/s][A[h264 @ 0x5576e10d2000] mmco: unref short failure

 68%|██████▊   | 150/221 [00:54<00:13,  5.31it/s][A[h264 @ 0x5576e10d2000] mmco: unref short failure

 68%|██████▊   | 151/221 [00:54<00:23,  2.93it/s][A
 69%|██████▉   | 152/221 [00:55<00:29,  2.31it/s][A
 69%|██████▉   | 153/221 [00:55<00:27,  2.50it/s][A
 70%|██████▉   | 154/221 [00:56<00:25,  2.60it/s][A
 70%|███████   | 155/221 [00:56<00:21,  3.07it/s][A
 71%|███████   | 156/221 [00:56<00:18,  3.44it/s][A[h264 @ 0x563549d331c0] mmco: unref short failure
[h264 @ 0x563549d331c0] mmco: unref short failure

 71%|███████   | 157/221 [00:58<00:43,  1.48it/s][A
 71%|███████▏  | 158/221 [00:58<00:34,  1.83it/s][A
 72%|███████▏  | 159/221 [00:58<00:25,  2.40it/s][A
 72%|███████▏  | 160/221 [00:58<00:22,  2.67it/s][A
 73%|███████▎  | 162/221 [00:59<00:18,  3.18it/s][A
 74%|███████▍  | 163/221 [00:59<00:17,  3.37it/s][A
 75%|███████▍  | 165/221 [00:59<00:12,  4.65it/s][A[h264 @ 0x5556d09df180] mmco: unref short failure
[h264 @ 0x5556d09df180] mmco: unref short failure

 75%|███████▌  | 166/221 [01:00<00:14,  3.86it/s][A
 76%|███████▌  | 167/221 [01:00<00:12,  4.47it/s][A
 76%|███████▌  | 168/221 [01:01<00:25,  2.08it/s][A
 76%|███████▋  | 169/221 [01:01<00:21,  2.38it/s][A
 77%|███████▋  | 170/221 [01:01<00:19,  2.60it/s][A
 77%|███████▋  | 171/221 [01:02<00:18,  2.75it/s][A
 78%|███████▊  | 172/221 [01:02<00:15,  3.10it/s][A
 78%|███████▊  | 173/221 [01:02<00:13,  3.49it/s][A
 79%|███████▊  | 174/221 [01:02<00:11,  4.25it/s][A
 79%|███████▉  | 175/221 [01:03<00:10,  4.26it/s][A
 80%|███████▉  | 176/221 [01:03<00:11,  4.01it/s][A
 80%|████████  | 177/221 [01:03<00:09,  4.59it/s][A
 81%|████████  | 178/221 [01:03<00:13,  3.22it/s][A
 81%|████████  | 179/221 [01:04<00:13,  3.07it/s][A
 82%|████████▏ | 181/221 [01:04<00:09,  4.34it/s][A[h264 @ 0x55772080efc0] mmco: unref short failure

 82%|████████▏ | 182/221 [01:04<00:08,  4.67it/s][A
 83%|████████▎ | 183/221 [01:04<00:08,  4.72it/s][A
 83%|████████▎ | 184/221 [01:05<00:07,  4.75it/s][A
 84%|████████▍ | 186/221 [01:05<00:06,  5.15it/s][A
 85%|████████▍ | 187/221 [01:05<00:06,  5.55it/s][A
 85%|████████▌ | 188/221 [01:05<00:06,  5.43it/s][A
 86%|████████▌ | 189/221 [01:06<00:06,  5.02it/s][A
 86%|████████▌ | 190/221 [01:06<00:08,  3.82it/s][A
 86%|████████▋ | 191/221 [01:06<00:06,  4.54it/s][A
 87%|████████▋ | 192/221 [01:06<00:06,  4.43it/s][A
 88%|████████▊ | 194/221 [01:07<00:08,  3.15it/s][A09/17/2024 03:42:04 - INFO - __main__ -   current idx MVC6nKCrOgI.12 from finetune_area returns wrong image/video, use 25694 instead.

 88%|████████▊ | 195/221 [01:07<00:07,  3.66it/s][A
 89%|████████▉ | 197/221 [01:08<00:05,  4.56it/s][A
 90%|████████▉ | 198/221 [01:08<00:05,  4.42it/s][A
 90%|█████████ | 199/221 [01:08<00:04,  4.47it/s][A
 90%|█████████ | 200/221 [01:08<00:04,  4.38it/s][A[h264 @ 0x55863c7bd200] mmco: unref short failure
[h264 @ 0x55863c7bd200] mmco: unref short failure

 91%|█████████ | 201/221 [01:09<00:04,  4.36it/s][A
 91%|█████████▏| 202/221 [01:09<00:04,  4.52it/s][A
 92%|█████████▏| 203/221 [01:09<00:04,  4.40it/s][A
 92%|█████████▏| 204/221 [01:09<00:03,  4.98it/s][A
 93%|█████████▎| 206/221 [01:10<00:03,  4.58it/s][A
 94%|█████████▍| 208/221 [01:10<00:02,  5.83it/s][A
 95%|█████████▌| 210/221 [01:10<00:01,  7.03it/s][A
 95%|█████████▌| 211/221 [01:10<00:01,  5.18it/s][A
 96%|█████████▌| 212/221 [01:11<00:01,  4.85it/s][A
 97%|█████████▋| 214/221 [01:11<00:01,  4.29it/s][A
 97%|█████████▋| 215/221 [01:11<00:01,  4.17it/s][A
 98%|█████████▊| 216/221 [01:12<00:01,  4.07it/s][A
 98%|█████████▊| 217/221 [01:12<00:01,  3.55it/s][A
 99%|█████████▊| 218/221 [01:12<00:00,  3.40it/s][A
 99%|█████████▉| 219/221 [01:13<00:00,  3.17it/s][A
100%|█████████▉| 220/221 [01:17<00:01,  1.41s/it][A
100%|██████████| 221/221 [01:17<00:00,  1.05s/it][A100%|██████████| 221/221 [01:17<00:00,  2.85it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.40it/s][A
  1%|          | 2/221 [00:00<01:05,  3.32it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.33it/s][A[h264 @ 0x55771d679ac0] mmco: unref short failure

  2%|▏         | 4/221 [00:01<01:04,  3.36it/s][A[h264 @ 0x55771d679ac0] mmco: unref short failure
[h264 @ 0x55771d679ac0] mmco: unref short failure

  2%|▏         | 5/221 [00:01<01:04,  3.36it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.28it/s][A
  3%|▎         | 7/221 [00:02<01:05,  3.25it/s][A
  4%|▎         | 8/221 [00:02<01:10,  3.04it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.12it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.19it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.23it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.28it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.34it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.36it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.37it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.38it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.38it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.39it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.40it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.40it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.40it/s][A
 11%|█         | 24/221 [00:07<00:57,  3.40it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.40it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.41it/s][A
 12%|█▏        | 27/221 [00:08<00:56,  3.41it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.41it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.41it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.41it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.41it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.41it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.41it/s][A
 15%|█▌        | 34/221 [00:10<00:54,  3.41it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.41it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:11<00:53,  3.42it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:13<00:51,  3.42it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:16<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.70it/s][A
  1%|          | 2/221 [00:00<00:56,  3.90it/s][A
  1%|▏         | 3/221 [00:00<01:10,  3.10it/s][A
  2%|▏         | 4/221 [00:01<00:54,  3.99it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.25it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.24it/s][A
  4%|▎         | 8/221 [00:02<00:55,  3.84it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.66it/s][A
  5%|▍         | 10/221 [00:02<00:56,  3.74it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.59it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.70it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.37it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.89it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.92it/s][A
  7%|▋         | 16/221 [00:04<01:11,  2.86it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:05<01:25,  2.38it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.37it/s][A
 10%|▉         | 21/221 [00:06<00:50,  3.99it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.13it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.21it/s][A
 11%|█▏        | 25/221 [00:06<00:41,  4.69it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.14it/s][A
 12%|█▏        | 27/221 [00:07<00:44,  4.34it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.60it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.35it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:08<00:56,  3.35it/s][A
 14%|█▍        | 32/221 [00:09<00:53,  3.56it/s][A
 15%|█▍        | 33/221 [00:09<00:50,  3.75it/s][A
 15%|█▌        | 34/221 [00:09<00:52,  3.59it/s][A
 16%|█▌        | 35/221 [00:09<00:55,  3.35it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.30it/s][A
 17%|█▋        | 37/221 [00:10<00:52,  3.52it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.55it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.80it/s][A
 18%|█▊        | 40/221 [00:11<00:51,  3.49it/s][A
 19%|█▊        | 41/221 [00:11<00:48,  3.73it/s][A
 19%|█▉        | 42/221 [00:11<00:42,  4.19it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:12<00:49,  3.59it/s][A
 20%|██        | 45/221 [00:12<00:54,  3.25it/s][A
 21%|██        | 46/221 [00:13<00:49,  3.50it/s][A
 21%|██▏       | 47/221 [00:13<00:42,  4.14it/s][A
 22%|██▏       | 48/221 [00:13<00:35,  4.91it/s][A
 22%|██▏       | 49/221 [00:13<00:32,  5.34it/s][A
 23%|██▎       | 50/221 [00:13<00:35,  4.79it/s][A
 23%|██▎       | 51/221 [00:13<00:39,  4.33it/s][A
 24%|██▍       | 53/221 [00:14<00:32,  5.16it/s][A
 24%|██▍       | 54/221 [00:14<00:34,  4.88it/s][A
 25%|██▍       | 55/221 [00:14<00:36,  4.49it/s][A
 25%|██▌       | 56/221 [00:15<00:38,  4.31it/s][A
 26%|██▌       | 57/221 [00:15<00:40,  4.02it/s][A
 26%|██▌       | 58/221 [00:15<00:35,  4.54it/s][A
 27%|██▋       | 59/221 [00:15<00:37,  4.35it/s][A
 27%|██▋       | 60/221 [00:15<00:38,  4.20it/s][A
 28%|██▊       | 61/221 [00:16<00:37,  4.22it/s][A
 28%|██▊       | 62/221 [00:16<00:42,  3.71it/s][A
 29%|██▊       | 63/221 [00:16<00:36,  4.36it/s][A
 29%|██▉       | 64/221 [00:16<00:37,  4.23it/s][A
 29%|██▉       | 65/221 [00:17<00:37,  4.21it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.60it/s][A
 30%|███       | 67/221 [00:18<00:53,  2.86it/s][A
 31%|███       | 68/221 [00:18<00:48,  3.13it/s][A
 31%|███       | 69/221 [00:18<00:52,  2.92it/s][A
 32%|███▏      | 70/221 [00:18<00:43,  3.46it/s][A
 32%|███▏      | 71/221 [00:19<00:46,  3.22it/s][A
 33%|███▎      | 72/221 [00:19<00:49,  3.01it/s][A
 33%|███▎      | 73/221 [00:19<00:46,  3.22it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.34it/s][A
 34%|███▍      | 75/221 [00:20<00:44,  3.29it/s][A
 34%|███▍      | 76/221 [00:20<00:37,  3.82it/s][A
 35%|███▍      | 77/221 [00:20<00:34,  4.23it/s][A
 35%|███▌      | 78/221 [00:21<00:39,  3.63it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.70it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:21<00:35,  3.99it/s][A
 37%|███▋      | 82/221 [00:22<00:34,  4.08it/s][A
 38%|███▊      | 83/221 [00:22<00:29,  4.62it/s][A
 38%|███▊      | 84/221 [00:22<00:37,  3.66it/s][A
 38%|███▊      | 85/221 [00:22<00:36,  3.72it/s][A
 39%|███▉      | 86/221 [00:23<00:38,  3.55it/s][A
 39%|███▉      | 87/221 [00:23<00:47,  2.84it/s][A
 40%|███▉      | 88/221 [00:24<00:43,  3.05it/s][A
 40%|████      | 89/221 [00:24<00:42,  3.09it/s][A
 41%|████      | 90/221 [00:24<00:44,  2.97it/s][A
 41%|████      | 91/221 [00:24<00:39,  3.28it/s][A
 42%|████▏     | 92/221 [00:25<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:25<00:43,  2.93it/s][A
 43%|████▎     | 94/221 [00:25<00:39,  3.19it/s][A
 43%|████▎     | 95/221 [00:26<00:47,  2.65it/s][A
 43%|████▎     | 96/221 [00:26<00:45,  2.75it/s][A
 44%|████▍     | 97/221 [00:27<00:42,  2.94it/s][A
 44%|████▍     | 98/221 [00:27<00:40,  3.03it/s][A
 45%|████▍     | 99/221 [00:27<00:36,  3.31it/s][A
 45%|████▌     | 100/221 [00:27<00:31,  3.79it/s][A
 46%|████▌     | 101/221 [00:27<00:28,  4.22it/s][A
 46%|████▌     | 102/221 [00:28<00:33,  3.57it/s][A
 47%|████▋     | 103/221 [00:28<00:31,  3.77it/s][A
 48%|████▊     | 105/221 [00:28<00:27,  4.21it/s][A
 48%|████▊     | 106/221 [00:29<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:29<00:29,  3.82it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.33it/s][A
 49%|████▉     | 109/221 [00:30<00:26,  4.21it/s][A
 50%|████▉     | 110/221 [00:30<00:29,  3.76it/s][A
 50%|█████     | 111/221 [00:30<00:32,  3.39it/s][A
 51%|█████     | 112/221 [00:31<00:35,  3.09it/s][A
 51%|█████     | 113/221 [00:31<00:32,  3.29it/s][A
 52%|█████▏    | 115/221 [00:31<00:25,  4.14it/s][A
 52%|█████▏    | 116/221 [00:31<00:24,  4.35it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.11it/s][A
 53%|█████▎    | 118/221 [00:32<00:28,  3.58it/s][A
 54%|█████▍    | 119/221 [00:33<00:36,  2.82it/s][A
 54%|█████▍    | 120/221 [00:33<00:35,  2.83it/s][A
 55%|█████▍    | 121/221 [00:33<00:29,  3.45it/s][A
 55%|█████▌    | 122/221 [00:33<00:26,  3.75it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.86it/s][A
 56%|█████▌    | 124/221 [00:34<00:32,  3.02it/s][A
 57%|█████▋    | 125/221 [00:35<00:41,  2.30it/s][A
 57%|█████▋    | 126/221 [00:35<00:38,  2.48it/s][A
 57%|█████▋    | 127/221 [00:36<00:41,  2.24it/s][A
 58%|█████▊    | 128/221 [00:36<00:35,  2.62it/s][A
 58%|█████▊    | 129/221 [00:36<00:28,  3.24it/s][A
 59%|█████▉    | 130/221 [00:36<00:27,  3.34it/s][A
 59%|█████▉    | 131/221 [00:36<00:24,  3.73it/s][A
 60%|█████▉    | 132/221 [00:37<00:25,  3.45it/s][A
 60%|██████    | 133/221 [00:37<00:32,  2.70it/s][A
 61%|██████    | 134/221 [00:38<00:36,  2.40it/s][A
 62%|██████▏   | 136/221 [00:38<00:27,  3.06it/s][A
 62%|██████▏   | 137/221 [00:39<00:25,  3.29it/s][A
 62%|██████▏   | 138/221 [00:39<00:24,  3.35it/s][A
 63%|██████▎   | 139/221 [00:39<00:28,  2.92it/s][A
 63%|██████▎   | 140/221 [00:40<00:24,  3.25it/s][A
 64%|██████▍   | 141/221 [00:40<00:26,  3.07it/s][A
 64%|██████▍   | 142/221 [00:40<00:22,  3.44it/s][A
 65%|██████▍   | 143/221 [00:40<00:24,  3.15it/s][A
 65%|██████▌   | 144/221 [00:41<00:21,  3.58it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.44it/s][A
 66%|██████▌   | 146/221 [00:41<00:21,  3.47it/s][A
 67%|██████▋   | 147/221 [00:41<00:18,  3.92it/s][A
 67%|██████▋   | 148/221 [00:42<00:19,  3.84it/s][A
 67%|██████▋   | 149/221 [00:42<00:20,  3.51it/s][A
 68%|██████▊   | 150/221 [00:42<00:19,  3.71it/s][A
 68%|██████▊   | 151/221 [00:43<00:25,  2.71it/s][A
 69%|██████▉   | 152/221 [00:44<00:32,  2.12it/s][A
 69%|██████▉   | 153/221 [00:44<00:28,  2.43it/s][A
 70%|██████▉   | 154/221 [00:44<00:24,  2.79it/s][A
 70%|███████   | 155/221 [00:45<00:26,  2.46it/s][A
 71%|███████   | 156/221 [00:45<00:24,  2.71it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.79it/s][A
 71%|███████▏  | 158/221 [00:46<00:24,  2.59it/s][A
 72%|███████▏  | 159/221 [00:46<00:20,  3.02it/s][A
 72%|███████▏  | 160/221 [00:46<00:18,  3.22it/s][A
 73%|███████▎  | 161/221 [00:46<00:15,  3.88it/s][A
 73%|███████▎  | 162/221 [00:47<00:14,  4.07it/s][A
 74%|███████▍  | 163/221 [00:47<00:14,  4.03it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.58it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.46it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.50it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  4.09it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  3.91it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.53it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.10it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.67it/s][A
 78%|███████▊  | 172/221 [00:49<00:16,  2.90it/s][A
 78%|███████▊  | 173/221 [00:50<00:16,  2.94it/s][A
 79%|███████▊  | 174/221 [00:50<00:14,  3.34it/s][A
 79%|███████▉  | 175/221 [00:50<00:14,  3.13it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.53it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.62it/s][A
 81%|████████  | 178/221 [00:51<00:16,  2.68it/s][A
 81%|████████  | 179/221 [00:52<00:14,  2.83it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.37it/s][A
 82%|████████▏ | 182/221 [00:52<00:11,  3.38it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.26it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.41it/s][A
 84%|████████▎ | 185/221 [00:53<00:08,  4.09it/s][A
 84%|████████▍ | 186/221 [00:54<00:11,  3.08it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.47it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.31it/s][A
 86%|████████▌ | 189/221 [00:54<00:08,  3.58it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  2.84it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.59it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  3.92it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.20it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.71it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  3.84it/s][A
 89%|████████▊ | 196/221 [00:57<00:09,  2.65it/s][A
 89%|████████▉ | 197/221 [00:57<00:09,  2.56it/s][A
 90%|████████▉ | 198/221 [00:58<00:09,  2.43it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  2.86it/s][A
 90%|█████████ | 200/221 [00:58<00:07,  2.95it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.39it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.20it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.45it/s][A
 92%|█████████▏| 204/221 [00:59<00:05,  3.31it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.60it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.61it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  2.89it/s][A
 94%|█████████▍| 208/221 [01:01<00:04,  3.19it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.13it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.46it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.73it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.26it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.09it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.93it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.06it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.35it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.03it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.45it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.15it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'area_r1': 40.6, 'area_recall': '40.6/66.7/76.0', 'area_ravg': 61.1}
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'forward_r1': 37.8, 'forward_recall': '37.8/66.5/76.6', 'forward_ravg': 60.3}
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'area_video_r1': 39.3, 'area_video_recall': '39.3/67.0/77.6', 'area_video_ravg': 61.3}
09/17/2024 03:44:30 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 03:44:30 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'area_video_r1': 51.8, 'area_video_recall': '51.8/75.1/82.8', 'area_video_ravg': 69.9, 'area_video_back_r1': 49.2, 'area_video_back_recall': '49.2/73.2/81.2', 'area_video_back_ravg': 67.9}
09/17/2024 03:44:30 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 03:44:30 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'video_r1': 36.8, 'video_recall': '36.8/64.5/73.8', 'video_ravg': 58.3}
09/17/2024 03:44:30 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 03:44:30 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 03:44:30 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 599--===========

09/17/2024 03:44:30 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/75.3/82.2', 'video_ravg': 69.6}
09/17/2024 03:44:30 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 03:44:30 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 03:44:52 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.0088886059820652, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.196845293045044, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.0900583267211914, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2957921028137207}
 21%|██        | 600/2910 [3:48:56<85:37:02, 133.43s/it] 21%|██        | 601/2910 [3:49:00<60:39:02, 94.56s/it] [h264 @ 0x558632fde600] mmco: unref short failure
 21%|██        | 602/2910 [3:49:04<43:14:20, 67.44s/it] 21%|██        | 603/2910 [3:49:08<31:06:54, 48.55s/it] 21%|██        | 604/2910 [3:49:13<22:43:27, 35.48s/it][h264 @ 0x5577215ff180] mmco: unref short failure
 21%|██        | 605/2910 [3:49:19<16:54:53, 26.42s/it] 21%|██        | 606/2910 [3:49:24<12:57:25, 20.25s/it][h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure
[h264 @ 0x5556c86d0e40] mmco: unref short failure
 21%|██        | 607/2910 [3:49:31<10:17:26, 16.09s/it][h264 @ 0x5577198ba5c0] mmco: unref short failure
 21%|██        | 608/2910 [3:49:37<8:27:13, 13.22s/it] [h264 @ 0x5556cbf1e300] mmco: unref short failure
 21%|██        | 609/2910 [3:49:45<7:17:51, 11.42s/it][h264 @ 0x5556c6d77800] mmco: unref short failure
[h264 @ 0x558642865040] mmco: unref short failure
[h264 @ 0x558642865040] mmco: unref short failure
 21%|██        | 610/2910 [3:49:52<6:28:16, 10.13s/it][h264 @ 0x557727f0ed80] mmco: unref short failure
[h264 @ 0x557727f0ed80] mmco: unref short failure
 21%|██        | 611/2910 [3:49:58<5:49:34,  9.12s/it][h264 @ 0x558638718a40] mmco: unref short failure
[h264 @ 0x558638718a40] mmco: unref short failure
 21%|██        | 612/2910 [3:50:05<5:21:05,  8.38s/it] 21%|██        | 613/2910 [3:50:13<5:10:08,  8.10s/it][h264 @ 0x5556c9335fc0] mmco: unref short failure
[h264 @ 0x5556c9335fc0] mmco: unref short failure
[h264 @ 0x5556c9335fc0] mmco: unref short failure
[h264 @ 0x56354af12640] mmco: unref short failure
 21%|██        | 614/2910 [3:50:19<4:50:37,  7.59s/it][h264 @ 0x5556cda864c0] mmco: unref short failure
[h264 @ 0x5556cda864c0] mmco: unref short failure
[h264 @ 0x55863f2e4e00] mmco: unref short failure
 21%|██        | 615/2910 [3:50:26<4:46:47,  7.50s/it][h264 @ 0x56354b772a40] mmco: unref short failure
[h264 @ 0x56354b772a40] mmco: unref short failure
[h264 @ 0x5556c6147780] mmco: unref short failure
[h264 @ 0x557719c0e640] mmco: unref short failure
[h264 @ 0x557719c0e640] mmco: unref short failure
09/17/2024 03:46:36 - INFO - __main__ -   current idx S4W-P5aCWJs.99 from finetune_area returns wrong image/video, use 18278 instead.
[h264 @ 0x55568bd9a900] mmco: unref short failure
[h264 @ 0x5556cc443440] mmco: unref short failure
[h264 @ 0x5556cc443440] mmco: unref short failure
[h264 @ 0x5556cc443440] mmco: unref short failure
[h264 @ 0x5556cc443440] mmco: unref short failure
[h264 @ 0x56354e128cc0] mmco: unref short failure
[h264 @ 0x5556c4903180] mmco: unref short failure
[h264 @ 0x5556c4903180] mmco: unref short failure
[h264 @ 0x5556c4903180] mmco: unref short failure
[h264 @ 0x5556c4903180] mmco: unref short failure
[h264 @ 0x5556d7a75880] mmco: unref short failure
[h264 @ 0x56354b992640] mmco: unref short failure
[h264 @ 0x56354b992640] mmco: unref short failure
[h264 @ 0x5556ce019f80] mmco: unref short failure
[h264 @ 0x5556d3cbdf40] mmco: unref short failure
 21%|██        | 616/2910 [3:51:06<10:54:14, 17.11s/it][h264 @ 0x55771d1fbcc0] mmco: unref short failure
[h264 @ 0x55771d1fbcc0] mmco: unref short failure
 21%|██        | 617/2910 [3:51:15<9:17:35, 14.59s/it] [h264 @ 0x56354b772140] mmco: unref short failure
[h264 @ 0x56354b772140] mmco: unref short failure
[h264 @ 0x5586392407c0] mmco: unref short failure
[h264 @ 0x55568d4f7000] mmco: unref short failure
[h264 @ 0x55568d4f7000] mmco: unref short failure
 21%|██        | 618/2910 [3:51:29<9:18:22, 14.62s/it][h264 @ 0x5556d1557680] mmco: unref short failure
[h264 @ 0x5556d1557680] mmco: unref short failure
[h264 @ 0x5556d1557680] mmco: unref short failure
[h264 @ 0x5556d1557680] mmco: unref short failure
[h264 @ 0x563540e278c0] mmco: unref short failure
[h264 @ 0x563540e278c0] mmco: unref short failure
[h264 @ 0x563540e278c0] mmco: unref short failure
[h264 @ 0x563540e278c0] mmco: unref short failure
 21%|██▏       | 619/2910 [3:51:39<8:23:34, 13.19s/it][h264 @ 0x557723554440] mmco: unref short failure
[h264 @ 0x557723554440] mmco: unref short failure
[h264 @ 0x55771b6b5040] mmco: unref short failure
 21%|██▏       | 620/2910 [3:51:52<8:23:34, 13.19s/it] 21%|██▏       | 621/2910 [3:52:01<7:28:18, 11.75s/it]09/17/2024 03:48:00 - INFO - __main__ -   current idx 3Dl8wLo1W6E.35 from finetune_area returns wrong image/video, use 143646 instead.
 21%|██▏       | 622/2910 [3:52:07<6:28:49, 10.20s/it][h264 @ 0x563546a7f400] mmco: unref short failure
 21%|██▏       | 623/2910 [3:52:14<5:47:13,  9.11s/it][h264 @ 0x5635488ab3c0] mmco: unref short failure
[h264 @ 0x5635488ab3c0] mmco: unref short failure
[h264 @ 0x5577207806c0] mmco: unref short failure
[h264 @ 0x5577207806c0] mmco: unref short failure
[h264 @ 0x56354de7fd80] mmco: unref short failure
[h264 @ 0x557724d55c00] mmco: unref short failure
[h264 @ 0x55863616f500] mmco: unref short failure
[h264 @ 0x55863616f500] mmco: unref short failure
[h264 @ 0x55863616f500] mmco: unref short failure
[h264 @ 0x563552b19140] mmco: unref short failure
[h264 @ 0x5586358cdc80] mmco: unref short failure
[h264 @ 0x563541c71a00] mmco: unref short failure
[h264 @ 0x563541c71a00] mmco: unref short failure
09/17/2024 03:48:44 - INFO - __main__ -   current idx EAcu0rdv1mY.94 from finetune_area returns wrong image/video, use 77101 instead.
[h264 @ 0x5586337b4800] mmco: unref short failure
[h264 @ 0x5586337b4800] mmco: unref short failure
[h264 @ 0x5635487f19c0] mmco: unref short failure
[h264 @ 0x558642684000] mmco: unref short failure
[h264 @ 0x558642684000] mmco: unref short failure
[h264 @ 0x55771b9e25c0] mmco: unref short failure
[h264 @ 0x5556d0238480] mmco: unref short failure
[h264 @ 0x5586364019c0] mmco: unref short failure
[h264 @ 0x5586364019c0] mmco: unref short failure
[h264 @ 0x55771a064500] mmco: unref short failure
[h264 @ 0x55771a064500] mmco: unref short failure
[h264 @ 0x557721e71040] mmco: unref short failure
[h264 @ 0x557721961a40] mmco: unref short failure
[h264 @ 0x557721961a40] mmco: unref short failure
[h264 @ 0x563548727c00] mmco: unref short failure
 21%|██▏       | 624/2910 [3:53:29<18:20:53, 28.89s/it][h264 @ 0x5556cd063b00] mmco: unref short failure
[h264 @ 0x563544446300] mmco: unref short failure
[h264 @ 0x563550ea5280] mmco: unref short failure
 21%|██▏       | 625/2910 [3:53:49<16:46:05, 26.42s/it][h264 @ 0x563556c032c0] mmco: unref short failure
[h264 @ 0x563556c032c0] mmco: unref short failure
 22%|██▏       | 626/2910 [3:53:58<13:24:18, 21.13s/it] 22%|██▏       | 627/2910 [3:54:05<10:37:30, 16.75s/it]09/17/2024 03:50:06 - INFO - __main__ -   current idx QzpF1yDPHf0.29 from finetune_area returns wrong image/video, use 96137 instead.
[h264 @ 0x5556d2069540] mmco: unref short failure
[h264 @ 0x5556d2069540] mmco: unref short failure
 22%|██▏       | 628/2910 [3:54:18<9:56:13, 15.68s/it] [h264 @ 0x55771cfd6340] mmco: unref short failure
[h264 @ 0x55771cfd6340] mmco: unref short failure
[h264 @ 0x5556d5fd9c40] mmco: unref short failure
[h264 @ 0x55771a339880] mmco: unref short failure
[h264 @ 0x55771a339880] mmco: unref short failure
[h264 @ 0x5556d4b73780] mmco: unref short failure
 22%|██▏       | 629/2910 [3:54:30<9:17:40, 14.67s/it][h264 @ 0x56354a39d280] mmco: unref short failure
[h264 @ 0x5556d69aa580] mmco: unref short failure
 22%|██▏       | 630/2910 [3:54:37<7:41:31, 12.15s/it][h264 @ 0x55771b2ad580] mmco: unref short failure
 22%|██▏       | 631/2910 [3:54:45<6:53:53, 10.90s/it][h264 @ 0x557721569e00] mmco: unref short failure
09/17/2024 03:50:44 - INFO - __main__ -   current idx g_6rVdVgpd0.43 from finetune_area returns wrong image/video, use 48645 instead.
[h264 @ 0x563557207100] mmco: unref short failure
[h264 @ 0x563557207100] mmco: unref short failure
[h264 @ 0x557717c86d80] mmco: unref short failure
[h264 @ 0x557717c86d80] mmco: unref short failure
[h264 @ 0x558640c854c0] mmco: unref short failure
[h264 @ 0x5576e0fd5300] mmco: unref short failure
[h264 @ 0x5576e0fd5300] mmco: unref short failure
[h264 @ 0x5576e0fd5300] mmco: unref short failure
[h264 @ 0x5576e0fd5300] mmco: unref short failure
[h264 @ 0x5635543c2c80] mmco: unref short failure
09/17/2024 03:51:32 - INFO - __main__ -   current idx O_qInVZBZaw.18 from finetune_area returns wrong image/video, use 66880 instead.
[h264 @ 0x563550995700] mmco: unref short failure
[h264 @ 0x563550995700] mmco: unref short failure
[h264 @ 0x5635416c8780] mmco: unref short failure
[h264 @ 0x55771f4f8800] mmco: unref short failure
09/17/2024 03:51:48 - INFO - __main__ -   current idx eB3AXJxM634.13 from finetune_area returns wrong image/video, use 33993 instead.
[h264 @ 0x55863f929900] mmco: unref short failure
[h264 @ 0x5556cf18eb80] mmco: unref short failure
[h264 @ 0x5556c51a8280] mmco: unref short failure
 22%|██▏       | 632/2910 [3:56:00<19:07:31, 30.22s/it][h264 @ 0x55863de3c880] mmco: unref short failure
[h264 @ 0x55863de3c880] mmco: unref short failure
[h264 @ 0x563540928e00] mmco: unref short failure
[h264 @ 0x563540928e00] mmco: unref short failure
[h264 @ 0x563540928e00] mmco: unref short failure
 22%|██▏       | 633/2910 [3:56:18<16:53:52, 26.72s/it][h264 @ 0x56354c2b3c40] mmco: unref short failure
[h264 @ 0x56354c2b3c40] mmco: unref short failure
 22%|██▏       | 634/2910 [3:56:25<13:04:50, 20.69s/it][h264 @ 0x56355098a140] mmco: unref short failure
[h264 @ 0x55863d83ab80] mmco: unref short failure
[h264 @ 0x55863d83ab80] mmco: unref short failure
 22%|██▏       | 635/2910 [3:56:32<10:23:25, 16.44s/it][h264 @ 0x558639240100] mmco: unref short failure
 22%|██▏       | 636/2910 [3:56:44<9:34:43, 15.16s/it] [h264 @ 0x563542627340] mmco: unref short failure
[h264 @ 0x563542627340] mmco: unref short failure
[h264 @ 0x5635540caf40] mmco: unref short failure
[h264 @ 0x5635540caf40] mmco: unref short failure
 22%|██▏       | 637/2910 [3:56:57<9:15:28, 14.66s/it][h264 @ 0x563544d39c40] mmco: unref short failure
 22%|██▏       | 638/2910 [3:57:04<7:49:04, 12.39s/it][h264 @ 0x5576dee47800] mmco: unref short failure
 22%|██▏       | 639/2910 [3:57:17<7:50:58, 12.44s/it][h264 @ 0x5556c528ebc0] mmco: unref short failure
[h264 @ 0x5556c528ebc0] mmco: unref short failure
[h264 @ 0x5556d0f706c0] mmco: unref short failure
[h264 @ 0x5556d0f706c0] mmco: unref short failure
[h264 @ 0x55863a6eec80] mmco: unref short failure
[h264 @ 0x55863a6eec80] mmco: unref short failure
[h264 @ 0x56355140da00] mmco: unref short failure
[h264 @ 0x56355140da00] mmco: unref short failure
[h264 @ 0x5556cad56fc0] mmco: unref short failure
[h264 @ 0x5556cad56fc0] mmco: unref short failure
[h264 @ 0x563547c79e00] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x557719393400] mmco: unref short failure
[h264 @ 0x5556cad40180] mmco: unref short failure
[h264 @ 0x5556cad40180] mmco: unref short failure
[h264 @ 0x563549ef37c0] mmco: unref short failure
[h264 @ 0x563549ef37c0] mmco: unref short failure
[h264 @ 0x563549ef37c0] mmco: unref short failure
[h264 @ 0x56354cbc9d80] mmco: unref short failure
[h264 @ 0x56354cbc9d80] mmco: unref short failure
[h264 @ 0x56354ebe2140] mmco: unref short failure
[h264 @ 0x558634052f80] mmco: unref short failure
[h264 @ 0x563544d39100] mmco: unref short failure
[h264 @ 0x563544d39100] mmco: unref short failure
[h264 @ 0x563544d39100] mmco: unref short failure
[h264 @ 0x55863510b700] mmco: unref short failure
[h264 @ 0x55863510b700] mmco: unref short failure
09/17/2024 03:54:12 - INFO - __main__ -   current idx TjXtZRjeWIo.2 from finetune_area returns wrong image/video, use 118793 instead.
[h264 @ 0x563559622c80] mmco: unref short failure
 22%|██▏       | 640/2910 [3:58:24<18:07:02, 28.73s/it][h264 @ 0x5635434e7200] mmco: unref short failure
[h264 @ 0x55771e2749c0] mmco: unref short failure
[h264 @ 0x55771e2749c0] mmco: unref short failure
[h264 @ 0x55771e2749c0] mmco: unref short failure
[h264 @ 0x563551c916c0] mmco: unref short failure
[h264 @ 0x563551c916c0] mmco: unref short failure
 22%|██▏       | 641/2910 [3:58:45<16:41:41, 26.49s/it]09/17/2024 03:54:44 - INFO - __main__ -   current idx 7i_0A4oZMd4.75 from finetune_area returns wrong image/video, use 44474 instead.
 22%|██▏       | 642/2910 [3:58:51<12:51:15, 20.40s/it][h264 @ 0x5556d78a6100] mmco: unref short failure
[h264 @ 0x5556d78a6100] mmco: unref short failure
[h264 @ 0x5635520d8b80] mmco: unref short failure
[h264 @ 0x5635520d8b80] mmco: unref short failure
[h264 @ 0x5635520d8b80] mmco: unref short failure
[h264 @ 0x5635520d8b80] mmco: unref short failure
 22%|██▏       | 643/2910 [3:58:58<10:15:04, 16.28s/it][h264 @ 0x5556d37d7980] mmco: unref short failure
09/17/2024 03:55:03 - INFO - __main__ -   current idx 1o1hMc8PbOU.62 from finetune_area returns wrong image/video, use 91762 instead.
[h264 @ 0x56354ab7a9c0] mmco: unref short failure
[h264 @ 0x56354ab7a9c0] mmco: unref short failure
[h264 @ 0x56354ab7a9c0] mmco: unref short failure
[h264 @ 0x56354ab7a9c0] mmco: unref short failure
 22%|██▏       | 644/2910 [3:59:15<10:29:28, 16.67s/it][h264 @ 0x55771ce6f540] mmco: unref short failure
 22%|██▏       | 645/2910 [3:59:25<9:09:19, 14.55s/it] [h264 @ 0x55772ca095c0] mmco: unref short failure
 22%|██▏       | 646/2910 [3:59:32<7:49:50, 12.45s/it][h264 @ 0x56354e91ca00] mmco: unref short failure
[h264 @ 0x56354e91ca00] mmco: unref short failure
 22%|██▏       | 647/2910 [3:59:48<8:27:35, 13.46s/it][h264 @ 0x5635595881c0] mmco: unref short failure
[h264 @ 0x55771ce67a00] mmco: unref short failure
[h264 @ 0x55771ce67a00] mmco: unref short failure
[h264 @ 0x55771ce6fc00] mmco: unref short failure
[h264 @ 0x55772534e840] mmco: unref short failure
[h264 @ 0x55772534e840] mmco: unref short failure
[h264 @ 0x55772534e840] mmco: unref short failure
[h264 @ 0x55772534e840] mmco: unref short failure
[h264 @ 0x5556c456b500] mmco: unref short failure
[h264 @ 0x557729c84800] mmco: unref short failure
[h264 @ 0x557729c84800] mmco: unref short failure
[h264 @ 0x558635c20f40] mmco: unref short failure
[h264 @ 0x558635c20f40] mmco: unref short failure
[h264 @ 0x558635c20f40] mmco: unref short failure
[h264 @ 0x558635c20f40] mmco: unref short failure
[h264 @ 0x5556d5e68000] mmco: unref short failure
[h264 @ 0x5556d5e68000] mmco: unref short failure
[h264 @ 0x5556d5e68000] mmco: unref short failure
[h264 @ 0x5556d5e68000] mmco: unref short failure
[h264 @ 0x5556ce282ec0] mmco: unref short failure
[h264 @ 0x5556ce282ec0] mmco: unref short failure
 22%|██▏       | 648/2910 [4:00:55<18:28:48, 29.41s/it][h264 @ 0x5556d45db980] mmco: unref short failure
 22%|██▏       | 649/2910 [4:01:14<16:37:14, 26.46s/it]09/17/2024 03:57:13 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 03:57:13 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x557718418200] mmco: unref short failure
[h264 @ 0x557718418200] mmco: unref short failure
[h264 @ 0x563540921b00] mmco: unref short failure
[h264 @ 0x563540921b00] mmco: unref short failure
[h264 @ 0x563540921b00] mmco: unref short failure
[h264 @ 0x563540921b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5635480979c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563548295dc0] mmco: unref short failure
[h264 @ 0x5576df80e280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557721a9bd00] mmco: unref short failure
[h264 @ 0x557721a9bd00] mmco: unref short failure
[h264 @ 0x55568ccaef80] mmco: unref short failure
[h264 @ 0x55771e13fc40] mmco: unref short failure
[h264 @ 0x56354b004b00] mmco: unref short failure
[h264 @ 0x56354b004b00] mmco: unref short failure
[h264 @ 0x55772530e100] mmco: unref short failure
09/17/2024 03:58:33 - INFO - __main__ -   current idx SQ8PD29d_RE.6 from finetune_area returns wrong image/video, use 136394 instead.
09/17/2024 03:58:38 - INFO - __main__ -   current idx 2xMe1diCHmI.53 from finetune_area returns wrong image/video, use 19642 instead.
[h264 @ 0x5556d29c3fc0] mmco: unref short failure
[h264 @ 0x5556d29c3fc0] mmco: unref short failure
[h264 @ 0x55864c92f0c0] mmco: unref short failure
[h264 @ 0x55864c92f0c0] mmco: unref short failure
[h264 @ 0x55864c92f0c0] mmco: unref short failure
[h264 @ 0x55864c92f0c0] mmco: unref short failure
[h264 @ 0x55568cc0ec40] mmco: unref short failure
[h264 @ 0x55568c554300] mmco: unref short failure
[h264 @ 0x5635553dcc40] mmco: unref short failure
[h264 @ 0x563547fd5740] mmco: unref short failure
[h264 @ 0x563547fd5740] mmco: unref short failure
[h264 @ 0x558649063a40] mmco: unref short failure
[h264 @ 0x5556dcff3980] mmco: unref short failure
[h264 @ 0x5556dcff3980] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:10,  1.68it/s][A
  1%|          | 2/221 [00:01<02:32,  1.44it/s][A
  1%|▏         | 3/221 [00:01<01:47,  2.03it/s][A
  2%|▏         | 4/221 [00:01<01:16,  2.85it/s][A
  2%|▏         | 5/221 [00:01<00:56,  3.82it/s][A
  3%|▎         | 6/221 [00:01<00:44,  4.83it/s][A
  3%|▎         | 7/221 [00:02<00:47,  4.51it/s][A
  4%|▎         | 8/221 [00:02<00:58,  3.65it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.85it/s][A
  5%|▍         | 10/221 [00:03<01:17,  2.73it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.10it/s][A
  5%|▌         | 12/221 [00:03<01:08,  3.05it/s][A
  6%|▌         | 13/221 [00:04<00:57,  3.63it/s][A
  6%|▋         | 14/221 [00:04<01:09,  3.00it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.22it/s][A
  7%|▋         | 16/221 [00:05<01:04,  3.19it/s][A
  8%|▊         | 17/221 [00:05<00:59,  3.40it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.34it/s][A
  9%|▊         | 19/221 [00:05<00:51,  3.89it/s][A
  9%|▉         | 20/221 [00:06<00:44,  4.47it/s][A
 10%|▉         | 21/221 [00:06<00:44,  4.50it/s][A
 10%|▉         | 22/221 [00:06<00:49,  4.04it/s][A
 10%|█         | 23/221 [00:06<00:40,  4.84it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.09it/s][A
 11%|█▏        | 25/221 [00:07<00:41,  4.72it/s][A
 12%|█▏        | 26/221 [00:07<00:45,  4.28it/s][A
 12%|█▏        | 27/221 [00:07<00:37,  5.14it/s][A
 13%|█▎        | 28/221 [00:07<00:54,  3.56it/s][A
 13%|█▎        | 29/221 [00:08<00:44,  4.36it/s][A
 14%|█▎        | 30/221 [00:08<00:43,  4.38it/s][A
 14%|█▍        | 31/221 [00:08<00:43,  4.39it/s][A
 15%|█▍        | 33/221 [00:08<00:38,  4.84it/s][A
 16%|█▌        | 35/221 [00:09<00:32,  5.72it/s][A
 16%|█▋        | 36/221 [00:09<00:40,  4.55it/s][A
 17%|█▋        | 37/221 [00:10<01:09,  2.65it/s][A
 17%|█▋        | 38/221 [00:10<01:05,  2.78it/s][A
 18%|█▊        | 39/221 [00:10<00:54,  3.33it/s][A
 18%|█▊        | 40/221 [00:11<00:55,  3.27it/s][A
 19%|█▊        | 41/221 [00:11<00:48,  3.69it/s][A
 19%|█▉        | 42/221 [00:11<01:04,  2.77it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:12<00:43,  4.03it/s][A
 20%|██        | 45/221 [00:13<01:34,  1.86it/s][A
 21%|██        | 46/221 [00:14<01:42,  1.71it/s][A
 21%|██▏       | 47/221 [00:15<02:18,  1.26it/s][A
 22%|██▏       | 48/221 [00:15<01:42,  1.69it/s][A
 22%|██▏       | 49/221 [00:15<01:22,  2.08it/s][A
 23%|██▎       | 50/221 [00:15<01:03,  2.69it/s][A
 23%|██▎       | 51/221 [00:16<00:53,  3.18it/s][A
 24%|██▎       | 52/221 [00:16<00:44,  3.76it/s][A
 24%|██▍       | 53/221 [00:16<00:38,  4.37it/s][A[h264 @ 0x55771cf01b00] mmco: unref short failure
[h264 @ 0x55771cf01b00] mmco: unref short failure
[h264 @ 0x55771cf01b00] mmco: unref short failure
[h264 @ 0x55771cf01b00] mmco: unref short failure
[h264 @ 0x5635543f6580] mmco: unref short failure
[h264 @ 0x5635543f6580] mmco: unref short failure
[h264 @ 0x55772c893dc0] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<03:23,  1.22s/it][A
 25%|██▍       | 55/221 [00:20<02:43,  1.01it/s][A
 25%|██▌       | 56/221 [00:20<02:03,  1.33it/s][A
 26%|██▌       | 57/221 [00:20<01:39,  1.65it/s][A
 26%|██▌       | 58/221 [00:20<01:16,  2.13it/s][A
 27%|██▋       | 59/221 [00:21<01:00,  2.69it/s][A[h264 @ 0x5556d5704280] mmco: unref short failure

 27%|██▋       | 60/221 [00:21<01:10,  2.28it/s][A
 28%|██▊       | 61/221 [00:21<01:01,  2.59it/s][A
 28%|██▊       | 62/221 [00:22<00:54,  2.92it/s][A
 29%|██▊       | 63/221 [00:22<00:46,  3.43it/s][A
 29%|██▉       | 64/221 [00:22<00:41,  3.78it/s][A
 29%|██▉       | 65/221 [00:22<00:42,  3.70it/s][A[h264 @ 0x5586363b8340] mmco: unref short failure

 30%|██▉       | 66/221 [00:23<01:11,  2.17it/s][A
 30%|███       | 67/221 [00:24<01:16,  2.01it/s][A
 31%|███       | 68/221 [00:24<01:01,  2.47it/s][A
 31%|███       | 69/221 [00:25<01:14,  2.04it/s][A
 32%|███▏      | 70/221 [00:25<00:59,  2.56it/s][A
 32%|███▏      | 71/221 [00:28<03:07,  1.25s/it][A
 33%|███▎      | 72/221 [00:28<02:25,  1.02it/s][A
 33%|███▎      | 73/221 [00:29<02:00,  1.23it/s][A
 33%|███▎      | 74/221 [00:29<01:34,  1.56it/s][A
 34%|███▍      | 75/221 [00:30<01:23,  1.76it/s][A
 34%|███▍      | 76/221 [00:30<01:04,  2.24it/s][A
 35%|███▍      | 77/221 [00:30<01:03,  2.26it/s][A
 35%|███▌      | 78/221 [00:30<00:55,  2.55it/s][A
 36%|███▌      | 79/221 [00:31<01:00,  2.36it/s][A
 36%|███▌      | 80/221 [00:31<00:51,  2.76it/s][A
 37%|███▋      | 81/221 [00:31<00:47,  2.94it/s][A
 37%|███▋      | 82/221 [00:32<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:32<00:35,  3.85it/s][A
 38%|███▊      | 84/221 [00:32<00:32,  4.23it/s][A
 38%|███▊      | 85/221 [00:32<00:27,  4.99it/s][A
 39%|███▉      | 86/221 [00:32<00:29,  4.60it/s][A
 39%|███▉      | 87/221 [00:33<00:45,  2.93it/s][A
 40%|███▉      | 88/221 [00:33<00:52,  2.56it/s][A[h264 @ 0x55863b677100] mmco: unref short failure

 40%|████      | 89/221 [00:35<01:24,  1.56it/s][A
 41%|████      | 90/221 [00:35<01:09,  1.89it/s][A
 41%|████      | 91/221 [00:35<00:52,  2.46it/s][A[h264 @ 0x558642c68f00] mmco: unref short failure

 42%|████▏     | 92/221 [00:35<00:44,  2.88it/s][A[h264 @ 0x558642c68f00] mmco: unref short failure
[h264 @ 0x56354bced700] mmco: unref short failure

 42%|████▏     | 93/221 [00:36<00:49,  2.59it/s][A
 43%|████▎     | 94/221 [00:36<00:56,  2.26it/s][A
 43%|████▎     | 95/221 [00:37<00:44,  2.81it/s][A
 43%|████▎     | 96/221 [00:37<00:45,  2.75it/s][A
 44%|████▍     | 97/221 [00:37<00:39,  3.13it/s][A
 44%|████▍     | 98/221 [00:37<00:39,  3.15it/s][A
 45%|████▍     | 99/221 [00:38<00:32,  3.71it/s][A[h264 @ 0x55772c8c99c0] mmco: unref short failure

 45%|████▌     | 100/221 [00:38<00:31,  3.84it/s][A
 46%|████▌     | 101/221 [00:38<00:26,  4.58it/s][A
 46%|████▌     | 102/221 [00:38<00:35,  3.36it/s][A
 47%|████▋     | 103/221 [00:39<00:31,  3.75it/s][A
 47%|████▋     | 104/221 [00:39<00:29,  4.00it/s][A
 48%|████▊     | 105/221 [00:39<00:34,  3.40it/s][A
 48%|████▊     | 106/221 [00:40<00:56,  2.04it/s][A
 48%|████▊     | 107/221 [00:40<00:44,  2.58it/s][A
 49%|████▉     | 108/221 [00:41<00:37,  3.03it/s][A
 49%|████▉     | 109/221 [00:41<00:34,  3.26it/s][A
 50%|████▉     | 110/221 [00:41<00:33,  3.33it/s][A
 50%|█████     | 111/221 [00:42<00:39,  2.82it/s][A
 51%|█████     | 112/221 [00:42<00:33,  3.22it/s][A
 51%|█████     | 113/221 [00:42<00:32,  3.34it/s][A
 52%|█████▏    | 115/221 [00:42<00:21,  4.90it/s][A
 52%|█████▏    | 116/221 [00:47<02:19,  1.33s/it][A
 53%|█████▎    | 117/221 [00:47<01:50,  1.06s/it][A
 53%|█████▎    | 118/221 [00:48<01:26,  1.20it/s][A
 54%|█████▍    | 119/221 [00:48<01:09,  1.46it/s][A
 54%|█████▍    | 120/221 [00:48<00:59,  1.69it/s][A
 55%|█████▍    | 121/221 [00:48<00:47,  2.11it/s][A
 55%|█████▌    | 122/221 [00:49<00:39,  2.53it/s][A
 56%|█████▌    | 123/221 [00:49<00:33,  2.94it/s][A
 56%|█████▌    | 124/221 [00:49<00:32,  2.97it/s][A
 57%|█████▋    | 125/221 [00:49<00:33,  2.91it/s][A
 57%|█████▋    | 126/221 [00:50<00:35,  2.70it/s][A
 57%|█████▋    | 127/221 [00:50<00:40,  2.29it/s][A[h264 @ 0x55772abd8580] mmco: unref short failure
[h264 @ 0x55772abd8580] mmco: unref short failure

 58%|█████▊    | 128/221 [00:51<00:39,  2.35it/s][A[h264 @ 0x56354a187c40] mmco: unref short failure
[h264 @ 0x56354a187c40] mmco: unref short failure

 58%|█████▊    | 129/221 [00:51<00:34,  2.65it/s][A
 59%|█████▉    | 130/221 [00:51<00:30,  3.03it/s][A
 59%|█████▉    | 131/221 [00:51<00:24,  3.66it/s][A
 60%|█████▉    | 132/221 [00:52<00:23,  3.82it/s][A
 60%|██████    | 133/221 [00:52<00:27,  3.24it/s][A
 61%|██████    | 134/221 [00:52<00:27,  3.15it/s][A
 61%|██████    | 135/221 [00:53<00:34,  2.46it/s][A
 62%|██████▏   | 136/221 [00:53<00:34,  2.47it/s][A
 62%|██████▏   | 137/221 [00:54<00:29,  2.84it/s][A
 62%|██████▏   | 138/221 [00:54<00:28,  2.90it/s][A
 63%|██████▎   | 139/221 [00:55<00:35,  2.33it/s][A
 63%|██████▎   | 140/221 [00:55<00:33,  2.44it/s][A
 64%|██████▍   | 141/221 [00:55<00:28,  2.82it/s][A
 64%|██████▍   | 142/221 [00:56<00:28,  2.73it/s][A
 65%|██████▍   | 143/221 [00:56<00:34,  2.28it/s][A
 65%|██████▌   | 144/221 [00:57<00:30,  2.51it/s][A
 66%|██████▌   | 146/221 [00:57<00:19,  3.88it/s][A
 67%|██████▋   | 147/221 [00:57<00:18,  4.07it/s][A
 67%|██████▋   | 148/221 [00:57<00:19,  3.83it/s][A
 67%|██████▋   | 149/221 [00:57<00:16,  4.24it/s][A
 68%|██████▊   | 150/221 [00:58<00:16,  4.20it/s][A
 68%|██████▊   | 151/221 [00:59<00:31,  2.23it/s][A[h264 @ 0x55863cc8ac40] mmco: unref short failure

 69%|██████▉   | 152/221 [01:00<00:40,  1.72it/s][A
 69%|██████▉   | 153/221 [01:00<00:36,  1.88it/s][A
 70%|██████▉   | 154/221 [01:00<00:34,  1.95it/s][A
 70%|███████   | 155/221 [01:01<00:27,  2.36it/s][A
 71%|███████   | 156/221 [01:01<00:23,  2.73it/s][A
 71%|███████   | 157/221 [01:02<00:43,  1.46it/s][A
 71%|███████▏  | 158/221 [01:03<00:35,  1.77it/s][A
 72%|███████▏  | 159/221 [01:03<00:27,  2.22it/s][A[h264 @ 0x558639cdb200] mmco: unref short failure
[h264 @ 0x558639cdb200] mmco: unref short failure

 72%|███████▏  | 160/221 [01:03<00:24,  2.47it/s][A
 73%|███████▎  | 161/221 [01:03<00:19,  3.15it/s][A
 73%|███████▎  | 162/221 [01:04<00:20,  2.84it/s][A
 74%|███████▍  | 163/221 [01:04<00:20,  2.88it/s][A
 74%|███████▍  | 164/221 [01:04<00:17,  3.18it/s][A
 75%|███████▍  | 165/221 [01:04<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [01:05<00:16,  3.34it/s][A
 76%|███████▌  | 167/221 [01:05<00:13,  3.93it/s][A
 76%|███████▌  | 168/221 [01:06<00:34,  1.52it/s][A
 76%|███████▋  | 169/221 [01:07<00:26,  1.93it/s][A
 77%|███████▋  | 170/221 [01:07<00:23,  2.15it/s][A
 77%|███████▋  | 171/221 [01:07<00:21,  2.37it/s][A
 78%|███████▊  | 172/221 [01:08<00:18,  2.64it/s][A
 78%|███████▊  | 173/221 [01:08<00:15,  3.06it/s][A
 79%|███████▉  | 175/221 [01:08<00:12,  3.64it/s][A
 80%|███████▉  | 176/221 [01:09<00:12,  3.52it/s][A
 80%|████████  | 177/221 [01:09<00:11,  3.70it/s][A
 81%|████████  | 178/221 [01:10<00:17,  2.51it/s][A09/17/2024 04:00:41 - INFO - __main__ -   current idx flS6D6P73vs.20 from finetune_area returns wrong image/video, use 40933 instead.

 81%|████████  | 179/221 [01:10<00:16,  2.52it/s][A
 82%|████████▏ | 181/221 [01:10<00:11,  3.46it/s][A
 82%|████████▏ | 182/221 [01:10<00:10,  3.69it/s][A
 83%|████████▎ | 183/221 [01:11<00:10,  3.73it/s][A
 83%|████████▎ | 184/221 [01:11<00:10,  3.65it/s][A
 84%|████████▎ | 185/221 [01:11<00:08,  4.30it/s][A
 84%|████████▍ | 186/221 [01:11<00:09,  3.86it/s][A
 85%|████████▍ | 187/221 [01:12<00:08,  4.13it/s][A
 85%|████████▌ | 188/221 [01:12<00:08,  4.12it/s][A
 86%|████████▌ | 189/221 [01:12<00:08,  3.94it/s][A
 86%|████████▌ | 190/221 [01:13<00:10,  3.09it/s][A
 86%|████████▋ | 191/221 [01:13<00:08,  3.60it/s][A
 87%|████████▋ | 192/221 [01:13<00:07,  3.83it/s][A
 88%|████████▊ | 194/221 [01:14<00:10,  2.57it/s][A
 88%|████████▊ | 195/221 [01:14<00:08,  2.99it/s][A
 89%|████████▊ | 196/221 [01:14<00:06,  3.61it/s][A
 89%|████████▉ | 197/221 [01:15<00:06,  3.66it/s][A
 90%|████████▉ | 198/221 [01:15<00:06,  3.63it/s][A
 90%|█████████ | 199/221 [01:15<00:05,  3.72it/s][A
 90%|█████████ | 200/221 [01:15<00:05,  3.74it/s][A
 91%|█████████ | 201/221 [01:16<00:05,  3.53it/s][A
 91%|█████████▏| 202/221 [01:16<00:05,  3.55it/s][A
 92%|█████████▏| 203/221 [01:16<00:05,  3.51it/s][A
 92%|█████████▏| 204/221 [01:17<00:04,  4.04it/s][A
 93%|█████████▎| 205/221 [01:17<00:03,  4.87it/s][A
 93%|█████████▎| 206/221 [01:17<00:03,  3.78it/s][A
 94%|█████████▍| 208/221 [01:17<00:02,  4.80it/s][A
 95%|█████████▍| 209/221 [01:17<00:02,  5.47it/s][A
 95%|█████████▌| 211/221 [01:18<00:02,  4.86it/s][A
 96%|█████████▌| 212/221 [01:18<00:01,  4.66it/s][A
 97%|█████████▋| 214/221 [01:19<00:01,  4.10it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  3.68it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  3.62it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  3.36it/s][A
 99%|█████████▊| 218/221 [01:20<00:00,  3.21it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  3.19it/s][A
100%|█████████▉| 220/221 [01:24<00:01,  1.37s/it][A
100%|██████████| 221/221 [01:25<00:00,  1.03s/it][A100%|██████████| 221/221 [01:25<00:00,  2.60it/s]
[h264 @ 0x5556dc525640] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:06,  3.32it/s][A
  1%|▏         | 3/221 [00:00<01:07,  3.22it/s][A
  2%|▏         | 4/221 [00:01<01:07,  3.21it/s][A
  2%|▏         | 5/221 [00:01<01:07,  3.19it/s][A
  3%|▎         | 6/221 [00:01<01:09,  3.08it/s][A
  3%|▎         | 7/221 [00:02<01:09,  3.10it/s][A[h264 @ 0x5556c76ef000] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:09,  3.08it/s][A
  4%|▍         | 9/221 [00:02<01:08,  3.08it/s][A
  5%|▍         | 10/221 [00:03<01:07,  3.13it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.20it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.18it/s][A
  6%|▌         | 13/221 [00:04<01:04,  3.25it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.26it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.29it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.28it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.31it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.27it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.31it/s][A[h264 @ 0x5556cc280c00] mmco: unref short failure
[h264 @ 0x5556cc280c00] mmco: unref short failure

 10%|▉         | 21/221 [00:06<01:00,  3.29it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.29it/s][A
 10%|█         | 23/221 [00:07<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A
 12%|█▏        | 26/221 [00:08<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.33it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.35it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.36it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.38it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.37it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.32it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.33it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.35it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.37it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.38it/s][A[h264 @ 0x5556ce238d00] mmco: unref short failure

 19%|█▊        | 41/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:13<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.33it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.35it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.36it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.37it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.38it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.39it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.36it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.32it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.33it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.35it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.36it/s][A
 25%|██▌       | 56/221 [00:16<00:50,  3.30it/s][A
 26%|██▌       | 57/221 [00:17<00:50,  3.26it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.30it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.25it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.30it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.31it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.31it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.34it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.35it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.37it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.38it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.36it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.32it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.34it/s][A
 33%|███▎      | 72/221 [00:21<00:44,  3.32it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.32it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.34it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.34it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.36it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.37it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.38it/s][A
 36%|███▌      | 79/221 [00:23<00:43,  3.29it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.29it/s][A
 37%|███▋      | 81/221 [00:24<00:42,  3.32it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.35it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.36it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.37it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.37it/s][A[h264 @ 0x5635487a6ec0] mmco: unref short failure
[h264 @ 0x5635487a6ec0] mmco: unref short failure

 39%|███▉      | 86/221 [00:25<00:39,  3.38it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.39it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.35it/s][A
 40%|████      | 89/221 [00:26<00:39,  3.36it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.37it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.38it/s][A[h264 @ 0x5556dd006f00] mmco: unref short failure
[h264 @ 0x5556dd006f00] mmco: unref short failure
[h264 @ 0x5635434596c0] mmco: unref short failure
[h264 @ 0x5635434596c0] mmco: unref short failure

 42%|████▏     | 92/221 [00:27<00:38,  3.34it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.36it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.36it/s][A
 43%|████▎     | 95/221 [00:28<00:37,  3.37it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.38it/s][A[h264 @ 0x563542199c80] mmco: unref short failure
[h264 @ 0x563542199c80] mmco: unref short failure

 44%|████▍     | 97/221 [00:29<00:36,  3.38it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.38it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.35it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.36it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.37it/s][A
 46%|████▌     | 102/221 [00:30<00:35,  3.37it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.38it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.39it/s][A
 48%|████▊     | 105/221 [00:31<00:34,  3.40it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.40it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.40it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.41it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.41it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.41it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.13it/s][A
  1%|          | 2/221 [00:00<00:55,  3.98it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.26it/s][A
  2%|▏         | 4/221 [00:00<00:53,  4.09it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.35it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.23it/s][A
  3%|▎         | 7/221 [00:01<00:53,  4.02it/s][A
  4%|▎         | 8/221 [00:02<01:00,  3.49it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.36it/s][A
  5%|▍         | 10/221 [00:02<00:59,  3.52it/s][A
  5%|▍         | 11/221 [00:02<01:01,  3.40it/s][A
  5%|▌         | 12/221 [00:03<00:57,  3.63it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.47it/s][A
  6%|▋         | 14/221 [00:04<01:09,  3.00it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.89it/s][A
  7%|▋         | 16/221 [00:04<01:11,  2.88it/s][A
  8%|▊         | 17/221 [00:05<01:19,  2.56it/s][A
  8%|▊         | 18/221 [00:05<01:18,  2.58it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.66it/s][A
 10%|▉         | 21/221 [00:06<00:46,  4.26it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.38it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.51it/s][A
 11%|█▏        | 25/221 [00:06<00:42,  4.56it/s][A
 12%|█▏        | 26/221 [00:07<00:48,  3.98it/s][A
 12%|█▏        | 27/221 [00:07<00:46,  4.19it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.67it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.42it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.62it/s][A
 14%|█▍        | 31/221 [00:08<00:52,  3.61it/s][A
 14%|█▍        | 32/221 [00:08<00:46,  4.05it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.10it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.81it/s][A
 16%|█▌        | 35/221 [00:09<00:53,  3.46it/s][A
 16%|█▋        | 36/221 [00:09<00:55,  3.35it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.58it/s][A
 17%|█▋        | 38/221 [00:10<00:50,  3.61it/s][A
 18%|█▊        | 39/221 [00:10<00:46,  3.92it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.41it/s][A
 19%|█▊        | 41/221 [00:11<00:50,  3.56it/s][A
 19%|█▉        | 42/221 [00:11<00:45,  3.97it/s][A
 19%|█▉        | 43/221 [00:12<00:57,  3.11it/s][A
 20%|█▉        | 44/221 [00:12<00:57,  3.09it/s][A
 20%|██        | 45/221 [00:12<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:12<00:55,  3.16it/s][A
 21%|██▏       | 47/221 [00:13<00:45,  3.80it/s][A
 22%|██▏       | 48/221 [00:13<00:38,  4.55it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  4.93it/s][A
 23%|██▎       | 50/221 [00:13<00:37,  4.53it/s][A
 23%|██▎       | 51/221 [00:13<00:42,  4.03it/s][A
 24%|██▍       | 53/221 [00:14<00:34,  4.82it/s][A
 24%|██▍       | 54/221 [00:14<00:36,  4.54it/s][A
 25%|██▍       | 55/221 [00:14<00:35,  4.63it/s][A
 25%|██▌       | 56/221 [00:15<00:37,  4.38it/s][A
 26%|██▌       | 57/221 [00:15<00:41,  3.95it/s][A
 26%|██▌       | 58/221 [00:15<00:34,  4.74it/s][A
 27%|██▋       | 59/221 [00:15<00:35,  4.55it/s][A
 27%|██▋       | 60/221 [00:15<00:35,  4.49it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.34it/s][A
 28%|██▊       | 62/221 [00:16<00:40,  3.92it/s][A
 29%|██▊       | 63/221 [00:16<00:33,  4.66it/s][A
 29%|██▉       | 64/221 [00:16<00:35,  4.37it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.32it/s][A
 30%|██▉       | 66/221 [00:17<00:42,  3.68it/s][A
 30%|███       | 67/221 [00:17<00:52,  2.95it/s][A
 31%|███       | 68/221 [00:18<00:48,  3.14it/s][A
 31%|███       | 69/221 [00:18<00:51,  2.94it/s][A
 32%|███▏      | 70/221 [00:18<00:44,  3.37it/s][A
 32%|███▏      | 71/221 [00:19<00:47,  3.13it/s][A
 33%|███▎      | 72/221 [00:19<00:49,  3.01it/s][A
 33%|███▎      | 73/221 [00:19<00:46,  3.21it/s][A
 33%|███▎      | 74/221 [00:20<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:20<00:44,  3.29it/s][A
 34%|███▍      | 76/221 [00:20<00:37,  3.82it/s][A
 35%|███▍      | 77/221 [00:20<00:34,  4.22it/s][A
 35%|███▌      | 78/221 [00:21<00:40,  3.53it/s][A
 36%|███▌      | 79/221 [00:21<00:37,  3.74it/s][A
 36%|███▌      | 80/221 [00:21<00:36,  3.82it/s][A
 37%|███▋      | 81/221 [00:21<00:35,  3.92it/s][A
 37%|███▋      | 82/221 [00:22<00:34,  3.98it/s][A
 38%|███▊      | 83/221 [00:22<00:29,  4.73it/s][A
 38%|███▊      | 84/221 [00:22<00:36,  3.77it/s][A
 38%|███▊      | 85/221 [00:22<00:33,  4.05it/s][A
 39%|███▉      | 86/221 [00:23<00:37,  3.63it/s][A
 39%|███▉      | 87/221 [00:23<00:46,  2.86it/s][A
 40%|███▉      | 88/221 [00:23<00:42,  3.15it/s][A
 40%|████      | 89/221 [00:24<00:40,  3.28it/s][A
 41%|████      | 90/221 [00:24<00:45,  2.87it/s][A
 41%|████      | 91/221 [00:24<00:39,  3.33it/s][A
 42%|████▏     | 92/221 [00:25<00:38,  3.38it/s][A
 42%|████▏     | 93/221 [00:25<00:41,  3.05it/s][A
 43%|████▎     | 94/221 [00:25<00:40,  3.15it/s][A
 43%|████▎     | 95/221 [00:26<00:48,  2.61it/s][A
 43%|████▎     | 96/221 [00:26<00:46,  2.72it/s][A
 44%|████▍     | 97/221 [00:26<00:43,  2.86it/s][A
 44%|████▍     | 98/221 [00:27<00:41,  2.95it/s][A
 45%|████▍     | 99/221 [00:27<00:37,  3.28it/s][A
 45%|████▌     | 100/221 [00:27<00:32,  3.77it/s][A
 46%|████▌     | 101/221 [00:27<00:28,  4.20it/s][A
 46%|████▌     | 102/221 [00:28<00:33,  3.58it/s][A
 47%|████▋     | 103/221 [00:28<00:30,  3.83it/s][A
 47%|████▋     | 104/221 [00:28<00:26,  4.48it/s][A
 48%|████▊     | 105/221 [00:28<00:27,  4.15it/s][A
 48%|████▊     | 106/221 [00:29<00:34,  3.30it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.76it/s][A
 49%|████▉     | 108/221 [00:29<00:26,  4.21it/s][A
 49%|████▉     | 109/221 [00:30<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:30<00:34,  3.22it/s][A
 50%|█████     | 111/221 [00:30<00:35,  3.12it/s][A
 51%|█████     | 112/221 [00:31<00:38,  2.84it/s][A
 51%|█████     | 113/221 [00:31<00:35,  3.08it/s][A
 52%|█████▏    | 115/221 [00:31<00:25,  4.24it/s][A
 52%|█████▏    | 116/221 [00:31<00:23,  4.43it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.11it/s][A
 53%|█████▎    | 118/221 [00:32<00:28,  3.56it/s][A
 54%|█████▍    | 119/221 [00:33<00:34,  2.99it/s][A
 54%|█████▍    | 120/221 [00:33<00:34,  2.94it/s][A
 55%|█████▍    | 121/221 [00:33<00:29,  3.44it/s][A
 55%|█████▌    | 122/221 [00:33<00:26,  3.75it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.86it/s][A
 56%|█████▌    | 124/221 [00:34<00:32,  3.01it/s][A
 57%|█████▋    | 125/221 [00:35<00:41,  2.30it/s][A
 57%|█████▋    | 126/221 [00:35<00:36,  2.59it/s][A
 57%|█████▋    | 127/221 [00:35<00:39,  2.36it/s][A
 58%|█████▊    | 128/221 [00:36<00:33,  2.75it/s][A
 58%|█████▊    | 129/221 [00:36<00:27,  3.39it/s][A
 59%|█████▉    | 130/221 [00:36<00:25,  3.60it/s][A
 59%|█████▉    | 131/221 [00:36<00:23,  3.91it/s][A
 60%|█████▉    | 132/221 [00:37<00:24,  3.66it/s][A
 60%|██████    | 133/221 [00:37<00:30,  2.85it/s][A
 61%|██████    | 134/221 [00:38<00:35,  2.45it/s][A
 61%|██████    | 135/221 [00:38<00:27,  3.14it/s][A
 62%|██████▏   | 136/221 [00:38<00:27,  3.06it/s][A
 62%|██████▏   | 137/221 [00:38<00:25,  3.34it/s][A
 62%|██████▏   | 138/221 [00:39<00:24,  3.40it/s][A
 63%|██████▎   | 139/221 [00:39<00:28,  2.87it/s][A
 63%|██████▎   | 140/221 [00:39<00:25,  3.23it/s][A
 64%|██████▍   | 141/221 [00:40<00:27,  2.93it/s][A
 64%|██████▍   | 142/221 [00:40<00:23,  3.32it/s][A
 65%|██████▍   | 143/221 [00:40<00:25,  3.04it/s][A
 65%|██████▌   | 144/221 [00:41<00:23,  3.32it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.35it/s][A
 66%|██████▌   | 146/221 [00:41<00:22,  3.39it/s][A
 67%|██████▋   | 147/221 [00:41<00:19,  3.83it/s][A
 67%|██████▋   | 148/221 [00:42<00:20,  3.58it/s][A
 67%|██████▋   | 149/221 [00:42<00:20,  3.56it/s][A
 68%|██████▊   | 150/221 [00:42<00:18,  3.81it/s][A
 68%|██████▊   | 151/221 [00:43<00:24,  2.83it/s][A
 69%|██████▉   | 152/221 [00:44<00:32,  2.11it/s][A
 69%|██████▉   | 153/221 [00:44<00:28,  2.40it/s][A
 70%|██████▉   | 154/221 [00:44<00:24,  2.75it/s][A
 70%|███████   | 155/221 [00:44<00:25,  2.55it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.73it/s][A
 71%|███████   | 157/221 [00:45<00:22,  2.83it/s][A
 71%|███████▏  | 158/221 [00:46<00:23,  2.69it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.14it/s][A
 72%|███████▏  | 160/221 [00:46<00:18,  3.34it/s][A
 73%|███████▎  | 161/221 [00:46<00:14,  4.08it/s][A
 73%|███████▎  | 162/221 [00:46<00:13,  4.38it/s][A
 74%|███████▍  | 163/221 [00:47<00:14,  4.12it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.70it/s][A
 75%|███████▍  | 165/221 [00:47<00:11,  4.73it/s][A
 75%|███████▌  | 166/221 [00:47<00:15,  3.63it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  3.94it/s][A
 76%|███████▌  | 168/221 [00:48<00:14,  3.68it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.19it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.76it/s][A
 78%|███████▊  | 172/221 [00:49<00:16,  3.01it/s][A
 78%|███████▊  | 173/221 [00:50<00:16,  3.00it/s][A
 79%|███████▊  | 174/221 [00:50<00:14,  3.23it/s][A
 79%|███████▉  | 175/221 [00:50<00:14,  3.12it/s][A
 80%|███████▉  | 176/221 [00:50<00:12,  3.57it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.73it/s][A
 81%|████████  | 178/221 [00:51<00:15,  2.74it/s][A
 81%|████████  | 179/221 [00:51<00:14,  2.91it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.58it/s][A
 82%|████████▏ | 182/221 [00:52<00:11,  3.48it/s][A
 83%|████████▎ | 183/221 [00:52<00:10,  3.53it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.65it/s][A
 84%|████████▎ | 185/221 [00:53<00:08,  4.28it/s][A
 84%|████████▍ | 186/221 [00:53<00:11,  3.16it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.54it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.37it/s][A
 86%|████████▌ | 189/221 [00:54<00:08,  3.73it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  2.92it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.65it/s][A
 87%|████████▋ | 192/221 [00:55<00:07,  4.00it/s][A
 87%|████████▋ | 193/221 [00:55<00:06,  4.08it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.52it/s][A
 88%|████████▊ | 195/221 [00:56<00:07,  3.44it/s][A
 89%|████████▊ | 196/221 [00:56<00:09,  2.73it/s][A
 89%|████████▉ | 197/221 [00:57<00:10,  2.39it/s][A
 90%|████████▉ | 198/221 [00:57<00:09,  2.37it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  2.81it/s][A
 90%|█████████ | 200/221 [00:58<00:07,  2.93it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.35it/s][A
 91%|█████████▏| 202/221 [00:58<00:05,  3.19it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.60it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.46it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.71it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.71it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  2.85it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.33it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.24it/s][A
 95%|█████████▌| 210/221 [01:01<00:02,  3.67it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.97it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.44it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.20it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.79it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.75it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.78it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  2.96it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.12it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  2.94it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.38it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.07it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'area_r1': 40.0, 'area_recall': '40.0/67.3/75.7', 'area_ravg': 61.0}
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'forward_r1': 37.8, 'forward_recall': '37.8/66.1/76.7', 'forward_ravg': 60.2}
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/67.3/77.7', 'area_video_ravg': 61.3}
09/17/2024 04:03:14 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 04:03:14 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'area_video_r1': 52.3, 'area_video_recall': '52.3/75.3/82.8', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.4/81.4', 'area_video_back_ravg': 68.1}
09/17/2024 04:03:14 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 04:03:14 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'video_r1': 36.4, 'video_recall': '36.4/63.8/74.2', 'video_ravg': 58.1}
09/17/2024 04:03:14 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 04:03:14 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 04:03:14 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 649--===========

09/17/2024 04:03:14 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/75.1/81.9', 'video_ravg': 69.7}
09/17/2024 04:03:14 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 04:03:14 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 04:03:35 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007002722006291151, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1079583168029785, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.15449857711792, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2694597244262695}
 22%|██▏       | 650/2910 [4:07:39<84:02:45, 133.88s/it] 22%|██▏       | 651/2910 [4:07:43<59:30:02, 94.82s/it]  22%|██▏       | 652/2910 [4:07:47<42:27:59, 67.71s/it][h264 @ 0x55771be59ac0] mmco: unref short failure
[h264 @ 0x5635472c8280] mmco: unref short failure
[h264 @ 0x5635472c8280] mmco: unref short failure
[h264 @ 0x5635472c8280] mmco: unref short failure
[h264 @ 0x5635472c8280] mmco: unref short failure
 22%|██▏       | 653/2910 [4:07:52<30:36:01, 48.81s/it] 22%|██▏       | 654/2910 [4:07:57<22:20:28, 35.65s/it][h264 @ 0x557728c5ef40] mmco: unref short failure
 23%|██▎       | 655/2910 [4:08:02<16:41:59, 26.66s/it] 23%|██▎       | 656/2910 [4:08:08<12:47:51, 20.44s/it][h264 @ 0x558648655100] mmco: unref short failure
[h264 @ 0x5576dfbe9b80] mmco: unref short failure
 23%|██▎       | 657/2910 [4:08:15<10:15:28, 16.39s/it] 23%|██▎       | 658/2910 [4:08:23<8:39:01, 13.83s/it] [h264 @ 0x5576de42d840] mmco: unref short failure
[h264 @ 0x5576de42d840] mmco: unref short failure
[h264 @ 0x5576de42d840] mmco: unref short failure
[h264 @ 0x5576de42d840] mmco: unref short failure
[h264 @ 0x5556d61cf340] mmco: unref short failure
[h264 @ 0x5556d61cf340] mmco: unref short failure
 23%|██▎       | 659/2910 [4:08:30<7:15:58, 11.62s/it][h264 @ 0x563543458d80] mmco: unref short failure
[h264 @ 0x563543458d80] mmco: unref short failure
[h264 @ 0x5556c97c1600] mmco: unref short failure
 23%|██▎       | 660/2910 [4:08:36<6:16:05, 10.03s/it][h264 @ 0x55772f026c80] mmco: unref short failure
[h264 @ 0x55864c4fda00] mmco: unref short failure
 23%|██▎       | 661/2910 [4:08:43<5:42:57,  9.15s/it][h264 @ 0x558642484c80] mmco: unref short failure
[h264 @ 0x5576dfd55880] mmco: unref short failure
 23%|██▎       | 662/2910 [4:08:50<5:12:25,  8.34s/it][h264 @ 0x56354fc52fc0] mmco: unref short failure
[h264 @ 0x56354fc52fc0] mmco: unref short failure
[h264 @ 0x5556d4192e40] mmco: unref short failure
 23%|██▎       | 663/2910 [4:08:56<4:51:18,  7.78s/it][h264 @ 0x5586478b4fc0] mmco: unref short failure
[h264 @ 0x5586478b4fc0] mmco: unref short failure
 23%|██▎       | 664/2910 [4:09:02<4:36:31,  7.39s/it][h264 @ 0x563548bfdf40] mmco: unref short failure
 23%|██▎       | 665/2910 [4:09:10<4:32:51,  7.29s/it][h264 @ 0x5556dbc07200] mmco: unref short failure
[h264 @ 0x5556dbc07200] mmco: unref short failure
09/17/2024 04:05:12 - INFO - __main__ -   current idx JRTVXn0PfXQ.11 from finetune_area returns wrong image/video, use 53365 instead.
[h264 @ 0x55772c0d3440] mmco: unref short failure
[h264 @ 0x55772c0d3440] mmco: unref short failure
[h264 @ 0x5635599a4ec0] mmco: unref short failure
[h264 @ 0x5635445c3140] mmco: unref short failure
[h264 @ 0x5635445c3140] mmco: unref short failure
[h264 @ 0x558647a35400] mmco: unref short failure
[h264 @ 0x5556d89d8200] mmco: unref short failure
[h264 @ 0x5556d89d8200] mmco: unref short failure
[h264 @ 0x55568bea7e80] mmco: unref short failure
[h264 @ 0x55568d234640] mmco: unref short failure
[h264 @ 0x55568d234640] mmco: unref short failure
[h264 @ 0x5556c4f1af40] mmco: unref short failure
[h264 @ 0x5556c4f1af40] mmco: unref short failure
[h264 @ 0x558649e60c80] mmco: unref short failure
[h264 @ 0x558649e60c80] mmco: unref short failure
[h264 @ 0x55863a09f7c0] mmco: unref short failure
[h264 @ 0x56355aadde80] mmco: unref short failure
[h264 @ 0x56355aadde80] mmco: unref short failure
[h264 @ 0x56354e1d3b00] mmco: unref short failure
[h264 @ 0x56354e1d3b00] mmco: unref short failure
 23%|██▎       | 666/2910 [4:09:40<8:54:52, 14.30s/it][h264 @ 0x56355359a380] mmco: unref short failure
[h264 @ 0x56355359a380] mmco: unref short failure
[h264 @ 0x56355a805840] mmco: unref short failure
 23%|██▎       | 667/2910 [4:09:57<9:22:42, 15.05s/it][h264 @ 0x5635544039c0] mmco: unref short failure
[av1 @ 0x5556d573c3c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d573c3c0] Failed to get pixel format.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d573c3c0] Failed to get pixel format.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d573c3c0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Missing Sequence Header.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[av1 @ 0x5556d8d5fcc0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5556d8d5fcc0] Failed to get pixel format.
[h264 @ 0x5556cee60d00] mmco: unref short failure
 23%|██▎       | 668/2910 [4:10:11<9:10:08, 14.72s/it] 23%|██▎       | 669/2910 [4:10:18<7:42:27, 12.38s/it][h264 @ 0x5635522184c0] mmco: unref short failure
[h264 @ 0x5635522184c0] mmco: unref short failure
[h264 @ 0x5556cafaa900] mmco: unref short failure
[h264 @ 0x5556cafaa900] mmco: unref short failure
[h264 @ 0x55864b9b4600] mmco: unref short failure
 23%|██▎       | 670/2910 [4:10:31<7:45:14, 12.46s/it] 23%|██▎       | 671/2910 [4:10:37<6:37:25, 10.65s/it] 23%|██▎       | 672/2910 [4:10:48<6:46:10, 10.89s/it][h264 @ 0x563547f20b40] mmco: unref short failure
[h264 @ 0x563547f20b40] mmco: unref short failure
[h264 @ 0x563547f20b40] mmco: unref short failure
[h264 @ 0x563547f20b40] mmco: unref short failure
[h264 @ 0x563547f20b40] mmco: unref short failure
[h264 @ 0x563547f20b40] mmco: unref short failure
 23%|██▎       | 673/2910 [4:10:54<5:51:29,  9.43s/it][h264 @ 0x55864e33cbc0] mmco: unref short failure
[h264 @ 0x55864e33cbc0] mmco: unref short failure
[h264 @ 0x557723e7b640] mmco: unref short failure
[h264 @ 0x558641a97e80] mmco: unref short failure
[h264 @ 0x557722583200] mmco: unref short failure
[h264 @ 0x557722583200] mmco: unref short failure
[h264 @ 0x557722583200] mmco: unref short failure
[h264 @ 0x557722583200] mmco: unref short failure
[h264 @ 0x5556e1605040] mmco: unref short failure
[h264 @ 0x5556e1605040] mmco: unref short failure
[h264 @ 0x5556c5538140] mmco: unref short failure
[h264 @ 0x563542e59400] mmco: unref short failure
09/17/2024 04:07:20 - INFO - __main__ -   current idx hI-_iZaM-ZY.36 from finetune_area returns wrong image/video, use 106857 instead.
[h264 @ 0x55568c208a40] mmco: unref short failure
[h264 @ 0x55568c208a40] mmco: unref short failure
[h264 @ 0x5556c6da3500] mmco: unref short failure
[h264 @ 0x5556c6da3500] mmco: unref short failure
[h264 @ 0x5556c6da3500] mmco: unref short failure
[h264 @ 0x5556c6da3500] mmco: unref short failure
[h264 @ 0x5577249a4ec0] mmco: unref short failure
[h264 @ 0x5577249a4ec0] mmco: unref short failure
[h264 @ 0x55771bd74880] mmco: unref short failure
[h264 @ 0x55771bd74880] mmco: unref short failure
[h264 @ 0x563554403340] mmco: unref short failure
[h264 @ 0x563554403340] mmco: unref short failure
[h264 @ 0x563554403340] mmco: unref short failure
[h264 @ 0x563554403340] mmco: unref short failure
[h264 @ 0x5556c883d800] mmco: unref short failure
[h264 @ 0x5556c883d800] mmco: unref short failure
[h264 @ 0x5556c883d800] mmco: unref short failure
[h264 @ 0x5556c883d800] mmco: unref short failure
09/17/2024 04:07:57 - INFO - __main__ -   current idx Lzt-UMekcLY.51 from finetune_area returns wrong image/video, use 130128 instead.
[h264 @ 0x55864c4d10c0] mmco: unref short failure
[h264 @ 0x55864c4d10c0] mmco: unref short failure
[h264 @ 0x5635548a4bc0] mmco: unref short failure
[h264 @ 0x5635548a4bc0] mmco: unref short failure
 23%|██▎       | 674/2910 [4:12:03<16:55:41, 27.25s/it][h264 @ 0x5635473cf180] mmco: unref short failure
09/17/2024 04:08:15 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 20065 instead.
[h264 @ 0x55772e70a4c0] mmco: unref short failure
[h264 @ 0x55863c009940] mmco: unref short failure
[h264 @ 0x557725b8d380] mmco: unref short failure
[h264 @ 0x557725b8d380] mmco: unref short failure
[h264 @ 0x5586401f9180] mmco: unref short failure
[h264 @ 0x5586487e4a80] mmco: unref short failure
[h264 @ 0x5586487e4a80] mmco: unref short failure
 23%|██▎       | 675/2910 [4:12:30<16:48:54, 27.08s/it][h264 @ 0x5577310a9200] mmco: unref short failure
[h264 @ 0x5577310a9200] mmco: unref short failure
[h264 @ 0x563545fd7780] mmco: unref short failure
[h264 @ 0x563545fd7780] mmco: unref short failure
[h264 @ 0x563545fd7780] mmco: unref short failure
[h264 @ 0x563545fd7780] mmco: unref short failure
 23%|██▎       | 676/2910 [4:12:42<14:04:59, 22.69s/it]09/17/2024 04:08:51 - INFO - __main__ -   current idx jZFMYW2mcas.95 from finetune_area returns wrong image/video, use 70942 instead.
09/17/2024 04:08:51 - INFO - __main__ -   current idx LqXDiwVxwcc.104 from finetune_area returns wrong image/video, use 130907 instead.
 23%|██▎       | 677/2910 [4:12:55<12:13:38, 19.71s/it][h264 @ 0x558641ec1080] mmco: unref short failure
[h264 @ 0x558634366400] mmco: unref short failure
[h264 @ 0x558634366400] mmco: unref short failure
[h264 @ 0x558634366400] mmco: unref short failure
[h264 @ 0x558634366400] mmco: unref short failure
[h264 @ 0x558641ec1080] mmco: unref short failure
 23%|██▎       | 678/2910 [4:13:01<9:42:46, 15.67s/it]  23%|██▎       | 679/2910 [4:13:08<7:56:57, 12.83s/it] 23%|██▎       | 680/2910 [4:13:15<6:53:05, 11.11s/it] 23%|██▎       | 681/2910 [4:13:20<5:53:08,  9.51s/it][h264 @ 0x56355923df00] mmco: unref short failure
[h264 @ 0x56355923df00] mmco: unref short failure
[h264 @ 0x55771a8fd180] mmco: unref short failure
[h264 @ 0x5556dfe238c0] mmco: unref short failure
[h264 @ 0x5586509bed00] mmco: unref short failure
[h264 @ 0x563547853080] mmco: unref short failure
[h264 @ 0x563547853080] mmco: unref short failure
[h264 @ 0x563556c4c840] mmco: unref short failure
[h264 @ 0x5577308c9e80] mmco: unref short failure
[h264 @ 0x5586494a7900] mmco: unref short failure
[h264 @ 0x5556c4bb46c0] mmco: unref short failure
[h264 @ 0x5556c4bb46c0] mmco: unref short failure
[h264 @ 0x56355915adc0] mmco: unref short failure
[h264 @ 0x56355915adc0] mmco: unref short failure
 23%|██▎       | 682/2910 [4:14:30<17:01:10, 27.50s/it][h264 @ 0x56355c50c2c0] mmco: unref short failure
[h264 @ 0x56355c50c2c0] mmco: unref short failure
[h264 @ 0x5586337d7880] mmco: unref short failure
[h264 @ 0x55864c58afc0] mmco: unref short failure
[h264 @ 0x55864c58afc0] mmco: unref short failure
09/17/2024 04:10:46 - INFO - __main__ -   current idx jfvYACaIdq8.34 from finetune_area returns wrong image/video, use 62458 instead.
[h264 @ 0x55771bd74d40] mmco: unref short failure
[h264 @ 0x55771bd74d40] mmco: unref short failure
[h264 @ 0x558644357ac0] mmco: unref short failure
[h264 @ 0x558644357ac0] mmco: unref short failure
[h264 @ 0x5556d45c4300] mmco: unref short failure
[h264 @ 0x5556d45c4300] mmco: unref short failure
[h264 @ 0x5556cebde540] mmco: unref short failure
[h264 @ 0x5556cebde540] mmco: unref short failure
[h264 @ 0x55771fb378c0] mmco: unref short failure
[h264 @ 0x55771fb378c0] mmco: unref short failure
 23%|██▎       | 683/2910 [4:15:04<18:19:05, 29.61s/it] 24%|██▎       | 684/2910 [4:15:11<14:00:23, 22.65s/it]09/17/2024 04:11:13 - INFO - __main__ -   current idx MQg3FQ-2lHU.8 from finetune_area returns wrong image/video, use 8406 instead.
[h264 @ 0x5556dbf62880] mmco: unref short failure
 24%|██▎       | 685/2910 [4:15:18<11:03:16, 17.89s/it] 24%|██▎       | 686/2910 [4:15:24<9:00:00, 14.57s/it] [h264 @ 0x5556d1e1a680] mmco: unref short failure
[h264 @ 0x5556d1e1a680] mmco: unref short failure
[h264 @ 0x5556d1e1a680] mmco: unref short failure
[h264 @ 0x5556d1e1a680] mmco: unref short failure
[h264 @ 0x56355b0a38c0] mmco: unref short failure
 24%|██▎       | 687/2910 [4:15:31<7:33:23, 12.24s/it][h264 @ 0x55771afb09c0] mmco: unref short failure
[h264 @ 0x563549ef2c80] mmco: unref short failure
[h264 @ 0x563549ef2c80] mmco: unref short failure
 24%|██▎       | 688/2910 [4:15:53<9:19:31, 15.11s/it] 24%|██▎       | 689/2910 [4:15:59<7:41:51, 12.48s/it][h264 @ 0x55771c8b4880] mmco: unref short failure
[h264 @ 0x5586375f5480] mmco: unref short failure
[h264 @ 0x5586375f5480] mmco: unref short failure
[h264 @ 0x558640330c80] mmco: unref short failure
[h264 @ 0x558651e8e040] mmco: unref short failure
[h264 @ 0x558651e8e040] mmco: unref short failure
[h264 @ 0x563557963b80] mmco: unref short failure
[h264 @ 0x5556d2acc640] mmco: unref short failure
[h264 @ 0x5556d2acc640] mmco: unref short failure
[h264 @ 0x56355fb47c40] mmco: unref short failure
[h264 @ 0x55772dec1180] mmco: unref short failure
[h264 @ 0x55772dec1180] mmco: unref short failure
[h264 @ 0x55771e83f380] mmco: unref short failure
09/17/2024 04:12:37 - INFO - __main__ -   current idx DyoQruLbYRg.26 from finetune_area returns wrong image/video, use 72161 instead.
[h264 @ 0x5586466be340] mmco: unref short failure
[h264 @ 0x5577178f2100] mmco: unref short failure
[h264 @ 0x5577178f2100] mmco: unref short failure
[h264 @ 0x55864a38e540] mmco: unref short failure
[h264 @ 0x55864a38e540] mmco: unref short failure
[h264 @ 0x5586416ed600] mmco: unref short failure
[h264 @ 0x5586416ed600] mmco: unref short failure
[h264 @ 0x5577325a9680] mmco: unref short failure
 24%|██▎       | 690/2910 [4:17:04<17:15:54, 28.00s/it][h264 @ 0x563549cf3240] mmco: unref short failure
[h264 @ 0x5556ccb85540] mmco: unref short failure
[h264 @ 0x5556ccb85540] mmco: unref short failure
[h264 @ 0x56354eda30c0] mmco: unref short failure
[h264 @ 0x56354eda30c0] mmco: unref short failure
[h264 @ 0x5556dd387d40] mmco: unref short failure
[h264 @ 0x5556dd387d40] mmco: unref short failure
[h264 @ 0x55772e708980] mmco: unref short failure
[h264 @ 0x55772e708980] mmco: unref short failure
[h264 @ 0x5556d0f6ff80] mmco: unref short failure
[h264 @ 0x5556d0f6ff80] mmco: unref short failure
 24%|██▎       | 691/2910 [4:17:32<17:18:52, 28.09s/it] 24%|██▍       | 692/2910 [4:17:39<13:23:28, 21.74s/it][h264 @ 0x5556d4175f00] mmco: unref short failure
[h264 @ 0x563554826680] mmco: unref short failure
 24%|██▍       | 693/2910 [4:17:45<10:24:48, 16.91s/it][h264 @ 0x55772ef19b80] mmco: unref short failure
[h264 @ 0x55772ef19b80] mmco: unref short failure
 24%|██▍       | 694/2910 [4:17:51<8:25:20, 13.68s/it] [h264 @ 0x5556d942aec0] mmco: unref short failure
[h264 @ 0x5556d942aec0] mmco: unref short failure
 24%|██▍       | 695/2910 [4:18:07<8:58:20, 14.58s/it][h264 @ 0x5556d4bd98c0] mmco: unref short failure
[h264 @ 0x55771cd54b40] mmco: unref short failure
 24%|██▍       | 696/2910 [4:18:24<9:17:58, 15.12s/it][h264 @ 0x55864313e700] mmco: unref short failure
 24%|██▍       | 697/2910 [4:18:30<7:36:43, 12.38s/it][h264 @ 0x56355c7ea040] mmco: unref short failure
[h264 @ 0x56355c7ea040] mmco: unref short failure
[h264 @ 0x558633bbc940] mmco: unref short failure
[h264 @ 0x558633bbc940] mmco: unref short failure
[h264 @ 0x5577179e0ec0] mmco: unref short failure
[h264 @ 0x5577327585c0] mmco: unref short failure
[h264 @ 0x5577327585c0] mmco: unref short failure
[h264 @ 0x5635544d3f40] mmco: unref short failure
[h264 @ 0x5635544d3f40] mmco: unref short failure
09/17/2024 04:14:52 - INFO - __main__ -   current idx EboJj8xv0Wo.48 from finetune_area returns wrong image/video, use 64218 instead.
[h264 @ 0x55864f389d40] mmco: unref short failure
[h264 @ 0x55771bafad80] mmco: unref short failure
[h264 @ 0x5556d0651180] mmco: unref short failure
[h264 @ 0x5556d0651180] mmco: unref short failure
[h264 @ 0x5556d0651180] mmco: unref short failure
[h264 @ 0x5576e00cccc0] mmco: unref short failure
[h264 @ 0x55864b5c1840] mmco: unref short failure
[h264 @ 0x55864b5c1840] mmco: unref short failure
[h264 @ 0x56354ea11300] mmco: unref short failure
[h264 @ 0x56354ea11300] mmco: unref short failure
[h264 @ 0x56354c98bd80] mmco: unref short failure
 24%|██▍       | 698/2910 [4:19:37<17:40:05, 28.75s/it][h264 @ 0x558651ea0840] mmco: unref short failure
[h264 @ 0x5586434d6780] mmco: unref short failure
[h264 @ 0x5556c9244980] mmco: unref short failure
[h264 @ 0x55863a1ce240] mmco: unref short failure
[h264 @ 0x5577283ed300] mmco: unref short failure
[h264 @ 0x5577283ed300] mmco: unref short failure
[h264 @ 0x56355b99ffc0] mmco: unref short failure
[h264 @ 0x56355b99ffc0] mmco: unref short failure
[h264 @ 0x56355b99ffc0] mmco: unref short failure
[h264 @ 0x56355b99ffc0] mmco: unref short failure
[h264 @ 0x5556cd4655c0] mmco: unref short failure
[h264 @ 0x55772f2cb680] mmco: unref short failure
[h264 @ 0x55772f2cb680] mmco: unref short failure
[h264 @ 0x55772f2cb680] mmco: unref short failure
[h264 @ 0x55772f2cb680] mmco: unref short failure
not have audios ua_Kowav7hg.20
[h264 @ 0x5556dffd5900] mmco: unref short failure
 24%|██▍       | 699/2910 [4:20:06<17:47:29, 28.97s/it]09/17/2024 04:16:05 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 04:16:05 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556ca651f40] mmco: unref short failure
[h264 @ 0x5576dfdb0a40] mmco: unref short failure
[h264 @ 0x5556d83cc280] mmco: unref short failure
[h264 @ 0x5576e0978940] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556c9347940] mmco: unref short failure
[h264 @ 0x5556c9347940] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772f1dd2c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55864cc2e1c0] mmco: unref short failure
[h264 @ 0x55864cc2e1c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556cd9d4d40] mmco: unref short failure
[h264 @ 0x5556cd9d4d40] mmco: unref short failure
[h264 @ 0x558646fb8480] mmco: unref short failure
09/17/2024 04:17:33 - INFO - __main__ -   current idx LbxDh6D_sq8.17 from finetune_area returns wrong image/video, use 114389 instead.
[h264 @ 0x55771f375140] mmco: unref short failure
[h264 @ 0x55771f375140] mmco: unref short failure
09/17/2024 04:17:49 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 127013 instead.
[h264 @ 0x5556df7810c0] mmco: unref short failure
[h264 @ 0x5556df7810c0] mmco: unref short failure
[h264 @ 0x56355e6210c0] mmco: unref short failure
09/17/2024 04:18:05 - INFO - __main__ -   current idx 6cR1r93ZMGw.233 from finetune_area returns wrong image/video, use 140074 instead.
[h264 @ 0x5556d5cdb280] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x558634ec76c0] mmco: unref short failure
[h264 @ 0x558634ec76c0] mmco: unref short failure

  0%|          | 1/221 [00:00<01:36,  2.27it/s][A
  1%|          | 2/221 [00:00<01:42,  2.13it/s][A
  1%|▏         | 3/221 [00:01<01:17,  2.83it/s][A
  2%|▏         | 4/221 [00:01<01:10,  3.08it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.37it/s][A[h264 @ 0x55771c331580] mmco: unref short failure
[h264 @ 0x55771c331580] mmco: unref short failure

  3%|▎         | 6/221 [00:01<00:59,  3.60it/s][A
  3%|▎         | 7/221 [00:02<01:05,  3.27it/s][A
  4%|▎         | 8/221 [00:02<01:09,  3.05it/s][A
  4%|▍         | 9/221 [00:02<01:00,  3.50it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.67it/s][A
  5%|▍         | 11/221 [00:03<01:01,  3.39it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:04<00:53,  3.88it/s][A
  6%|▋         | 14/221 [00:04<01:20,  2.59it/s][A
  7%|▋         | 15/221 [00:05<01:14,  2.76it/s][A
  7%|▋         | 16/221 [00:05<01:18,  2.60it/s][A
  8%|▊         | 17/221 [00:05<01:14,  2.75it/s][A
  8%|▊         | 18/221 [00:06<01:08,  2.98it/s][A
  9%|▊         | 19/221 [00:06<00:55,  3.65it/s][A
  9%|▉         | 20/221 [00:06<00:46,  4.32it/s][A
 10%|▉         | 21/221 [00:06<00:43,  4.61it/s][A
 10%|▉         | 22/221 [00:06<00:53,  3.69it/s][A
 10%|█         | 23/221 [00:06<00:44,  4.40it/s][A
 11%|█         | 24/221 [00:07<00:41,  4.78it/s][A
 11%|█▏        | 25/221 [00:07<00:38,  5.09it/s][A
 12%|█▏        | 26/221 [00:07<00:37,  5.16it/s][A
 12%|█▏        | 27/221 [00:07<00:33,  5.82it/s][A
 13%|█▎        | 28/221 [00:08<00:47,  4.02it/s][A
 13%|█▎        | 29/221 [00:08<00:40,  4.76it/s][A
 14%|█▎        | 30/221 [00:08<00:38,  4.95it/s][A
 14%|█▍        | 31/221 [00:08<00:38,  4.99it/s][A
 14%|█▍        | 32/221 [00:08<00:33,  5.58it/s][A
 15%|█▍        | 33/221 [00:08<00:37,  4.98it/s][A
 15%|█▌        | 34/221 [00:09<00:32,  5.72it/s][A
 16%|█▌        | 35/221 [00:09<00:32,  5.69it/s][A
 16%|█▋        | 36/221 [00:09<00:38,  4.81it/s][A
 17%|█▋        | 37/221 [00:10<01:06,  2.78it/s][A
 17%|█▋        | 38/221 [00:10<01:06,  2.74it/s][A
 18%|█▊        | 39/221 [00:10<00:54,  3.31it/s][A[h264 @ 0x558634d23100] mmco: unref short failure

 18%|█▊        | 40/221 [00:11<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:11<00:45,  3.94it/s][A
 19%|█▉        | 42/221 [00:11<00:58,  3.07it/s][A
 19%|█▉        | 43/221 [00:11<00:47,  3.78it/s][A
 20%|█▉        | 44/221 [00:11<00:39,  4.54it/s][A[h264 @ 0x558642484a80] mmco: unref short failure
[h264 @ 0x558642484a80] mmco: unref short failure

 20%|██        | 45/221 [00:13<01:30,  1.94it/s][A[h264 @ 0x557725239080] mmco: unref short failure
[h264 @ 0x557725239080] mmco: unref short failure

 21%|██        | 46/221 [00:13<01:40,  1.74it/s][A
 21%|██▏       | 47/221 [00:15<02:39,  1.09it/s][A
 22%|██▏       | 48/221 [00:15<01:59,  1.45it/s][A
 22%|██▏       | 49/221 [00:15<01:34,  1.81it/s][A
 23%|██▎       | 50/221 [00:16<01:12,  2.37it/s][A
 23%|██▎       | 51/221 [00:16<00:56,  3.02it/s][A
 24%|██▎       | 52/221 [00:16<00:47,  3.54it/s][A
 24%|██▍       | 53/221 [00:16<00:40,  4.13it/s][A[h264 @ 0x56354587ed80] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<03:12,  1.15s/it][A
 25%|██▍       | 55/221 [00:20<02:35,  1.07it/s][A
 25%|██▌       | 56/221 [00:20<01:58,  1.39it/s][A
 26%|██▌       | 57/221 [00:20<01:33,  1.75it/s][A
 26%|██▌       | 58/221 [00:20<01:10,  2.31it/s][A
 27%|██▋       | 59/221 [00:20<00:56,  2.86it/s][A
 27%|██▋       | 60/221 [00:21<01:04,  2.52it/s][A
 28%|██▊       | 61/221 [00:21<00:55,  2.89it/s][A
 28%|██▊       | 62/221 [00:21<00:49,  3.20it/s][A
 29%|██▊       | 63/221 [00:22<00:43,  3.61it/s][A
 29%|██▉       | 64/221 [00:22<00:41,  3.83it/s][A[h264 @ 0x56354ce05180] mmco: unref short failure

 29%|██▉       | 65/221 [00:22<00:38,  4.05it/s][A
 30%|██▉       | 66/221 [00:23<01:05,  2.38it/s][A
 30%|███       | 67/221 [00:24<01:16,  2.02it/s][A
 31%|███       | 68/221 [00:24<01:02,  2.45it/s][A
 31%|███       | 69/221 [00:25<01:20,  1.90it/s][A
 32%|███▏      | 70/221 [00:25<01:01,  2.46it/s][A09/17/2024 04:18:47 - INFO - __main__ -   current idx BYJeo2oa0SU.13 from finetune_area returns wrong image/video, use 20625 instead.

 32%|███▏      | 71/221 [00:28<02:58,  1.19s/it][A
 33%|███▎      | 72/221 [00:28<02:16,  1.09it/s][A
 33%|███▎      | 73/221 [00:28<01:48,  1.36it/s][A
 33%|███▎      | 74/221 [00:28<01:21,  1.80it/s][A
 34%|███▍      | 75/221 [00:29<01:11,  2.05it/s][A
 34%|███▍      | 76/221 [00:29<00:56,  2.55it/s][A
 35%|███▍      | 77/221 [00:29<00:57,  2.50it/s][A
 35%|███▌      | 78/221 [00:30<00:52,  2.71it/s][A
 36%|███▌      | 79/221 [00:30<01:02,  2.27it/s][A
 36%|███▌      | 80/221 [00:30<00:50,  2.82it/s][A
 37%|███▋      | 81/221 [00:31<00:46,  3.00it/s][A
 37%|███▋      | 82/221 [00:31<00:37,  3.68it/s][A
 38%|███▊      | 83/221 [00:31<00:32,  4.29it/s][A
 38%|███▊      | 84/221 [00:31<00:28,  4.78it/s][A
 38%|███▊      | 85/221 [00:31<00:25,  5.40it/s][A
 39%|███▉      | 86/221 [00:31<00:28,  4.81it/s][A
 39%|███▉      | 87/221 [00:32<00:41,  3.24it/s][A
 40%|███▉      | 88/221 [00:33<00:48,  2.72it/s][A
 40%|████      | 89/221 [00:34<01:33,  1.42it/s][A
 41%|████      | 90/221 [00:34<01:20,  1.63it/s][A
 41%|████      | 91/221 [00:35<01:03,  2.06it/s][A
 42%|████▏     | 92/221 [00:35<00:55,  2.31it/s][A
 42%|████▏     | 93/221 [00:35<01:01,  2.09it/s][A
 43%|████▎     | 94/221 [00:36<00:59,  2.14it/s][A
 43%|████▎     | 95/221 [00:36<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:37<00:51,  2.44it/s][A
 44%|████▍     | 97/221 [00:37<00:44,  2.82it/s][A
 44%|████▍     | 98/221 [00:37<00:44,  2.76it/s][A
 45%|████▍     | 99/221 [00:37<00:39,  3.06it/s][A
 45%|████▌     | 100/221 [00:38<00:39,  3.06it/s][A
 46%|████▌     | 101/221 [00:38<00:36,  3.27it/s][A
 46%|████▌     | 102/221 [00:39<00:43,  2.75it/s][A
 47%|████▋     | 103/221 [00:39<00:40,  2.91it/s][A[h264 @ 0x563543a9c540] mmco: unref short failure
[h264 @ 0x563543a9c540] mmco: unref short failure

 47%|████▋     | 104/221 [00:39<00:34,  3.40it/s][A
 48%|████▊     | 105/221 [00:39<00:38,  3.00it/s][A
 48%|████▊     | 106/221 [00:40<01:01,  1.88it/s][A
 48%|████▊     | 107/221 [00:41<00:50,  2.25it/s][A
 49%|████▉     | 108/221 [00:41<00:48,  2.34it/s][A
 49%|████▉     | 109/221 [00:41<00:43,  2.55it/s][A
 50%|████▉     | 110/221 [00:42<00:42,  2.61it/s][A
 50%|█████     | 111/221 [00:42<00:53,  2.06it/s][A
 51%|█████     | 112/221 [00:43<00:49,  2.19it/s][A
 51%|█████     | 113/221 [00:43<00:43,  2.49it/s][A
 52%|█████▏    | 114/221 [00:43<00:33,  3.18it/s][A
 52%|█████▏    | 115/221 [00:43<00:26,  3.93it/s][A
 52%|█████▏    | 116/221 [00:48<02:51,  1.63s/it][A
 53%|█████▎    | 117/221 [00:48<02:07,  1.23s/it][A
 53%|█████▎    | 118/221 [00:49<01:35,  1.08it/s][A
 54%|█████▍    | 119/221 [00:49<01:14,  1.37it/s][A
 54%|█████▍    | 120/221 [00:49<00:59,  1.69it/s][A
 55%|█████▍    | 121/221 [00:49<00:46,  2.17it/s][A
 55%|█████▌    | 122/221 [00:50<00:41,  2.37it/s][A
 56%|█████▌    | 123/221 [00:50<00:36,  2.72it/s][A
 56%|█████▌    | 124/221 [00:50<00:32,  3.02it/s][A
 57%|█████▋    | 125/221 [00:50<00:29,  3.24it/s][A
 57%|█████▋    | 126/221 [00:51<00:33,  2.85it/s][A
 57%|█████▋    | 127/221 [00:52<00:41,  2.26it/s][A
 58%|█████▊    | 128/221 [00:52<00:39,  2.35it/s][A
 58%|█████▊    | 129/221 [00:52<00:36,  2.53it/s][A
 59%|█████▉    | 130/221 [00:52<00:30,  2.95it/s][A
 59%|█████▉    | 131/221 [00:53<00:24,  3.68it/s][A
 60%|█████▉    | 132/221 [00:53<00:23,  3.76it/s][A
 60%|██████    | 133/221 [00:53<00:27,  3.20it/s][A
 61%|██████    | 134/221 [00:54<00:26,  3.27it/s][A
 61%|██████    | 135/221 [00:54<00:29,  2.96it/s][A
 62%|██████▏   | 136/221 [00:54<00:29,  2.87it/s][A
 62%|██████▏   | 137/221 [00:55<00:26,  3.19it/s][A
 62%|██████▏   | 138/221 [00:55<00:25,  3.21it/s][A
 63%|██████▎   | 139/221 [00:56<00:34,  2.40it/s][A
 63%|██████▎   | 140/221 [00:56<00:31,  2.61it/s][A
 64%|██████▍   | 141/221 [00:56<00:26,  3.03it/s][A
 64%|██████▍   | 142/221 [00:56<00:25,  3.05it/s][A
 65%|██████▍   | 143/221 [00:57<00:37,  2.07it/s][A
 65%|██████▌   | 144/221 [00:57<00:30,  2.54it/s][A
 66%|██████▌   | 145/221 [00:58<00:23,  3.27it/s][A
 66%|██████▌   | 146/221 [00:58<00:18,  4.02it/s][A
 67%|██████▋   | 147/221 [00:58<00:17,  4.35it/s][A
 67%|██████▋   | 148/221 [00:58<00:17,  4.12it/s][A
 67%|██████▋   | 149/221 [00:58<00:15,  4.75it/s][A
 68%|██████▊   | 150/221 [00:58<00:14,  4.76it/s][A[h264 @ 0x5576dfbea040] mmco: unref short failure

 68%|██████▊   | 151/221 [01:00<00:35,  1.97it/s][A
 69%|██████▉   | 152/221 [01:00<00:40,  1.70it/s][A
 69%|██████▉   | 153/221 [01:01<00:34,  1.97it/s][A
 70%|██████▉   | 154/221 [01:01<00:32,  2.04it/s][A
 70%|███████   | 155/221 [01:01<00:28,  2.33it/s][A
 71%|███████   | 156/221 [01:02<00:23,  2.75it/s][A[h264 @ 0x5586530d0680] mmco: unref short failure
[h264 @ 0x5586530d0680] mmco: unref short failure
[h264 @ 0x5577287ba500] mmco: unref short failure
[h264 @ 0x5577287ba500] mmco: unref short failure

 71%|███████   | 157/221 [01:04<00:52,  1.21it/s][A
 71%|███████▏  | 158/221 [01:04<00:40,  1.54it/s][A
 72%|███████▏  | 159/221 [01:04<00:30,  2.05it/s][A
 72%|███████▏  | 160/221 [01:04<00:25,  2.39it/s][A
 73%|███████▎  | 161/221 [01:04<00:19,  3.08it/s][A
 73%|███████▎  | 162/221 [01:05<00:20,  2.81it/s][A
 74%|███████▍  | 163/221 [01:05<00:18,  3.07it/s][A
 74%|███████▍  | 164/221 [01:05<00:15,  3.70it/s][A
 75%|███████▍  | 165/221 [01:05<00:13,  4.08it/s][A
 75%|███████▌  | 166/221 [01:06<00:15,  3.50it/s][A
 76%|███████▌  | 167/221 [01:06<00:13,  4.07it/s][A[h264 @ 0x563554539480] mmco: unref short failure
[h264 @ 0x563554539480] mmco: unref short failure
[h264 @ 0x558636b60c00] mmco: unref short failure

 76%|███████▌  | 168/221 [01:08<00:38,  1.37it/s][A
 76%|███████▋  | 169/221 [01:08<00:29,  1.76it/s][A
 77%|███████▋  | 170/221 [01:08<00:28,  1.82it/s][A
 77%|███████▋  | 171/221 [01:09<00:23,  2.09it/s][A
 78%|███████▊  | 172/221 [01:09<00:20,  2.42it/s][A
 78%|███████▊  | 173/221 [01:09<00:16,  2.92it/s][A
 79%|███████▊  | 174/221 [01:09<00:12,  3.64it/s][A
 79%|███████▉  | 175/221 [01:10<00:12,  3.62it/s][A
 80%|███████▉  | 176/221 [01:10<00:12,  3.48it/s][A
 80%|████████  | 177/221 [01:10<00:10,  4.23it/s][A
 81%|████████  | 178/221 [01:11<00:15,  2.70it/s][A
 81%|████████  | 179/221 [01:11<00:15,  2.77it/s][A
 82%|████████▏ | 181/221 [01:11<00:10,  3.98it/s][A
 82%|████████▏ | 182/221 [01:11<00:08,  4.45it/s][A
 83%|████████▎ | 183/221 [01:12<00:08,  4.28it/s][A
 83%|████████▎ | 184/221 [01:12<00:08,  4.12it/s][A
 84%|████████▍ | 186/221 [01:12<00:07,  4.65it/s][A
 85%|████████▍ | 187/221 [01:12<00:06,  5.06it/s][A
 85%|████████▌ | 188/221 [01:13<00:06,  4.72it/s][A
 86%|████████▌ | 189/221 [01:13<00:07,  4.56it/s][A
 86%|████████▌ | 190/221 [01:13<00:08,  3.71it/s][A
 87%|████████▋ | 192/221 [01:14<00:06,  4.80it/s][A
 88%|████████▊ | 194/221 [01:15<00:08,  3.16it/s][A
 89%|████████▊ | 196/221 [01:15<00:05,  4.21it/s][A
 89%|████████▉ | 197/221 [01:15<00:05,  4.45it/s][A
 90%|████████▉ | 198/221 [01:15<00:05,  4.32it/s][A[h264 @ 0x557728091d40] mmco: unref short failure
[h264 @ 0x557728091d40] mmco: unref short failure
[h264 @ 0x557728091d40] mmco: unref short failure
[h264 @ 0x557728091d40] mmco: unref short failure

 90%|█████████ | 199/221 [01:15<00:05,  4.23it/s][A
 90%|█████████ | 200/221 [01:16<00:04,  4.22it/s][A
 91%|█████████ | 201/221 [01:16<00:04,  4.33it/s][A
 91%|█████████▏| 202/221 [01:16<00:04,  4.52it/s][A
 92%|█████████▏| 203/221 [01:16<00:04,  4.42it/s][A
 92%|█████████▏| 204/221 [01:16<00:03,  5.14it/s][A
 93%|█████████▎| 205/221 [01:17<00:02,  5.94it/s][A
 93%|█████████▎| 206/221 [01:17<00:03,  4.44it/s][A
 94%|█████████▍| 208/221 [01:17<00:02,  5.79it/s][A
 95%|█████████▌| 210/221 [01:17<00:01,  7.57it/s][A
 95%|█████████▌| 211/221 [01:18<00:01,  5.40it/s][A
 96%|█████████▌| 212/221 [01:18<00:01,  5.26it/s][A
 97%|█████████▋| 214/221 [01:18<00:01,  4.51it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  4.56it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  4.38it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  3.80it/s][A[h264 @ 0x56355ebcce40] mmco: unref short failure
[h264 @ 0x56355ebcce40] mmco: unref short failure

 99%|█████████▊| 218/221 [01:20<00:00,  3.50it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  3.25it/s][A[h264 @ 0x5577287babc0] mmco: unref short failure

100%|█████████▉| 220/221 [01:24<00:01,  1.40s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.04s/it][A100%|██████████| 221/221 [01:24<00:00,  2.61it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:12,  3.05it/s][A
  1%|          | 2/221 [00:00<01:07,  3.25it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.32it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.30it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.32it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.34it/s][A[h264 @ 0x557726b2c900] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.32it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.34it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.34it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.36it/s][A
  6%|▌         | 13/221 [00:03<01:01,  3.37it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.38it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.36it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.37it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.38it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.39it/s][A09/17/2024 04:19:53 - INFO - __main__ -   current idx Y91Zr480Tn4.67 from finetune_area returns wrong image/video, use 103848 instead.

  9%|▊         | 19/221 [00:05<01:00,  3.36it/s][A
  9%|▉         | 20/221 [00:05<01:00,  3.34it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.36it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.36it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.33it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.37it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.31it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.33it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.34it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.34it/s][A
 15%|█▍        | 33/221 [00:09<00:57,  3.28it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.25it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.29it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.32it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.32it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.27it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.31it/s][A[h264 @ 0x55771f845e00] mmco: unref short failure

 19%|█▊        | 41/221 [00:12<00:54,  3.32it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.35it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.36it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.37it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.38it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.35it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.35it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.37it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.38it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.38it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.39it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.39it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.39it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.38it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.39it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.39it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.40it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.37it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 60/221 [00:17<00:48,  3.35it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.36it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.32it/s][A
 29%|██▊       | 63/221 [00:18<00:47,  3.32it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.28it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.31it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.34it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.35it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.36it/s][A
 31%|███       | 69/221 [00:20<00:45,  3.37it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.38it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.39it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.40it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.40it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.40it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.40it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.40it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.41it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.41it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.41it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.41it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.41it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.41it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.13it/s][A
  1%|          | 2/221 [00:00<01:02,  3.53it/s][A
  1%|▏         | 3/221 [00:00<01:11,  3.04it/s][A
  2%|▏         | 4/221 [00:01<00:56,  3.87it/s][A
  2%|▏         | 5/221 [00:01<00:52,  4.10it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.20it/s][A
  4%|▎         | 8/221 [00:02<00:59,  3.58it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.65it/s][A
  5%|▍         | 10/221 [00:02<00:53,  3.93it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.58it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.73it/s][A
  6%|▌         | 13/221 [00:03<01:19,  2.60it/s][A
  6%|▋         | 14/221 [00:03<01:04,  3.20it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.17it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.02it/s][A
  8%|▊         | 17/221 [00:05<01:17,  2.64it/s][A
  8%|▊         | 18/221 [00:05<01:17,  2.63it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.73it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.24it/s][A
 10%|▉         | 22/221 [00:06<00:47,  4.23it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.36it/s][A
 11%|█▏        | 25/221 [00:06<00:45,  4.30it/s][A
 12%|█▏        | 26/221 [00:07<00:50,  3.84it/s][A
 12%|█▏        | 27/221 [00:07<00:46,  4.14it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.68it/s][A
 13%|█▎        | 29/221 [00:08<00:59,  3.25it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.40it/s][A
 14%|█▍        | 31/221 [00:08<00:53,  3.56it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.76it/s][A
 15%|█▍        | 33/221 [00:09<00:48,  3.90it/s][A
 15%|█▌        | 34/221 [00:09<00:52,  3.53it/s][A
 16%|█▌        | 35/221 [00:09<00:54,  3.41it/s][A
 16%|█▋        | 36/221 [00:10<00:53,  3.47it/s][A
 17%|█▋        | 37/221 [00:10<00:50,  3.65it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.52it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.78it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.47it/s][A
 19%|█▉        | 42/221 [00:11<00:45,  3.89it/s][A
 19%|█▉        | 43/221 [00:12<00:54,  3.27it/s][A
 20%|█▉        | 44/221 [00:12<00:55,  3.19it/s][A
 20%|██        | 45/221 [00:12<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:13<00:55,  3.14it/s][A
 21%|██▏       | 47/221 [00:13<00:47,  3.63it/s][A
 22%|██▏       | 48/221 [00:13<00:40,  4.29it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  4.95it/s][A
 23%|██▎       | 50/221 [00:13<00:39,  4.29it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.80it/s][A
 24%|██▍       | 53/221 [00:14<00:37,  4.46it/s][A
 24%|██▍       | 54/221 [00:14<00:38,  4.34it/s][A
 25%|██▍       | 55/221 [00:15<00:40,  4.10it/s][A
 25%|██▌       | 56/221 [00:15<00:41,  4.02it/s][A
 26%|██▌       | 57/221 [00:15<00:45,  3.62it/s][A
 26%|██▌       | 58/221 [00:15<00:37,  4.39it/s][A
 27%|██▋       | 59/221 [00:15<00:37,  4.34it/s][A
 27%|██▋       | 60/221 [00:16<00:37,  4.34it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.34it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.86it/s][A
 29%|██▊       | 63/221 [00:16<00:34,  4.60it/s][A
 29%|██▉       | 64/221 [00:17<00:36,  4.36it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.31it/s][A
 30%|██▉       | 66/221 [00:17<00:46,  3.37it/s][A
 30%|███       | 67/221 [00:18<00:57,  2.69it/s][A
 31%|███       | 68/221 [00:18<00:52,  2.92it/s][A
 31%|███       | 69/221 [00:19<00:53,  2.85it/s][A
 32%|███▏      | 70/221 [00:19<00:45,  3.34it/s][A
 32%|███▏      | 71/221 [00:19<00:47,  3.13it/s][A
 33%|███▎      | 72/221 [00:19<00:52,  2.86it/s][A
 33%|███▎      | 73/221 [00:20<00:48,  3.06it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.26it/s][A
 34%|███▍      | 75/221 [00:20<00:45,  3.23it/s][A
 34%|███▍      | 76/221 [00:21<00:39,  3.66it/s][A
 35%|███▍      | 77/221 [00:21<00:36,  3.96it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.47it/s][A
 36%|███▌      | 79/221 [00:21<00:42,  3.38it/s][A
 36%|███▌      | 80/221 [00:22<00:38,  3.71it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.84it/s][A
 37%|███▋      | 82/221 [00:22<00:35,  3.93it/s][A
 38%|███▊      | 83/221 [00:22<00:29,  4.61it/s][A
 38%|███▊      | 84/221 [00:23<00:38,  3.60it/s][A
 38%|███▊      | 85/221 [00:23<00:33,  4.00it/s][A
 39%|███▉      | 86/221 [00:23<00:37,  3.59it/s][A
 39%|███▉      | 87/221 [00:24<00:44,  3.01it/s][A
 40%|███▉      | 88/221 [00:24<00:42,  3.15it/s][A
 40%|████      | 89/221 [00:24<00:42,  3.11it/s][A
 41%|████      | 90/221 [00:25<00:44,  2.95it/s][A
 41%|████      | 91/221 [00:25<00:38,  3.38it/s][A
 42%|████▏     | 92/221 [00:25<00:37,  3.43it/s][A
 42%|████▏     | 93/221 [00:25<00:41,  3.11it/s][A
 43%|████▎     | 94/221 [00:26<00:38,  3.30it/s][A
 43%|████▎     | 95/221 [00:26<00:46,  2.70it/s][A
 43%|████▎     | 96/221 [00:27<00:44,  2.79it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.86it/s][A
 44%|████▍     | 98/221 [00:27<00:42,  2.89it/s][A
 45%|████▍     | 99/221 [00:27<00:37,  3.24it/s][A
 45%|████▌     | 100/221 [00:28<00:32,  3.72it/s][A
 46%|████▌     | 101/221 [00:28<00:27,  4.29it/s][A
 46%|████▌     | 102/221 [00:28<00:31,  3.76it/s][A
 47%|████▋     | 103/221 [00:28<00:29,  4.05it/s][A
 47%|████▋     | 104/221 [00:29<00:24,  4.69it/s][A
 48%|████▊     | 105/221 [00:29<00:29,  3.99it/s][A
 48%|████▊     | 106/221 [00:29<00:34,  3.29it/s][A
 48%|████▊     | 107/221 [00:29<00:30,  3.75it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.17it/s][A
 49%|████▉     | 109/221 [00:30<00:28,  3.96it/s][A
 50%|████▉     | 110/221 [00:30<00:29,  3.81it/s][A
 50%|█████     | 111/221 [00:31<00:32,  3.38it/s][A
 51%|█████     | 112/221 [00:31<00:36,  3.02it/s][A
 51%|█████     | 113/221 [00:31<00:33,  3.23it/s][A
 52%|█████▏    | 115/221 [00:32<00:25,  4.18it/s][A
 52%|█████▏    | 116/221 [00:32<00:24,  4.25it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.13it/s][A
 53%|█████▎    | 118/221 [00:32<00:28,  3.60it/s][A
 54%|█████▍    | 119/221 [00:33<00:33,  3.02it/s][A
 54%|█████▍    | 120/221 [00:33<00:33,  3.00it/s][A
 55%|█████▍    | 121/221 [00:33<00:28,  3.52it/s][A
 55%|█████▌    | 122/221 [00:34<00:26,  3.73it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.85it/s][A
 56%|█████▌    | 124/221 [00:34<00:29,  3.24it/s][A
 57%|█████▋    | 125/221 [00:35<00:36,  2.60it/s][A
 57%|█████▋    | 126/221 [00:35<00:33,  2.87it/s][A
 57%|█████▋    | 127/221 [00:36<00:37,  2.50it/s][A
 58%|█████▊    | 128/221 [00:36<00:33,  2.80it/s][A
 58%|█████▊    | 129/221 [00:36<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:36<00:26,  3.44it/s][A
 59%|█████▉    | 131/221 [00:37<00:23,  3.78it/s][A
 60%|█████▉    | 132/221 [00:37<00:25,  3.51it/s][A
 60%|██████    | 133/221 [00:37<00:31,  2.80it/s][A
 61%|██████    | 134/221 [00:38<00:38,  2.29it/s][A
 61%|██████    | 135/221 [00:38<00:29,  2.95it/s][A
 62%|██████▏   | 136/221 [00:38<00:29,  2.92it/s][A
 62%|██████▏   | 137/221 [00:39<00:26,  3.20it/s][A
 62%|██████▏   | 138/221 [00:39<00:25,  3.30it/s][A
 63%|██████▎   | 139/221 [00:39<00:27,  2.93it/s][A
 63%|██████▎   | 140/221 [00:40<00:24,  3.29it/s][A
 64%|██████▍   | 141/221 [00:40<00:25,  3.14it/s][A
 64%|██████▍   | 142/221 [00:40<00:22,  3.45it/s][A
 65%|██████▍   | 143/221 [00:41<00:24,  3.15it/s][A
 65%|██████▌   | 144/221 [00:41<00:21,  3.51it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.41it/s][A
 66%|██████▌   | 146/221 [00:41<00:22,  3.36it/s][A
 67%|██████▋   | 147/221 [00:42<00:19,  3.82it/s][A
 67%|██████▋   | 148/221 [00:42<00:21,  3.35it/s][A
 67%|██████▋   | 149/221 [00:42<00:21,  3.29it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.46it/s][A
 68%|██████▊   | 151/221 [00:43<00:26,  2.68it/s][A
 69%|██████▉   | 152/221 [00:44<00:34,  2.00it/s][A
 69%|██████▉   | 153/221 [00:44<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:44<00:25,  2.63it/s][A
 70%|███████   | 155/221 [00:45<00:27,  2.39it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.72it/s][A
 71%|███████   | 157/221 [00:46<00:22,  2.80it/s][A
 71%|███████▏  | 158/221 [00:46<00:23,  2.66it/s][A
 72%|███████▏  | 159/221 [00:46<00:20,  3.04it/s][A
 72%|███████▏  | 160/221 [00:46<00:18,  3.31it/s][A
 73%|███████▎  | 161/221 [00:47<00:15,  3.79it/s][A
 73%|███████▎  | 162/221 [00:47<00:14,  4.14it/s][A
 74%|███████▍  | 163/221 [00:47<00:14,  4.10it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.55it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.66it/s][A
 75%|███████▌  | 166/221 [00:48<00:13,  3.98it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  4.04it/s][A
 76%|███████▌  | 168/221 [00:48<00:14,  3.74it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.49it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.08it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.64it/s][A
 78%|███████▊  | 172/221 [00:50<00:17,  2.76it/s][A
 78%|███████▊  | 173/221 [00:50<00:16,  2.83it/s][A
 79%|███████▊  | 174/221 [00:50<00:14,  3.23it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  3.01it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.44it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.56it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.62it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.76it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.37it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.40it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.30it/s][A
 83%|████████▎ | 184/221 [00:53<00:11,  3.36it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.96it/s][A
 84%|████████▍ | 186/221 [00:54<00:11,  2.97it/s][A
 85%|████████▍ | 187/221 [00:54<00:10,  3.35it/s][A
 85%|████████▌ | 188/221 [00:55<00:10,  3.29it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.57it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  3.07it/s][A
 86%|████████▋ | 191/221 [00:55<00:07,  3.82it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.09it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.50it/s][A
 88%|████████▊ | 194/221 [00:56<00:06,  3.89it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  4.05it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.17it/s][A
 89%|████████▉ | 197/221 [00:57<00:08,  2.86it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.62it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  2.96it/s][A
 90%|█████████ | 200/221 [00:58<00:07,  2.93it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.35it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.21it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.40it/s][A
 92%|█████████▏| 204/221 [00:59<00:05,  3.33it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.59it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.81it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.05it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.34it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.32it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.54it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.86it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.43it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.45it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.08it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.90it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.85it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.04it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.26it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.06it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.45it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.03it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'area_r1': 40.5, 'area_recall': '40.5/66.7/76.1', 'area_ravg': 61.1}
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'forward_r1': 38.8, 'forward_recall': '38.8/66.9/77.5', 'forward_ravg': 61.0}
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'area_video_r1': 39.7, 'area_video_recall': '39.7/67.3/78.4', 'area_video_ravg': 61.8}
09/17/2024 04:22:01 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 04:22:01 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'area_video_r1': 51.8, 'area_video_recall': '51.8/74.7/81.9', 'area_video_ravg': 69.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/73.0/81.6', 'area_video_back_ravg': 67.6}
09/17/2024 04:22:01 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 04:22:01 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/65.0/74.8', 'video_ravg': 58.9}
09/17/2024 04:22:01 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 04:22:01 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 04:22:01 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 699--===========

09/17/2024 04:22:01 - INFO - __main__ -   {'video_r1': 51.1, 'video_recall': '51.1/75.2/82.0', 'video_ravg': 69.5}
09/17/2024 04:22:01 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 04:22:01 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 04:22:26 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009600222110748291, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.107271671295166, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.3268883228302, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.4437601566314697}
 24%|██▍       | 700/2910 [4:26:29<83:00:54, 135.23s/it][h264 @ 0x55772df14400] mmco: unref short failure
 24%|██▍       | 701/2910 [4:26:33<58:50:54, 95.90s/it] [h264 @ 0x5556e41ed4c0] mmco: unref short failure
 24%|██▍       | 702/2910 [4:26:38<41:57:54, 68.42s/it] 24%|██▍       | 703/2910 [4:26:43<30:15:45, 49.36s/it] 24%|██▍       | 704/2910 [4:26:48<22:09:08, 36.15s/it][h264 @ 0x5556c926dec0] mmco: unref short failure
[h264 @ 0x5556c926dec0] mmco: unref short failure
 24%|██▍       | 705/2910 [4:26:54<16:32:48, 27.02s/it][h264 @ 0x55863b9e2580] mmco: unref short failure
 24%|██▍       | 706/2910 [4:26:59<12:38:21, 20.65s/it][h264 @ 0x56355e3e1f40] mmco: unref short failure
[h264 @ 0x55568c777cc0] mmco: unref short failure
[h264 @ 0x5556e0b5d100] mmco: unref short failure
[h264 @ 0x5556e0b5d100] mmco: unref short failure
[h264 @ 0x5586514ffa80] mmco: unref short failure
[h264 @ 0x5586514ffa80] mmco: unref short failure
[h264 @ 0x558651cf3b40] mmco: unref short failure
[h264 @ 0x558651cf3b40] mmco: unref short failure
 24%|██▍       | 707/2910 [4:27:07<10:18:09, 16.84s/it] 24%|██▍       | 708/2910 [4:27:15<8:32:04, 13.95s/it] [h264 @ 0x563546160700] mmco: unref short failure
[h264 @ 0x563546160700] mmco: unref short failure
 24%|██▍       | 709/2910 [4:27:21<7:10:28, 11.74s/it] 24%|██▍       | 710/2910 [4:27:29<6:22:27, 10.43s/it][h264 @ 0x56354d0e8a00] mmco: unref short failure
[h264 @ 0x56354d0e8a00] mmco: unref short failure
[h264 @ 0x56354d0e8a00] mmco: unref short failure
[h264 @ 0x55772dead6c0] mmco: unref short failure
[h264 @ 0x55772dead6c0] mmco: unref short failure
[h264 @ 0x5556e19d3c80] mmco: unref short failure
[h264 @ 0x55864c392080] mmco: unref short failure
[h264 @ 0x55864c392080] mmco: unref short failure
 24%|██▍       | 711/2910 [4:27:35<5:33:07,  9.09s/it] 24%|██▍       | 712/2910 [4:27:42<5:11:55,  8.51s/it][h264 @ 0x5556c8fdb6c0] mmco: unref short failure
[h264 @ 0x55771cc0e580] mmco: unref short failure
 25%|██▍       | 713/2910 [4:27:48<4:46:37,  7.83s/it] 25%|██▍       | 714/2910 [4:27:54<4:22:43,  7.18s/it] 25%|██▍       | 715/2910 [4:27:59<4:05:56,  6.72s/it][h264 @ 0x55864c081740] mmco: unref short failure
[h264 @ 0x55864c081740] mmco: unref short failure
[h264 @ 0x5556cadef740] mmco: unref short failure
[h264 @ 0x5556cadef740] mmco: unref short failure
[h264 @ 0x56355f5cdac0] mmco: unref short failure
[h264 @ 0x56355f5cdac0] mmco: unref short failure
[h264 @ 0x56355f5cdac0] mmco: unref short failure
[h264 @ 0x56355f5cdac0] mmco: unref short failure
[h264 @ 0x55863d0a27c0] mmco: unref short failure
[h264 @ 0x55863d0a27c0] mmco: unref short failure
[h264 @ 0x55863d0a27c0] mmco: unref short failure
[h264 @ 0x55864e320540] mmco: unref short failure
[h264 @ 0x55863587c8c0] mmco: unref short failure
 25%|██▍       | 716/2910 [4:28:27<8:00:16, 13.13s/it][h264 @ 0x5556c4c7f340] mmco: unref short failure
[h264 @ 0x5556c4c7f340] mmco: unref short failure
[h264 @ 0x55864b2e5240] mmco: unref short failure
 25%|██▍       | 717/2910 [4:28:47<9:08:26, 15.01s/it][h264 @ 0x5556d2cfd340] mmco: unref short failure
[h264 @ 0x5556d2cfd340] mmco: unref short failure
[h264 @ 0x55772cb40440] mmco: unref short failure
[h264 @ 0x55772cb40440] mmco: unref short failure
 25%|██▍       | 718/2910 [4:28:58<8:31:25, 14.00s/it][h264 @ 0x558642c23d80] mmco: unref short failure
[h264 @ 0x563551994a80] mmco: unref short failure
[h264 @ 0x5556d0f55f00] mmco: unref short failure
[h264 @ 0x5556d0f55f00] mmco: unref short failure
 25%|██▍       | 719/2910 [4:29:12<8:24:28, 13.82s/it][h264 @ 0x5556dffa5540] mmco: unref short failure
 25%|██▍       | 720/2910 [4:29:19<7:11:28, 11.82s/it][h264 @ 0x563548165240] mmco: unref short failure
[h264 @ 0x563548165240] mmco: unref short failure
[h264 @ 0x563546acc740] mmco: unref short failure
[h264 @ 0x563546acc740] mmco: unref short failure
[h264 @ 0x558643ea2280] mmco: unref short failure
[h264 @ 0x558643ea2280] mmco: unref short failure
[h264 @ 0x557733f44f80] mmco: unref short failure
 25%|██▍       | 721/2910 [4:29:28<6:44:41, 11.09s/it][h264 @ 0x56355bb8c2c0] mmco: unref short failure
[h264 @ 0x56355bb8c2c0] mmco: unref short failure
[h264 @ 0x55568bc01300] mmco: unref short failure
[h264 @ 0x55568bc01300] mmco: unref short failure
[h264 @ 0x55568bc01300] mmco: unref short failure
[h264 @ 0x55568bc01300] mmco: unref short failure
[h264 @ 0x5556da158580] mmco: unref short failure
[h264 @ 0x5556da158580] mmco: unref short failure
[h264 @ 0x55864d451280] mmco: unref short failure
[h264 @ 0x55864d451280] mmco: unref short failure
 25%|██▍       | 722/2910 [4:29:42<7:15:38, 11.95s/it][h264 @ 0x5577327d0480] mmco: unref short failure
 25%|██▍       | 723/2910 [4:29:49<6:23:21, 10.52s/it][h264 @ 0x557735d0c5c0] mmco: unref short failure
[h264 @ 0x557735d0c5c0] mmco: unref short failure
[h264 @ 0x563544894cc0] mmco: unref short failure
[h264 @ 0x55773683ec80] mmco: unref short failure
[h264 @ 0x5556d1950880] mmco: unref short failure
[h264 @ 0x5556d1950880] mmco: unref short failure
[h264 @ 0x56354cf0c1c0] mmco: unref short failure
[h264 @ 0x563551c8d800] mmco: unref short failure
[h264 @ 0x563551c8d800] mmco: unref short failure
[h264 @ 0x557717816900] mmco: unref short failure
[h264 @ 0x557717816900] mmco: unref short failure
[h264 @ 0x5556e0b95500] mmco: unref short failure
[h264 @ 0x5556e0b95500] mmco: unref short failure
 25%|██▍       | 724/2910 [4:30:55<16:20:57, 26.92s/it][h264 @ 0x56355b69d8c0] mmco: unref short failure
[h264 @ 0x56355b69d8c0] mmco: unref short failure
09/17/2024 04:26:57 - INFO - __main__ -   current idx OtwONFkH6Us.36 from finetune_area returns wrong image/video, use 112849 instead.
[h264 @ 0x56355eb91a00] mmco: unref short failure
[h264 @ 0x56355eb91a00] mmco: unref short failure
[h264 @ 0x56355eb91a00] mmco: unref short failure
[h264 @ 0x56355eb91a00] mmco: unref short failure
[h264 @ 0x55771780cac0] mmco: unref short failure
[h264 @ 0x55771780cac0] mmco: unref short failure
 25%|██▍       | 725/2910 [4:31:16<15:24:31, 25.39s/it][h264 @ 0x5556e3772080] mmco: unref short failure
[h264 @ 0x5556e3772080] mmco: unref short failure
 25%|██▍       | 726/2910 [4:31:32<13:31:26, 22.29s/it][h264 @ 0x5556ceedda40] mmco: unref short failure
 25%|██▍       | 727/2910 [4:31:44<11:43:07, 19.33s/it][h264 @ 0x5635588ba400] mmco: unref short failure
[h264 @ 0x5635588ba400] mmco: unref short failure
 25%|██▌       | 728/2910 [4:31:51<9:27:21, 15.60s/it] [h264 @ 0x563556a78a40] mmco: unref short failure
[h264 @ 0x558658c00b00] mmco: unref short failure
 25%|██▌       | 729/2910 [4:32:04<8:58:12, 14.81s/it] 25%|██▌       | 730/2910 [4:32:10<7:29:22, 12.37s/it] 25%|██▌       | 731/2910 [4:32:17<6:21:25, 10.50s/it][h264 @ 0x55864d259b40] mmco: unref short failure
[h264 @ 0x5577309d2880] mmco: unref short failure
09/17/2024 04:28:27 - INFO - __main__ -   current idx BcbIxaIlq2k.29 from finetune_area returns wrong image/video, use 19799 instead.
[h264 @ 0x55772ed6bb40] mmco: unref short failure
[h264 @ 0x55568c72ad80] mmco: unref short failure
[h264 @ 0x55568bdfca00] mmco: unref short failure
[h264 @ 0x55568bdfca00] mmco: unref short failure
[h264 @ 0x55568bdfca00] mmco: unref short failure
[h264 @ 0x55568bdfca00] mmco: unref short failure
[h264 @ 0x5556d0580a00] mmco: unref short failure
[h264 @ 0x5556d0580a00] mmco: unref short failure
[h264 @ 0x55863703d600] mmco: unref short failure
[h264 @ 0x55863703d600] mmco: unref short failure
[h264 @ 0x55863703d600] mmco: unref short failure
[h264 @ 0x55863703d600] mmco: unref short failure
 25%|██▌       | 732/2910 [4:33:22<16:19:47, 26.99s/it][h264 @ 0x55863495d940] mmco: unref short failure
[h264 @ 0x55863495d940] mmco: unref short failure
[h264 @ 0x55568d4af500] mmco: unref short failure
[h264 @ 0x55568d4af500] mmco: unref short failure
[h264 @ 0x563549b609c0] mmco: unref short failure
[h264 @ 0x563549b609c0] mmco: unref short failure
 25%|██▌       | 733/2910 [4:33:43<15:15:22, 25.23s/it][h264 @ 0x55864f20be00] mmco: unref short failure
[h264 @ 0x55864f20be00] mmco: unref short failure
[h264 @ 0x55864f20be00] mmco: unref short failure
[h264 @ 0x55864f20be00] mmco: unref short failure
[h264 @ 0x5556cab37900] mmco: unref short failure
 25%|██▌       | 734/2910 [4:33:57<13:09:15, 21.76s/it][h264 @ 0x5556d90b9ac0] mmco: unref short failure
 25%|██▌       | 735/2910 [4:34:07<11:00:07, 18.21s/it][h264 @ 0x558632d58400] mmco: unref short failure
[h264 @ 0x55773680fa40] mmco: unref short failure
[h264 @ 0x55773680fa40] mmco: unref short failure
[h264 @ 0x558633347fc0] mmco: unref short failure
[h264 @ 0x558633347fc0] mmco: unref short failure
 25%|██▌       | 736/2910 [4:34:14<8:56:27, 14.81s/it] [h264 @ 0x5577308afec0] mmco: unref short failure
[h264 @ 0x5577308afec0] mmco: unref short failure
[h264 @ 0x5577308afec0] mmco: unref short failure
[h264 @ 0x5577308afec0] mmco: unref short failure
[h264 @ 0x5556d75c6780] mmco: unref short failure
[h264 @ 0x5556d75c6780] mmco: unref short failure
[h264 @ 0x5556d75c6780] mmco: unref short failure
 25%|██▌       | 737/2910 [4:34:25<8:16:51, 13.72s/it][h264 @ 0x55568d810280] mmco: unref short failure
[h264 @ 0x55568d810280] mmco: unref short failure
 25%|██▌       | 738/2910 [4:34:38<8:08:15, 13.49s/it] 25%|██▌       | 739/2910 [4:34:44<6:51:26, 11.37s/it][h264 @ 0x5576e10fac00] mmco: unref short failure
09/17/2024 04:30:49 - INFO - __main__ -   current idx FajCFx8uN-s.3 from finetune_area returns wrong image/video, use 68712 instead.
09/17/2024 04:30:53 - INFO - __main__ -   current idx Xkz6TCSh5Q0.11 from finetune_area returns wrong image/video, use 107601 instead.
[h264 @ 0x5556c74086c0] mmco: unref short failure
[h264 @ 0x557719304680] mmco: unref short failure
[h264 @ 0x557719304680] mmco: unref short failure
[h264 @ 0x5586348c7c80] mmco: unref short failure
[h264 @ 0x5586348c7c80] mmco: unref short failure
[h264 @ 0x5586348c7c80] mmco: unref short failure
[h264 @ 0x5586348c7c80] mmco: unref short failure
[h264 @ 0x5635448ca800] mmco: unref short failure
[h264 @ 0x5635448ca800] mmco: unref short failure
[h264 @ 0x5556e0ea23c0] mmco: unref short failure
[h264 @ 0x5556e0c94580] mmco: unref short failure
[h264 @ 0x5556e0c94580] mmco: unref short failure
[h264 @ 0x5556d75b63c0] mmco: unref short failure
[h264 @ 0x5556d75b63c0] mmco: unref short failure
[h264 @ 0x5576e1104980] mmco: unref short failure
[h264 @ 0x563546175340] mmco: unref short failure
09/17/2024 04:31:47 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 102652 instead.
 25%|██▌       | 740/2910 [4:35:49<16:27:17, 27.30s/it][h264 @ 0x5576df72d680] mmco: unref short failure
[h264 @ 0x5576df72d680] mmco: unref short failure
[h264 @ 0x56354b6fe800] mmco: unref short failure
[h264 @ 0x56354b6fe800] mmco: unref short failure
[h264 @ 0x55863981f740] mmco: unref short failure
 25%|██▌       | 741/2910 [4:36:16<16:30:18, 27.39s/it][h264 @ 0x5556e31eb9c0] mmco: unref short failure
[h264 @ 0x5556e31eb9c0] mmco: unref short failure
[h264 @ 0x5635414dc940] mmco: unref short failure
 25%|██▌       | 742/2910 [4:36:35<14:51:03, 24.66s/it][h264 @ 0x56356213ff00] mmco: unref short failure
[h264 @ 0x56356213ff00] mmco: unref short failure
 26%|██▌       | 743/2910 [4:36:42<11:44:55, 19.52s/it][h264 @ 0x5576de26e780] mmco: unref short failure
[h264 @ 0x5576de26e780] mmco: unref short failure
 26%|██▌       | 744/2910 [4:36:55<10:27:50, 17.39s/it][h264 @ 0x55771cbdd800] mmco: unref short failure
[h264 @ 0x55772aff4080] mmco: unref short failure
 26%|██▌       | 745/2910 [4:37:02<8:41:17, 14.45s/it] [h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x563545a17600] mmco: unref short failure
[h264 @ 0x5577188f2900] mmco: unref short failure
 26%|██▌       | 746/2910 [4:37:13<7:57:49, 13.25s/it] 26%|██▌       | 747/2910 [4:37:19<6:44:14, 11.21s/it][h264 @ 0x557728f6a680] mmco: unref short failure
[h264 @ 0x557728f6a680] mmco: unref short failure
[h264 @ 0x55865759cf80] mmco: unref short failure
[h264 @ 0x55773680fcc0] mmco: unref short failure
[h264 @ 0x5556d755b8c0] mmco: unref short failure
[h264 @ 0x5556d755b8c0] mmco: unref short failure
[h264 @ 0x5576df1239c0] mmco: unref short failure
[h264 @ 0x5576df093000] mmco: unref short failure
[h264 @ 0x5576df093000] mmco: unref short failure
[h264 @ 0x5576df093000] mmco: unref short failure
[h264 @ 0x5576df093000] mmco: unref short failure
[h264 @ 0x5576df093000] mmco: unref short failure
09/17/2024 04:33:57 - INFO - __main__ -   current idx RYisfAHcVJU.5 from finetune_area returns wrong image/video, use 10067 instead.
 26%|██▌       | 748/2910 [4:38:10<13:58:47, 23.28s/it][h264 @ 0x563548ccd440] mmco: unref short failure
[h264 @ 0x5586325ed600] mmco: unref short failure
[h264 @ 0x5586325ed600] mmco: unref short failure
[h264 @ 0x563540a46cc0] mmco: unref short failure
[h264 @ 0x5576de3b19c0] mmco: unref short failure
[h264 @ 0x5576de4e11c0] mmco: unref short failure
[h264 @ 0x5576de8d2b80] mmco: unref short failure
[h264 @ 0x5576de8d2b80] mmco: unref short failure
[h264 @ 0x56354eded900] mmco: unref short failure
[h264 @ 0x56354eded900] mmco: unref short failure
[h264 @ 0x558646980680] mmco: unref short failure
[h264 @ 0x558646980680] mmco: unref short failure
 26%|██▌       | 749/2910 [4:38:54<17:34:30, 29.28s/it]09/17/2024 04:34:53 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 04:34:53 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557718d8dc80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55568becc9c0] mmco: unref short failure
[h264 @ 0x558639399580] mmco: unref short failure
[h264 @ 0x558633bd4980] mmco: unref short failure
[h264 @ 0x56355eb91800] mmco: unref short failure
[h264 @ 0x56355eb91800] mmco: unref short failure
[h264 @ 0x55771862cb00] mmco: unref short failure
[h264 @ 0x5556cf7a98c0] mmco: unref short failure
[h264 @ 0x5556cf7a98c0] mmco: unref short failure
not have audios xrsV4ybwavc.40
[h264 @ 0x557732773600] mmco: unref short failure
[h264 @ 0x557732773600] mmco: unref short failure
[h264 @ 0x558634354a00] mmco: unref short failure
[h264 @ 0x558634354a00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:35,  2.31it/s][A
  1%|          | 2/221 [00:00<01:49,  2.01it/s][A
  1%|▏         | 3/221 [00:01<01:16,  2.85it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.43it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.18it/s][A
  3%|▎         | 7/221 [00:01<00:47,  4.49it/s][A
  4%|▎         | 8/221 [00:02<01:01,  3.45it/s][A
  4%|▍         | 9/221 [00:02<00:55,  3.84it/s][A
  5%|▍         | 10/221 [00:03<01:19,  2.67it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.33it/s][A
  5%|▌         | 12/221 [00:03<01:04,  3.24it/s][A
  6%|▌         | 13/221 [00:03<00:54,  3.83it/s][A
  6%|▋         | 14/221 [00:04<01:19,  2.62it/s][A
  7%|▋         | 15/221 [00:04<01:08,  3.02it/s][A
  7%|▋         | 16/221 [00:04<01:04,  3.16it/s][A
  8%|▊         | 17/221 [00:05<00:58,  3.46it/s][A
  8%|▊         | 18/221 [00:05<00:55,  3.64it/s][A
  9%|▊         | 19/221 [00:05<00:46,  4.30it/s][A
  9%|▉         | 20/221 [00:05<00:42,  4.67it/s][A
 10%|▉         | 21/221 [00:05<00:42,  4.72it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.08it/s][A
 10%|█         | 23/221 [00:06<00:41,  4.76it/s][A
 11%|█         | 24/221 [00:06<00:39,  5.04it/s][A
 11%|█▏        | 25/221 [00:06<00:37,  5.21it/s][A
 12%|█▏        | 26/221 [00:06<00:38,  5.01it/s][A
 13%|█▎        | 28/221 [00:07<00:43,  4.47it/s][A
 13%|█▎        | 29/221 [00:07<00:37,  5.10it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.71it/s][A
 14%|█▍        | 31/221 [00:07<00:39,  4.78it/s][A
 14%|█▍        | 32/221 [00:08<00:34,  5.47it/s][A
 15%|█▍        | 33/221 [00:08<00:44,  4.20it/s][A
 15%|█▌        | 34/221 [00:08<00:38,  4.81it/s][A
 16%|█▌        | 35/221 [00:08<00:37,  5.01it/s][A
 16%|█▋        | 36/221 [00:09<00:40,  4.56it/s][A
 17%|█▋        | 37/221 [00:09<01:09,  2.66it/s][A
 17%|█▋        | 38/221 [00:10<01:06,  2.74it/s][A
 18%|█▊        | 39/221 [00:10<00:53,  3.43it/s][A09/17/2024 04:37:22 - INFO - __main__ -   current idx 1HAnFYVSFkk.3 from finetune_area returns wrong image/video, use 89597 instead.

 18%|█▊        | 40/221 [00:10<00:54,  3.33it/s][A
 19%|█▊        | 41/221 [00:10<00:45,  3.96it/s][A
 19%|█▉        | 42/221 [00:11<01:03,  2.81it/s][A
 19%|█▉        | 43/221 [00:11<00:50,  3.51it/s][A
 20%|█▉        | 44/221 [00:11<00:43,  4.09it/s][A[h264 @ 0x557734272280] mmco: unref short failure

 20%|██        | 45/221 [00:12<01:29,  1.96it/s][A
 21%|██        | 46/221 [00:13<01:40,  1.74it/s][A
 21%|██▏       | 47/221 [00:15<02:50,  1.02it/s][A
 22%|██▏       | 48/221 [00:15<02:07,  1.36it/s][A
 22%|██▏       | 49/221 [00:15<01:40,  1.71it/s][A
 23%|██▎       | 50/221 [00:15<01:15,  2.27it/s][A
 23%|██▎       | 51/221 [00:16<00:59,  2.84it/s][A
 24%|██▎       | 52/221 [00:16<00:52,  3.20it/s][A
 24%|██▍       | 53/221 [00:16<00:43,  3.84it/s][A[h264 @ 0x55771ebe8c00] mmco: unref short failure
[h264 @ 0x55771ebe8c00] mmco: unref short failure
[h264 @ 0x55771ebe8c00] mmco: unref short failure
[h264 @ 0x55771ebe8c00] mmco: unref short failure

 24%|██▍       | 54/221 [00:19<03:13,  1.16s/it][A[h264 @ 0x55772c585080] mmco: unref short failure
[h264 @ 0x55772c585080] mmco: unref short failure
[h264 @ 0x55772c585080] mmco: unref short failure

 25%|██▍       | 55/221 [00:20<02:38,  1.05it/s][A
 25%|██▌       | 56/221 [00:20<02:00,  1.37it/s][A
 26%|██▌       | 57/221 [00:20<01:35,  1.71it/s][A
 26%|██▌       | 58/221 [00:20<01:11,  2.28it/s][A
 27%|██▋       | 59/221 [00:20<00:56,  2.86it/s][A
 27%|██▋       | 60/221 [00:21<01:02,  2.56it/s][A
 28%|██▊       | 61/221 [00:21<00:55,  2.90it/s][A
 28%|██▊       | 62/221 [00:21<00:52,  3.05it/s][A
 29%|██▊       | 63/221 [00:21<00:44,  3.56it/s][A
 29%|██▉       | 64/221 [00:22<00:42,  3.72it/s][A
 29%|██▉       | 65/221 [00:22<00:39,  3.93it/s][A
 30%|██▉       | 66/221 [00:23<00:59,  2.61it/s][A
 30%|███       | 67/221 [00:23<01:05,  2.36it/s][A
 31%|███       | 68/221 [00:23<00:53,  2.86it/s][A
 31%|███       | 69/221 [00:24<01:07,  2.25it/s][A
 32%|███▏      | 70/221 [00:24<00:54,  2.79it/s][A[h264 @ 0x5577192f3140] mmco: unref short failure
[h264 @ 0x5577192f3140] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:03,  1.22s/it][A
 33%|███▎      | 72/221 [00:28<02:18,  1.08it/s][A
 33%|███▎      | 73/221 [00:28<01:50,  1.34it/s][A
 33%|███▎      | 74/221 [00:28<01:22,  1.78it/s][A
 34%|███▍      | 75/221 [00:28<01:09,  2.12it/s][A
 34%|███▍      | 76/221 [00:29<00:58,  2.47it/s][A
 35%|███▍      | 77/221 [00:29<01:02,  2.30it/s][A
 35%|███▌      | 78/221 [00:29<00:56,  2.54it/s][A
 36%|███▌      | 79/221 [00:30<01:06,  2.15it/s][A
 36%|███▌      | 80/221 [00:30<00:52,  2.66it/s][A
 37%|███▋      | 81/221 [00:30<00:46,  3.03it/s][A
 37%|███▋      | 82/221 [00:31<00:37,  3.67it/s][A
 38%|███▊      | 83/221 [00:31<00:33,  4.15it/s][A
 38%|███▊      | 84/221 [00:31<00:29,  4.61it/s][A
 38%|███▊      | 85/221 [00:31<00:29,  4.55it/s][A
 39%|███▉      | 86/221 [00:31<00:34,  3.90it/s][A
 39%|███▉      | 87/221 [00:32<00:46,  2.86it/s][A
 40%|███▉      | 88/221 [00:32<00:49,  2.67it/s][A
 40%|████      | 89/221 [00:35<01:56,  1.13it/s][A
 41%|████      | 90/221 [00:35<01:30,  1.44it/s][A
 41%|████      | 91/221 [00:35<01:08,  1.91it/s][A
 42%|████▏     | 92/221 [00:35<00:56,  2.29it/s][A
 42%|████▏     | 93/221 [00:36<00:58,  2.18it/s][A
 43%|████▎     | 94/221 [00:36<00:55,  2.30it/s][A
 43%|████▎     | 95/221 [00:36<00:43,  2.90it/s][A
 43%|████▎     | 96/221 [00:36<00:40,  3.10it/s][A
 44%|████▍     | 97/221 [00:37<00:38,  3.26it/s][A
 44%|████▍     | 98/221 [00:37<00:36,  3.37it/s][A
 45%|████▍     | 99/221 [00:37<00:29,  4.10it/s][A
 45%|████▌     | 100/221 [00:37<00:29,  4.14it/s][A
 46%|████▌     | 101/221 [00:38<00:26,  4.57it/s][A
 46%|████▌     | 102/221 [00:38<00:33,  3.55it/s][A
 47%|████▋     | 103/221 [00:38<00:29,  3.97it/s][A
 47%|████▋     | 104/221 [00:38<00:27,  4.25it/s][A
 48%|████▊     | 105/221 [00:39<00:35,  3.31it/s][A[h264 @ 0x5556d95b9c40] mmco: unref short failure
[h264 @ 0x5556d95b9c40] mmco: unref short failure

 48%|████▊     | 106/221 [00:40<00:55,  2.07it/s][A
 48%|████▊     | 107/221 [00:40<00:44,  2.56it/s][A
 49%|████▉     | 108/221 [00:40<00:38,  2.91it/s][A
 49%|████▉     | 109/221 [00:40<00:34,  3.28it/s][A
 50%|████▉     | 110/221 [00:40<00:30,  3.69it/s][A
 50%|█████     | 111/221 [00:41<00:36,  3.06it/s][A
 51%|█████     | 112/221 [00:41<00:31,  3.46it/s][A
 51%|█████     | 113/221 [00:41<00:31,  3.43it/s][A
 52%|█████▏    | 114/221 [00:42<00:27,  3.83it/s][A
 52%|█████▏    | 115/221 [00:42<00:23,  4.44it/s][A[h264 @ 0x5556d1950180] mmco: unref short failure
[h264 @ 0x5556d1950180] mmco: unref short failure

 52%|█████▏    | 116/221 [00:47<02:53,  1.65s/it][A
 53%|█████▎    | 117/221 [00:47<02:10,  1.26s/it][A
 53%|█████▎    | 118/221 [00:47<01:36,  1.07it/s][A[h264 @ 0x558645dd6080] mmco: unref short failure

 54%|█████▍    | 119/221 [00:48<01:14,  1.36it/s][A
 54%|█████▍    | 120/221 [00:48<01:00,  1.68it/s][A
 55%|█████▍    | 121/221 [00:48<00:47,  2.12it/s][A
 55%|█████▌    | 122/221 [00:48<00:42,  2.35it/s][A
 56%|█████▌    | 123/221 [00:48<00:34,  2.87it/s][A
 56%|█████▌    | 124/221 [00:49<00:29,  3.26it/s][A
 57%|█████▋    | 125/221 [00:49<00:33,  2.88it/s][A
 57%|█████▋    | 126/221 [00:50<00:33,  2.81it/s][A
 57%|█████▋    | 127/221 [00:50<00:39,  2.39it/s][A
 58%|█████▊    | 128/221 [00:51<00:39,  2.35it/s][A
 58%|█████▊    | 129/221 [00:51<00:36,  2.53it/s][A
 59%|█████▉    | 130/221 [00:51<00:31,  2.88it/s][A
 60%|█████▉    | 132/221 [00:51<00:21,  4.13it/s][A
 60%|██████    | 133/221 [00:52<00:24,  3.63it/s][A
 61%|██████    | 134/221 [00:52<00:24,  3.61it/s][A
 61%|██████    | 135/221 [00:52<00:26,  3.28it/s][A
 62%|██████▏   | 136/221 [00:53<00:28,  2.97it/s][A
 62%|██████▏   | 137/221 [00:53<00:25,  3.34it/s][A
 62%|██████▏   | 138/221 [00:53<00:25,  3.25it/s][A
 63%|██████▎   | 139/221 [00:54<00:29,  2.75it/s][A
 63%|██████▎   | 140/221 [00:54<00:28,  2.83it/s][A
 64%|██████▍   | 141/221 [00:54<00:26,  3.05it/s][A
 64%|██████▍   | 142/221 [00:55<00:26,  2.99it/s][A
 65%|██████▍   | 143/221 [00:55<00:32,  2.42it/s][A
 65%|██████▌   | 144/221 [00:56<00:28,  2.71it/s][A
 66%|██████▌   | 145/221 [00:56<00:24,  3.14it/s][A[h264 @ 0x558633d74200] mmco: unref short failure

 66%|██████▌   | 146/221 [00:56<00:22,  3.37it/s][A
 67%|██████▋   | 147/221 [00:56<00:19,  3.80it/s][A
 67%|██████▋   | 148/221 [00:56<00:18,  3.88it/s][A
 67%|██████▋   | 149/221 [00:57<00:15,  4.68it/s][A
 68%|██████▊   | 150/221 [00:57<00:14,  4.88it/s][A[h264 @ 0x563557de4280] mmco: unref short failure
[h264 @ 0x563557de4280] mmco: unref short failure

 68%|██████▊   | 151/221 [00:58<00:36,  1.92it/s][A
 69%|██████▉   | 152/221 [00:59<00:37,  1.83it/s][A09/17/2024 04:38:11 - INFO - __main__ -   current idx h0KWf1ksq5Y.21 from finetune_area returns wrong image/video, use 50171 instead.

 69%|██████▉   | 153/221 [00:59<00:31,  2.13it/s][A
 70%|██████▉   | 154/221 [00:59<00:29,  2.25it/s][A
 70%|███████   | 155/221 [00:59<00:24,  2.75it/s][A
 71%|███████   | 156/221 [01:00<00:19,  3.30it/s][A[h264 @ 0x5576e029f080] mmco: unref short failure
[h264 @ 0x563558f1f580] mmco: unref short failure
[h264 @ 0x563558f1f580] mmco: unref short failure
[h264 @ 0x558633d74480] mmco: unref short failure
[h264 @ 0x558633d74480] mmco: unref short failure

 71%|███████   | 157/221 [01:03<01:11,  1.11s/it][A[h264 @ 0x5556e317ddc0] mmco: unref short failure

 71%|███████▏  | 158/221 [01:03<00:54,  1.15it/s][A
 72%|███████▏  | 159/221 [01:03<00:40,  1.53it/s][A
 72%|███████▏  | 160/221 [01:03<00:32,  1.88it/s][A
 73%|███████▎  | 161/221 [01:03<00:24,  2.47it/s][A
 73%|███████▎  | 162/221 [01:04<00:24,  2.42it/s][A
 74%|███████▍  | 163/221 [01:04<00:21,  2.70it/s][A
 74%|███████▍  | 164/221 [01:04<00:17,  3.22it/s][A
 75%|███████▍  | 165/221 [01:05<00:15,  3.68it/s][A[h264 @ 0x56355da24880] mmco: unref short failure
[h264 @ 0x56355da24880] mmco: unref short failure

 75%|███████▌  | 166/221 [01:05<00:17,  3.20it/s][A
 76%|███████▌  | 167/221 [01:05<00:14,  3.64it/s][A
 76%|███████▌  | 168/221 [01:07<00:46,  1.14it/s][A
 76%|███████▋  | 169/221 [01:08<00:36,  1.42it/s][A
 77%|███████▋  | 170/221 [01:08<00:31,  1.63it/s][A
 77%|███████▋  | 171/221 [01:08<00:24,  2.00it/s][A
 78%|███████▊  | 172/221 [01:09<00:21,  2.26it/s][A
 78%|███████▊  | 173/221 [01:09<00:17,  2.70it/s][A
 79%|███████▊  | 174/221 [01:09<00:13,  3.40it/s][A
 79%|███████▉  | 175/221 [01:09<00:14,  3.26it/s][A
 80%|███████▉  | 176/221 [01:10<00:13,  3.23it/s][A
 80%|████████  | 177/221 [01:10<00:11,  4.00it/s][A
 81%|████████  | 178/221 [01:10<00:14,  3.02it/s][A
 81%|████████  | 179/221 [01:11<00:14,  2.85it/s][A
 82%|████████▏ | 181/221 [01:11<00:09,  4.00it/s][A
 82%|████████▏ | 182/221 [01:13<00:24,  1.60it/s][A
 83%|████████▎ | 183/221 [01:13<00:19,  1.95it/s][A
 83%|████████▎ | 184/221 [01:13<00:18,  2.02it/s][A
 84%|████████▎ | 185/221 [01:13<00:13,  2.60it/s][A
 84%|████████▍ | 186/221 [01:14<00:12,  2.89it/s][A
 85%|████████▍ | 187/221 [01:14<00:09,  3.53it/s][A
 85%|████████▌ | 188/221 [01:14<00:08,  3.88it/s][A
 86%|████████▌ | 189/221 [01:14<00:08,  3.88it/s][A
 86%|████████▌ | 190/221 [01:15<00:08,  3.55it/s][A
 86%|████████▋ | 191/221 [01:15<00:06,  4.38it/s][A
 87%|████████▋ | 192/221 [01:15<00:06,  4.31it/s][A
 87%|████████▋ | 193/221 [01:15<00:05,  4.75it/s][A
 88%|████████▊ | 194/221 [01:16<00:11,  2.36it/s][A
 88%|████████▊ | 195/221 [01:16<00:08,  2.97it/s][A
 89%|████████▉ | 197/221 [01:16<00:05,  4.02it/s][A
 90%|████████▉ | 198/221 [01:17<00:05,  4.17it/s][A
 90%|█████████ | 199/221 [01:17<00:05,  4.26it/s][A
 90%|█████████ | 200/221 [01:17<00:05,  4.13it/s][A[h264 @ 0x55863e902540] mmco: unref short failure

 91%|█████████ | 201/221 [01:17<00:04,  4.30it/s][A[h264 @ 0x56355e9ca7c0] mmco: unref short failure

 91%|█████████▏| 202/221 [01:18<00:04,  4.41it/s][A
 92%|█████████▏| 203/221 [01:18<00:04,  3.84it/s][A
 92%|█████████▏| 204/221 [01:18<00:03,  4.43it/s][A
 93%|█████████▎| 205/221 [01:18<00:03,  4.98it/s][A
 93%|█████████▎| 206/221 [01:18<00:03,  4.27it/s][A
 94%|█████████▍| 208/221 [01:19<00:02,  5.42it/s][A
 95%|█████████▍| 209/221 [01:19<00:02,  5.39it/s][A
 95%|█████████▌| 211/221 [01:19<00:02,  4.79it/s][A
 96%|█████████▌| 212/221 [01:20<00:02,  4.47it/s][A
 96%|█████████▋| 213/221 [01:20<00:01,  4.98it/s][A
 97%|█████████▋| 214/221 [01:20<00:01,  3.53it/s][A
 97%|█████████▋| 215/221 [01:21<00:01,  3.83it/s][A[h264 @ 0x56356311a380] mmco: unref short failure

 98%|█████████▊| 216/221 [01:21<00:01,  3.84it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  3.39it/s][A
 99%|█████████▊| 218/221 [01:21<00:00,  3.39it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  3.44it/s][A[h264 @ 0x56355dbc9280] mmco: unref short failure

100%|█████████▉| 220/221 [01:26<00:01,  1.53s/it][A
100%|██████████| 221/221 [01:26<00:00,  1.12s/it][A100%|██████████| 221/221 [01:26<00:00,  2.54it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.41it/s][A
  1%|          | 2/221 [00:00<01:04,  3.40it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.32it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.35it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.31it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.33it/s][A
  4%|▍         | 9/221 [00:02<01:05,  3.24it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.25it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.29it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.32it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.30it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.33it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.34it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.36it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.32it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.30it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 21/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.28it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:07<01:00,  3.27it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.31it/s][A[h264 @ 0x55771c71ed40] mmco: unref short failure

 12%|█▏        | 26/221 [00:07<00:58,  3.33it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.34it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.36it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.37it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.38it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.31it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.34it/s][A[h264 @ 0x5556c531fe80] mmco: unref short failure
[h264 @ 0x5556c531fe80] mmco: unref short failure

 15%|█▌        | 34/221 [00:10<00:55,  3.36it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.37it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.38it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.31it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.32it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:12<00:56,  3.23it/s][A
 19%|█▊        | 41/221 [00:12<00:55,  3.24it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.28it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.32it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.30it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.29it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.32it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.32it/s][A[h264 @ 0x55568b549400] mmco: unref short failure
[h264 @ 0x55568b549400] mmco: unref short failure

 22%|██▏       | 48/221 [00:14<00:51,  3.34it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.31it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.33it/s][A
 23%|██▎       | 51/221 [00:15<00:54,  3.11it/s][A
 24%|██▎       | 52/221 [00:15<00:53,  3.17it/s][A
 24%|██▍       | 53/221 [00:16<00:51,  3.24it/s][A
 24%|██▍       | 54/221 [00:16<00:51,  3.27it/s][A
 25%|██▍       | 55/221 [00:16<00:51,  3.24it/s][A
 25%|██▌       | 56/221 [00:16<00:50,  3.25it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.35it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.37it/s][A
 28%|██▊       | 62/221 [00:18<00:47,  3.32it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.35it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.37it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.38it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.38it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.39it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.39it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.40it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.40it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.40it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.40it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.41it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.41it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.41it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.41it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.40it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.40it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.40it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.41it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.41it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.41it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.41it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.13it/s][A
  1%|          | 2/221 [00:00<01:00,  3.65it/s][A
  1%|▏         | 3/221 [00:00<01:09,  3.13it/s][A
  2%|▏         | 4/221 [00:01<00:54,  4.01it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.26it/s][A
  3%|▎         | 7/221 [00:01<00:47,  4.54it/s][A
  4%|▎         | 8/221 [00:01<00:54,  3.94it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.91it/s][A
  5%|▍         | 10/221 [00:02<00:50,  4.19it/s][A
  5%|▍         | 11/221 [00:02<00:56,  3.75it/s][A
  5%|▌         | 12/221 [00:03<00:54,  3.86it/s][A
  6%|▌         | 13/221 [00:03<01:21,  2.54it/s][A
  6%|▋         | 14/221 [00:03<01:07,  3.05it/s][A
  7%|▋         | 15/221 [00:04<01:08,  3.01it/s][A
  7%|▋         | 16/221 [00:04<01:08,  3.00it/s][A
  8%|▊         | 17/221 [00:05<01:15,  2.69it/s][A
  8%|▊         | 18/221 [00:05<01:15,  2.70it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.29it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.34it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.22it/s][A
 11%|█▏        | 25/221 [00:06<00:46,  4.17it/s][A
 12%|█▏        | 26/221 [00:07<00:51,  3.79it/s][A
 12%|█▏        | 27/221 [00:07<00:47,  4.12it/s][A
 13%|█▎        | 28/221 [00:07<00:48,  3.94it/s][A
 13%|█▎        | 29/221 [00:07<00:54,  3.52it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.41it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.46it/s][A
 14%|█▍        | 32/221 [00:08<00:52,  3.61it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:09<00:56,  3.34it/s][A
 16%|█▌        | 35/221 [00:09<00:57,  3.22it/s][A
 16%|█▋        | 36/221 [00:09<00:55,  3.32it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.54it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.58it/s][A
 18%|█▊        | 39/221 [00:10<00:48,  3.74it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.47it/s][A
 19%|█▉        | 42/221 [00:11<00:45,  3.92it/s][A
 19%|█▉        | 43/221 [00:11<00:55,  3.24it/s][A
 20%|█▉        | 44/221 [00:12<00:55,  3.20it/s][A
 20%|██        | 45/221 [00:12<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:12<00:54,  3.19it/s][A
 21%|██▏       | 47/221 [00:13<00:47,  3.67it/s][A
 22%|██▏       | 48/221 [00:13<00:39,  4.41it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  5.02it/s][A
 23%|██▎       | 50/221 [00:13<00:36,  4.64it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.83it/s][A
 24%|██▍       | 53/221 [00:14<00:40,  4.18it/s][A
 24%|██▍       | 54/221 [00:14<00:40,  4.12it/s][A
 25%|██▍       | 55/221 [00:14<00:41,  4.03it/s][A
 25%|██▌       | 56/221 [00:15<00:41,  3.99it/s][A
 26%|██▌       | 57/221 [00:15<00:44,  3.70it/s][A
 26%|██▌       | 58/221 [00:15<00:36,  4.47it/s][A
 27%|██▋       | 59/221 [00:15<00:36,  4.47it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.44it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.41it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.85it/s][A
 29%|██▊       | 63/221 [00:16<00:35,  4.41it/s][A
 29%|██▉       | 64/221 [00:17<00:35,  4.39it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.32it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.54it/s][A
 30%|███       | 67/221 [00:18<00:55,  2.78it/s][A
 31%|███       | 68/221 [00:18<00:51,  2.99it/s][A
 31%|███       | 69/221 [00:18<00:54,  2.77it/s][A
 32%|███▏      | 70/221 [00:19<00:46,  3.23it/s][A
 32%|███▏      | 71/221 [00:19<00:50,  2.99it/s][A
 33%|███▎      | 72/221 [00:19<00:52,  2.81it/s][A
 33%|███▎      | 73/221 [00:20<00:48,  3.07it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:20<00:44,  3.29it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.73it/s][A
 35%|███▍      | 77/221 [00:21<00:36,  3.99it/s][A
 35%|███▌      | 78/221 [00:21<00:42,  3.33it/s][A
 36%|███▌      | 79/221 [00:21<00:40,  3.48it/s][A
 36%|███▌      | 80/221 [00:21<00:37,  3.79it/s][A
 37%|███▋      | 81/221 [00:22<00:36,  3.85it/s][A
 37%|███▋      | 82/221 [00:22<00:38,  3.60it/s][A
 38%|███▊      | 83/221 [00:22<00:34,  4.03it/s][A
 38%|███▊      | 84/221 [00:23<00:43,  3.18it/s][A
 38%|███▊      | 85/221 [00:23<00:38,  3.55it/s][A
 39%|███▉      | 86/221 [00:23<00:41,  3.24it/s][A
 39%|███▉      | 87/221 [00:24<00:49,  2.71it/s][A
 40%|███▉      | 88/221 [00:24<00:43,  3.05it/s][A
 40%|████      | 89/221 [00:24<00:42,  3.09it/s][A
 41%|████      | 90/221 [00:25<00:44,  2.93it/s][A
 41%|████      | 91/221 [00:25<00:39,  3.32it/s][A
 42%|████▏     | 92/221 [00:25<00:39,  3.27it/s][A
 42%|████▏     | 93/221 [00:26<00:46,  2.73it/s][A
 43%|████▎     | 94/221 [00:26<00:42,  3.00it/s][A
 43%|████▎     | 95/221 [00:27<00:49,  2.55it/s][A
 43%|████▎     | 96/221 [00:27<00:44,  2.79it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.84it/s][A
 44%|████▍     | 98/221 [00:28<00:42,  2.86it/s][A
 45%|████▍     | 99/221 [00:28<00:40,  3.01it/s][A
 45%|████▌     | 100/221 [00:28<00:34,  3.50it/s][A
 46%|████▌     | 101/221 [00:28<00:30,  3.98it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.49it/s][A
 47%|████▋     | 103/221 [00:29<00:31,  3.70it/s][A
 47%|████▋     | 104/221 [00:29<00:28,  4.12it/s][A
 48%|████▊     | 105/221 [00:29<00:31,  3.69it/s][A
 48%|████▊     | 106/221 [00:30<00:35,  3.21it/s][A
 48%|████▊     | 107/221 [00:30<00:31,  3.58it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.04it/s][A
 49%|████▉     | 109/221 [00:30<00:29,  3.83it/s][A
 50%|████▉     | 110/221 [00:31<00:30,  3.64it/s][A
 50%|█████     | 111/221 [00:31<00:31,  3.46it/s][A
 51%|█████     | 112/221 [00:31<00:34,  3.13it/s][A
 51%|█████     | 113/221 [00:32<00:32,  3.33it/s][A
 52%|█████▏    | 115/221 [00:32<00:25,  4.23it/s][A
 52%|█████▏    | 116/221 [00:32<00:24,  4.26it/s][A
 53%|█████▎    | 117/221 [00:32<00:25,  4.09it/s][A
 53%|█████▎    | 118/221 [00:33<00:28,  3.65it/s][A
 54%|█████▍    | 119/221 [00:33<00:32,  3.10it/s][A
 54%|█████▍    | 120/221 [00:34<00:32,  3.12it/s][A
 55%|█████▍    | 121/221 [00:34<00:27,  3.58it/s][A
 55%|█████▌    | 122/221 [00:34<00:25,  3.87it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.79it/s][A
 56%|█████▌    | 124/221 [00:35<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:35<00:36,  2.66it/s][A
 57%|█████▋    | 126/221 [00:35<00:32,  2.92it/s][A
 57%|█████▋    | 127/221 [00:36<00:36,  2.60it/s][A
 58%|█████▊    | 128/221 [00:36<00:31,  2.98it/s][A
 58%|█████▊    | 129/221 [00:36<00:25,  3.58it/s][A
 59%|█████▉    | 130/221 [00:37<00:26,  3.39it/s][A
 59%|█████▉    | 131/221 [00:37<00:23,  3.77it/s][A
 60%|█████▉    | 132/221 [00:37<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:38<00:29,  2.95it/s][A
 61%|██████    | 134/221 [00:38<00:36,  2.37it/s][A
 62%|██████▏   | 136/221 [00:39<00:28,  3.02it/s][A
 62%|██████▏   | 137/221 [00:39<00:25,  3.25it/s][A
 62%|██████▏   | 138/221 [00:39<00:25,  3.29it/s][A
 63%|██████▎   | 139/221 [00:40<00:26,  3.08it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.39it/s][A
 64%|██████▍   | 141/221 [00:40<00:26,  3.07it/s][A
 64%|██████▍   | 142/221 [00:40<00:23,  3.43it/s][A
 65%|██████▍   | 143/221 [00:41<00:24,  3.19it/s][A
 65%|██████▌   | 144/221 [00:41<00:22,  3.43it/s][A
 66%|██████▌   | 145/221 [00:41<00:22,  3.34it/s][A
 66%|██████▌   | 146/221 [00:42<00:22,  3.27it/s][A
 67%|██████▋   | 147/221 [00:42<00:19,  3.86it/s][A
 67%|██████▋   | 148/221 [00:42<00:20,  3.49it/s][A
 67%|██████▋   | 149/221 [00:42<00:20,  3.47it/s][A
 68%|██████▊   | 150/221 [00:43<00:19,  3.58it/s][A
 68%|██████▊   | 151/221 [00:43<00:25,  2.79it/s][A
 69%|██████▉   | 152/221 [00:44<00:33,  2.07it/s][A
 69%|██████▉   | 153/221 [00:44<00:28,  2.41it/s][A
 70%|██████▉   | 154/221 [00:44<00:24,  2.76it/s][A
 70%|███████   | 155/221 [00:45<00:25,  2.55it/s][A
 71%|███████   | 156/221 [00:45<00:23,  2.81it/s][A
 71%|███████   | 157/221 [00:46<00:21,  2.93it/s][A
 71%|███████▏  | 158/221 [00:46<00:22,  2.75it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.12it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.49it/s][A
 73%|███████▎  | 161/221 [00:47<00:14,  4.01it/s][A
 73%|███████▎  | 162/221 [00:47<00:13,  4.26it/s][A
 74%|███████▍  | 163/221 [00:47<00:14,  4.12it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.50it/s][A
 75%|███████▍  | 165/221 [00:47<00:13,  4.16it/s][A
 75%|███████▌  | 166/221 [00:48<00:14,  3.67it/s][A
 76%|███████▌  | 167/221 [00:48<00:14,  3.81it/s][A
 76%|███████▌  | 168/221 [00:48<00:14,  3.74it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.51it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.06it/s][A
 77%|███████▋  | 171/221 [00:50<00:18,  2.66it/s][A
 78%|███████▊  | 172/221 [00:50<00:18,  2.71it/s][A
 78%|███████▊  | 173/221 [00:50<00:17,  2.73it/s][A
 79%|███████▊  | 174/221 [00:50<00:15,  2.98it/s][A
 79%|███████▉  | 175/221 [00:51<00:16,  2.78it/s][A
 80%|███████▉  | 176/221 [00:51<00:14,  3.20it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.41it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.57it/s][A
 81%|████████  | 179/221 [00:52<00:14,  2.81it/s][A
 82%|████████▏ | 181/221 [00:53<00:12,  3.28it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.52it/s][A
 83%|████████▎ | 183/221 [00:53<00:12,  3.13it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.25it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.95it/s][A
 84%|████████▍ | 186/221 [00:54<00:11,  2.98it/s][A
 85%|████████▍ | 187/221 [00:55<00:10,  3.36it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.40it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.72it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.27it/s][A
 86%|████████▋ | 191/221 [00:56<00:07,  4.00it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.13it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.17it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.81it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  4.10it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.17it/s][A
 89%|████████▉ | 197/221 [00:57<00:08,  2.79it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.69it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  3.01it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.06it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.55it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.38it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.52it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.51it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.73it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.84it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.03it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.50it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.50it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.50it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.83it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.30it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.40it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.92it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.83it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.76it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.02it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.30it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.09it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.45it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.12it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'area_r1': 41.1, 'area_recall': '41.1/66.9/75.8', 'area_ravg': 61.2}
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'forward_r1': 38.1, 'forward_recall': '38.1/67.8/77.5', 'forward_ravg': 61.1}
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'area_video_r1': 39.6, 'area_video_recall': '39.6/67.6/78.3', 'area_video_ravg': 61.8}
09/17/2024 04:40:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 04:40:55 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'area_video_r1': 52.3, 'area_video_recall': '52.3/75.0/81.7', 'area_video_ravg': 69.6, 'area_video_back_r1': 49.4, 'area_video_back_recall': '49.4/73.4/82.1', 'area_video_back_ravg': 68.3}
09/17/2024 04:40:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 499=======

09/17/2024 04:40:55 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.9', 'area_video_ravg': 70.5, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/72.2/81.4', 'area_video_back_ravg': 67.3}
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/64.9/75.2', 'video_ravg': 59.0}
09/17/2024 04:40:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 04:40:55 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 04:40:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 749--===========

09/17/2024 04:40:55 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/75.0/81.9', 'video_ravg': 69.5}
09/17/2024 04:40:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 04:40:55 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 04:41:16 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.008197274059057236, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1165845394134521, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.150377035140991, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2751588821411133}
[h264 @ 0x563548ccd440] mmco: unref short failure
[h264 @ 0x563548ccd440] mmco: unref short failure
 26%|██▌       | 750/2910 [4:45:19<81:44:08, 136.23s/it][h264 @ 0x558640215d40] mmco: unref short failure
 26%|██▌       | 751/2910 [4:45:23<57:53:12, 96.52s/it] [h264 @ 0x5635604e6500] mmco: unref short failure
[h264 @ 0x558632aaf280] mmco: unref short failure
[h264 @ 0x558632aaf280] mmco: unref short failure
 26%|██▌       | 752/2910 [4:45:28<41:15:29, 68.83s/it][h264 @ 0x5556e0019ec0] mmco: unref short failure
 26%|██▌       | 753/2910 [4:45:33<29:46:32, 49.70s/it] 26%|██▌       | 754/2910 [4:45:38<21:44:12, 36.30s/it][h264 @ 0x5556dad11e80] mmco: unref short failure
[h264 @ 0x5556dad11e80] mmco: unref short failure
 26%|██▌       | 755/2910 [4:45:43<16:14:25, 27.13s/it][h264 @ 0x55771783e100] mmco: unref short failure
[h264 @ 0x55771783e100] mmco: unref short failure
[h264 @ 0x55771783e100] mmco: unref short failure
[h264 @ 0x55771783e100] mmco: unref short failure
[h264 @ 0x5556c6ef84c0] mmco: unref short failure
 26%|██▌       | 756/2910 [4:45:49<12:25:10, 20.76s/it] 26%|██▌       | 757/2910 [4:45:55<9:47:58, 16.39s/it] [h264 @ 0x563541e9fe40] mmco: unref short failure
[h264 @ 0x563541e9fe40] mmco: unref short failure
 26%|██▌       | 758/2910 [4:46:03<8:08:58, 13.63s/it][h264 @ 0x55863b11bb80] mmco: unref short failure
[h264 @ 0x55863b11bb80] mmco: unref short failure
[h264 @ 0x55863b11bb80] mmco: unref short failure
[h264 @ 0x55863b11bb80] mmco: unref short failure
 26%|██▌       | 759/2910 [4:46:09<6:53:50, 11.54s/it]09/17/2024 04:42:13 - INFO - __main__ -   current idx g5ifWFvvhk4.18 from finetune_area returns wrong image/video, use 144526 instead.
[h264 @ 0x5556dac1a6c0] mmco: unref short failure
[h264 @ 0x5556dac1a6c0] mmco: unref short failure
 26%|██▌       | 760/2910 [4:46:15<5:54:53,  9.90s/it][h264 @ 0x56354f0aa340] mmco: unref short failure
[h264 @ 0x56354f0aa340] mmco: unref short failure
[h264 @ 0x55771f489a40] mmco: unref short failure
 26%|██▌       | 761/2910 [4:46:22<5:20:42,  8.95s/it][h264 @ 0x5556d8fa5380] mmco: unref short failure
[h264 @ 0x5556d8fa5380] mmco: unref short failure
 26%|██▌       | 762/2910 [4:46:29<4:58:33,  8.34s/it][h264 @ 0x56354f87fd80] mmco: unref short failure
[h264 @ 0x56354f87fd80] mmco: unref short failure
[h264 @ 0x558641217c00] mmco: unref short failure
[h264 @ 0x558641217c00] mmco: unref short failure
 26%|██▌       | 763/2910 [4:46:36<4:48:05,  8.05s/it][h264 @ 0x5556e0ebe980] mmco: unref short failure
[h264 @ 0x5556e0ebe980] mmco: unref short failure
 26%|██▋       | 764/2910 [4:46:43<4:30:22,  7.56s/it][h264 @ 0x55568cf9b440] mmco: unref short failure
[h264 @ 0x563542215f80] mmco: unref short failure
 26%|██▋       | 765/2910 [4:46:52<4:44:30,  7.96s/it][h264 @ 0x563550c172c0] mmco: unref short failure
[h264 @ 0x563550c172c0] mmco: unref short failure
[h264 @ 0x5556c6863a80] mmco: unref short failure
[h264 @ 0x5576df152500] mmco: unref short failure
[h264 @ 0x5576df152500] mmco: unref short failure
 26%|██▋       | 766/2910 [4:47:24<9:06:52, 15.30s/it][h264 @ 0x5577198b4400] mmco: unref short failure
[h264 @ 0x5577198b4400] mmco: unref short failure
[h264 @ 0x5556d2edf540] mmco: unref short failure
 26%|██▋       | 767/2910 [4:47:39<9:00:15, 15.13s/it] 26%|██▋       | 768/2910 [4:47:48<7:55:09, 13.31s/it][h264 @ 0x5635604e69c0] mmco: unref short failure
[h264 @ 0x5635604e69c0] mmco: unref short failure
[h264 @ 0x558658c1c5c0] mmco: unref short failure
[h264 @ 0x558658c1c5c0] mmco: unref short failure
 26%|██▋       | 769/2910 [4:47:57<7:08:58, 12.02s/it][h264 @ 0x558638100740] mmco: unref short failure
[h264 @ 0x558638100740] mmco: unref short failure
 26%|██▋       | 770/2910 [4:48:06<6:37:08, 11.13s/it][h264 @ 0x563544e2cd00] mmco: unref short failure
[h264 @ 0x563544e2cd00] mmco: unref short failure
 26%|██▋       | 771/2910 [4:48:12<5:45:01,  9.68s/it] 27%|██▋       | 772/2910 [4:48:19<5:08:13,  8.65s/it][h264 @ 0x558636af87c0] mmco: unref short failure
[h264 @ 0x558636af87c0] mmco: unref short failure
[h264 @ 0x558636af87c0] mmco: unref short failure
[h264 @ 0x558636af87c0] mmco: unref short failure
[h264 @ 0x55863401f1c0] mmco: unref short failure
[h264 @ 0x55863401f1c0] mmco: unref short failure
 27%|██▋       | 773/2910 [4:48:32<5:59:01, 10.08s/it][h264 @ 0x55568bef22c0] mmco: unref short failure
[h264 @ 0x55568bef22c0] mmco: unref short failure
09/17/2024 04:44:38 - INFO - __main__ -   current idx 14WUuya94QE.50 from finetune_area returns wrong image/video, use 96207 instead.
[h264 @ 0x563541bbc840] mmco: unref short failure
[h264 @ 0x563541bbc840] mmco: unref short failure
[h264 @ 0x563541bbc840] mmco: unref short failure
[h264 @ 0x563541bbc840] mmco: unref short failure
[h264 @ 0x56355d8bd100] mmco: unref short failure
[h264 @ 0x56355d8bd100] mmco: unref short failure
[h264 @ 0x55863c490040] mmco: unref short failure
09/17/2024 04:44:58 - INFO - __main__ -   current idx al4svOv9kUI.2 from finetune_area returns wrong image/video, use 123346 instead.
[h264 @ 0x563556fe13c0] mmco: unref short failure
[h264 @ 0x557730760a00] mmco: unref short failure
[h264 @ 0x557730760a00] mmco: unref short failure
[h264 @ 0x557730760a00] mmco: unref short failure
[h264 @ 0x557730760a00] mmco: unref short failure
[h264 @ 0x558642ded800] mmco: unref short failure
[h264 @ 0x557717acecc0] mmco: unref short failure
[h264 @ 0x557717acecc0] mmco: unref short failure
[h264 @ 0x557718dce180] mmco: unref short failure
[h264 @ 0x557718dce180] mmco: unref short failure
[h264 @ 0x55568b3c2d40] mmco: unref short failure
[h264 @ 0x55568b3c2d40] mmco: unref short failure
[h264 @ 0x5556ce375e40] mmco: unref short failure
[h264 @ 0x5556ce375e40] mmco: unref short failure
[h264 @ 0x558636e66bc0] mmco: unref short failure
[h264 @ 0x558636e66bc0] mmco: unref short failure
 27%|██▋       | 774/2910 [4:49:47<17:28:24, 29.45s/it][h264 @ 0x5635490134c0] mmco: unref short failure
[h264 @ 0x5635490134c0] mmco: unref short failure
[h264 @ 0x5576de54e080] mmco: unref short failure
[h264 @ 0x5576de54e080] mmco: unref short failure
[h264 @ 0x5635425924c0] mmco: unref short failure
[h264 @ 0x55864a8e8b80] mmco: unref short failure
[h264 @ 0x55864a8e8b80] mmco: unref short failure
[h264 @ 0x55864a8e8b80] mmco: unref short failure
[h264 @ 0x5556c7846640] mmco: unref short failure
[h264 @ 0x56354a706440] mmco: unref short failure
[h264 @ 0x56354a706440] mmco: unref short failure
 27%|██▋       | 775/2910 [4:50:11<16:33:59, 27.93s/it][h264 @ 0x55568b4f7040] mmco: unref short failure
[h264 @ 0x55568b4f7040] mmco: unref short failure
 27%|██▋       | 776/2910 [4:50:18<12:49:03, 21.62s/it] 27%|██▋       | 777/2910 [4:50:25<10:12:28, 17.23s/it][h264 @ 0x5556e1156000] mmco: unref short failure
[h264 @ 0x5556e1156000] mmco: unref short failure
[h264 @ 0x5577206f9180] mmco: unref short failure
[h264 @ 0x5577206f9180] mmco: unref short failure
[h264 @ 0x5556d755b8c0] mmco: unref short failure
[h264 @ 0x5556d755b8c0] mmco: unref short failure
 27%|██▋       | 778/2910 [4:50:37<9:16:44, 15.67s/it] [h264 @ 0x5635413a0780] mmco: unref short failure
[h264 @ 0x5635413a0780] mmco: unref short failure
[h264 @ 0x5556e029ad40] mmco: unref short failure
[h264 @ 0x55771f936480] mmco: unref short failure
[h264 @ 0x55771f936480] mmco: unref short failure
 27%|██▋       | 779/2910 [4:50:43<7:35:25, 12.82s/it][h264 @ 0x55771d1c2340] mmco: unref short failure
[h264 @ 0x55771d1c2340] mmco: unref short failure
 27%|██▋       | 780/2910 [4:50:54<7:13:13, 12.20s/it][h264 @ 0x5576e11042c0] mmco: unref short failure
[h264 @ 0x5576e11042c0] mmco: unref short failure
[h264 @ 0x5576dfe2fc00] mmco: unref short failure
[h264 @ 0x5576dfe2fc00] mmco: unref short failure
 27%|██▋       | 781/2910 [4:51:01<6:21:13, 10.74s/it][h264 @ 0x5556d270d040] mmco: unref short failure
[h264 @ 0x5556cb99d3c0] mmco: unref short failure
[h264 @ 0x5556cb99d3c0] mmco: unref short failure
[h264 @ 0x55771bd611c0] mmco: unref short failure
[h264 @ 0x55771bd611c0] mmco: unref short failure
[h264 @ 0x55771d4046c0] mmco: unref short failure
[h264 @ 0x55771d4046c0] mmco: unref short failure
[h264 @ 0x55771d4046c0] mmco: unref short failure
[h264 @ 0x55771d4046c0] mmco: unref short failure
[h264 @ 0x563544e2cf80] mmco: unref short failure
[h264 @ 0x563544e2cf80] mmco: unref short failure
[h264 @ 0x5635412f5080] mmco: unref short failure
[h264 @ 0x5635412f5080] mmco: unref short failure
[h264 @ 0x563544558780] mmco: unref short failure
[h264 @ 0x563544558780] mmco: unref short failure
[h264 @ 0x56354f86eb40] mmco: unref short failure
[h264 @ 0x56354f86eb40] mmco: unref short failure
[h264 @ 0x56354f86eb40] mmco: unref short failure
[h264 @ 0x55772f1d1140] mmco: unref short failure
[h264 @ 0x55772f1d1140] mmco: unref short failure
[h264 @ 0x55771cb67b00] mmco: unref short failure
[h264 @ 0x55771cb67b00] mmco: unref short failure
09/17/2024 04:47:56 - INFO - __main__ -   current idx GAe_04vmNRQ.5 from finetune_area returns wrong image/video, use 133257 instead.
[h264 @ 0x557718cbe780] mmco: unref short failure
[h264 @ 0x557718cbe780] mmco: unref short failure
[h264 @ 0x557729977dc0] mmco: unref short failure
[h264 @ 0x557729977dc0] mmco: unref short failure
[h264 @ 0x5635463f6080] mmco: unref short failure
[h264 @ 0x5635463f6080] mmco: unref short failure
[h264 @ 0x56354ec64b80] mmco: unref short failure
[h264 @ 0x56354ec64b80] mmco: unref short failure
[h264 @ 0x55771b353c40] mmco: unref short failure
 27%|██▋       | 782/2910 [4:52:21<18:39:13, 31.56s/it][h264 @ 0x56354f87fd80] mmco: unref short failure
[h264 @ 0x56354f87fd80] mmco: unref short failure
[h264 @ 0x55864ff44800] mmco: unref short failure
[h264 @ 0x55864ff44800] mmco: unref short failure
 27%|██▋       | 783/2910 [4:52:39<16:08:54, 27.33s/it][h264 @ 0x55772b04a480] mmco: unref short failure
[h264 @ 0x55772b04a480] mmco: unref short failure
 27%|██▋       | 784/2910 [4:52:46<12:38:32, 21.41s/it][h264 @ 0x5556d2195680] mmco: unref short failure
[h264 @ 0x55771a30c280] mmco: unref short failure
[h264 @ 0x55771a30c280] mmco: unref short failure
[h264 @ 0x55771a30c280] mmco: unref short failure
 27%|██▋       | 785/2910 [4:52:52<9:50:52, 16.68s/it] [h264 @ 0x5556cc1b1480] mmco: unref short failure
[h264 @ 0x56355e9cac40] mmco: unref short failure
[h264 @ 0x56355e9cac40] mmco: unref short failure
[h264 @ 0x5556e31ebbc0] mmco: unref short failure
[h264 @ 0x55864a77be80] mmco: unref short failure
[h264 @ 0x55864a77be80] mmco: unref short failure
[h264 @ 0x5577224de480] mmco: unref short failure
[h264 @ 0x5577224de480] mmco: unref short failure
 27%|██▋       | 786/2910 [4:53:24<12:35:19, 21.34s/it][h264 @ 0x5576ded54200] mmco: unref short failure
 27%|██▋       | 787/2910 [4:53:32<10:08:28, 17.20s/it]09/17/2024 04:49:33 - INFO - __main__ -   current idx Ba46lyNCRP8.22 from finetune_area returns wrong image/video, use 18425 instead.
 27%|██▋       | 788/2910 [4:53:38<8:13:59, 13.97s/it] [h264 @ 0x56355b027a00] mmco: unref short failure
[h264 @ 0x56355b027a00] mmco: unref short failure
[h264 @ 0x56355b027a00] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 27%|██▋       | 789/2910 [4:53:44<6:51:54, 11.65s/it][h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x563544843dc0] mmco: unref short failure
[h264 @ 0x56355c759580] mmco: unref short failure
[h264 @ 0x56355c759580] mmco: unref short failure
[h264 @ 0x5586345f56c0] mmco: unref short failure
[h264 @ 0x5586345f56c0] mmco: unref short failure
09/17/2024 04:49:59 - INFO - __main__ -   current idx Y7G_DDBX8i4.3 from finetune_area returns wrong image/video, use 5065 instead.
[h264 @ 0x5577209d6d00] mmco: unref short failure
09/17/2024 04:50:04 - INFO - __main__ -   current idx hn6DOvhGJJU.6 from finetune_area returns wrong image/video, use 116214 instead.
[h264 @ 0x56354dfe4a80] mmco: unref short failure
[h264 @ 0x56354dfe4a80] mmco: unref short failure
[h264 @ 0x55772e1c7380] mmco: unref short failure
[h264 @ 0x55772e1c7380] mmco: unref short failure
[h264 @ 0x55772e1c7380] mmco: unref short failure
[h264 @ 0x55772e1c7380] mmco: unref short failure
09/17/2024 04:50:26 - INFO - __main__ -   current idx 1wKPYAWLNkA.112 from finetune_area returns wrong image/video, use 91421 instead.
[h264 @ 0x5576de54e900] mmco: unref short failure
[h264 @ 0x56354232aa00] mmco: unref short failure
[h264 @ 0x5556c66b4200] mmco: unref short failure
[h264 @ 0x5556c66b4200] mmco: unref short failure
 27%|██▋       | 790/2910 [4:54:45<15:33:14, 26.41s/it][h264 @ 0x5576de9461c0] mmco: unref short failure
[h264 @ 0x5635522c3800] mmco: unref short failure
[h264 @ 0x5635522c3800] mmco: unref short failure
 27%|██▋       | 791/2910 [4:55:04<14:14:30, 24.20s/it]09/17/2024 04:51:07 - INFO - __main__ -   current idx e2ba1avSYzg.223 from finetune_area returns wrong image/video, use 18959 instead.
[h264 @ 0x558637dd7ac0] mmco: unref short failure
[h264 @ 0x558637dd7ac0] mmco: unref short failure
 27%|██▋       | 792/2910 [4:55:20<12:45:51, 21.70s/it] 27%|██▋       | 793/2910 [4:55:27<10:06:26, 17.19s/it][h264 @ 0x5556d4500700] mmco: unref short failure
[h264 @ 0x55771c6ca540] mmco: unref short failure
[h264 @ 0x563543e0f8c0] mmco: unref short failure
09/17/2024 04:51:58 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 69991 instead.
 27%|██▋       | 794/2910 [4:56:01<13:02:59, 22.20s/it] 27%|██▋       | 795/2910 [4:56:07<10:12:49, 17.39s/it][h264 @ 0x55772d20ca80] mmco: unref short failure
[h264 @ 0x55772d20ca80] mmco: unref short failure
 27%|██▋       | 796/2910 [4:56:13<8:17:09, 14.11s/it]  27%|██▋       | 797/2910 [4:56:20<6:56:51, 11.84s/it][h264 @ 0x5556d0749040] mmco: unref short failure
[h264 @ 0x5556d0749040] mmco: unref short failure
[h264 @ 0x5556d7f20fc0] mmco: unref short failure
[h264 @ 0x5556d7f20fc0] mmco: unref short failure
[h264 @ 0x5576de54e900] mmco: unref short failure
[h264 @ 0x5576de54e900] mmco: unref short failure
[h264 @ 0x5576de54e900] mmco: unref short failure
[h264 @ 0x5576de54e900] mmco: unref short failure
[h264 @ 0x55568c3b1e00] mmco: unref short failure
[h264 @ 0x55568c3b1e00] mmco: unref short failure
[h264 @ 0x55568d481940] mmco: unref short failure
[h264 @ 0x55771f5e4680] mmco: unref short failure
[h264 @ 0x5635422a0680] mmco: unref short failure
[h264 @ 0x55772b04ab00] mmco: unref short failure
09/17/2024 04:53:15 - INFO - __main__ -   current idx bdHJRIWkgos.39 from finetune_area returns wrong image/video, use 64889 instead.
 27%|██▋       | 798/2910 [4:57:22<15:50:01, 26.99s/it][h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x56354439f6c0] mmco: unref short failure
[h264 @ 0x5635415707c0] mmco: unref short failure
[h264 @ 0x5635415707c0] mmco: unref short failure
[h264 @ 0x5635415707c0] mmco: unref short failure
[h264 @ 0x5635415707c0] mmco: unref short failure
 27%|██▋       | 799/2910 [4:57:31<12:38:22, 21.56s/it]09/17/2024 04:53:30 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 04:53:30 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 04:53:36 - INFO - __main__ -   current idx 85jT7k1nw1g.20 from finetune_area returns wrong image/video, use 89708 instead.
[h264 @ 0x5586367a6900] mmco: unref short failure
[h264 @ 0x5556c3f18d80] mmco: unref short failure
[h264 @ 0x55568c1a9100] mmco: unref short failure
[h264 @ 0x55568b4f7240] mmco: unref short failure
[h264 @ 0x55568b4f7240] mmco: unref short failure
[h264 @ 0x563559401b80] mmco: unref short failure
[h264 @ 0x563559401b80] mmco: unref short failure
[h264 @ 0x563559401b80] mmco: unref short failure
[h264 @ 0x563559401b80] mmco: unref short failure
[h264 @ 0x55863c7d8280] mmco: unref short failure
[h264 @ 0x55863c7d8280] mmco: unref short failure
[h264 @ 0x55863c7d8280] mmco: unref short failure
[h264 @ 0x55863c7d8280] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557721074d00] mmco: unref short failure
[h264 @ 0x5635572e0840] mmco: unref short failure
[h264 @ 0x5635572e0840] mmco: unref short failure
[h264 @ 0x5635572e0840] mmco: unref short failure
[h264 @ 0x5635572e0840] mmco: unref short failure
[h264 @ 0x5635409a3f80] mmco: unref short failure
[h264 @ 0x5635409a3f80] mmco: unref short failure
[h264 @ 0x5576dfc58880] mmco: unref short failure
[h264 @ 0x563542727c80] mmco: unref short failure
[h264 @ 0x5556e31e3d80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:36,  2.28it/s][A
  1%|          | 2/221 [00:00<01:36,  2.28it/s][A
  1%|▏         | 3/221 [00:01<01:09,  3.12it/s][A
  2%|▏         | 4/221 [00:01<00:51,  4.18it/s][A
  2%|▏         | 5/221 [00:01<00:41,  5.15it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.94it/s][A
  3%|▎         | 7/221 [00:01<00:41,  5.19it/s][A
  4%|▎         | 8/221 [00:02<01:07,  3.14it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.64it/s][A
  5%|▍         | 10/221 [00:03<01:25,  2.47it/s][A
  5%|▍         | 11/221 [00:03<01:15,  2.78it/s][A
  5%|▌         | 12/221 [00:03<01:22,  2.52it/s][A
  6%|▌         | 13/221 [00:04<01:07,  3.09it/s][A
  6%|▋         | 14/221 [00:04<01:25,  2.42it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.87it/s][A
  7%|▋         | 16/221 [00:05<01:08,  3.00it/s][A
  8%|▊         | 17/221 [00:05<01:05,  3.09it/s][A
  8%|▊         | 18/221 [00:05<01:05,  3.10it/s][A
  9%|▊         | 19/221 [00:05<00:53,  3.75it/s][A
  9%|▉         | 20/221 [00:06<00:46,  4.34it/s][A
 10%|▉         | 21/221 [00:06<00:41,  4.85it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.33it/s][A
 10%|█         | 23/221 [00:06<00:39,  5.02it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.44it/s][A
 11%|█▏        | 25/221 [00:06<00:34,  5.66it/s][A
 12%|█▏        | 26/221 [00:07<00:38,  5.06it/s][A[h264 @ 0x5577351bd340] mmco: unref short failure

 13%|█▎        | 28/221 [00:07<00:46,  4.17it/s][A
 13%|█▎        | 29/221 [00:07<00:40,  4.79it/s][A
 14%|█▎        | 30/221 [00:08<00:39,  4.83it/s][A
 14%|█▍        | 31/221 [00:08<00:37,  5.02it/s][A
 14%|█▍        | 32/221 [00:08<00:33,  5.71it/s][A
 15%|█▍        | 33/221 [00:08<00:39,  4.72it/s][A
 15%|█▌        | 34/221 [00:08<00:34,  5.47it/s][A
 16%|█▌        | 35/221 [00:08<00:34,  5.47it/s][A
 16%|█▋        | 36/221 [00:09<00:38,  4.75it/s][A
 17%|█▋        | 37/221 [00:10<01:11,  2.58it/s][A
 17%|█▋        | 38/221 [00:10<01:06,  2.75it/s][A
 18%|█▊        | 39/221 [00:10<00:52,  3.45it/s][A
 18%|█▊        | 40/221 [00:10<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:10<00:44,  4.02it/s][A
 19%|█▉        | 42/221 [00:11<00:59,  3.02it/s][A
 19%|█▉        | 43/221 [00:11<00:53,  3.30it/s][A
 20%|█▉        | 44/221 [00:11<00:45,  3.90it/s][A
 20%|██        | 45/221 [00:12<01:15,  2.33it/s][A
 21%|██        | 46/221 [00:13<01:21,  2.14it/s][A
 21%|██▏       | 47/221 [00:14<02:00,  1.44it/s][A
 22%|██▏       | 48/221 [00:14<01:31,  1.89it/s][A
 22%|██▏       | 49/221 [00:14<01:12,  2.37it/s][A
 23%|██▎       | 50/221 [00:14<01:00,  2.85it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:15<00:42,  3.94it/s][A
 24%|██▍       | 53/221 [00:15<00:38,  4.39it/s][A
 24%|██▍       | 54/221 [00:18<03:27,  1.24s/it][A[h264 @ 0x563561329140] mmco: unref short failure

 25%|██▍       | 55/221 [00:19<02:41,  1.03it/s][A
 25%|██▌       | 56/221 [00:19<02:02,  1.35it/s][A
 26%|██▌       | 57/221 [00:19<01:43,  1.58it/s][A[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure

 26%|██▌       | 58/221 [00:20<01:24,  1.93it/s][A[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure

 27%|██▋       | 59/221 [00:20<01:08,  2.35it/s][A[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure
[h264 @ 0x563550176d80] mmco: unref short failure

 27%|██▋       | 60/221 [00:20<01:15,  2.14it/s][A
 28%|██▊       | 61/221 [00:21<01:16,  2.09it/s][A
 28%|██▊       | 62/221 [00:22<01:20,  1.98it/s][A
 29%|██▊       | 63/221 [00:22<01:11,  2.21it/s][A
 29%|██▉       | 64/221 [00:22<01:04,  2.45it/s][A
 29%|██▉       | 65/221 [00:22<00:57,  2.70it/s][A[h264 @ 0x558642553340] mmco: unref short failure

 30%|██▉       | 66/221 [00:23<01:16,  2.03it/s][A[h264 @ 0x56355b745b00] mmco: unref short failure
[h264 @ 0x56355b745b00] mmco: unref short failure

 30%|███       | 67/221 [00:24<01:16,  2.01it/s][A
 31%|███       | 68/221 [00:24<01:00,  2.51it/s][A
 31%|███       | 69/221 [00:25<01:14,  2.05it/s][A
 32%|███▏      | 70/221 [00:25<00:58,  2.58it/s][A
 32%|███▏      | 71/221 [00:29<03:42,  1.48s/it][A
 33%|███▎      | 72/221 [00:29<02:47,  1.12s/it][A
 33%|███▎      | 73/221 [00:29<02:10,  1.14it/s][A
 33%|███▎      | 74/221 [00:30<01:36,  1.53it/s][A09/17/2024 04:56:18 - INFO - __main__ -   current idx Ktryr_1EhKk.51 from finetune_area returns wrong image/video, use 125620 instead.

 34%|███▍      | 75/221 [00:30<01:23,  1.76it/s][A
 34%|███▍      | 76/221 [00:30<01:07,  2.15it/s][A
 35%|███▍      | 77/221 [00:31<01:05,  2.21it/s][A
 35%|███▌      | 78/221 [00:31<00:58,  2.42it/s][A
 36%|███▌      | 79/221 [00:31<01:08,  2.07it/s][A
 36%|███▌      | 80/221 [00:32<00:54,  2.57it/s][A
 37%|███▋      | 81/221 [00:32<00:48,  2.87it/s][A
 37%|███▋      | 82/221 [00:32<00:42,  3.29it/s][A
 38%|███▊      | 83/221 [00:32<00:38,  3.57it/s][A
 38%|███▊      | 84/221 [00:33<00:34,  4.03it/s][A
 38%|███▊      | 85/221 [00:33<00:32,  4.24it/s][A
 39%|███▉      | 86/221 [00:33<00:34,  3.87it/s][A
 39%|███▉      | 87/221 [00:34<00:58,  2.29it/s][A
 40%|███▉      | 88/221 [00:34<01:01,  2.17it/s][A[h264 @ 0x557721feae80] mmco: unref short failure

 40%|████      | 89/221 [00:38<02:51,  1.30s/it][A
 41%|████      | 90/221 [00:38<02:09,  1.01it/s][A
 41%|████      | 91/221 [00:38<01:34,  1.38it/s][A
 42%|████▏     | 92/221 [00:38<01:15,  1.70it/s][A
 42%|████▏     | 93/221 [00:39<01:13,  1.73it/s][A
 43%|████▎     | 94/221 [00:39<01:06,  1.92it/s][A
 43%|████▎     | 95/221 [00:39<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:40<00:49,  2.51it/s][A
 44%|████▍     | 97/221 [00:40<00:43,  2.85it/s][A
 44%|████▍     | 98/221 [00:40<00:41,  3.00it/s][A
 45%|████▍     | 99/221 [00:40<00:34,  3.55it/s][A
 45%|████▌     | 100/221 [00:41<00:31,  3.85it/s][A
 46%|████▌     | 101/221 [00:41<00:30,  3.94it/s][A[h264 @ 0x563547101d40] mmco: unref short failure
[h264 @ 0x563547101d40] mmco: unref short failure
[h264 @ 0x563547101d40] mmco: unref short failure
[h264 @ 0x563547101d40] mmco: unref short failure

 46%|████▌     | 102/221 [00:41<00:34,  3.50it/s][A
 47%|████▋     | 103/221 [00:41<00:28,  4.17it/s][A
 48%|████▊     | 105/221 [00:42<00:26,  4.36it/s][A
 48%|████▊     | 106/221 [00:43<00:41,  2.79it/s][A
 48%|████▊     | 107/221 [00:43<00:34,  3.27it/s][A
 49%|████▉     | 108/221 [00:43<00:37,  2.99it/s][A
 49%|████▉     | 109/221 [00:44<00:37,  2.95it/s][A
 50%|████▉     | 110/221 [00:44<00:34,  3.19it/s][A[h264 @ 0x55771cb5f740] mmco: unref short failure

 50%|█████     | 111/221 [00:44<00:42,  2.57it/s][A
 51%|█████     | 112/221 [00:45<00:37,  2.89it/s][A
 51%|█████     | 113/221 [00:45<00:38,  2.83it/s][A
 52%|█████▏    | 114/221 [00:45<00:35,  2.97it/s][A
 52%|█████▏    | 115/221 [00:45<00:32,  3.26it/s][A[h264 @ 0x563548dd00c0] mmco: unref short failure
[h264 @ 0x563548dd00c0] mmco: unref short failure
[h264 @ 0x5556c4f9db80] mmco: unref short failure
[h264 @ 0x5556c4f9db80] mmco: unref short failure

 52%|█████▏    | 116/221 [00:51<03:00,  1.72s/it][A
 53%|█████▎    | 117/221 [00:51<02:14,  1.29s/it][A
 53%|█████▎    | 118/221 [00:51<01:41,  1.01it/s][A
 54%|█████▍    | 119/221 [00:51<01:17,  1.31it/s][A[h264 @ 0x55863c490500] mmco: unref short failure

 54%|█████▍    | 120/221 [00:52<01:05,  1.54it/s][A
 55%|█████▍    | 121/221 [00:52<00:52,  1.90it/s][A
 55%|█████▌    | 122/221 [00:52<00:48,  2.06it/s][A
 56%|█████▌    | 123/221 [00:52<00:38,  2.57it/s][A
 56%|█████▌    | 124/221 [00:53<00:35,  2.77it/s][A
 57%|█████▋    | 125/221 [00:53<00:33,  2.82it/s][A
 57%|█████▋    | 126/221 [00:54<00:37,  2.53it/s][A[h264 @ 0x55864c192bc0] mmco: unref short failure
[h264 @ 0x55864c192bc0] mmco: unref short failure
[h264 @ 0x5556d40e0400] mmco: unref short failure
[h264 @ 0x5556d40e0400] mmco: unref short failure

 57%|█████▋    | 127/221 [00:54<00:42,  2.24it/s][A
 58%|█████▊    | 128/221 [00:55<00:39,  2.36it/s][A
 58%|█████▊    | 129/221 [00:55<00:35,  2.58it/s][A
 59%|█████▉    | 130/221 [00:55<00:30,  3.02it/s][A
 60%|█████▉    | 132/221 [00:55<00:20,  4.30it/s][A
 60%|██████    | 133/221 [00:56<00:22,  3.89it/s][A[h264 @ 0x5556e32589c0] mmco: unref short failure

 61%|██████    | 134/221 [00:56<00:22,  3.81it/s][A
 61%|██████    | 135/221 [00:56<00:26,  3.19it/s][A
 62%|██████▏   | 136/221 [00:57<00:29,  2.93it/s][A
 62%|██████▏   | 137/221 [00:57<00:25,  3.30it/s][A
 62%|██████▏   | 138/221 [00:57<00:25,  3.32it/s][A
 63%|██████▎   | 139/221 [00:58<00:29,  2.77it/s][A
 63%|██████▎   | 140/221 [00:58<00:28,  2.80it/s][A
 64%|██████▍   | 141/221 [00:58<00:28,  2.85it/s][A
 64%|██████▍   | 142/221 [00:59<00:27,  2.85it/s][A
 65%|██████▍   | 143/221 [00:59<00:31,  2.45it/s][A
 65%|██████▌   | 144/221 [01:00<00:26,  2.91it/s][A
 66%|██████▌   | 145/221 [01:00<00:23,  3.18it/s][A
 66%|██████▌   | 146/221 [01:00<00:22,  3.37it/s][A
 67%|██████▋   | 147/221 [01:00<00:21,  3.45it/s][A
 67%|██████▋   | 148/221 [01:01<00:21,  3.41it/s][A
 67%|██████▋   | 149/221 [01:01<00:17,  4.11it/s][A
 68%|██████▊   | 150/221 [01:01<00:15,  4.57it/s][A
 68%|██████▊   | 151/221 [01:02<00:38,  1.81it/s][A
 69%|██████▉   | 152/221 [01:03<00:41,  1.66it/s][A
 69%|██████▉   | 153/221 [01:03<00:34,  1.97it/s][A
 70%|██████▉   | 154/221 [01:04<00:35,  1.86it/s][A
 70%|███████   | 155/221 [01:04<00:31,  2.12it/s][A
 71%|███████   | 156/221 [01:04<00:26,  2.44it/s][A
 71%|███████   | 157/221 [01:07<01:04,  1.01s/it][A
 71%|███████▏  | 158/221 [01:07<00:49,  1.28it/s][A
 72%|███████▏  | 159/221 [01:07<00:36,  1.68it/s][A
 72%|███████▏  | 160/221 [01:07<00:29,  2.07it/s][A
 73%|███████▎  | 162/221 [01:08<00:21,  2.70it/s][A
 74%|███████▍  | 163/221 [01:08<00:19,  2.93it/s][A
 74%|███████▍  | 164/221 [01:08<00:16,  3.40it/s][A
 75%|███████▍  | 165/221 [01:09<00:14,  3.97it/s][A
 75%|███████▌  | 166/221 [01:09<00:16,  3.30it/s][A
 76%|███████▌  | 167/221 [01:09<00:13,  4.03it/s][A
 76%|███████▌  | 168/221 [01:11<00:41,  1.29it/s][A
 76%|███████▋  | 169/221 [01:11<00:31,  1.63it/s][A
 77%|███████▋  | 170/221 [01:12<00:28,  1.81it/s][A
 77%|███████▋  | 171/221 [01:12<00:24,  2.07it/s][A
 78%|███████▊  | 172/221 [01:12<00:19,  2.46it/s][A
 78%|███████▊  | 173/221 [01:12<00:16,  2.95it/s][A
 79%|███████▉  | 175/221 [01:13<00:12,  3.72it/s][A
 80%|███████▉  | 176/221 [01:13<00:12,  3.60it/s][A
 80%|████████  | 177/221 [01:13<00:10,  4.19it/s][A
 81%|████████  | 178/221 [01:14<00:12,  3.48it/s][A
 81%|████████  | 179/221 [01:14<00:13,  3.04it/s][A
 81%|████████▏ | 180/221 [01:14<00:10,  3.78it/s][A
 82%|████████▏ | 181/221 [01:14<00:09,  4.16it/s][A
 82%|████████▏ | 182/221 [01:15<00:09,  4.28it/s][A
 83%|████████▎ | 183/221 [01:15<00:08,  4.35it/s][A
 83%|████████▎ | 184/221 [01:15<00:08,  4.46it/s][A
 84%|████████▍ | 186/221 [01:15<00:07,  4.62it/s][A
 85%|████████▍ | 187/221 [01:16<00:07,  4.75it/s][A
 85%|████████▌ | 188/221 [01:16<00:07,  4.21it/s][A
 86%|████████▌ | 189/221 [01:17<00:11,  2.67it/s][A
 86%|████████▌ | 190/221 [01:17<00:11,  2.66it/s][A[h264 @ 0x558636fb1d00] mmco: unref short failure

 86%|████████▋ | 191/221 [01:17<00:09,  3.33it/s][A
 87%|████████▋ | 192/221 [01:17<00:07,  3.69it/s][A
 87%|████████▋ | 193/221 [01:18<00:06,  4.46it/s][A
 88%|████████▊ | 194/221 [01:18<00:10,  2.64it/s][A
 88%|████████▊ | 195/221 [01:18<00:07,  3.30it/s][A
 89%|████████▊ | 196/221 [01:19<00:06,  3.68it/s][A
 89%|████████▉ | 197/221 [01:19<00:06,  3.97it/s][A
 90%|████████▉ | 198/221 [01:19<00:05,  4.10it/s][A
 90%|█████████ | 199/221 [01:19<00:05,  4.31it/s][A
 90%|█████████ | 200/221 [01:20<00:05,  3.82it/s][A
 91%|█████████ | 201/221 [01:20<00:05,  3.94it/s][A
 91%|█████████▏| 202/221 [01:20<00:04,  4.37it/s][A
 92%|█████████▏| 203/221 [01:20<00:04,  4.11it/s][A
 92%|█████████▏| 204/221 [01:20<00:03,  4.85it/s][A
 93%|█████████▎| 205/221 [01:20<00:02,  5.64it/s][A
 93%|█████████▎| 206/221 [01:21<00:03,  4.19it/s][A
 94%|█████████▍| 208/221 [01:21<00:02,  5.44it/s][A
 95%|█████████▍| 209/221 [01:21<00:02,  5.87it/s][A
 95%|█████████▌| 211/221 [01:22<00:02,  4.92it/s][A
 96%|█████████▌| 212/221 [01:22<00:01,  4.86it/s][A
 97%|█████████▋| 214/221 [01:23<00:01,  3.72it/s][A
 97%|█████████▋| 215/221 [01:23<00:01,  3.91it/s][A
 98%|█████████▊| 216/221 [01:23<00:01,  4.00it/s][A
 98%|█████████▊| 217/221 [01:23<00:01,  3.63it/s][A
 99%|█████████▊| 218/221 [01:24<00:00,  3.56it/s][A
 99%|█████████▉| 219/221 [01:24<00:00,  3.55it/s][A[h264 @ 0x558657721f80] mmco: unref short failure

100%|█████████▉| 220/221 [01:29<00:01,  1.52s/it][A
100%|██████████| 221/221 [01:29<00:00,  1.12s/it][A100%|██████████| 221/221 [01:29<00:00,  2.47it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.40it/s][A
  1%|          | 2/221 [00:00<01:04,  3.40it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.39it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.33it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.36it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.37it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.35it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.38it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.39it/s][A
  6%|▌         | 13/221 [00:03<01:01,  3.38it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.34it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.34it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.36it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.37it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.38it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.37it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.37it/s][A
 10%|▉         | 21/221 [00:06<01:05,  3.05it/s][A
 10%|▉         | 22/221 [00:06<01:03,  3.14it/s][A
 10%|█         | 23/221 [00:06<01:01,  3.22it/s][A
 11%|█         | 24/221 [00:07<01:00,  3.27it/s][A
 11%|█▏        | 25/221 [00:07<00:59,  3.28it/s][A
 12%|█▏        | 26/221 [00:07<00:59,  3.30it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.28it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.31it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.33it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.35it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.36it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.36it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.35it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.36it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.32it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.35it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.29it/s][A
 18%|█▊        | 40/221 [00:12<00:56,  3.22it/s][A
 19%|█▊        | 41/221 [00:12<00:55,  3.24it/s][A
 19%|█▉        | 42/221 [00:12<00:55,  3.25it/s][A
 19%|█▉        | 43/221 [00:12<00:55,  3.22it/s][A
 20%|█▉        | 44/221 [00:13<00:54,  3.25it/s][A
 20%|██        | 45/221 [00:13<00:59,  2.95it/s][A
 21%|██        | 46/221 [00:14<00:57,  3.05it/s][A
 21%|██▏       | 47/221 [00:14<00:55,  3.15it/s][A[h264 @ 0x5556ddef5a00] mmco: unref short failure
[h264 @ 0x5556ddef5a00] mmco: unref short failure

 22%|██▏       | 48/221 [00:14<00:54,  3.20it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.26it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.29it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.30it/s][A
 24%|██▎       | 52/221 [00:15<00:53,  3.15it/s][A
 24%|██▍       | 53/221 [00:16<00:52,  3.21it/s][A
 24%|██▍       | 54/221 [00:16<00:51,  3.22it/s][A
 25%|██▍       | 55/221 [00:16<00:51,  3.24it/s][A
 25%|██▌       | 56/221 [00:17<00:50,  3.29it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.32it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.32it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.35it/s][A
 27%|██▋       | 60/221 [00:18<00:47,  3.36it/s][A
 28%|██▊       | 61/221 [00:18<00:52,  3.07it/s][A
 28%|██▊       | 62/221 [00:18<00:51,  3.10it/s][A
 29%|██▊       | 63/221 [00:19<00:50,  3.15it/s][A
 29%|██▉       | 64/221 [00:19<00:49,  3.19it/s][A
 29%|██▉       | 65/221 [00:19<00:49,  3.17it/s][A
 30%|██▉       | 66/221 [00:20<00:49,  3.16it/s][A[h264 @ 0x56354b6f0c40] mmco: unref short failure
[h264 @ 0x56354b6f0c40] mmco: unref short failure

 30%|███       | 67/221 [00:20<00:47,  3.23it/s][A
 31%|███       | 68/221 [00:20<00:47,  3.22it/s][A
 31%|███       | 69/221 [00:21<00:46,  3.24it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.28it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.32it/s][A
 33%|███▎      | 72/221 [00:21<00:45,  3.30it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.32it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:22<00:44,  3.27it/s][A
 34%|███▍      | 76/221 [00:23<00:44,  3.28it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.31it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.33it/s][A
 36%|███▌      | 79/221 [00:24<00:42,  3.32it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.32it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.35it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.35it/s][A
 38%|███▊      | 83/221 [00:25<00:40,  3.37it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.35it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.36it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.35it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.37it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.33it/s][A
 40%|████      | 89/221 [00:27<00:39,  3.35it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.35it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.36it/s][A
 42%|████▏     | 92/221 [00:27<00:38,  3.37it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.38it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.39it/s][A
 43%|████▎     | 95/221 [00:28<00:37,  3.34it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.36it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.37it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.38it/s][A
 45%|████▍     | 99/221 [00:30<00:35,  3.39it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.39it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.40it/s][A
 46%|████▌     | 102/221 [00:30<00:35,  3.39it/s][A
 47%|████▋     | 103/221 [00:31<00:34,  3.39it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.40it/s][A
 48%|████▊     | 105/221 [00:31<00:34,  3.40it/s][A
 48%|████▊     | 106/221 [00:32<00:33,  3.40it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.40it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.41it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.41it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.41it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 115/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 116/221 [00:35<00:30,  3.41it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.36it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.69it/s][A
  1%|          | 2/221 [00:00<00:53,  4.07it/s][A
  1%|▏         | 3/221 [00:00<01:14,  2.92it/s][A
  2%|▏         | 4/221 [00:01<00:56,  3.84it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.26it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.30it/s][A
  4%|▎         | 8/221 [00:02<00:57,  3.70it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.79it/s][A
  5%|▍         | 10/221 [00:02<00:51,  4.12it/s][A
  5%|▍         | 11/221 [00:02<00:56,  3.72it/s][A
  5%|▌         | 12/221 [00:03<00:54,  3.85it/s][A
  6%|▌         | 13/221 [00:03<01:20,  2.60it/s][A
  6%|▋         | 14/221 [00:03<01:07,  3.08it/s][A
  7%|▋         | 15/221 [00:04<01:07,  3.06it/s][A
  7%|▋         | 16/221 [00:04<01:07,  3.02it/s][A
  8%|▊         | 17/221 [00:05<01:18,  2.60it/s][A
  8%|▊         | 18/221 [00:05<01:15,  2.68it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.73it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.28it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.28it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.38it/s][A
 11%|█▏        | 25/221 [00:06<00:45,  4.32it/s][A
 12%|█▏        | 26/221 [00:07<00:51,  3.82it/s][A
 12%|█▏        | 27/221 [00:07<00:49,  3.93it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.63it/s][A
 13%|█▎        | 29/221 [00:07<00:52,  3.62it/s][A
 14%|█▎        | 30/221 [00:08<00:51,  3.68it/s][A
 14%|█▍        | 31/221 [00:08<00:52,  3.62it/s][A
 14%|█▍        | 32/221 [00:08<00:51,  3.68it/s][A
 15%|█▍        | 33/221 [00:09<00:49,  3.82it/s][A
 15%|█▌        | 34/221 [00:09<00:54,  3.41it/s][A
 16%|█▌        | 35/221 [00:09<00:59,  3.10it/s][A
 16%|█▋        | 36/221 [00:10<00:57,  3.24it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.46it/s][A
 17%|█▋        | 38/221 [00:10<00:52,  3.48it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.65it/s][A
 18%|█▊        | 40/221 [00:11<00:55,  3.24it/s][A
 19%|█▊        | 41/221 [00:11<00:54,  3.32it/s][A
 19%|█▉        | 42/221 [00:11<00:48,  3.72it/s][A
 19%|█▉        | 43/221 [00:12<00:55,  3.20it/s][A
 20%|█▉        | 44/221 [00:12<00:55,  3.19it/s][A
 20%|██        | 45/221 [00:12<01:03,  2.78it/s][A
 21%|██        | 46/221 [00:13<00:57,  3.06it/s][A
 21%|██▏       | 47/221 [00:13<00:48,  3.57it/s][A
 22%|██▏       | 48/221 [00:13<00:40,  4.26it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  5.02it/s][A
 23%|██▎       | 50/221 [00:13<00:37,  4.52it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.06it/s][A
 24%|██▍       | 53/221 [00:14<00:39,  4.30it/s][A
 24%|██▍       | 54/221 [00:14<00:39,  4.26it/s][A
 25%|██▍       | 55/221 [00:15<00:40,  4.07it/s][A
 25%|██▌       | 56/221 [00:15<00:41,  4.00it/s][A
 26%|██▌       | 57/221 [00:15<00:42,  3.84it/s][A
 27%|██▋       | 59/221 [00:15<00:34,  4.67it/s][A
 27%|██▋       | 60/221 [00:16<00:35,  4.59it/s][A
 28%|██▊       | 61/221 [00:16<00:35,  4.55it/s][A
 28%|██▊       | 62/221 [00:16<00:39,  4.00it/s][A
 29%|██▊       | 63/221 [00:16<00:35,  4.39it/s][A
 29%|██▉       | 64/221 [00:17<00:37,  4.23it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.26it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.60it/s][A
 30%|███       | 67/221 [00:18<00:51,  2.98it/s][A
 31%|███       | 68/221 [00:18<00:49,  3.10it/s][A
 31%|███       | 69/221 [00:19<00:56,  2.71it/s][A
 32%|███▏      | 70/221 [00:19<00:47,  3.17it/s][A
 32%|███▏      | 71/221 [00:19<00:50,  2.98it/s][A
 33%|███▎      | 72/221 [00:20<00:54,  2.75it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  3.01it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.32it/s][A
 34%|███▍      | 75/221 [00:20<00:44,  3.28it/s][A
 34%|███▍      | 76/221 [00:20<00:38,  3.74it/s][A
 35%|███▍      | 77/221 [00:21<00:36,  3.89it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.47it/s][A
 36%|███▌      | 79/221 [00:21<00:40,  3.51it/s][A
 36%|███▌      | 80/221 [00:22<00:36,  3.88it/s][A
 37%|███▋      | 81/221 [00:22<00:35,  3.92it/s][A
 37%|███▋      | 82/221 [00:22<00:42,  3.30it/s][A
 38%|███▊      | 83/221 [00:22<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:23<00:44,  3.09it/s][A
 38%|███▊      | 85/221 [00:23<00:40,  3.36it/s][A
 39%|███▉      | 86/221 [00:23<00:43,  3.10it/s][A
 39%|███▉      | 87/221 [00:24<00:50,  2.64it/s][A
 40%|███▉      | 88/221 [00:24<00:46,  2.86it/s][A
 40%|████      | 89/221 [00:25<00:46,  2.85it/s][A
 41%|████      | 90/221 [00:25<00:48,  2.70it/s][A
 41%|████      | 91/221 [00:25<00:41,  3.12it/s][A
 42%|████▏     | 92/221 [00:26<00:41,  3.14it/s][A
 42%|████▏     | 93/221 [00:26<00:46,  2.77it/s][A
 43%|████▎     | 94/221 [00:26<00:42,  3.02it/s][A
 43%|████▎     | 95/221 [00:27<00:48,  2.60it/s][A
 43%|████▎     | 96/221 [00:27<00:46,  2.70it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.85it/s][A
 44%|████▍     | 98/221 [00:28<00:42,  2.89it/s][A
 45%|████▍     | 99/221 [00:28<00:42,  2.90it/s][A
 45%|████▌     | 100/221 [00:28<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:28<00:30,  3.90it/s][A
 46%|████▌     | 102/221 [00:29<00:31,  3.74it/s][A
 47%|████▋     | 103/221 [00:29<00:30,  3.89it/s][A
 47%|████▋     | 104/221 [00:29<00:26,  4.37it/s][A
 48%|████▊     | 105/221 [00:29<00:30,  3.85it/s][A
 48%|████▊     | 106/221 [00:30<00:35,  3.26it/s][A
 48%|████▊     | 107/221 [00:30<00:31,  3.65it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.05it/s][A
 49%|████▉     | 109/221 [00:31<00:27,  4.01it/s][A
 50%|████▉     | 110/221 [00:31<00:29,  3.81it/s][A
 50%|█████     | 111/221 [00:31<00:31,  3.48it/s][A
 51%|█████     | 112/221 [00:32<00:33,  3.21it/s][A
 51%|█████     | 113/221 [00:32<00:32,  3.32it/s][A
 52%|█████▏    | 115/221 [00:32<00:24,  4.37it/s][A
 52%|█████▏    | 116/221 [00:32<00:24,  4.36it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.11it/s][A
 53%|█████▎    | 118/221 [00:33<00:28,  3.67it/s][A
 54%|█████▍    | 119/221 [00:33<00:32,  3.16it/s][A
 54%|█████▍    | 120/221 [00:34<00:31,  3.17it/s][A
 55%|█████▍    | 121/221 [00:34<00:28,  3.52it/s][A
 55%|█████▌    | 122/221 [00:34<00:26,  3.77it/s][A
 56%|█████▌    | 123/221 [00:34<00:25,  3.78it/s][A
 56%|█████▌    | 124/221 [00:35<00:31,  3.07it/s][A
 57%|█████▋    | 125/221 [00:35<00:38,  2.50it/s][A
 57%|█████▋    | 126/221 [00:36<00:34,  2.78it/s][A
 57%|█████▋    | 127/221 [00:36<00:37,  2.48it/s][A
 58%|█████▊    | 128/221 [00:36<00:32,  2.84it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:37<00:27,  3.35it/s][A
 59%|█████▉    | 131/221 [00:37<00:25,  3.60it/s][A
 60%|█████▉    | 132/221 [00:37<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:38<00:30,  2.87it/s][A
 61%|██████    | 134/221 [00:39<00:36,  2.39it/s][A
 61%|██████    | 135/221 [00:39<00:28,  3.06it/s][A
 62%|██████▏   | 136/221 [00:39<00:28,  3.00it/s][A
 62%|██████▏   | 137/221 [00:39<00:25,  3.33it/s][A
 62%|██████▏   | 138/221 [00:39<00:23,  3.46it/s][A
 63%|██████▎   | 139/221 [00:40<00:25,  3.16it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.48it/s][A
 64%|██████▍   | 141/221 [00:40<00:26,  3.06it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.43it/s][A
 65%|██████▍   | 143/221 [00:41<00:24,  3.25it/s][A
 65%|██████▌   | 144/221 [00:41<00:19,  3.88it/s][A
 66%|██████▌   | 145/221 [00:41<00:20,  3.73it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.50it/s][A
 67%|██████▋   | 147/221 [00:42<00:17,  4.12it/s][A
 67%|██████▋   | 148/221 [00:42<00:20,  3.57it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.60it/s][A
 68%|██████▊   | 150/221 [00:43<00:18,  3.80it/s][A
 68%|██████▊   | 151/221 [00:43<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:44<00:32,  2.12it/s][A
 69%|██████▉   | 153/221 [00:44<00:27,  2.45it/s][A
 70%|██████▉   | 154/221 [00:45<00:24,  2.71it/s][A
 70%|███████   | 155/221 [00:45<00:25,  2.54it/s][A
 71%|███████   | 156/221 [00:45<00:22,  2.90it/s][A
 71%|███████   | 157/221 [00:46<00:21,  3.04it/s][A
 71%|███████▏  | 158/221 [00:46<00:22,  2.82it/s][A
 72%|███████▏  | 159/221 [00:46<00:19,  3.14it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.46it/s][A
 73%|███████▎  | 161/221 [00:47<00:14,  4.15it/s][A
 73%|███████▎  | 162/221 [00:47<00:13,  4.50it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.21it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.60it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.41it/s][A
 75%|███████▌  | 166/221 [00:48<00:14,  3.87it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  4.06it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  3.93it/s][A
 76%|███████▋  | 169/221 [00:48<00:11,  4.70it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.16it/s][A
 77%|███████▋  | 171/221 [00:49<00:17,  2.79it/s][A
 78%|███████▊  | 172/221 [00:50<00:17,  2.83it/s][A
 78%|███████▊  | 173/221 [00:50<00:17,  2.78it/s][A
 79%|███████▊  | 174/221 [00:50<00:15,  3.02it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  2.97it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:11,  3.68it/s][A
 81%|████████  | 178/221 [00:52<00:16,  2.56it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.80it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.40it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.31it/s][A
 83%|████████▎ | 183/221 [00:53<00:12,  2.98it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.11it/s][A
 84%|████████▍ | 186/221 [00:54<00:11,  3.14it/s][A
 85%|████████▍ | 187/221 [00:54<00:10,  3.39it/s][A
 85%|████████▌ | 188/221 [00:55<00:10,  3.27it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.57it/s][A
 86%|████████▌ | 190/221 [00:55<00:10,  2.98it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.65it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  3.92it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.09it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.68it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  3.75it/s][A
 89%|████████▊ | 196/221 [00:57<00:08,  2.94it/s][A
 89%|████████▉ | 197/221 [00:58<00:09,  2.61it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.65it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  3.06it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.03it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.49it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.33it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.63it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.77it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.80it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.76it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.08it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.70it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.77it/s][A
 95%|█████████▌| 210/221 [01:01<00:02,  3.74it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  4.07it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.49it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.55it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.98it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.02it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.91it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.10it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.38it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.23it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.58it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.45it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'area_r1': 40.5, 'area_recall': '40.5/66.7/75.2', 'area_ravg': 60.8}
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'forward_r1': 38.9, 'forward_recall': '38.9/68.8/77.6', 'forward_ravg': 61.8}
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'area_video_r1': 39.6, 'area_video_recall': '39.6/67.9/78.8', 'area_video_ravg': 62.1}
09/17/2024 04:59:35 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 04:59:35 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.3/82.1', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.8/81.8', 'area_video_back_ravg': 68.3}
09/17/2024 04:59:35 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 799=======

09/17/2024 04:59:35 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.3/82.1', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.8/81.8', 'area_video_back_ravg': 68.3}
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/65.2/74.3', 'video_ravg': 58.7}
09/17/2024 04:59:35 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 04:59:35 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 04:59:35 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 799--===========

09/17/2024 04:59:35 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/74.5/81.3', 'video_ravg': 69.2}
09/17/2024 04:59:35 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 04:59:35 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
[h264 @ 0x56354aab5240] mmco: unref short failure
09/17/2024 05:00:01 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009826656430959702, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1477155685424805, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.041780948638916, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.1993231773376465}
 27%|██▋       | 800/2910 [5:04:05<78:03:29, 133.18s/it] 28%|██▊       | 801/2910 [5:04:09<55:17:53, 94.39s/it] [h264 @ 0x5586419c5f80] mmco: unref short failure
 28%|██▊       | 802/2910 [5:04:13<39:31:07, 67.49s/it][h264 @ 0x558639d6ee00] mmco: unref short failure
[h264 @ 0x558639d6ee00] mmco: unref short failure
[h264 @ 0x558639d6ee00] mmco: unref short failure
[h264 @ 0x558639d6ee00] mmco: unref short failure
 28%|██▊       | 803/2910 [5:04:18<28:28:28, 48.65s/it][h264 @ 0x5556d4793340] mmco: unref short failure
[h264 @ 0x5556d4793340] mmco: unref short failure
 28%|██▊       | 804/2910 [5:04:24<20:53:58, 35.73s/it] 28%|██▊       | 805/2910 [5:04:30<15:40:47, 26.82s/it] 28%|██▊       | 806/2910 [5:04:35<11:56:43, 20.44s/it][h264 @ 0x55771bd12640] mmco: unref short failure
[h264 @ 0x55771bd12640] mmco: unref short failure
[h264 @ 0x55772e239b80] mmco: unref short failure
 28%|██▊       | 807/2910 [5:04:42<9:35:12, 16.41s/it] 09/17/2024 05:00:45 - INFO - __main__ -   current idx _9yTXjXc3Ko.34 from finetune_area returns wrong image/video, use 103383 instead.
 28%|██▊       | 808/2910 [5:04:49<7:48:42, 13.38s/it][h264 @ 0x5635556f8040] mmco: unref short failure
[h264 @ 0x5635556f8040] mmco: unref short failure
 28%|██▊       | 809/2910 [5:04:56<6:46:11, 11.60s/it][h264 @ 0x5577186683c0] mmco: unref short failure
[h264 @ 0x5577186683c0] mmco: unref short failure
 28%|██▊       | 810/2910 [5:05:03<5:56:55, 10.20s/it] 28%|██▊       | 811/2910 [5:05:10<5:25:22,  9.30s/it][h264 @ 0x5576de8be180] mmco: unref short failure
[h264 @ 0x5556c4254380] mmco: unref short failure
[h264 @ 0x5556c4254380] mmco: unref short failure
09/17/2024 05:01:15 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 63688 instead.
 28%|██▊       | 812/2910 [5:05:17<4:54:27,  8.42s/it] 28%|██▊       | 813/2910 [5:05:23<4:31:56,  7.78s/it][h264 @ 0x5635409b18c0] mmco: unref short failure
[h264 @ 0x5635409b18c0] mmco: unref short failure
[h264 @ 0x5635409b18c0] mmco: unref short failure
[h264 @ 0x5635409b18c0] mmco: unref short failure
 28%|██▊       | 814/2910 [5:05:31<4:32:13,  7.79s/it][h264 @ 0x5556e36ec000] mmco: unref short failure
[h264 @ 0x5556e36ec000] mmco: unref short failure
[h264 @ 0x5556e36ec000] mmco: unref short failure
 28%|██▊       | 815/2910 [5:05:38<4:22:53,  7.53s/it][h264 @ 0x55863735ec00] mmco: unref short failure
[h264 @ 0x55863735ec00] mmco: unref short failure
[h264 @ 0x557721feac00] mmco: unref short failure
[h264 @ 0x557721feac00] mmco: unref short failure
[h264 @ 0x55863445e9c0] mmco: unref short failure
[h264 @ 0x55863445e9c0] mmco: unref short failure
09/17/2024 05:01:57 - INFO - __main__ -   current idx TE5UzQ5S57U.27 from finetune_area returns wrong image/video, use 105471 instead.
[h264 @ 0x5556dd51fc80] mmco: unref short failure
[h264 @ 0x5556dd51fc80] mmco: unref short failure
[h264 @ 0x55863a09f480] mmco: unref short failure
[h264 @ 0x55772b04a680] mmco: unref short failure
[h264 @ 0x55771f3b8e40] mmco: unref short failure
[h264 @ 0x55771f3b8e40] mmco: unref short failure
 28%|██▊       | 816/2910 [5:06:21<10:33:50, 18.16s/it][h264 @ 0x5576debb4f80] mmco: unref short failure
[h264 @ 0x5576debb4f80] mmco: unref short failure
[h264 @ 0x55773187ae00] mmco: unref short failure
[h264 @ 0x55773187ae00] mmco: unref short failure
 28%|██▊       | 817/2910 [5:06:30<9:05:16, 15.63s/it]  28%|██▊       | 818/2910 [5:06:45<9:00:12, 15.49s/it][h264 @ 0x5635504ccd40] mmco: unref short failure
[h264 @ 0x5635504ccd40] mmco: unref short failure
[h264 @ 0x557721feaa00] mmco: unref short failure
[h264 @ 0x557721feaa00] mmco: unref short failure
[h264 @ 0x557721feaa00] mmco: unref short failure
[h264 @ 0x557721feaa00] mmco: unref short failure
 28%|██▊       | 819/2910 [5:06:52<7:27:10, 12.83s/it][h264 @ 0x5635409b18c0] mmco: unref short failure
[h264 @ 0x5635409b18c0] mmco: unref short failure
[h264 @ 0x557728981800] mmco: unref short failure
[h264 @ 0x557728981800] mmco: unref short failure
[h264 @ 0x5635548f6480] mmco: unref short failure
 28%|██▊       | 820/2910 [5:07:02<6:55:00, 11.91s/it][h264 @ 0x557722b35280] mmco: unref short failure
[h264 @ 0x557722b35280] mmco: unref short failure
 28%|██▊       | 821/2910 [5:07:09<6:08:03, 10.57s/it][h264 @ 0x5556cb060480] mmco: unref short failure
[h264 @ 0x5556cb060480] mmco: unref short failure
 28%|██▊       | 822/2910 [5:07:26<7:14:01, 12.47s/it] 28%|██▊       | 823/2910 [5:07:34<6:22:31, 11.00s/it][h264 @ 0x5576e112df80] mmco: unref short failure
[h264 @ 0x5576e112df80] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
[h264 @ 0x5635414b0a40] mmco: unref short failure
09/17/2024 05:03:39 - INFO - __main__ -   current idx RySLUDaYU80.14 from finetune_area returns wrong image/video, use 70644 instead.
[h264 @ 0x5577192a0540] mmco: unref short failure
[h264 @ 0x5577192a0540] mmco: unref short failure
[h264 @ 0x5556d226e700] mmco: unref short failure
[h264 @ 0x5556d226e700] mmco: unref short failure
09/17/2024 05:03:49 - INFO - __main__ -   current idx q2-SltghBGI.3 from finetune_area returns wrong image/video, use 128584 instead.
[h264 @ 0x55863d1bdcc0] mmco: unref short failure
[h264 @ 0x5556e4043000] mmco: unref short failure
[h264 @ 0x56355d7a2200] mmco: unref short failure
[h264 @ 0x56354d102380] mmco: unref short failure
[h264 @ 0x56355fb51d80] mmco: unref short failure
[h264 @ 0x5556d5091a40] mmco: unref short failure
[h264 @ 0x5556d5091a40] mmco: unref short failure
[h264 @ 0x56354f5f55c0] mmco: unref short failure
[h264 @ 0x56354f5f55c0] mmco: unref short failure
 28%|██▊       | 824/2910 [5:08:40<15:57:33, 27.54s/it][h264 @ 0x5577371f2e40] mmco: unref short failure
[h264 @ 0x5577371f2e40] mmco: unref short failure
[h264 @ 0x5577371f2e40] mmco: unref short failure
[h264 @ 0x5577371f2e40] mmco: unref short failure
[h264 @ 0x558644e40580] mmco: unref short failure
 28%|██▊       | 825/2910 [5:09:01<14:46:34, 25.51s/it] 28%|██▊       | 826/2910 [5:09:13<12:25:18, 21.46s/it][h264 @ 0x56354c17e6c0] mmco: unref short failure
[h264 @ 0x56354c17e6c0] mmco: unref short failure
[h264 @ 0x55771cefd740] mmco: unref short failure
[h264 @ 0x55771cefd740] mmco: unref short failure
[h264 @ 0x56354c17e6c0] mmco: unref short failure
[h264 @ 0x56354c17e6c0] mmco: unref short failure
[h264 @ 0x5556c86bb240] mmco: unref short failure
[h264 @ 0x5556c86bb240] mmco: unref short failure
[h264 @ 0x5556c86bb240] mmco: unref short failure
[h264 @ 0x5556c86bb240] mmco: unref short failure
[h264 @ 0x5577243e5980] mmco: unref short failure
 28%|██▊       | 827/2910 [5:09:19<9:44:08, 16.83s/it] [h264 @ 0x55863735ee00] mmco: unref short failure
[h264 @ 0x55863735ee00] mmco: unref short failure
 28%|██▊       | 828/2910 [5:09:39<10:22:28, 17.94s/it][h264 @ 0x5556cb849f00] mmco: unref short failure
09/17/2024 05:05:42 - INFO - __main__ -   current idx 5l1_DENmn_k.23 from finetune_area returns wrong image/video, use 7698 instead.
 28%|██▊       | 829/2910 [5:09:46<8:29:30, 14.69s/it]  29%|██▊       | 830/2910 [5:10:02<8:42:45, 15.08s/it] 29%|██▊       | 831/2910 [5:10:09<7:13:51, 12.52s/it][h264 @ 0x5556c428ee80] mmco: unref short failure
[h264 @ 0x5556c428ee80] mmco: unref short failure
[h264 @ 0x56354d0a9ec0] mmco: unref short failure
[h264 @ 0x563557920bc0] mmco: unref short failure
[h264 @ 0x563557920bc0] mmco: unref short failure
[h264 @ 0x563557920bc0] mmco: unref short failure
[h264 @ 0x5556d8fa5ac0] mmco: unref short failure
[h264 @ 0x5577288b3f00] mmco: unref short failure
[h264 @ 0x558633ad42c0] mmco: unref short failure
[h264 @ 0x558633ad42c0] mmco: unref short failure
[h264 @ 0x55772e23a000] mmco: unref short failure
[h264 @ 0x55772e23a000] mmco: unref short failure
[h264 @ 0x563551394c40] mmco: unref short failure
[h264 @ 0x5556d8fa58c0] mmco: unref short failure
[h264 @ 0x5556d8fa58c0] mmco: unref short failure
 29%|██▊       | 832/2910 [5:11:09<15:29:26, 26.84s/it][h264 @ 0x55772e239d80] mmco: unref short failure
[h264 @ 0x55772e239d80] mmco: unref short failure
[h264 @ 0x56355b2e14c0] mmco: unref short failure
[h264 @ 0x56355b2e14c0] mmco: unref short failure
[h264 @ 0x5576dfec9140] mmco: unref short failure
[h264 @ 0x5556d8132fc0] mmco: unref short failure
[h264 @ 0x5556d8132fc0] mmco: unref short failure
[h264 @ 0x5556d8132fc0] mmco: unref short failure
[h264 @ 0x5556d8132fc0] mmco: unref short failure
[h264 @ 0x56354730eb40] mmco: unref short failure
 29%|██▊       | 833/2910 [5:11:34<15:08:31, 26.25s/it][h264 @ 0x5635456cfb00] mmco: unref short failure
[h264 @ 0x5635456cfb00] mmco: unref short failure
 29%|██▊       | 834/2910 [5:11:42<11:54:33, 20.65s/it][h264 @ 0x5586484bfb40] mmco: unref short failure
[h264 @ 0x5586484bfb40] mmco: unref short failure
 29%|██▊       | 835/2910 [5:11:49<9:33:03, 16.57s/it] [h264 @ 0x55568bd144c0] mmco: unref short failure
[h264 @ 0x563541423d00] mmco: unref short failure
[h264 @ 0x563541423d00] mmco: unref short failure
 29%|██▊       | 836/2910 [5:12:05<9:32:11, 16.55s/it][h264 @ 0x558638e6e580] mmco: unref short failure
[h264 @ 0x558638e6e580] mmco: unref short failure
[h264 @ 0x558638e6e580] mmco: unref short failure
[h264 @ 0x558638e6e580] mmco: unref short failure
 29%|██▉       | 837/2910 [5:12:19<9:08:02, 15.86s/it][h264 @ 0x56354222c100] mmco: unref short failure
[h264 @ 0x56354222c100] mmco: unref short failure
 29%|██▉       | 838/2910 [5:12:35<9:04:33, 15.77s/it] 29%|██▉       | 839/2910 [5:12:44<7:50:14, 13.62s/it][h264 @ 0x557732773380] mmco: unref short failure
[h264 @ 0x557732773380] mmco: unref short failure
[h264 @ 0x563557920bc0] mmco: unref short failure
[h264 @ 0x563557920bc0] mmco: unref short failure
[h264 @ 0x56354a81dd40] mmco: unref short failure
[h264 @ 0x56354a81dd40] mmco: unref short failure
[h264 @ 0x55864bc74080] mmco: unref short failure
[h264 @ 0x55864bc74080] mmco: unref short failure
[h264 @ 0x55864bc74080] mmco: unref short failure
[h264 @ 0x55864bc74080] mmco: unref short failure
[h264 @ 0x557737c69780] mmco: unref short failure
[h264 @ 0x557737c69780] mmco: unref short failure
[h264 @ 0x5586459ebcc0] mmco: unref short failure
[h264 @ 0x56354a04bd40] mmco: unref short failure
[h264 @ 0x55863c146700] mmco: unref short failure
[h264 @ 0x55863c146700] mmco: unref short failure
[h264 @ 0x5635409a38c0] mmco: unref short failure
[h264 @ 0x5635409a38c0] mmco: unref short failure
[h264 @ 0x55772ebd0e80] mmco: unref short failure
[h264 @ 0x55772ebd0e80] mmco: unref short failure
 29%|██▉       | 840/2910 [5:13:43<15:44:47, 27.39s/it][h264 @ 0x5556c428ea80] mmco: unref short failure
[h264 @ 0x5556c428ea80] mmco: unref short failure
[h264 @ 0x55771dd6b380] mmco: unref short failure
[h264 @ 0x55771dd6b380] mmco: unref short failure
[h264 @ 0x55863a355580] mmco: unref short failure
[h264 @ 0x55863a355580] mmco: unref short failure
[h264 @ 0x55771a6f7440] mmco: unref short failure
[h264 @ 0x55771b5f0800] mmco: unref short failure
[h264 @ 0x5577249d0900] mmco: unref short failure
[h264 @ 0x5577249d0900] mmco: unref short failure
[h264 @ 0x558651490ac0] mmco: unref short failure
 29%|██▉       | 841/2910 [5:14:21<17:35:00, 30.59s/it] 29%|██▉       | 842/2910 [5:14:28<13:31:38, 23.55s/it] 29%|██▉       | 843/2910 [5:14:35<10:36:51, 18.49s/it][h264 @ 0x558636fb21c0] mmco: unref short failure
 29%|██▉       | 844/2910 [5:14:44<8:58:11, 15.63s/it] [h264 @ 0x55771a577040] mmco: unref short failure
[h264 @ 0x55771a577040] mmco: unref short failure
[h264 @ 0x5577327885c0] mmco: unref short failure
 29%|██▉       | 845/2910 [5:14:54<7:57:12, 13.87s/it][h264 @ 0x5556c3f36b40] mmco: unref short failure
[h264 @ 0x5556c3f36b40] mmco: unref short failure
[h264 @ 0x5556c3f36b40] mmco: unref short failure
[h264 @ 0x5556c3f36b40] mmco: unref short failure
 29%|██▉       | 846/2910 [5:15:09<8:12:09, 14.31s/it]09/17/2024 05:11:09 - INFO - __main__ -   current idx TTyNNu1mIgY.26 from finetune_area returns wrong image/video, use 128569 instead.
[h264 @ 0x5576de8b3400] mmco: unref short failure
[h264 @ 0x5576de8b3400] mmco: unref short failure
 29%|██▉       | 847/2910 [5:15:16<6:57:34, 12.14s/it][h264 @ 0x5577314e1c80] mmco: unref short failure
[h264 @ 0x5577314e1c80] mmco: unref short failure
[h264 @ 0x5576df734400] mmco: unref short failure
[h264 @ 0x55771f41c340] mmco: unref short failure
[h264 @ 0x55771f41c340] mmco: unref short failure
[h264 @ 0x55773486b380] mmco: unref short failure
[h264 @ 0x55773486b380] mmco: unref short failure
[h264 @ 0x5586376456c0] mmco: unref short failure
[h264 @ 0x5556c8e24fc0] mmco: unref short failure
[h264 @ 0x5556c6defd00] mmco: unref short failure
[h264 @ 0x5556d43460c0] mmco: unref short failure
[h264 @ 0x557725db1a00] mmco: unref short failure
[h264 @ 0x557725db1a00] mmco: unref short failure
[h264 @ 0x5556d755c140] mmco: unref short failure
[h264 @ 0x5556d755c140] mmco: unref short failure
[h264 @ 0x55865178fcc0] mmco: unref short failure
[h264 @ 0x55863e971cc0] mmco: unref short failure
[h264 @ 0x55771e2bbf40] mmco: unref short failure
[h264 @ 0x55771e2bbf40] mmco: unref short failure
 29%|██▉       | 848/2910 [5:16:18<15:33:48, 27.17s/it][h264 @ 0x563545fac7c0] mmco: unref short failure
[h264 @ 0x563545fac7c0] mmco: unref short failure
[h264 @ 0x5556d297cf40] mmco: unref short failure
[h264 @ 0x5556d297cf40] mmco: unref short failure
[h264 @ 0x558636fe8a80] mmco: unref short failure
[h264 @ 0x558636fe8a80] mmco: unref short failure
[h264 @ 0x55864fa28800] mmco: unref short failure
[h264 @ 0x5556cd90c940] mmco: unref short failure
[h264 @ 0x5556cd90c940] mmco: unref short failure
[h264 @ 0x5556cd90c940] mmco: unref short failure
[h264 @ 0x5556cd90c940] mmco: unref short failure
[h264 @ 0x56354c33d500] mmco: unref short failure
[h264 @ 0x56354c33d500] mmco: unref short failure
[h264 @ 0x5556dfd4ed40] mmco: unref short failure
[h264 @ 0x5556dfd4ed40] mmco: unref short failure
[h264 @ 0x55771db3f4c0] mmco: unref short failure
[h264 @ 0x55771db3f4c0] mmco: unref short failure
[h264 @ 0x5556dcede400] mmco: unref short failure
[h264 @ 0x5556dcede400] mmco: unref short failure
 29%|██▉       | 849/2910 [5:16:49<16:11:04, 28.27s/it]09/17/2024 05:12:48 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 05:12:48 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557722e90cc0] mmco: unref short failure
[h264 @ 0x557722e90cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556c8904ac0] mmco: unref short failure
[h264 @ 0x5556c8904ac0] mmco: unref short failure
[h264 @ 0x5556c3fde640] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56355df73700] mmco: unref short failure
[h264 @ 0x56355df73700] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55773274dd40] mmco: unref short failure
[h264 @ 0x55773274dd40] mmco: unref short failure
[h264 @ 0x55773274dd40] mmco: unref short failure
[h264 @ 0x55773274dd40] mmco: unref short failure
[h264 @ 0x55773274dd40] mmco: unref short failure
[h264 @ 0x55773274dd40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772ba18640] mmco: unref short failure
[h264 @ 0x55772ba18640] mmco: unref short failure
[h264 @ 0x56354bbb9cc0] mmco: unref short failure
[h264 @ 0x56354bbb9cc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55568b456380] mmco: unref short failure
[h264 @ 0x55568b456380] mmco: unref short failure
[h264 @ 0x5577222de2c0] mmco: unref short failure
[h264 @ 0x5556c765d800] mmco: unref short failure
[h264 @ 0x5556c8db6a80] mmco: unref short failure
[h264 @ 0x5556c8db6a80] mmco: unref short failure
[h264 @ 0x5556e20d4cc0] mmco: unref short failure
[h264 @ 0x5556e20d4cc0] mmco: unref short failure
[h264 @ 0x56354ec64d80] mmco: unref short failure
[h264 @ 0x55773276fc00] mmco: unref short failure
[h264 @ 0x55773276fc00] mmco: unref short failure
[h264 @ 0x557733289640] mmco: unref short failure
[h264 @ 0x558645962f40] mmco: unref short failure
[h264 @ 0x55772858ce80] mmco: unref short failure
[h264 @ 0x55772858ce80] mmco: unref short failure
[h264 @ 0x55863ad77000] mmco: unref short failure
[h264 @ 0x5586327c8100] mmco: unref short failure
[h264 @ 0x5586327c8100] mmco: unref short failure
[h264 @ 0x5556c4c4ee40] mmco: unref short failure
[h264 @ 0x5576df2d6740] mmco: unref short failure
[h264 @ 0x5576df2d6740] mmco: unref short failure
[h264 @ 0x5586378fe100] mmco: unref short failure
not have audios CqzowavAOpc.38
[h264 @ 0x55771c20e180] mmco: unref short failure
[h264 @ 0x55771c20e180] mmco: unref short failure
[h264 @ 0x5586375f7c40] mmco: unref short failure
[h264 @ 0x5586375f7c40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:43,  2.13it/s][A
  1%|          | 2/221 [00:01<02:04,  1.77it/s][A
  1%|▏         | 3/221 [00:01<01:21,  2.68it/s][A
  2%|▏         | 4/221 [00:01<00:59,  3.63it/s][A
  2%|▏         | 5/221 [00:01<00:47,  4.56it/s][A
  3%|▎         | 6/221 [00:01<00:40,  5.34it/s][A[h264 @ 0x5577196bbb40] mmco: unref short failure
[h264 @ 0x5577196bbb40] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:46,  4.57it/s][A
  4%|▎         | 8/221 [00:02<01:17,  2.74it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.32it/s][A
  5%|▍         | 10/221 [00:03<01:45,  2.00it/s][A
  5%|▍         | 11/221 [00:03<01:20,  2.62it/s][A
  5%|▌         | 12/221 [00:04<01:20,  2.59it/s][A
  6%|▌         | 13/221 [00:04<01:04,  3.21it/s][A
  6%|▋         | 14/221 [00:05<01:31,  2.26it/s][A
  7%|▋         | 15/221 [00:05<01:16,  2.69it/s][A
  7%|▋         | 16/221 [00:05<01:12,  2.81it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.32it/s][A
  8%|▊         | 18/221 [00:06<01:00,  3.37it/s][A
  9%|▊         | 19/221 [00:06<00:50,  4.02it/s][A
  9%|▉         | 20/221 [00:06<00:42,  4.74it/s][A
 10%|▉         | 21/221 [00:06<00:38,  5.14it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.62it/s][A
 10%|█         | 23/221 [00:06<00:44,  4.50it/s][A
 11%|█         | 24/221 [00:07<00:42,  4.64it/s][A
 11%|█▏        | 25/221 [00:07<00:38,  5.07it/s][A
 12%|█▏        | 26/221 [00:07<00:39,  4.97it/s][A
 12%|█▏        | 27/221 [00:07<00:38,  5.08it/s][A
 13%|█▎        | 28/221 [00:08<00:51,  3.72it/s][A
 13%|█▎        | 29/221 [00:08<00:41,  4.58it/s][A
 14%|█▎        | 30/221 [00:08<00:41,  4.60it/s][A
 14%|█▍        | 31/221 [00:08<00:37,  5.09it/s][A
 14%|█▍        | 32/221 [00:08<00:32,  5.77it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.09it/s][A
 15%|█▌        | 34/221 [00:09<00:40,  4.60it/s][A
 16%|█▌        | 35/221 [00:09<00:37,  4.99it/s][A
 16%|█▋        | 36/221 [00:09<00:45,  4.04it/s][A
 17%|█▋        | 37/221 [00:10<01:04,  2.84it/s][A[h264 @ 0x56355214b240] mmco: unref short failure
[h264 @ 0x56355214b240] mmco: unref short failure

 17%|█▋        | 38/221 [00:10<01:02,  2.95it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.66it/s][A
 18%|█▊        | 40/221 [00:11<00:51,  3.51it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.50it/s][A
 19%|█▉        | 42/221 [00:12<01:18,  2.28it/s][A
 19%|█▉        | 43/221 [00:12<01:09,  2.58it/s][A[h264 @ 0x5635543cba00] mmco: unref short failure
[h264 @ 0x5635543cba00] mmco: unref short failure

 20%|█▉        | 44/221 [00:12<00:55,  3.16it/s][A
 20%|██        | 45/221 [00:13<01:34,  1.87it/s][A
 21%|██        | 46/221 [00:14<01:40,  1.74it/s][A[h264 @ 0x55864034ec80] mmco: unref short failure
[h264 @ 0x55864034ec80] mmco: unref short failure

 21%|██▏       | 47/221 [00:15<02:33,  1.13it/s][A
 22%|██▏       | 48/221 [00:16<01:52,  1.54it/s][A
 22%|██▏       | 49/221 [00:16<01:27,  1.98it/s][A
 23%|██▎       | 50/221 [00:16<01:05,  2.59it/s][A
 23%|██▎       | 51/221 [00:16<00:52,  3.23it/s][A
 24%|██▎       | 52/221 [00:16<00:43,  3.89it/s][A
 24%|██▍       | 53/221 [00:16<00:36,  4.66it/s][A[h264 @ 0x557731507080] mmco: unref short failure

 24%|██▍       | 54/221 [00:20<03:39,  1.32s/it][A
 25%|██▍       | 55/221 [00:21<02:50,  1.03s/it][A
 25%|██▌       | 56/221 [00:21<02:07,  1.30it/s][A
 26%|██▌       | 57/221 [00:21<01:38,  1.66it/s][A
 26%|██▌       | 58/221 [00:21<01:13,  2.21it/s][A
 27%|██▋       | 59/221 [00:21<00:57,  2.81it/s][A
 27%|██▋       | 60/221 [00:22<01:05,  2.47it/s][A
 28%|██▊       | 61/221 [00:22<00:59,  2.67it/s][A
 28%|██▊       | 62/221 [00:22<00:52,  3.04it/s][A
 29%|██▊       | 63/221 [00:22<00:44,  3.52it/s][A
 29%|██▉       | 64/221 [00:23<00:38,  4.03it/s][A
 29%|██▉       | 65/221 [00:23<00:36,  4.25it/s][A
 30%|██▉       | 66/221 [00:23<00:59,  2.63it/s][A[h264 @ 0x5556c7f062c0] mmco: unref short failure
[h264 @ 0x5556c7f062c0] mmco: unref short failure

 30%|███       | 67/221 [00:24<00:58,  2.65it/s][A
 31%|███       | 68/221 [00:24<00:50,  3.05it/s][A
 31%|███       | 69/221 [00:25<01:03,  2.40it/s][A
 32%|███▏      | 70/221 [00:25<00:49,  3.03it/s][A
 32%|███▏      | 71/221 [00:29<03:50,  1.54s/it][A[h264 @ 0x5556df987940] mmco: unref short failure
[h264 @ 0x5556df987940] mmco: unref short failure

 33%|███▎      | 72/221 [00:29<02:52,  1.16s/it][A
 33%|███▎      | 73/221 [00:30<02:12,  1.12it/s][A
 33%|███▎      | 74/221 [00:30<01:37,  1.50it/s][A
 34%|███▍      | 75/221 [00:30<01:20,  1.82it/s][A
 34%|███▍      | 76/221 [00:30<01:03,  2.30it/s][A
 35%|███▍      | 77/221 [00:31<00:57,  2.49it/s][A
 35%|███▌      | 78/221 [00:31<00:51,  2.79it/s][A
 36%|███▌      | 79/221 [00:31<01:03,  2.23it/s][A
 36%|███▌      | 80/221 [00:32<00:50,  2.82it/s][A
 37%|███▋      | 81/221 [00:32<00:43,  3.23it/s][A
 37%|███▋      | 82/221 [00:32<00:36,  3.79it/s][A
 38%|███▊      | 83/221 [00:32<00:31,  4.39it/s][A
 38%|███▊      | 84/221 [00:32<00:27,  4.98it/s][A
 39%|███▉      | 86/221 [00:33<00:22,  5.87it/s][A
 39%|███▉      | 87/221 [00:33<00:35,  3.76it/s][A[h264 @ 0x5635579861c0] mmco: unref short failure
[h264 @ 0x5635579861c0] mmco: unref short failure

 40%|███▉      | 88/221 [00:34<00:40,  3.25it/s][A[h264 @ 0x5635443f2880] mmco: unref short failure

 40%|████      | 89/221 [00:37<02:19,  1.06s/it][A
 41%|████      | 90/221 [00:37<01:48,  1.21it/s][A
 42%|████▏     | 92/221 [00:37<01:07,  1.90it/s][A
 42%|████▏     | 93/221 [00:38<01:05,  1.95it/s][A
 43%|████▎     | 94/221 [00:38<00:59,  2.14it/s][A
 43%|████▎     | 95/221 [00:38<00:48,  2.62it/s][A
 43%|████▎     | 96/221 [00:38<00:43,  2.88it/s][A
 44%|████▍     | 97/221 [00:38<00:35,  3.50it/s][A
 44%|████▍     | 98/221 [00:39<00:34,  3.52it/s][A
 45%|████▍     | 99/221 [00:39<00:31,  3.91it/s][A
 45%|████▌     | 100/221 [00:39<00:28,  4.19it/s][A
 46%|████▌     | 101/221 [00:39<00:25,  4.69it/s][A
 46%|████▌     | 102/221 [00:40<00:30,  3.90it/s][A
 47%|████▋     | 103/221 [00:40<00:25,  4.54it/s][A
 47%|████▋     | 104/221 [00:40<00:22,  5.21it/s][A
 48%|████▊     | 105/221 [00:40<00:25,  4.64it/s][A
 48%|████▊     | 106/221 [00:41<00:45,  2.55it/s][A
 48%|████▊     | 107/221 [00:41<00:41,  2.72it/s][A
 49%|████▉     | 108/221 [00:42<00:38,  2.96it/s][A
 49%|████▉     | 109/221 [00:42<00:33,  3.38it/s][A
 50%|████▉     | 110/221 [00:42<00:27,  4.02it/s][A
 50%|█████     | 111/221 [00:42<00:34,  3.21it/s][A
 51%|█████     | 112/221 [00:43<00:30,  3.57it/s][A
 51%|█████     | 113/221 [00:43<00:31,  3.44it/s][A
 52%|█████▏    | 114/221 [00:43<00:25,  4.14it/s][A
 52%|█████▏    | 115/221 [00:43<00:21,  4.82it/s][A[h264 @ 0x563549a70a00] mmco: unref short failure
[h264 @ 0x563549a70a00] mmco: unref short failure

 52%|█████▏    | 116/221 [00:48<02:54,  1.66s/it][A
 53%|█████▎    | 117/221 [00:48<02:09,  1.25s/it][A[h264 @ 0x55568bec54c0] mmco: unref short failure

 53%|█████▎    | 118/221 [00:49<01:37,  1.06it/s][A
 54%|█████▍    | 119/221 [00:49<01:13,  1.39it/s][A
 54%|█████▍    | 120/221 [00:49<00:58,  1.74it/s][A
 55%|█████▍    | 121/221 [00:49<00:48,  2.06it/s][A
 55%|█████▌    | 122/221 [00:50<00:41,  2.37it/s][A
 56%|█████▌    | 123/221 [00:50<00:32,  2.97it/s][A
 56%|█████▌    | 124/221 [00:50<00:27,  3.47it/s][A[h264 @ 0x55863ddacbc0] mmco: unref short failure

 57%|█████▋    | 125/221 [00:50<00:27,  3.50it/s][A
 57%|█████▋    | 126/221 [00:51<00:29,  3.23it/s][A
 57%|█████▋    | 127/221 [00:51<00:37,  2.52it/s][A
 58%|█████▊    | 128/221 [00:52<00:35,  2.60it/s][A
 58%|█████▊    | 129/221 [00:52<00:31,  2.95it/s][A
 59%|█████▉    | 130/221 [00:52<00:31,  2.92it/s][A
 59%|█████▉    | 131/221 [00:52<00:24,  3.68it/s][A
 60%|█████▉    | 132/221 [00:52<00:21,  4.10it/s][A
 60%|██████    | 133/221 [00:53<00:22,  3.93it/s][A[h264 @ 0x55772a4d1b80] mmco: unref short failure
[h264 @ 0x55772a4d1b80] mmco: unref short failure

 61%|██████    | 134/221 [00:53<00:21,  4.04it/s][A
 61%|██████    | 135/221 [00:53<00:27,  3.10it/s][A
 62%|██████▏   | 136/221 [00:54<00:29,  2.90it/s][A
 62%|██████▏   | 137/221 [00:54<00:27,  3.01it/s][A
 62%|██████▏   | 138/221 [00:54<00:26,  3.17it/s][A
 63%|██████▎   | 139/221 [00:55<00:30,  2.73it/s][A
 63%|██████▎   | 140/221 [00:55<00:27,  2.99it/s][A
 64%|██████▍   | 141/221 [00:55<00:22,  3.50it/s][A
 64%|██████▍   | 142/221 [00:56<00:25,  3.10it/s][A
 65%|██████▍   | 143/221 [00:56<00:29,  2.62it/s][A
 65%|██████▌   | 144/221 [00:56<00:23,  3.22it/s][A
 66%|██████▌   | 146/221 [00:57<00:15,  4.92it/s][A
 67%|██████▋   | 147/221 [00:57<00:13,  5.29it/s][A
 67%|██████▋   | 148/221 [00:57<00:14,  4.96it/s][A
 67%|██████▋   | 149/221 [00:57<00:13,  5.19it/s][A
 68%|██████▊   | 150/221 [00:57<00:13,  5.23it/s][A[h264 @ 0x5556d0640840] mmco: unref short failure
[h264 @ 0x5556d0640840] mmco: unref short failure
[h264 @ 0x5556d0640840] mmco: unref short failure
[h264 @ 0x5556d0640840] mmco: unref short failure

 68%|██████▊   | 151/221 [00:58<00:31,  2.19it/s][A
 69%|██████▉   | 152/221 [00:59<00:32,  2.10it/s][A
 69%|██████▉   | 153/221 [00:59<00:27,  2.44it/s][A
 70%|██████▉   | 154/221 [01:00<00:29,  2.30it/s][A
 70%|███████   | 155/221 [01:00<00:23,  2.84it/s][A
 71%|███████   | 156/221 [01:00<00:18,  3.55it/s][A
 71%|███████   | 157/221 [01:03<01:18,  1.22s/it][A
 71%|███████▏  | 158/221 [01:04<00:57,  1.10it/s][A
 72%|███████▏  | 160/221 [01:04<00:34,  1.78it/s][A
 73%|███████▎  | 162/221 [01:04<00:24,  2.39it/s][A
 74%|███████▍  | 163/221 [01:05<00:21,  2.70it/s][A
 74%|███████▍  | 164/221 [01:05<00:18,  3.09it/s][A
 75%|███████▍  | 165/221 [01:05<00:16,  3.44it/s][A
 75%|███████▌  | 166/221 [01:05<00:16,  3.25it/s][A
 76%|███████▌  | 167/221 [01:05<00:14,  3.84it/s][A
 76%|███████▌  | 168/221 [01:07<00:41,  1.28it/s][A
 76%|███████▋  | 169/221 [01:08<00:32,  1.58it/s][A
 77%|███████▋  | 170/221 [01:08<00:27,  1.85it/s][A
 77%|███████▋  | 171/221 [01:08<00:23,  2.11it/s][A
 78%|███████▊  | 172/221 [01:09<00:20,  2.42it/s][A
 78%|███████▊  | 173/221 [01:09<00:15,  3.00it/s][A
 79%|███████▉  | 175/221 [01:09<00:12,  3.75it/s][A
 80%|███████▉  | 176/221 [01:10<00:12,  3.48it/s][A
 80%|████████  | 177/221 [01:10<00:10,  4.17it/s][A
 81%|████████  | 178/221 [01:10<00:12,  3.34it/s][A
 81%|████████  | 179/221 [01:10<00:12,  3.28it/s][A
 82%|████████▏ | 181/221 [01:11<00:08,  4.48it/s][A
 82%|████████▏ | 182/221 [01:11<00:08,  4.72it/s][A
 83%|████████▎ | 183/221 [01:11<00:08,  4.74it/s][A
 83%|████████▎ | 184/221 [01:11<00:08,  4.61it/s][A
 84%|████████▎ | 185/221 [01:11<00:06,  5.26it/s][A
 84%|████████▍ | 186/221 [01:12<00:07,  4.86it/s][A
 85%|████████▌ | 188/221 [01:12<00:06,  5.39it/s][A
 86%|████████▌ | 189/221 [01:12<00:06,  5.01it/s][A
 86%|████████▌ | 190/221 [01:13<00:07,  4.36it/s][A
 87%|████████▋ | 192/221 [01:13<00:05,  5.30it/s][A
 88%|████████▊ | 194/221 [01:13<00:06,  4.23it/s][A
 88%|████████▊ | 195/221 [01:14<00:05,  4.79it/s][A
 89%|████████▊ | 196/221 [01:14<00:05,  4.98it/s][A
 89%|████████▉ | 197/221 [01:14<00:04,  5.25it/s][A
 90%|████████▉ | 198/221 [01:14<00:04,  5.17it/s][A
 90%|█████████ | 199/221 [01:14<00:04,  5.11it/s][A
 90%|█████████ | 200/221 [01:15<00:05,  3.65it/s][A
 91%|█████████ | 201/221 [01:15<00:05,  3.69it/s][A
 91%|█████████▏| 202/221 [01:15<00:04,  4.26it/s][A
 92%|█████████▏| 203/221 [01:15<00:04,  4.04it/s][A
 93%|█████████▎| 205/221 [01:16<00:02,  5.68it/s][A
 93%|█████████▎| 206/221 [01:16<00:03,  4.92it/s][A
 94%|█████████▍| 208/221 [01:16<00:02,  6.33it/s][A
 95%|█████████▌| 210/221 [01:16<00:01,  8.31it/s][A
 96%|█████████▌| 212/221 [01:17<00:01,  5.50it/s][A
 97%|█████████▋| 214/221 [01:18<00:01,  3.83it/s][A
 97%|█████████▋| 215/221 [01:18<00:01,  4.05it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  4.13it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  3.74it/s][A
 99%|█████████▊| 218/221 [01:19<00:00,  3.67it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  3.85it/s][A[h264 @ 0x5577221b1900] mmco: unref short failure
[h264 @ 0x55772ab7a700] mmco: unref short failure

100%|█████████▉| 220/221 [01:24<00:01,  1.49s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.11s/it][A100%|██████████| 221/221 [01:24<00:00,  2.62it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.41it/s][A
  1%|          | 2/221 [00:00<01:04,  3.41it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.40it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.35it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.32it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.35it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.37it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 10/221 [00:02<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.32it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.35it/s][A[h264 @ 0x55568bd4e040] mmco: unref short failure

  6%|▌         | 13/221 [00:03<01:02,  3.32it/s][A[h264 @ 0x55568bd4e040] mmco: unref short failure
[h264 @ 0x55568bd4e040] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:01,  3.34it/s][A[h264 @ 0x55568bd4e040] mmco: unref short failure

  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A[h264 @ 0x55863dc90800] mmco: unref short failure

  7%|▋         | 16/221 [00:04<01:00,  3.36it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.38it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.36it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.37it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.39it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.39it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.39it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.37it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.32it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.34it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.33it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.35it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.36it/s][A[h264 @ 0x563551d22cc0] mmco: unref short failure

 15%|█▍        | 33/221 [00:09<00:55,  3.38it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.39it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.39it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.39it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.39it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.40it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.40it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.40it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.41it/s][A
 20%|█▉        | 44/221 [00:13<00:51,  3.41it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.41it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.41it/s][A
 21%|██▏       | 47/221 [00:13<00:51,  3.41it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.41it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 54/221 [00:15<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:48<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  7.00it/s][A
  1%|          | 2/221 [00:00<00:55,  3.93it/s][A
  1%|▏         | 3/221 [00:00<01:08,  3.20it/s][A
  2%|▏         | 4/221 [00:01<00:53,  4.04it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.38it/s][A
  3%|▎         | 7/221 [00:01<00:48,  4.42it/s][A
  4%|▎         | 8/221 [00:02<00:56,  3.76it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.86it/s][A
  5%|▍         | 10/221 [00:02<00:49,  4.25it/s][A
  5%|▍         | 11/221 [00:02<00:57,  3.66it/s][A
  5%|▌         | 12/221 [00:03<00:54,  3.80it/s][A
  6%|▌         | 13/221 [00:03<01:25,  2.43it/s][A
  6%|▋         | 14/221 [00:04<01:11,  2.88it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.94it/s][A
  7%|▋         | 16/221 [00:04<01:08,  2.98it/s][A
  8%|▊         | 17/221 [00:05<01:17,  2.65it/s][A
  8%|▊         | 18/221 [00:05<01:16,  2.66it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.68it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.28it/s][A
 10%|▉         | 22/221 [00:06<00:44,  4.47it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.47it/s][A
 11%|█▏        | 25/221 [00:06<00:43,  4.50it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.11it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  3.98it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.61it/s][A
 13%|█▎        | 29/221 [00:07<00:53,  3.59it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.37it/s][A
 14%|█▍        | 31/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 32/221 [00:08<00:55,  3.42it/s][A
 15%|█▍        | 33/221 [00:09<00:52,  3.61it/s][A
 15%|█▌        | 34/221 [00:09<00:57,  3.27it/s][A
 16%|█▌        | 35/221 [00:09<01:02,  2.98it/s][A
 16%|█▋        | 36/221 [00:10<00:58,  3.15it/s][A
 17%|█▋        | 37/221 [00:10<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:10<00:53,  3.42it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.67it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.31it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.41it/s][A
 19%|█▉        | 42/221 [00:11<00:48,  3.69it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.30it/s][A
 20%|█▉        | 44/221 [00:12<00:53,  3.29it/s][A
 20%|██        | 45/221 [00:12<01:01,  2.84it/s][A
 21%|██        | 46/221 [00:13<00:55,  3.17it/s][A
 21%|██▏       | 47/221 [00:13<00:47,  3.67it/s][A
 22%|██▏       | 48/221 [00:13<00:40,  4.28it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  4.94it/s][A
 23%|██▎       | 50/221 [00:13<00:38,  4.47it/s][A
 23%|██▎       | 51/221 [00:14<00:43,  3.93it/s][A
 24%|██▍       | 53/221 [00:14<00:40,  4.16it/s][A
 24%|██▍       | 54/221 [00:14<00:40,  4.10it/s][A
 25%|██▍       | 55/221 [00:15<00:44,  3.77it/s][A
 25%|██▌       | 56/221 [00:15<00:44,  3.72it/s][A
 26%|██▌       | 57/221 [00:15<00:46,  3.49it/s][A
 26%|██▌       | 58/221 [00:15<00:38,  4.21it/s][A
 27%|██▋       | 59/221 [00:16<00:38,  4.25it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.42it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.40it/s][A
 28%|██▊       | 62/221 [00:16<00:41,  3.83it/s][A
 29%|██▊       | 63/221 [00:17<00:36,  4.39it/s][A
 29%|██▉       | 64/221 [00:17<00:35,  4.41it/s][A
 29%|██▉       | 65/221 [00:17<00:36,  4.26it/s][A
 30%|██▉       | 66/221 [00:17<00:42,  3.61it/s][A
 30%|███       | 67/221 [00:18<00:54,  2.85it/s][A
 31%|███       | 68/221 [00:18<00:51,  2.96it/s][A
 31%|███       | 69/221 [00:19<00:55,  2.73it/s][A
 32%|███▏      | 70/221 [00:19<00:47,  3.16it/s][A
 32%|███▏      | 71/221 [00:19<00:51,  2.89it/s][A
 33%|███▎      | 72/221 [00:20<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  2.96it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.22it/s][A
 34%|███▍      | 75/221 [00:21<00:44,  3.28it/s][A
 34%|███▍      | 76/221 [00:21<00:38,  3.76it/s][A
 35%|███▍      | 77/221 [00:21<00:36,  3.97it/s][A
 35%|███▌      | 78/221 [00:21<00:40,  3.51it/s][A
 36%|███▌      | 79/221 [00:22<00:39,  3.56it/s][A
 36%|███▌      | 80/221 [00:22<00:35,  3.94it/s][A
 37%|███▋      | 81/221 [00:22<00:34,  4.06it/s][A
 37%|███▋      | 82/221 [00:22<00:38,  3.64it/s][A
 38%|███▊      | 83/221 [00:22<00:32,  4.21it/s][A
 38%|███▊      | 84/221 [00:23<00:42,  3.20it/s][A
 38%|███▊      | 85/221 [00:23<00:41,  3.31it/s][A
 39%|███▉      | 86/221 [00:24<00:43,  3.11it/s][A
 39%|███▉      | 87/221 [00:24<00:52,  2.57it/s][A
 40%|███▉      | 88/221 [00:24<00:47,  2.83it/s][A
 40%|████      | 89/221 [00:25<00:47,  2.78it/s][A
 41%|████      | 90/221 [00:25<00:48,  2.69it/s][A
 41%|████      | 91/221 [00:25<00:41,  3.12it/s][A
 42%|████▏     | 92/221 [00:26<00:41,  3.12it/s][A
 42%|████▏     | 93/221 [00:26<00:46,  2.74it/s][A
 43%|████▎     | 94/221 [00:26<00:41,  3.03it/s][A
 43%|████▎     | 95/221 [00:27<00:48,  2.61it/s][A
 43%|████▎     | 96/221 [00:27<00:45,  2.73it/s][A
 44%|████▍     | 97/221 [00:28<00:42,  2.92it/s][A
 44%|████▍     | 98/221 [00:28<00:42,  2.92it/s][A
 45%|████▍     | 99/221 [00:28<00:40,  3.00it/s][A
 45%|████▌     | 100/221 [00:28<00:34,  3.54it/s][A
 46%|████▌     | 101/221 [00:29<00:30,  3.96it/s][A
 46%|████▌     | 102/221 [00:29<00:31,  3.72it/s][A
 47%|████▋     | 103/221 [00:29<00:30,  3.84it/s][A
 47%|████▋     | 104/221 [00:29<00:26,  4.46it/s][A
 48%|████▊     | 105/221 [00:30<00:29,  3.90it/s][A
 48%|████▊     | 106/221 [00:30<00:34,  3.32it/s][A
 48%|████▊     | 107/221 [00:30<00:30,  3.72it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.11it/s][A
 49%|████▉     | 109/221 [00:31<00:28,  3.94it/s][A
 50%|████▉     | 110/221 [00:31<00:29,  3.81it/s][A
 50%|█████     | 111/221 [00:31<00:31,  3.51it/s][A
 51%|█████     | 112/221 [00:32<00:32,  3.36it/s][A
 51%|█████     | 113/221 [00:32<00:31,  3.38it/s][A
 52%|█████▏    | 115/221 [00:32<00:24,  4.35it/s][A
 52%|█████▏    | 116/221 [00:32<00:24,  4.34it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.10it/s][A
 53%|█████▎    | 118/221 [00:33<00:28,  3.66it/s][A
 54%|█████▍    | 119/221 [00:34<00:33,  3.07it/s][A
 54%|█████▍    | 120/221 [00:34<00:33,  3.02it/s][A
 55%|█████▍    | 121/221 [00:34<00:29,  3.37it/s][A
 55%|█████▌    | 122/221 [00:34<00:27,  3.61it/s][A
 56%|█████▌    | 123/221 [00:35<00:27,  3.59it/s][A
 56%|█████▌    | 124/221 [00:35<00:31,  3.08it/s][A
 57%|█████▋    | 125/221 [00:36<00:37,  2.56it/s][A
 57%|█████▋    | 126/221 [00:36<00:33,  2.82it/s][A
 57%|█████▋    | 127/221 [00:36<00:37,  2.48it/s][A
 58%|█████▊    | 128/221 [00:37<00:32,  2.90it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.40it/s][A
 59%|█████▉    | 130/221 [00:37<00:27,  3.33it/s][A
 59%|█████▉    | 131/221 [00:37<00:24,  3.62it/s][A
 60%|█████▉    | 132/221 [00:38<00:24,  3.62it/s][A
 60%|██████    | 133/221 [00:38<00:29,  3.03it/s][A
 61%|██████    | 134/221 [00:39<00:34,  2.49it/s][A
 61%|██████    | 135/221 [00:39<00:27,  3.16it/s][A
 62%|██████▏   | 136/221 [00:39<00:27,  3.08it/s][A
 62%|██████▏   | 137/221 [00:39<00:24,  3.47it/s][A
 62%|██████▏   | 138/221 [00:39<00:22,  3.62it/s][A
 63%|██████▎   | 139/221 [00:40<00:24,  3.29it/s][A
 63%|██████▎   | 140/221 [00:40<00:22,  3.64it/s][A
 64%|██████▍   | 141/221 [00:40<00:25,  3.20it/s][A
 64%|██████▍   | 142/221 [00:41<00:22,  3.59it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.39it/s][A
 65%|██████▌   | 144/221 [00:41<00:19,  4.01it/s][A
 66%|██████▌   | 145/221 [00:41<00:19,  3.82it/s][A
 66%|██████▌   | 146/221 [00:42<00:20,  3.61it/s][A
 67%|██████▋   | 147/221 [00:42<00:18,  4.08it/s][A
 67%|██████▋   | 148/221 [00:42<00:20,  3.65it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.60it/s][A
 68%|██████▊   | 150/221 [00:43<00:19,  3.70it/s][A
 68%|██████▊   | 151/221 [00:43<00:23,  2.97it/s][A
 69%|██████▉   | 152/221 [00:44<00:31,  2.16it/s][A
 69%|██████▉   | 153/221 [00:44<00:27,  2.45it/s][A
 70%|██████▉   | 154/221 [00:45<00:24,  2.69it/s][A
 70%|███████   | 155/221 [00:45<00:25,  2.60it/s][A
 71%|███████   | 156/221 [00:45<00:22,  2.95it/s][A
 71%|███████   | 157/221 [00:46<00:20,  3.13it/s][A
 71%|███████▏  | 158/221 [00:46<00:21,  2.90it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.29it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.51it/s][A
 73%|███████▎  | 161/221 [00:47<00:14,  4.25it/s][A
 73%|███████▎  | 162/221 [00:47<00:12,  4.64it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.30it/s][A
 74%|███████▍  | 164/221 [00:47<00:11,  4.82it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.52it/s][A
 75%|███████▌  | 166/221 [00:48<00:14,  3.90it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  4.03it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  4.07it/s][A
 76%|███████▋  | 169/221 [00:48<00:10,  4.87it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.18it/s][A
 77%|███████▋  | 171/221 [00:49<00:17,  2.85it/s][A
 78%|███████▊  | 172/221 [00:50<00:17,  2.80it/s][A
 78%|███████▊  | 173/221 [00:50<00:16,  2.82it/s][A
 79%|███████▊  | 174/221 [00:50<00:16,  2.84it/s][A
 79%|███████▉  | 175/221 [00:51<00:16,  2.79it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.25it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:17,  2.48it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.77it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.51it/s][A
 82%|████████▏ | 181/221 [00:53<00:13,  3.05it/s][A
 82%|████████▏ | 182/221 [00:53<00:12,  3.20it/s][A
 83%|████████▎ | 183/221 [00:53<00:13,  2.90it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.00it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.77it/s][A
 84%|████████▍ | 186/221 [00:54<00:12,  2.89it/s][A
 85%|████████▍ | 187/221 [00:54<00:10,  3.35it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.78it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.19it/s][A
 86%|████████▋ | 191/221 [00:55<00:07,  3.87it/s][A
 87%|████████▋ | 192/221 [00:56<00:06,  4.21it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.31it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.81it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  3.99it/s][A
 89%|████████▊ | 196/221 [00:57<00:08,  3.03it/s][A
 89%|████████▉ | 197/221 [00:57<00:08,  2.72it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.67it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  3.09it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.11it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.57it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.65it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.64it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.72it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.74it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  2.99it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.30it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.56it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.57it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.91it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.44it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.32it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.76it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.89it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.91it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.16it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.41it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.34it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.70it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.24it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'area_r1': 40.0, 'area_recall': '40.0/65.8/75.0', 'area_ravg': 60.3}
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'forward_r1': 38.5, 'forward_recall': '38.5/67.5/77.3', 'forward_ravg': 61.1}
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/67.9/78.8', 'area_video_ravg': 62.0}
09/17/2024 05:18:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 05:18:55 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 05:18:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 05:18:55 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'video_r1': 36.9, 'video_recall': '36.9/64.7/75.1', 'video_ravg': 58.9}
09/17/2024 05:18:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 05:18:55 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 05:18:55 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 849--===========

09/17/2024 05:18:55 - INFO - __main__ -   {'video_r1': 51.9, 'video_recall': '51.9/75.0/81.6', 'video_ravg': 69.5}
09/17/2024 05:18:55 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 05:18:55 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
[h264 @ 0x557727b6cd80] mmco: unref short failure
09/17/2024 05:19:25 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.009601824916899204, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1472338438034058, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.155557870864868, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.3123936653137207}
 29%|██▉       | 850/2910 [5:23:28<79:52:20, 139.58s/it] 29%|██▉       | 851/2910 [5:23:32<56:33:10, 98.88s/it]  29%|██▉       | 852/2910 [5:23:37<40:22:33, 70.63s/it][h264 @ 0x55863bb68b00] mmco: unref short failure
[h264 @ 0x5576e03de0c0] mmco: unref short failure
[h264 @ 0x5576e03de0c0] mmco: unref short failure
 29%|██▉       | 853/2910 [5:23:42<29:05:33, 50.92s/it][h264 @ 0x55568d286c80] mmco: unref short failure
[h264 @ 0x55568d286c80] mmco: unref short failure
[h264 @ 0x5556cbe239c0] mmco: unref short failure
[h264 @ 0x5556cbe239c0] mmco: unref short failure
 29%|██▉       | 854/2910 [5:23:48<21:23:02, 37.44s/it] 29%|██▉       | 855/2910 [5:23:54<15:58:12, 27.98s/it][h264 @ 0x56355cbaf500] mmco: unref short failure
[h264 @ 0x56355cbaf500] mmco: unref short failure
[h264 @ 0x56355cbaf500] mmco: unref short failure
[h264 @ 0x56355cbaf500] mmco: unref short failure
 29%|██▉       | 856/2910 [5:24:00<12:12:18, 21.39s/it] 29%|██▉       | 857/2910 [5:24:07<9:43:57, 17.07s/it]  29%|██▉       | 858/2910 [5:24:13<7:55:55, 13.92s/it][h264 @ 0x5576df1ae680] mmco: unref short failure
 30%|██▉       | 859/2910 [5:24:20<6:36:31, 11.60s/it][h264 @ 0x557725db1600] mmco: unref short failure
[h264 @ 0x557725db1600] mmco: unref short failure
[h264 @ 0x56355d0acf40] mmco: unref short failure
[h264 @ 0x56355d0acf40] mmco: unref short failure
[h264 @ 0x557719940400] mmco: unref short failure
[h264 @ 0x557719940400] mmco: unref short failure
 30%|██▉       | 860/2910 [5:24:26<5:45:56, 10.13s/it][h264 @ 0x5556e41e44c0] mmco: unref short failure
[h264 @ 0x5556e41e44c0] mmco: unref short failure
 30%|██▉       | 861/2910 [5:24:33<5:09:01,  9.05s/it][h264 @ 0x5556dea06100] mmco: unref short failure
[h264 @ 0x5556dea06100] mmco: unref short failure
 30%|██▉       | 862/2910 [5:24:39<4:44:30,  8.34s/it][h264 @ 0x55772b4a52c0] mmco: unref short failure
 30%|██▉       | 863/2910 [5:24:47<4:34:53,  8.06s/it] 30%|██▉       | 864/2910 [5:24:54<4:25:15,  7.78s/it] 30%|██▉       | 865/2910 [5:25:01<4:17:12,  7.55s/it][h264 @ 0x55863cd21000] mmco: unref short failure
[h264 @ 0x55863cd21000] mmco: unref short failure
[h264 @ 0x55863cd21000] mmco: unref short failure
[h264 @ 0x55863cd21000] mmco: unref short failure
09/17/2024 05:21:12 - INFO - __main__ -   current idx gI8ShUTkJf8.29 from finetune_area returns wrong image/video, use 24681 instead.
[h264 @ 0x558655183d00] mmco: unref short failure
[h264 @ 0x5556d284f940] mmco: unref short failure
 30%|██▉       | 866/2910 [5:25:31<8:10:35, 14.40s/it][h264 @ 0x56355b2ab5c0] mmco: unref short failure
[h264 @ 0x55771eb30140] mmco: unref short failure
 30%|██▉       | 867/2910 [5:25:44<7:53:30, 13.91s/it][h264 @ 0x563545850800] mmco: unref short failure
[h264 @ 0x563545850800] mmco: unref short failure
[h264 @ 0x557727b6cd80] mmco: unref short failure
[h264 @ 0x55863cd21000] mmco: unref short failure
[h264 @ 0x55863cd21000] mmco: unref short failure
[h264 @ 0x563541408800] mmco: unref short failure
[h264 @ 0x563541408800] mmco: unref short failure
[h264 @ 0x563541408800] mmco: unref short failure
 30%|██▉       | 868/2910 [5:26:01<8:20:24, 14.70s/it][h264 @ 0x5556cb346340] mmco: unref short failure
[h264 @ 0x5556cb346340] mmco: unref short failure
[h264 @ 0x5556dea06100] mmco: unref short failure
[h264 @ 0x5556dea06100] mmco: unref short failure
[h264 @ 0x5556dea06100] mmco: unref short failure
[h264 @ 0x5577306c5740] mmco: unref short failure
[h264 @ 0x563550ef1340] mmco: unref short failure
[h264 @ 0x563550ef1340] mmco: unref short failure
[h264 @ 0x55864b399680] mmco: unref short failure
[h264 @ 0x5577270122c0] mmco: unref short failure
 30%|██▉       | 869/2910 [5:26:07<6:57:31, 12.27s/it][h264 @ 0x563544a43200] mmco: unref short failure
[h264 @ 0x563544a43200] mmco: unref short failure
[h264 @ 0x5635486d7380] mmco: unref short failure
[h264 @ 0x5635486d7380] mmco: unref short failure
[h264 @ 0x55771b4329c0] mmco: unref short failure
[h264 @ 0x55771b4329c0] mmco: unref short failure
[h264 @ 0x5576df32c400] mmco: unref short failure
 30%|██▉       | 870/2910 [5:26:24<7:41:54, 13.59s/it][h264 @ 0x5556d7c7c280] mmco: unref short failure
[h264 @ 0x5556d7c7c280] mmco: unref short failure
 30%|██▉       | 871/2910 [5:26:35<7:10:21, 12.66s/it][h264 @ 0x55863af54ec0] mmco: unref short failure
[h264 @ 0x55863af54ec0] mmco: unref short failure
 30%|██▉       | 872/2910 [5:26:41<6:03:51, 10.71s/it][h264 @ 0x5576df241b40] mmco: unref short failure
 30%|███       | 873/2910 [5:26:47<5:22:50,  9.51s/it][h264 @ 0x5577219fd180] mmco: unref short failure
[h264 @ 0x557718d702c0] mmco: unref short failure
[h264 @ 0x5556dfce9440] mmco: unref short failure
[h264 @ 0x5556dfce9440] mmco: unref short failure
09/17/2024 05:23:10 - INFO - __main__ -   current idx TVD87stlv5k.46 from finetune_area returns wrong image/video, use 67859 instead.
[h264 @ 0x55864ef7d440] mmco: unref short failure
[h264 @ 0x55864ef7d440] mmco: unref short failure
09/17/2024 05:23:18 - INFO - __main__ -   current idx hDAA1fIvxDY.2 from finetune_area returns wrong image/video, use 28742 instead.
[h264 @ 0x5556cb345ec0] mmco: unref short failure
[h264 @ 0x5635549a1f40] mmco: unref short failure
[h264 @ 0x5635549a1f40] mmco: unref short failure
[h264 @ 0x55771dcc9fc0] mmco: unref short failure
[h264 @ 0x563542cede80] mmco: unref short failure
[h264 @ 0x557732503a00] mmco: unref short failure
 30%|███       | 874/2910 [5:28:03<16:32:30, 29.25s/it][h264 @ 0x5635539bed00] mmco: unref short failure
[h264 @ 0x5577312e8580] mmco: unref short failure
[h264 @ 0x563548b88140] mmco: unref short failure
 30%|███       | 875/2910 [5:28:27<15:39:12, 27.69s/it][h264 @ 0x56354e6b1a40] mmco: unref short failure
[h264 @ 0x56354e6b1a40] mmco: unref short failure
[h264 @ 0x558644a29240] mmco: unref short failure
 30%|███       | 876/2910 [5:28:33<11:58:23, 21.19s/it][h264 @ 0x5635438ac180] mmco: unref short failure
[h264 @ 0x5635438ac180] mmco: unref short failure
[h264 @ 0x5635438ac180] mmco: unref short failure
[h264 @ 0x5635438ac180] mmco: unref short failure
 30%|███       | 877/2910 [5:28:40<9:34:27, 16.95s/it] [h264 @ 0x558639cf9300] mmco: unref short failure
[h264 @ 0x558639cf9300] mmco: unref short failure
[h264 @ 0x5635445c2480] mmco: unref short failure
[h264 @ 0x5556e379b3c0] mmco: unref short failure
[h264 @ 0x5556e379b3c0] mmco: unref short failure
 30%|███       | 878/2910 [5:28:55<9:12:13, 16.31s/it][h264 @ 0x5556d4295480] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x5577178c4000] mmco: unref short failure
[h264 @ 0x56354d62b880] mmco: unref short failure
 30%|███       | 879/2910 [5:29:11<9:07:49, 16.18s/it]09/17/2024 05:25:11 - INFO - __main__ -   current idx 6D_ahpoF_r4.148 from finetune_area returns wrong image/video, use 104227 instead.
 30%|███       | 880/2910 [5:29:18<7:34:29, 13.43s/it]09/17/2024 05:25:18 - INFO - __main__ -   current idx bFHOzJ5hSFg.79 from finetune_area returns wrong image/video, use 106211 instead.
 30%|███       | 881/2910 [5:29:24<6:22:45, 11.32s/it][h264 @ 0x563545730600] mmco: unref short failure
[h264 @ 0x55865007da00] mmco: unref short failure
[h264 @ 0x55865007da00] mmco: unref short failure
[h264 @ 0x563561328a80] mmco: unref short failure
[h264 @ 0x5586469ae900] mmco: unref short failure
[h264 @ 0x558651416dc0] mmco: unref short failure
[h264 @ 0x558651416dc0] mmco: unref short failure
[h264 @ 0x563556854b80] mmco: unref short failure
[h264 @ 0x563556854b80] mmco: unref short failure
[h264 @ 0x55771b513500] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x557729d37e40] mmco: unref short failure
[h264 @ 0x563555f36d80] mmco: unref short failure
 30%|███       | 882/2910 [5:30:27<15:02:21, 26.70s/it][h264 @ 0x557722f3dc80] mmco: unref short failure
[h264 @ 0x5556d95cdf00] mmco: unref short failure
[h264 @ 0x5556d95cdf00] mmco: unref short failure
[h264 @ 0x56356103e400] mmco: unref short failure
09/17/2024 05:26:37 - INFO - __main__ -   current idx d018IFLZh_8.4 from finetune_area returns wrong image/video, use 64184 instead.
[h264 @ 0x563554bc6900] mmco: unref short failure
[h264 @ 0x563550a44d80] mmco: unref short failure
[h264 @ 0x563550a44d80] mmco: unref short failure
[h264 @ 0x5577176a4fc0] mmco: unref short failure
[h264 @ 0x5577176a4fc0] mmco: unref short failure
[h264 @ 0x5556d40dc180] mmco: unref short failure
[h264 @ 0x5556d40dc180] mmco: unref short failure
[h264 @ 0x56355b2ab7c0] mmco: unref short failure
[h264 @ 0x5556c45473c0] mmco: unref short failure
[h264 @ 0x5556c45473c0] mmco: unref short failure
[h264 @ 0x557718f22ac0] mmco: unref short failure
 30%|███       | 883/2910 [5:31:12<18:12:14, 32.33s/it][h264 @ 0x5556e4cc3040] mmco: unref short failure
 30%|███       | 884/2910 [5:31:19<13:54:23, 24.71s/it]09/17/2024 05:27:21 - INFO - __main__ -   current idx 0Hu1HI7Jvzs.159 from finetune_area returns wrong image/video, use 38725 instead.
 30%|███       | 885/2910 [5:31:25<10:48:48, 19.22s/it][h264 @ 0x5556dbb04400] mmco: unref short failure
[h264 @ 0x5556dbb04400] mmco: unref short failure
 30%|███       | 886/2910 [5:31:32<8:44:52, 15.56s/it]  30%|███       | 887/2910 [5:31:39<7:10:42, 12.77s/it][h264 @ 0x55864337d0c0] mmco: unref short failure
 31%|███       | 888/2910 [5:31:46<6:17:46, 11.21s/it][h264 @ 0x5635448e36c0] mmco: unref short failure
[h264 @ 0x5635448e36c0] mmco: unref short failure
[h264 @ 0x557738317fc0] mmco: unref short failure
[h264 @ 0x557738317fc0] mmco: unref short failure
[h264 @ 0x557738317fc0] mmco: unref short failure
[h264 @ 0x557738317fc0] mmco: unref short failure
[h264 @ 0x56356272d8c0] mmco: unref short failure
 31%|███       | 889/2910 [5:31:52<5:26:49,  9.70s/it][h264 @ 0x5577176a4b80] mmco: unref short failure
[h264 @ 0x5577176a4b80] mmco: unref short failure
[h264 @ 0x5577176a4b80] mmco: unref short failure
[h264 @ 0x5577246d8700] mmco: unref short failure
[h264 @ 0x5577246d8700] mmco: unref short failure
[h264 @ 0x5556ce10aec0] mmco: unref short failure
[h264 @ 0x5556ce10aec0] mmco: unref short failure
[h264 @ 0x557725793080] mmco: unref short failure
[h264 @ 0x557725793080] mmco: unref short failure
[h264 @ 0x557725793080] mmco: unref short failure
[h264 @ 0x55863861cec0] mmco: unref short failure
[h264 @ 0x55863861cec0] mmco: unref short failure
[h264 @ 0x55864fe89280] mmco: unref short failure
[h264 @ 0x55864fe89280] mmco: unref short failure
[h264 @ 0x55864e74cc80] mmco: unref short failure
[h264 @ 0x55864e74cc80] mmco: unref short failure
09/17/2024 05:28:38 - INFO - __main__ -   current idx 4XizDIlnZbw.3 from finetune_area returns wrong image/video, use 96832 instead.
[h264 @ 0x55771ea5cc00] mmco: unref short failure
[h264 @ 0x55771ea5cc00] mmco: unref short failure
[h264 @ 0x55771ea5cc00] mmco: unref short failure
[h264 @ 0x55771ea5cc00] mmco: unref short failure
[h264 @ 0x56354c5b5400] mmco: unref short failure
[h264 @ 0x558651473140] mmco: unref short failure
 31%|███       | 890/2910 [5:32:53<14:04:18, 25.08s/it][h264 @ 0x5556d40dc180] mmco: unref short failure
[h264 @ 0x558631e44f40] mmco: unref short failure
[h264 @ 0x5556d93e6700] mmco: unref short failure
[h264 @ 0x557720535cc0] mmco: unref short failure
[h264 @ 0x55772998a9c0] mmco: unref short failure
[h264 @ 0x55772998a9c0] mmco: unref short failure
[h264 @ 0x5556d3bc1440] mmco: unref short failure
[h264 @ 0x5556d3bc1440] mmco: unref short failure
[h264 @ 0x5556d3bc1440] mmco: unref short failure
[h264 @ 0x5556d3bc1440] mmco: unref short failure
 31%|███       | 891/2910 [5:33:42<18:01:34, 32.14s/it][h264 @ 0x56354617a9c0] mmco: unref short failure
[h264 @ 0x56354617a9c0] mmco: unref short failure
[h264 @ 0x5576de285200] mmco: unref short failure
[h264 @ 0x5576de285200] mmco: unref short failure
[h264 @ 0x55864be44580] mmco: unref short failure
[h264 @ 0x55864be44580] mmco: unref short failure
 31%|███       | 892/2910 [5:33:48<13:40:08, 24.38s/it][h264 @ 0x5556c4831080] mmco: unref short failure
[h264 @ 0x5556c4831080] mmco: unref short failure
[h264 @ 0x55864e9f4300] mmco: unref short failure
[h264 @ 0x55864e9f4300] mmco: unref short failure
 31%|███       | 893/2910 [5:33:56<10:47:20, 19.26s/it][h264 @ 0x5635539cd1c0] mmco: unref short failure
[h264 @ 0x55863cb3bb80] mmco: unref short failure
09/17/2024 05:29:59 - INFO - __main__ -   current idx 3cJe7Dudc7U.114 from finetune_area returns wrong image/video, use 111693 instead.
[h264 @ 0x56354c8bdd40] mmco: unref short failure
 31%|███       | 894/2910 [5:34:02<8:40:50, 15.50s/it]  31%|███       | 895/2910 [5:34:10<7:18:12, 13.05s/it][h264 @ 0x55773488d7c0] mmco: unref short failure
[h264 @ 0x5556d5706b00] mmco: unref short failure
 31%|███       | 896/2910 [5:34:17<6:17:14, 11.24s/it]09/17/2024 05:30:24 - INFO - __main__ -   current idx OVwFPMxJUJU.30 from finetune_area returns wrong image/video, use 54891 instead.
 31%|███       | 897/2910 [5:34:26<6:00:51, 10.76s/it][h264 @ 0x56354a9118c0] mmco: unref short failure
[h264 @ 0x56354d11ef40] mmco: unref short failure
[h264 @ 0x55865084f100] mmco: unref short failure
[h264 @ 0x56354a185f40] mmco: unref short failure
[h264 @ 0x56354a185f40] mmco: unref short failure
[h264 @ 0x55864e9f4100] mmco: unref short failure
[h264 @ 0x558648433000] mmco: unref short failure
[h264 @ 0x558648433000] mmco: unref short failure
[h264 @ 0x55771ab61000] mmco: unref short failure
[h264 @ 0x558646f50980] mmco: unref short failure
[h264 @ 0x563540cf2200] mmco: unref short failure
[h264 @ 0x563540cf2200] mmco: unref short failure
[h264 @ 0x5556d23a04c0] mmco: unref short failure
[h264 @ 0x5556d23a04c0] mmco: unref short failure
[h264 @ 0x5576dfa94cc0] mmco: unref short failure
[h264 @ 0x5576dfa94cc0] mmco: unref short failure
 31%|███       | 898/2910 [5:35:23<13:42:56, 24.54s/it][h264 @ 0x55863656cdc0] mmco: unref short failure
[h264 @ 0x55863656cdc0] mmco: unref short failure
[h264 @ 0x5576deef2340] mmco: unref short failure
[h264 @ 0x5556c44fe8c0] mmco: unref short failure
[h264 @ 0x5556c44fe8c0] mmco: unref short failure
[h264 @ 0x5556dcf1a400] mmco: unref short failure
 31%|███       | 899/2910 [5:36:11<17:37:47, 31.56s/it]09/17/2024 05:32:10 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 05:32:10 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x5576de974240] mmco: unref short failure
[h264 @ 0x5576de974240] mmco: unref short failure
[h264 @ 0x5576de974240] mmco: unref short failure
[h264 @ 0x5576de974240] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55863511bd00] mmco: unref short failure
[h264 @ 0x55863511bd00] mmco: unref short failure
[h264 @ 0x56354f204c80] mmco: unref short failure
[h264 @ 0x56354f204c80] mmco: unref short failure
[h264 @ 0x5556c7987200] mmco: unref short failure
[h264 @ 0x5556c7987200] mmco: unref short failure
[h264 @ 0x5556c7987200] mmco: unref short failure
[h264 @ 0x5556c7987200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556d67d1200] mmco: unref short failure
[h264 @ 0x5556d67d1200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55864e74ce80] mmco: unref short failure
[h264 @ 0x55864e74ce80] mmco: unref short failure
[h264 @ 0x5576decb4800] mmco: unref short failure
[h264 @ 0x5576decb4800] mmco: unref short failure
[h264 @ 0x56354b880280] mmco: unref short failure
[h264 @ 0x5586534d2640] mmco: unref short failure
[h264 @ 0x5586534d2640] mmco: unref short failure
[h264 @ 0x5586534d2640] mmco: unref short failure
[h264 @ 0x5586534d2640] mmco: unref short failure
[h264 @ 0x5586534d2640] mmco: unref short failure
[h264 @ 0x55771a701dc0] mmco: unref short failure
[h264 @ 0x55771a701dc0] mmco: unref short failure
[h264 @ 0x5586565a22c0] mmco: unref short failure
[h264 @ 0x5586565a22c0] mmco: unref short failure
[h264 @ 0x5586565a22c0] mmco: unref short failure
[h264 @ 0x5586565a22c0] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dc87df00] mmco: unref short failure
[h264 @ 0x5556dcf1a400] mmco: unref short failure
[h264 @ 0x55864034ee80] mmco: unref short failure
[h264 @ 0x55864034ee80] mmco: unref short failure
[h264 @ 0x5635444270c0] mmco: unref short failure
[h264 @ 0x5635444270c0] mmco: unref short failure
[h264 @ 0x558650834ec0] mmco: unref short failure
[h264 @ 0x558650834ec0] mmco: unref short failure
[h264 @ 0x56354f11b3c0] mmco: unref short failure
[h264 @ 0x56354f11b3c0] mmco: unref short failure
[h264 @ 0x55772c1d4440] mmco: unref short failure
[h264 @ 0x5556d3bc1640] mmco: unref short failure
[h264 @ 0x5556d3bc1640] mmco: unref short failure
[h264 @ 0x557717f77680] mmco: unref short failure
[h264 @ 0x557717f77680] mmco: unref short failure
[h264 @ 0x55772a114ac0] mmco: unref short failure
[h264 @ 0x55864a97ed80] mmco: unref short failure
[h264 @ 0x55864a97ed80] mmco: unref short failure
[h264 @ 0x55864a97ed80] mmco: unref short failure
[h264 @ 0x55864a97ed80] mmco: unref short failure
09/17/2024 05:34:25 - INFO - __main__ -   current idx g0isRLf0U2E.7 from finetune_area returns wrong image/video, use 112200 instead.
[h264 @ 0x558644297fc0] mmco: unref short failure
[h264 @ 0x558644297fc0] mmco: unref short failure
[h264 @ 0x5556e35cbbc0] mmco: unref short failure
[h264 @ 0x5556e35cbbc0] mmco: unref short failure
[h264 @ 0x5556e35cbbc0] mmco: unref short failure
[h264 @ 0x5556e35cbbc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:15,  2.90it/s][A
  1%|          | 2/221 [00:00<01:39,  2.20it/s][A
  1%|▏         | 3/221 [00:01<01:09,  3.13it/s][A
  2%|▏         | 4/221 [00:01<00:51,  4.19it/s][A
  3%|▎         | 6/221 [00:01<00:36,  5.85it/s][A
  3%|▎         | 7/221 [00:01<00:42,  5.05it/s][A09/17/2024 05:34:32 - INFO - __main__ -   current idx 4xNo2X1ZunM.19 from finetune_area returns wrong image/video, use 43691 instead.

  4%|▎         | 8/221 [00:02<01:18,  2.72it/s][A
  4%|▍         | 9/221 [00:02<01:05,  3.23it/s][A
  5%|▍         | 10/221 [00:03<01:40,  2.09it/s][A
  5%|▍         | 11/221 [00:03<01:19,  2.64it/s][A
  5%|▌         | 12/221 [00:03<01:17,  2.71it/s][A
  6%|▌         | 13/221 [00:04<01:07,  3.10it/s][A
  6%|▋         | 14/221 [00:05<01:47,  1.92it/s][A[h264 @ 0x558632ef2b40] mmco: unref short failure

  7%|▋         | 15/221 [00:05<01:28,  2.33it/s][A
  7%|▋         | 16/221 [00:05<01:19,  2.56it/s][A[h264 @ 0x5556c7626dc0] mmco: unref short failure
[h264 @ 0x5556c7626dc0] mmco: unref short failure

  8%|▊         | 17/221 [00:05<01:07,  3.02it/s][A
  8%|▊         | 18/221 [00:06<01:01,  3.28it/s][A
  9%|▊         | 19/221 [00:06<00:52,  3.82it/s][A
  9%|▉         | 20/221 [00:06<00:47,  4.24it/s][A
 10%|▉         | 21/221 [00:06<00:42,  4.72it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.41it/s][A
 11%|█         | 24/221 [00:07<00:34,  5.75it/s][A
 11%|█▏        | 25/221 [00:07<00:32,  6.10it/s][A
 12%|█▏        | 26/221 [00:07<00:35,  5.50it/s][A
 12%|█▏        | 27/221 [00:07<00:32,  5.88it/s][A
 13%|█▎        | 28/221 [00:08<00:46,  4.18it/s][A[h264 @ 0x557728f7d880] mmco: unref short failure
[h264 @ 0x557728f7d880] mmco: unref short failure

 13%|█▎        | 29/221 [00:08<00:46,  4.14it/s][A
 14%|█▎        | 30/221 [00:08<00:44,  4.29it/s][A
 14%|█▍        | 31/221 [00:08<00:39,  4.75it/s][A
 14%|█▍        | 32/221 [00:08<00:35,  5.36it/s][A
 15%|█▍        | 33/221 [00:09<00:45,  4.11it/s][A
 15%|█▌        | 34/221 [00:09<00:38,  4.89it/s][A
 16%|█▌        | 35/221 [00:09<00:35,  5.24it/s][A
 16%|█▋        | 36/221 [00:09<00:38,  4.79it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.44it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:10<00:43,  4.20it/s][A
 18%|█▊        | 40/221 [00:10<00:46,  3.87it/s][A
 19%|█▊        | 41/221 [00:11<00:39,  4.56it/s][A
 19%|█▉        | 42/221 [00:11<01:01,  2.93it/s][A
 19%|█▉        | 43/221 [00:11<00:49,  3.60it/s][A
 20%|█▉        | 44/221 [00:11<00:41,  4.27it/s][A
 20%|██        | 45/221 [00:12<01:15,  2.34it/s][A
 21%|██        | 46/221 [00:13<01:17,  2.26it/s][A[h264 @ 0x55863d0bd380] mmco: unref short failure
[h264 @ 0x55863ad3ca00] mmco: unref short failure

 21%|██▏       | 47/221 [00:14<01:59,  1.45it/s][A
 22%|██▏       | 48/221 [00:14<01:32,  1.87it/s][A[h264 @ 0x55568d495680] mmco: unref short failure
[h264 @ 0x55568d495680] mmco: unref short failure

 22%|██▏       | 49/221 [00:14<01:13,  2.35it/s][A
 23%|██▎       | 50/221 [00:14<00:56,  3.04it/s][A
 23%|██▎       | 51/221 [00:15<00:44,  3.79it/s][A
 24%|██▎       | 52/221 [00:15<00:38,  4.39it/s][A
 24%|██▍       | 53/221 [00:15<00:33,  5.07it/s][A
 24%|██▍       | 54/221 [00:18<02:56,  1.06s/it][A
 25%|██▍       | 55/221 [00:18<02:27,  1.13it/s][A
 25%|██▌       | 56/221 [00:19<01:52,  1.47it/s][A
 26%|██▌       | 57/221 [00:19<01:31,  1.80it/s][A
 26%|██▌       | 58/221 [00:19<01:09,  2.36it/s][A
 27%|██▋       | 59/221 [00:19<01:01,  2.62it/s][A
 27%|██▋       | 60/221 [00:20<01:12,  2.22it/s][A
 28%|██▊       | 61/221 [00:20<01:01,  2.62it/s][A
 28%|██▊       | 62/221 [00:20<00:53,  2.97it/s][A
 29%|██▊       | 63/221 [00:20<00:43,  3.62it/s][A
 29%|██▉       | 64/221 [00:21<00:37,  4.17it/s][A
 29%|██▉       | 65/221 [00:21<00:35,  4.39it/s][A
 30%|██▉       | 66/221 [00:21<00:54,  2.85it/s][A
 30%|███       | 67/221 [00:22<00:54,  2.81it/s][A
 31%|███       | 68/221 [00:22<00:46,  3.29it/s][A
 31%|███       | 69/221 [00:23<01:05,  2.31it/s][A
 32%|███▏      | 70/221 [00:23<00:51,  2.93it/s][A[h264 @ 0x557733e6bf80] mmco: unref short failure
[h264 @ 0x557733e6bf80] mmco: unref short failure
[h264 @ 0x56354f11b3c0] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:32,  1.42s/it][A
 33%|███▎      | 72/221 [00:27<02:39,  1.07s/it][A
 33%|███▎      | 73/221 [00:27<02:05,  1.18it/s][A
 33%|███▎      | 74/221 [00:27<01:31,  1.60it/s][A
 34%|███▍      | 75/221 [00:28<01:15,  1.92it/s][A
 34%|███▍      | 76/221 [00:28<01:00,  2.41it/s][A
 35%|███▍      | 77/221 [00:28<00:54,  2.66it/s][A
 35%|███▌      | 78/221 [00:29<00:51,  2.79it/s][A
 36%|███▌      | 79/221 [00:29<01:08,  2.06it/s][A
 36%|███▌      | 80/221 [00:29<00:53,  2.63it/s][A
 37%|███▋      | 81/221 [00:30<00:46,  2.99it/s][A
 37%|███▋      | 82/221 [00:30<00:42,  3.31it/s][A
 38%|███▊      | 83/221 [00:30<00:38,  3.62it/s][A
 38%|███▊      | 84/221 [00:30<00:31,  4.33it/s][A
 38%|███▊      | 85/221 [00:30<00:26,  5.12it/s][A
 39%|███▉      | 86/221 [00:31<00:26,  5.12it/s][A
 39%|███▉      | 87/221 [00:31<00:41,  3.21it/s][A
 40%|███▉      | 88/221 [00:32<00:45,  2.89it/s][A
 40%|████      | 89/221 [00:35<02:33,  1.16s/it][A
 41%|████      | 90/221 [00:35<01:59,  1.09it/s][A
 41%|████      | 91/221 [00:35<01:30,  1.44it/s][A
 42%|████▏     | 92/221 [00:35<01:11,  1.81it/s][A
 42%|████▏     | 93/221 [00:36<01:10,  1.82it/s][A
 43%|████▎     | 94/221 [00:36<01:03,  2.01it/s][A
 43%|████▎     | 95/221 [00:36<00:50,  2.52it/s][A
 43%|████▎     | 96/221 [00:37<00:45,  2.77it/s][A
 44%|████▍     | 97/221 [00:37<00:36,  3.39it/s][A
 44%|████▍     | 98/221 [00:37<00:35,  3.48it/s][A
 45%|████▍     | 99/221 [00:37<00:34,  3.54it/s][A
 45%|████▌     | 100/221 [00:38<00:33,  3.63it/s][A
 46%|████▌     | 101/221 [00:38<00:28,  4.18it/s][A
 46%|████▌     | 102/221 [00:38<00:33,  3.59it/s][A
 47%|████▋     | 103/221 [00:38<00:27,  4.29it/s][A
 47%|████▋     | 104/221 [00:38<00:22,  5.12it/s][A
 48%|████▊     | 105/221 [00:39<00:26,  4.42it/s][A
 48%|████▊     | 106/221 [00:39<00:42,  2.72it/s][A
 48%|████▊     | 107/221 [00:40<00:34,  3.34it/s][A[h264 @ 0x5556dbc08d80] mmco: unref short failure
[h264 @ 0x5556dbc08d80] mmco: unref short failure
[h264 @ 0x5556dbc08d80] mmco: unref short failure
[h264 @ 0x5556dbc08d80] mmco: unref short failure

 49%|████▉     | 108/221 [00:40<00:30,  3.71it/s][A
 49%|████▉     | 109/221 [00:40<00:27,  4.01it/s][A
 50%|████▉     | 110/221 [00:40<00:24,  4.61it/s][A
 50%|█████     | 111/221 [00:41<00:32,  3.37it/s][A
 51%|█████     | 112/221 [00:41<00:29,  3.68it/s][A
 51%|█████     | 113/221 [00:41<00:28,  3.81it/s][A
 52%|█████▏    | 115/221 [00:41<00:18,  5.74it/s][A
 52%|█████▏    | 116/221 [00:46<02:24,  1.37s/it][A
 53%|█████▎    | 117/221 [00:46<01:53,  1.09s/it][A
 53%|█████▎    | 118/221 [00:47<01:28,  1.16it/s][A
 54%|█████▍    | 119/221 [00:47<01:09,  1.48it/s][A[h264 @ 0x557735ae4340] mmco: unref short failure
[h264 @ 0x557735ae4340] mmco: unref short failure

 54%|█████▍    | 120/221 [00:47<00:57,  1.74it/s][A
 55%|█████▍    | 121/221 [00:47<00:44,  2.26it/s][A
 55%|█████▌    | 122/221 [00:48<00:37,  2.66it/s][A
 56%|█████▌    | 123/221 [00:48<00:29,  3.29it/s][A
 56%|█████▌    | 124/221 [00:48<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:48<00:25,  3.76it/s][A
 57%|█████▋    | 126/221 [00:49<00:28,  3.37it/s][A
 57%|█████▋    | 127/221 [00:49<00:35,  2.68it/s][A
 58%|█████▊    | 128/221 [00:49<00:34,  2.71it/s][A
 58%|█████▊    | 129/221 [00:50<00:29,  3.10it/s][A
 59%|█████▉    | 130/221 [00:50<00:26,  3.44it/s][A
 60%|█████▉    | 132/221 [00:50<00:20,  4.42it/s][A
 60%|██████    | 133/221 [00:51<00:22,  3.93it/s][A
 61%|██████    | 134/221 [00:51<00:22,  3.92it/s][A
 61%|██████    | 135/221 [00:51<00:27,  3.09it/s][A
 62%|██████▏   | 136/221 [00:52<00:27,  3.13it/s][A
 62%|██████▏   | 137/221 [00:52<00:24,  3.38it/s][A
 62%|██████▏   | 138/221 [00:52<00:23,  3.48it/s][A
 63%|██████▎   | 139/221 [00:53<00:27,  2.96it/s][A
 63%|██████▎   | 140/221 [00:53<00:26,  3.11it/s][A
 64%|██████▍   | 141/221 [00:53<00:22,  3.60it/s][A
 64%|██████▍   | 142/221 [00:53<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:54<00:29,  2.65it/s][A
 65%|██████▌   | 144/221 [00:54<00:23,  3.27it/s][A
 66%|██████▌   | 146/221 [00:54<00:14,  5.06it/s][A
 67%|██████▋   | 147/221 [00:54<00:16,  4.49it/s][A
 67%|██████▋   | 148/221 [00:55<00:20,  3.53it/s][A
 67%|██████▋   | 149/221 [00:55<00:16,  4.24it/s][A
 68%|██████▊   | 150/221 [00:55<00:15,  4.71it/s][A[h264 @ 0x5556dcf1a400] mmco: unref short failure
[h264 @ 0x5556dcf1a400] mmco: unref short failure

 68%|██████▊   | 151/221 [00:56<00:34,  2.06it/s][A
 69%|██████▉   | 152/221 [00:57<00:33,  2.03it/s][A
 69%|██████▉   | 153/221 [00:57<00:28,  2.36it/s][A
 70%|██████▉   | 154/221 [00:58<00:30,  2.23it/s][A
 70%|███████   | 155/221 [00:58<00:23,  2.80it/s][A
 71%|███████   | 156/221 [00:58<00:19,  3.35it/s][A
 71%|███████   | 157/221 [01:00<01:01,  1.04it/s][A
 71%|███████▏  | 158/221 [01:01<00:46,  1.35it/s][A
 72%|███████▏  | 159/221 [01:01<00:34,  1.81it/s][A
 72%|███████▏  | 160/221 [01:01<00:27,  2.21it/s][A
 73%|███████▎  | 162/221 [01:01<00:19,  2.96it/s][A
 74%|███████▍  | 163/221 [01:02<00:17,  3.26it/s][A
 74%|███████▍  | 164/221 [01:02<00:17,  3.25it/s][A
 75%|███████▍  | 165/221 [01:02<00:15,  3.64it/s][A
 75%|███████▌  | 166/221 [01:03<00:17,  3.20it/s][A
 76%|███████▌  | 167/221 [01:03<00:14,  3.85it/s][A
 76%|███████▌  | 168/221 [01:04<00:36,  1.47it/s][A
 76%|███████▋  | 169/221 [01:05<00:28,  1.81it/s][A
 77%|███████▋  | 170/221 [01:05<00:25,  2.02it/s][A
 77%|███████▋  | 171/221 [01:05<00:20,  2.39it/s][A
 78%|███████▊  | 172/221 [01:05<00:17,  2.87it/s][A
 78%|███████▊  | 173/221 [01:06<00:13,  3.44it/s][A
 79%|███████▊  | 174/221 [01:06<00:11,  4.26it/s][A
[h264 @ 0x56354dedef40] mmco: unref short failure
 79%|███████▉  | 175/221 [01:06<00:11,  4.03it/s][A
 80%|███████▉  | 176/221 [01:06<00:11,  3.80it/s][A
 80%|████████  | 177/221 [01:06<00:09,  4.51it/s][A
 81%|████████  | 178/221 [01:07<00:11,  3.61it/s][A
 81%|████████  | 179/221 [01:07<00:12,  3.31it/s][A
 81%|████████▏ | 180/221 [01:07<00:09,  4.13it/s][A
 82%|████████▏ | 181/221 [01:07<00:09,  4.29it/s][A
 82%|████████▏ | 182/221 [01:08<00:08,  4.61it/s][A
 83%|████████▎ | 183/221 [01:08<00:07,  4.81it/s][A
 83%|████████▎ | 184/221 [01:08<00:08,  4.50it/s][A
 84%|████████▎ | 185/221 [01:08<00:06,  5.17it/s][A
 84%|████████▍ | 186/221 [01:08<00:07,  4.86it/s][A
 85%|████████▌ | 188/221 [01:09<00:06,  5.17it/s][A
 86%|████████▌ | 189/221 [01:09<00:06,  4.83it/s][A
 86%|████████▌ | 190/221 [01:09<00:07,  4.21it/s][A
 86%|████████▋ | 191/221 [01:09<00:06,  4.88it/s][A
 87%|████████▋ | 192/221 [01:10<00:05,  4.96it/s][A
 88%|████████▊ | 194/221 [01:10<00:07,  3.85it/s][A
 88%|████████▊ | 195/221 [01:10<00:05,  4.47it/s][A
 89%|████████▉ | 197/221 [01:11<00:04,  5.36it/s][A
 90%|████████▉ | 198/221 [01:11<00:04,  5.30it/s][A
 90%|█████████ | 199/221 [01:11<00:04,  5.26it/s][A
 90%|█████████ | 200/221 [01:11<00:04,  4.55it/s][A
 91%|█████████ | 201/221 [01:12<00:04,  4.40it/s][A
 91%|█████████▏| 202/221 [01:12<00:04,  4.72it/s][A
 92%|█████████▏| 203/221 [01:12<00:04,  4.41it/s][A
 93%|█████████▎| 205/221 [01:12<00:02,  5.91it/s][A
 93%|█████████▎| 206/221 [01:13<00:02,  5.20it/s][A
 94%|█████████▍| 208/221 [01:13<00:01,  6.65it/s][A[h264 @ 0x558637077800] mmco: unref short failure

 95%|█████████▌| 210/221 [01:13<00:01,  8.81it/s][A
 96%|█████████▌| 212/221 [01:14<00:01,  5.20it/s][A
 97%|█████████▋| 214/221 [01:14<00:01,  3.82it/s][A
 97%|█████████▋| 215/221 [01:15<00:01,  4.00it/s][A
 98%|█████████▊| 216/221 [01:15<00:01,  4.06it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  3.59it/s][A
 99%|█████████▊| 218/221 [01:15<00:00,  3.47it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  3.63it/s][A[h264 @ 0x56355e67f000] mmco: unref short failure
[h264 @ 0x56355e67f000] mmco: unref short failure
[h264 @ 0x5556dad9cec0] mmco: unref short failure
[h264 @ 0x5556dad9cec0] mmco: unref short failure
[h264 @ 0x5556dad9cec0] mmco: unref short failure
[h264 @ 0x5556dad9cec0] mmco: unref short failure

100%|█████████▉| 220/221 [01:20<00:01,  1.50s/it][A
100%|██████████| 221/221 [01:21<00:00,  1.12s/it][A100%|██████████| 221/221 [01:21<00:00,  2.72it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:08,  3.23it/s][A
  1%|          | 2/221 [00:00<01:06,  3.31it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.31it/s][A
  2%|▏         | 4/221 [00:01<01:06,  3.25it/s][A
  2%|▏         | 5/221 [00:01<01:06,  3.23it/s][A
  3%|▎         | 6/221 [00:01<01:05,  3.29it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.33it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.34it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.36it/s][A
  5%|▍         | 10/221 [00:03<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.38it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.38it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A[h264 @ 0x5635440a9a80] mmco: unref short failure
[h264 @ 0x5635440a9a80] mmco: unref short failure

  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.37it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.31it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.34it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.33it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 21/221 [00:06<01:01,  3.27it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.29it/s][A
 10%|█         | 23/221 [00:06<01:01,  3.25it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.29it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.32it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.35it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.38it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.34it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.36it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.38it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.38it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.39it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.40it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.40it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.40it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.40it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.39it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.40it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.40it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.41it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.41it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.41it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A[h264 @ 0x5556c4251180] mmco: unref short failure

 24%|██▎       | 52/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 54/221 [00:16<00:48,  3.41it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:32,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.71it/s][A
  1%|          | 2/221 [00:00<00:54,  3.99it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.37it/s][A
  2%|▏         | 4/221 [00:00<00:50,  4.30it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.65it/s][A
  3%|▎         | 7/221 [00:01<00:48,  4.44it/s][A
  4%|▎         | 8/221 [00:01<00:55,  3.82it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.86it/s][A
  5%|▍         | 10/221 [00:02<00:49,  4.23it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.77it/s][A
  5%|▌         | 12/221 [00:02<00:52,  3.95it/s][A
  6%|▌         | 13/221 [00:03<01:26,  2.40it/s][A
  6%|▋         | 14/221 [00:03<01:09,  2.97it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.87it/s][A
  7%|▋         | 16/221 [00:04<01:10,  2.91it/s][A
  8%|▊         | 17/221 [00:05<01:17,  2.64it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.74it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.81it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.20it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.42it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.46it/s][A
 11%|█▏        | 25/221 [00:06<00:45,  4.29it/s][A
 12%|█▏        | 26/221 [00:07<00:50,  3.86it/s][A
 12%|█▏        | 27/221 [00:07<00:49,  3.94it/s][A
 13%|█▎        | 28/221 [00:07<00:53,  3.60it/s][A
 13%|█▎        | 29/221 [00:07<00:55,  3.45it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.46it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.50it/s][A
 14%|█▍        | 32/221 [00:08<00:55,  3.41it/s][A
 15%|█▍        | 33/221 [00:09<00:53,  3.52it/s][A
 15%|█▌        | 34/221 [00:09<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:09<00:57,  3.26it/s][A
 16%|█▋        | 36/221 [00:10<00:53,  3.45it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.61it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.55it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.85it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.48it/s][A
 19%|█▊        | 41/221 [00:11<00:50,  3.57it/s][A
 19%|█▉        | 42/221 [00:11<00:45,  3.94it/s][A
 19%|█▉        | 43/221 [00:11<00:51,  3.44it/s][A
 20%|█▉        | 44/221 [00:12<00:53,  3.32it/s][A
 20%|██        | 45/221 [00:12<00:59,  2.97it/s][A
 21%|██        | 46/221 [00:12<00:53,  3.30it/s][A
 21%|██▏       | 47/221 [00:13<00:47,  3.66it/s][A
 22%|██▏       | 48/221 [00:13<00:40,  4.27it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  5.04it/s][A
 23%|██▎       | 50/221 [00:13<00:36,  4.68it/s][A
 23%|██▎       | 51/221 [00:13<00:40,  4.22it/s][A
 24%|██▍       | 53/221 [00:14<00:38,  4.42it/s][A
 24%|██▍       | 54/221 [00:14<00:38,  4.31it/s][A
 25%|██▍       | 55/221 [00:14<00:42,  3.92it/s][A
 25%|██▌       | 56/221 [00:15<00:43,  3.83it/s][A
 26%|██▌       | 57/221 [00:15<00:45,  3.60it/s][A
 27%|██▋       | 59/221 [00:15<00:37,  4.28it/s][A
 27%|██▋       | 60/221 [00:16<00:35,  4.54it/s][A
 28%|██▊       | 61/221 [00:16<00:35,  4.45it/s][A
 28%|██▊       | 62/221 [00:16<00:40,  3.90it/s][A
 29%|██▊       | 63/221 [00:16<00:33,  4.66it/s][A
 29%|██▉       | 64/221 [00:16<00:35,  4.43it/s][A
 29%|██▉       | 65/221 [00:17<00:35,  4.36it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.58it/s][A
 30%|███       | 67/221 [00:18<00:52,  2.94it/s][A
 31%|███       | 68/221 [00:18<00:48,  3.16it/s][A
 31%|███       | 69/221 [00:18<00:55,  2.73it/s][A
 32%|███▏      | 70/221 [00:19<00:47,  3.19it/s][A
 32%|███▏      | 71/221 [00:19<00:50,  2.99it/s][A
 33%|███▎      | 72/221 [00:19<00:54,  2.72it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  2.97it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.26it/s][A
 34%|███▍      | 75/221 [00:20<00:43,  3.37it/s][A
 34%|███▍      | 76/221 [00:20<00:37,  3.86it/s][A
 35%|███▍      | 77/221 [00:21<00:34,  4.18it/s][A
 35%|███▌      | 78/221 [00:21<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:21<00:40,  3.48it/s][A
 36%|███▌      | 80/221 [00:21<00:36,  3.85it/s][A
 37%|███▋      | 81/221 [00:22<00:35,  3.97it/s][A
 37%|███▋      | 82/221 [00:22<00:43,  3.22it/s][A
 38%|███▊      | 83/221 [00:22<00:35,  3.84it/s][A
 38%|███▊      | 84/221 [00:23<00:45,  3.02it/s][A
 38%|███▊      | 85/221 [00:23<00:41,  3.25it/s][A
 39%|███▉      | 86/221 [00:23<00:44,  3.05it/s][A
 39%|███▉      | 87/221 [00:24<00:51,  2.61it/s][A
 40%|███▉      | 88/221 [00:24<00:46,  2.85it/s][A
 40%|████      | 89/221 [00:25<00:47,  2.77it/s][A
 41%|████      | 90/221 [00:25<00:50,  2.58it/s][A
 41%|████      | 91/221 [00:25<00:43,  3.01it/s][A
 42%|████▏     | 92/221 [00:25<00:42,  3.06it/s][A
 42%|████▏     | 93/221 [00:26<00:49,  2.60it/s][A
 43%|████▎     | 94/221 [00:26<00:43,  2.94it/s][A
 43%|████▎     | 95/221 [00:27<00:51,  2.44it/s][A
 43%|████▎     | 96/221 [00:27<00:48,  2.56it/s][A
 44%|████▍     | 97/221 [00:27<00:45,  2.70it/s][A
 44%|████▍     | 98/221 [00:28<00:44,  2.79it/s][A
 45%|████▍     | 99/221 [00:28<00:42,  2.89it/s][A
 45%|████▌     | 100/221 [00:28<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:28<00:31,  3.86it/s][A
 46%|████▌     | 102/221 [00:29<00:33,  3.60it/s][A
 47%|████▋     | 103/221 [00:29<00:31,  3.76it/s][A
 47%|████▋     | 104/221 [00:29<00:26,  4.39it/s][A
 48%|████▊     | 105/221 [00:29<00:29,  3.88it/s][A
 48%|████▊     | 106/221 [00:30<00:33,  3.39it/s][A
 48%|████▊     | 107/221 [00:30<00:31,  3.60it/s][A
 49%|████▉     | 108/221 [00:30<00:28,  3.93it/s][A
 49%|████▉     | 109/221 [00:31<00:28,  4.00it/s][A
 50%|████▉     | 110/221 [00:31<00:29,  3.74it/s][A
 50%|█████     | 111/221 [00:31<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:34,  3.18it/s][A
 51%|█████     | 113/221 [00:32<00:33,  3.18it/s][A
 52%|█████▏    | 115/221 [00:32<00:24,  4.41it/s][A
 52%|█████▏    | 116/221 [00:32<00:23,  4.38it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.15it/s][A
 53%|█████▎    | 118/221 [00:33<00:28,  3.61it/s][A
 54%|█████▍    | 119/221 [00:33<00:33,  3.06it/s][A
 54%|█████▍    | 120/221 [00:34<00:33,  2.99it/s][A
 55%|█████▍    | 121/221 [00:34<00:30,  3.33it/s][A
 55%|█████▌    | 122/221 [00:34<00:27,  3.57it/s][A
 56%|█████▌    | 123/221 [00:35<00:28,  3.48it/s][A
 56%|█████▌    | 124/221 [00:35<00:31,  3.04it/s][A
 57%|█████▋    | 125/221 [00:36<00:38,  2.49it/s][A
 57%|█████▋    | 126/221 [00:36<00:33,  2.83it/s][A
 57%|█████▋    | 127/221 [00:36<00:37,  2.51it/s][A
 58%|█████▊    | 128/221 [00:37<00:32,  2.87it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.34it/s][A
 59%|█████▉    | 130/221 [00:37<00:26,  3.47it/s][A
 59%|█████▉    | 131/221 [00:37<00:24,  3.66it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.49it/s][A
 60%|██████    | 133/221 [00:38<00:31,  2.82it/s][A
 61%|██████    | 134/221 [00:39<00:35,  2.44it/s][A
 61%|██████    | 135/221 [00:39<00:28,  3.04it/s][A
 62%|██████▏   | 136/221 [00:39<00:28,  2.99it/s][A
 62%|██████▏   | 137/221 [00:39<00:25,  3.26it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.34it/s][A
 63%|██████▎   | 139/221 [00:40<00:26,  3.06it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.40it/s][A
 64%|██████▍   | 141/221 [00:41<00:26,  3.00it/s][A
 64%|██████▍   | 142/221 [00:41<00:22,  3.45it/s][A
 65%|██████▍   | 143/221 [00:41<00:23,  3.34it/s][A
 65%|██████▌   | 144/221 [00:41<00:20,  3.80it/s][A
 66%|██████▌   | 145/221 [00:42<00:21,  3.59it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.49it/s][A
 67%|██████▋   | 147/221 [00:42<00:17,  4.13it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.38it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.31it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.48it/s][A
 68%|██████▊   | 151/221 [00:44<00:24,  2.86it/s][A
 69%|██████▉   | 152/221 [00:44<00:32,  2.09it/s][A
 69%|██████▉   | 153/221 [00:45<00:28,  2.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:25,  2.61it/s][A
 70%|███████   | 155/221 [00:45<00:25,  2.61it/s][A
 71%|███████   | 156/221 [00:46<00:21,  3.05it/s][A
 71%|███████   | 157/221 [00:46<00:20,  3.17it/s][A
 71%|███████▏  | 158/221 [00:46<00:21,  2.96it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.36it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.61it/s][A
 73%|███████▎  | 161/221 [00:47<00:14,  4.11it/s][A
 73%|███████▎  | 162/221 [00:47<00:12,  4.56it/s][A
 74%|███████▍  | 163/221 [00:47<00:13,  4.33it/s][A
 74%|███████▍  | 164/221 [00:47<00:12,  4.70it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.23it/s][A
 75%|███████▌  | 166/221 [00:48<00:14,  3.73it/s][A
 76%|███████▌  | 167/221 [00:48<00:13,  4.07it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.74it/s][A
 76%|███████▋  | 169/221 [00:49<00:11,  4.57it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.09it/s][A
 77%|███████▋  | 171/221 [00:50<00:18,  2.74it/s][A
 78%|███████▊  | 172/221 [00:50<00:17,  2.77it/s][A
 78%|███████▊  | 173/221 [00:50<00:17,  2.82it/s][A
 79%|███████▊  | 174/221 [00:51<00:15,  3.03it/s][A
 79%|███████▉  | 175/221 [00:51<00:16,  2.87it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.36it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.49it/s][A
 81%|████████  | 178/221 [00:52<00:17,  2.49it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.76it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.46it/s][A
 82%|████████▏ | 181/221 [00:53<00:13,  3.02it/s][A
 82%|████████▏ | 182/221 [00:53<00:12,  3.03it/s][A
 83%|████████▎ | 183/221 [00:54<00:13,  2.90it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  2.97it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.19it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.51it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.73it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.20it/s][A
 86%|████████▋ | 191/221 [00:56<00:07,  3.89it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.14it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.10it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.77it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  3.88it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.15it/s][A
 89%|████████▉ | 197/221 [00:58<00:09,  2.67it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.63it/s][A
 90%|█████████ | 199/221 [00:58<00:07,  3.10it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.22it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.67it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.37it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.58it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.60it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.55it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.65it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  2.89it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.38it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.46it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.47it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.70it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.36it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.40it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.94it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.85it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.85it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.09it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.36it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.23it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.54it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.08it/s][A100%|██████████| 221/221 [01:05<00:00,  3.37it/s]
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'area_r1': 39.8, 'area_recall': '39.8/66.4/76.1', 'area_ravg': 60.8}
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'forward_r1': 39.4, 'forward_recall': '39.4/67.8/77.7', 'forward_ravg': 61.6}
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'area_video_r1': 39.3, 'area_video_recall': '39.3/68.2/78.7', 'area_video_ravg': 62.1}
09/17/2024 05:38:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 05:38:06 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'area_video_r1': 52.4, 'area_video_recall': '52.4/75.6/82.0', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/74.7/82.4', 'area_video_back_ravg': 68.8}
09/17/2024 05:38:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 05:38:06 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'video_r1': 36.5, 'video_recall': '36.5/64.5/75.5', 'video_ravg': 58.8}
09/17/2024 05:38:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 249=======

09/17/2024 05:38:06 - INFO - __main__ -   {'video_r1': 37.3, 'video_recall': '37.3/66.3/75.6', 'video_ravg': 59.7}
09/17/2024 05:38:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 899--===========

09/17/2024 05:38:06 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.2/82.2', 'video_ravg': 69.6}
09/17/2024 05:38:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 05:38:06 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 05:38:27 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007582239340990782, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0716221332550049, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 1.8667320013046265, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 2.9459362030029297}
[h264 @ 0x5556c98544c0] mmco: unref short failure
 31%|███       | 900/2910 [5:42:31<75:57:47, 136.05s/it] 31%|███       | 901/2910 [5:42:35<53:49:52, 96.46s/it] 09/17/2024 05:38:34 - INFO - __main__ -   current idx Zsx1-4aJ4ys.28 from finetune_area returns wrong image/video, use 4441 instead.
 31%|███       | 902/2910 [5:42:39<38:23:22, 68.83s/it][h264 @ 0x5577306e1800] mmco: unref short failure
[h264 @ 0x5577306e1800] mmco: unref short failure
[h264 @ 0x5556d30de400] mmco: unref short failure
 31%|███       | 903/2910 [5:42:44<27:38:48, 49.59s/it] 31%|███       | 904/2910 [5:42:50<20:19:48, 36.48s/it][h264 @ 0x55568cfa3200] mmco: unref short failure
[h264 @ 0x557720dbacc0] mmco: unref short failure
[h264 @ 0x557720dbacc0] mmco: unref short failure
 31%|███       | 905/2910 [5:42:56<15:12:45, 27.31s/it][h264 @ 0x56355d178f80] mmco: unref short failure
[h264 @ 0x56355d178f80] mmco: unref short failure
 31%|███       | 906/2910 [5:43:02<11:40:34, 20.98s/it][h264 @ 0x5556e1c60c00] mmco: unref short failure
[h264 @ 0x5556e1c60c00] mmco: unref short failure
[h264 @ 0x557724d45d80] mmco: unref short failure
[h264 @ 0x557724d45d80] mmco: unref short failure
[h264 @ 0x5577226f8c00] mmco: unref short failure
 31%|███       | 907/2910 [5:43:09<9:21:20, 16.82s/it] [h264 @ 0x558651f7a940] mmco: unref short failure
 31%|███       | 908/2910 [5:43:15<7:34:37, 13.63s/it][h264 @ 0x558642433800] mmco: unref short failure
[h264 @ 0x558642433800] mmco: unref short failure
 31%|███       | 909/2910 [5:43:23<6:33:25, 11.80s/it][h264 @ 0x557736b79940] mmco: unref short failure
[h264 @ 0x557736b79940] mmco: unref short failure
 31%|███▏      | 910/2910 [5:43:29<5:40:35, 10.22s/it] 31%|███▏      | 911/2910 [5:43:36<5:03:36,  9.11s/it][h264 @ 0x55863354a940] mmco: unref short failure
[h264 @ 0x55863354a940] mmco: unref short failure
[h264 @ 0x5556cc45eac0] mmco: unref short failure
[h264 @ 0x55864a3bbf40] mmco: unref short failure
[h264 @ 0x55864a3bbf40] mmco: unref short failure
 31%|███▏      | 912/2910 [5:43:43<4:39:52,  8.40s/it][h264 @ 0x55772484c040] mmco: unref short failure
[h264 @ 0x55772484c040] mmco: unref short failure
 31%|███▏      | 913/2910 [5:43:49<4:22:20,  7.88s/it] 31%|███▏      | 914/2910 [5:43:55<4:06:02,  7.40s/it][h264 @ 0x55863b87d9c0] mmco: unref short failure
[h264 @ 0x55863b87d9c0] mmco: unref short failure
 31%|███▏      | 915/2910 [5:44:02<3:58:05,  7.16s/it][h264 @ 0x56355dacc000] mmco: unref short failure
[h264 @ 0x5577213eb180] mmco: unref short failure
[h264 @ 0x5577213eb180] mmco: unref short failure
[h264 @ 0x55772ab66b40] mmco: unref short failure
[h264 @ 0x55772ab66b40] mmco: unref short failure
[h264 @ 0x557717f77680] mmco: unref short failure
[h264 @ 0x557717f77680] mmco: unref short failure
[h264 @ 0x563547813c00] mmco: unref short failure
[h264 @ 0x558650984b80] mmco: unref short failure
 31%|███▏      | 916/2910 [5:44:43<9:33:36, 17.26s/it][h264 @ 0x5577292f6a40] mmco: unref short failure
 32%|███▏      | 917/2910 [5:44:56<8:51:08, 15.99s/it][h264 @ 0x56354fea4540] mmco: unref short failure
[h264 @ 0x56354fea4540] mmco: unref short failure
[h264 @ 0x5556e35ba200] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
[h264 @ 0x55772ea70d40] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
[h264 @ 0x5586320b4e00] mmco: unref short failure
 32%|███▏      | 918/2910 [5:45:12<8:49:31, 15.95s/it]09/17/2024 05:41:11 - INFO - __main__ -   current idx 9W2zPcc4Kl8.5 from finetune_area returns wrong image/video, use 77506 instead.
[h264 @ 0x5556c6a07700] mmco: unref short failure
[h264 @ 0x5576decdf4c0] mmco: unref short failure
 32%|███▏      | 919/2910 [5:45:19<7:22:47, 13.34s/it][h264 @ 0x55772ab66b40] mmco: unref short failure
 32%|███▏      | 920/2910 [5:45:27<6:25:15, 11.62s/it]09/17/2024 05:41:37 - INFO - __main__ -   current idx JyHu6qXDg1E.525 from finetune_area returns wrong image/video, use 35537 instead.
[h264 @ 0x55772615df00] mmco: unref short failure
[h264 @ 0x5556d739df80] mmco: unref short failure
[h264 @ 0x5556d739df80] mmco: unref short failure
[h264 @ 0x5635539dd880] mmco: unref short failure
[h264 @ 0x5635539dd880] mmco: unref short failure
 32%|███▏      | 921/2910 [5:45:51<8:33:19, 15.49s/it][h264 @ 0x558644b0c000] mmco: unref short failure
[h264 @ 0x558644b0c000] mmco: unref short failure
 32%|███▏      | 922/2910 [5:45:57<7:01:31, 12.72s/it] 32%|███▏      | 923/2910 [5:46:04<5:58:29, 10.83s/it][h264 @ 0x5556c5fde840] mmco: unref short failure
[h264 @ 0x5556c5fde840] mmco: unref short failure
[h264 @ 0x55865252fe80] mmco: unref short failure
[h264 @ 0x55865252fe80] mmco: unref short failure
09/17/2024 05:42:15 - INFO - __main__ -   current idx 6aaFlMlB90k.2 from finetune_area returns wrong image/video, use 96989 instead.
[h264 @ 0x5556d9280bc0] mmco: unref short failure
[h264 @ 0x5556d9280bc0] mmco: unref short failure
[h264 @ 0x5577374e47c0] mmco: unref short failure
[h264 @ 0x5577374e47c0] mmco: unref short failure
[h264 @ 0x55863284d880] mmco: unref short failure
[h264 @ 0x55863284d880] mmco: unref short failure
[h264 @ 0x55865918b9c0] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x55864e74cc80] mmco: unref short failure
[h264 @ 0x55864e74cc80] mmco: unref short failure
[h264 @ 0x55863e7f79c0] mmco: unref short failure
[h264 @ 0x55863e7f79c0] mmco: unref short failure
[h264 @ 0x563544d39440] mmco: unref short failure
[h264 @ 0x563544d39440] mmco: unref short failure
09/17/2024 05:43:05 - INFO - __main__ -   current idx NplowkZTvc0.7 from finetune_area returns wrong image/video, use 108120 instead.
 32%|███▏      | 924/2910 [5:47:14<15:52:41, 28.78s/it][h264 @ 0x55863811d440] mmco: unref short failure
[h264 @ 0x55863811d440] mmco: unref short failure
[h264 @ 0x563558dbc180] mmco: unref short failure
[h264 @ 0x558651c83400] mmco: unref short failure
[h264 @ 0x558651c83400] mmco: unref short failure
[h264 @ 0x558651c83400] mmco: unref short failure
[h264 @ 0x558651c83400] mmco: unref short failure
[h264 @ 0x558642773000] mmco: unref short failure
[h264 @ 0x558642773000] mmco: unref short failure
[h264 @ 0x5635668fa4c0] mmco: unref short failure
[h264 @ 0x5635668fa4c0] mmco: unref short failure
 32%|███▏      | 925/2910 [5:47:34<14:24:32, 26.13s/it]09/17/2024 05:43:36 - INFO - __main__ -   current idx bgTXI7WKWoY.26 from finetune_area returns wrong image/video, use 139569 instead.
[h264 @ 0x5635418368c0] mmco: unref short failure
[h264 @ 0x5635418368c0] mmco: unref short failure
[h264 @ 0x56355db74780] mmco: unref short failure
[h264 @ 0x56355db74780] mmco: unref short failure
[h264 @ 0x563548e37240] mmco: unref short failure
[h264 @ 0x563548e37240] mmco: unref short failure
[h264 @ 0x563548e37240] mmco: unref short failure
[h264 @ 0x563548e37240] mmco: unref short failure
[h264 @ 0x56355434cb00] mmco: unref short failure
[h264 @ 0x56355434cb00] mmco: unref short failure
[h264 @ 0x55568bd81dc0] mmco: unref short failure
 32%|███▏      | 926/2910 [5:48:13<16:30:02, 29.94s/it][h264 @ 0x557735ae4340] mmco: unref short failure
[h264 @ 0x557735ae4340] mmco: unref short failure
[h264 @ 0x56354c856c80] mmco: unref short failure
[h264 @ 0x56354c856c80] mmco: unref short failure
[h264 @ 0x56354c856c80] mmco: unref short failure
[h264 @ 0x56354c856c80] mmco: unref short failure
[h264 @ 0x56355b201dc0] mmco: unref short failure
[h264 @ 0x56355b201dc0] mmco: unref short failure
[h264 @ 0x56355b201dc0] mmco: unref short failure
[h264 @ 0x56355b201dc0] mmco: unref short failure
[h264 @ 0x558651967100] mmco: unref short failure
[h264 @ 0x55865918b9c0] mmco: unref short failure
[h264 @ 0x55865918b9c0] mmco: unref short failure
[h264 @ 0x5556d571bec0] mmco: unref short failure
[h264 @ 0x5586331f1b40] mmco: unref short failure
[h264 @ 0x5586331f1b40] mmco: unref short failure
[h264 @ 0x5586331f1b40] mmco: unref short failure
[h264 @ 0x5586331f1b40] mmco: unref short failure
09/17/2024 05:44:47 - INFO - __main__ -   current idx 14WUuya94QE.364 from finetune_area returns wrong image/video, use 51961 instead.
[h264 @ 0x55864dbd1bc0] mmco: unref short failure
[h264 @ 0x5556dbdf2240] mmco: unref short failure
[h264 @ 0x5556dbdf2240] mmco: unref short failure
[h264 @ 0x5556dbdf2240] mmco: unref short failure
09/17/2024 05:44:52 - INFO - __main__ -   current idx Dqfrs5K971Y.40 from finetune_area returns wrong image/video, use 91994 instead.
[h264 @ 0x5556c47747c0] mmco: unref short failure
[h264 @ 0x563544313a80] mmco: unref short failure
[h264 @ 0x563544313a80] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x563549fef780] mmco: unref short failure
[h264 @ 0x563549fef780] mmco: unref short failure
[h264 @ 0x563549fef780] mmco: unref short failure
[h264 @ 0x56354151ab00] mmco: unref short failure
[h264 @ 0x56354151ab00] mmco: unref short failure
[h264 @ 0x5556cdd1fa00] mmco: unref short failure
[h264 @ 0x5556cdd1fa00] mmco: unref short failure
[h264 @ 0x558651d21180] mmco: unref short failure
[h264 @ 0x558651d21180] mmco: unref short failure
[h264 @ 0x55771ea564c0] mmco: unref short failure
[h264 @ 0x55771ea564c0] mmco: unref short failure
[h264 @ 0x5556db130680] mmco: unref short failure
[h264 @ 0x5556db130680] mmco: unref short failure
[h264 @ 0x5556e35ba200] mmco: unref short failure
[h264 @ 0x5556e35ba200] mmco: unref short failure
[h264 @ 0x5556cdd4ab80] mmco: unref short failure
[h264 @ 0x5556cdd4ab80] mmco: unref short failure
[h264 @ 0x5556e3435e00] mmco: unref short failure
[h264 @ 0x5556e3435e00] mmco: unref short failure
[h264 @ 0x563556d1aa40] mmco: unref short failure
[h264 @ 0x563556d1aa40] mmco: unref short failure
[h264 @ 0x56354646eb40] mmco: unref short failure
[h264 @ 0x56354646eb40] mmco: unref short failure
[h264 @ 0x55771d76d340] mmco: unref short failure
[h264 @ 0x55771831eb40] mmco: unref short failure
[h264 @ 0x5586357f5380] mmco: unref short failure
[h264 @ 0x5586357f5380] mmco: unref short failure
[h264 @ 0x5586357f5380] mmco: unref short failure
[h264 @ 0x5586357f5380] mmco: unref short failure
09/17/2024 05:46:09 - INFO - __main__ -   current idx Q_Kn3yzSJ5w.69 from finetune_area returns wrong image/video, use 20849 instead.
[h264 @ 0x5635546ab180] mmco: unref short failure
[h264 @ 0x5635546ab180] mmco: unref short failure
[h264 @ 0x557717716cc0] mmco: unref short failure
[h264 @ 0x557717716cc0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x56355b3218c0] mmco: unref short failure
[h264 @ 0x56355b3218c0] mmco: unref short failure
[h264 @ 0x56355b3218c0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x5556c8f3eac0] mmco: unref short failure
[h264 @ 0x558650994f40] mmco: unref short failure
[h264 @ 0x558650994f40] mmco: unref short failure
 32%|███▏      | 927/2910 [5:50:52<37:45:40, 68.55s/it]09/17/2024 05:46:56 - INFO - __main__ -   current idx TXPcr1HyKkY.54 from finetune_area returns wrong image/video, use 43983 instead.
 32%|███▏      | 928/2910 [5:50:58<27:26:40, 49.85s/it]09/17/2024 05:47:03 - INFO - __main__ -   current idx fTdLpt9yfqg.43 from finetune_area returns wrong image/video, use 62556 instead.
 32%|███▏      | 929/2910 [5:51:04<20:10:31, 36.66s/it] 32%|███▏      | 930/2910 [5:51:10<15:07:00, 27.48s/it] 32%|███▏      | 931/2910 [5:51:18<11:56:11, 21.71s/it][h264 @ 0x563544c9e5c0] mmco: unref short failure
 32%|███▏      | 932/2910 [5:51:26<9:34:41, 17.43s/it]  32%|███▏      | 933/2910 [5:51:32<7:44:56, 14.11s/it] 32%|███▏      | 934/2910 [5:51:39<6:30:55, 11.87s/it][h264 @ 0x5556c4c26a80] mmco: unref short failure
[h264 @ 0x56355128fc00] mmco: unref short failure
[h264 @ 0x56355128fc00] mmco: unref short failure
[h264 @ 0x56355602a600] mmco: unref short failure
[h264 @ 0x56355602a600] mmco: unref short failure
[h264 @ 0x56355602a600] mmco: unref short failure
[h264 @ 0x56355602a600] mmco: unref short failure
[h264 @ 0x56354b3f9600] mmco: unref short failure
[h264 @ 0x56354b3f9600] mmco: unref short failure
09/17/2024 05:48:32 - INFO - __main__ -   current idx Iuir8LDIDfY.45 from finetune_area returns wrong image/video, use 42525 instead.
[h264 @ 0x557718808940] mmco: unref short failure
[h264 @ 0x56355b201dc0] mmco: unref short failure
[h264 @ 0x5577327d0080] mmco: unref short failure
09/17/2024 05:49:01 - INFO - __main__ -   current idx siiaopJ0dTo.6 from finetune_area returns wrong image/video, use 132685 instead.
 32%|███▏      | 935/2910 [5:53:08<19:18:05, 35.18s/it]09/17/2024 05:49:11 - INFO - __main__ -   current idx eerUbqV6Md4.168 from finetune_area returns wrong image/video, use 17030 instead.
[h264 @ 0x5556caf49cc0] mmco: unref short failure
[h264 @ 0x5556caf49cc0] mmco: unref short failure
[h264 @ 0x5556d3bcab80] mmco: unref short failure
 32%|███▏      | 936/2910 [5:53:15<14:34:53, 26.59s/it][h264 @ 0x5556c3dab1c0] mmco: unref short failure
 32%|███▏      | 937/2910 [5:53:23<11:28:58, 20.95s/it] 32%|███▏      | 938/2910 [5:53:30<9:14:37, 16.88s/it] [h264 @ 0x557721181980] mmco: unref short failure
[h264 @ 0x557721181980] mmco: unref short failure
 32%|███▏      | 939/2910 [5:53:37<7:39:45, 14.00s/it][h264 @ 0x56354646eb40] mmco: unref short failure
 32%|███▏      | 940/2910 [5:53:44<6:31:14, 11.92s/it][h264 @ 0x56354664f840] mmco: unref short failure
[h264 @ 0x56354664f840] mmco: unref short failure
 32%|███▏      | 941/2910 [5:53:51<5:36:26, 10.25s/it][h264 @ 0x558642514840] mmco: unref short failure
[h264 @ 0x558642514840] mmco: unref short failure
[h264 @ 0x5556d851a740] mmco: unref short failure
[h264 @ 0x55863d16f340] mmco: unref short failure
[h264 @ 0x55863d16f340] mmco: unref short failure
 32%|███▏      | 942/2910 [5:53:57<5:00:25,  9.16s/it][h264 @ 0x5586365b6b40] mmco: unref short failure
09/17/2024 05:50:00 - INFO - __main__ -   current idx TWvBvDgrB6I.128 from finetune_area returns wrong image/video, use 24968 instead.
[h264 @ 0x56355db82c00] mmco: unref short failure
[h264 @ 0x56355db82c00] mmco: unref short failure
[h264 @ 0x56355db82c00] mmco: unref short failure
[h264 @ 0x56355db82c00] mmco: unref short failure
[h264 @ 0x558636d13ec0] mmco: unref short failure
09/17/2024 05:50:10 - INFO - __main__ -   current idx WwLGb5RDcG0.21 from finetune_area returns wrong image/video, use 51873 instead.
[h264 @ 0x563551740dc0] mmco: unref short failure
[h264 @ 0x563551740dc0] mmco: unref short failure
[h264 @ 0x5556d93cb200] mmco: unref short failure
[h264 @ 0x5556d93cb200] mmco: unref short failure
[h264 @ 0x557732ed3780] mmco: unref short failure
[h264 @ 0x557732ed3780] mmco: unref short failure
[h264 @ 0x5635422e7880] mmco: unref short failure
[h264 @ 0x55568c748980] mmco: unref short failure
[h264 @ 0x55771aba6440] mmco: unref short failure
[h264 @ 0x5556d63fe7c0] mmco: unref short failure
[h264 @ 0x56354f90a800] mmco: unref short failure
[h264 @ 0x56354f90a800] mmco: unref short failure
[h264 @ 0x557727b20600] mmco: unref short failure
[h264 @ 0x55864a83bec0] mmco: unref short failure
[h264 @ 0x55864a83bec0] mmco: unref short failure
[h264 @ 0x557719966a00] mmco: unref short failure
[h264 @ 0x557719966a00] mmco: unref short failure
[h264 @ 0x5556cbe1fe40] mmco: unref short failure
[h264 @ 0x5635440c3dc0] mmco: unref short failure
[h264 @ 0x55772070c8c0] mmco: unref short failure
[h264 @ 0x55772070c8c0] mmco: unref short failure
[h264 @ 0x56355d9f7b80] mmco: unref short failure
[h264 @ 0x55864c86b580] mmco: unref short failure
[h264 @ 0x55864c86b580] mmco: unref short failure
[h264 @ 0x5577260d25c0] mmco: unref short failure
[h264 @ 0x5577260d25c0] mmco: unref short failure
[h264 @ 0x563549573040] mmco: unref short failure
[h264 @ 0x563549573040] mmco: unref short failure
 32%|███▏      | 943/2910 [5:55:42<20:41:08, 37.86s/it][h264 @ 0x563549751340] mmco: unref short failure
[h264 @ 0x563549751340] mmco: unref short failure
 32%|███▏      | 944/2910 [5:55:49<15:37:34, 28.61s/it][h264 @ 0x563544f85bc0] mmco: unref short failure
[h264 @ 0x563544f85bc0] mmco: unref short failure
 32%|███▏      | 945/2910 [5:55:56<11:58:46, 21.95s/it][h264 @ 0x55772428b6c0] mmco: unref short failure
[h264 @ 0x55772428b6c0] mmco: unref short failure
 33%|███▎      | 946/2910 [5:56:02<9:27:59, 17.35s/it]  33%|███▎      | 947/2910 [5:56:09<7:44:30, 14.20s/it][h264 @ 0x558643884600] mmco: unref short failure
[h264 @ 0x558635c25400] mmco: unref short failure
[h264 @ 0x558635c25400] mmco: unref short failure
[h264 @ 0x56355c5c9980] mmco: unref short failure
[h264 @ 0x56355c5c9980] mmco: unref short failure
 33%|███▎      | 948/2910 [5:56:16<6:32:13, 11.99s/it][h264 @ 0x558642e87dc0] mmco: unref short failure
[h264 @ 0x558642e87dc0] mmco: unref short failure
 33%|███▎      | 949/2910 [5:56:22<5:37:39, 10.33s/it]09/17/2024 05:52:21 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 05:52:21 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x563556e67380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556d2f4d9c0] mmco: unref short failure
[h264 @ 0x5556d2f4d9c0] mmco: unref short failure
[h264 @ 0x5556cf7f3f00] mmco: unref short failure
[h264 @ 0x5556cf7f3f00] mmco: unref short failure
[h264 @ 0x55863d0d4d00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772735f680] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56355da9a300] mmco: unref short failure
[h264 @ 0x56355da9a300] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772d1e1dc0] mmco: unref short failure
[h264 @ 0x55772d1e1dc0] mmco: unref short failure
[h264 @ 0x557733f55e80] mmco: unref short failure
[h264 @ 0x56355494b740] mmco: unref short failure
[h264 @ 0x56355494b740] mmco: unref short failure
[h264 @ 0x56355494b740] mmco: unref short failure
[h264 @ 0x56355494b740] mmco: unref short failure
[h264 @ 0x5576df4cfb80] mmco: unref short failure
[h264 @ 0x56355bfa7040] mmco: unref short failure
[h264 @ 0x56355bfa7040] mmco: unref short failure
[h264 @ 0x5556db0f31c0] mmco: unref short failure
[h264 @ 0x5556db0f31c0] mmco: unref short failure
[h264 @ 0x558647893c00] mmco: unref short failure
[h264 @ 0x558647893c00] mmco: unref short failure
[h264 @ 0x55568bed3ac0] mmco: unref short failure
[h264 @ 0x56355eb4c500] mmco: unref short failure
[h264 @ 0x56355eb4c500] mmco: unref short failure
[h264 @ 0x55772c9ce700] mmco: unref short failure
[h264 @ 0x55772c9ce700] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x56354c57f400] mmco: unref short failure
[h264 @ 0x558633ca5740] mmco: unref short failure
[h264 @ 0x558633ca5740] mmco: unref short failure
[h264 @ 0x5556cc14a500] mmco: unref short failure
[h264 @ 0x5635440c3dc0] mmco: unref short failure
[h264 @ 0x5635440c3dc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:10,  3.14it/s][A
  1%|          | 2/221 [00:00<01:39,  2.20it/s][A
  1%|▏         | 3/221 [00:01<01:11,  3.04it/s][A
  2%|▏         | 5/221 [00:01<00:43,  4.94it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.08it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.12it/s][A
  4%|▎         | 8/221 [00:02<01:31,  2.33it/s][A
  4%|▍         | 9/221 [00:02<01:13,  2.87it/s][A
  5%|▍         | 10/221 [00:03<01:34,  2.24it/s][A
  5%|▍         | 11/221 [00:03<01:17,  2.70it/s][A
  5%|▌         | 12/221 [00:04<01:13,  2.84it/s][A
  6%|▌         | 13/221 [00:04<00:59,  3.52it/s][A
  6%|▋         | 14/221 [00:04<01:23,  2.49it/s][A
  7%|▋         | 15/221 [00:05<01:10,  2.92it/s][A
  7%|▋         | 16/221 [00:05<01:07,  3.05it/s][A
  8%|▊         | 17/221 [00:05<00:58,  3.46it/s][A
  8%|▊         | 18/221 [00:05<00:53,  3.79it/s][A
  9%|▊         | 19/221 [00:05<00:49,  4.06it/s][A
  9%|▉         | 20/221 [00:06<00:40,  4.91it/s][A[h264 @ 0x5556cc14a500] mmco: unref short failure

 10%|▉         | 21/221 [00:06<00:36,  5.54it/s][A
 10%|▉         | 22/221 [00:06<00:39,  5.04it/s][A
 10%|█         | 23/221 [00:06<00:34,  5.75it/s][A
 11%|█         | 24/221 [00:06<00:29,  6.58it/s][A
 11%|█▏        | 25/221 [00:06<00:32,  5.94it/s][A
 12%|█▏        | 26/221 [00:07<00:35,  5.49it/s][A
 12%|█▏        | 27/221 [00:07<00:31,  6.11it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.25it/s][A
 14%|█▎        | 30/221 [00:07<00:38,  4.94it/s][A
 14%|█▍        | 31/221 [00:08<00:36,  5.20it/s][A
 15%|█▍        | 33/221 [00:08<00:40,  4.70it/s][A
 15%|█▌        | 34/221 [00:08<00:35,  5.33it/s][A
 16%|█▌        | 35/221 [00:08<00:31,  5.85it/s][A
 16%|█▋        | 36/221 [00:09<00:35,  5.17it/s][A
 17%|█▋        | 37/221 [00:09<00:50,  3.64it/s][A
 17%|█▋        | 38/221 [00:09<00:50,  3.59it/s][A[h264 @ 0x55771b63af40] mmco: unref short failure
[h264 @ 0x55771b63af40] mmco: unref short failure

 18%|█▊        | 39/221 [00:10<00:50,  3.60it/s][A
 18%|█▊        | 40/221 [00:10<00:53,  3.41it/s][A
 19%|█▊        | 41/221 [00:10<00:49,  3.64it/s][A
 19%|█▉        | 42/221 [00:11<01:17,  2.31it/s][A
 19%|█▉        | 43/221 [00:11<01:04,  2.75it/s][A
 20%|█▉        | 44/221 [00:11<00:52,  3.38it/s][A[h264 @ 0x55864a1c0a80] mmco: unref short failure

 20%|██        | 45/221 [00:12<01:26,  2.04it/s][A
 21%|██        | 46/221 [00:13<01:27,  2.01it/s][A09/17/2024 05:54:56 - INFO - __main__ -   current idx hCH4rs-KEeA.16 from finetune_area returns wrong image/video, use 3944 instead.

 21%|██▏       | 47/221 [00:14<02:13,  1.30it/s][A
 22%|██▏       | 49/221 [00:14<01:22,  2.10it/s][A
 23%|██▎       | 50/221 [00:15<01:06,  2.57it/s][A
 24%|██▎       | 52/221 [00:15<00:46,  3.67it/s][A
 24%|██▍       | 53/221 [00:15<00:41,  4.07it/s][A[h264 @ 0x558646396340] mmco: unref short failure
[h264 @ 0x558646396340] mmco: unref short failure

 24%|██▍       | 54/221 [00:18<02:44,  1.02it/s][A
 25%|██▍       | 55/221 [00:18<02:16,  1.22it/s][A
 25%|██▌       | 56/221 [00:19<01:45,  1.56it/s][A
 26%|██▌       | 57/221 [00:19<01:31,  1.79it/s][A
 26%|██▌       | 58/221 [00:19<01:16,  2.14it/s][A
 27%|██▋       | 59/221 [00:20<01:09,  2.32it/s][A
 27%|██▋       | 60/221 [00:20<01:09,  2.30it/s][A
 28%|██▊       | 61/221 [00:20<00:58,  2.72it/s][A
 28%|██▊       | 62/221 [00:20<00:49,  3.19it/s][A
 29%|██▊       | 63/221 [00:21<00:41,  3.83it/s][A
 29%|██▉       | 64/221 [00:21<00:34,  4.51it/s][A
 29%|██▉       | 65/221 [00:21<00:32,  4.82it/s][A
 30%|██▉       | 66/221 [00:22<00:55,  2.79it/s][A
 30%|███       | 67/221 [00:22<00:58,  2.63it/s][A
 31%|███       | 68/221 [00:22<00:52,  2.89it/s][A
 31%|███       | 69/221 [00:23<01:09,  2.17it/s][A
 32%|███▏      | 70/221 [00:23<00:56,  2.69it/s][A[h264 @ 0x557717f544c0] mmco: unref short failure
[h264 @ 0x558657225800] mmco: unref short failure
[h264 @ 0x558657225800] mmco: unref short failure
[h264 @ 0x5556e0fcdb40] mmco: unref short failure
[h264 @ 0x5556e0fcdb40] mmco: unref short failure
[h264 @ 0x5556e0fcdb40] mmco: unref short failure
[h264 @ 0x5556e0fcdb40] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:51,  1.54s/it][A
 33%|███▎      | 72/221 [00:28<02:52,  1.15s/it][A
 33%|███▎      | 73/221 [00:28<02:12,  1.11it/s][A
 33%|███▎      | 74/221 [00:28<01:37,  1.50it/s][A
 34%|███▍      | 75/221 [00:28<01:18,  1.85it/s][A
 34%|███▍      | 76/221 [00:29<01:02,  2.33it/s][A
 35%|███▍      | 77/221 [00:29<01:00,  2.38it/s][A
 35%|███▌      | 78/221 [00:29<00:53,  2.68it/s][A
 36%|███▌      | 79/221 [00:30<01:07,  2.12it/s][A
 36%|███▌      | 80/221 [00:30<00:51,  2.72it/s][A
 37%|███▋      | 81/221 [00:30<00:42,  3.29it/s][A
 37%|███▋      | 82/221 [00:30<00:36,  3.80it/s][A
 38%|███▊      | 83/221 [00:31<00:30,  4.47it/s][A
 38%|███▊      | 84/221 [00:31<00:26,  5.15it/s][A
 39%|███▉      | 86/221 [00:31<00:21,  6.19it/s][A
 39%|███▉      | 87/221 [00:31<00:31,  4.22it/s][A
 40%|███▉      | 88/221 [00:32<00:33,  3.97it/s][A[h264 @ 0x5577374d9f40] mmco: unref short failure
[h264 @ 0x5577374d9f40] mmco: unref short failure

 40%|████      | 89/221 [00:35<02:20,  1.07s/it][A
 41%|████      | 90/221 [00:35<01:47,  1.22it/s][A
 42%|████▏     | 92/221 [00:35<01:06,  1.94it/s][A
 42%|████▏     | 93/221 [00:36<01:08,  1.88it/s][A
 43%|████▎     | 94/221 [00:36<01:06,  1.90it/s][A
 43%|████▎     | 95/221 [00:37<00:54,  2.30it/s][A
 43%|████▎     | 96/221 [00:37<00:50,  2.48it/s][A
 44%|████▍     | 97/221 [00:37<00:42,  2.94it/s][A
 44%|████▍     | 98/221 [00:37<00:38,  3.15it/s][A
 45%|████▍     | 99/221 [00:38<00:32,  3.70it/s][A
 45%|████▌     | 100/221 [00:38<00:29,  4.06it/s][A
 46%|████▌     | 101/221 [00:38<00:25,  4.80it/s][A
 46%|████▌     | 102/221 [00:38<00:29,  3.99it/s][A
 47%|████▋     | 104/221 [00:38<00:20,  5.78it/s][A
 48%|████▊     | 105/221 [00:39<00:22,  5.19it/s][A
 48%|████▊     | 106/221 [00:39<00:37,  3.10it/s][A
 48%|████▊     | 107/221 [00:39<00:30,  3.79it/s][A
 49%|████▉     | 108/221 [00:40<00:27,  4.14it/s][A
 49%|████▉     | 109/221 [00:40<00:25,  4.41it/s][A
 50%|████▉     | 110/221 [00:40<00:22,  4.90it/s][A
 50%|█████     | 111/221 [00:40<00:31,  3.50it/s][A
 51%|█████     | 112/221 [00:41<00:27,  3.94it/s][A
 51%|█████     | 113/221 [00:41<00:26,  4.03it/s][A
 52%|█████▏    | 115/221 [00:41<00:16,  6.34it/s][A[h264 @ 0x558632501e80] mmco: unref short failure

 52%|█████▏    | 116/221 [00:46<02:20,  1.34s/it][A
 53%|█████▎    | 117/221 [00:46<01:50,  1.07s/it][A
 53%|█████▎    | 118/221 [00:46<01:26,  1.18it/s][A
 54%|█████▍    | 119/221 [00:47<01:07,  1.52it/s][A
 54%|█████▍    | 120/221 [00:47<00:52,  1.92it/s][A
 55%|█████▌    | 122/221 [00:47<00:34,  2.86it/s][A
 56%|█████▌    | 123/221 [00:47<00:29,  3.38it/s][A
 56%|█████▌    | 124/221 [00:47<00:25,  3.82it/s][A
 57%|█████▋    | 125/221 [00:48<00:24,  3.90it/s][A
 57%|█████▋    | 126/221 [00:48<00:29,  3.23it/s][A
 57%|█████▋    | 127/221 [00:48<00:31,  2.96it/s][A
 58%|█████▊    | 128/221 [00:49<00:31,  2.96it/s][A
 58%|█████▊    | 129/221 [00:49<00:28,  3.19it/s][A
 59%|█████▉    | 130/221 [00:49<00:25,  3.62it/s][A
 60%|█████▉    | 132/221 [00:49<00:18,  4.93it/s][A
 60%|██████    | 133/221 [00:50<00:18,  4.64it/s][A
 61%|██████    | 134/221 [00:50<00:18,  4.62it/s][A
 61%|██████    | 135/221 [00:50<00:24,  3.57it/s][A
 62%|██████▏   | 136/221 [00:51<00:24,  3.44it/s][A
 62%|██████▏   | 137/221 [00:51<00:22,  3.66it/s][A
 62%|██████▏   | 138/221 [00:51<00:23,  3.61it/s][A
 63%|██████▎   | 139/221 [00:52<00:25,  3.18it/s][A
 63%|██████▎   | 140/221 [00:52<00:24,  3.29it/s][A
 64%|██████▍   | 141/221 [00:52<00:21,  3.77it/s][A
 64%|██████▍   | 142/221 [00:52<00:24,  3.28it/s][A
 65%|██████▍   | 143/221 [00:53<00:28,  2.74it/s][A
 65%|██████▌   | 144/221 [00:53<00:22,  3.43it/s][A
 67%|██████▋   | 147/221 [00:53<00:12,  6.06it/s][A
 67%|██████▋   | 148/221 [00:53<00:12,  5.66it/s][A
 68%|██████▊   | 150/221 [00:54<00:10,  6.57it/s][A
 68%|██████▊   | 151/221 [00:55<00:21,  3.30it/s][A
 69%|██████▉   | 152/221 [00:55<00:23,  2.93it/s][A
 69%|██████▉   | 153/221 [00:55<00:21,  3.20it/s][A
 70%|██████▉   | 154/221 [00:56<00:24,  2.79it/s][A
 70%|███████   | 155/221 [00:56<00:19,  3.43it/s][A
 71%|███████   | 156/221 [00:56<00:15,  4.18it/s][A[h264 @ 0x5556d3f14d00] mmco: unref short failure
[h264 @ 0x5556d3f14d00] mmco: unref short failure

 71%|███████   | 157/221 [01:00<01:20,  1.27s/it][A
 71%|███████▏  | 158/221 [01:00<00:59,  1.05it/s][A
 72%|███████▏  | 160/221 [01:00<00:35,  1.71it/s][A
 73%|███████▎  | 162/221 [01:01<00:26,  2.22it/s][A
 74%|███████▍  | 163/221 [01:01<00:22,  2.55it/s][A
 74%|███████▍  | 164/221 [01:01<00:19,  2.89it/s][A
 75%|███████▍  | 165/221 [01:01<00:16,  3.44it/s][A
 75%|███████▌  | 166/221 [01:02<00:15,  3.45it/s][A
 76%|███████▌  | 167/221 [01:02<00:12,  4.17it/s][A
 76%|███████▌  | 168/221 [01:04<00:40,  1.32it/s][A
 76%|███████▋  | 169/221 [01:04<00:32,  1.62it/s][A
 77%|███████▋  | 170/221 [01:04<00:27,  1.88it/s][A
 77%|███████▋  | 171/221 [01:05<00:21,  2.30it/s][A
 78%|███████▊  | 172/221 [01:05<00:17,  2.87it/s][A
 78%|███████▊  | 173/221 [01:05<00:13,  3.56it/s][A
 79%|███████▉  | 175/221 [01:05<00:10,  4.22it/s][A
 80%|███████▉  | 176/221 [01:05<00:10,  4.14it/s][A
 80%|████████  | 177/221 [01:06<00:09,  4.82it/s][A
 81%|████████  | 178/221 [01:06<00:10,  3.98it/s][A
 81%|████████  | 179/221 [01:06<00:10,  3.83it/s][A
 82%|████████▏ | 181/221 [01:06<00:07,  5.12it/s][A
 82%|████████▏ | 182/221 [01:07<00:06,  5.64it/s][A
 83%|████████▎ | 183/221 [01:07<00:06,  5.63it/s][A
 83%|████████▎ | 184/221 [01:07<00:06,  5.41it/s][A
 84%|████████▍ | 186/221 [01:07<00:06,  5.52it/s][A
 85%|████████▌ | 188/221 [01:08<00:05,  5.68it/s][A
 86%|████████▌ | 189/221 [01:08<00:06,  5.14it/s][A
 86%|████████▌ | 190/221 [01:08<00:06,  4.70it/s][A
 87%|████████▋ | 192/221 [01:08<00:05,  5.63it/s][A
 88%|████████▊ | 194/221 [01:09<00:06,  3.86it/s][A
 88%|████████▊ | 195/221 [01:09<00:05,  4.36it/s][A
 89%|████████▉ | 197/221 [01:09<00:04,  5.57it/s][A
 90%|████████▉ | 198/221 [01:10<00:04,  5.51it/s][A
 90%|█████████ | 199/221 [01:10<00:04,  5.49it/s][A
 90%|█████████ | 200/221 [01:10<00:04,  4.78it/s][A
 91%|█████████ | 201/221 [01:10<00:04,  4.60it/s][A
 91%|█████████▏| 202/221 [01:11<00:03,  5.13it/s][A
 92%|█████████▏| 203/221 [01:11<00:03,  4.86it/s][A
 93%|█████████▎| 205/221 [01:11<00:02,  6.42it/s][A
 93%|█████████▎| 206/221 [01:11<00:02,  5.51it/s][A
 94%|█████████▍| 208/221 [01:11<00:01,  7.14it/s][A
 95%|█████████▌| 211/221 [01:12<00:01,  6.55it/s][A
 96%|█████████▌| 212/221 [01:12<00:01,  6.35it/s][A
 97%|█████████▋| 214/221 [01:13<00:01,  4.05it/s][A
 97%|█████████▋| 215/221 [01:13<00:01,  4.29it/s][A
 98%|█████████▊| 216/221 [01:13<00:01,  4.43it/s][A
 98%|█████████▊| 217/221 [01:14<00:01,  3.96it/s][A
 99%|█████████▊| 218/221 [01:14<00:00,  3.76it/s][A
 99%|█████████▉| 219/221 [01:14<00:00,  3.89it/s][A
100%|█████████▉| 220/221 [01:19<00:01,  1.50s/it][A
100%|██████████| 221/221 [01:19<00:00,  1.11s/it][A100%|██████████| 221/221 [01:19<00:00,  2.78it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:03,  3.42it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.42it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.42it/s][A
  3%|▎         | 6/221 [00:01<01:02,  3.42it/s][A
  3%|▎         | 7/221 [00:02<01:02,  3.42it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.42it/s][A
  4%|▍         | 9/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 11/221 [00:03<01:01,  3.42it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.42it/s][A
  6%|▌         | 13/221 [00:03<01:00,  3.42it/s][A
  6%|▋         | 14/221 [00:04<01:00,  3.42it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.17it/s][A
  7%|▋         | 16/221 [00:04<01:03,  3.24it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.30it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.33it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.36it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.39it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.40it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.41it/s][A
 11%|█         | 24/221 [00:07<00:57,  3.41it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.42it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.42it/s][A
 12%|█▏        | 27/221 [00:07<00:56,  3.42it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.42it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.42it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.42it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.42it/s][A
 15%|█▍        | 33/221 [00:09<00:54,  3.42it/s][A
 15%|█▌        | 34/221 [00:10<00:54,  3.42it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.42it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.42it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 43/221 [00:12<00:51,  3.42it/s][A
 20%|█▉        | 44/221 [00:12<00:51,  3.42it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:14<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:15<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:17<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:22<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:24<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:28<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:31<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:33<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:36<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:38<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:45<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:47<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:48<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:31,  7.00it/s][A
  1%|          | 2/221 [00:00<00:53,  4.11it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.27it/s][A
  2%|▏         | 4/221 [00:00<00:52,  4.16it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.47it/s][A
  3%|▎         | 6/221 [00:01<00:40,  5.32it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.14it/s][A
  4%|▎         | 8/221 [00:02<01:00,  3.50it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.61it/s][A
  5%|▍         | 10/221 [00:02<00:52,  4.00it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.58it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.74it/s][A
  6%|▌         | 13/221 [00:03<01:27,  2.38it/s][A
  6%|▋         | 14/221 [00:04<01:12,  2.86it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.88it/s][A
  7%|▋         | 16/221 [00:04<01:10,  2.90it/s][A
  8%|▊         | 17/221 [00:05<01:17,  2.63it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.77it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.84it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.32it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.57it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.47it/s][A
 11%|█▏        | 25/221 [00:06<00:44,  4.40it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.15it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  4.01it/s][A
 13%|█▎        | 28/221 [00:07<00:55,  3.50it/s][A
 13%|█▎        | 29/221 [00:07<00:53,  3.59it/s][A
 14%|█▎        | 30/221 [00:08<00:53,  3.57it/s][A
 14%|█▍        | 31/221 [00:08<00:51,  3.65it/s][A
 14%|█▍        | 32/221 [00:08<00:52,  3.62it/s][A
 15%|█▍        | 33/221 [00:09<00:50,  3.71it/s][A
 15%|█▌        | 34/221 [00:09<00:57,  3.23it/s][A
 16%|█▌        | 35/221 [00:09<00:58,  3.19it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.31it/s][A
 17%|█▋        | 37/221 [00:10<00:52,  3.49it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.52it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.66it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:11<00:53,  3.34it/s][A
 19%|█▉        | 42/221 [00:11<00:48,  3.71it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.32it/s][A
 20%|█▉        | 44/221 [00:12<00:53,  3.30it/s][A
 20%|██        | 45/221 [00:12<00:58,  3.02it/s][A
 21%|██        | 46/221 [00:12<00:53,  3.29it/s][A
 21%|██▏       | 47/221 [00:13<00:46,  3.77it/s][A
 22%|██▏       | 48/221 [00:13<00:39,  4.38it/s][A
 22%|██▏       | 49/221 [00:13<00:33,  5.14it/s][A
 23%|██▎       | 50/221 [00:13<00:36,  4.71it/s][A
 23%|██▎       | 51/221 [00:13<00:38,  4.40it/s][A
 24%|██▍       | 53/221 [00:14<00:39,  4.20it/s][A
 24%|██▍       | 54/221 [00:14<00:41,  4.04it/s][A
 25%|██▍       | 55/221 [00:15<00:44,  3.71it/s][A
 25%|██▌       | 56/221 [00:15<00:46,  3.55it/s][A
 26%|██▌       | 57/221 [00:15<00:47,  3.44it/s][A
 26%|██▌       | 58/221 [00:15<00:39,  4.16it/s][A
 27%|██▋       | 59/221 [00:16<00:40,  4.00it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.46it/s][A
 28%|██▊       | 61/221 [00:16<00:35,  4.49it/s][A
 28%|██▊       | 62/221 [00:16<00:39,  4.04it/s][A
 29%|██▉       | 64/221 [00:17<00:34,  4.60it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.57it/s][A
 30%|██▉       | 66/221 [00:17<00:42,  3.67it/s][A
 30%|███       | 67/221 [00:18<00:53,  2.88it/s][A
 31%|███       | 68/221 [00:18<00:49,  3.06it/s][A
 31%|███       | 69/221 [00:19<00:56,  2.70it/s][A
 32%|███▏      | 70/221 [00:19<00:46,  3.22it/s][A
 32%|███▏      | 71/221 [00:19<00:51,  2.90it/s][A
 33%|███▎      | 72/221 [00:20<00:55,  2.71it/s][A
 33%|███▎      | 73/221 [00:20<00:49,  3.00it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.29it/s][A
 34%|███▍      | 75/221 [00:20<00:43,  3.36it/s][A
 34%|███▍      | 76/221 [00:21<00:38,  3.77it/s][A
 35%|███▍      | 77/221 [00:21<00:35,  4.10it/s][A
 35%|███▌      | 78/221 [00:21<00:39,  3.66it/s][A
 36%|███▌      | 79/221 [00:21<00:40,  3.53it/s][A
 36%|███▌      | 80/221 [00:22<00:36,  3.83it/s][A
 37%|███▋      | 81/221 [00:22<00:35,  3.94it/s][A
 37%|███▋      | 82/221 [00:22<00:40,  3.45it/s][A
 38%|███▊      | 83/221 [00:22<00:32,  4.19it/s][A
 38%|███▊      | 84/221 [00:23<00:39,  3.47it/s][A
 38%|███▊      | 85/221 [00:23<00:40,  3.38it/s][A
 39%|███▉      | 86/221 [00:23<00:41,  3.24it/s][A
 39%|███▉      | 87/221 [00:24<00:49,  2.68it/s][A
 40%|███▉      | 88/221 [00:24<00:46,  2.89it/s][A
 40%|████      | 89/221 [00:25<00:47,  2.80it/s][A
 41%|████      | 90/221 [00:25<00:53,  2.45it/s][A
 41%|████      | 91/221 [00:25<00:44,  2.92it/s][A
 42%|████▏     | 92/221 [00:26<00:41,  3.08it/s][A
 42%|████▏     | 93/221 [00:26<00:48,  2.62it/s][A
 43%|████▎     | 94/221 [00:26<00:41,  3.03it/s][A
 43%|████▎     | 95/221 [00:27<00:48,  2.57it/s][A
 43%|████▎     | 96/221 [00:27<00:48,  2.60it/s][A
 44%|████▍     | 97/221 [00:27<00:43,  2.83it/s][A
 44%|████▍     | 98/221 [00:28<00:43,  2.83it/s][A
 45%|████▍     | 99/221 [00:28<00:40,  3.03it/s][A
 45%|████▌     | 100/221 [00:28<00:34,  3.47it/s][A
 46%|████▌     | 101/221 [00:28<00:31,  3.85it/s][A
 46%|████▌     | 102/221 [00:29<00:33,  3.55it/s][A
 47%|████▋     | 103/221 [00:29<00:31,  3.76it/s][A
 47%|████▋     | 104/221 [00:29<00:27,  4.33it/s][A
 48%|████▊     | 105/221 [00:29<00:28,  4.01it/s][A
 48%|████▊     | 106/221 [00:30<00:33,  3.48it/s][A
 48%|████▊     | 107/221 [00:30<00:30,  3.73it/s][A
 49%|████▉     | 108/221 [00:30<00:27,  4.04it/s][A
 49%|████▉     | 109/221 [00:31<00:28,  3.97it/s][A
 50%|████▉     | 110/221 [00:31<00:28,  3.96it/s][A
 50%|█████     | 111/221 [00:31<00:30,  3.58it/s][A
 51%|█████     | 112/221 [00:31<00:32,  3.41it/s][A
 51%|█████     | 113/221 [00:32<00:31,  3.43it/s][A
 52%|█████▏    | 115/221 [00:32<00:22,  4.68it/s][A
 52%|█████▏    | 116/221 [00:32<00:22,  4.58it/s][A
 53%|█████▎    | 117/221 [00:32<00:24,  4.30it/s][A
 53%|█████▎    | 118/221 [00:33<00:27,  3.69it/s][A
 54%|█████▍    | 119/221 [00:33<00:31,  3.24it/s][A
 54%|█████▍    | 120/221 [00:34<00:31,  3.16it/s][A
 55%|█████▍    | 121/221 [00:34<00:29,  3.43it/s][A
 55%|█████▌    | 122/221 [00:34<00:27,  3.66it/s][A
 56%|█████▌    | 123/221 [00:34<00:27,  3.59it/s][A
 56%|█████▌    | 124/221 [00:35<00:30,  3.13it/s][A
 57%|█████▋    | 125/221 [00:35<00:37,  2.54it/s][A
 57%|█████▋    | 126/221 [00:36<00:32,  2.90it/s][A
 57%|█████▋    | 127/221 [00:36<00:36,  2.58it/s][A
 58%|█████▊    | 128/221 [00:36<00:30,  3.00it/s][A
 58%|█████▊    | 129/221 [00:36<00:26,  3.43it/s][A
 59%|█████▉    | 130/221 [00:37<00:26,  3.45it/s][A
 59%|█████▉    | 131/221 [00:37<00:25,  3.55it/s][A
 60%|█████▉    | 132/221 [00:37<00:26,  3.37it/s][A
 60%|██████    | 133/221 [00:38<00:30,  2.92it/s][A
 61%|██████    | 134/221 [00:38<00:35,  2.46it/s][A
 61%|██████    | 135/221 [00:38<00:28,  3.03it/s][A
 62%|██████▏   | 136/221 [00:39<00:27,  3.07it/s][A
 62%|██████▏   | 137/221 [00:39<00:24,  3.44it/s][A
 62%|██████▏   | 138/221 [00:39<00:22,  3.66it/s][A
 63%|██████▎   | 139/221 [00:40<00:24,  3.39it/s][A
 63%|██████▎   | 140/221 [00:40<00:22,  3.67it/s][A
 64%|██████▍   | 141/221 [00:40<00:26,  3.04it/s][A
 64%|██████▍   | 142/221 [00:40<00:23,  3.43it/s][A
 65%|██████▍   | 143/221 [00:41<00:23,  3.28it/s][A
 65%|██████▌   | 144/221 [00:41<00:19,  3.92it/s][A
 66%|██████▌   | 145/221 [00:41<00:20,  3.67it/s][A
 66%|██████▌   | 146/221 [00:42<00:20,  3.59it/s][A
 67%|██████▋   | 147/221 [00:42<00:17,  4.17it/s][A
 67%|██████▋   | 148/221 [00:42<00:21,  3.47it/s][A
 67%|██████▋   | 149/221 [00:42<00:21,  3.38it/s][A
 68%|██████▊   | 150/221 [00:43<00:21,  3.35it/s][A
 68%|██████▊   | 151/221 [00:43<00:24,  2.83it/s][A
 69%|██████▉   | 152/221 [00:44<00:33,  2.05it/s][A
 69%|██████▉   | 153/221 [00:44<00:28,  2.40it/s][A
 70%|██████▉   | 154/221 [00:45<00:24,  2.71it/s][A
 70%|███████   | 155/221 [00:45<00:24,  2.65it/s][A
 71%|███████   | 156/221 [00:45<00:21,  3.07it/s][A
 71%|███████   | 157/221 [00:45<00:19,  3.29it/s][A
 71%|███████▏  | 158/221 [00:46<00:20,  3.14it/s][A
 72%|███████▏  | 159/221 [00:46<00:17,  3.47it/s][A
 72%|███████▏  | 160/221 [00:46<00:16,  3.80it/s][A
 73%|███████▎  | 161/221 [00:46<00:13,  4.37it/s][A
 73%|███████▎  | 162/221 [00:46<00:12,  4.88it/s][A
 74%|███████▍  | 163/221 [00:47<00:12,  4.53it/s][A
 74%|███████▍  | 164/221 [00:47<00:11,  4.83it/s][A
 75%|███████▍  | 165/221 [00:47<00:12,  4.39it/s][A
 75%|███████▌  | 166/221 [00:47<00:14,  3.86it/s][A
 76%|███████▌  | 167/221 [00:48<00:12,  4.23it/s][A
 76%|███████▌  | 168/221 [00:48<00:13,  4.04it/s][A
 76%|███████▋  | 169/221 [00:48<00:10,  4.85it/s][A
 77%|███████▋  | 170/221 [00:49<00:16,  3.08it/s][A
 77%|███████▋  | 171/221 [00:49<00:18,  2.68it/s][A
 78%|███████▊  | 172/221 [00:49<00:17,  2.77it/s][A
 78%|███████▊  | 173/221 [00:50<00:17,  2.81it/s][A
 79%|███████▊  | 174/221 [00:50<00:15,  3.05it/s][A
 79%|███████▉  | 175/221 [00:50<00:16,  2.81it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.30it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.46it/s][A
 81%|████████  | 178/221 [00:52<00:17,  2.44it/s][A
 81%|████████  | 179/221 [00:52<00:15,  2.74it/s][A
 81%|████████▏ | 180/221 [00:52<00:12,  3.36it/s][A
 82%|████████▏ | 181/221 [00:52<00:12,  3.25it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.41it/s][A
 83%|████████▎ | 183/221 [00:53<00:12,  3.08it/s][A
 83%|████████▎ | 184/221 [00:53<00:12,  3.08it/s][A
 84%|████████▍ | 186/221 [00:54<00:11,  3.06it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.46it/s][A
 86%|████████▌ | 189/221 [00:55<00:08,  3.65it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.28it/s][A
 86%|████████▋ | 191/221 [00:55<00:07,  3.89it/s][A
 87%|████████▋ | 192/221 [00:55<00:06,  4.18it/s][A
 87%|████████▋ | 193/221 [00:56<00:06,  4.13it/s][A
 88%|████████▊ | 194/221 [00:56<00:06,  3.90it/s][A
 88%|████████▊ | 195/221 [00:56<00:06,  3.74it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.21it/s][A
 89%|████████▉ | 197/221 [00:57<00:08,  2.79it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.70it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.20it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.33it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.76it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.45it/s][A
 92%|█████████▏| 203/221 [00:59<00:04,  3.72it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.57it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.44it/s][A
 93%|█████████▎| 206/221 [01:00<00:05,  2.67it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  2.89it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.39it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.52it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.39it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.80it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.41it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.47it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  2.90it/s][A
 97%|█████████▋| 215/221 [01:03<00:02,  2.96it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  2.93it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.19it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.32it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.18it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.53it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.13it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'area_r1': 40.3, 'area_recall': '40.3/66.3/75.7', 'area_ravg': 60.7}
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'forward_r1': 38.5, 'forward_recall': '38.5/68.0/76.9', 'forward_ravg': 61.1}
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/68.6/78.7', 'area_video_ravg': 62.1}
09/17/2024 05:58:17 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 05:58:17 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.2/82.1', 'area_video_ravg': 70.3, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.7/82.1', 'area_video_back_ravg': 68.6}
09/17/2024 05:58:17 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 05:58:17 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'video_r1': 37.4, 'video_recall': '37.4/65.0/75.3', 'video_ravg': 59.3}
09/17/2024 05:58:17 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 949=======

09/17/2024 05:58:17 - INFO - __main__ -   {'video_r1': 37.4, 'video_recall': '37.4/65.0/75.3', 'video_ravg': 59.3}
09/17/2024 05:58:17 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 949--===========

09/17/2024 05:58:17 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/75.3/82.1', 'video_ravg': 69.7}
09/17/2024 05:58:17 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 05:58:17 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
[h264 @ 0x558637308900] mmco: unref short failure
[h264 @ 0x558637308900] mmco: unref short failure
[h264 @ 0x558637308900] mmco: unref short failure
[h264 @ 0x558637308900] mmco: unref short failure
09/17/2024 05:58:43 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.006937284022569656, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1500780582427979, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.045227527618408, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.202242851257324}
[h264 @ 0x558637308900] mmco: unref short failure
[h264 @ 0x558637308900] mmco: unref short failure
 33%|███▎      | 950/2910 [6:02:47<66:41:23, 122.49s/it] 33%|███▎      | 951/2910 [6:02:51<47:19:23, 86.96s/it] [h264 @ 0x558652ce6240] mmco: unref short failure
[h264 @ 0x558652ce6240] mmco: unref short failure
[h264 @ 0x563557909340] mmco: unref short failure
[h264 @ 0x563557909340] mmco: unref short failure
[h264 @ 0x55772cb50640] mmco: unref short failure
[h264 @ 0x55772cb50640] mmco: unref short failure
 33%|███▎      | 952/2910 [6:02:55<33:49:58, 62.21s/it][h264 @ 0x5576deac8c80] mmco: unref short failure
 33%|███▎      | 953/2910 [6:03:00<24:27:47, 45.00s/it] 33%|███▎      | 954/2910 [6:03:06<18:04:15, 33.26s/it][h264 @ 0x5556cbe88bc0] mmco: unref short failure
[h264 @ 0x5556cbe88bc0] mmco: unref short failure
 33%|███▎      | 955/2910 [6:03:12<13:40:50, 25.19s/it][h264 @ 0x563542d23e80] mmco: unref short failure
[h264 @ 0x563542d23e80] mmco: unref short failure
 33%|███▎      | 956/2910 [6:03:19<10:36:49, 19.55s/it] 33%|███▎      | 957/2910 [6:03:26<8:33:48, 15.79s/it] [h264 @ 0x55771d38ec80] mmco: unref short failure
[h264 @ 0x55771d38ec80] mmco: unref short failure
 33%|███▎      | 958/2910 [6:03:34<7:17:14, 13.44s/it] 33%|███▎      | 959/2910 [6:03:41<6:22:55, 11.78s/it] 33%|███▎      | 960/2910 [6:03:48<5:30:27, 10.17s/it][h264 @ 0x558652ce6240] mmco: unref short failure
 33%|███▎      | 961/2910 [6:03:54<4:51:21,  8.97s/it][h264 @ 0x5576df3a6980] mmco: unref short failure
[h264 @ 0x5576df3a6980] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x558644586480] mmco: unref short failure
[h264 @ 0x5556e4eda5c0] mmco: unref short failure
[h264 @ 0x55863a0e8680] mmco: unref short failure
 33%|███▎      | 962/2910 [6:04:00<4:24:38,  8.15s/it]09/17/2024 06:00:01 - INFO - __main__ -   current idx -bLVFJgtJwI.0 from finetune_area returns wrong image/video, use 4720 instead.
[h264 @ 0x56354ee89fc0] mmco: unref short failure
 33%|███▎      | 963/2910 [6:04:08<4:22:28,  8.09s/it][h264 @ 0x563542598ec0] mmco: unref short failure
 33%|███▎      | 964/2910 [6:04:15<4:11:52,  7.77s/it] 33%|███▎      | 965/2910 [6:04:22<4:01:16,  7.44s/it][h264 @ 0x55771970c740] mmco: unref short failure
[h264 @ 0x563544fa58c0] mmco: unref short failure
[h264 @ 0x55772fcb1cc0] mmco: unref short failure
[h264 @ 0x55864f2b3440] mmco: unref short failure
[h264 @ 0x55864f2b3440] mmco: unref short failure
[h264 @ 0x56355926a000] mmco: unref short failure
[h264 @ 0x56355926a000] mmco: unref short failure
[h264 @ 0x56355926a000] mmco: unref short failure
[h264 @ 0x5635449148c0] mmco: unref short failure
[h264 @ 0x5635449148c0] mmco: unref short failure
 33%|███▎      | 966/2910 [6:04:56<8:16:49, 15.33s/it][h264 @ 0x56354e1a2d40] mmco: unref short failure
[h264 @ 0x56354e1a2d40] mmco: unref short failure
 33%|███▎      | 967/2910 [6:05:11<8:18:26, 15.39s/it][h264 @ 0x563551166b00] mmco: unref short failure
[h264 @ 0x563551166b00] mmco: unref short failure
 33%|███▎      | 968/2910 [6:05:30<8:50:37, 16.39s/it] 33%|███▎      | 969/2910 [6:05:40<7:49:18, 14.51s/it][h264 @ 0x5577286bb8c0] mmco: unref short failure
[h264 @ 0x558642fa0d80] mmco: unref short failure
[h264 @ 0x558642fa0d80] mmco: unref short failure
 33%|███▎      | 970/2910 [6:05:47<6:37:26, 12.29s/it][h264 @ 0x5635435db4c0] mmco: unref short failure
 33%|███▎      | 971/2910 [6:05:53<5:38:26, 10.47s/it][h264 @ 0x55568ced4a80] mmco: unref short failure
[h264 @ 0x55568ced4a80] mmco: unref short failure
[h264 @ 0x5556c985dd40] mmco: unref short failure
 33%|███▎      | 972/2910 [6:06:00<5:01:34,  9.34s/it][h264 @ 0x5556dd4ce5c0] mmco: unref short failure
[h264 @ 0x5556dd4ce5c0] mmco: unref short failure
[h264 @ 0x55864388dd40] mmco: unref short failure
[h264 @ 0x55864388dd40] mmco: unref short failure
 33%|███▎      | 973/2910 [6:06:17<6:14:26, 11.60s/it][h264 @ 0x5556c7deadc0] mmco: unref short failure
[h264 @ 0x55772049fd00] mmco: unref short failure
[h264 @ 0x55772049fd00] mmco: unref short failure
[h264 @ 0x55772049fd00] mmco: unref short failure
[h264 @ 0x55772049fd00] mmco: unref short failure
[h264 @ 0x5556e0306040] mmco: unref short failure
[h264 @ 0x5556e0306040] mmco: unref short failure
09/17/2024 06:02:37 - INFO - __main__ -   current idx gcVsZE1_ynw.15 from finetune_area returns wrong image/video, use 40598 instead.
[h264 @ 0x55864d46d9c0] mmco: unref short failure
[h264 @ 0x55864d46d9c0] mmco: unref short failure
[h264 @ 0x55864d46d9c0] mmco: unref short failure
[h264 @ 0x55864d46d9c0] mmco: unref short failure
[h264 @ 0x557735194e80] mmco: unref short failure
[h264 @ 0x55863fc08440] mmco: unref short failure
[h264 @ 0x5556c6fb70c0] mmco: unref short failure
[h264 @ 0x5556c6fb70c0] mmco: unref short failure
[h264 @ 0x563554a07080] mmco: unref short failure
[h264 @ 0x55863e7d16c0] mmco: unref short failure
 33%|███▎      | 974/2910 [6:07:21<14:38:47, 27.24s/it][h264 @ 0x5635543abf80] mmco: unref short failure
[h264 @ 0x56355ee7f540] mmco: unref short failure
[h264 @ 0x56355ee7f540] mmco: unref short failure
[h264 @ 0x56355ee7f540] mmco: unref short failure
[h264 @ 0x558633fc8480] mmco: unref short failure
[h264 @ 0x55863faf2b80] mmco: unref short failure
[h264 @ 0x563542093a00] mmco: unref short failure
[h264 @ 0x55771d058c00] mmco: unref short failure
[h264 @ 0x55771d058c00] mmco: unref short failure
[h264 @ 0x56354352fa00] mmco: unref short failure
[h264 @ 0x56354352fa00] mmco: unref short failure
 34%|███▎      | 975/2910 [6:07:48<14:35:51, 27.16s/it][h264 @ 0x55863e52fd00] mmco: unref short failure
[h264 @ 0x55863e52fd00] mmco: unref short failure
 34%|███▎      | 976/2910 [6:08:04<12:53:00, 23.98s/it][h264 @ 0x56355c133680] mmco: unref short failure
 34%|███▎      | 977/2910 [6:08:11<10:02:41, 18.71s/it]09/17/2024 06:04:10 - INFO - __main__ -   current idx h0wIcmfgWWQ.54 from finetune_area returns wrong image/video, use 127564 instead.
[h264 @ 0x5576e0c6a4c0] mmco: unref short failure
[h264 @ 0x5576e0c6a4c0] mmco: unref short failure
[h264 @ 0x55864d1364c0] mmco: unref short failure
[h264 @ 0x55864d1364c0] mmco: unref short failure
 34%|███▎      | 978/2910 [6:08:17<8:04:00, 15.03s/it]  34%|███▎      | 979/2910 [6:08:27<7:14:11, 13.49s/it][h264 @ 0x5556d30a0780] mmco: unref short failure
 34%|███▎      | 980/2910 [6:08:33<6:06:48, 11.40s/it][h264 @ 0x55863e7d16c0] mmco: unref short failure
[h264 @ 0x55863e7d16c0] mmco: unref short failure
 34%|███▎      | 981/2910 [6:08:41<5:28:26, 10.22s/it][h264 @ 0x5556ccb8e340] mmco: unref short failure
[h264 @ 0x55771d615e00] mmco: unref short failure
[h264 @ 0x563542093a00] mmco: unref short failure
[h264 @ 0x5556ded54140] mmco: unref short failure
[h264 @ 0x5556ded54140] mmco: unref short failure
[h264 @ 0x5556d8190940] mmco: unref short failure
[h264 @ 0x55863c8cd540] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5586486ddc40] mmco: unref short failure
[h264 @ 0x5586486ddc40] mmco: unref short failure
[h264 @ 0x5586486ddc40] mmco: unref short failure
[h264 @ 0x56356216d740] mmco: unref short failure
[h264 @ 0x56356216d740] mmco: unref short failure
[h264 @ 0x56356216d740] mmco: unref short failure
[h264 @ 0x56356216d740] mmco: unref short failure
09/17/2024 06:05:41 - INFO - __main__ -   current idx E_j3lYgDR7U.12 from finetune_area returns wrong image/video, use 138341 instead.
[h264 @ 0x557730855480] mmco: unref short failure
[h264 @ 0x557730855480] mmco: unref short failure
 34%|███▎      | 982/2910 [6:09:46<14:14:16, 26.59s/it][h264 @ 0x563546144ec0] mmco: unref short failure
[h264 @ 0x563546144ec0] mmco: unref short failure
[h264 @ 0x563546144ec0] mmco: unref short failure
[h264 @ 0x563546144ec0] mmco: unref short failure
[h264 @ 0x563546144ec0] mmco: unref short failure
[h264 @ 0x55772a47b800] mmco: unref short failure
[h264 @ 0x5556d2e26f40] mmco: unref short failure
[h264 @ 0x5556d2e26f40] mmco: unref short failure
[h264 @ 0x5556d2e26f40] mmco: unref short failure
[h264 @ 0x5556d2e26f40] mmco: unref short failure
[h264 @ 0x558648e77440] mmco: unref short failure
[h264 @ 0x558648e77440] mmco: unref short failure
[h264 @ 0x558648e77440] mmco: unref short failure
[h264 @ 0x558648e77440] mmco: unref short failure
[h264 @ 0x563554444b40] mmco: unref short failure
 34%|███▍      | 983/2910 [6:10:12<14:14:11, 26.60s/it][h264 @ 0x557734a30580] mmco: unref short failure
[h264 @ 0x557730cfe7c0] mmco: unref short failure
[h264 @ 0x557730cfe7c0] mmco: unref short failure
[h264 @ 0x5556ccb8e340] mmco: unref short failure
[h264 @ 0x5556ccb8e340] mmco: unref short failure
[h264 @ 0x5576e10c9c00] mmco: unref short failure
 34%|███▍      | 984/2910 [6:10:39<14:15:39, 26.66s/it][h264 @ 0x55863a4bee80] mmco: unref short failure
[h264 @ 0x55863c8cd540] mmco: unref short failure
[h264 @ 0x55863c8cd540] mmco: unref short failure
[h264 @ 0x55863c8cd540] mmco: unref short failure
[h264 @ 0x55863c8cd540] mmco: unref short failure
 34%|███▍      | 985/2910 [6:10:46<11:03:03, 20.67s/it][h264 @ 0x557724592d00] mmco: unref short failure
[h264 @ 0x557724592d00] mmco: unref short failure
 34%|███▍      | 986/2910 [6:10:52<8:47:30, 16.45s/it] [h264 @ 0x557733039800] mmco: unref short failure
[h264 @ 0x557733039800] mmco: unref short failure
[h264 @ 0x55772149fc00] mmco: unref short failure
 34%|███▍      | 987/2910 [6:11:01<7:30:59, 14.07s/it] 34%|███▍      | 988/2910 [6:11:08<6:20:37, 11.88s/it] 34%|███▍      | 989/2910 [6:11:14<5:31:09, 10.34s/it][h264 @ 0x55771b3de980] mmco: unref short failure
[h264 @ 0x563543d42380] mmco: unref short failure
[h264 @ 0x563543d42380] mmco: unref short failure
[h264 @ 0x558639fc65c0] mmco: unref short failure
[h264 @ 0x558639fc65c0] mmco: unref short failure
09/17/2024 06:07:37 - INFO - __main__ -   current idx c36bv6MjqLE.0 from finetune_area returns wrong image/video, use 119021 instead.
[h264 @ 0x557724818440] mmco: unref short failure
[h264 @ 0x558642e87dc0] mmco: unref short failure
[h264 @ 0x558642e87dc0] mmco: unref short failure
[h264 @ 0x563543440340] mmco: unref short failure
[h264 @ 0x563543440340] mmco: unref short failure
[h264 @ 0x5556cc3f2400] mmco: unref short failure
[h264 @ 0x5556cc3f2400] mmco: unref short failure
[h264 @ 0x5556cc3f2400] mmco: unref short failure
[h264 @ 0x5556cc3f2400] mmco: unref short failure
[h264 @ 0x5556dc900c80] mmco: unref short failure
[h264 @ 0x5556dc900c80] mmco: unref short failure
[h264 @ 0x5556dffd3d40] mmco: unref short failure
[h264 @ 0x5556d3ef0e00] mmco: unref short failure
[h264 @ 0x5556d3ef0e00] mmco: unref short failure
 34%|███▍      | 990/2910 [6:12:15<13:30:22, 25.32s/it][h264 @ 0x5577364cdec0] mmco: unref short failure
[h264 @ 0x557721f15840] mmco: unref short failure
[h264 @ 0x557721f15840] mmco: unref short failure
[h264 @ 0x5586469a7cc0] mmco: unref short failure
[h264 @ 0x563546baca00] mmco: unref short failure
[h264 @ 0x558643797580] mmco: unref short failure
 34%|███▍      | 991/2910 [6:12:36<12:47:58, 24.01s/it][h264 @ 0x5635480eeb80] mmco: unref short failure
[h264 @ 0x5635480eeb80] mmco: unref short failure
[h264 @ 0x5635480eeb80] mmco: unref short failure
[h264 @ 0x5635480eeb80] mmco: unref short failure
09/17/2024 06:09:00 - INFO - __main__ -   current idx 6wN4IYAiKIg.50 from finetune_area returns wrong image/video, use 95209 instead.
[h264 @ 0x5556cd9c0f40] mmco: unref short failure
[h264 @ 0x5556cd9c0f40] mmco: unref short failure
[h264 @ 0x558648637a00] mmco: unref short failure
[h264 @ 0x558648637a00] mmco: unref short failure
[h264 @ 0x55863e1c9fc0] mmco: unref short failure
[h264 @ 0x55863e72d600] mmco: unref short failure
[h264 @ 0x557732fd3440] mmco: unref short failure
 34%|███▍      | 992/2910 [6:13:29<17:32:55, 32.94s/it]09/17/2024 06:09:31 - INFO - __main__ -   current idx SguG4-Tr-F8.13 from finetune_area returns wrong image/video, use 66228 instead.
 34%|███▍      | 993/2910 [6:13:37<13:24:47, 25.19s/it] 34%|███▍      | 994/2910 [6:13:44<10:30:14, 19.74s/it][h264 @ 0x557732d06500] mmco: unref short failure
[h264 @ 0x557732d06500] mmco: unref short failure
09/17/2024 06:09:48 - INFO - __main__ -   current idx fQszS3V8sxI.1 from finetune_area returns wrong image/video, use 54813 instead.
[h264 @ 0x563555284ec0] mmco: unref short failure
 34%|███▍      | 995/2910 [6:13:52<8:42:11, 16.36s/it] 09/17/2024 06:09:51 - INFO - __main__ -   current idx c-OFuj2DzPc.20 from finetune_area returns wrong image/video, use 113541 instead.
[h264 @ 0x5635591aea00] mmco: unref short failure
[h264 @ 0x5556c86dc0c0] mmco: unref short failure
[h264 @ 0x5556c86dc0c0] mmco: unref short failure
[h264 @ 0x5556c86dc0c0] mmco: unref short failure
[h264 @ 0x5556c86dc0c0] mmco: unref short failure
[h264 @ 0x557725c36d00] mmco: unref short failure
[h264 @ 0x557725c36d00] mmco: unref short failure
 34%|███▍      | 996/2910 [6:13:59<7:08:41, 13.44s/it] 34%|███▍      | 997/2910 [6:14:06<6:06:22, 11.49s/it][h264 @ 0x5556db0f9740] mmco: unref short failure
[h264 @ 0x55863f611440] mmco: unref short failure
[h264 @ 0x558633ef3980] mmco: unref short failure
[h264 @ 0x557719296ac0] mmco: unref short failure
[h264 @ 0x557719296ac0] mmco: unref short failure
[h264 @ 0x5556c854f100] mmco: unref short failure
[h264 @ 0x5635504b7f80] mmco: unref short failure
[h264 @ 0x55864835e700] mmco: unref short failure
 34%|███▍      | 998/2910 [6:14:51<11:26:41, 21.55s/it][h264 @ 0x55864bdb31c0] mmco: unref short failure
[h264 @ 0x55864bdb31c0] mmco: unref short failure
[h264 @ 0x55864bdb31c0] mmco: unref short failure
[h264 @ 0x55864bdb31c0] mmco: unref short failure
[h264 @ 0x563555284ec0] mmco: unref short failure
[h264 @ 0x55772bd9e700] mmco: unref short failure
[h264 @ 0x55772bd9e700] mmco: unref short failure
[h264 @ 0x55772bd9e700] mmco: unref short failure
[h264 @ 0x55772bd9e700] mmco: unref short failure
[h264 @ 0x5556e0306040] mmco: unref short failure
 34%|███▍      | 999/2910 [6:15:04<10:06:29, 19.04s/it]09/17/2024 06:11:03 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 06:11:03 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5586469a7cc0] mmco: unref short failure
[h264 @ 0x5586469a7cc0] mmco: unref short failure
[h264 @ 0x55863aaf60c0] mmco: unref short failure
[h264 @ 0x55863aaf60c0] mmco: unref short failure
[h264 @ 0x55863aaf60c0] mmco: unref short failure
[h264 @ 0x55863aaf60c0] mmco: unref short failure
[h264 @ 0x5635518798c0] mmco: unref short failure
[h264 @ 0x5635518798c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55568c34a200] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558633749540] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55864638f9c0] mmco: unref short failure
[h264 @ 0x5556c6805e00] mmco: unref short failure
[h264 @ 0x5635480c46c0] mmco: unref short failure
[h264 @ 0x55864835e700] mmco: unref short failure
[h264 @ 0x5556c6467700] mmco: unref short failure
[h264 @ 0x558635f1f8c0] mmco: unref short failure
[h264 @ 0x557730115800] mmco: unref short failure
[h264 @ 0x557730115800] mmco: unref short failure
[h264 @ 0x557730cfe7c0] mmco: unref short failure
[h264 @ 0x557730cfe7c0] mmco: unref short failure
[h264 @ 0x5556ca608380] mmco: unref short failure
[h264 @ 0x5556ca608380] mmco: unref short failure
[h264 @ 0x5576df809cc0] mmco: unref short failure
[h264 @ 0x55863dad0780] mmco: unref short failure
[h264 @ 0x55863dad0780] mmco: unref short failure
[h264 @ 0x55863dad0780] mmco: unref short failure
[h264 @ 0x55863dad0780] mmco: unref short failure
[h264 @ 0x558646e7eac0] mmco: unref short failure
[h264 @ 0x558646e7eac0] mmco: unref short failure
[h264 @ 0x5556d2a87d80] mmco: unref short failure
[h264 @ 0x5556d2a87d80] mmco: unref short failure
[h264 @ 0x5556d2a87d80] mmco: unref short failure
[h264 @ 0x5556d2a87d80] mmco: unref short failure
[h264 @ 0x5577296f7940] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:19,  2.75it/s][A
  1%|          | 2/221 [00:00<01:47,  2.05it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.70it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.34it/s][A
  3%|▎         | 6/221 [00:01<00:43,  4.99it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.15it/s][A
  4%|▎         | 8/221 [00:02<01:19,  2.70it/s][A
  4%|▍         | 9/221 [00:02<01:05,  3.23it/s][A
  5%|▍         | 10/221 [00:03<01:29,  2.37it/s][A
  5%|▍         | 11/221 [00:03<01:08,  3.06it/s][A[h264 @ 0x557738f6abc0] mmco: unref short failure
[h264 @ 0x557738f6abc0] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:10,  2.97it/s][A
  6%|▌         | 13/221 [00:04<00:57,  3.59it/s][A
  6%|▋         | 14/221 [00:04<01:20,  2.57it/s][A
  7%|▋         | 15/221 [00:05<01:18,  2.63it/s][A[h264 @ 0x5556c5d62640] mmco: unref short failure
[h264 @ 0x5556c5d62640] mmco: unref short failure

  7%|▋         | 16/221 [00:05<01:10,  2.89it/s][A
  8%|▊         | 17/221 [00:05<01:06,  3.09it/s][A[h264 @ 0x5635459d2b40] mmco: unref short failure
[h264 @ 0x5635459d2b40] mmco: unref short failure

  8%|▊         | 18/221 [00:05<01:02,  3.23it/s][A
  9%|▊         | 19/221 [00:06<00:54,  3.71it/s][A
  9%|▉         | 20/221 [00:06<00:45,  4.41it/s][A
 10%|▉         | 21/221 [00:06<00:39,  5.03it/s][A
 10%|▉         | 22/221 [00:06<00:44,  4.50it/s][A
 10%|█         | 23/221 [00:06<00:37,  5.23it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.56it/s][A
 11%|█▏        | 25/221 [00:06<00:33,  5.91it/s][A
 12%|█▏        | 26/221 [00:07<00:35,  5.50it/s][A
 12%|█▏        | 27/221 [00:07<00:33,  5.85it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.22it/s][A
 13%|█▎        | 29/221 [00:07<00:43,  4.39it/s][A
 14%|█▎        | 30/221 [00:08<00:43,  4.41it/s][A
 14%|█▍        | 31/221 [00:08<00:41,  4.62it/s][A
 14%|█▍        | 32/221 [00:08<00:36,  5.11it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.78it/s][A
 16%|█▌        | 35/221 [00:09<00:35,  5.20it/s][A
 16%|█▋        | 36/221 [00:09<00:38,  4.77it/s][A
 17%|█▋        | 37/221 [00:09<00:51,  3.57it/s][A
 17%|█▋        | 38/221 [00:10<00:57,  3.18it/s][A
 18%|█▊        | 39/221 [00:10<00:52,  3.47it/s][A
 18%|█▊        | 40/221 [00:10<00:54,  3.29it/s][A
 19%|█▊        | 41/221 [00:11<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:11<01:14,  2.40it/s][A
 19%|█▉        | 43/221 [00:11<01:00,  2.95it/s][A
 20%|█▉        | 44/221 [00:12<00:49,  3.61it/s][A[h264 @ 0x56354bcb9fc0] mmco: unref short failure
[h264 @ 0x56354bcb9fc0] mmco: unref short failure

 20%|██        | 45/221 [00:13<01:35,  1.84it/s][A
 21%|██        | 46/221 [00:14<01:46,  1.65it/s][A
 21%|██▏       | 47/221 [00:15<02:30,  1.16it/s][A
 22%|██▏       | 48/221 [00:15<02:02,  1.41it/s][A
 22%|██▏       | 49/221 [00:16<01:36,  1.78it/s][A
 23%|██▎       | 50/221 [00:16<01:16,  2.24it/s][A
 23%|██▎       | 51/221 [00:16<00:58,  2.89it/s][A
 24%|██▎       | 52/221 [00:16<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:45,  3.71it/s][A
 24%|██▍       | 54/221 [00:18<02:20,  1.19it/s][A
 25%|██▍       | 55/221 [00:19<01:54,  1.45it/s][A
 25%|██▌       | 56/221 [00:19<01:33,  1.77it/s][A[h264 @ 0x557733a1c440] mmco: unref short failure
[h264 @ 0x557733a1c440] mmco: unref short failure

 26%|██▌       | 57/221 [00:20<01:28,  1.86it/s][A
 26%|██▌       | 58/221 [00:20<01:17,  2.09it/s][A
 27%|██▋       | 59/221 [00:20<01:10,  2.30it/s][A[h264 @ 0x558642667140] mmco: unref short failure

 27%|██▋       | 60/221 [00:21<01:10,  2.29it/s][A
 28%|██▊       | 61/221 [00:21<00:58,  2.75it/s][A
 28%|██▊       | 62/221 [00:21<00:51,  3.09it/s][A
 29%|██▊       | 63/221 [00:21<00:42,  3.72it/s][A
 29%|██▉       | 64/221 [00:21<00:36,  4.33it/s][A
 29%|██▉       | 65/221 [00:22<00:35,  4.37it/s][A
 30%|██▉       | 66/221 [00:22<00:58,  2.67it/s][A[h264 @ 0x5556d7f13b40] mmco: unref short failure

 30%|███       | 67/221 [00:23<00:59,  2.57it/s][A
 31%|███       | 68/221 [00:23<00:53,  2.86it/s][A
 31%|███       | 69/221 [00:24<01:07,  2.26it/s][A
 32%|███▏      | 70/221 [00:24<00:54,  2.78it/s][A[h264 @ 0x55568d7a9200] mmco: unref short failure
[h264 @ 0x55568d7a9200] mmco: unref short failure
[h264 @ 0x5635591aea00] mmco: unref short failure
[h264 @ 0x5635591aea00] mmco: unref short failure
[h264 @ 0x5635591aea00] mmco: unref short failure
[h264 @ 0x5635591aea00] mmco: unref short failure
[h264 @ 0x5556c854f100] mmco: unref short failure
[h264 @ 0x5556c854f100] mmco: unref short failure
[h264 @ 0x557719c7f6c0] mmco: unref short failure

 32%|███▏      | 71/221 [00:28<03:38,  1.46s/it][A
 33%|███▎      | 72/221 [00:28<02:47,  1.13s/it][A
 33%|███▎      | 73/221 [00:28<02:11,  1.13it/s][A
 33%|███▎      | 74/221 [00:29<01:37,  1.51it/s][A
 34%|███▍      | 75/221 [00:29<01:20,  1.82it/s][A
 34%|███▍      | 76/221 [00:29<01:03,  2.29it/s][A
 35%|███▍      | 77/221 [00:29<00:54,  2.63it/s][A
 35%|███▌      | 78/221 [00:30<00:51,  2.80it/s][A
 36%|███▌      | 79/221 [00:30<01:05,  2.18it/s][A
 36%|███▌      | 80/221 [00:31<00:53,  2.65it/s][A
 37%|███▋      | 81/221 [00:31<00:46,  3.04it/s][A
 37%|███▋      | 82/221 [00:31<00:42,  3.23it/s][A
 38%|███▊      | 83/221 [00:31<00:35,  3.86it/s][A
 38%|███▊      | 84/221 [00:31<00:29,  4.60it/s][A
 39%|███▉      | 86/221 [00:31<00:22,  6.06it/s][A
 39%|███▉      | 87/221 [00:32<00:34,  3.89it/s][A
 40%|███▉      | 88/221 [00:32<00:37,  3.56it/s][A
 40%|████      | 89/221 [00:36<02:29,  1.14s/it][A
 41%|████      | 90/221 [00:36<02:00,  1.09it/s][A
 41%|████      | 91/221 [00:36<01:30,  1.44it/s][A
 42%|████▏     | 92/221 [00:37<01:12,  1.78it/s][A
 42%|████▏     | 93/221 [00:37<01:11,  1.79it/s][A
 43%|████▎     | 94/221 [00:37<01:03,  2.01it/s][A
 43%|████▎     | 95/221 [00:38<00:51,  2.43it/s][A
 43%|████▎     | 96/221 [00:38<00:46,  2.68it/s][A
 44%|████▍     | 97/221 [00:38<00:37,  3.34it/s][A[h264 @ 0x5635605312c0] mmco: unref short failure
[h264 @ 0x5635605312c0] mmco: unref short failure

 44%|████▍     | 98/221 [00:38<00:40,  3.06it/s][A[h264 @ 0x5635605312c0] mmco: unref short failure
[h264 @ 0x5635605312c0] mmco: unref short failure

 45%|████▍     | 99/221 [00:39<00:36,  3.35it/s][A
 45%|████▌     | 100/221 [00:39<00:34,  3.53it/s][A[h264 @ 0x55771d603c80] mmco: unref short failure
[h264 @ 0x5635605312c0] mmco: unref short failure
[h264 @ 0x5635605312c0] mmco: unref short failure

 46%|████▌     | 101/221 [00:39<00:34,  3.52it/s][A
 46%|████▌     | 102/221 [00:40<00:36,  3.23it/s][A
 47%|████▋     | 103/221 [00:40<00:30,  3.87it/s][A
 47%|████▋     | 104/221 [00:40<00:24,  4.68it/s][A
 48%|████▊     | 105/221 [00:40<00:27,  4.29it/s][A
 48%|████▊     | 106/221 [00:41<00:42,  2.68it/s][A
 48%|████▊     | 107/221 [00:41<00:36,  3.11it/s][A
 49%|████▉     | 108/221 [00:41<00:34,  3.26it/s][A
 49%|████▉     | 109/221 [00:41<00:31,  3.55it/s][A
 50%|████▉     | 110/221 [00:42<00:26,  4.18it/s][A
 50%|█████     | 111/221 [00:42<00:33,  3.27it/s][A
 51%|█████     | 112/221 [00:42<00:30,  3.53it/s][A
 51%|█████     | 113/221 [00:43<00:31,  3.44it/s][A
 52%|█████▏    | 115/221 [00:43<00:20,  5.24it/s][A
 52%|█████▏    | 116/221 [00:48<02:25,  1.39s/it][A
 53%|█████▎    | 117/221 [00:48<01:54,  1.10s/it][A
 53%|█████▎    | 118/221 [00:48<01:30,  1.14it/s][A
 54%|█████▍    | 119/221 [00:49<01:10,  1.44it/s][A
 54%|█████▍    | 120/221 [00:49<00:56,  1.78it/s][A
 55%|█████▍    | 121/221 [00:49<00:43,  2.29it/s][A
 55%|█████▌    | 122/221 [00:49<00:39,  2.52it/s][A
 56%|█████▌    | 123/221 [00:49<00:31,  3.15it/s][A
 56%|█████▌    | 124/221 [00:50<00:29,  3.30it/s][A
 57%|█████▋    | 125/221 [00:50<00:28,  3.34it/s][A
 57%|█████▋    | 126/221 [00:51<00:37,  2.53it/s][A
 57%|█████▋    | 127/221 [00:51<00:37,  2.47it/s][A
 58%|█████▊    | 128/221 [00:52<00:45,  2.05it/s][A
 58%|█████▊    | 129/221 [00:52<00:38,  2.37it/s][A
 59%|█████▉    | 130/221 [00:52<00:33,  2.72it/s][A
 59%|█████▉    | 131/221 [00:52<00:26,  3.43it/s][A
 60%|█████▉    | 132/221 [00:53<00:24,  3.62it/s][A
 60%|██████    | 133/221 [00:53<00:25,  3.51it/s][A
 61%|██████    | 134/221 [00:53<00:25,  3.44it/s][A
 61%|██████    | 135/221 [00:54<00:28,  2.99it/s][A
 62%|██████▏   | 136/221 [00:54<00:33,  2.57it/s][A
 62%|██████▏   | 137/221 [00:54<00:29,  2.87it/s][A[h264 @ 0x55864c22d780] mmco: unref short failure

 62%|██████▏   | 138/221 [00:55<00:28,  2.89it/s][A
 63%|██████▎   | 139/221 [00:55<00:31,  2.62it/s][A
 63%|██████▎   | 140/221 [00:55<00:29,  2.77it/s][A
 64%|██████▍   | 141/221 [00:56<00:25,  3.16it/s][A
 64%|██████▍   | 142/221 [00:56<00:30,  2.57it/s][A
 65%|██████▍   | 143/221 [00:57<00:34,  2.27it/s][A
 65%|██████▌   | 144/221 [00:57<00:30,  2.53it/s][A
 66%|██████▌   | 145/221 [00:57<00:23,  3.24it/s][A
 66%|██████▌   | 146/221 [00:57<00:18,  3.96it/s][A
 67%|██████▋   | 147/221 [00:57<00:16,  4.40it/s][A
 67%|██████▋   | 148/221 [00:58<00:18,  3.96it/s][A
 67%|██████▋   | 149/221 [00:58<00:15,  4.71it/s][A
 68%|██████▊   | 150/221 [00:58<00:16,  4.39it/s][A
 68%|██████▊   | 151/221 [00:59<00:34,  2.04it/s][A
 69%|██████▉   | 152/221 [01:00<00:38,  1.77it/s][A
 69%|██████▉   | 153/221 [01:00<00:32,  2.08it/s][A
 70%|██████▉   | 154/221 [01:01<00:31,  2.10it/s][A
 70%|███████   | 155/221 [01:01<00:25,  2.61it/s][A
 71%|███████   | 156/221 [01:01<00:20,  3.19it/s][A
 71%|███████   | 157/221 [01:05<01:34,  1.48s/it][A
 71%|███████▏  | 158/221 [01:06<01:10,  1.11s/it][A
 72%|███████▏  | 159/221 [01:06<00:51,  1.20it/s][A
 72%|███████▏  | 160/221 [01:06<00:40,  1.52it/s][A[h264 @ 0x55772a4e5e80] mmco: unref short failure
[h264 @ 0x55772a4e5e80] mmco: unref short failure

 73%|███████▎  | 161/221 [01:06<00:32,  1.85it/s][A
 73%|███████▎  | 162/221 [01:07<00:27,  2.17it/s][A
 74%|███████▍  | 163/221 [01:07<00:22,  2.56it/s][A
 74%|███████▍  | 164/221 [01:07<00:18,  3.10it/s][A
 75%|███████▍  | 165/221 [01:07<00:16,  3.31it/s][A[h264 @ 0x56354aaa4900] mmco: unref short failure
[h264 @ 0x56354aaa4900] mmco: unref short failure

 75%|███████▌  | 166/221 [01:08<00:19,  2.89it/s][A
 76%|███████▌  | 167/221 [01:08<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [01:09<00:36,  1.43it/s][A
 76%|███████▋  | 169/221 [01:10<00:32,  1.59it/s][A
 77%|███████▋  | 170/221 [01:10<00:28,  1.78it/s][A
 77%|███████▋  | 171/221 [01:11<00:23,  2.14it/s][A
 78%|███████▊  | 172/221 [01:11<00:18,  2.67it/s][A
 78%|███████▊  | 173/221 [01:11<00:15,  3.14it/s][A
 79%|███████▊  | 174/221 [01:11<00:13,  3.54it/s][A
 79%|███████▉  | 175/221 [01:11<00:13,  3.53it/s][A
 80%|███████▉  | 176/221 [01:12<00:13,  3.24it/s][A
 80%|████████  | 177/221 [01:12<00:11,  3.85it/s][A
 81%|████████  | 178/221 [01:12<00:14,  3.03it/s][A
 81%|████████  | 179/221 [01:13<00:16,  2.58it/s][A
 81%|████████▏ | 180/221 [01:13<00:12,  3.21it/s][A
 82%|████████▏ | 181/221 [01:13<00:11,  3.63it/s][A[h264 @ 0x5556c647e500] mmco: unref short failure
[h264 @ 0x5556c647e500] mmco: unref short failure

 82%|████████▏ | 182/221 [01:13<00:09,  4.28it/s][A[h264 @ 0x5556cbdf7480] mmco: unref short failure
[h264 @ 0x5556cbdf7480] mmco: unref short failure

 83%|████████▎ | 183/221 [01:14<00:08,  4.41it/s][A[h264 @ 0x5556cbdf7480] mmco: unref short failure
[h264 @ 0x5556cbdf7480] mmco: unref short failure

 83%|████████▎ | 184/221 [01:14<00:08,  4.28it/s][A
 84%|████████▎ | 185/221 [01:14<00:07,  4.75it/s][A
 84%|████████▍ | 186/221 [01:14<00:08,  4.04it/s][A
 85%|████████▍ | 187/221 [01:14<00:07,  4.72it/s][A
 85%|████████▌ | 188/221 [01:15<00:08,  3.92it/s][A
 86%|████████▌ | 189/221 [01:15<00:08,  3.63it/s][A
 86%|████████▌ | 190/221 [01:15<00:09,  3.37it/s][A09/17/2024 06:14:44 - INFO - __main__ -   current idx BxSP425mQ4g.34 from finetune_area returns wrong image/video, use 47636 instead.

 87%|████████▋ | 192/221 [01:16<00:06,  4.37it/s][A
 88%|████████▊ | 194/221 [01:17<00:08,  3.30it/s][A
 88%|████████▊ | 195/221 [01:17<00:07,  3.70it/s][A
 89%|████████▉ | 197/221 [01:17<00:05,  4.63it/s][A
 90%|████████▉ | 198/221 [01:17<00:05,  4.42it/s][A
 90%|█████████ | 199/221 [01:17<00:04,  4.66it/s][A
 90%|█████████ | 200/221 [01:18<00:05,  3.97it/s][A
 91%|█████████ | 201/221 [01:18<00:04,  4.06it/s][A
 91%|█████████▏| 202/221 [01:18<00:04,  4.20it/s][A
 92%|█████████▏| 203/221 [01:19<00:04,  3.81it/s][A
 92%|█████████▏| 204/221 [01:19<00:04,  3.99it/s][A
 93%|█████████▎| 205/221 [01:19<00:03,  4.75it/s][A
 93%|█████████▎| 206/221 [01:19<00:03,  4.33it/s][A
 94%|█████████▍| 208/221 [01:19<00:02,  5.70it/s][A
 95%|█████████▌| 210/221 [01:20<00:01,  7.62it/s][A
 95%|█████████▌| 211/221 [01:20<00:02,  5.00it/s][A
 96%|█████████▌| 212/221 [01:20<00:01,  4.60it/s][A
 96%|█████████▋| 213/221 [01:20<00:01,  5.27it/s][A
 97%|█████████▋| 214/221 [01:21<00:02,  2.85it/s][A
 97%|█████████▋| 215/221 [01:21<00:01,  3.26it/s][A
 98%|█████████▊| 216/221 [01:22<00:01,  3.51it/s][A
 98%|█████████▊| 217/221 [01:22<00:01,  3.12it/s][A
 99%|█████████▊| 218/221 [01:22<00:00,  3.06it/s][A
 99%|█████████▉| 219/221 [01:23<00:00,  3.24it/s][A
100%|█████████▉| 220/221 [01:27<00:01,  1.56s/it][A
100%|██████████| 221/221 [01:27<00:00,  1.14s/it][A100%|██████████| 221/221 [01:27<00:00,  2.52it/s]
09/17/2024 06:14:56 - INFO - __main__ -   current idx QCTlsbvtDIQ.2 from finetune_area returns wrong image/video, use 98016 instead.

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:07,  3.24it/s][A
  1%|          | 2/221 [00:00<01:06,  3.29it/s][A
  1%|▏         | 3/221 [00:00<01:08,  3.20it/s][A
  2%|▏         | 4/221 [00:01<01:09,  3.14it/s][A
  2%|▏         | 5/221 [00:01<01:09,  3.10it/s][A[h264 @ 0x55863f588b00] mmco: unref short failure

  3%|▎         | 6/221 [00:01<01:09,  3.11it/s][A
  3%|▎         | 7/221 [00:02<01:06,  3.20it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.22it/s][A[h264 @ 0x557724c27ac0] mmco: unref short failure
[h264 @ 0x557724c27ac0] mmco: unref short failure

  4%|▍         | 9/221 [00:02<01:05,  3.22it/s][A
  5%|▍         | 10/221 [00:03<01:05,  3.23it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.24it/s][A[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure

  5%|▌         | 12/221 [00:03<01:04,  3.23it/s][A
  6%|▌         | 13/221 [00:04<01:03,  3.28it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.25it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.27it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.29it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.32it/s][A
  9%|▊         | 19/221 [00:06<01:12,  2.79it/s][A
  9%|▉         | 20/221 [00:06<01:09,  2.88it/s][A
 10%|▉         | 21/221 [00:06<01:06,  3.02it/s][A
 10%|▉         | 22/221 [00:06<01:03,  3.12it/s][A
 10%|█         | 23/221 [00:07<01:02,  3.17it/s][A
 11%|█         | 24/221 [00:07<01:01,  3.20it/s][A[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure
[h264 @ 0x55863f588b00] mmco: unref short failure

 11%|█▏        | 25/221 [00:07<01:00,  3.23it/s][A
 12%|█▏        | 26/221 [00:08<01:00,  3.22it/s][A
 12%|█▏        | 27/221 [00:08<00:59,  3.23it/s][A[h264 @ 0x563544f85bc0] mmco: unref short failure

 13%|█▎        | 28/221 [00:08<00:59,  3.24it/s][A[h264 @ 0x563544f85bc0] mmco: unref short failure
[h264 @ 0x55771bd55740] mmco: unref short failure

 13%|█▎        | 29/221 [00:09<00:59,  3.25it/s][A[h264 @ 0x55771bd55740] mmco: unref short failure

 14%|█▎        | 30/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.29it/s][A
 14%|█▍        | 32/221 [00:10<01:15,  2.51it/s][A
 15%|█▍        | 33/221 [00:10<01:09,  2.70it/s][A
 15%|█▌        | 34/221 [00:10<01:05,  2.87it/s][A
 16%|█▌        | 35/221 [00:11<01:01,  3.01it/s][A
 16%|█▋        | 36/221 [00:11<00:59,  3.11it/s][A
 17%|█▋        | 37/221 [00:11<00:57,  3.19it/s][A
 17%|█▋        | 38/221 [00:12<00:56,  3.25it/s][A
 18%|█▊        | 39/221 [00:12<00:55,  3.25it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.30it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.32it/s][A
 19%|█▉        | 42/221 [00:13<00:54,  3.31it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.33it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.35it/s][A
 20%|██        | 45/221 [00:14<00:52,  3.34it/s][A
 21%|██        | 46/221 [00:14<00:52,  3.36it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.38it/s][A
 22%|██▏       | 48/221 [00:15<00:51,  3.38it/s][A
 22%|██▏       | 49/221 [00:15<00:50,  3.38it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.38it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.32it/s][A
 24%|██▎       | 52/221 [00:16<00:51,  3.27it/s][A
 24%|██▍       | 53/221 [00:16<00:51,  3.29it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.32it/s][A
 25%|██▍       | 55/221 [00:17<00:49,  3.34it/s][A
 25%|██▌       | 56/221 [00:17<00:49,  3.34it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.32it/s][A
 26%|██▌       | 58/221 [00:18<00:48,  3.33it/s][A
 27%|██▋       | 59/221 [00:18<00:48,  3.32it/s][A
 27%|██▋       | 60/221 [00:18<00:48,  3.33it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.35it/s][A
 28%|██▊       | 62/221 [00:19<00:47,  3.37it/s][A
 29%|██▊       | 63/221 [00:19<00:46,  3.38it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.35it/s][A
 29%|██▉       | 65/221 [00:20<00:46,  3.34it/s][A
 30%|██▉       | 66/221 [00:20<00:46,  3.32it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.29it/s][A
 31%|███       | 68/221 [00:21<00:46,  3.32it/s][A
 31%|███       | 69/221 [00:21<00:45,  3.35it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.33it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.35it/s][A
 33%|███▎      | 72/221 [00:22<00:44,  3.37it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.36it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.31it/s][A
 34%|███▍      | 75/221 [00:23<00:44,  3.31it/s][A
 34%|███▍      | 76/221 [00:23<00:43,  3.34it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.35it/s][A
 35%|███▌      | 78/221 [00:24<00:42,  3.35it/s][A
 36%|███▌      | 79/221 [00:24<00:42,  3.37it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.38it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.39it/s][A
 37%|███▋      | 82/221 [00:25<00:41,  3.37it/s][A
 38%|███▊      | 83/221 [00:25<00:40,  3.37it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.38it/s][A
 38%|███▊      | 85/221 [00:26<00:40,  3.39it/s][A[h264 @ 0x558650ee78c0] mmco: unref short failure

 39%|███▉      | 86/221 [00:26<00:39,  3.39it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.40it/s][A
 40%|███▉      | 88/221 [00:27<00:39,  3.40it/s][A
 40%|████      | 89/221 [00:27<00:38,  3.39it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.39it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.40it/s][A
 42%|████▏     | 92/221 [00:28<00:38,  3.36it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.37it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.38it/s][A
 43%|████▎     | 95/221 [00:29<00:37,  3.39it/s][A
 43%|████▎     | 96/221 [00:29<00:36,  3.39it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.40it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.40it/s][A
 45%|████▍     | 99/221 [00:30<00:35,  3.40it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.40it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 102/221 [00:31<00:34,  3.41it/s][A
 47%|████▋     | 103/221 [00:31<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:32<00:34,  3.41it/s][A
 48%|████▊     | 106/221 [00:32<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:33<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:34<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:36<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:38<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:43<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:45<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:46<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:50<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:51<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:52<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:55<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:58<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.35it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:37,  5.87it/s][A
  1%|          | 2/221 [00:00<00:55,  3.93it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.39it/s][A
  2%|▏         | 4/221 [00:00<00:50,  4.32it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.75it/s][A
  3%|▎         | 6/221 [00:01<00:39,  5.41it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.09it/s][A
  4%|▎         | 8/221 [00:01<00:58,  3.63it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.70it/s][A
  5%|▍         | 10/221 [00:02<00:52,  4.05it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.55it/s][A
  5%|▌         | 12/221 [00:03<00:56,  3.71it/s][A
  6%|▌         | 13/221 [00:03<01:34,  2.20it/s][A
  6%|▋         | 14/221 [00:04<01:16,  2.70it/s][A
  7%|▋         | 15/221 [00:04<01:17,  2.67it/s][A
  7%|▋         | 16/221 [00:04<01:14,  2.75it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:05<01:16,  2.64it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.81it/s][A
 10%|▉         | 21/221 [00:06<00:46,  4.27it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.34it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.31it/s][A
 11%|█▏        | 25/221 [00:06<00:45,  4.28it/s][A
 12%|█▏        | 26/221 [00:07<00:50,  3.89it/s][A
 12%|█▏        | 27/221 [00:07<00:49,  3.96it/s][A
 13%|█▎        | 28/221 [00:07<00:56,  3.44it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.37it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.45it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.51it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.36it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:09<01:01,  3.04it/s][A
 16%|█▌        | 35/221 [00:10<01:04,  2.88it/s][A
 16%|█▋        | 36/221 [00:10<01:00,  3.08it/s][A
 17%|█▋        | 37/221 [00:10<00:55,  3.33it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.43it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.29it/s][A
 19%|█▊        | 41/221 [00:11<00:56,  3.20it/s][A
 19%|█▉        | 42/221 [00:12<00:51,  3.50it/s][A
 19%|█▉        | 43/221 [00:12<00:57,  3.08it/s][A
 20%|█▉        | 44/221 [00:12<01:00,  2.95it/s][A
 20%|██        | 45/221 [00:13<01:06,  2.64it/s][A
 21%|██        | 46/221 [00:13<00:58,  3.01it/s][A
 21%|██▏       | 47/221 [00:13<00:49,  3.50it/s][A
 22%|██▏       | 48/221 [00:13<00:41,  4.13it/s][A
 22%|██▏       | 49/221 [00:14<00:35,  4.87it/s][A
 23%|██▎       | 50/221 [00:14<00:37,  4.52it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.12it/s][A
 24%|██▍       | 53/221 [00:15<00:40,  4.18it/s][A
 24%|██▍       | 54/221 [00:15<00:41,  4.02it/s][A
 25%|██▍       | 55/221 [00:15<00:46,  3.56it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.38it/s][A
 26%|██▌       | 58/221 [00:16<00:40,  4.07it/s][A
 27%|██▋       | 59/221 [00:16<00:40,  4.01it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.46it/s][A
 28%|██▊       | 61/221 [00:17<00:36,  4.41it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.79it/s][A
 29%|██▉       | 64/221 [00:17<00:35,  4.47it/s][A
 29%|██▉       | 65/221 [00:18<00:36,  4.31it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.61it/s][A
 30%|███       | 67/221 [00:18<00:53,  2.91it/s][A
 31%|███       | 68/221 [00:19<00:50,  3.03it/s][A
 31%|███       | 69/221 [00:19<00:58,  2.59it/s][A
 32%|███▏      | 70/221 [00:20<00:50,  3.01it/s][A
 32%|███▏      | 71/221 [00:20<00:52,  2.86it/s][A
 33%|███▎      | 72/221 [00:20<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:21<00:49,  3.02it/s][A
 33%|███▎      | 74/221 [00:21<00:45,  3.26it/s][A
 34%|███▍      | 75/221 [00:21<00:43,  3.36it/s][A
 34%|███▍      | 76/221 [00:21<00:37,  3.88it/s][A
 35%|███▍      | 77/221 [00:21<00:33,  4.32it/s][A
 35%|███▌      | 78/221 [00:22<00:38,  3.67it/s][A
 36%|███▌      | 79/221 [00:22<00:38,  3.65it/s][A
 36%|███▌      | 80/221 [00:22<00:34,  4.10it/s][A
 37%|███▋      | 81/221 [00:22<00:33,  4.13it/s][A
 37%|███▋      | 82/221 [00:23<00:44,  3.15it/s][A
 38%|███▊      | 83/221 [00:23<00:35,  3.91it/s][A
 38%|███▊      | 84/221 [00:24<00:42,  3.25it/s][A
 38%|███▊      | 85/221 [00:24<00:44,  3.07it/s][A
 39%|███▉      | 86/221 [00:24<00:43,  3.07it/s][A
 39%|███▉      | 87/221 [00:25<00:50,  2.68it/s][A
 40%|███▉      | 88/221 [00:25<00:46,  2.86it/s][A
 40%|████      | 89/221 [00:25<00:47,  2.79it/s][A
 41%|████      | 90/221 [00:26<00:52,  2.48it/s][A
 41%|████      | 91/221 [00:26<00:45,  2.88it/s][A
 42%|████▏     | 92/221 [00:26<00:44,  2.93it/s][A
 42%|████▏     | 93/221 [00:27<00:51,  2.50it/s][A
 43%|████▎     | 94/221 [00:27<00:43,  2.93it/s][A
 43%|████▎     | 95/221 [00:28<00:50,  2.50it/s][A
 43%|████▎     | 96/221 [00:28<00:48,  2.57it/s][A
 44%|████▍     | 97/221 [00:28<00:44,  2.78it/s][A
 44%|████▍     | 98/221 [00:29<00:44,  2.77it/s][A
 45%|████▍     | 99/221 [00:29<00:40,  3.02it/s][A
 45%|████▌     | 100/221 [00:29<00:34,  3.54it/s][A
 46%|████▌     | 101/221 [00:29<00:29,  4.01it/s][A
 46%|████▌     | 102/221 [00:30<00:32,  3.67it/s][A
 47%|████▋     | 103/221 [00:30<00:31,  3.80it/s][A
 47%|████▋     | 104/221 [00:30<00:26,  4.37it/s][A
 48%|████▊     | 105/221 [00:30<00:29,  3.97it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.46it/s][A
 48%|████▊     | 107/221 [00:31<00:29,  3.81it/s][A
 49%|████▉     | 108/221 [00:31<00:27,  4.06it/s][A
 49%|████▉     | 109/221 [00:31<00:27,  4.10it/s][A
 50%|████▉     | 110/221 [00:32<00:26,  4.15it/s][A
 50%|█████     | 111/221 [00:32<00:29,  3.71it/s][A
 51%|█████     | 112/221 [00:32<00:32,  3.36it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.41it/s][A
 52%|█████▏    | 115/221 [00:33<00:23,  4.60it/s][A
 52%|█████▏    | 116/221 [00:33<00:23,  4.48it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.24it/s][A
 53%|█████▎    | 118/221 [00:34<00:28,  3.56it/s][A
 54%|█████▍    | 119/221 [00:34<00:33,  3.01it/s][A
 54%|█████▍    | 120/221 [00:35<00:35,  2.88it/s][A
 55%|█████▍    | 121/221 [00:35<00:31,  3.16it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.46it/s][A
 56%|█████▌    | 123/221 [00:35<00:28,  3.50it/s][A
 56%|█████▌    | 124/221 [00:36<00:31,  3.08it/s][A
 57%|█████▋    | 125/221 [00:36<00:37,  2.57it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.88it/s][A
 57%|█████▋    | 127/221 [00:37<00:36,  2.55it/s][A
 58%|█████▊    | 128/221 [00:37<00:31,  2.94it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.39it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.45it/s][A
 59%|█████▉    | 131/221 [00:38<00:24,  3.60it/s][A
 60%|█████▉    | 132/221 [00:38<00:24,  3.57it/s][A
 60%|██████    | 133/221 [00:39<00:28,  3.08it/s][A
 61%|██████    | 134/221 [00:39<00:33,  2.60it/s][A
 61%|██████    | 135/221 [00:39<00:27,  3.18it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.16it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.44it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.60it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.10it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.49it/s][A
 64%|██████▍   | 141/221 [00:41<00:26,  3.05it/s][A
 64%|██████▍   | 142/221 [00:41<00:22,  3.44it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.28it/s][A
 65%|██████▌   | 144/221 [00:42<00:19,  3.94it/s][A
 66%|██████▌   | 145/221 [00:42<00:21,  3.49it/s][A
 66%|██████▌   | 146/221 [00:43<00:20,  3.62it/s][A
 67%|██████▋   | 147/221 [00:43<00:17,  4.20it/s][A
 67%|██████▋   | 148/221 [00:43<00:20,  3.50it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.64it/s][A
 68%|██████▊   | 150/221 [00:44<00:19,  3.69it/s][A
 68%|██████▊   | 151/221 [00:44<00:23,  3.02it/s][A
 69%|██████▉   | 152/221 [00:45<00:34,  1.97it/s][A
 69%|██████▉   | 153/221 [00:45<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:45<00:25,  2.63it/s][A
 70%|███████   | 155/221 [00:46<00:25,  2.60it/s][A
 71%|███████   | 156/221 [00:46<00:20,  3.10it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.29it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.07it/s][A
 72%|███████▏  | 159/221 [00:47<00:17,  3.46it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.79it/s][A
 73%|███████▎  | 161/221 [00:47<00:13,  4.54it/s][A
 73%|███████▎  | 162/221 [00:47<00:11,  4.92it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.46it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  4.96it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.25it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.64it/s][A
 76%|███████▌  | 167/221 [00:49<00:13,  4.04it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  3.83it/s][A
 77%|███████▋  | 170/221 [00:50<00:15,  3.25it/s][A
 77%|███████▋  | 171/221 [00:50<00:17,  2.88it/s][A
 78%|███████▊  | 172/221 [00:50<00:16,  2.94it/s][A
 78%|███████▊  | 173/221 [00:51<00:16,  2.93it/s][A
 79%|███████▊  | 174/221 [00:51<00:15,  3.05it/s][A
 79%|███████▉  | 175/221 [00:52<00:16,  2.81it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.31it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.47it/s][A
 81%|████████  | 178/221 [00:53<00:18,  2.36it/s][A
 81%|████████  | 179/221 [00:53<00:15,  2.66it/s][A
 81%|████████▏ | 180/221 [00:53<00:12,  3.27it/s][A
 82%|████████▏ | 181/221 [00:53<00:13,  3.07it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.39it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.20it/s][A
 83%|████████▎ | 184/221 [00:54<00:11,  3.19it/s][A
 84%|████████▍ | 186/221 [00:55<00:11,  3.13it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.63it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.49it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.67it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.26it/s][A
 86%|████████▋ | 191/221 [00:56<00:07,  3.86it/s][A
 87%|████████▋ | 192/221 [00:56<00:06,  4.26it/s][A
 87%|████████▋ | 193/221 [00:57<00:06,  4.19it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.80it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.60it/s][A
 89%|████████▊ | 196/221 [00:58<00:08,  3.02it/s][A
 89%|████████▉ | 197/221 [00:58<00:09,  2.59it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.57it/s][A
 90%|█████████ | 199/221 [00:59<00:07,  3.06it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.35it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.81it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.37it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.64it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.61it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.36it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.62it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  2.83it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.38it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.64it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.57it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.78it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.53it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.66it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.95it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.98it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.90it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.09it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.35it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.09it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.40it/s][A
100%|██████████| 221/221 [01:06<00:00,  2.94it/s][A100%|██████████| 221/221 [01:06<00:00,  3.34it/s]
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'area_r1': 40.2, 'area_recall': '40.2/67.1/75.9', 'area_ravg': 61.0}
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'forward_r1': 38.9, 'forward_recall': '38.9/67.9/77.5', 'forward_ravg': 61.4}
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'area_video_r1': 39.5, 'area_video_recall': '39.5/68.6/78.7', 'area_video_ravg': 62.3}
09/17/2024 06:17:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 06:17:13 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'area_video_r1': 52.7, 'area_video_recall': '52.7/76.4/82.7', 'area_video_ravg': 70.6, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.8/82.5', 'area_video_back_ravg': 68.7}
09/17/2024 06:17:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 06:17:13 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'video_r1': 36.7, 'video_recall': '36.7/64.0/74.9', 'video_ravg': 58.5}
09/17/2024 06:17:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 949=======

09/17/2024 06:17:13 - INFO - __main__ -   {'video_r1': 37.4, 'video_recall': '37.4/65.0/75.3', 'video_ravg': 59.3}
09/17/2024 06:17:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 999--===========

09/17/2024 06:17:13 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/74.7/81.6', 'video_ravg': 69.2}
09/17/2024 06:17:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 06:17:13 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 06:17:34 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.008612607605755329, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1190563440322876, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.2084174156188965, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.3360862731933594}
[h264 @ 0x5556cbdf7480] mmco: unref short failure
[h264 @ 0x5556cbdf7480] mmco: unref short failure
 34%|███▍      | 1000/2910 [6:21:38<69:48:46, 131.58s/it][h264 @ 0x5556d6090480] mmco: unref short failure
[h264 @ 0x5556d6090480] mmco: unref short failure
 34%|███▍      | 1001/2910 [6:21:42<49:27:33, 93.27s/it]  34%|███▍      | 1002/2910 [6:21:46<35:16:59, 66.57s/it]09/17/2024 06:17:47 - INFO - __main__ -   current idx OTXYBNGzWpQ.110 from finetune_area returns wrong image/video, use 70925 instead.
[h264 @ 0x55863d904640] mmco: unref short failure
[h264 @ 0x55863d904640] mmco: unref short failure
[h264 @ 0x55568c6767c0] mmco: unref short failure
[h264 @ 0x55568c6767c0] mmco: unref short failure
 34%|███▍      | 1003/2910 [6:21:51<25:25:09, 47.99s/it][h264 @ 0x55771d374f00] mmco: unref short failure
[h264 @ 0x55771d374f00] mmco: unref short failure
09/17/2024 06:17:54 - INFO - __main__ -   current idx 3UV1kgubC10.7 from finetune_area returns wrong image/video, use 58206 instead.
 35%|███▍      | 1004/2910 [6:21:57<18:42:45, 35.34s/it][h264 @ 0x5556ca017140] mmco: unref short failure
[h264 @ 0x5556ca017140] mmco: unref short failure
[h264 @ 0x5556ca017140] mmco: unref short failure
 35%|███▍      | 1005/2910 [6:22:03<14:02:03, 26.52s/it] 35%|███▍      | 1006/2910 [6:22:09<10:47:37, 20.41s/it][h264 @ 0x55863ed8e0c0] mmco: unref short failure
 35%|███▍      | 1007/2910 [6:22:15<8:29:34, 16.07s/it]  35%|███▍      | 1008/2910 [6:22:21<6:58:19, 13.20s/it][h264 @ 0x5556ca017140] mmco: unref short failure
[h264 @ 0x5556ca017140] mmco: unref short failure
 35%|███▍      | 1009/2910 [6:22:29<6:10:12, 11.68s/it][h264 @ 0x56354e1426c0] mmco: unref short failure
 35%|███▍      | 1010/2910 [6:22:36<5:23:13, 10.21s/it][h264 @ 0x55568bf72c00] mmco: unref short failure
[h264 @ 0x55568bf72c00] mmco: unref short failure
[h264 @ 0x55568bf72c00] mmco: unref short failure
[h264 @ 0x55568bf72c00] mmco: unref short failure
 35%|███▍      | 1011/2910 [6:22:43<4:55:12,  9.33s/it][h264 @ 0x56355d571640] mmco: unref short failure
[h264 @ 0x56355d571640] mmco: unref short failure
 35%|███▍      | 1012/2910 [6:22:50<4:25:31,  8.39s/it][h264 @ 0x55863f588b00] mmco: unref short failure
 35%|███▍      | 1013/2910 [6:22:56<4:10:03,  7.91s/it][h264 @ 0x55772b0d6c40] mmco: unref short failure
 35%|███▍      | 1014/2910 [6:23:03<3:57:14,  7.51s/it][h264 @ 0x5635416b5840] mmco: unref short failure
[h264 @ 0x56355d183ec0] mmco: unref short failure
[h264 @ 0x56355d183ec0] mmco: unref short failure
[h264 @ 0x56355d183ec0] mmco: unref short failure
[h264 @ 0x56355d183ec0] mmco: unref short failure
[h264 @ 0x558637910c00] mmco: unref short failure
[h264 @ 0x558637910c00] mmco: unref short failure
 35%|███▍      | 1015/2910 [6:23:10<3:56:00,  7.47s/it][h264 @ 0x55568bca6a80] mmco: unref short failure
[h264 @ 0x55568bca6a80] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x56354281b180] mmco: unref short failure
[h264 @ 0x5556dd9fffc0] mmco: unref short failure
[h264 @ 0x5556dd9fffc0] mmco: unref short failure
 35%|███▍      | 1016/2910 [6:23:40<7:28:48, 14.22s/it][h264 @ 0x5586546bf1c0] mmco: unref short failure
[h264 @ 0x5586546bf1c0] mmco: unref short failure
[h264 @ 0x558647e88a00] mmco: unref short failure
[h264 @ 0x558647e88a00] mmco: unref short failure
[h264 @ 0x558647e88a00] mmco: unref short failure
[h264 @ 0x558647e88a00] mmco: unref short failure
[h264 @ 0x5556cbf4e840] mmco: unref short failure
[h264 @ 0x5556cbf4e840] mmco: unref short failure
 35%|███▍      | 1017/2910 [6:24:01<8:29:19, 16.14s/it][h264 @ 0x558639514180] mmco: unref short failure
[h264 @ 0x56355d571640] mmco: unref short failure
[h264 @ 0x56355d571640] mmco: unref short failure
[h264 @ 0x56355d571640] mmco: unref short failure
[h264 @ 0x56355d571640] mmco: unref short failure
 35%|███▍      | 1018/2910 [6:24:07<6:56:03, 13.19s/it][h264 @ 0x55864f694600] mmco: unref short failure
[h264 @ 0x55864f694600] mmco: unref short failure
 35%|███▌      | 1019/2910 [6:24:16<6:17:39, 11.98s/it]09/17/2024 06:20:18 - INFO - __main__ -   current idx PhpkFkc8SS8.32 from finetune_area returns wrong image/video, use 2124 instead.
[h264 @ 0x5556c5d37200] mmco: unref short failure
[h264 @ 0x5556c5d37200] mmco: unref short failure
[h264 @ 0x557719296ac0] mmco: unref short failure
 35%|███▌      | 1020/2910 [6:24:27<6:05:35, 11.61s/it][h264 @ 0x557725240c80] mmco: unref short failure
[h264 @ 0x563555f69500] mmco: unref short failure
 35%|███▌      | 1021/2910 [6:24:39<6:11:18, 11.79s/it] 35%|███▌      | 1022/2910 [6:24:46<5:23:46, 10.29s/it][h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
 35%|███▌      | 1023/2910 [6:24:53<4:49:11,  9.20s/it][h264 @ 0x5586363289c0] mmco: unref short failure
[h264 @ 0x5586363289c0] mmco: unref short failure
[h264 @ 0x563541e045c0] mmco: unref short failure
[h264 @ 0x563555f69500] mmco: unref short failure
[h264 @ 0x5556e3d27680] mmco: unref short failure
[h264 @ 0x5556e3d27680] mmco: unref short failure
[h264 @ 0x5556e3d27680] mmco: unref short failure
[h264 @ 0x5556e3d27680] mmco: unref short failure
[h264 @ 0x563556d16c80] mmco: unref short failure
[h264 @ 0x563556d16c80] mmco: unref short failure
[h264 @ 0x5556d3e0f340] mmco: unref short failure
[h264 @ 0x5556d3e0f340] mmco: unref short failure
[h264 @ 0x5556c432f7c0] mmco: unref short failure
[h264 @ 0x5556c432f7c0] mmco: unref short failure
[h264 @ 0x557725db3c00] mmco: unref short failure
[h264 @ 0x557725db3c00] mmco: unref short failure
[h264 @ 0x558632ee1680] mmco: unref short failure
[h264 @ 0x5556c648eb80] mmco: unref short failure
[h264 @ 0x5556c648eb80] mmco: unref short failure
[h264 @ 0x5556c7693200] mmco: unref short failure
[h264 @ 0x5556d3e0f340] mmco: unref short failure
[h264 @ 0x55864defc400] mmco: unref short failure
[h264 @ 0x55864defc400] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x55772ec95240] mmco: unref short failure
[h264 @ 0x558639ac8c40] mmco: unref short failure
[h264 @ 0x558639ac8c40] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x5635472df180] mmco: unref short failure
[h264 @ 0x56354b422c80] mmco: unref short failure
[h264 @ 0x56354b422c80] mmco: unref short failure
 35%|███▌      | 1024/2910 [6:26:16<16:26:28, 31.38s/it][h264 @ 0x5577331a4880] mmco: unref short failure
[h264 @ 0x56355eeb0680] mmco: unref short failure
[h264 @ 0x56355eeb0680] mmco: unref short failure
[h264 @ 0x56354e75a2c0] mmco: unref short failure
[h264 @ 0x56354e75a2c0] mmco: unref short failure
[h264 @ 0x5556d6f97180] mmco: unref short failure
 35%|███▌      | 1025/2910 [6:26:33<14:15:41, 27.24s/it][h264 @ 0x55771ad68040] mmco: unref short failure
 35%|███▌      | 1026/2910 [6:26:40<10:58:54, 20.98s/it][h264 @ 0x558642ebcd00] mmco: unref short failure
[h264 @ 0x55771ad68040] mmco: unref short failure
 35%|███▌      | 1027/2910 [6:27:02<11:13:23, 21.46s/it][h264 @ 0x5556d46a20c0] mmco: unref short failure
[h264 @ 0x5556d46a20c0] mmco: unref short failure
 35%|███▌      | 1028/2910 [6:27:09<8:55:56, 17.09s/it] [h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x5556ca253f80] mmco: unref short failure
[h264 @ 0x5556ca253f80] mmco: unref short failure
[h264 @ 0x5556ca253f80] mmco: unref short failure
[h264 @ 0x5556ca253f80] mmco: unref short failure
 35%|███▌      | 1029/2910 [6:27:16<7:14:15, 13.85s/it][h264 @ 0x55772a91f180] mmco: unref short failure
[h264 @ 0x55772a91f180] mmco: unref short failure
[h264 @ 0x55771aa28740] mmco: unref short failure
 35%|███▌      | 1030/2910 [6:27:22<6:05:48, 11.67s/it] 35%|███▌      | 1031/2910 [6:27:29<5:17:27, 10.14s/it][h264 @ 0x5635472df180] mmco: unref short failure
[h264 @ 0x5635472df180] mmco: unref short failure
[h264 @ 0x5635472df180] mmco: unref short failure
[h264 @ 0x5635472df180] mmco: unref short failure
[h264 @ 0x563547d7f200] mmco: unref short failure
[h264 @ 0x563547d7f200] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x5586449b28c0] mmco: unref short failure
[h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x5556c432f7c0] mmco: unref short failure
[h264 @ 0x558642c8f600] mmco: unref short failure
[h264 @ 0x558642c8f600] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
[h264 @ 0x55864473f140] mmco: unref short failure
[h264 @ 0x55864473f140] mmco: unref short failure
[h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x5556d6793540] mmco: unref short failure
[h264 @ 0x55771d3ff240] mmco: unref short failure
[h264 @ 0x55771d3ff240] mmco: unref short failure
[h264 @ 0x55863dad0780] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x55568c7798c0] mmco: unref short failure
[h264 @ 0x55568c7798c0] mmco: unref short failure
[h264 @ 0x55568c7798c0] mmco: unref short failure
[h264 @ 0x55568c7798c0] mmco: unref short failure
[h264 @ 0x5556d8c7c3c0] mmco: unref short failure
[h264 @ 0x5556d8c7c3c0] mmco: unref short failure
[h264 @ 0x5556d8c7c3c0] mmco: unref short failure
[h264 @ 0x5556d8c7c3c0] mmco: unref short failure
[h264 @ 0x5586449b28c0] mmco: unref short failure
[h264 @ 0x5586449b28c0] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x5586449b28c0] mmco: unref short failure
[h264 @ 0x558649c72f80] mmco: unref short failure
[h264 @ 0x558649c72f80] mmco: unref short failure
 35%|███▌      | 1032/2910 [6:28:48<16:09:15, 30.97s/it][h264 @ 0x563544ed1b40] mmco: unref short failure
[h264 @ 0x563544ed1b40] mmco: unref short failure
 35%|███▌      | 1033/2910 [6:29:03<13:38:33, 26.17s/it][h264 @ 0x558651d10980] mmco: unref short failure
[h264 @ 0x558651d10980] mmco: unref short failure
[h264 @ 0x558651d10980] mmco: unref short failure
[h264 @ 0x558651d10980] mmco: unref short failure
[h264 @ 0x558651d10980] mmco: unref short failure
 36%|███▌      | 1034/2910 [6:29:10<10:39:54, 20.47s/it][h264 @ 0x5556c5706d00] mmco: unref short failure
[h264 @ 0x5556c5706d00] mmco: unref short failure
[h264 @ 0x563554391f80] mmco: unref short failure
[h264 @ 0x563554391f80] mmco: unref short failure
[h264 @ 0x56354d0db780] mmco: unref short failure
 36%|███▌      | 1035/2910 [6:29:31<10:37:54, 20.41s/it][h264 @ 0x558651d10980] mmco: unref short failure
[h264 @ 0x558651d10980] mmco: unref short failure
 36%|███▌      | 1036/2910 [6:29:38<8:29:38, 16.32s/it] [h264 @ 0x55771c51ff80] mmco: unref short failure
[h264 @ 0x55771c51ff80] mmco: unref short failure
 36%|███▌      | 1037/2910 [6:29:45<7:08:43, 13.73s/it][h264 @ 0x56355e090b40] mmco: unref short failure
[h264 @ 0x56355e090b40] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
 36%|███▌      | 1038/2910 [6:29:52<6:00:27, 11.55s/it][h264 @ 0x5586385c3880] mmco: unref short failure
[h264 @ 0x5586385c3880] mmco: unref short failure
[h264 @ 0x5635480c46c0] mmco: unref short failure
[h264 @ 0x56355ec7b1c0] mmco: unref short failure
 36%|███▌      | 1039/2910 [6:29:59<5:15:51, 10.13s/it][h264 @ 0x5556e4a76440] mmco: unref short failure
[h264 @ 0x5556e4a76440] mmco: unref short failure
[h264 @ 0x56354e1426c0] mmco: unref short failure
[h264 @ 0x56354e1426c0] mmco: unref short failure
[h264 @ 0x5577212e98c0] mmco: unref short failure
09/17/2024 06:26:11 - INFO - __main__ -   current idx XY_lzonfE3I.29 from finetune_area returns wrong image/video, use 65242 instead.
[h264 @ 0x5577258db180] mmco: unref short failure
09/17/2024 06:26:14 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 66694 instead.
[h264 @ 0x563541e045c0] mmco: unref short failure
[h264 @ 0x563541e045c0] mmco: unref short failure
[h264 @ 0x563541e045c0] mmco: unref short failure
[h264 @ 0x5556e2a3e800] mmco: unref short failure
[h264 @ 0x5556e2a3e800] mmco: unref short failure
[h264 @ 0x55863a0791c0] mmco: unref short failure
[h264 @ 0x55863a0791c0] mmco: unref short failure
[h264 @ 0x56354a79a100] mmco: unref short failure
[h264 @ 0x5635508b1840] mmco: unref short failure
[h264 @ 0x5635508b1840] mmco: unref short failure
[h264 @ 0x5635508b1840] mmco: unref short failure
[h264 @ 0x5635508b1840] mmco: unref short failure
[h264 @ 0x55772c4cc740] mmco: unref short failure
[h264 @ 0x55772c4cc740] mmco: unref short failure
[h264 @ 0x55772c4cc740] mmco: unref short failure
[h264 @ 0x55772c4cc740] mmco: unref short failure
[h264 @ 0x55568c17cf40] mmco: unref short failure
[h264 @ 0x55568c17cf40] mmco: unref short failure
[h264 @ 0x56354c4f22c0] mmco: unref short failure
[h264 @ 0x56354c4f22c0] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
[h264 @ 0x558637035700] mmco: unref short failure
 36%|███▌      | 1040/2910 [6:31:15<15:38:35, 30.12s/it][h264 @ 0x56355d571640] mmco: unref short failure
 36%|███▌      | 1041/2910 [6:31:23<12:08:07, 23.38s/it][h264 @ 0x557718813180] mmco: unref short failure
[h264 @ 0x557718813180] mmco: unref short failure
[h264 @ 0x558647d84240] mmco: unref short failure
 36%|███▌      | 1042/2910 [6:31:37<10:36:27, 20.44s/it][h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x55568b819000] mmco: unref short failure
[h264 @ 0x5635499d8800] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x55864bf78f00] mmco: unref short failure
[h264 @ 0x56355c454dc0] mmco: unref short failure
[h264 @ 0x563546561100] mmco: unref short failure
[h264 @ 0x55864948ed00] mmco: unref short failure
[h264 @ 0x55864948ed00] mmco: unref short failure
 36%|███▌      | 1043/2910 [6:32:11<12:44:57, 24.58s/it][h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x56355b2ba640] mmco: unref short failure
[h264 @ 0x56355b2ba640] mmco: unref short failure
 36%|███▌      | 1044/2910 [6:32:19<10:14:11, 19.75s/it][h264 @ 0x5556e633e700] mmco: unref short failure
[h264 @ 0x5556e633e700] mmco: unref short failure
[h264 @ 0x5556e633e700] mmco: unref short failure
[h264 @ 0x5556e633e700] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5635434d1bc0] mmco: unref short failure
[h264 @ 0x5635434d1bc0] mmco: unref short failure
 36%|███▌      | 1045/2910 [6:32:25<8:07:26, 15.68s/it] [h264 @ 0x563541e045c0] mmco: unref short failure
[h264 @ 0x563541e045c0] mmco: unref short failure
 36%|███▌      | 1046/2910 [6:32:33<6:47:19, 13.11s/it][h264 @ 0x5556de007d40] mmco: unref short failure
[h264 @ 0x5556de007d40] mmco: unref short failure
[h264 @ 0x557730ff8bc0] mmco: unref short failure
[h264 @ 0x557730ff8bc0] mmco: unref short failure
 36%|███▌      | 1047/2910 [6:32:40<5:53:32, 11.39s/it][h264 @ 0x563543f13500] mmco: unref short failure
[h264 @ 0x563543f13500] mmco: unref short failure
[h264 @ 0x55772a19aa40] mmco: unref short failure
[h264 @ 0x55772a19aa40] mmco: unref short failure
[h264 @ 0x5635550c6e80] mmco: unref short failure
[h264 @ 0x55864aadadc0] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x558642c8f600] mmco: unref short failure
[h264 @ 0x558642c8f600] mmco: unref short failure
[h264 @ 0x55568be05e40] mmco: unref short failure
[h264 @ 0x55864705f5c0] mmco: unref short failure
[h264 @ 0x55864705f5c0] mmco: unref short failure
09/17/2024 06:29:25 - INFO - __main__ -   current idx ZFfJ2HTRUeU.13 from finetune_area returns wrong image/video, use 141527 instead.
[h264 @ 0x5635509929c0] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
[h264 @ 0x5635499d8800] mmco: unref short failure
[h264 @ 0x5635499d8800] mmco: unref short failure
[h264 @ 0x55864948ed00] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556c5b28480] mmco: unref short failure
[h264 @ 0x5556c5b28480] mmco: unref short failure
09/17/2024 06:29:43 - INFO - __main__ -   current idx 6S63HrRqSXw.2 from finetune_area returns wrong image/video, use 95087 instead.
[h264 @ 0x5576def9a380] mmco: unref short failure
[h264 @ 0x5576def9a380] mmco: unref short failure
[h264 @ 0x5576def9a380] mmco: unref short failure
[h264 @ 0x5576def9a380] mmco: unref short failure
[h264 @ 0x55864aadadc0] mmco: unref short failure
[h264 @ 0x55864aadadc0] mmco: unref short failure
[h264 @ 0x55864aadadc0] mmco: unref short failure
 36%|███▌      | 1048/2910 [6:33:51<15:11:09, 29.36s/it][h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x5577280c6b80] mmco: unref short failure
[h264 @ 0x56355bfd1c00] mmco: unref short failure
 36%|███▌      | 1049/2910 [6:33:58<11:44:23, 22.71s/it]09/17/2024 06:29:57 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 06:29:57 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5635592b54c0] mmco: unref short failure
[h264 @ 0x5635592b54c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5635485bb940] mmco: unref short failure
[h264 @ 0x5635485bb940] mmco: unref short failure
[h264 @ 0x55772a19aa40] mmco: unref short failure
[h264 @ 0x55772a19aa40] mmco: unref short failure
[h264 @ 0x55864229ce00] mmco: unref short failure
[h264 @ 0x55864229ce00] mmco: unref short failure
09/17/2024 06:31:56 - INFO - __main__ -   current idx 7tqvfeOf2ug.2 from finetune_area returns wrong image/video, use 70421 instead.
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x5556df252780] mmco: unref short failure
[h264 @ 0x55864c22d780] mmco: unref short failure
[h264 @ 0x557722b92a40] mmco: unref short failure
[h264 @ 0x557722b92a40] mmco: unref short failure
[h264 @ 0x5635417f0a80] mmco: unref short failure
[h264 @ 0x5635417f0a80] mmco: unref short failure
[h264 @ 0x5635417f0a80] mmco: unref short failure
[h264 @ 0x5635417f0a80] mmco: unref short failure
[h264 @ 0x5556d3bb91c0] mmco: unref short failure
[h264 @ 0x5556d3bb91c0] mmco: unref short failure
[h264 @ 0x56354081fdc0] mmco: unref short failure
[h264 @ 0x56354c933980] mmco: unref short failure
[h264 @ 0x56354c933980] mmco: unref short failure
[h264 @ 0x563558cc45c0] mmco: unref short failure
[h264 @ 0x563558cc45c0] mmco: unref short failure
[h264 @ 0x563558cc45c0] mmco: unref short failure
[h264 @ 0x563558cc45c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:46,  2.06it/s][A[h264 @ 0x55771b10f540] mmco: unref short failure

  1%|          | 2/221 [00:01<01:50,  1.98it/s][A
  1%|▏         | 3/221 [00:01<01:12,  3.02it/s][A
  2%|▏         | 4/221 [00:01<00:54,  4.02it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.42it/s][A
  3%|▎         | 6/221 [00:01<00:44,  4.85it/s][A
  3%|▎         | 7/221 [00:01<00:47,  4.51it/s][A
  4%|▎         | 8/221 [00:02<01:16,  2.77it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:12,  2.91it/s][A
  5%|▍         | 11/221 [00:03<00:56,  3.69it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.41it/s][A
  6%|▌         | 13/221 [00:03<00:51,  4.03it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.26it/s][A
  7%|▋         | 15/221 [00:04<01:06,  3.11it/s][A
  7%|▋         | 16/221 [00:04<01:09,  2.95it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.24it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.36it/s][A
  9%|▊         | 19/221 [00:05<00:51,  3.94it/s][A
  9%|▉         | 20/221 [00:05<00:43,  4.59it/s][A
 10%|▉         | 21/221 [00:05<00:39,  5.04it/s][A
 10%|▉         | 22/221 [00:06<00:45,  4.33it/s][A
 10%|█         | 23/221 [00:06<00:39,  5.06it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.57it/s][A
 11%|█▏        | 25/221 [00:06<00:33,  5.82it/s][A
 12%|█▏        | 26/221 [00:06<00:39,  4.90it/s][A
 12%|█▏        | 27/221 [00:06<00:35,  5.48it/s][A
 13%|█▎        | 28/221 [00:07<00:54,  3.53it/s][A
 13%|█▎        | 29/221 [00:07<00:46,  4.16it/s][A
 14%|█▎        | 30/221 [00:07<00:42,  4.46it/s][A
 14%|█▍        | 31/221 [00:08<00:44,  4.31it/s][A
 14%|█▍        | 32/221 [00:08<00:42,  4.42it/s][A
 15%|█▍        | 33/221 [00:08<00:54,  3.46it/s][A
 15%|█▌        | 34/221 [00:08<00:44,  4.20it/s][A
 16%|█▌        | 35/221 [00:08<00:39,  4.75it/s][A
 16%|█▋        | 36/221 [00:09<00:42,  4.39it/s][A
 17%|█▋        | 37/221 [00:09<00:56,  3.26it/s][A
 17%|█▋        | 38/221 [00:10<00:58,  3.11it/s][A
 18%|█▊        | 40/221 [00:10<00:48,  3.73it/s][A
 19%|█▊        | 41/221 [00:10<00:43,  4.09it/s][A[h264 @ 0x5577263b3a00] mmco: unref short failure
[h264 @ 0x5577263b3a00] mmco: unref short failure

 19%|█▉        | 42/221 [00:11<01:09,  2.59it/s][A[h264 @ 0x5577263b3a00] mmco: unref short failure
[h264 @ 0x5577263b3a00] mmco: unref short failure

 19%|█▉        | 43/221 [00:11<00:56,  3.13it/s][A
 20%|█▉        | 44/221 [00:11<00:48,  3.68it/s][A
 20%|██        | 45/221 [00:12<01:30,  1.93it/s][A
 21%|██        | 46/221 [00:13<01:42,  1.70it/s][A
 21%|██▏       | 47/221 [00:14<02:18,  1.26it/s][A
 22%|██▏       | 48/221 [00:15<01:42,  1.68it/s][A
 22%|██▏       | 49/221 [00:15<01:20,  2.15it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.32it/s][A
 24%|██▎       | 52/221 [00:15<00:45,  3.75it/s][A
 24%|██▍       | 53/221 [00:15<00:43,  3.88it/s][A
 24%|██▍       | 54/221 [00:18<02:28,  1.13it/s][A
 25%|██▍       | 55/221 [00:18<02:08,  1.29it/s][A
 25%|██▌       | 56/221 [00:19<01:41,  1.63it/s][A
 26%|██▌       | 57/221 [00:19<01:26,  1.89it/s][A
 26%|██▌       | 58/221 [00:19<01:07,  2.42it/s][A
 27%|██▋       | 59/221 [00:19<00:53,  3.01it/s][h264 @ 0x5577280c6b80] mmco: unref short failure
[A
 27%|██▋       | 60/221 [00:20<00:58,  2.75it/s][A
 28%|██▊       | 61/221 [00:20<00:51,  3.12it/s][A
 28%|██▊       | 62/221 [00:20<00:48,  3.29it/s][A
 29%|██▊       | 63/221 [00:20<00:39,  4.01it/s][A
 29%|██▉       | 64/221 [00:20<00:33,  4.63it/s][A
 29%|██▉       | 65/221 [00:21<00:31,  4.90it/s][A
 30%|██▉       | 66/221 [00:21<00:55,  2.78it/s][A
 30%|███       | 67/221 [00:22<00:55,  2.79it/s][A
 31%|███       | 68/221 [00:22<00:47,  3.21it/s][A
 31%|███       | 69/221 [00:23<01:05,  2.32it/s][A
 32%|███▏      | 70/221 [00:23<00:52,  2.90it/s][A[h264 @ 0x5586392d2980] mmco: unref short failure
[h264 @ 0x5586392d2980] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:42,  1.48s/it][A
 33%|███▎      | 72/221 [00:27<02:47,  1.12s/it][A
 33%|███▎      | 73/221 [00:27<02:10,  1.13it/s][A
 33%|███▎      | 74/221 [00:28<01:39,  1.48it/s][A
 34%|███▍      | 75/221 [00:28<01:22,  1.76it/s][A
 34%|███▍      | 76/221 [00:28<01:05,  2.23it/s][A
 35%|███▍      | 77/221 [00:28<00:56,  2.57it/s][A
 35%|███▌      | 78/221 [00:29<00:48,  2.94it/s][A
 36%|███▌      | 79/221 [00:29<01:03,  2.23it/s][A
 36%|███▌      | 80/221 [00:30<00:58,  2.43it/s][A
 37%|███▋      | 81/221 [00:30<00:50,  2.79it/s][A
 37%|███▋      | 82/221 [00:30<00:44,  3.14it/s][A
 38%|███▊      | 83/221 [00:30<00:36,  3.80it/s][A
 38%|███▊      | 84/221 [00:30<00:29,  4.61it/s][A
 38%|███▊      | 85/221 [00:30<00:25,  5.35it/s][A
 39%|███▉      | 86/221 [00:31<00:26,  5.12it/s][A
 39%|███▉      | 87/221 [00:31<00:40,  3.33it/s][A
 40%|███▉      | 88/221 [00:32<00:42,  3.13it/s][A
 40%|████      | 89/221 [00:35<02:32,  1.16s/it][A
 41%|████      | 90/221 [00:35<01:58,  1.10it/s][A
 41%|████      | 91/221 [00:35<01:26,  1.50it/s][A
 42%|████▏     | 92/221 [00:35<01:07,  1.91it/s][A
 42%|████▏     | 93/221 [00:36<01:07,  1.89it/s][A[h264 @ 0x5556c6c86ec0] mmco: unref short failure
[h264 @ 0x5556c6c86ec0] mmco: unref short failure

 43%|████▎     | 94/221 [00:36<01:02,  2.03it/s][A
 43%|████▎     | 95/221 [00:36<00:52,  2.39it/s][A
 43%|████▎     | 96/221 [00:37<00:48,  2.58it/s][A
 44%|████▍     | 97/221 [00:37<00:38,  3.21it/s][A
 44%|████▍     | 98/221 [00:37<00:36,  3.33it/s][A
 45%|████▍     | 99/221 [00:37<00:31,  3.92it/s][A
 45%|████▌     | 100/221 [00:38<00:29,  4.16it/s][A
 46%|████▌     | 101/221 [00:38<00:29,  4.08it/s][A
 46%|████▌     | 102/221 [00:38<00:35,  3.34it/s][A
 47%|████▋     | 103/221 [00:39<00:34,  3.40it/s][A
 47%|████▋     | 104/221 [00:39<00:29,  3.96it/s][A
 48%|████▊     | 105/221 [00:39<00:30,  3.75it/s][A
 48%|████▊     | 106/221 [00:40<00:48,  2.36it/s][A
 48%|████▊     | 107/221 [00:40<00:39,  2.88it/s][A
 49%|████▉     | 108/221 [00:40<00:37,  3.00it/s][A
 49%|████▉     | 109/221 [00:41<00:36,  3.09it/s][A
 50%|████▉     | 110/221 [00:41<00:30,  3.62it/s][A
 50%|█████     | 111/221 [00:41<00:37,  2.93it/s][A
 51%|█████     | 112/221 [00:41<00:32,  3.39it/s][A
 51%|█████     | 113/221 [00:42<00:31,  3.45it/s][A
 52%|█████▏    | 115/221 [00:42<00:20,  5.05it/s][A
 52%|█████▏    | 116/221 [00:47<02:25,  1.39s/it][A
 53%|█████▎    | 117/221 [00:47<01:54,  1.10s/it][A
 53%|█████▎    | 118/221 [00:47<01:29,  1.15it/s][A
 54%|█████▍    | 119/221 [00:48<01:09,  1.46it/s][A
 54%|█████▍    | 120/221 [00:48<00:55,  1.83it/s][A
 55%|█████▍    | 121/221 [00:48<00:42,  2.37it/s][A
 55%|█████▌    | 122/221 [00:48<00:37,  2.67it/s][A
 56%|█████▌    | 123/221 [00:48<00:33,  2.94it/s][A
 56%|█████▌    | 124/221 [00:49<00:30,  3.19it/s][A
 57%|█████▋    | 125/221 [00:49<00:28,  3.31it/s][A
 57%|█████▋    | 126/221 [00:50<00:39,  2.40it/s][A
 57%|█████▋    | 127/221 [00:50<00:39,  2.40it/s][A
 58%|█████▊    | 128/221 [00:50<00:37,  2.48it/s][A
 58%|█████▊    | 129/221 [00:51<00:32,  2.85it/s][A
 59%|█████▉    | 130/221 [00:51<00:31,  2.89it/s][A
 59%|█████▉    | 131/221 [00:51<00:26,  3.43it/s][A
 60%|█████▉    | 132/221 [00:51<00:23,  3.74it/s][A
 60%|██████    | 133/221 [00:52<00:26,  3.35it/s][A
 61%|██████    | 134/221 [00:52<00:25,  3.48it/s][A[h264 @ 0x5556d3e0f340] mmco: unref short failure

 61%|██████    | 135/221 [00:52<00:28,  3.02it/s][A
 62%|██████▏   | 136/221 [00:53<00:29,  2.91it/s][A
 62%|██████▏   | 137/221 [00:53<00:29,  2.84it/s][A
 62%|██████▏   | 138/221 [00:54<00:30,  2.75it/s][A
 63%|██████▎   | 139/221 [00:54<00:32,  2.50it/s][A
 63%|██████▎   | 140/221 [00:54<00:29,  2.71it/s][A
 64%|██████▍   | 141/221 [00:55<00:25,  3.14it/s][A
 64%|██████▍   | 142/221 [00:55<00:28,  2.74it/s][A
 65%|██████▍   | 143/221 [00:56<00:33,  2.32it/s][A
 65%|██████▌   | 144/221 [00:56<00:30,  2.52it/s][A
 66%|██████▌   | 145/221 [00:56<00:25,  3.02it/s][A
 66%|██████▌   | 146/221 [00:56<00:22,  3.40it/s][A
 67%|██████▋   | 147/221 [00:57<00:19,  3.75it/s][A
 67%|██████▋   | 148/221 [00:57<00:19,  3.71it/s][A
 67%|██████▋   | 149/221 [00:57<00:15,  4.56it/s][A
 68%|██████▊   | 150/221 [00:57<00:15,  4.49it/s][A
 68%|██████▊   | 151/221 [00:58<00:31,  2.25it/s][A
 69%|██████▉   | 152/221 [00:59<00:32,  2.10it/s][A
 69%|██████▉   | 153/221 [00:59<00:28,  2.39it/s][A
 70%|██████▉   | 154/221 [01:00<00:31,  2.11it/s][A
 70%|███████   | 155/221 [01:00<00:25,  2.62it/s][A
 71%|███████   | 156/221 [01:00<00:20,  3.25it/s][A
 71%|███████   | 157/221 [01:04<01:31,  1.43s/it][A
 71%|███████▏  | 158/221 [01:04<01:06,  1.06s/it][A
 72%|███████▏  | 159/221 [01:04<00:49,  1.24it/s][A
 72%|███████▏  | 160/221 [01:04<00:37,  1.61it/s][A
 73%|███████▎  | 161/221 [01:05<00:28,  2.07it/s][A
 73%|███████▎  | 162/221 [01:05<00:27,  2.13it/s][A
 74%|███████▍  | 163/221 [01:05<00:24,  2.37it/s][A
 74%|███████▍  | 164/221 [01:06<00:19,  2.89it/s][A
 75%|███████▍  | 165/221 [01:06<00:16,  3.41it/s][A[h264 @ 0x563540d011c0] mmco: unref short failure

 75%|███████▌  | 166/221 [01:06<00:16,  3.32it/s][A
 76%|███████▌  | 167/221 [01:06<00:13,  3.97it/s][A[h264 @ 0x5556d3bb91c0] mmco: unref short failure

 76%|███████▌  | 168/221 [01:09<00:47,  1.12it/s][A
 76%|███████▋  | 169/221 [01:09<00:37,  1.39it/s][A
 77%|███████▋  | 170/221 [01:09<00:31,  1.61it/s][A
 77%|███████▋  | 171/221 [01:10<00:25,  1.96it/s][A
 78%|███████▊  | 172/221 [01:10<00:19,  2.51it/s][A
 78%|███████▊  | 173/221 [01:10<00:15,  3.07it/s][A
 79%|███████▊  | 174/221 [01:10<00:12,  3.83it/s][A
 79%|███████▉  | 175/221 [01:10<00:12,  3.81it/s][A
 80%|███████▉  | 176/221 [01:11<00:13,  3.32it/s][A
 81%|████████  | 178/221 [01:11<00:13,  3.28it/s][A
 81%|████████  | 179/221 [01:12<00:13,  3.02it/s][A
 82%|████████▏ | 181/221 [01:12<00:10,  3.82it/s][A
 82%|████████▏ | 182/221 [01:12<00:09,  4.29it/s][A
 83%|████████▎ | 183/221 [01:12<00:08,  4.55it/s][A
 83%|████████▎ | 184/221 [01:13<00:08,  4.12it/s][A
 84%|████████▎ | 185/221 [01:13<00:07,  4.80it/s][A
 84%|████████▍ | 186/221 [01:13<00:07,  4.53it/s][A
 85%|████████▍ | 187/221 [01:13<00:06,  5.17it/s][A
 85%|████████▌ | 188/221 [01:13<00:07,  4.70it/s][A
 86%|████████▌ | 189/221 [01:14<00:07,  4.30it/s][A
 86%|████████▌ | 190/221 [01:14<00:07,  3.98it/s][A
 86%|████████▋ | 191/221 [01:14<00:06,  4.78it/s][A
 87%|████████▋ | 192/221 [01:14<00:06,  4.22it/s][A
 87%|████████▋ | 193/221 [01:14<00:05,  5.02it/s][A
 88%|████████▊ | 194/221 [01:15<00:10,  2.58it/s][A
 88%|████████▊ | 195/221 [01:15<00:08,  3.17it/s][A
 89%|████████▊ | 196/221 [01:16<00:06,  3.72it/s][A
 89%|████████▉ | 197/221 [01:16<00:05,  4.15it/s][A
 90%|████████▉ | 198/221 [01:16<00:05,  4.44it/s][A
 90%|█████████ | 199/221 [01:16<00:04,  4.63it/s][A
 90%|█████████ | 200/221 [01:17<00:06,  3.45it/s][A
 91%|█████████ | 201/221 [01:17<00:05,  3.37it/s][A
 91%|█████████▏| 202/221 [01:17<00:05,  3.61it/s][A
 92%|█████████▏| 203/221 [01:17<00:05,  3.43it/s][A
 92%|█████████▏| 204/221 [01:18<00:04,  4.14it/s][A
 93%|█████████▎| 205/221 [01:18<00:03,  4.44it/s][A
 93%|█████████▎| 206/221 [01:18<00:03,  3.99it/s][A
 94%|█████████▍| 208/221 [01:18<00:02,  5.43it/s][A
 95%|█████████▌| 210/221 [01:18<00:01,  6.81it/s][A
 95%|█████████▌| 211/221 [01:19<00:02,  4.27it/s][A
 96%|█████████▌| 212/221 [01:19<00:01,  4.51it/s][A
 97%|█████████▋| 214/221 [01:20<00:02,  2.82it/s][A
 97%|█████████▋| 215/221 [01:21<00:01,  3.06it/s][A
 98%|█████████▊| 216/221 [01:21<00:01,  3.28it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  3.04it/s][A
 99%|█████████▊| 218/221 [01:22<00:01,  2.82it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.99it/s][A
100%|█████████▉| 220/221 [01:27<00:01,  1.58s/it][A
100%|██████████| 221/221 [01:27<00:00,  1.17s/it][A100%|██████████| 221/221 [01:27<00:00,  2.53it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.32it/s][A
  1%|          | 2/221 [00:00<01:07,  3.24it/s][A
  1%|▏         | 3/221 [00:00<01:11,  3.04it/s][A
  2%|▏         | 4/221 [00:01<01:09,  3.11it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.14it/s][A
  3%|▎         | 6/221 [00:01<01:07,  3.19it/s][A
  3%|▎         | 7/221 [00:02<01:07,  3.17it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.23it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.13it/s][A
  5%|▍         | 10/221 [00:03<01:05,  3.20it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.23it/s][A
  5%|▌         | 12/221 [00:03<01:06,  3.14it/s][A
  6%|▌         | 13/221 [00:04<01:04,  3.20it/s][A
  6%|▋         | 14/221 [00:04<01:04,  3.23it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.23it/s][A
  7%|▋         | 16/221 [00:05<01:05,  3.14it/s][A
  8%|▊         | 17/221 [00:05<01:04,  3.15it/s][A
  8%|▊         | 18/221 [00:05<01:03,  3.22it/s][A
  9%|▊         | 19/221 [00:05<01:02,  3.23it/s][A
  9%|▉         | 20/221 [00:06<01:01,  3.24it/s][A
 10%|▉         | 21/221 [00:06<01:01,  3.24it/s][A[h264 @ 0x5586362796c0] mmco: unref short failure
[h264 @ 0x5586362796c0] mmco: unref short failure

 10%|▉         | 22/221 [00:06<01:00,  3.28it/s][A
 10%|█         | 23/221 [00:07<01:01,  3.24it/s][A
 11%|█         | 24/221 [00:07<01:09,  2.85it/s][A
 11%|█▏        | 25/221 [00:07<01:06,  2.96it/s][A
 12%|█▏        | 26/221 [00:08<01:03,  3.08it/s][A
 12%|█▏        | 27/221 [00:08<01:01,  3.17it/s][A
 13%|█▎        | 28/221 [00:08<01:00,  3.19it/s][A
 13%|█▎        | 29/221 [00:09<01:00,  3.16it/s][A
 14%|█▎        | 30/221 [00:09<01:00,  3.15it/s][A
 14%|█▍        | 31/221 [00:09<00:59,  3.21it/s][A
 14%|█▍        | 32/221 [00:10<00:57,  3.27it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.31it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.27it/s][A
 16%|█▋        | 36/221 [00:11<00:56,  3.30it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.29it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.32it/s][A
 18%|█▊        | 39/221 [00:12<00:54,  3.34it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.33it/s][A
 19%|█▉        | 42/221 [00:13<00:53,  3.35it/s][A[h264 @ 0x55863a0791c0] mmco: unref short failure

 19%|█▉        | 43/221 [00:13<00:52,  3.37it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.33it/s][A09/17/2024 06:34:06 - INFO - __main__ -   current idx 4VH9UPwnHCQ.1 from finetune_area returns wrong image/video, use 49393 instead.

 21%|██        | 46/221 [00:14<00:52,  3.35it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.37it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.38it/s][A
 22%|██▏       | 49/221 [00:15<00:50,  3.39it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.37it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.38it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.38it/s][A
 24%|██▍       | 53/221 [00:16<00:49,  3.39it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.37it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.33it/s][A
 25%|██▌       | 56/221 [00:17<00:49,  3.31it/s][A
 26%|██▌       | 57/221 [00:17<00:50,  3.27it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:18<00:50,  3.24it/s][A
 27%|██▋       | 60/221 [00:18<00:49,  3.28it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.32it/s][A
 28%|██▊       | 62/221 [00:19<00:47,  3.34it/s][A
 29%|██▊       | 63/221 [00:19<00:47,  3.32it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.30it/s][A
 29%|██▉       | 65/221 [00:19<00:48,  3.25it/s][A
 30%|██▉       | 66/221 [00:20<00:47,  3.29it/s][A
 30%|███       | 67/221 [00:20<00:46,  3.32it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.35it/s][A
 31%|███       | 69/221 [00:21<00:45,  3.35it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.34it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.36it/s][A
 33%|███▎      | 72/221 [00:22<00:44,  3.32it/s][A
 33%|███▎      | 73/221 [00:22<00:44,  3.33it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.35it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.36it/s][A
 34%|███▍      | 76/221 [00:23<00:43,  3.37it/s][A
 35%|███▍      | 77/221 [00:23<00:42,  3.36it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.37it/s][A
 36%|███▌      | 79/221 [00:24<00:41,  3.38it/s][A
 36%|███▌      | 80/221 [00:24<00:41,  3.39it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.39it/s][A
 37%|███▋      | 82/221 [00:25<00:40,  3.40it/s][A
 38%|███▊      | 83/221 [00:25<00:40,  3.40it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.37it/s][A[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure

 38%|███▊      | 85/221 [00:25<00:40,  3.38it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.34it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.35it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.37it/s][A
 40%|████      | 89/221 [00:27<00:39,  3.38it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.39it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.39it/s][A
 42%|████▏     | 92/221 [00:27<00:38,  3.39it/s][A
 42%|████▏     | 93/221 [00:28<00:37,  3.40it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.40it/s][A
 43%|████▎     | 95/221 [00:28<00:37,  3.40it/s][A
 43%|████▎     | 96/221 [00:29<00:36,  3.40it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.40it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.40it/s][A
 45%|████▍     | 99/221 [00:30<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.41it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 103/221 [00:31<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 106/221 [00:32<00:33,  3.41it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.41it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.41it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.41it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.41it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 116/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.36it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.17it/s][A
  1%|          | 2/221 [00:00<00:49,  4.43it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.40it/s][A
  2%|▏         | 4/221 [00:00<00:48,  4.44it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.80it/s][A
  3%|▎         | 6/221 [00:01<00:39,  5.51it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.27it/s][A
  4%|▎         | 8/221 [00:01<00:59,  3.59it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.66it/s][A
  5%|▍         | 10/221 [00:02<00:50,  4.14it/s][A
  5%|▍         | 11/221 [00:02<00:57,  3.65it/s][A
  5%|▌         | 12/221 [00:02<00:53,  3.89it/s][A
  6%|▌         | 13/221 [00:03<01:38,  2.12it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.62it/s][A
  7%|▋         | 15/221 [00:04<01:19,  2.59it/s][A
  7%|▋         | 16/221 [00:04<01:16,  2.68it/s][A
  8%|▊         | 17/221 [00:05<01:21,  2.51it/s][A
  8%|▊         | 18/221 [00:05<01:15,  2.68it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.68it/s][A
 10%|▉         | 21/221 [00:06<00:46,  4.30it/s][A
 10%|▉         | 22/221 [00:06<00:44,  4.44it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.52it/s][A
 11%|█▏        | 25/221 [00:06<00:41,  4.67it/s][A
 12%|█▏        | 26/221 [00:07<00:44,  4.35it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  3.97it/s][A
 13%|█▎        | 28/221 [00:07<00:55,  3.50it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.30it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.46it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.47it/s][A
 14%|█▍        | 32/221 [00:08<00:54,  3.48it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.38it/s][A
 15%|█▌        | 34/221 [00:09<01:04,  2.89it/s][A
 16%|█▌        | 35/221 [00:10<01:04,  2.90it/s][A
 16%|█▋        | 36/221 [00:10<00:59,  3.13it/s][A
 17%|█▋        | 37/221 [00:10<00:54,  3.35it/s][A
 17%|█▋        | 38/221 [00:10<00:53,  3.44it/s][A
 18%|█▊        | 39/221 [00:11<00:50,  3.58it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.40it/s][A
 19%|█▊        | 41/221 [00:11<00:53,  3.36it/s][A
 19%|█▉        | 42/221 [00:11<00:49,  3.63it/s][A
 19%|█▉        | 43/221 [00:12<00:54,  3.27it/s][A
 20%|█▉        | 44/221 [00:12<00:55,  3.19it/s][A
 20%|██        | 45/221 [00:13<01:02,  2.81it/s][A
 21%|██        | 46/221 [00:13<00:56,  3.07it/s][A
 21%|██▏       | 47/221 [00:13<00:49,  3.49it/s][A
 22%|██▏       | 48/221 [00:13<00:41,  4.13it/s][A
 22%|██▏       | 49/221 [00:13<00:34,  4.97it/s][A
 23%|██▎       | 50/221 [00:14<00:38,  4.46it/s][A
 23%|██▎       | 51/221 [00:14<00:40,  4.25it/s][A
 24%|██▍       | 53/221 [00:14<00:39,  4.30it/s][A
 24%|██▍       | 54/221 [00:15<00:40,  4.11it/s][A
 25%|██▍       | 55/221 [00:15<00:46,  3.61it/s][A
 25%|██▌       | 56/221 [00:15<00:47,  3.46it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.37it/s][A
 26%|██▌       | 58/221 [00:16<00:39,  4.10it/s][A
 27%|██▋       | 59/221 [00:16<00:39,  4.05it/s][A
 27%|██▋       | 60/221 [00:16<00:37,  4.24it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.33it/s][A
 28%|██▊       | 62/221 [00:17<00:40,  3.92it/s][A
 29%|██▉       | 64/221 [00:17<00:33,  4.63it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.46it/s][A
 30%|██▉       | 66/221 [00:18<00:41,  3.77it/s][A
 30%|███       | 67/221 [00:18<00:48,  3.16it/s][A
 31%|███       | 68/221 [00:18<00:46,  3.33it/s][A
 31%|███       | 69/221 [00:19<01:00,  2.49it/s][A
 32%|███▏      | 70/221 [00:19<00:51,  2.94it/s][A
 32%|███▏      | 71/221 [00:20<00:54,  2.75it/s][A
 33%|███▎      | 72/221 [00:20<00:57,  2.57it/s][A
 33%|███▎      | 73/221 [00:20<00:51,  2.88it/s][A
 33%|███▎      | 74/221 [00:21<00:46,  3.19it/s][A
 34%|███▍      | 75/221 [00:21<00:43,  3.36it/s][A
 34%|███▍      | 76/221 [00:21<00:37,  3.83it/s][A
 35%|███▍      | 77/221 [00:21<00:33,  4.26it/s][A
 35%|███▌      | 78/221 [00:22<00:37,  3.79it/s][A
 36%|███▌      | 79/221 [00:22<00:38,  3.67it/s][A
 36%|███▌      | 80/221 [00:22<00:33,  4.25it/s][A
 37%|███▋      | 81/221 [00:22<00:33,  4.23it/s][A
 37%|███▋      | 82/221 [00:23<00:44,  3.16it/s][A
 38%|███▊      | 83/221 [00:23<00:35,  3.92it/s][A
 38%|███▊      | 84/221 [00:23<00:39,  3.48it/s][A
 38%|███▊      | 85/221 [00:24<00:45,  2.98it/s][A
 39%|███▉      | 86/221 [00:24<00:45,  2.99it/s][A
 39%|███▉      | 87/221 [00:25<00:54,  2.47it/s][A
 40%|███▉      | 88/221 [00:25<00:49,  2.70it/s][A
 40%|████      | 89/221 [00:25<00:50,  2.62it/s][A
 41%|████      | 90/221 [00:26<00:53,  2.43it/s][A
 41%|████      | 91/221 [00:26<00:44,  2.89it/s][A
 42%|████▏     | 92/221 [00:26<00:44,  2.88it/s][A
 42%|████▏     | 93/221 [00:27<00:50,  2.53it/s][A
 43%|████▎     | 94/221 [00:27<00:43,  2.95it/s][A
 43%|████▎     | 95/221 [00:28<00:51,  2.43it/s][A
 43%|████▎     | 96/221 [00:28<00:50,  2.47it/s][A
 44%|████▍     | 97/221 [00:28<00:45,  2.71it/s][A
 44%|████▍     | 98/221 [00:29<00:45,  2.72it/s][A
 45%|████▍     | 99/221 [00:29<00:41,  2.95it/s][A
 45%|████▌     | 100/221 [00:29<00:34,  3.47it/s][A
 46%|████▌     | 101/221 [00:29<00:30,  3.94it/s][A
 46%|████▌     | 102/221 [00:30<00:32,  3.65it/s][A
 47%|████▋     | 103/221 [00:30<00:32,  3.63it/s][A
 47%|████▋     | 104/221 [00:30<00:26,  4.43it/s][A
 48%|████▊     | 105/221 [00:30<00:29,  3.88it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.44it/s][A
 48%|████▊     | 107/221 [00:31<00:29,  3.87it/s][A
 49%|████▉     | 108/221 [00:31<00:27,  4.15it/s][A
 49%|████▉     | 109/221 [00:31<00:26,  4.15it/s][A
 50%|████▉     | 110/221 [00:31<00:27,  4.06it/s][A
 50%|█████     | 111/221 [00:32<00:30,  3.60it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.47it/s][A
 51%|█████     | 113/221 [00:32<00:30,  3.51it/s][A
 52%|█████▏    | 114/221 [00:33<00:24,  4.32it/s][A
 52%|█████▏    | 115/221 [00:33<00:21,  4.84it/s][A
 52%|█████▏    | 116/221 [00:33<00:22,  4.63it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.24it/s][A
 53%|█████▎    | 118/221 [00:34<00:29,  3.54it/s][A
 54%|█████▍    | 119/221 [00:34<00:33,  3.07it/s][A
 54%|█████▍    | 120/221 [00:34<00:34,  2.94it/s][A
 55%|█████▍    | 121/221 [00:35<00:31,  3.23it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.52it/s][A
 56%|█████▌    | 123/221 [00:35<00:29,  3.35it/s][A
 56%|█████▌    | 124/221 [00:36<00:33,  2.91it/s][A
 57%|█████▋    | 125/221 [00:36<00:39,  2.43it/s][A
 57%|█████▋    | 126/221 [00:36<00:34,  2.78it/s][A
 57%|█████▋    | 127/221 [00:37<00:38,  2.45it/s][A
 58%|█████▊    | 128/221 [00:37<00:32,  2.87it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.35it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.52it/s][A
 59%|█████▉    | 131/221 [00:38<00:25,  3.53it/s][A
 60%|█████▉    | 132/221 [00:38<00:26,  3.36it/s][A
 60%|██████    | 133/221 [00:39<00:30,  2.89it/s][A
 61%|██████    | 134/221 [00:39<00:35,  2.44it/s][A
 61%|██████    | 135/221 [00:39<00:28,  2.98it/s][A
 62%|██████▏   | 136/221 [00:40<00:28,  2.99it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.37it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.60it/s][A
 63%|██████▎   | 139/221 [00:41<00:25,  3.27it/s][A
 63%|██████▎   | 140/221 [00:41<00:22,  3.63it/s][A
 64%|██████▍   | 141/221 [00:41<00:27,  2.90it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.34it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.28it/s][A
 65%|██████▌   | 144/221 [00:42<00:19,  3.94it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.37it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.49it/s][A
 67%|██████▋   | 147/221 [00:43<00:17,  4.13it/s][A
 67%|██████▋   | 148/221 [00:43<00:20,  3.48it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.75it/s][A
 68%|██████▊   | 150/221 [00:44<00:18,  3.77it/s][A
 68%|██████▊   | 151/221 [00:44<00:23,  2.93it/s][A
 69%|██████▉   | 152/221 [00:45<00:35,  1.93it/s][A
 69%|██████▉   | 153/221 [00:45<00:29,  2.27it/s][A
 70%|██████▉   | 154/221 [00:46<00:26,  2.54it/s][A
 70%|███████   | 155/221 [00:46<00:25,  2.59it/s][A
 71%|███████   | 156/221 [00:46<00:20,  3.10it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.36it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.14it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.81it/s][A
 73%|███████▎  | 161/221 [00:47<00:13,  4.55it/s][A
 73%|███████▎  | 162/221 [00:47<00:11,  5.03it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.73it/s][A
 74%|███████▍  | 164/221 [00:48<00:10,  5.19it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.26it/s][A
 75%|███████▌  | 166/221 [00:49<00:15,  3.58it/s][A
 76%|███████▌  | 167/221 [00:49<00:13,  4.09it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  4.00it/s][A
 77%|███████▋  | 170/221 [00:50<00:15,  3.31it/s][A
 77%|███████▋  | 171/221 [00:50<00:17,  2.92it/s][A
 78%|███████▊  | 172/221 [00:50<00:16,  2.96it/s][A
 78%|███████▊  | 173/221 [00:51<00:16,  2.86it/s][A
 79%|███████▊  | 174/221 [00:51<00:15,  3.07it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  2.88it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.45it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.56it/s][A
 81%|████████  | 178/221 [00:53<00:18,  2.35it/s][A
 81%|████████  | 179/221 [00:53<00:15,  2.66it/s][A
 81%|████████▏ | 180/221 [00:53<00:12,  3.26it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.80it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.00it/s][A
 83%|████████▎ | 183/221 [00:54<00:12,  2.98it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.03it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.80it/s][A
 84%|████████▍ | 186/221 [00:55<00:11,  2.95it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.60it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.30it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.64it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.19it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.64it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  3.99it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.95it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.69it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.51it/s][A
 89%|████████▊ | 196/221 [00:58<00:08,  2.80it/s][A
 89%|████████▉ | 197/221 [00:59<00:09,  2.48it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.56it/s][A
 90%|█████████ | 199/221 [00:59<00:07,  3.00it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.28it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.78it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.49it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.70it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.48it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.21it/s][A
 93%|█████████▎| 206/221 [01:01<00:06,  2.44it/s][A
 94%|█████████▎| 207/221 [01:02<00:05,  2.72it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.31it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.47it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.38it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.75it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.65it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.75it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.91it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  3.01it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.87it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.13it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.31it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.12it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.45it/s][A
100%|██████████| 221/221 [01:06<00:00,  2.91it/s][A100%|██████████| 221/221 [01:06<00:00,  3.33it/s]
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'area_r1': 38.8, 'area_recall': '38.8/65.6/75.0', 'area_ravg': 59.8}
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'forward_r1': 38.2, 'forward_recall': '38.2/67.9/77.3', 'forward_ravg': 61.1}
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'area_video_r1': 38.7, 'area_video_recall': '38.7/68.8/78.6', 'area_video_ravg': 62.0}
09/17/2024 06:36:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 06:36:06 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/75.8/82.5', 'area_video_ravg': 70.2, 'area_video_back_r1': 49.1, 'area_video_back_recall': '49.1/74.2/82.4', 'area_video_back_ravg': 68.6}
09/17/2024 06:36:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 06:36:06 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'video_r1': 36.8, 'video_recall': '36.8/64.0/75.0', 'video_ravg': 58.6}
09/17/2024 06:36:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 949=======

09/17/2024 06:36:06 - INFO - __main__ -   {'video_r1': 37.4, 'video_recall': '37.4/65.0/75.3', 'video_ravg': 59.3}
09/17/2024 06:36:06 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1049--===========

09/17/2024 06:36:06 - INFO - __main__ -   {'video_r1': 51.5, 'video_recall': '51.5/75.1/81.3', 'video_ravg': 69.3}
09/17/2024 06:36:06 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 06:36:06 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 06:36:26 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007175919599831104, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0515592098236084, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.293578624725342, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.352313756942749}
 36%|███▌      | 1050/2910 [6:40:30<68:56:09, 133.42s/it] 36%|███▌      | 1051/2910 [6:40:34<48:50:29, 94.58s/it] [h264 @ 0x55864aadadc0] mmco: unref short failure
[h264 @ 0x55864aadadc0] mmco: unref short failure
 36%|███▌      | 1052/2910 [6:40:38<34:50:27, 67.51s/it][h264 @ 0x563540d011c0] mmco: unref short failure
 36%|███▌      | 1053/2910 [6:40:43<25:08:07, 48.73s/it][h264 @ 0x5577255c6540] mmco: unref short failure
 36%|███▌      | 1054/2910 [6:40:49<18:26:54, 35.78s/it][h264 @ 0x55863e72d600] mmco: unref short failure
[h264 @ 0x55863e72d600] mmco: unref short failure
 36%|███▋      | 1055/2910 [6:40:55<13:48:10, 26.79s/it][h264 @ 0x55863e72d600] mmco: unref short failure
[h264 @ 0x55863e72d600] mmco: unref short failure
 36%|███▋      | 1056/2910 [6:41:01<10:33:11, 20.49s/it] 36%|███▋      | 1057/2910 [6:41:07<8:25:44, 16.38s/it]  36%|███▋      | 1058/2910 [6:41:14<6:51:51, 13.34s/it][h264 @ 0x55864835e700] mmco: unref short failure
[h264 @ 0x5556c673bb40] mmco: unref short failure
 36%|███▋      | 1059/2910 [6:41:20<5:48:47, 11.31s/it] 36%|███▋      | 1060/2910 [6:41:27<5:03:45,  9.85s/it] 36%|███▋      | 1061/2910 [6:41:33<4:32:13,  8.83s/it] 36%|███▋      | 1062/2910 [6:41:40<4:17:21,  8.36s/it] 37%|███▋      | 1063/2910 [6:41:48<4:07:41,  8.05s/it] 37%|███▋      | 1064/2910 [6:41:54<3:50:12,  7.48s/it][h264 @ 0x5577311b5e80] mmco: unref short failure
[h264 @ 0x5556e17a8d00] mmco: unref short failure
[h264 @ 0x5556e17a8d00] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
 37%|███▋      | 1065/2910 [6:42:00<3:37:46,  7.08s/it][h264 @ 0x55863e843040] mmco: unref short failure
[h264 @ 0x56354c7fee80] mmco: unref short failure
[h264 @ 0x56354c7fee80] mmco: unref short failure
[h264 @ 0x55864a97e840] mmco: unref short failure
[h264 @ 0x55864a97e840] mmco: unref short failure
[h264 @ 0x563545747e40] mmco: unref short failure
 37%|███▋      | 1066/2910 [6:42:35<7:56:36, 15.51s/it][h264 @ 0x5556d3bb91c0] mmco: unref short failure
[h264 @ 0x5556d3bb91c0] mmco: unref short failure
09/17/2024 06:38:42 - INFO - __main__ -   current idx EDyva2crZas.40 from finetune_area returns wrong image/video, use 47057 instead.
[h264 @ 0x5556d1009080] mmco: unref short failure
[h264 @ 0x5556d1009080] mmco: unref short failure
[h264 @ 0x56355cd76000] mmco: unref short failure
[h264 @ 0x56355cd76000] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x5556d8c5b580] mmco: unref short failure
[h264 @ 0x5556d8c5b580] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x563557ed6600] mmco: unref short failure
[h264 @ 0x563557ed6600] mmco: unref short failure
 37%|███▋      | 1067/2910 [6:42:56<8:49:03, 17.22s/it][h264 @ 0x563545a771c0] mmco: unref short failure
[h264 @ 0x563545a771c0] mmco: unref short failure
 37%|███▋      | 1068/2910 [6:43:04<7:18:33, 14.29s/it][h264 @ 0x5556d3bb91c0] mmco: unref short failure
[h264 @ 0x5556d3bb91c0] mmco: unref short failure
 37%|███▋      | 1069/2910 [6:43:17<7:07:14, 13.92s/it][h264 @ 0x563550efc900] mmco: unref short failure
 37%|███▋      | 1070/2910 [6:43:30<6:59:41, 13.69s/it][h264 @ 0x557724343740] mmco: unref short failure
[h264 @ 0x557724343740] mmco: unref short failure
[h264 @ 0x557724343740] mmco: unref short failure
[h264 @ 0x557724343740] mmco: unref short failure
 37%|███▋      | 1071/2910 [6:43:37<5:54:06, 11.55s/it][h264 @ 0x55864735e440] mmco: unref short failure
[h264 @ 0x55864735e440] mmco: unref short failure
 37%|███▋      | 1072/2910 [6:43:43<5:11:12, 10.16s/it][h264 @ 0x56354c933980] mmco: unref short failure
 37%|███▋      | 1073/2910 [6:43:50<4:38:55,  9.11s/it][h264 @ 0x55772871ce80] mmco: unref short failure
[h264 @ 0x55772871ce80] mmco: unref short failure
[h264 @ 0x55772871ce80] mmco: unref short failure
[h264 @ 0x55772871ce80] mmco: unref short failure
[h264 @ 0x55771adf5e40] mmco: unref short failure
[h264 @ 0x55771adf5e40] mmco: unref short failure
[h264 @ 0x5556d3ba2740] mmco: unref short failure
[h264 @ 0x5556d3ba2740] mmco: unref short failure
[h264 @ 0x5577222b8d00] mmco: unref short failure
[h264 @ 0x5577222b8d00] mmco: unref short failure
[h264 @ 0x5577222b8d00] mmco: unref short failure
[h264 @ 0x5577222b8d00] mmco: unref short failure
[h264 @ 0x5576df408340] mmco: unref short failure
[h264 @ 0x557730febf00] mmco: unref short failure
[h264 @ 0x55771a36c280] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5586338d9200] mmco: unref short failure
[h264 @ 0x5577331255c0] mmco: unref short failure
[h264 @ 0x5577331255c0] mmco: unref short failure
[h264 @ 0x55771a36c280] mmco: unref short failure
[h264 @ 0x55771a36c280] mmco: unref short failure
[h264 @ 0x55771a36c280] mmco: unref short failure
[h264 @ 0x55771a36c280] mmco: unref short failure
[h264 @ 0x563548d90040] mmco: unref short failure
[h264 @ 0x563548d90040] mmco: unref short failure
[h264 @ 0x5556e1a48980] mmco: unref short failure
[h264 @ 0x55863e96c1c0] mmco: unref short failure
[h264 @ 0x55863e96c1c0] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
[h264 @ 0x563554391f80] mmco: unref short failure
[h264 @ 0x558631b48dc0] mmco: unref short failure
[h264 @ 0x558631b48dc0] mmco: unref short failure
 37%|███▋      | 1074/2910 [6:45:11<15:37:53, 30.65s/it][h264 @ 0x5556d1046a00] mmco: unref short failure
[h264 @ 0x5556e17a8d00] mmco: unref short failure
[h264 @ 0x5556e17a8d00] mmco: unref short failure
[h264 @ 0x56355b2ba640] mmco: unref short failure
 37%|███▋      | 1075/2910 [6:45:26<13:17:06, 26.06s/it][h264 @ 0x55771f5c7740] mmco: unref short failure
[h264 @ 0x55771f5c7740] mmco: unref short failure
[h264 @ 0x55771f5c7740] mmco: unref short failure
 37%|███▋      | 1076/2910 [6:45:38<11:04:26, 21.74s/it][h264 @ 0x5556ca70b240] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
[h264 @ 0x55863ed8e0c0] mmco: unref short failure
 37%|███▋      | 1077/2910 [6:45:50<9:33:53, 18.79s/it] [h264 @ 0x56354081fdc0] mmco: unref short failure
[h264 @ 0x558632501e80] mmco: unref short failure
 37%|███▋      | 1078/2910 [6:45:57<7:48:56, 15.36s/it][h264 @ 0x5556d6a1ad40] mmco: unref short failure
[h264 @ 0x5556d6a1ad40] mmco: unref short failure
[h264 @ 0x55773aa937c0] mmco: unref short failure
[h264 @ 0x55773aa937c0] mmco: unref short failure
 37%|███▋      | 1079/2910 [6:46:04<6:25:50, 12.64s/it]09/17/2024 06:42:04 - INFO - __main__ -   current idx KPOxRziYDzs.2 from finetune_area returns wrong image/video, use 39168 instead.
[h264 @ 0x5556d67f8480] mmco: unref short failure
 37%|███▋      | 1080/2910 [6:46:10<5:29:49, 10.81s/it][h264 @ 0x563560647200] mmco: unref short failure
09/17/2024 06:42:15 - INFO - __main__ -   current idx JOgG5komufg.1 from finetune_area returns wrong image/video, use 71036 instead.
[h264 @ 0x558651cef700] mmco: unref short failure
 37%|███▋      | 1081/2910 [6:46:17<4:55:40,  9.70s/it][h264 @ 0x56354081fdc0] mmco: unref short failure
[h264 @ 0x56354081fdc0] mmco: unref short failure
[h264 @ 0x56354081fdc0] mmco: unref short failure
[h264 @ 0x558632fdffc0] mmco: unref short failure
[h264 @ 0x558632fdffc0] mmco: unref short failure
[h264 @ 0x5556e1a48980] mmco: unref short failure
[h264 @ 0x55864bb36d80] mmco: unref short failure
[h264 @ 0x56355d7f28c0] mmco: unref short failure
[h264 @ 0x56355d7f28c0] mmco: unref short failure
[h264 @ 0x558637910c00] mmco: unref short failure
[h264 @ 0x558637910c00] mmco: unref short failure
[h264 @ 0x558632094ac0] mmco: unref short failure
09/17/2024 06:43:19 - INFO - __main__ -   current idx BdXk2SoCZnM.55 from finetune_area returns wrong image/video, use 34045 instead.
[h264 @ 0x5576dee54a80] mmco: unref short failure
[h264 @ 0x5576dee54a80] mmco: unref short failure
 37%|███▋      | 1082/2910 [6:47:42<16:20:00, 32.17s/it][h264 @ 0x558631e7ba00] mmco: unref short failure
[h264 @ 0x5576df069580] mmco: unref short failure
[h264 @ 0x55863cefb380] mmco: unref short failure
[h264 @ 0x55863cefb380] mmco: unref short failure
[h264 @ 0x55568d63b140] mmco: unref short failure
[h264 @ 0x55568d63b140] mmco: unref short failure
[h264 @ 0x558639fbb940] mmco: unref short failure
[h264 @ 0x558639fbb940] mmco: unref short failure
 37%|███▋      | 1083/2910 [6:48:02<14:31:52, 28.63s/it]09/17/2024 06:44:01 - INFO - __main__ -   current idx gRQlnvFSOjM.28 from finetune_area returns wrong image/video, use 81051 instead.
[h264 @ 0x5577286f2a40] mmco: unref short failure
[h264 @ 0x5577286f2a40] mmco: unref short failure
[h264 @ 0x5577286f2a40] mmco: unref short failure
 37%|███▋      | 1084/2910 [6:48:09<11:11:55, 22.08s/it] 37%|███▋      | 1085/2910 [6:48:17<8:59:52, 17.75s/it] [h264 @ 0x5556d586d640] mmco: unref short failure
[h264 @ 0x5556d586d640] mmco: unref short failure
 37%|███▋      | 1086/2910 [6:48:23<7:19:34, 14.46s/it][h264 @ 0x563554969900] mmco: unref short failure
 37%|███▋      | 1087/2910 [6:48:32<6:24:01, 12.64s/it] 37%|███▋      | 1088/2910 [6:48:41<5:49:49, 11.52s/it][h264 @ 0x5556e03ccc80] mmco: unref short failure
[h264 @ 0x5556e03ccc80] mmco: unref short failure
[h264 @ 0x55864f5904c0] mmco: unref short failure
[h264 @ 0x55772397c780] mmco: unref short failure
[h264 @ 0x563543655640] mmco: unref short failure
[h264 @ 0x563543655640] mmco: unref short failure
[h264 @ 0x563543655640] mmco: unref short failure
 37%|███▋      | 1089/2910 [6:48:56<6:25:46, 12.71s/it][h264 @ 0x557729a12480] mmco: unref short failure
[h264 @ 0x557729a12480] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x558639fbb940] mmco: unref short failure
[h264 @ 0x558639fbb940] mmco: unref short failure
[h264 @ 0x5556c7efd680] mmco: unref short failure
[h264 @ 0x5556c7efd680] mmco: unref short failure
[h264 @ 0x5586362796c0] mmco: unref short failure
[h264 @ 0x56355bfd1c00] mmco: unref short failure
[h264 @ 0x563552c7f980] mmco: unref short failure
[h264 @ 0x55772d263780] mmco: unref short failure
[h264 @ 0x55772d263780] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x5556d5181140] mmco: unref short failure
[h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x557717845ac0] mmco: unref short failure
[h264 @ 0x5556c5704bc0] mmco: unref short failure
[h264 @ 0x5577198d9f00] mmco: unref short failure
[h264 @ 0x55568c17cf40] mmco: unref short failure
[h264 @ 0x55568c17cf40] mmco: unref short failure
[h264 @ 0x557731779980] mmco: unref short failure
[h264 @ 0x557731779980] mmco: unref short failure
 37%|███▋      | 1090/2910 [6:50:13<16:11:53, 32.04s/it][h264 @ 0x5556e0dd4a40] mmco: unref short failure
09/17/2024 06:46:14 - INFO - __main__ -   current idx JLcL4VGOk3o.15 from finetune_area returns wrong image/video, use 148036 instead.
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
 37%|███▋      | 1091/2910 [6:50:25<13:10:23, 26.07s/it][h264 @ 0x5635528970c0] mmco: unref short failure
[h264 @ 0x55568c54d7c0] mmco: unref short failure
[h264 @ 0x55568c54d7c0] mmco: unref short failure
[h264 @ 0x56354ccd6300] mmco: unref short failure
[h264 @ 0x56354ccd6300] mmco: unref short failure
 38%|███▊      | 1092/2910 [6:50:44<11:58:44, 23.72s/it][h264 @ 0x5556c752bd00] mmco: unref short failure
[h264 @ 0x558642f93600] mmco: unref short failure
[h264 @ 0x56354ad89c00] mmco: unref short failure
[h264 @ 0x56354ad89c00] mmco: unref short failure
 38%|███▊      | 1093/2910 [6:50:51<9:26:11, 18.70s/it] [h264 @ 0x557728c30bc0] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x5556dd002880] mmco: unref short failure
[h264 @ 0x55771b6ccc00] mmco: unref short failure
[h264 @ 0x55771b6ccc00] mmco: unref short failure
 38%|███▊      | 1094/2910 [6:50:57<7:34:32, 15.02s/it][h264 @ 0x5586473a5680] mmco: unref short failure
[h264 @ 0x5586473a5680] mmco: unref short failure
 38%|███▊      | 1095/2910 [6:51:07<6:44:22, 13.37s/it][h264 @ 0x56355a6d0740] mmco: unref short failure
[h264 @ 0x56355a6d0740] mmco: unref short failure
 38%|███▊      | 1096/2910 [6:51:13<5:38:20, 11.19s/it][h264 @ 0x5556c5704bc0] mmco: unref short failure
[h264 @ 0x5556c5704bc0] mmco: unref short failure
 38%|███▊      | 1097/2910 [6:51:27<6:06:41, 12.14s/it][h264 @ 0x5586473a5680] mmco: unref short failure
[h264 @ 0x5586473a5680] mmco: unref short failure
[h264 @ 0x5556dd002880] mmco: unref short failure
[h264 @ 0x5556dd002880] mmco: unref short failure
[h264 @ 0x56355a6d0740] mmco: unref short failure
[h264 @ 0x56355a6d0740] mmco: unref short failure
[h264 @ 0x5586473a5680] mmco: unref short failure
[h264 @ 0x5586473a5680] mmco: unref short failure
[h264 @ 0x55864bb4be40] mmco: unref short failure
09/17/2024 06:47:51 - INFO - __main__ -   current idx kZsPqzB36mk.13 from finetune_area returns wrong image/video, use 48396 instead.
[h264 @ 0x55771aa3cb80] mmco: unref short failure
[h264 @ 0x5576de9fa980] mmco: unref short failure
[h264 @ 0x5576de9fa980] mmco: unref short failure
[h264 @ 0x557723fbf0c0] mmco: unref short failure
[h264 @ 0x557723fbf0c0] mmco: unref short failure
[h264 @ 0x5635417f0a80] mmco: unref short failure
[h264 @ 0x55771fc0c180] mmco: unref short failure
[h264 @ 0x55864b9dde40] mmco: unref short failure
[h264 @ 0x55864b9dde40] mmco: unref short failure
[h264 @ 0x55863385bb00] mmco: unref short failure
[h264 @ 0x55863385bb00] mmco: unref short failure
[h264 @ 0x55863385bb00] mmco: unref short failure
[h264 @ 0x55863385bb00] mmco: unref short failure
[h264 @ 0x56354ccd6300] mmco: unref short failure
[h264 @ 0x5556d77ad8c0] mmco: unref short failure
[h264 @ 0x5556d77ad8c0] mmco: unref short failure
[h264 @ 0x5556c492cac0] mmco: unref short failure
[h264 @ 0x5556c492cac0] mmco: unref short failure
[h264 @ 0x558632094ac0] mmco: unref short failure
[h264 @ 0x558632094ac0] mmco: unref short failure
[h264 @ 0x558632094ac0] mmco: unref short failure
[h264 @ 0x558632094ac0] mmco: unref short failure
 38%|███▊      | 1098/2910 [6:52:41<15:24:46, 30.62s/it][h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x558631e7ba00] mmco: unref short failure
 38%|███▊      | 1099/2910 [6:53:04<14:19:35, 28.48s/it]09/17/2024 06:49:03 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 06:49:03 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556c680b280] mmco: unref short failure
[h264 @ 0x5556c680b280] mmco: unref short failure
[h264 @ 0x5576df8b9380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5577252dc100] mmco: unref short failure
[h264 @ 0x5577252dc100] mmco: unref short failure
[h264 @ 0x5556dd437140] mmco: unref short failure
[h264 @ 0x5576dffac800] mmco: unref short failure
[h264 @ 0x5576dffac800] mmco: unref short failure
[h264 @ 0x5556e1a48980] mmco: unref short failure
[h264 @ 0x5556e1a48980] mmco: unref short failure
[h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x55771bd74dc0] mmco: unref short failure
[h264 @ 0x55864bb4be40] mmco: unref short failure
[h264 @ 0x55863db19180] mmco: unref short failure
09/17/2024 06:51:07 - INFO - __main__ -   current idx c0na5aaBMBE.58 from finetune_area returns wrong image/video, use 32605 instead.
[h264 @ 0x563548d90040] mmco: unref short failure
[h264 @ 0x56355445c380] mmco: unref short failure
[h264 @ 0x56355445c380] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:37,  2.25it/s][A
  1%|          | 2/221 [00:00<01:49,  1.99it/s][A
  1%|▏         | 3/221 [00:01<01:20,  2.70it/s][A
  2%|▏         | 4/221 [00:01<00:59,  3.66it/s][A
  2%|▏         | 5/221 [00:01<00:57,  3.76it/s][A
  3%|▎         | 6/221 [00:01<00:51,  4.18it/s][A[h264 @ 0x563550efc900] mmco: unref short failure
[h264 @ 0x563550efc900] mmco: unref short failure

  3%|▎         | 7/221 [00:02<00:53,  3.97it/s][A
  4%|▎         | 8/221 [00:02<01:25,  2.51it/s][A
  4%|▍         | 9/221 [00:02<01:09,  3.04it/s][A
  5%|▍         | 10/221 [00:03<01:20,  2.61it/s][A
  5%|▍         | 11/221 [00:03<01:10,  2.97it/s][A
  5%|▌         | 12/221 [00:04<01:16,  2.73it/s][A
  6%|▌         | 13/221 [00:04<01:01,  3.40it/s][A
  6%|▋         | 14/221 [00:04<01:20,  2.57it/s][A
  7%|▋         | 15/221 [00:05<01:12,  2.84it/s][A
  7%|▋         | 16/221 [00:05<01:07,  3.03it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.38it/s][A
  8%|▊         | 18/221 [00:05<00:56,  3.58it/s][A
  9%|▊         | 19/221 [00:06<00:54,  3.68it/s][A[h264 @ 0x55772397c780] mmco: unref short failure

  9%|▉         | 20/221 [00:06<00:57,  3.49it/s][A
 10%|▉         | 21/221 [00:06<00:47,  4.18it/s][A
 10%|▉         | 22/221 [00:06<00:50,  3.98it/s][A
 11%|█         | 24/221 [00:07<00:36,  5.35it/s][A
 11%|█▏        | 25/221 [00:07<00:34,  5.63it/s][A
 12%|█▏        | 26/221 [00:07<00:42,  4.60it/s][A
 13%|█▎        | 28/221 [00:08<00:47,  4.10it/s][A
 13%|█▎        | 29/221 [00:08<00:48,  3.99it/s][A
 14%|█▎        | 30/221 [00:08<00:45,  4.24it/s][A
 14%|█▍        | 31/221 [00:08<00:39,  4.83it/s][A
 15%|█▍        | 33/221 [00:09<00:44,  4.22it/s][A
 16%|█▌        | 35/221 [00:09<00:35,  5.29it/s][A
 16%|█▋        | 36/221 [00:09<00:37,  4.94it/s][A[h264 @ 0x5556cda62400] mmco: unref short failure

 17%|█▋        | 37/221 [00:10<00:49,  3.75it/s][A
 17%|█▋        | 38/221 [00:10<00:48,  3.74it/s][A
 18%|█▊        | 39/221 [00:10<00:41,  4.36it/s][A
 18%|█▊        | 40/221 [00:10<00:44,  4.10it/s][A
 19%|█▊        | 41/221 [00:10<00:38,  4.71it/s][A
 19%|█▉        | 42/221 [00:11<01:06,  2.71it/s][A
 19%|█▉        | 43/221 [00:11<00:52,  3.37it/s][A
 20%|█▉        | 44/221 [00:12<00:43,  4.11it/s][A
 20%|██        | 45/221 [00:13<01:45,  1.67it/s][A
 21%|██        | 46/221 [00:14<02:00,  1.46it/s][A
 21%|██▏       | 47/221 [00:15<02:26,  1.19it/s][A
 22%|██▏       | 48/221 [00:15<01:52,  1.54it/s][A
 22%|██▏       | 49/221 [00:15<01:28,  1.94it/s][A
 23%|██▎       | 50/221 [00:16<01:14,  2.31it/s][A
 23%|██▎       | 51/221 [00:16<00:57,  2.97it/s][A
 24%|██▎       | 52/221 [00:16<00:45,  3.70it/s][A
 24%|██▍       | 53/221 [00:16<00:40,  4.17it/s][A
 24%|██▍       | 54/221 [00:18<02:23,  1.16it/s][A
 25%|██▍       | 55/221 [00:19<01:59,  1.39it/s][A
 25%|██▌       | 56/221 [00:19<01:34,  1.75it/s][A
 26%|██▌       | 57/221 [00:19<01:22,  1.99it/s][A
 26%|██▌       | 58/221 [00:19<01:04,  2.54it/s][A
 27%|██▋       | 59/221 [00:20<00:53,  3.06it/s][A
 27%|██▋       | 60/221 [00:20<00:59,  2.71it/s][A
 28%|██▊       | 61/221 [00:20<00:52,  3.06it/s][A
 28%|██▊       | 62/221 [00:21<00:44,  3.54it/s][A
 29%|██▊       | 63/221 [00:21<00:38,  4.15it/s][A
 29%|██▉       | 64/221 [00:21<00:33,  4.74it/s][A
 29%|██▉       | 65/221 [00:21<00:31,  5.01it/s][A
 30%|██▉       | 66/221 [00:22<00:50,  3.04it/s][A
 30%|███       | 67/221 [00:22<00:51,  3.01it/s][A
 31%|███       | 68/221 [00:22<00:49,  3.06it/s][A
 31%|███       | 69/221 [00:23<01:08,  2.21it/s][A
 32%|███▏      | 70/221 [00:23<00:53,  2.83it/s][A[h264 @ 0x563552ae87c0] mmco: unref short failure
[h264 @ 0x563552ae87c0] mmco: unref short failure
[h264 @ 0x563552ae87c0] mmco: unref short failure
[h264 @ 0x563552ae87c0] mmco: unref short failure
[h264 @ 0x5556d2301d40] mmco: unref short failure
[h264 @ 0x5556d2301d40] mmco: unref short failure
[h264 @ 0x557717bfdac0] mmco: unref short failure

 32%|███▏      | 71/221 [00:28<04:00,  1.60s/it][A
 33%|███▎      | 72/221 [00:28<02:57,  1.19s/it][A
 33%|███▎      | 73/221 [00:28<02:17,  1.07it/s][A
 33%|███▎      | 74/221 [00:28<01:42,  1.44it/s][A
 34%|███▍      | 75/221 [00:29<01:22,  1.77it/s][A
 34%|███▍      | 76/221 [00:29<01:07,  2.14it/s][A
 35%|███▍      | 77/221 [00:29<00:58,  2.45it/s][A
 35%|███▌      | 78/221 [00:29<00:49,  2.87it/s][A
 36%|███▌      | 79/221 [00:30<01:02,  2.26it/s][A
 36%|███▌      | 80/221 [00:30<00:49,  2.84it/s][A
 37%|███▋      | 81/221 [00:30<00:42,  3.26it/s][A
 37%|███▋      | 82/221 [00:31<00:47,  2.95it/s][A
 38%|███▊      | 83/221 [00:31<00:38,  3.58it/s][A
 38%|███▊      | 84/221 [00:31<00:32,  4.24it/s][A
 38%|███▊      | 85/221 [00:31<00:27,  4.98it/s][A
 39%|███▉      | 86/221 [00:31<00:25,  5.40it/s][A
 39%|███▉      | 87/221 [00:32<00:36,  3.65it/s][A
 40%|███▉      | 88/221 [00:32<00:37,  3.53it/s][A[h264 @ 0x5556d41d2100] mmco: unref short failure
[h264 @ 0x56354081fdc0] mmco: unref short failure

 40%|████      | 89/221 [00:35<02:23,  1.09s/it][A
 41%|████      | 90/221 [00:35<01:49,  1.20it/s][A
 41%|████      | 91/221 [00:35<01:19,  1.63it/s][A
 42%|████▏     | 92/221 [00:36<01:02,  2.06it/s][A
 42%|████▏     | 93/221 [00:36<01:04,  1.99it/s][A
 43%|████▎     | 94/221 [00:37<01:02,  2.04it/s][A
 43%|████▎     | 95/221 [00:37<00:48,  2.58it/s][A
 43%|████▎     | 96/221 [00:37<00:48,  2.56it/s][A
 44%|████▍     | 97/221 [00:37<00:38,  3.18it/s][A
 44%|████▍     | 98/221 [00:38<00:36,  3.34it/s][A
 45%|████▍     | 99/221 [00:38<00:31,  3.86it/s][A
 45%|████▌     | 100/221 [00:38<00:29,  4.17it/s][A
 46%|████▌     | 101/221 [00:38<00:27,  4.34it/s][A
 46%|████▌     | 102/221 [00:38<00:33,  3.56it/s][A
 47%|████▋     | 103/221 [00:39<00:30,  3.81it/s][A
 48%|████▊     | 105/221 [00:39<00:27,  4.29it/s][A
 48%|████▊     | 106/221 [00:40<00:42,  2.71it/s][A
 48%|████▊     | 107/221 [00:40<00:35,  3.24it/s][A
 49%|████▉     | 108/221 [00:40<00:31,  3.58it/s][A
 49%|████▉     | 109/221 [00:40<00:28,  3.91it/s][A
 50%|████▉     | 110/221 [00:41<00:23,  4.64it/s][A
 50%|█████     | 111/221 [00:41<00:33,  3.28it/s][A
 51%|█████     | 112/221 [00:41<00:30,  3.56it/s][A
 51%|█████     | 113/221 [00:42<00:28,  3.76it/s][A
 52%|█████▏    | 114/221 [00:42<00:28,  3.79it/s][A
 52%|█████▏    | 115/221 [00:42<00:23,  4.57it/s][A[h264 @ 0x55773303f480] mmco: unref short failure
[h264 @ 0x55773303f480] mmco: unref short failure

 52%|█████▏    | 116/221 [00:47<02:51,  1.63s/it][A
 53%|█████▎    | 117/221 [00:47<02:08,  1.23s/it][A
 53%|█████▎    | 118/221 [00:47<01:38,  1.04it/s][A
 54%|█████▍    | 119/221 [00:48<01:16,  1.34it/s][A
 54%|█████▍    | 120/221 [00:48<00:59,  1.69it/s][A
 55%|█████▌    | 122/221 [00:48<00:38,  2.58it/s][A
 56%|█████▌    | 123/221 [00:48<00:31,  3.07it/s][A
 56%|█████▌    | 124/221 [00:49<00:27,  3.51it/s][A
 57%|█████▋    | 125/221 [00:49<00:26,  3.63it/s][A
 57%|█████▋    | 126/221 [00:50<00:41,  2.28it/s][A
 57%|█████▋    | 127/221 [00:50<00:41,  2.28it/s][A
 58%|█████▊    | 128/221 [00:50<00:39,  2.37it/s][A
 58%|█████▊    | 129/221 [00:51<00:34,  2.67it/s][A
 59%|█████▉    | 130/221 [00:51<00:29,  3.06it/s][A
 59%|█████▉    | 131/221 [00:51<00:23,  3.84it/s][A
 60%|█████▉    | 132/221 [00:51<00:21,  4.09it/s][A
 60%|██████    | 133/221 [00:52<00:23,  3.72it/s][A
 61%|██████    | 134/221 [00:52<00:24,  3.58it/s][A
 61%|██████    | 135/221 [00:52<00:27,  3.12it/s][A
 62%|██████▏   | 136/221 [00:53<00:28,  3.02it/s][A
 62%|██████▏   | 137/221 [00:53<00:26,  3.22it/s][A
 62%|██████▏   | 138/221 [00:53<00:27,  2.99it/s][A[h264 @ 0x56354598c100] mmco: unref short failure
[h264 @ 0x56354598c100] mmco: unref short failure

 63%|██████▎   | 139/221 [00:54<00:33,  2.48it/s][A
 63%|██████▎   | 140/221 [00:54<00:30,  2.67it/s][A
 64%|██████▍   | 141/221 [00:54<00:25,  3.12it/s][A
 64%|██████▍   | 142/221 [00:55<00:30,  2.61it/s][A
 65%|██████▍   | 143/221 [00:55<00:32,  2.42it/s][A
 65%|██████▌   | 144/221 [00:56<00:25,  2.99it/s][A
 66%|██████▌   | 145/221 [00:56<00:20,  3.74it/s][A
 67%|██████▋   | 147/221 [00:56<00:14,  5.20it/s][A
 67%|██████▋   | 148/221 [00:56<00:15,  4.78it/s][A
 67%|██████▋   | 149/221 [00:56<00:15,  4.75it/s][A
 68%|██████▊   | 150/221 [00:57<00:18,  3.92it/s][A
 68%|██████▊   | 151/221 [00:58<00:31,  2.24it/s][A09/17/2024 06:52:26 - INFO - __main__ -   current idx HnCSd-QjKvs.136 from finetune_area returns wrong image/video, use 95869 instead.

 69%|██████▉   | 152/221 [00:58<00:32,  2.15it/s][A
 69%|██████▉   | 153/221 [00:58<00:27,  2.50it/s][A
 70%|██████▉   | 154/221 [00:59<00:30,  2.19it/s][A
 70%|███████   | 155/221 [00:59<00:24,  2.73it/s][A
 71%|███████   | 156/221 [00:59<00:19,  3.37it/s][A[h264 @ 0x557726edc2c0] mmco: unref short failure

 71%|███████   | 157/221 [01:03<01:28,  1.38s/it][A
 71%|███████▏  | 158/221 [01:03<01:04,  1.02s/it][A
 72%|███████▏  | 159/221 [01:04<00:47,  1.31it/s][A
 72%|███████▏  | 160/221 [01:04<00:36,  1.68it/s][A
 73%|███████▎  | 162/221 [01:04<00:22,  2.60it/s][A
 74%|███████▍  | 163/221 [01:04<00:19,  2.94it/s][A
 74%|███████▍  | 164/221 [01:04<00:16,  3.54it/s][A
 75%|███████▍  | 165/221 [01:04<00:13,  4.27it/s][A
 75%|███████▌  | 166/221 [01:05<00:14,  3.86it/s][A
 76%|███████▌  | 167/221 [01:05<00:11,  4.67it/s][A
 76%|███████▌  | 168/221 [01:07<00:43,  1.23it/s][A
 76%|███████▋  | 169/221 [01:07<00:34,  1.51it/s][A
 77%|███████▋  | 170/221 [01:08<00:28,  1.80it/s][A
 77%|███████▋  | 171/221 [01:08<00:22,  2.25it/s][A
 78%|███████▊  | 172/221 [01:08<00:17,  2.79it/s][A
 79%|███████▊  | 174/221 [01:08<00:11,  4.24it/s][A
 79%|███████▉  | 175/221 [01:09<00:11,  4.03it/s][A
 80%|███████▉  | 176/221 [01:09<00:11,  3.90it/s][A
 80%|████████  | 177/221 [01:09<00:09,  4.53it/s][A
 81%|████████  | 178/221 [01:09<00:12,  3.48it/s][A
 81%|████████  | 179/221 [01:10<00:13,  3.23it/s][A[h264 @ 0x55864cf962c0] mmco: unref short failure
[h264 @ 0x55864cf962c0] mmco: unref short failure

 82%|████████▏ | 181/221 [01:10<00:09,  4.43it/s][A
 82%|████████▏ | 182/221 [01:10<00:07,  4.93it/s][A
 83%|████████▎ | 183/221 [01:10<00:07,  5.01it/s][A
 83%|████████▎ | 184/221 [01:11<00:07,  4.99it/s][A
 84%|████████▍ | 186/221 [01:11<00:06,  5.35it/s][A
 85%|████████▌ | 188/221 [01:11<00:05,  5.55it/s][A
 86%|████████▌ | 189/221 [01:11<00:06,  5.14it/s][A
 86%|████████▌ | 190/221 [01:12<00:06,  4.75it/s][A
 87%|████████▋ | 192/221 [01:12<00:05,  5.43it/s][A
 88%|████████▊ | 194/221 [01:13<00:08,  3.11it/s][A
 89%|████████▊ | 196/221 [01:13<00:05,  4.17it/s][A
 89%|████████▉ | 197/221 [01:13<00:05,  4.56it/s][A
 90%|████████▉ | 198/221 [01:14<00:04,  4.72it/s][A
 90%|█████████ | 199/221 [01:14<00:04,  4.73it/s][A
 90%|█████████ | 200/221 [01:14<00:05,  4.08it/s][A
 91%|█████████ | 201/221 [01:14<00:04,  4.16it/s][A
 91%|█████████▏| 202/221 [01:15<00:04,  4.58it/s][A
 92%|█████████▏| 203/221 [01:15<00:04,  4.37it/s][A
 93%|█████████▎| 205/221 [01:15<00:02,  5.85it/s][A
 93%|█████████▎| 206/221 [01:15<00:03,  4.99it/s][A
 94%|█████████▎| 207/221 [01:15<00:02,  5.26it/s][A
 94%|█████████▍| 208/221 [01:16<00:02,  5.78it/s][A
 95%|█████████▌| 210/221 [01:16<00:01,  8.15it/s][A
 95%|█████████▌| 211/221 [01:16<00:01,  5.08it/s][A
 96%|█████████▌| 212/221 [01:16<00:01,  5.05it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  3.21it/s][A
 97%|█████████▋| 215/221 [01:17<00:01,  3.54it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  3.84it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  3.13it/s][A
 99%|█████████▊| 218/221 [01:19<00:00,  3.08it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  3.26it/s][A
100%|█████████▉| 220/221 [01:23<00:01,  1.56s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.14s/it][A100%|██████████| 221/221 [01:24<00:00,  2.63it/s]
[h264 @ 0x5556c422a340] mmco: unref short failure
[h264 @ 0x5556c422a340] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.41it/s][A
  1%|          | 2/221 [00:00<01:05,  3.36it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.34it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.34it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.36it/s][A[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure

  3%|▎         | 6/221 [00:01<01:04,  3.35it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.33it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.28it/s][A
  5%|▍         | 10/221 [00:03<01:03,  3.32it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.34it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.34it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.32it/s][A[h264 @ 0x558631e7ba00] mmco: unref short failure
[h264 @ 0x558631e7ba00] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.37it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.38it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.36it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.37it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.37it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.38it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.39it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.39it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.38it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.39it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.39it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.40it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.39it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.40it/s][A[h264 @ 0x55772dde4740] mmco: unref short failure
[h264 @ 0x55772dde4740] mmco: unref short failure
[h264 @ 0x55772dde4740] mmco: unref short failure
[h264 @ 0x55772dde4740] mmco: unref short failure

 13%|█▎        | 29/221 [00:08<00:58,  3.27it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.31it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.34it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.34it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.33it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.35it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.37it/s][A
 16%|█▋        | 36/221 [00:10<00:59,  3.12it/s][A
 17%|█▋        | 37/221 [00:11<00:57,  3.20it/s][A
 17%|█▋        | 38/221 [00:11<00:56,  3.26it/s][A[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure

 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.29it/s][A
 19%|█▊        | 41/221 [00:12<00:54,  3.33it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.35it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.37it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.38it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.39it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.39it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.41it/s][A[mov,mp4,m4a,3gp,3g2,mj2 @ 0x558634711d80] moov atom not found

 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 54/221 [00:16<00:48,  3.41it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:19<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:30,  7.17it/s][A
  1%|          | 2/221 [00:00<00:50,  4.36it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.74it/s][A
  2%|▏         | 4/221 [00:00<00:49,  4.36it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.66it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.01it/s][A
  3%|▎         | 7/221 [00:01<00:53,  4.01it/s][A
  4%|▎         | 8/221 [00:01<01:01,  3.49it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.58it/s][A
  5%|▍         | 10/221 [00:02<00:50,  4.19it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.95it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.17it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.45it/s][A
  6%|▋         | 14/221 [00:03<01:10,  2.94it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.88it/s][A
  7%|▋         | 16/221 [00:04<01:12,  2.81it/s][A
  8%|▊         | 17/221 [00:05<01:19,  2.56it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.77it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.88it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.22it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.54it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.32it/s][A
 11%|█▏        | 25/221 [00:06<00:46,  4.24it/s][A
 12%|█▏        | 26/221 [00:06<00:48,  4.03it/s][A
 12%|█▏        | 27/221 [00:07<00:50,  3.85it/s][A
 13%|█▎        | 28/221 [00:07<00:54,  3.53it/s][A
 13%|█▎        | 29/221 [00:07<00:54,  3.50it/s][A
 14%|█▎        | 30/221 [00:08<00:57,  3.30it/s][A
 14%|█▍        | 31/221 [00:08<00:55,  3.44it/s][A
 14%|█▍        | 32/221 [00:08<00:54,  3.44it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.32it/s][A
 15%|█▌        | 34/221 [00:09<01:02,  2.98it/s][A
 16%|█▌        | 35/221 [00:09<01:03,  2.94it/s][A
 16%|█▋        | 36/221 [00:10<00:58,  3.16it/s][A
 17%|█▋        | 37/221 [00:10<00:52,  3.53it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.52it/s][A
 18%|█▊        | 39/221 [00:10<00:50,  3.61it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.34it/s][A
 19%|█▊        | 41/221 [00:11<00:56,  3.19it/s][A
 19%|█▉        | 42/221 [00:11<00:50,  3.56it/s][A
 19%|█▉        | 43/221 [00:12<00:55,  3.18it/s][A
 20%|█▉        | 44/221 [00:12<00:58,  3.05it/s][A
 20%|██        | 45/221 [00:12<01:01,  2.85it/s][A
 21%|██        | 46/221 [00:13<00:57,  3.06it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.45it/s][A
 22%|██▏       | 48/221 [00:13<00:43,  3.97it/s][A
 22%|██▏       | 49/221 [00:13<00:36,  4.72it/s][A
 23%|██▎       | 50/221 [00:13<00:38,  4.45it/s][A
 23%|██▎       | 51/221 [00:14<00:39,  4.26it/s][A
 24%|██▍       | 53/221 [00:14<00:38,  4.31it/s][A
 24%|██▍       | 54/221 [00:14<00:40,  4.13it/s][A
 25%|██▍       | 55/221 [00:15<00:46,  3.58it/s][A
 25%|██▌       | 56/221 [00:15<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:15<00:46,  3.55it/s][A
 26%|██▌       | 58/221 [00:16<00:38,  4.26it/s][A
 27%|██▋       | 59/221 [00:16<00:38,  4.16it/s][A
 27%|██▋       | 60/221 [00:16<00:34,  4.68it/s][A
 28%|██▊       | 61/221 [00:16<00:33,  4.71it/s][A
 28%|██▊       | 62/221 [00:16<00:37,  4.27it/s][A
 29%|██▉       | 64/221 [00:17<00:33,  4.72it/s][A
 29%|██▉       | 65/221 [00:17<00:35,  4.41it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.61it/s][A
 30%|███       | 67/221 [00:18<00:51,  2.99it/s][A
 31%|███       | 68/221 [00:18<00:48,  3.12it/s][A
 31%|███       | 69/221 [00:19<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:19<00:49,  3.05it/s][A
 32%|███▏      | 71/221 [00:19<00:54,  2.73it/s][A
 33%|███▎      | 72/221 [00:20<00:53,  2.79it/s][A
 33%|███▎      | 73/221 [00:20<00:48,  3.03it/s][A
 33%|███▎      | 74/221 [00:20<00:44,  3.30it/s][A
 34%|███▍      | 75/221 [00:21<00:41,  3.52it/s][A
 34%|███▍      | 76/221 [00:21<00:36,  4.00it/s][A
 35%|███▍      | 77/221 [00:21<00:33,  4.31it/s][A
 35%|███▌      | 78/221 [00:21<00:38,  3.67it/s][A
 36%|███▌      | 79/221 [00:22<00:37,  3.75it/s][A
 36%|███▌      | 80/221 [00:22<00:33,  4.20it/s][A
 37%|███▋      | 81/221 [00:22<00:33,  4.20it/s][A
 37%|███▋      | 82/221 [00:22<00:42,  3.25it/s][A
 38%|███▊      | 83/221 [00:23<00:35,  3.88it/s][A
 38%|███▊      | 84/221 [00:23<00:46,  2.92it/s][A
 38%|███▊      | 85/221 [00:24<00:49,  2.72it/s][A
 39%|███▉      | 86/221 [00:24<00:50,  2.69it/s][A
 39%|███▉      | 87/221 [00:24<00:54,  2.48it/s][A
 40%|███▉      | 88/221 [00:25<00:48,  2.75it/s][A
 40%|████      | 89/221 [00:25<00:50,  2.62it/s][A
 41%|████      | 90/221 [00:26<00:54,  2.41it/s][A
 41%|████      | 91/221 [00:26<00:45,  2.86it/s][A
 42%|████▏     | 92/221 [00:26<00:45,  2.83it/s][A
 42%|████▏     | 93/221 [00:27<00:51,  2.50it/s][A
 43%|████▎     | 94/221 [00:27<00:44,  2.84it/s][A
 43%|████▎     | 95/221 [00:27<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:28<00:48,  2.55it/s][A
 44%|████▍     | 97/221 [00:28<00:44,  2.78it/s][A
 44%|████▍     | 98/221 [00:28<00:44,  2.77it/s][A
 45%|████▍     | 99/221 [00:29<00:42,  2.88it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.40it/s][A
 46%|████▌     | 101/221 [00:29<00:31,  3.85it/s][A
 46%|████▌     | 102/221 [00:29<00:35,  3.40it/s][A
 47%|████▋     | 103/221 [00:30<00:33,  3.54it/s][A
 47%|████▋     | 104/221 [00:30<00:28,  4.13it/s][A
 48%|████▊     | 105/221 [00:30<00:31,  3.71it/s][A
 48%|████▊     | 106/221 [00:31<00:34,  3.32it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:30,  3.74it/s][A
 49%|████▉     | 109/221 [00:31<00:29,  3.82it/s][A
 50%|████▉     | 110/221 [00:32<00:28,  3.91it/s][A
 50%|█████     | 111/221 [00:32<00:30,  3.57it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.44it/s][A
 51%|█████     | 113/221 [00:32<00:30,  3.57it/s][A
 52%|█████▏    | 114/221 [00:33<00:24,  4.32it/s][A
 52%|█████▏    | 115/221 [00:33<00:22,  4.67it/s][A
 52%|█████▏    | 116/221 [00:33<00:23,  4.45it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.26it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.73it/s][A
 54%|█████▍    | 119/221 [00:34<00:33,  3.04it/s][A
 54%|█████▍    | 120/221 [00:34<00:34,  2.92it/s][A
 55%|█████▍    | 121/221 [00:35<00:31,  3.14it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.52it/s][A
 56%|█████▌    | 123/221 [00:35<00:30,  3.24it/s][A
 56%|█████▌    | 124/221 [00:36<00:32,  3.00it/s][A
 57%|█████▋    | 125/221 [00:36<00:37,  2.56it/s][A
 57%|█████▋    | 126/221 [00:36<00:33,  2.80it/s][A
 57%|█████▋    | 127/221 [00:37<00:35,  2.64it/s][A
 58%|█████▊    | 128/221 [00:37<00:30,  3.03it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.49it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.52it/s][A
 59%|█████▉    | 131/221 [00:38<00:25,  3.49it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.53it/s][A
 60%|██████    | 133/221 [00:39<00:29,  3.00it/s][A
 61%|██████    | 134/221 [00:39<00:32,  2.68it/s][A
 61%|██████    | 135/221 [00:39<00:26,  3.27it/s][A
 62%|██████▏   | 136/221 [00:39<00:25,  3.34it/s][A
 62%|██████▏   | 137/221 [00:40<00:23,  3.61it/s][A
 62%|██████▏   | 138/221 [00:40<00:22,  3.76it/s][A
 63%|██████▎   | 139/221 [00:40<00:25,  3.19it/s][A
 63%|██████▎   | 140/221 [00:41<00:22,  3.54it/s][A
 64%|██████▍   | 141/221 [00:41<00:26,  3.01it/s][A
 64%|██████▍   | 142/221 [00:41<00:22,  3.44it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.27it/s][A
 65%|██████▌   | 144/221 [00:42<00:20,  3.75it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.32it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.45it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  4.04it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.47it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.66it/s][A
 68%|██████▊   | 150/221 [00:43<00:19,  3.59it/s][A
 68%|██████▊   | 151/221 [00:44<00:23,  2.92it/s][A
 69%|██████▉   | 152/221 [00:45<00:35,  1.96it/s][A
 69%|██████▉   | 153/221 [00:45<00:28,  2.36it/s][A
 70%|██████▉   | 154/221 [00:45<00:25,  2.61it/s][A
 70%|███████   | 155/221 [00:46<00:25,  2.56it/s][A
 71%|███████   | 156/221 [00:46<00:21,  2.98it/s][A
 71%|███████   | 157/221 [00:46<00:20,  3.20it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.00it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.28it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.70it/s][A
 73%|███████▎  | 161/221 [00:47<00:13,  4.45it/s][A
 73%|███████▎  | 162/221 [00:47<00:11,  5.00it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.60it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  5.08it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.21it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.58it/s][A
 76%|███████▌  | 167/221 [00:49<00:12,  4.17it/s][A
 76%|███████▌  | 168/221 [00:49<00:13,  4.07it/s][A
 76%|███████▋  | 169/221 [00:49<00:10,  4.91it/s][A
 77%|███████▋  | 170/221 [00:49<00:15,  3.35it/s][A
 77%|███████▋  | 171/221 [00:50<00:16,  3.05it/s][A
 78%|███████▊  | 172/221 [00:50<00:16,  3.02it/s][A
 78%|███████▊  | 173/221 [00:51<00:15,  3.02it/s][A
 79%|███████▊  | 174/221 [00:51<00:14,  3.19it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  2.95it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.50it/s][A
 80%|████████  | 177/221 [00:52<00:13,  3.37it/s][A
 81%|████████  | 178/221 [00:52<00:18,  2.38it/s][A
 81%|████████  | 179/221 [00:53<00:15,  2.69it/s][A
 81%|████████▏ | 180/221 [00:53<00:12,  3.22it/s][A
 82%|████████▏ | 181/221 [00:53<00:14,  2.78it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.13it/s][A
 83%|████████▎ | 183/221 [00:54<00:12,  3.04it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.02it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.74it/s][A
 84%|████████▍ | 186/221 [00:55<00:11,  2.99it/s][A
 85%|████████▍ | 187/221 [00:55<00:10,  3.37it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.39it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.65it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.28it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.70it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.10it/s][A
 87%|████████▋ | 193/221 [00:57<00:06,  4.01it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.75it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.71it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.18it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.68it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.62it/s][A
 90%|█████████ | 199/221 [00:59<00:07,  2.99it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.26it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.67it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.32it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.70it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.64it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.56it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  2.84it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.31it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.69it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.74it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.51it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.69it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.06it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.07it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.92it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.18it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.45it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.15it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.43it/s][A
100%|██████████| 221/221 [01:05<00:00,  2.81it/s][A100%|██████████| 221/221 [01:05<00:00,  3.35it/s]
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'area_r1': 39.7, 'area_recall': '39.7/66.4/75.5', 'area_ravg': 60.5}
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'forward_r1': 38.8, 'forward_recall': '38.8/67.5/77.9', 'forward_ravg': 61.4}
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/68.6/78.6', 'area_video_ravg': 62.0}
09/17/2024 06:55:08 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 06:55:08 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/76.0/82.7', 'area_video_ravg': 70.4, 'area_video_back_r1': 48.4, 'area_video_back_recall': '48.4/74.2/82.5', 'area_video_back_ravg': 68.4}
09/17/2024 06:55:08 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 849=======

09/17/2024 06:55:08 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.5/81.8', 'area_video_ravg': 70.0, 'area_video_back_r1': 49.3, 'area_video_back_recall': '49.3/73.9/82.4', 'area_video_back_ravg': 68.5}
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 06:55:08 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 06:55:08 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 06:55:08 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1099--===========

09/17/2024 06:55:08 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/74.9/81.3', 'video_ravg': 69.3}
09/17/2024 06:55:08 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 06:55:08 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 06:55:35 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.00761588616296649, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.072582483291626, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.154315233230591, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.234513759613037}
 38%|███▊      | 1100/2910 [6:59:38<69:27:29, 138.15s/it][h264 @ 0x56354c3c1340] mmco: unref short failure
 38%|███▊      | 1101/2910 [6:59:42<49:11:50, 97.91s/it]  38%|███▊      | 1102/2910 [6:59:47<35:02:39, 69.78s/it] 38%|███▊      | 1103/2910 [6:59:52<25:22:10, 50.54s/it][h264 @ 0x5556cd4149c0] mmco: unref short failure
 38%|███▊      | 1104/2910 [6:59:57<18:32:12, 36.95s/it] 38%|███▊      | 1105/2910 [7:00:03<13:51:07, 27.63s/it][h264 @ 0x5556db0ead40] mmco: unref short failure
[h264 @ 0x5556db0ead40] mmco: unref short failure
[h264 @ 0x5556db0ead40] mmco: unref short failure
 38%|███▊      | 1106/2910 [7:00:09<10:36:09, 21.16s/it][h264 @ 0x557719f48740] mmco: unref short failure
[h264 @ 0x557719f48740] mmco: unref short failure
 38%|███▊      | 1107/2910 [7:00:16<8:24:01, 16.77s/it] 09/17/2024 06:56:18 - INFO - __main__ -   current idx ISueLekeFew.95 from finetune_area returns wrong image/video, use 28771 instead.
[h264 @ 0x558635373a40] mmco: unref short failure
 38%|███▊      | 1108/2910 [7:00:23<6:54:01, 13.79s/it][h264 @ 0x563551b8ffc0] mmco: unref short failure
[h264 @ 0x563551b8ffc0] mmco: unref short failure
[h264 @ 0x55863cefb380] mmco: unref short failure
 38%|███▊      | 1109/2910 [7:00:30<5:52:47, 11.75s/it][h264 @ 0x55864408f900] mmco: unref short failure
[h264 @ 0x55864408f900] mmco: unref short failure
[h264 @ 0x55863868e040] mmco: unref short failure
[h264 @ 0x55771ba282c0] mmco: unref short failure
[h264 @ 0x55771ba282c0] mmco: unref short failure
 38%|███▊      | 1110/2910 [7:00:37<5:08:05, 10.27s/it][h264 @ 0x56355090e780] mmco: unref short failure
 38%|███▊      | 1111/2910 [7:00:43<4:37:32,  9.26s/it][h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x55568caa5580] mmco: unref short failure
[h264 @ 0x55568caa5580] mmco: unref short failure
 38%|███▊      | 1112/2910 [7:00:50<4:10:05,  8.35s/it][h264 @ 0x5576df298180] mmco: unref short failure
 38%|███▊      | 1113/2910 [7:00:56<3:52:24,  7.76s/it][h264 @ 0x5556de007d40] mmco: unref short failure
 38%|███▊      | 1114/2910 [7:01:03<3:44:13,  7.49s/it][h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x5556c422a340] mmco: unref short failure
 38%|███▊      | 1115/2910 [7:01:10<3:41:53,  7.42s/it]09/17/2024 06:57:11 - INFO - __main__ -   current idx aPvQDKl-LG4.51 from finetune_area returns wrong image/video, use 56728 instead.
[h264 @ 0x56354d0db780] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x558633cc28c0] mmco: unref short failure
[h264 @ 0x558633cc28c0] mmco: unref short failure
 38%|███▊      | 1116/2910 [7:01:48<8:12:15, 16.46s/it] 38%|███▊      | 1117/2910 [7:01:57<7:08:20, 14.33s/it][h264 @ 0x5556c492cac0] mmco: unref short failure
[h264 @ 0x5556c492cac0] mmco: unref short failure
[h264 @ 0x5556c492cac0] mmco: unref short failure
[h264 @ 0x55771ba282c0] mmco: unref short failure
[h264 @ 0x5556d67f8480] mmco: unref short failure
[h264 @ 0x5556d67f8480] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
[h264 @ 0x558635373a40] mmco: unref short failure
 38%|███▊      | 1118/2910 [7:02:06<6:15:37, 12.58s/it][h264 @ 0x5586346f5140] mmco: unref short failure
[h264 @ 0x5586346f5140] mmco: unref short failure
[h264 @ 0x5576dffac800] mmco: unref short failure
[h264 @ 0x5576dffac800] mmco: unref short failure
[h264 @ 0x55864f4ffac0] mmco: unref short failure
[h264 @ 0x55864f4ffac0] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
 38%|███▊      | 1119/2910 [7:02:16<5:56:15, 11.93s/it][h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5556d2def2c0] mmco: unref short failure
[h264 @ 0x5556d2def2c0] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
[h264 @ 0x5586576bb300] mmco: unref short failure
 38%|███▊      | 1120/2910 [7:02:44<8:23:43, 16.88s/it][h264 @ 0x5556c45059c0] mmco: unref short failure
 39%|███▊      | 1121/2910 [7:02:51<6:48:54, 13.71s/it] 39%|███▊      | 1122/2910 [7:02:57<5:38:56, 11.37s/it][h264 @ 0x55863cefb380] mmco: unref short failure
 39%|███▊      | 1123/2910 [7:03:03<4:53:33,  9.86s/it][h264 @ 0x5577198d9f00] mmco: unref short failure
[h264 @ 0x5577198d9f00] mmco: unref short failure
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x5635409b7780] mmco: unref short failure
[h264 @ 0x5556c756bd80] mmco: unref short failure
[h264 @ 0x5556d01357c0] mmco: unref short failure
[h264 @ 0x5556d01357c0] mmco: unref short failure
[h264 @ 0x55864408f900] mmco: unref short failure
[h264 @ 0x55864408f900] mmco: unref short failure
[h264 @ 0x5556e41403c0] mmco: unref short failure
[h264 @ 0x5556e41403c0] mmco: unref short failure
[h264 @ 0x5635432ebf80] mmco: unref short failure
[h264 @ 0x55863d2fbdc0] mmco: unref short failure
[h264 @ 0x55863d2fbdc0] mmco: unref short failure
09/17/2024 06:59:34 - INFO - __main__ -   current idx gtt8O0yuAiA.7 from finetune_area returns wrong image/video, use 57438 instead.
[h264 @ 0x558641a43980] mmco: unref short failure
[h264 @ 0x558641a43980] mmco: unref short failure
[h264 @ 0x558641a43980] mmco: unref short failure
[h264 @ 0x558641a43980] mmco: unref short failure
09/17/2024 06:59:42 - INFO - __main__ -   current idx n28tYo5T1Po.62 from finetune_area returns wrong image/video, use 86165 instead.
[h264 @ 0x55773275ccc0] mmco: unref short failure
[h264 @ 0x5556de007d40] mmco: unref short failure
[h264 @ 0x55863db19180] mmco: unref short failure
[h264 @ 0x5576de551a40] mmco: unref short failure
[h264 @ 0x5576de551a40] mmco: unref short failure
[h264 @ 0x55771b225ac0] mmco: unref short failure
[h264 @ 0x55771b225ac0] mmco: unref short failure
 39%|███▊      | 1124/2910 [7:04:19<14:41:59, 29.63s/it]09/17/2024 07:00:23 - INFO - __main__ -   current idx H3sDc6_8nAc.67 from finetune_area returns wrong image/video, use 3732 instead.
 39%|███▊      | 1125/2910 [7:04:29<11:45:33, 23.72s/it][h264 @ 0x558636fa09c0] mmco: unref short failure
[h264 @ 0x558636fa09c0] mmco: unref short failure
 39%|███▊      | 1126/2910 [7:04:36<9:16:42, 18.72s/it] [h264 @ 0x56354a2446c0] mmco: unref short failure
[h264 @ 0x563554f43040] mmco: unref short failure
 39%|███▊      | 1127/2910 [7:04:46<8:00:27, 16.17s/it][h264 @ 0x56354386a100] mmco: unref short failure
[h264 @ 0x563562f6e480] mmco: unref short failure
[h264 @ 0x563562f6e480] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
 39%|███▉      | 1128/2910 [7:05:09<8:57:16, 18.09s/it][h264 @ 0x563555e36b40] mmco: unref short failure
 39%|███▉      | 1129/2910 [7:05:15<7:16:58, 14.72s/it][h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x56354712bdc0] mmco: unref short failure
[h264 @ 0x56354712bdc0] mmco: unref short failure
[h264 @ 0x55864f6cf040] mmco: unref short failure
[h264 @ 0x55864f6cf040] mmco: unref short failure
 39%|███▉      | 1130/2910 [7:05:26<6:43:11, 13.59s/it][h264 @ 0x55863f596b40] mmco: unref short failure
[h264 @ 0x55863f596b40] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
 39%|███▉      | 1131/2910 [7:05:33<5:40:48, 11.49s/it][h264 @ 0x56354de3c3c0] mmco: unref short failure
[h264 @ 0x56354de3c3c0] mmco: unref short failure
[h264 @ 0x563554553340] mmco: unref short failure
[h264 @ 0x5576e0d5efc0] mmco: unref short failure
[h264 @ 0x56355fb27e80] mmco: unref short failure
[h264 @ 0x56355fb27e80] mmco: unref short failure
[h264 @ 0x563551b8ffc0] mmco: unref short failure
[h264 @ 0x558634c6cdc0] mmco: unref short failure
[h264 @ 0x558634c6cdc0] mmco: unref short failure
[h264 @ 0x5556d2def2c0] mmco: unref short failure
[h264 @ 0x5556c752bd00] mmco: unref short failure
[h264 @ 0x56354f9d5400] mmco: unref short failure
[h264 @ 0x56354f9d5400] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x5556e0dd4a40] mmco: unref short failure
[h264 @ 0x55863d1e46c0] mmco: unref short failure
[h264 @ 0x55863d1e46c0] mmco: unref short failure
[h264 @ 0x563554553340] mmco: unref short failure
[h264 @ 0x55772fa7c300] mmco: unref short failure
[h264 @ 0x55772fa7c300] mmco: unref short failure
[h264 @ 0x5556c4cdf880] mmco: unref short failure
[h264 @ 0x5556c4cdf880] mmco: unref short failure
[h264 @ 0x55864f6e8480] mmco: unref short failure
[h264 @ 0x55864f6e8480] mmco: unref short failure
[h264 @ 0x55864f6e8480] mmco: unref short failure
[h264 @ 0x55864f6e8480] mmco: unref short failure
 39%|███▉      | 1132/2910 [7:06:46<14:48:21, 29.98s/it][h264 @ 0x558646d56400] mmco: unref short failure
[h264 @ 0x563558e53bc0] mmco: unref short failure
[h264 @ 0x563558e53bc0] mmco: unref short failure
[h264 @ 0x558642684140] mmco: unref short failure
[h264 @ 0x558642684140] mmco: unref short failure
 39%|███▉      | 1133/2910 [7:06:57<11:57:57, 24.24s/it][h264 @ 0x5576df298180] mmco: unref short failure
[h264 @ 0x5576df298180] mmco: unref short failure
[h264 @ 0x5556e41403c0] mmco: unref short failure
[h264 @ 0x5556d6f12480] mmco: unref short failure
[h264 @ 0x5556c752bd00] mmco: unref short failure
[h264 @ 0x56355c684040] mmco: unref short failure
 39%|███▉      | 1134/2910 [7:07:08<10:02:19, 20.35s/it][h264 @ 0x557734d27780] mmco: unref short failure
[h264 @ 0x557734d27780] mmco: unref short failure
[h264 @ 0x55863a0791c0] mmco: unref short failure
[h264 @ 0x55863a0791c0] mmco: unref short failure
 39%|███▉      | 1135/2910 [7:07:15<7:59:48, 16.22s/it] [h264 @ 0x5586360a25c0] mmco: unref short failure
[h264 @ 0x5586360a25c0] mmco: unref short failure
[h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x5556d3ba2740] mmco: unref short failure
 39%|███▉      | 1136/2910 [7:07:37<8:53:47, 18.05s/it][h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x558632b70d40] mmco: unref short failure
 39%|███▉      | 1137/2910 [7:07:47<7:37:53, 15.50s/it][h264 @ 0x5577244f22c0] mmco: unref short failure
[h264 @ 0x5577244f22c0] mmco: unref short failure
 39%|███▉      | 1138/2910 [7:07:53<6:17:07, 12.77s/it][h264 @ 0x5556d2230400] mmco: unref short failure
 39%|███▉      | 1139/2910 [7:08:01<5:31:10, 11.22s/it][h264 @ 0x557729c604c0] mmco: unref short failure
[h264 @ 0x557729c604c0] mmco: unref short failure
[h264 @ 0x5556d893f780] mmco: unref short failure
[h264 @ 0x5556d893f780] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x5556c9c62b40] mmco: unref short failure
[h264 @ 0x563542a05d40] mmco: unref short failure
[h264 @ 0x557736ce41c0] mmco: unref short failure
[h264 @ 0x55773d4fc300] mmco: unref short failure
[h264 @ 0x5586434e6b40] mmco: unref short failure
[h264 @ 0x5586434e6b40] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x55772b7f1540] mmco: unref short failure
[h264 @ 0x55772b7f1540] mmco: unref short failure
[h264 @ 0x55772b7f1540] mmco: unref short failure
[h264 @ 0x55772b7f1540] mmco: unref short failure
[h264 @ 0x5556cd348180] mmco: unref short failure
[h264 @ 0x5635509623c0] mmco: unref short failure
[h264 @ 0x5556c9c62b40] mmco: unref short failure
[h264 @ 0x5556c9c62b40] mmco: unref short failure
[h264 @ 0x5577322b3080] mmco: unref short failure
[h264 @ 0x5577322b3080] mmco: unref short failure
[h264 @ 0x55771c223b80] mmco: unref short failure
[h264 @ 0x55771c223b80] mmco: unref short failure
[h264 @ 0x5556d87be140] mmco: unref short failure
[h264 @ 0x5556d87be140] mmco: unref short failure
 39%|███▉      | 1140/2910 [7:09:19<15:21:45, 31.25s/it][h264 @ 0x55864a9ee880] mmco: unref short failure
[h264 @ 0x55864a9ee880] mmco: unref short failure
09/17/2024 07:05:20 - INFO - __main__ -   current idx thKB7z_wbWY.26 from finetune_area returns wrong image/video, use 76556 instead.
[h264 @ 0x55864029d040] mmco: unref short failure
[h264 @ 0x55864029d040] mmco: unref short failure
 39%|███▉      | 1141/2910 [7:09:25<11:41:20, 23.79s/it][h264 @ 0x557735d31580] mmco: unref short failure
[h264 @ 0x557735d31580] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
 39%|███▉      | 1142/2910 [7:09:35<9:34:59, 19.51s/it] [h264 @ 0x55568be92000] mmco: unref short failure
[h264 @ 0x55568be92000] mmco: unref short failure
 39%|███▉      | 1143/2910 [7:09:48<8:40:38, 17.68s/it] 39%|███▉      | 1144/2910 [7:10:04<8:29:48, 17.32s/it][h264 @ 0x55863f569640] mmco: unref short failure
[h264 @ 0x55863f569640] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x55773451f2c0] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
 39%|███▉      | 1145/2910 [7:10:12<7:04:25, 14.43s/it][h264 @ 0x558632b70d40] mmco: unref short failure
[h264 @ 0x558632b70d40] mmco: unref short failure
[h264 @ 0x558632b70d40] mmco: unref short failure
[h264 @ 0x56354f9d5400] mmco: unref short failure
[h264 @ 0x56354f9d5400] mmco: unref short failure
 39%|███▉      | 1146/2910 [7:10:20<6:08:51, 12.55s/it][h264 @ 0x55771c223b80] mmco: unref short failure
[h264 @ 0x563550486440] mmco: unref short failure
[h264 @ 0x563550486440] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure
 39%|███▉      | 1147/2910 [7:10:29<5:33:27, 11.35s/it][h264 @ 0x55863843fd80] mmco: unref short failure
[h264 @ 0x55863843fd80] mmco: unref short failure
[h264 @ 0x5556df862600] mmco: unref short failure
[h264 @ 0x5556df862600] mmco: unref short failure
[h264 @ 0x5635485bb940] mmco: unref short failure
[h264 @ 0x5577306cf500] mmco: unref short failure
[h264 @ 0x5577306cf500] mmco: unref short failure
[h264 @ 0x56354ccd6300] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556d6fc1700] mmco: unref short failure
[h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x557717c06c40] mmco: unref short failure
[h264 @ 0x55772ef1a0c0] mmco: unref short failure
[h264 @ 0x55772ef1a0c0] mmco: unref short failure
09/17/2024 07:07:45 - INFO - __main__ -   current idx UGjfq2kyBqs.34 from finetune_area returns wrong image/video, use 48593 instead.
 39%|███▉      | 1148/2910 [7:11:52<16:09:30, 33.01s/it][h264 @ 0x558642f93600] mmco: unref short failure
 39%|███▉      | 1149/2910 [7:11:58<12:10:54, 24.90s/it]09/17/2024 07:07:57 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 07:07:57 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x56354ea043c0] mmco: unref short failure
09/17/2024 07:07:58 - INFO - __main__ -   current idx TomRXmGEw8s.31 from finetune_area returns wrong image/video, use 118793 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x557717c19840] mmco: unref short failure
[h264 @ 0x557717c19840] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
[h264 @ 0x563560647200] mmco: unref short failure
[h264 @ 0x56355494d840] mmco: unref short failure
[h264 @ 0x5556c44e3640] mmco: unref short failure
[h264 @ 0x55863c4c5d80] mmco: unref short failure
[h264 @ 0x55863c4c5d80] mmco: unref short failure
[h264 @ 0x55863c4c5d80] mmco: unref short failure
[h264 @ 0x55863c4c5d80] mmco: unref short failure
[h264 @ 0x56354c05de40] mmco: unref short failure
[h264 @ 0x56354c05de40] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
[h264 @ 0x5577314afc40] mmco: unref short failure
[h264 @ 0x5556c7f09280] mmco: unref short failure
09/17/2024 07:08:23 - INFO - __main__ -   current idx Xy31jShyKEY.64 from finetune_area returns wrong image/video, use 99620 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556c45059c0] mmco: unref short failure
[h264 @ 0x558642684140] mmco: unref short failure
[h264 @ 0x56354e8bfdc0] mmco: unref short failure
[h264 @ 0x56354e8bfdc0] mmco: unref short failure
[h264 @ 0x558636a1b840] mmco: unref short failure
[h264 @ 0x558636a1b840] mmco: unref short failure
[h264 @ 0x558636a1b840] mmco: unref short failure
[h264 @ 0x558636a1b840] mmco: unref short failure
[h264 @ 0x557718d97c80] mmco: unref short failure
[h264 @ 0x558632f5f880] mmco: unref short failure
[h264 @ 0x5635560a9180] mmco: unref short failure
[h264 @ 0x5635560a9180] mmco: unref short failure
[h264 @ 0x558632c19b80] mmco: unref short failure
[h264 @ 0x558632c19b80] mmco: unref short failure
[h264 @ 0x5556c8a00f40] mmco: unref short failure
[h264 @ 0x5556c8a00f40] mmco: unref short failure
[h264 @ 0x5556cedf0680] mmco: unref short failure
[h264 @ 0x55864a9ee880] mmco: unref short failure
[h264 @ 0x55864a9ee880] mmco: unref short failure
[h264 @ 0x5556c7f09280] mmco: unref short failure
[h264 @ 0x5556c7f09280] mmco: unref short failure
[h264 @ 0x55771ad11e40] mmco: unref short failure
[h264 @ 0x55771ad11e40] mmco: unref short failure
[h264 @ 0x55771f380980] mmco: unref short failure
[h264 @ 0x55771f380980] mmco: unref short failure
[h264 @ 0x557731e6a400] mmco: unref short failure
[h264 @ 0x5556e018b780] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x5556dc7e4dc0] mmco: unref short failure
[h264 @ 0x5556cedf0680] mmco: unref short failure
[h264 @ 0x5556cedf0680] mmco: unref short failure
[h264 @ 0x55772b17ef40] mmco: unref short failure
[h264 @ 0x55772b17ef40] mmco: unref short failure
[h264 @ 0x56354e278200] mmco: unref short failure
[h264 @ 0x56354e278200] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:16,  2.86it/s][A
  1%|          | 2/221 [00:00<01:35,  2.28it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.46it/s][A
  2%|▏         | 5/221 [00:01<00:38,  5.68it/s][A
  3%|▎         | 7/221 [00:01<00:36,  5.83it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.22it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.56it/s][A
  5%|▍         | 10/221 [00:02<01:15,  2.81it/s][A
  5%|▍         | 11/221 [00:03<01:00,  3.48it/s][A
  5%|▌         | 12/221 [00:03<01:21,  2.57it/s][A
  6%|▌         | 13/221 [00:03<01:04,  3.22it/s][A[h264 @ 0x563554424180] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:15,  2.73it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.93it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.26it/s][A
  8%|▊         | 17/221 [00:05<00:56,  3.59it/s][A
  8%|▊         | 18/221 [00:05<00:55,  3.64it/s][A
  9%|▊         | 19/221 [00:05<00:46,  4.33it/s][A
  9%|▉         | 20/221 [00:05<00:38,  5.21it/s][A
 10%|▉         | 21/221 [00:05<00:34,  5.77it/s][A
 10%|▉         | 22/221 [00:05<00:38,  5.15it/s][A
 11%|█         | 24/221 [00:06<00:32,  6.08it/s][A
 11%|█▏        | 25/221 [00:06<00:31,  6.19it/s][A
 12%|█▏        | 26/221 [00:06<00:34,  5.72it/s][A
 12%|█▏        | 27/221 [00:06<00:40,  4.75it/s][A
 13%|█▎        | 28/221 [00:07<00:54,  3.55it/s][A
 14%|█▎        | 30/221 [00:07<00:40,  4.73it/s][A
 14%|█▍        | 31/221 [00:07<00:36,  5.24it/s][A
 15%|█▍        | 33/221 [00:08<00:45,  4.16it/s][A
 15%|█▌        | 34/221 [00:08<00:46,  4.06it/s][A
 16%|█▌        | 35/221 [00:08<00:43,  4.27it/s][A
 16%|█▋        | 36/221 [00:09<00:43,  4.30it/s][A
 17%|█▋        | 37/221 [00:09<00:58,  3.13it/s][A
 17%|█▋        | 38/221 [00:09<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:10<00:44,  4.04it/s][A
 19%|█▊        | 41/221 [00:10<00:39,  4.60it/s][A
 19%|█▉        | 42/221 [00:10<00:58,  3.05it/s][A[h264 @ 0x558641a43980] mmco: unref short failure
[h264 @ 0x558641a43980] mmco: unref short failure

 19%|█▉        | 43/221 [00:11<00:48,  3.69it/s][A
 20%|█▉        | 44/221 [00:11<00:41,  4.25it/s][A
 20%|██        | 45/221 [00:12<01:45,  1.67it/s][A
 21%|██        | 46/221 [00:13<01:52,  1.55it/s][A[h264 @ 0x5556c492cac0] mmco: unref short failure

 21%|██▏       | 47/221 [00:15<03:08,  1.08s/it][A
 22%|██▏       | 48/221 [00:15<02:19,  1.24it/s][A
 22%|██▏       | 49/221 [00:15<01:44,  1.64it/s][A
 23%|██▎       | 50/221 [00:16<01:18,  2.18it/s][A
 23%|██▎       | 51/221 [00:16<01:01,  2.79it/s][A
 24%|██▎       | 52/221 [00:16<00:47,  3.53it/s][A
 24%|██▍       | 53/221 [00:16<00:41,  4.01it/s][A
 24%|██▍       | 54/221 [00:18<01:59,  1.40it/s][A
 25%|██▍       | 55/221 [00:18<01:44,  1.58it/s][A
 25%|██▌       | 56/221 [00:18<01:28,  1.86it/s][A
 26%|██▌       | 57/221 [00:19<01:19,  2.07it/s][A
 26%|██▌       | 58/221 [00:19<01:00,  2.71it/s][A
 27%|██▋       | 59/221 [00:19<00:47,  3.43it/s][A
 27%|██▋       | 60/221 [00:19<00:50,  3.16it/s][A
 28%|██▊       | 61/221 [00:20<00:44,  3.61it/s][A
 28%|██▊       | 62/221 [00:20<00:38,  4.11it/s][A
 29%|██▊       | 63/221 [00:20<00:32,  4.83it/s][A
 29%|██▉       | 64/221 [00:20<00:29,  5.28it/s][A
 29%|██▉       | 65/221 [00:20<00:29,  5.34it/s][A
 30%|██▉       | 66/221 [00:21<00:47,  3.25it/s][A
 30%|███       | 67/221 [00:21<00:45,  3.42it/s][A
 31%|███       | 68/221 [00:21<00:40,  3.78it/s][A[h264 @ 0x5556cb9d2100] mmco: unref short failure
[h264 @ 0x5556cb9d2100] mmco: unref short failure

 31%|███       | 69/221 [00:22<00:58,  2.62it/s][A
 32%|███▏      | 70/221 [00:22<00:46,  3.25it/s][A[h264 @ 0x55772dff3d80] mmco: unref short failure
[h264 @ 0x55772dff3d80] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure
[h264 @ 0x558648c23e80] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:55,  1.57s/it][A
 33%|███▎      | 72/221 [00:27<02:54,  1.17s/it][A
 33%|███▎      | 73/221 [00:27<02:16,  1.08it/s][A
 33%|███▎      | 74/221 [00:27<01:46,  1.39it/s][A
 34%|███▍      | 75/221 [00:28<01:27,  1.66it/s][A
 34%|███▍      | 76/221 [00:28<01:07,  2.14it/s][A
 35%|███▍      | 77/221 [00:28<00:58,  2.45it/s][A
 35%|███▌      | 78/221 [00:28<00:51,  2.79it/s][A
 36%|███▌      | 79/221 [00:29<01:08,  2.07it/s][A
 36%|███▌      | 80/221 [00:29<00:53,  2.62it/s][A
 37%|███▋      | 81/221 [00:30<00:45,  3.10it/s][A
 37%|███▋      | 82/221 [00:30<00:43,  3.22it/s][A
 38%|███▊      | 83/221 [00:30<00:35,  3.89it/s][A
 38%|███▊      | 84/221 [00:30<00:32,  4.27it/s][A
 39%|███▉      | 86/221 [00:30<00:24,  5.58it/s][A
 39%|███▉      | 87/221 [00:31<00:34,  3.83it/s][A
 40%|███▉      | 88/221 [00:31<00:38,  3.44it/s][A09/17/2024 07:10:49 - INFO - __main__ -   current idx CZpZmpPh3NY.13 from finetune_area returns wrong image/video, use 88345 instead.

 40%|████      | 89/221 [00:34<02:08,  1.03it/s][A
 41%|████      | 90/221 [00:34<01:42,  1.28it/s][A
 41%|████      | 91/221 [00:34<01:18,  1.65it/s][A
 42%|████▏     | 92/221 [00:35<01:01,  2.10it/s][A
 42%|████▏     | 93/221 [00:35<01:04,  1.99it/s][A
 43%|████▎     | 94/221 [00:36<01:04,  1.97it/s][A
 43%|████▎     | 95/221 [00:36<00:50,  2.51it/s][A
 43%|████▎     | 96/221 [00:36<00:46,  2.70it/s][A
 44%|████▍     | 97/221 [00:36<00:39,  3.10it/s][A
 44%|████▍     | 98/221 [00:37<00:37,  3.26it/s][A
 45%|████▍     | 99/221 [00:37<00:31,  3.82it/s][A
 45%|████▌     | 100/221 [00:37<00:27,  4.33it/s][A
 46%|████▌     | 101/221 [00:37<00:28,  4.18it/s][A[h264 @ 0x5577314afc40] mmco: unref short failure

 46%|████▌     | 102/221 [00:38<00:31,  3.77it/s][A
 47%|████▋     | 103/221 [00:38<00:28,  4.10it/s][A
 47%|████▋     | 104/221 [00:38<00:24,  4.78it/s][A
 48%|████▊     | 105/221 [00:38<00:26,  4.32it/s][A[h264 @ 0x563549b31d40] mmco: unref short failure
[h264 @ 0x563549b31d40] mmco: unref short failure

 48%|████▊     | 106/221 [00:39<00:44,  2.58it/s][A
 48%|████▊     | 107/221 [00:39<00:37,  3.06it/s][A
 49%|████▉     | 108/221 [00:39<00:33,  3.40it/s][A
 49%|████▉     | 109/221 [00:40<00:30,  3.68it/s][A
 50%|████▉     | 110/221 [00:40<00:25,  4.42it/s][A
 50%|█████     | 111/221 [00:40<00:31,  3.44it/s][A
 51%|█████     | 112/221 [00:40<00:28,  3.76it/s][A
 51%|█████     | 113/221 [00:41<00:30,  3.55it/s][A
 52%|█████▏    | 114/221 [00:41<00:27,  3.83it/s][A
 52%|█████▏    | 115/221 [00:41<00:25,  4.14it/s][A
 52%|█████▏    | 116/221 [00:46<02:55,  1.67s/it][A
 53%|█████▎    | 117/221 [00:46<02:10,  1.25s/it][A
 53%|█████▎    | 118/221 [00:47<01:38,  1.04it/s][A
 54%|█████▍    | 119/221 [00:47<01:13,  1.39it/s][A
 54%|█████▍    | 120/221 [00:47<00:55,  1.81it/s][A
 55%|█████▍    | 121/221 [00:47<00:44,  2.22it/s][A
 55%|█████▌    | 122/221 [00:47<00:35,  2.77it/s][A
 56%|█████▌    | 123/221 [00:47<00:29,  3.32it/s][A
 56%|█████▌    | 124/221 [00:48<00:25,  3.82it/s][A
 57%|█████▋    | 125/221 [00:48<00:24,  3.97it/s][A
 57%|█████▋    | 126/221 [00:49<00:43,  2.17it/s][A
 57%|█████▋    | 127/221 [00:49<00:41,  2.27it/s][A
 58%|█████▊    | 128/221 [00:50<00:40,  2.29it/s][A
 58%|█████▊    | 129/221 [00:50<00:34,  2.63it/s][A
 59%|█████▉    | 130/221 [00:50<00:29,  3.13it/s][A
 59%|█████▉    | 131/221 [00:50<00:23,  3.77it/s][A
 60%|█████▉    | 132/221 [00:50<00:23,  3.77it/s][A
 60%|██████    | 133/221 [00:51<00:25,  3.45it/s][A
 61%|██████    | 134/221 [00:51<00:23,  3.73it/s][A
 61%|██████    | 135/221 [00:51<00:26,  3.23it/s][A
 62%|██████▏   | 136/221 [00:52<00:27,  3.15it/s][A
 62%|██████▏   | 137/221 [00:52<00:25,  3.25it/s][A
 62%|██████▏   | 138/221 [00:52<00:27,  3.04it/s][A
 63%|██████▎   | 139/221 [00:53<00:28,  2.83it/s][A
 63%|██████▎   | 140/221 [00:53<00:28,  2.87it/s][A
 64%|██████▍   | 141/221 [00:53<00:24,  3.29it/s][A
 64%|██████▍   | 142/221 [00:54<00:28,  2.77it/s][A
 65%|██████▍   | 143/221 [00:54<00:28,  2.72it/s][A
 65%|██████▌   | 144/221 [00:54<00:22,  3.35it/s][A
 66%|██████▌   | 146/221 [00:55<00:15,  4.86it/s][A
 67%|██████▋   | 147/221 [00:55<00:14,  5.26it/s][A
 67%|██████▋   | 148/221 [00:55<00:14,  4.96it/s][A
 68%|██████▊   | 150/221 [00:55<00:12,  5.73it/s][A
 68%|██████▊   | 151/221 [00:56<00:25,  2.71it/s][A
 69%|██████▉   | 152/221 [00:57<00:25,  2.71it/s][A
 69%|██████▉   | 153/221 [00:57<00:22,  3.01it/s][A
 70%|██████▉   | 154/221 [00:58<00:32,  2.09it/s][A
 70%|███████   | 155/221 [00:58<00:25,  2.62it/s][A
 71%|███████   | 156/221 [00:58<00:20,  3.15it/s][A
 71%|███████   | 157/221 [01:02<01:34,  1.47s/it][A
 71%|███████▏  | 158/221 [01:02<01:08,  1.09s/it][A
 72%|███████▏  | 159/221 [01:03<00:50,  1.23it/s][A
 72%|███████▏  | 160/221 [01:03<00:38,  1.60it/s][A
 73%|███████▎  | 162/221 [01:03<00:22,  2.62it/s][A
 74%|███████▍  | 163/221 [01:03<00:19,  3.01it/s][A
 74%|███████▍  | 164/221 [01:03<00:16,  3.55it/s][A[h264 @ 0x5556e0c94280] mmco: unref short failure
[h264 @ 0x5556e0c94280] mmco: unref short failure

 75%|███████▌  | 166/221 [01:04<00:13,  4.10it/s][A
 76%|███████▌  | 168/221 [01:06<00:36,  1.46it/s][A
 76%|███████▋  | 169/221 [01:07<00:31,  1.64it/s][A
 77%|███████▋  | 170/221 [01:07<00:27,  1.86it/s][A
 77%|███████▋  | 171/221 [01:07<00:22,  2.23it/s][A
 78%|███████▊  | 172/221 [01:07<00:17,  2.74it/s][A
 79%|███████▊  | 174/221 [01:08<00:11,  4.07it/s][A
 79%|███████▉  | 175/221 [01:08<00:11,  4.06it/s][A
 80%|███████▉  | 176/221 [01:08<00:11,  4.00it/s][A
 81%|████████  | 178/221 [01:09<00:10,  4.21it/s][A
 81%|████████  | 179/221 [01:09<00:11,  3.67it/s][A
 82%|████████▏ | 181/221 [01:09<00:08,  4.46it/s][A
 82%|████████▏ | 182/221 [01:09<00:07,  4.94it/s][A
 83%|████████▎ | 183/221 [01:10<00:07,  5.10it/s][A
 83%|████████▎ | 184/221 [01:10<00:07,  5.07it/s][A
 84%|████████▍ | 186/221 [01:10<00:06,  5.49it/s][A
 85%|████████▍ | 187/221 [01:10<00:05,  5.98it/s][A
 85%|████████▌ | 188/221 [01:10<00:06,  5.43it/s][A
 86%|████████▌ | 189/221 [01:11<00:06,  4.96it/s][A
 86%|████████▌ | 190/221 [01:11<00:06,  4.62it/s][A
 87%|████████▋ | 192/221 [01:11<00:05,  5.66it/s][A[h264 @ 0x563548d90040] mmco: unref short failure
[h264 @ 0x563548d90040] mmco: unref short failure

 88%|████████▊ | 194/221 [01:12<00:09,  2.90it/s][A
 89%|████████▊ | 196/221 [01:13<00:06,  4.01it/s][A
 90%|████████▉ | 198/221 [01:13<00:04,  4.86it/s][A
 90%|█████████ | 199/221 [01:13<00:04,  4.64it/s][A
 90%|█████████ | 200/221 [01:13<00:05,  4.13it/s][A
 91%|█████████ | 201/221 [01:14<00:04,  4.08it/s][A
 91%|█████████▏| 202/221 [01:14<00:04,  4.68it/s][A
 92%|█████████▏| 203/221 [01:14<00:03,  4.76it/s][A
 93%|█████████▎| 205/221 [01:14<00:02,  6.49it/s][A
 93%|█████████▎| 206/221 [01:14<00:02,  5.81it/s][A
 94%|█████████▍| 208/221 [01:14<00:01,  7.78it/s][A
 95%|█████████▌| 211/221 [01:15<00:01,  6.55it/s][A
 96%|█████████▌| 212/221 [01:15<00:01,  6.27it/s][A
 97%|█████████▋| 214/221 [01:16<00:01,  3.85it/s][A
 97%|█████████▋| 215/221 [01:16<00:01,  4.05it/s][A
 98%|█████████▊| 216/221 [01:16<00:01,  4.27it/s][A
 98%|█████████▊| 217/221 [01:17<00:01,  3.50it/s][A
 99%|█████████▊| 218/221 [01:17<00:01,  2.91it/s][A
 99%|█████████▉| 219/221 [01:18<00:00,  3.25it/s][A
100%|█████████▉| 220/221 [01:22<00:01,  1.55s/it][A
100%|██████████| 221/221 [01:23<00:00,  1.15s/it][A100%|██████████| 221/221 [01:23<00:00,  2.66it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:04,  3.42it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.42it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.42it/s][A
  3%|▎         | 6/221 [00:01<01:02,  3.42it/s][A
  3%|▎         | 7/221 [00:02<01:02,  3.42it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.42it/s][A
  4%|▍         | 9/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 11/221 [00:03<01:01,  3.42it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.42it/s][A
  6%|▌         | 13/221 [00:03<01:00,  3.42it/s][A
  6%|▋         | 14/221 [00:04<01:00,  3.42it/s][A
  7%|▋         | 15/221 [00:04<01:00,  3.42it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.42it/s][A
  8%|▊         | 17/221 [00:04<00:59,  3.42it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.42it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.42it/s][A
  9%|▉         | 20/221 [00:05<00:58,  3.42it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.42it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.42it/s][A
 10%|█         | 23/221 [00:06<00:57,  3.42it/s][A
 11%|█         | 24/221 [00:07<00:57,  3.42it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.42it/s][A
 12%|█▏        | 26/221 [00:07<00:56,  3.42it/s][A
 12%|█▏        | 27/221 [00:07<00:56,  3.42it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.42it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.42it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.42it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.42it/s][A
 15%|█▍        | 33/221 [00:09<00:54,  3.42it/s][A
 15%|█▌        | 34/221 [00:09<00:54,  3.42it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.42it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.42it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:12<00:51,  3.42it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:14<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:15<00:52,  3.17it/s][A
 25%|██▍       | 55/221 [00:16<00:51,  3.24it/s][A
 25%|██▌       | 56/221 [00:16<00:50,  3.29it/s][A
 26%|██▌       | 57/221 [00:16<00:49,  3.33it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.36it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.38it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.39it/s][A
 28%|██▊       | 61/221 [00:17<00:47,  3.40it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.42it/s][A
 31%|███       | 68/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:22<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:24<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:31<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:33<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:36<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:38<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:45<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:47<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:48<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:32,  6.70it/s][A
  1%|          | 2/221 [00:00<00:44,  4.96it/s][A
  1%|▏         | 3/221 [00:00<00:56,  3.83it/s][A
  2%|▏         | 4/221 [00:00<00:46,  4.69it/s][A
  2%|▏         | 5/221 [00:01<00:42,  5.06it/s][A
  3%|▎         | 6/221 [00:01<00:38,  5.62it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.12it/s][A
  4%|▎         | 8/221 [00:01<01:00,  3.52it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.55it/s][A
  5%|▍         | 10/221 [00:02<00:52,  4.02it/s][A
  5%|▍         | 11/221 [00:02<00:54,  3.86it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.13it/s][A
  6%|▌         | 13/221 [00:03<01:24,  2.47it/s][A
  6%|▋         | 14/221 [00:03<01:10,  2.93it/s][A
  7%|▋         | 15/221 [00:04<01:13,  2.80it/s][A
  7%|▋         | 16/221 [00:04<01:13,  2.79it/s][A
  8%|▊         | 17/221 [00:05<01:20,  2.54it/s][A
  8%|▊         | 18/221 [00:05<01:12,  2.80it/s][A
  9%|▉         | 20/221 [00:05<00:50,  3.95it/s][A
 10%|▉         | 21/221 [00:05<00:46,  4.30it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.74it/s][A
 11%|█         | 24/221 [00:06<00:36,  5.45it/s][A
 11%|█▏        | 25/221 [00:06<00:45,  4.35it/s][A
 12%|█▏        | 26/221 [00:06<00:45,  4.30it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  4.03it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.69it/s][A
 13%|█▎        | 29/221 [00:07<00:53,  3.56it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.43it/s][A
 14%|█▍        | 31/221 [00:08<00:53,  3.57it/s][A
 14%|█▍        | 32/221 [00:08<00:50,  3.75it/s][A
 15%|█▍        | 33/221 [00:08<00:53,  3.54it/s][A
 15%|█▌        | 34/221 [00:09<01:00,  3.07it/s][A
 16%|█▌        | 35/221 [00:09<00:58,  3.19it/s][A
 16%|█▋        | 36/221 [00:09<00:58,  3.16it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.41it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.53it/s][A
 18%|█▊        | 39/221 [00:10<00:51,  3.57it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:11<00:55,  3.23it/s][A
 19%|█▉        | 42/221 [00:11<00:51,  3.50it/s][A
 19%|█▉        | 43/221 [00:12<00:57,  3.12it/s][A
 20%|█▉        | 44/221 [00:12<01:00,  2.91it/s][A
 20%|██        | 45/221 [00:12<01:03,  2.76it/s][A
 21%|██        | 46/221 [00:13<01:00,  2.90it/s][A
 21%|██▏       | 47/221 [00:13<00:54,  3.22it/s][A
 22%|██▏       | 48/221 [00:13<00:46,  3.71it/s][A
 22%|██▏       | 49/221 [00:13<00:37,  4.54it/s][A
 23%|██▎       | 50/221 [00:13<00:43,  3.91it/s][A
 23%|██▎       | 51/221 [00:14<00:43,  3.88it/s][A
 24%|██▍       | 53/221 [00:14<00:41,  4.01it/s][A
 24%|██▍       | 54/221 [00:14<00:43,  3.87it/s][A
 25%|██▍       | 55/221 [00:15<00:48,  3.44it/s][A
 25%|██▌       | 56/221 [00:15<00:50,  3.30it/s][A
 26%|██▌       | 57/221 [00:15<00:47,  3.44it/s][A
 26%|██▌       | 58/221 [00:16<00:40,  3.99it/s][A
 27%|██▋       | 59/221 [00:16<00:41,  3.94it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.40it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.42it/s][A
 28%|██▊       | 62/221 [00:17<00:40,  3.88it/s][A
 29%|██▉       | 64/221 [00:17<00:34,  4.50it/s][A
 29%|██▉       | 65/221 [00:17<00:37,  4.17it/s][A
 30%|██▉       | 66/221 [00:18<00:45,  3.40it/s][A
 30%|███       | 67/221 [00:18<00:51,  2.97it/s][A
 31%|███       | 68/221 [00:18<00:49,  3.11it/s][A
 31%|███       | 69/221 [00:19<00:57,  2.64it/s][A
 32%|███▏      | 70/221 [00:19<00:50,  2.96it/s][A
 32%|███▏      | 71/221 [00:20<00:54,  2.73it/s][A
 33%|███▎      | 72/221 [00:20<00:56,  2.62it/s][A
 33%|███▎      | 73/221 [00:20<00:51,  2.86it/s][A
 33%|███▎      | 74/221 [00:21<00:46,  3.16it/s][A
 34%|███▍      | 75/221 [00:21<00:43,  3.37it/s][A
 34%|███▍      | 76/221 [00:21<00:38,  3.78it/s][A
 35%|███▍      | 77/221 [00:21<00:34,  4.14it/s][A
 35%|███▌      | 78/221 [00:21<00:37,  3.83it/s][A
 36%|███▌      | 79/221 [00:22<00:38,  3.73it/s][A
 36%|███▌      | 80/221 [00:22<00:32,  4.35it/s][A
 37%|███▋      | 81/221 [00:22<00:31,  4.51it/s][A
 37%|███▋      | 82/221 [00:22<00:36,  3.86it/s][A
 38%|███▊      | 83/221 [00:23<00:30,  4.54it/s][A
 38%|███▊      | 84/221 [00:23<00:38,  3.54it/s][A
 38%|███▊      | 85/221 [00:23<00:45,  3.01it/s][A
 39%|███▉      | 86/221 [00:24<00:47,  2.82it/s][A
 39%|███▉      | 87/221 [00:24<00:51,  2.60it/s][A
 40%|███▉      | 88/221 [00:25<00:47,  2.82it/s][A
 40%|████      | 89/221 [00:25<00:50,  2.64it/s][A
 41%|████      | 90/221 [00:26<00:52,  2.48it/s][A
 41%|████      | 91/221 [00:26<00:44,  2.91it/s][A
 42%|████▏     | 92/221 [00:26<00:44,  2.93it/s][A
 42%|████▏     | 93/221 [00:27<00:52,  2.45it/s][A
 43%|████▎     | 94/221 [00:27<00:46,  2.75it/s][A
 43%|████▎     | 95/221 [00:27<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:28<00:50,  2.49it/s][A
 44%|████▍     | 97/221 [00:28<00:46,  2.66it/s][A
 44%|████▍     | 98/221 [00:28<00:45,  2.69it/s][A
 45%|████▍     | 99/221 [00:29<00:43,  2.82it/s][A
 45%|████▌     | 100/221 [00:29<00:36,  3.32it/s][A
 46%|████▌     | 101/221 [00:29<00:32,  3.74it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.47it/s][A
 47%|████▋     | 103/221 [00:30<00:32,  3.65it/s][A
 47%|████▋     | 104/221 [00:30<00:27,  4.30it/s][A
 48%|████▊     | 105/221 [00:30<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:31<00:35,  3.27it/s][A
 48%|████▊     | 107/221 [00:31<00:34,  3.31it/s][A
 49%|████▉     | 108/221 [00:31<00:30,  3.65it/s][A
 49%|████▉     | 109/221 [00:31<00:29,  3.79it/s][A
 50%|████▉     | 110/221 [00:32<00:29,  3.75it/s][A
 50%|█████     | 111/221 [00:32<00:31,  3.46it/s][A
 51%|█████     | 112/221 [00:32<00:32,  3.33it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.39it/s][A
 52%|█████▏    | 114/221 [00:33<00:26,  4.03it/s][A
 52%|█████▏    | 115/221 [00:33<00:23,  4.49it/s][A
 52%|█████▏    | 116/221 [00:33<00:24,  4.28it/s][A
 53%|█████▎    | 117/221 [00:33<00:25,  4.08it/s][A
 53%|█████▎    | 118/221 [00:34<00:29,  3.51it/s][A
 54%|█████▍    | 119/221 [00:34<00:32,  3.13it/s][A
 54%|█████▍    | 120/221 [00:35<00:34,  2.96it/s][A
 55%|█████▍    | 121/221 [00:35<00:32,  3.10it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.47it/s][A
 56%|█████▌    | 123/221 [00:35<00:30,  3.16it/s][A
 56%|█████▌    | 124/221 [00:36<00:32,  2.99it/s][A
 57%|█████▋    | 125/221 [00:36<00:38,  2.52it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.82it/s][A
 57%|█████▋    | 127/221 [00:37<00:35,  2.61it/s][A
 58%|█████▊    | 128/221 [00:37<00:31,  2.95it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.61it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.41it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.44it/s][A
 60%|██████    | 133/221 [00:39<00:29,  3.03it/s][A
 61%|██████    | 134/221 [00:39<00:32,  2.68it/s][A
 61%|██████    | 135/221 [00:39<00:27,  3.14it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.22it/s][A
 62%|██████▏   | 137/221 [00:40<00:23,  3.57it/s][A
 62%|██████▏   | 138/221 [00:40<00:22,  3.73it/s][A
 63%|██████▎   | 139/221 [00:41<00:24,  3.34it/s][A
 63%|██████▎   | 140/221 [00:41<00:21,  3.78it/s][A
 64%|██████▍   | 141/221 [00:41<00:27,  2.94it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.39it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.27it/s][A
 65%|██████▌   | 144/221 [00:42<00:20,  3.75it/s][A
 66%|██████▌   | 145/221 [00:42<00:21,  3.46it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.56it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  4.07it/s][A
 67%|██████▋   | 148/221 [00:43<00:20,  3.48it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.67it/s][A
 68%|██████▊   | 150/221 [00:44<00:19,  3.62it/s][A
 68%|██████▊   | 151/221 [00:44<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:45<00:34,  1.97it/s][A
 69%|██████▉   | 153/221 [00:45<00:29,  2.31it/s][A
 70%|██████▉   | 154/221 [00:46<00:27,  2.48it/s][A
 70%|███████   | 155/221 [00:46<00:25,  2.60it/s][A
 71%|███████   | 156/221 [00:46<00:21,  3.06it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.27it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.04it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.28it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.68it/s][A
 73%|███████▎  | 161/221 [00:47<00:13,  4.31it/s][A
 73%|███████▎  | 162/221 [00:47<00:12,  4.82it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.49it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  4.98it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.19it/s][A
 75%|███████▌  | 166/221 [00:49<00:15,  3.63it/s][A
 76%|███████▌  | 167/221 [00:49<00:12,  4.26it/s][A
 76%|███████▌  | 168/221 [00:49<00:12,  4.24it/s][A
 76%|███████▋  | 169/221 [00:49<00:10,  5.08it/s][A
 77%|███████▋  | 170/221 [00:50<00:15,  3.34it/s][A
 77%|███████▋  | 171/221 [00:50<00:15,  3.14it/s][A
 78%|███████▊  | 172/221 [00:50<00:15,  3.24it/s][A
 78%|███████▊  | 173/221 [00:51<00:15,  3.13it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.40it/s][A
 79%|███████▉  | 175/221 [00:51<00:15,  3.01it/s][A
 80%|███████▉  | 176/221 [00:51<00:12,  3.64it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.63it/s][A
 81%|████████  | 178/221 [00:52<00:17,  2.41it/s][A
 81%|████████  | 179/221 [00:53<00:15,  2.71it/s][A
 81%|████████▏ | 180/221 [00:53<00:12,  3.19it/s][A
 82%|████████▏ | 181/221 [00:53<00:14,  2.76it/s][A
 82%|████████▏ | 182/221 [00:54<00:13,  2.97it/s][A
 83%|████████▎ | 183/221 [00:54<00:12,  3.00it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  3.03it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.80it/s][A
 84%|████████▍ | 186/221 [00:55<00:11,  3.02it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.49it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.35it/s][A
 86%|████████▌ | 189/221 [00:56<00:08,  3.64it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.28it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.74it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.03it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.85it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.53it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  3.77it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.18it/s][A
 89%|████████▉ | 197/221 [00:58<00:09,  2.66it/s][A
 90%|████████▉ | 198/221 [00:59<00:08,  2.61it/s][A
 90%|█████████ | 199/221 [00:59<00:07,  2.99it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.17it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.62it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.30it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.62it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.27it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.53it/s][A
 94%|█████████▎| 207/221 [01:01<00:05,  2.70it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  3.21it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.60it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.37it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.70it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.64it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.79it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.97it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.88it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.80it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.08it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.14it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.50it/s][A
100%|██████████| 221/221 [01:06<00:00,  2.96it/s][A100%|██████████| 221/221 [01:06<00:00,  3.34it/s]
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'area_r1': 39.8, 'area_recall': '39.8/65.0/74.8', 'area_ravg': 59.9}
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'forward_r1': 39.0, 'forward_recall': '39.0/68.4/77.9', 'forward_ravg': 61.8}
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'area_video_r1': 39.4, 'area_video_recall': '39.4/68.7/78.3', 'area_video_ravg': 62.1}
09/17/2024 07:13:52 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 07:13:52 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.1/82.2', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.2/82.5', 'area_video_back_ravg': 68.6}
09/17/2024 07:13:52 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1149=======

09/17/2024 07:13:52 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.1/82.2', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.2/82.5', 'area_video_back_ravg': 68.6}
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'video_r1': 37.6, 'video_recall': '37.6/63.8/75.0', 'video_ravg': 58.8}
09/17/2024 07:13:52 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 07:13:52 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 07:13:52 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1149--===========

09/17/2024 07:13:52 - INFO - __main__ -   {'video_r1': 51.9, 'video_recall': '51.9/74.1/81.3', 'video_ravg': 69.1}
09/17/2024 07:13:52 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 07:13:52 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 07:14:17 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007473574951291084, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.120105504989624, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 1.9471741914749146, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.0747532844543457}
 40%|███▉      | 1150/2910 [7:18:21<64:39:00, 132.24s/it] 40%|███▉      | 1151/2910 [7:18:25<45:44:57, 93.63s/it]  40%|███▉      | 1152/2910 [7:18:28<32:31:09, 66.59s/it] 40%|███▉      | 1153/2910 [7:18:32<23:16:00, 47.67s/it] 40%|███▉      | 1154/2910 [7:18:35<16:47:47, 34.43s/it] 40%|███▉      | 1155/2910 [7:18:39<12:15:57, 25.16s/it] 40%|███▉      | 1156/2910 [7:18:42<9:06:03, 18.68s/it]  40%|███▉      | 1157/2910 [7:18:46<6:53:06, 14.14s/it] 40%|███▉      | 1158/2910 [7:18:49<5:20:03, 10.96s/it] 40%|███▉      | 1159/2910 [7:18:53<4:14:46,  8.73s/it] 40%|███▉      | 1160/2910 [7:18:56<3:29:05,  7.17s/it] 40%|███▉      | 1161/2910 [7:19:00<2:57:07,  6.08s/it] 40%|███▉      | 1162/2910 [7:19:03<2:34:57,  5.32s/it] 40%|███▉      | 1163/2910 [7:19:07<2:19:24,  4.79s/it]/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 07:15:25 - INFO - __main__ -   current idx hvInlSH5o8c.6 from finetune_area returns wrong image/video, use 58277 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 07:15:26 - INFO - __main__ -   current idx EPDKsPkI96E.8 from finetune_area returns wrong image/video, use 53857 instead.
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5586320a0b00] mmco: unref short failure
09/17/2024 07:15:33 - INFO - __main__ -   current idx YaJzQ11Pq8c.26 from finetune_area returns wrong image/video, use 141665 instead.
[h264 @ 0x5576de882040] mmco: unref short failure
[h264 @ 0x55568bcd44c0] mmco: unref short failure
[h264 @ 0x55568bcd44c0] mmco: unref short failure
[h264 @ 0x56354122b200] mmco: unref short failure
[h264 @ 0x5576dec58e80] mmco: unref short failure
[h264 @ 0x563540738000] mmco: unref short failure
[h264 @ 0x563540738000] mmco: unref short failure
[h264 @ 0x563540400c40] mmco: unref short failure
[h264 @ 0x558631eb9380] mmco: unref short failure
[h264 @ 0x558631eb9380] mmco: unref short failure
[h264 @ 0x5635413813c0] mmco: unref short failure
[h264 @ 0x5576ded5e880] mmco: unref short failure
[h264 @ 0x5576ded5e880] mmco: unref short failure
[h264 @ 0x5586327e2d00] mmco: unref short failure
[h264 @ 0x557717ad3f80] mmco: unref short failure
[h264 @ 0x5576dfd21500] mmco: unref short failure
[h264 @ 0x5576dfd21500] mmco: unref short failure
[h264 @ 0x5635415231c0] mmco: unref short failure
[h264 @ 0x5635415231c0] mmco: unref short failure
[h264 @ 0x5576dec55b80] mmco: unref short failure
[h264 @ 0x5576dec55b80] mmco: unref short failure
[h264 @ 0x563546bc8880] mmco: unref short failure
[h264 @ 0x563546bc8880] mmco: unref short failure
[h264 @ 0x55568b775d80] mmco: unref short failure
[h264 @ 0x55568b775d80] mmco: unref short failure
[h264 @ 0x55568bc81c00] mmco: unref short failure
[h264 @ 0x55568bc81c00] mmco: unref short failure
[h264 @ 0x55568bc81c00] mmco: unref short failure
09/17/2024 07:17:01 - INFO - __main__ -   current idx dMEgMG6TS3c.6 from finetune_area returns wrong image/video, use 15963 instead.
[h264 @ 0x5556c484a9c0] mmco: unref short failure
[h264 @ 0x55771d50e140] mmco: unref short failure
09/17/2024 07:17:25 - INFO - __main__ -   current idx 0qE_NisFgLw.2 from finetune_area returns wrong image/video, use 137038 instead.
[h264 @ 0x5556c40af880] mmco: unref short failure
[h264 @ 0x55568d622b80] mmco: unref short failure
[h264 @ 0x55568d622b80] mmco: unref short failure
[h264 @ 0x55568d622b80] mmco: unref short failure
[h264 @ 0x55568d622b80] mmco: unref short failure
[h264 @ 0x5635451723c0] mmco: unref short failure
[h264 @ 0x5635451723c0] mmco: unref short failure
[h264 @ 0x5635465daac0] mmco: unref short failure
[h264 @ 0x5635408ee740] mmco: unref short failure
[h264 @ 0x5635408ee740] mmco: unref short failure
[h264 @ 0x5556c3c5ff00] mmco: unref short failure
 40%|████      | 1164/2910 [7:21:57<26:22:38, 54.39s/it][h264 @ 0x5576df3af880] mmco: unref short failure
[h264 @ 0x5576df3af880] mmco: unref short failure
[h264 @ 0x5576df3af880] mmco: unref short failure
[h264 @ 0x5576df3af880] mmco: unref short failure
[h264 @ 0x5576e0dd1640] mmco: unref short failure
[h264 @ 0x5576e0dd1640] mmco: unref short failure
[h264 @ 0x5576e0dd1640] mmco: unref short failure
 40%|████      | 1165/2910 [7:22:04<19:30:27, 40.25s/it]09/17/2024 07:18:07 - INFO - __main__ -   current idx jwBpRLj02q4.46 from finetune_area returns wrong image/video, use 48306 instead.
[h264 @ 0x563542ac2980] mmco: unref short failure
 40%|████      | 1166/2910 [7:22:11<14:40:25, 30.29s/it][h264 @ 0x5576e1119a80] mmco: unref short failure
[h264 @ 0x5576e1119a80] mmco: unref short failure
[h264 @ 0x558636e364c0] mmco: unref short failure
[h264 @ 0x558636e364c0] mmco: unref short failure
 40%|████      | 1167/2910 [7:22:18<11:09:54, 23.06s/it][h264 @ 0x563543f3d940] mmco: unref short failure
[h264 @ 0x55771d575380] mmco: unref short failure
[h264 @ 0x55771d575380] mmco: unref short failure
[h264 @ 0x55771bbdd680] mmco: unref short failure
[h264 @ 0x55568d4d2680] mmco: unref short failure
 40%|████      | 1168/2910 [7:22:24<8:48:46, 18.21s/it] [h264 @ 0x563540fab180] mmco: unref short failure
[h264 @ 0x563541573840] mmco: unref short failure
 40%|████      | 1169/2910 [7:22:32<7:14:08, 14.96s/it][h264 @ 0x563543b6dec0] mmco: unref short failure
09/17/2024 07:18:34 - INFO - __main__ -   current idx _QteUi76_ZA.36 from finetune_area returns wrong image/video, use 148529 instead.
 40%|████      | 1170/2910 [7:22:38<6:00:08, 12.42s/it][h264 @ 0x5576df54ec40] mmco: unref short failure
[h264 @ 0x5576df54ec40] mmco: unref short failure
[h264 @ 0x5556c589fb00] mmco: unref short failure
[h264 @ 0x5556c589fb00] mmco: unref short failure
 40%|████      | 1171/2910 [7:22:45<5:09:17, 10.67s/it][h264 @ 0x563542890100] mmco: unref short failure
[h264 @ 0x563542890100] mmco: unref short failure
[h264 @ 0x563542890100] mmco: unref short failure
[h264 @ 0x563542890100] mmco: unref short failure
[h264 @ 0x5556c7dd4380] mmco: unref short failure
09/17/2024 07:18:59 - INFO - __main__ -   current idx VF7SD44bbzI.9 from finetune_area returns wrong image/video, use 61383 instead.
[h264 @ 0x55568c5f7500] mmco: unref short failure
[h264 @ 0x55568c5f7500] mmco: unref short failure
[h264 @ 0x5635417feb40] mmco: unref short failure
[h264 @ 0x5635417feb40] mmco: unref short failure
09/17/2024 07:19:11 - INFO - __main__ -   current idx Fo_7-g_Hdvc.61 from finetune_area returns wrong image/video, use 70544 instead.
[h264 @ 0x5556cf7da500] mmco: unref short failure
[h264 @ 0x5556cf7da500] mmco: unref short failure
[h264 @ 0x5556c735ae80] mmco: unref short failure
[h264 @ 0x5556c735ae80] mmco: unref short failure
[h264 @ 0x56354344e800] mmco: unref short failure
[h264 @ 0x55772093e000] mmco: unref short failure
[h264 @ 0x55772093e000] mmco: unref short failure
[h264 @ 0x56354117f580] mmco: unref short failure
[h264 @ 0x5576e0e48780] mmco: unref short failure
[h264 @ 0x5576e0e48780] mmco: unref short failure
09/17/2024 07:19:48 - INFO - __main__ -   current idx 9GAdW4Xa3MU.69 from finetune_area returns wrong image/video, use 76622 instead.
[h264 @ 0x5577223f5700] mmco: unref short failure
[h264 @ 0x56354a9c8600] mmco: unref short failure
[h264 @ 0x56354a9c8600] mmco: unref short failure
[h264 @ 0x56354a9c8600] mmco: unref short failure
[h264 @ 0x5577180d5200] mmco: unref short failure
[h264 @ 0x558632dcdb40] mmco: unref short failure
 40%|████      | 1172/2910 [7:24:20<17:22:40, 36.00s/it][h264 @ 0x5576decaee40] mmco: unref short failure
 40%|████      | 1173/2910 [7:24:27<13:09:49, 27.28s/it]09/17/2024 07:20:27 - INFO - __main__ -   current idx iQnvNd6wTj4.78 from finetune_area returns wrong image/video, use 33910 instead.
 40%|████      | 1174/2910 [7:24:35<10:20:44, 21.45s/it][h264 @ 0x55568ce3c940] mmco: unref short failure
[h264 @ 0x563545ec9c80] mmco: unref short failure
[h264 @ 0x563545ec9c80] mmco: unref short failure
 40%|████      | 1175/2910 [7:24:42<8:16:18, 17.16s/it]  40%|████      | 1176/2910 [7:24:49<6:46:01, 14.05s/it][h264 @ 0x5586391dd500] mmco: unref short failure
[h264 @ 0x5586391dd500] mmco: unref short failure
09/17/2024 07:20:53 - INFO - __main__ -   current idx bKcVjDTXHbM.6 from finetune_area returns wrong image/video, use 109854 instead.
[h264 @ 0x563542aa72c0] mmco: unref short failure
 40%|████      | 1177/2910 [7:24:56<5:43:53, 11.91s/it][h264 @ 0x5556cc05f340] mmco: unref short failure
[h264 @ 0x5556cc05f340] mmco: unref short failure
[h264 @ 0x5556cc05f340] mmco: unref short failure
[h264 @ 0x5556cc05f340] mmco: unref short failure
[h264 @ 0x55863d3e4280] mmco: unref short failure
[h264 @ 0x55863d3e4280] mmco: unref short failure
 40%|████      | 1178/2910 [7:25:03<5:02:34, 10.48s/it][h264 @ 0x55568c00f900] mmco: unref short failure
[h264 @ 0x55568c00f900] mmco: unref short failure
 41%|████      | 1179/2910 [7:25:10<4:29:21,  9.34s/it]09/17/2024 07:21:11 - INFO - __main__ -   current idx E852WPZZnME.32 from finetune_area returns wrong image/video, use 103597 instead.
[h264 @ 0x5556c8cd3040] mmco: unref short failure
[h264 @ 0x5556c8cd3040] mmco: unref short failure
[h264 @ 0x5576dff60480] mmco: unref short failure
[h264 @ 0x5576dff60480] mmco: unref short failure
[h264 @ 0x55863b34e080] mmco: unref short failure
[h264 @ 0x563549128200] mmco: unref short failure
[h264 @ 0x563549128200] mmco: unref short failure
[h264 @ 0x558638937200] mmco: unref short failure
[h264 @ 0x558638937200] mmco: unref short failure
[h264 @ 0x55771e5d13c0] mmco: unref short failure
[h264 @ 0x55771e5d13c0] mmco: unref short failure
[h264 @ 0x563541e99e40] mmco: unref short failure
[h264 @ 0x5577208f4640] mmco: unref short failure
[h264 @ 0x5556c573f140] mmco: unref short failure
[h264 @ 0x5556c573f140] mmco: unref short failure
[h264 @ 0x558632182e40] mmco: unref short failure
[h264 @ 0x5635438eb940] mmco: unref short failure
[h264 @ 0x5635438eb940] mmco: unref short failure
[h264 @ 0x5635438eb940] mmco: unref short failure
[h264 @ 0x5635438eb940] mmco: unref short failure
[h264 @ 0x5556c4170800] mmco: unref short failure
[h264 @ 0x563549801dc0] mmco: unref short failure
[h264 @ 0x563549801dc0] mmco: unref short failure
[h264 @ 0x55771fb99a80] mmco: unref short failure
[h264 @ 0x55771fb99a80] mmco: unref short failure
[h264 @ 0x55771fb99a80] mmco: unref short failure
[h264 @ 0x55771fb99a80] mmco: unref short failure
09/17/2024 07:21:58 - INFO - __main__ -   current idx A2e7HyCQqvE.54 from finetune_area returns wrong image/video, use 16231 instead.
[h264 @ 0x5586430ced80] mmco: unref short failure
[h264 @ 0x5586430ced80] mmco: unref short failure
[h264 @ 0x5635521b0800] mmco: unref short failure
09/17/2024 07:22:17 - INFO - __main__ -   current idx edpFNTpJidw.6 from finetune_area returns wrong image/video, use 65972 instead.
[h264 @ 0x55771ff447c0] mmco: unref short failure
[h264 @ 0x55771ff447c0] mmco: unref short failure
[h264 @ 0x5576df8f22c0] mmco: unref short failure
[h264 @ 0x5576df8f22c0] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x563545034bc0] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
[h264 @ 0x55771eee1e00] mmco: unref short failure
 41%|████      | 1180/2910 [7:26:44<16:46:31, 34.91s/it][h264 @ 0x5556ca496240] mmco: unref short failure
09/17/2024 07:22:52 - INFO - __main__ -   current idx sisprxhsc6I.5 from finetune_area returns wrong image/video, use 11803 instead.
 41%|████      | 1181/2910 [7:26:57<13:38:34, 28.41s/it][h264 @ 0x5556ca06d8c0] mmco: unref short failure
 41%|████      | 1182/2910 [7:27:06<10:44:41, 22.39s/it][h264 @ 0x558635772280] mmco: unref short failure
 41%|████      | 1183/2910 [7:27:12<8:22:53, 17.47s/it]  41%|████      | 1184/2910 [7:27:19<6:51:55, 14.32s/it][h264 @ 0x5576dea8bbc0] mmco: unref short failure
[h264 @ 0x558639da82c0] mmco: unref short failure
[h264 @ 0x558639da82c0] mmco: unref short failure
[h264 @ 0x5556cf7cd6c0] mmco: unref short failure
 41%|████      | 1185/2910 [7:27:26<5:49:16, 12.15s/it][h264 @ 0x557718960b00] mmco: unref short failure
[h264 @ 0x557718960b00] mmco: unref short failure
[h264 @ 0x56354594f380] mmco: unref short failure
[h264 @ 0x56354594f380] mmco: unref short failure
[h264 @ 0x563547bcdcc0] mmco: unref short failure
[h264 @ 0x563547bcdcc0] mmco: unref short failure
 41%|████      | 1186/2910 [7:27:32<4:57:57, 10.37s/it] 41%|████      | 1187/2910 [7:27:40<4:35:08,  9.58s/it][h264 @ 0x563548bb3e00] mmco: unref short failure
[h264 @ 0x558637952240] mmco: unref short failure
[h264 @ 0x558637952240] mmco: unref short failure
[h264 @ 0x563542c0dd80] mmco: unref short failure
[h264 @ 0x5556ca657a80] mmco: unref short failure
[h264 @ 0x5556ca657a80] mmco: unref short failure
[h264 @ 0x55568b709ac0] mmco: unref short failure
[h264 @ 0x55568b709ac0] mmco: unref short failure
[h264 @ 0x5576dee0ce40] mmco: unref short failure
[h264 @ 0x5576dee0ce40] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5586404b8d00] mmco: unref short failure
[h264 @ 0x5556ce7e1040] mmco: unref short failure
[h264 @ 0x5556ce7e1040] mmco: unref short failure
[h264 @ 0x55771d133700] mmco: unref short failure
[h264 @ 0x56354a8f7e80] mmco: unref short failure
[h264 @ 0x56354a8f7e80] mmco: unref short failure
 41%|████      | 1188/2910 [7:29:17<17:07:25, 35.80s/it][h264 @ 0x557719595100] mmco: unref short failure
[h264 @ 0x557719595100] mmco: unref short failure
[h264 @ 0x563551657880] mmco: unref short failure
 41%|████      | 1189/2910 [7:29:36<14:45:05, 30.86s/it][h264 @ 0x5556cabbc300] mmco: unref short failure
[h264 @ 0x5556cabbc300] mmco: unref short failure
 41%|████      | 1190/2910 [7:29:43<11:23:00, 23.83s/it][h264 @ 0x563548e4be40] mmco: unref short failure
[h264 @ 0x563548e4be40] mmco: unref short failure
 41%|████      | 1191/2910 [7:29:49<8:46:54, 18.39s/it] [h264 @ 0x55771d2a2080] mmco: unref short failure
[h264 @ 0x55771d2a2080] mmco: unref short failure
[h264 @ 0x557719595100] mmco: unref short failure
 41%|████      | 1192/2910 [7:29:56<7:06:37, 14.90s/it][h264 @ 0x5556d8882500] mmco: unref short failure
 41%|████      | 1193/2910 [7:30:03<5:56:59, 12.48s/it][h264 @ 0x5635442e6c40] mmco: unref short failure
09/17/2024 07:26:04 - INFO - __main__ -   current idx gVhwSbu4UfU.1 from finetune_area returns wrong image/video, use 49459 instead.
 41%|████      | 1194/2910 [7:30:09<5:05:34, 10.68s/it][h264 @ 0x563543972cc0] mmco: unref short failure
 41%|████      | 1195/2910 [7:30:16<4:33:29,  9.57s/it]09/17/2024 07:26:28 - INFO - __main__ -   current idx rGthtRZl8B0.21 from finetune_area returns wrong image/video, use 18014 instead.
[h264 @ 0x55863b17bec0] mmco: unref short failure
[h264 @ 0x55863b17bec0] mmco: unref short failure
[h264 @ 0x5556d1a6ae80] mmco: unref short failure
[h264 @ 0x5556d1a6ae80] mmco: unref short failure
[h264 @ 0x5556c55c4b40] mmco: unref short failure
[h264 @ 0x5556c55c4b40] mmco: unref short failure
[h264 @ 0x5556cb762a00] mmco: unref short failure
[h264 @ 0x5556d46b2100] mmco: unref short failure
[h264 @ 0x5556d46b2100] mmco: unref short failure
[h264 @ 0x558640d43080] mmco: unref short failure
[h264 @ 0x558640d43080] mmco: unref short failure
[h264 @ 0x558640d43080] mmco: unref short failure
[h264 @ 0x55863f608900] mmco: unref short failure
[h264 @ 0x55771dcfacc0] mmco: unref short failure
[h264 @ 0x55771dcfacc0] mmco: unref short failure
[h264 @ 0x55771e2492c0] mmco: unref short failure
[h264 @ 0x5556d0ac0d80] mmco: unref short failure
[h264 @ 0x5577237cb800] mmco: unref short failure
[h264 @ 0x5577237cb800] mmco: unref short failure
[h264 @ 0x558635f96440] mmco: unref short failure
[h264 @ 0x558635f96440] mmco: unref short failure
[h264 @ 0x55863bf9c980] mmco: unref short failure
[h264 @ 0x55863bf9c980] mmco: unref short failure
[h264 @ 0x5635437513c0] mmco: unref short failure
[h264 @ 0x5635437513c0] mmco: unref short failure
[h264 @ 0x55863e9ddf80] mmco: unref short failure
[h264 @ 0x55863e9ddf80] mmco: unref short failure
[h264 @ 0x5556d8677240] mmco: unref short failure
[h264 @ 0x5576df8f2740] mmco: unref short failure
09/17/2024 07:27:26 - INFO - __main__ -   current idx ABt7P6s9bFM.27 from finetune_area returns wrong image/video, use 18727 instead.
[h264 @ 0x5556c5f98dc0] mmco: unref short failure
[h264 @ 0x5556c5f98dc0] mmco: unref short failure
[h264 @ 0x5635437515c0] mmco: unref short failure
[h264 @ 0x55568bf74f00] mmco: unref short failure
[h264 @ 0x55568bf74f00] mmco: unref short failure
 41%|████      | 1196/2910 [7:31:45<15:50:45, 33.28s/it]09/17/2024 07:27:51 - INFO - __main__ -   current idx 7KJbYhfV6fg.3 from finetune_area returns wrong image/video, use 52439 instead.
[h264 @ 0x5576ded86f40] mmco: unref short failure
[h264 @ 0x5576ded86f40] mmco: unref short failure
[h264 @ 0x5576ded86f40] mmco: unref short failure
[h264 @ 0x5576ded86f40] mmco: unref short failure
[h264 @ 0x5556c4529b00] mmco: unref short failure
[h264 @ 0x5556c4529b00] mmco: unref short failure
[h264 @ 0x563547afb940] mmco: unref short failure
[h264 @ 0x563547afb940] mmco: unref short failure
[h264 @ 0x558633938800] mmco: unref short failure
[h264 @ 0x558633938800] mmco: unref short failure
 41%|████      | 1197/2910 [7:32:03<13:37:25, 28.63s/it][h264 @ 0x557717e61580] mmco: unref short failure
[h264 @ 0x557717e61580] mmco: unref short failure
[h264 @ 0x557717e61580] mmco: unref short failure
[h264 @ 0x557717e61580] mmco: unref short failure
[h264 @ 0x55863fcfc440] mmco: unref short failure
 41%|████      | 1198/2910 [7:32:09<10:26:32, 21.96s/it] 41%|████      | 1199/2910 [7:32:16<8:15:01, 17.36s/it] 09/17/2024 07:28:14 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 07:28:14 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x558632cdf9c0] mmco: unref short failure
[h264 @ 0x558632cdf9c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55771e5996c0] mmco: unref short failure
[h264 @ 0x55771e5996c0] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
[h264 @ 0x558645e1e380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56354a999a40] mmco: unref short failure
09/17/2024 07:29:09 - INFO - __main__ -   current idx fghob2AsEWE.61 from finetune_area returns wrong image/video, use 79709 instead.
[h264 @ 0x558639c52bc0] mmco: unref short failure
[h264 @ 0x558639c52bc0] mmco: unref short failure
[h264 @ 0x558640480a40] mmco: unref short failure
[h264 @ 0x558640480a40] mmco: unref short failure
[h264 @ 0x55771cfd8e40] mmco: unref short failure
[h264 @ 0x55771cfd8e40] mmco: unref short failure
[h264 @ 0x56354ebcf2c0] mmco: unref short failure
[h264 @ 0x56354ebcf2c0] mmco: unref short failure
[h264 @ 0x56354ebcf2c0] mmco: unref short failure
[h264 @ 0x56354ebcf2c0] mmco: unref short failure
[h264 @ 0x55772513aa40] mmco: unref short failure
[h264 @ 0x55772513aa40] mmco: unref short failure
[h264 @ 0x563543e371c0] mmco: unref short failure
[h264 @ 0x558631669e80] mmco: unref short failure
[h264 @ 0x558631669e80] mmco: unref short failure
[h264 @ 0x558644409b40] mmco: unref short failure
[h264 @ 0x558644409b40] mmco: unref short failure
[h264 @ 0x557729d04300] mmco: unref short failure
[h264 @ 0x55771ae6e100] mmco: unref short failure
[h264 @ 0x55771ae6e100] mmco: unref short failure
[h264 @ 0x5556d151b080] mmco: unref short failure
[h264 @ 0x55772420e180] mmco: unref short failure
[h264 @ 0x55772420e180] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:29,  2.47it/s][A
  1%|          | 2/221 [00:00<01:33,  2.33it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.46it/s][A
  2%|▏         | 4/221 [00:01<00:47,  4.61it/s][A
  3%|▎         | 6/221 [00:01<00:30,  7.09it/s][A
  3%|▎         | 7/221 [00:01<00:37,  5.69it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.43it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.88it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.39it/s][A
  5%|▌         | 12/221 [00:03<01:07,  3.09it/s][A
  6%|▋         | 14/221 [00:04<01:10,  2.95it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.19it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.45it/s][A
  8%|▊         | 17/221 [00:04<00:53,  3.78it/s][A
  8%|▊         | 18/221 [00:04<00:54,  3.75it/s][A
  9%|▊         | 19/221 [00:05<00:49,  4.11it/s][A
  9%|▉         | 20/221 [00:05<00:43,  4.64it/s][A
 10%|▉         | 21/221 [00:05<00:41,  4.77it/s][A
 10%|▉         | 22/221 [00:05<00:41,  4.82it/s][A
 10%|█         | 23/221 [00:05<00:35,  5.61it/s][A
 11%|█         | 24/221 [00:05<00:32,  6.08it/s][A
 11%|█▏        | 25/221 [00:06<00:31,  6.19it/s][A
 12%|█▏        | 26/221 [00:06<00:36,  5.41it/s][A
 13%|█▎        | 28/221 [00:06<00:36,  5.31it/s][A
 13%|█▎        | 29/221 [00:06<00:33,  5.66it/s][A
 14%|█▎        | 30/221 [00:07<00:34,  5.47it/s][A
 14%|█▍        | 31/221 [00:07<00:31,  6.06it/s][A
 15%|█▍        | 33/221 [00:07<00:48,  3.89it/s][A
 16%|█▌        | 35/221 [00:08<00:40,  4.58it/s][A
 16%|█▋        | 36/221 [00:08<00:41,  4.49it/s][A
 17%|█▋        | 37/221 [00:09<01:03,  2.88it/s][A
 17%|█▋        | 38/221 [00:09<01:00,  3.03it/s][A
 18%|█▊        | 39/221 [00:09<00:49,  3.65it/s][A
 18%|█▊        | 40/221 [00:09<00:48,  3.70it/s][A
 19%|█▊        | 41/221 [00:10<00:42,  4.20it/s][A
 19%|█▉        | 42/221 [00:11<01:20,  2.23it/s][A
 20%|█▉        | 44/221 [00:11<00:51,  3.43it/s][A
 20%|██        | 45/221 [00:12<01:30,  1.94it/s][A
 21%|██        | 46/221 [00:13<01:38,  1.78it/s][A
 21%|██▏       | 47/221 [00:14<02:33,  1.13it/s][A
 22%|██▏       | 49/221 [00:15<01:34,  1.82it/s][A
 23%|██▎       | 51/221 [00:15<01:02,  2.71it/s][A
 24%|██▎       | 52/221 [00:15<00:53,  3.18it/s][A
 24%|██▍       | 53/221 [00:15<00:45,  3.69it/s][A
 24%|██▍       | 54/221 [00:17<01:45,  1.58it/s][A
 25%|██▍       | 55/221 [00:17<01:30,  1.83it/s][A
 25%|██▌       | 56/221 [00:17<01:12,  2.28it/s][A
 26%|██▌       | 57/221 [00:18<01:06,  2.45it/s][A
 26%|██▌       | 58/221 [00:18<00:56,  2.89it/s][A
 27%|██▋       | 59/221 [00:18<00:46,  3.46it/s][A
 27%|██▋       | 60/221 [00:18<00:56,  2.83it/s][A
 28%|██▊       | 61/221 [00:19<00:47,  3.34it/s][A
 28%|██▊       | 62/221 [00:19<00:39,  4.02it/s][A
 29%|██▊       | 63/221 [00:19<00:34,  4.53it/s][A
 29%|██▉       | 65/221 [00:19<00:28,  5.48it/s][A
 30%|██▉       | 66/221 [00:20<00:43,  3.57it/s][A
 30%|███       | 67/221 [00:20<00:40,  3.80it/s][A
 31%|███       | 68/221 [00:20<00:37,  4.10it/s][A
 31%|███       | 69/221 [00:21<00:48,  3.13it/s][A
 32%|███▏      | 70/221 [00:21<00:41,  3.67it/s][A[h264 @ 0x56354ae4ba80] mmco: unref short failure

 32%|███▏      | 71/221 [00:25<03:45,  1.50s/it][A
 33%|███▎      | 72/221 [00:25<02:47,  1.13s/it][A
 33%|███▎      | 73/221 [00:26<02:13,  1.11it/s][A
 33%|███▎      | 74/221 [00:26<01:38,  1.50it/s][A
 34%|███▍      | 75/221 [00:26<01:19,  1.84it/s][A
 34%|███▍      | 76/221 [00:26<01:01,  2.34it/s][A
 35%|███▍      | 77/221 [00:27<00:52,  2.74it/s][A
 35%|███▌      | 78/221 [00:27<00:46,  3.10it/s][A
 36%|███▌      | 79/221 [00:27<01:00,  2.36it/s][A
 36%|███▌      | 80/221 [00:28<00:47,  2.96it/s][A
 37%|███▋      | 81/221 [00:28<00:44,  3.12it/s][A
 37%|███▋      | 82/221 [00:28<00:40,  3.43it/s][A
 38%|███▊      | 83/221 [00:28<00:32,  4.23it/s][A
 38%|███▊      | 84/221 [00:28<00:27,  4.97it/s][A
 39%|███▉      | 86/221 [00:28<00:19,  6.89it/s][A
 39%|███▉      | 87/221 [00:29<00:25,  5.30it/s][A
 40%|███▉      | 88/221 [00:29<00:28,  4.61it/s][A
 40%|████      | 89/221 [00:33<02:26,  1.11s/it][A
 41%|████      | 90/221 [00:33<01:50,  1.18it/s][A
 42%|████▏     | 92/221 [00:33<01:06,  1.93it/s][A
 42%|████▏     | 93/221 [00:34<01:06,  1.93it/s][A
 43%|████▎     | 94/221 [00:34<01:02,  2.02it/s][A
 43%|████▎     | 95/221 [00:34<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:34<00:47,  2.61it/s][A
 44%|████▍     | 97/221 [00:35<00:39,  3.14it/s][A
 44%|████▍     | 98/221 [00:35<00:36,  3.37it/s][A
 45%|████▍     | 99/221 [00:35<00:30,  4.01it/s][A
 45%|████▌     | 100/221 [00:35<00:27,  4.37it/s][A
 46%|████▌     | 101/221 [00:35<00:28,  4.28it/s][A
 46%|████▌     | 102/221 [00:36<00:28,  4.16it/s][A
 47%|████▋     | 104/221 [00:36<00:19,  6.03it/s][A
 48%|████▊     | 105/221 [00:36<00:22,  5.18it/s][A
 48%|████▊     | 106/221 [00:37<00:35,  3.22it/s][A
 48%|████▊     | 107/221 [00:37<00:30,  3.75it/s][A
 49%|████▉     | 108/221 [00:37<00:26,  4.20it/s][A
 49%|████▉     | 109/221 [00:37<00:23,  4.74it/s][A
 50%|█████     | 111/221 [00:38<00:24,  4.43it/s][A
 51%|█████     | 112/221 [00:38<00:24,  4.49it/s][A
 51%|█████     | 113/221 [00:38<00:25,  4.23it/s][A
 52%|█████▏    | 115/221 [00:38<00:17,  6.09it/s][A[h264 @ 0x55864444dcc0] mmco: unref short failure
[h264 @ 0x55864444dcc0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:43<02:14,  1.28s/it][A
 53%|█████▎    | 117/221 [00:44<01:47,  1.04s/it][A
 53%|█████▎    | 118/221 [00:44<01:24,  1.21it/s][A
 54%|█████▍    | 119/221 [00:44<01:05,  1.56it/s][A
 54%|█████▍    | 120/221 [00:44<00:51,  1.98it/s][A
 55%|█████▍    | 121/221 [00:44<00:39,  2.53it/s][A
 55%|█████▌    | 122/221 [00:44<00:33,  2.96it/s][A
 56%|█████▌    | 123/221 [00:45<00:27,  3.56it/s][A
 56%|█████▌    | 124/221 [00:45<00:23,  4.18it/s][A
 57%|█████▋    | 125/221 [00:45<00:21,  4.37it/s][A
 57%|█████▋    | 126/221 [00:46<00:39,  2.41it/s][A
 57%|█████▋    | 127/221 [00:46<00:37,  2.53it/s][A
 58%|█████▊    | 128/221 [00:47<00:38,  2.42it/s][A
 58%|█████▊    | 129/221 [00:47<00:33,  2.75it/s][A
 59%|█████▉    | 130/221 [00:47<00:27,  3.29it/s][A
 59%|█████▉    | 131/221 [00:47<00:21,  4.10it/s][A
 60%|█████▉    | 132/221 [00:47<00:19,  4.65it/s][A
 60%|██████    | 133/221 [00:48<00:23,  3.77it/s][A
 61%|██████    | 134/221 [00:48<00:21,  3.99it/s][A
 61%|██████    | 135/221 [00:48<00:26,  3.25it/s][A
 62%|██████▏   | 136/221 [00:49<00:28,  3.03it/s][A
 62%|██████▏   | 137/221 [00:49<00:28,  2.93it/s][A
 62%|██████▏   | 138/221 [00:49<00:29,  2.82it/s][A
 63%|██████▎   | 139/221 [00:50<00:30,  2.72it/s][A[h264 @ 0x55772484e540] mmco: unref short failure
[h264 @ 0x55772484e540] mmco: unref short failure

 63%|██████▎   | 140/221 [00:50<00:27,  2.91it/s][A
 64%|██████▍   | 141/221 [00:50<00:24,  3.25it/s][A
 64%|██████▍   | 142/221 [00:51<00:26,  3.03it/s][A
 65%|██████▍   | 143/221 [00:51<00:26,  2.99it/s][A
 66%|██████▌   | 145/221 [00:51<00:16,  4.57it/s][A
 67%|██████▋   | 147/221 [00:51<00:11,  6.31it/s][A
 67%|██████▋   | 148/221 [00:52<00:13,  5.25it/s][A
 68%|██████▊   | 150/221 [00:52<00:11,  5.95it/s][A
 68%|██████▊   | 151/221 [00:53<00:19,  3.52it/s][A
 69%|██████▉   | 152/221 [00:53<00:20,  3.35it/s][A
 69%|██████▉   | 153/221 [00:53<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:54<00:26,  2.51it/s][A
 70%|███████   | 155/221 [00:54<00:21,  3.12it/s][A
 71%|███████   | 157/221 [00:59<01:17,  1.21s/it][A
 71%|███████▏  | 158/221 [00:59<00:59,  1.05it/s][A
 72%|███████▏  | 159/221 [00:59<00:46,  1.33it/s][A[h264 @ 0x5556d119dd00] mmco: unref short failure
[h264 @ 0x5556d119dd00] mmco: unref short failure

 72%|███████▏  | 160/221 [00:59<00:36,  1.68it/s][A
 73%|███████▎  | 162/221 [00:59<00:22,  2.63it/s][A
 74%|███████▍  | 163/221 [01:00<00:18,  3.08it/s][A
 74%|███████▍  | 164/221 [01:00<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [01:00<00:13,  4.19it/s][A
 76%|███████▌  | 167/221 [01:00<00:11,  4.79it/s][A
 76%|███████▌  | 168/221 [01:03<00:49,  1.08it/s][A
 76%|███████▋  | 169/221 [01:04<00:39,  1.32it/s][A
 77%|███████▋  | 170/221 [01:04<00:32,  1.55it/s][A
 77%|███████▋  | 171/221 [01:04<00:25,  1.97it/s][A
 78%|███████▊  | 172/221 [01:04<00:21,  2.31it/s][A
 78%|███████▊  | 173/221 [01:04<00:16,  2.92it/s][A
 79%|███████▊  | 174/221 [01:05<00:13,  3.38it/s][A
 79%|███████▉  | 175/221 [01:05<00:13,  3.35it/s][A[h264 @ 0x558646da5dc0] mmco: unref short failure

 80%|███████▉  | 176/221 [01:05<00:13,  3.33it/s][A
 80%|████████  | 177/221 [01:05<00:11,  3.90it/s][A
 81%|████████  | 178/221 [01:06<00:12,  3.49it/s][A
 81%|████████  | 179/221 [01:06<00:15,  2.78it/s][A
 81%|████████▏ | 180/221 [01:06<00:11,  3.51it/s][A
 82%|████████▏ | 181/221 [01:07<00:11,  3.51it/s][A
 82%|████████▏ | 182/221 [01:07<00:09,  4.00it/s][A
 83%|████████▎ | 183/221 [01:07<00:08,  4.25it/s][A
 83%|████████▎ | 184/221 [01:07<00:09,  3.83it/s][A
 84%|████████▎ | 185/221 [01:07<00:07,  4.59it/s][A
 84%|████████▍ | 186/221 [01:08<00:08,  4.06it/s][A
 85%|████████▍ | 187/221 [01:08<00:08,  4.03it/s][A
 85%|████████▌ | 188/221 [01:08<00:08,  4.06it/s][A
 86%|████████▌ | 189/221 [01:09<00:08,  3.87it/s][A
 86%|████████▌ | 190/221 [01:09<00:07,  3.96it/s][A
 87%|████████▋ | 192/221 [01:09<00:05,  4.98it/s][A
 88%|████████▊ | 194/221 [01:10<00:08,  3.24it/s][A
 88%|████████▊ | 195/221 [01:10<00:07,  3.57it/s][A
 89%|████████▉ | 197/221 [01:10<00:05,  4.64it/s][A
 90%|████████▉ | 198/221 [01:11<00:04,  4.83it/s][A
 90%|█████████ | 199/221 [01:11<00:04,  4.62it/s][A
 90%|█████████ | 200/221 [01:11<00:05,  3.79it/s][A
 91%|█████████ | 201/221 [01:11<00:05,  3.85it/s][A
 91%|█████████▏| 202/221 [01:12<00:04,  4.44it/s][A
 92%|█████████▏| 203/221 [01:12<00:04,  4.49it/s][A
 93%|█████████▎| 205/221 [01:12<00:02,  6.10it/s][A
 93%|█████████▎| 206/221 [01:12<00:02,  5.28it/s][A
 94%|█████████▍| 208/221 [01:12<00:01,  6.53it/s][A
 95%|█████████▍| 209/221 [01:13<00:01,  6.26it/s][A
 95%|█████████▌| 211/221 [01:13<00:02,  4.72it/s][A
 96%|█████████▌| 212/221 [01:13<00:01,  4.81it/s][A
 97%|█████████▋| 214/221 [01:15<00:02,  2.95it/s][A
 97%|█████████▋| 215/221 [01:15<00:02,  2.93it/s][A
 98%|█████████▊| 216/221 [01:15<00:01,  3.26it/s][A
 98%|█████████▊| 217/221 [01:16<00:01,  2.66it/s][A
 99%|█████████▊| 218/221 [01:16<00:01,  2.49it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  2.74it/s][A
100%|█████████▉| 220/221 [01:21<00:01,  1.64s/it][A
100%|██████████| 221/221 [01:21<00:00,  1.20s/it][A100%|██████████| 221/221 [01:21<00:00,  2.70it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:08,  3.20it/s][A
  1%|          | 2/221 [00:00<01:06,  3.31it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.29it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.32it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.13it/s][A
  3%|▎         | 6/221 [00:01<01:07,  3.18it/s][A
  3%|▎         | 7/221 [00:02<01:06,  3.22it/s][A
  4%|▎         | 8/221 [00:02<01:06,  3.22it/s][A
  4%|▍         | 9/221 [00:02<01:09,  3.05it/s][A
  5%|▍         | 10/221 [00:03<01:06,  3.15it/s][A
  5%|▍         | 11/221 [00:03<01:05,  3.23it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.27it/s][A
  6%|▌         | 13/221 [00:04<01:03,  3.30it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.37it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.38it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.39it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.39it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.40it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.38it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.39it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.39it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.40it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.39it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.40it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.40it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.40it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.40it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.40it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.41it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.41it/s][A
 15%|█▌        | 34/221 [00:10<00:54,  3.41it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.41it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.41it/s][A
 17%|█▋        | 37/221 [00:11<00:53,  3.41it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:13<00:51,  3.42it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:16<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:44,  3.25it/s][A
 35%|███▍      | 77/221 [00:22<00:43,  3.30it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.34it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.36it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.38it/s][A
 37%|███▋      | 81/221 [00:23<00:41,  3.39it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.40it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.41it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.41it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.41it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:35,  6.13it/s][A
  1%|          | 2/221 [00:00<00:45,  4.82it/s][A
  1%|▏         | 3/221 [00:00<00:57,  3.78it/s][A
  2%|▏         | 4/221 [00:00<00:46,  4.65it/s][A
  2%|▏         | 5/221 [00:01<00:42,  5.03it/s][A
  3%|▎         | 6/221 [00:01<00:38,  5.65it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.15it/s][A
  4%|▎         | 8/221 [00:01<01:00,  3.50it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.61it/s][A
  5%|▍         | 10/221 [00:02<00:49,  4.26it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.90it/s][A
  5%|▌         | 12/221 [00:02<00:52,  4.01it/s][A
  6%|▌         | 13/221 [00:03<01:21,  2.55it/s][A
  6%|▋         | 14/221 [00:03<01:10,  2.93it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.88it/s][A
  7%|▋         | 16/221 [00:04<01:12,  2.83it/s][A
  8%|▊         | 17/221 [00:04<01:16,  2.66it/s][A
  8%|▊         | 18/221 [00:05<01:13,  2.76it/s][A
  9%|▉         | 20/221 [00:05<00:51,  3.88it/s][A
 10%|▉         | 21/221 [00:05<00:47,  4.20it/s][A
 10%|▉         | 22/221 [00:05<00:44,  4.50it/s][A
 10%|█         | 23/221 [00:06<00:38,  5.21it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.23it/s][A
 11%|█▏        | 25/221 [00:06<00:49,  3.98it/s][A
 12%|█▏        | 26/221 [00:06<00:49,  3.95it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  4.02it/s][A
 13%|█▎        | 28/221 [00:07<00:51,  3.76it/s][A
 13%|█▎        | 29/221 [00:07<00:49,  3.88it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.46it/s][A
 14%|█▍        | 31/221 [00:08<00:53,  3.58it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.80it/s][A
 15%|█▍        | 33/221 [00:08<00:51,  3.68it/s][A
 15%|█▌        | 34/221 [00:09<00:59,  3.16it/s][A
 16%|█▌        | 35/221 [00:09<00:58,  3.17it/s][A
 16%|█▋        | 36/221 [00:09<00:58,  3.17it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.41it/s][A
 17%|█▋        | 38/221 [00:10<00:53,  3.44it/s][A
 18%|█▊        | 39/221 [00:10<00:51,  3.54it/s][A
 18%|█▊        | 40/221 [00:10<00:53,  3.37it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.45it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.79it/s][A
 19%|█▉        | 43/221 [00:11<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:12<00:54,  3.27it/s][A
 20%|██        | 45/221 [00:12<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:12<00:59,  2.96it/s][A
 21%|██▏       | 47/221 [00:13<00:53,  3.26it/s][A
 22%|██▏       | 48/221 [00:13<00:45,  3.76it/s][A
 22%|██▏       | 49/221 [00:13<00:37,  4.59it/s][A
 23%|██▎       | 50/221 [00:13<00:41,  4.17it/s][A
 23%|██▎       | 51/221 [00:13<00:40,  4.20it/s][A
 24%|██▍       | 53/221 [00:14<00:41,  4.01it/s][A
 24%|██▍       | 54/221 [00:14<00:42,  3.97it/s][A
 25%|██▍       | 55/221 [00:15<00:49,  3.34it/s][A
 25%|██▌       | 56/221 [00:15<00:50,  3.26it/s][A
 26%|██▌       | 57/221 [00:15<00:48,  3.35it/s][A
 26%|██▌       | 58/221 [00:15<00:40,  4.06it/s][A
 27%|██▋       | 59/221 [00:16<00:40,  4.02it/s][A
 27%|██▋       | 60/221 [00:16<00:36,  4.38it/s][A
 28%|██▊       | 61/221 [00:16<00:36,  4.44it/s][A
 28%|██▊       | 62/221 [00:16<00:40,  3.96it/s][A
 29%|██▉       | 64/221 [00:17<00:33,  4.69it/s][A
 29%|██▉       | 65/221 [00:17<00:35,  4.36it/s][A
 30%|██▉       | 66/221 [00:17<00:43,  3.60it/s][A
 30%|███       | 67/221 [00:18<00:47,  3.23it/s][A
 31%|███       | 68/221 [00:18<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:19<00:55,  2.75it/s][A
 32%|███▏      | 70/221 [00:19<00:50,  3.01it/s][A
 32%|███▏      | 71/221 [00:19<00:54,  2.78it/s][A
 33%|███▎      | 72/221 [00:20<00:55,  2.70it/s][A
 33%|███▎      | 73/221 [00:20<00:51,  2.88it/s][A
 33%|███▎      | 74/221 [00:20<00:45,  3.27it/s][A
 34%|███▍      | 75/221 [00:20<00:42,  3.46it/s][A
 34%|███▍      | 76/221 [00:21<00:37,  3.84it/s][A
 35%|███▍      | 77/221 [00:21<00:35,  4.10it/s][A
 35%|███▌      | 78/221 [00:21<00:39,  3.58it/s][A
 36%|███▌      | 79/221 [00:21<00:38,  3.65it/s][A
 36%|███▌      | 80/221 [00:22<00:33,  4.26it/s][A
 37%|███▋      | 81/221 [00:22<00:32,  4.35it/s][A
 37%|███▋      | 82/221 [00:22<00:41,  3.38it/s][A
 38%|███▊      | 83/221 [00:22<00:33,  4.16it/s][A
 38%|███▊      | 84/221 [00:23<00:44,  3.09it/s][A
 38%|███▊      | 85/221 [00:23<00:49,  2.73it/s][A
 39%|███▉      | 86/221 [00:24<00:53,  2.54it/s][A
 39%|███▉      | 87/221 [00:24<00:56,  2.39it/s][A
 40%|███▉      | 88/221 [00:25<00:49,  2.66it/s][A
 40%|████      | 89/221 [00:25<00:51,  2.58it/s][A
 41%|████      | 90/221 [00:25<00:52,  2.51it/s][A
 41%|████      | 91/221 [00:26<00:45,  2.89it/s][A
 42%|████▏     | 92/221 [00:26<00:45,  2.85it/s][A
 42%|████▏     | 93/221 [00:26<00:50,  2.55it/s][A
 43%|████▎     | 94/221 [00:27<00:45,  2.80it/s][A
 43%|████▎     | 95/221 [00:27<00:51,  2.45it/s][A
 43%|████▎     | 96/221 [00:28<00:50,  2.50it/s][A
 44%|████▍     | 97/221 [00:28<00:46,  2.65it/s][A
 44%|████▍     | 98/221 [00:28<00:45,  2.68it/s][A
 45%|████▍     | 99/221 [00:29<00:44,  2.75it/s][A
 45%|████▌     | 100/221 [00:29<00:37,  3.19it/s][A
 46%|████▌     | 101/221 [00:29<00:32,  3.66it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.48it/s][A
 47%|████▋     | 103/221 [00:30<00:33,  3.50it/s][A
 47%|████▋     | 104/221 [00:30<00:27,  4.18it/s][A
 48%|████▊     | 105/221 [00:30<00:32,  3.61it/s][A
 48%|████▊     | 106/221 [00:31<00:35,  3.23it/s][A
 48%|████▊     | 107/221 [00:31<00:35,  3.18it/s][A
 49%|████▉     | 108/221 [00:31<00:31,  3.54it/s][A
 49%|████▉     | 109/221 [00:31<00:30,  3.71it/s][A
 50%|████▉     | 110/221 [00:32<00:31,  3.57it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.38it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:32,  3.28it/s][A
 52%|█████▏    | 114/221 [00:33<00:26,  4.03it/s][A
 52%|█████▏    | 115/221 [00:33<00:23,  4.50it/s][A
 52%|█████▏    | 116/221 [00:33<00:24,  4.34it/s][A
 53%|█████▎    | 117/221 [00:33<00:24,  4.21it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.68it/s][A
 54%|█████▍    | 119/221 [00:34<00:31,  3.22it/s][A
 54%|█████▍    | 120/221 [00:34<00:32,  3.14it/s][A
 55%|█████▍    | 121/221 [00:35<00:31,  3.13it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.49it/s][A
 56%|█████▌    | 123/221 [00:35<00:30,  3.19it/s][A
 56%|█████▌    | 124/221 [00:36<00:31,  3.09it/s][A
 57%|█████▋    | 125/221 [00:36<00:35,  2.71it/s][A
 57%|█████▋    | 126/221 [00:36<00:32,  2.94it/s][A
 57%|█████▋    | 127/221 [00:37<00:33,  2.80it/s][A
 58%|█████▊    | 128/221 [00:37<00:29,  3.11it/s][A
 58%|█████▊    | 129/221 [00:37<00:27,  3.40it/s][A
 59%|█████▉    | 130/221 [00:38<00:27,  3.36it/s][A
 59%|█████▉    | 131/221 [00:38<00:28,  3.20it/s][A
 60%|█████▉    | 132/221 [00:38<00:26,  3.37it/s][A
 60%|██████    | 133/221 [00:39<00:28,  3.10it/s][A
 61%|██████    | 134/221 [00:39<00:31,  2.75it/s][A
 61%|██████    | 135/221 [00:39<00:26,  3.21it/s][A
 62%|██████▏   | 136/221 [00:40<00:27,  3.15it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:23,  3.54it/s][A
 63%|██████▎   | 139/221 [00:40<00:24,  3.32it/s][A
 63%|██████▎   | 140/221 [00:41<00:22,  3.67it/s][A
 64%|██████▍   | 141/221 [00:41<00:27,  2.90it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.30it/s][A
 65%|██████▍   | 143/221 [00:42<00:24,  3.24it/s][A
 65%|██████▌   | 144/221 [00:42<00:20,  3.75it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.35it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.44it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  3.93it/s][A
 67%|██████▋   | 148/221 [00:43<00:22,  3.27it/s][A
 67%|██████▋   | 149/221 [00:43<00:19,  3.69it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.50it/s][A
 68%|██████▊   | 151/221 [00:44<00:22,  3.12it/s][A
 69%|██████▉   | 152/221 [00:45<00:32,  2.15it/s][A
 69%|██████▉   | 153/221 [00:45<00:28,  2.38it/s][A
 70%|██████▉   | 154/221 [00:45<00:26,  2.54it/s][A
 70%|███████   | 155/221 [00:46<00:25,  2.56it/s][A
 71%|███████   | 156/221 [00:46<00:21,  3.08it/s][A
 71%|███████   | 157/221 [00:46<00:19,  3.28it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.06it/s][A
 72%|███████▏  | 159/221 [00:47<00:19,  3.22it/s][A
 72%|███████▏  | 160/221 [00:47<00:16,  3.67it/s][A
 73%|███████▎  | 161/221 [00:47<00:13,  4.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:11,  5.03it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.65it/s][A
 74%|███████▍  | 164/221 [00:48<00:11,  4.86it/s][A
 75%|███████▍  | 165/221 [00:48<00:13,  4.08it/s][A
 75%|███████▌  | 166/221 [00:48<00:15,  3.52it/s][A
 76%|███████▌  | 167/221 [00:49<00:13,  4.13it/s][A
 76%|███████▌  | 168/221 [00:49<00:14,  3.72it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.52it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.34it/s][A
 78%|███████▊  | 173/221 [00:51<00:15,  3.19it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.55it/s][A
 79%|███████▉  | 175/221 [00:51<00:14,  3.25it/s][A
 80%|███████▉  | 176/221 [00:51<00:11,  3.85it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.58it/s][A
 81%|████████  | 178/221 [00:52<00:18,  2.32it/s][A
 81%|████████  | 179/221 [00:53<00:16,  2.61it/s][A
 81%|████████▏ | 180/221 [00:53<00:13,  3.08it/s][A
 82%|████████▏ | 181/221 [00:53<00:14,  2.72it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.01it/s][A
 83%|████████▎ | 183/221 [00:54<00:13,  2.90it/s][A
 83%|████████▎ | 184/221 [00:54<00:12,  2.99it/s][A
 84%|████████▎ | 185/221 [00:54<00:09,  3.75it/s][A
 84%|████████▍ | 186/221 [00:55<00:11,  3.06it/s][A
 85%|████████▍ | 187/221 [00:55<00:10,  3.39it/s][A
 85%|████████▌ | 188/221 [00:55<00:10,  3.18it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.32it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.71it/s][A
 87%|████████▋ | 192/221 [00:56<00:07,  4.03it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.74it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.45it/s][A
 88%|████████▊ | 195/221 [00:57<00:06,  3.72it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.35it/s][A
 89%|████████▉ | 197/221 [00:58<00:08,  2.80it/s][A
 90%|████████▉ | 198/221 [00:58<00:08,  2.79it/s][A
 90%|█████████ | 199/221 [00:59<00:07,  3.07it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.27it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.70it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.41it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.77it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.61it/s][A
 93%|█████████▎| 205/221 [01:00<00:05,  3.12it/s][A
 93%|█████████▎| 206/221 [01:01<00:06,  2.47it/s][A
 94%|█████████▎| 207/221 [01:01<00:05,  2.63it/s][A
 94%|█████████▍| 208/221 [01:01<00:04,  3.24it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.73it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.23it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.50it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.52it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.72it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  2.73it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.66it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  2.63it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  2.93it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.15it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.11it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.40it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.29it/s][A100%|██████████| 221/221 [01:06<00:00,  3.34it/s]
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'area_r1': 39.8, 'area_recall': '39.8/64.6/73.6', 'area_ravg': 59.4}
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'forward_r1': 38.5, 'forward_recall': '38.5/68.3/77.0', 'forward_ravg': 61.3}
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'area_video_r1': 39.9, 'area_video_recall': '39.9/68.0/79.5', 'area_video_ravg': 62.5}
09/17/2024 07:34:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 07:34:21 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'area_video_r1': 52.4, 'area_video_recall': '52.4/75.6/82.4', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.5, 'area_video_back_recall': '48.5/74.0/82.6', 'area_video_back_ravg': 68.4}
09/17/2024 07:34:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1149=======

09/17/2024 07:34:21 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.1/82.2', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.2/82.5', 'area_video_back_ravg': 68.6}
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'video_r1': 37.2, 'video_recall': '37.2/63.6/74.2', 'video_ravg': 58.3}
09/17/2024 07:34:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 07:34:21 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 07:34:21 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1199--===========

09/17/2024 07:34:21 - INFO - __main__ -   {'video_r1': 51.4, 'video_recall': '51.4/74.7/81.0', 'video_ravg': 69.0}
09/17/2024 07:34:21 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 07:34:21 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 07:34:41 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.008619163185358047, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0870118141174316, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.064995765686035, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.1606268882751465}
 41%|████      | 1200/2910 [7:38:44<61:09:52, 128.77s/it] 41%|████▏     | 1201/2910 [7:38:48<43:20:58, 91.32s/it]  41%|████▏     | 1202/2910 [7:38:53<30:58:29, 65.29s/it][h264 @ 0x5556c424f000] mmco: unref short failure
[h264 @ 0x563548ff5ec0] mmco: unref short failure
 41%|████▏     | 1203/2910 [7:38:58<22:22:24, 47.19s/it][h264 @ 0x5556d6923e00] mmco: unref short failure
[h264 @ 0x5556d6923e00] mmco: unref short failure
[h264 @ 0x5556cd61efc0] mmco: unref short failure
[h264 @ 0x5635484c7440] mmco: unref short failure
[h264 @ 0x5635484c7440] mmco: unref short failure
 41%|████▏     | 1204/2910 [7:39:03<16:24:21, 34.62s/it] 41%|████▏     | 1205/2910 [7:39:08<12:15:25, 25.88s/it][h264 @ 0x5556d3c92080] mmco: unref short failure
[h264 @ 0x558633ae2f00] mmco: unref short failure
[h264 @ 0x558633ae2f00] mmco: unref short failure
 41%|████▏     | 1206/2910 [7:39:15<9:32:32, 20.16s/it] [h264 @ 0x563548a4ee80] mmco: unref short failure
 41%|████▏     | 1207/2910 [7:39:22<7:39:34, 16.19s/it] 42%|████▏     | 1208/2910 [7:39:29<6:20:51, 13.43s/it][h264 @ 0x55863f2d8780] mmco: unref short failure
 42%|████▏     | 1209/2910 [7:39:36<5:22:45, 11.38s/it] 42%|████▏     | 1210/2910 [7:39:42<4:40:12,  9.89s/it][h264 @ 0x563557cfd180] mmco: unref short failure
[h264 @ 0x563557cfd180] mmco: unref short failure
 42%|████▏     | 1211/2910 [7:39:49<4:13:22,  8.95s/it][h264 @ 0x5556da128b40] mmco: unref short failure
[h264 @ 0x5556da128b40] mmco: unref short failure
[h264 @ 0x5556d0400780] mmco: unref short failure
[h264 @ 0x5556d0400780] mmco: unref short failure
 42%|████▏     | 1212/2910 [7:39:56<3:55:11,  8.31s/it][h264 @ 0x5556d46afe40] mmco: unref short failure
[h264 @ 0x5556d270ad40] mmco: unref short failure
 42%|████▏     | 1213/2910 [7:40:03<3:48:59,  8.10s/it][h264 @ 0x563548a4f5c0] mmco: unref short failure
[h264 @ 0x563548a4f5c0] mmco: unref short failure
09/17/2024 07:36:07 - INFO - __main__ -   current idx Q6X76LfJ4-U.35 from finetune_area returns wrong image/video, use 66870 instead.
 42%|████▏     | 1214/2910 [7:40:10<3:34:20,  7.58s/it] 42%|████▏     | 1215/2910 [7:40:18<3:37:54,  7.71s/it][h264 @ 0x56354d59d5c0] mmco: unref short failure
[h264 @ 0x563558f0e7c0] mmco: unref short failure
[h264 @ 0x563558f0e7c0] mmco: unref short failure
[h264 @ 0x563552526940] mmco: unref short failure
[h264 @ 0x5586483d1dc0] mmco: unref short failure
[h264 @ 0x5586483d1dc0] mmco: unref short failure
 42%|████▏     | 1216/2910 [7:40:52<7:23:01, 15.69s/it][h264 @ 0x55863a913040] mmco: unref short failure
[h264 @ 0x5586391c37c0] mmco: unref short failure
[h264 @ 0x5586391c37c0] mmco: unref short failure
 42%|████▏     | 1217/2910 [7:40:59<6:11:48, 13.18s/it][h264 @ 0x56354b9110c0] mmco: unref short failure
[h264 @ 0x56354b9110c0] mmco: unref short failure
09/17/2024 07:37:08 - INFO - __main__ -   current idx KQezF6-NY_o.24 from finetune_area returns wrong image/video, use 97316 instead.
[h264 @ 0x5556d2b2a680] mmco: unref short failure
[h264 @ 0x5556c5c37840] mmco: unref short failure
[h264 @ 0x5556c5c37840] mmco: unref short failure
[h264 @ 0x5556c5c37840] mmco: unref short failure
[h264 @ 0x5556c5c37840] mmco: unref short failure
 42%|████▏     | 1218/2910 [7:41:21<7:26:52, 15.85s/it][h264 @ 0x5635452bc740] mmco: unref short failure
[h264 @ 0x5556ca797380] mmco: unref short failure
[h264 @ 0x5556ca797380] mmco: unref short failure
 42%|████▏     | 1219/2910 [7:41:28<6:07:31, 13.04s/it][h264 @ 0x5586496fe780] mmco: unref short failure
 42%|████▏     | 1220/2910 [7:41:37<5:30:48, 11.74s/it] 42%|████▏     | 1221/2910 [7:41:45<5:03:54, 10.80s/it] 42%|████▏     | 1222/2910 [7:41:53<4:35:12,  9.78s/it] 42%|████▏     | 1223/2910 [7:42:00<4:12:07,  8.97s/it][h264 @ 0x5556cf254340] mmco: unref short failure
[h264 @ 0x5556cf254340] mmco: unref short failure
[h264 @ 0x5556c57f1fc0] mmco: unref short failure
[h264 @ 0x5556c57f1fc0] mmco: unref short failure
[h264 @ 0x5556c57f1fc0] mmco: unref short failure
[h264 @ 0x5556c57f1fc0] mmco: unref short failure
[h264 @ 0x563542b79380] mmco: unref short failure
[h264 @ 0x563542b79380] mmco: unref short failure
[h264 @ 0x55863a274cc0] mmco: unref short failure
[h264 @ 0x56354529bf40] mmco: unref short failure
[h264 @ 0x56354529bf40] mmco: unref short failure
[h264 @ 0x55771e4760c0] mmco: unref short failure
[h264 @ 0x55771e4760c0] mmco: unref short failure
[h264 @ 0x5556d4e0eb80] mmco: unref short failure
[h264 @ 0x5556d27fb980] mmco: unref short failure
[h264 @ 0x5556d27fb980] mmco: unref short failure
[h264 @ 0x5556ca92b840] mmco: unref short failure
[h264 @ 0x55772435c680] mmco: unref short failure
[h264 @ 0x5576e045fe00] mmco: unref short failure
[h264 @ 0x5576e045fe00] mmco: unref short failure
 42%|████▏     | 1224/2910 [7:43:13<13:15:43, 28.32s/it][h264 @ 0x563556f3b200] mmco: unref short failure
[h264 @ 0x563556f3b200] mmco: unref short failure
 42%|████▏     | 1225/2910 [7:43:25<10:58:13, 23.44s/it][h264 @ 0x5586416d5d40] mmco: unref short failure
[h264 @ 0x5556d12208c0] mmco: unref short failure
[h264 @ 0x5556d12208c0] mmco: unref short failure
[h264 @ 0x55772215e180] mmco: unref short failure
[h264 @ 0x5577285fd780] mmco: unref short failure
[h264 @ 0x5586365dd140] mmco: unref short failure
[h264 @ 0x5586365dd140] mmco: unref short failure
[h264 @ 0x5586365dd140] mmco: unref short failure
[h264 @ 0x5586365dd140] mmco: unref short failure
[h264 @ 0x563551ca4a00] mmco: unref short failure
[h264 @ 0x558633554d00] mmco: unref short failure
[h264 @ 0x558633554d00] mmco: unref short failure
not have audios 7wavFXW3AFw.7
 42%|████▏     | 1226/2910 [7:44:01<12:40:03, 27.08s/it] 42%|████▏     | 1227/2910 [7:44:08<9:51:03, 21.07s/it]  42%|████▏     | 1228/2910 [7:44:15<7:52:09, 16.84s/it][h264 @ 0x55771de14a00] mmco: unref short failure
 42%|████▏     | 1229/2910 [7:44:22<6:26:33, 13.80s/it][h264 @ 0x55771bce3180] mmco: unref short failure
[h264 @ 0x55771bce3180] mmco: unref short failure
09/17/2024 07:40:26 - INFO - __main__ -   current idx eIBeK5EEG4o.35 from finetune_area returns wrong image/video, use 50092 instead.
[h264 @ 0x5556c846bd80] mmco: unref short failure
[h264 @ 0x5556c846bd80] mmco: unref short failure
 42%|████▏     | 1230/2910 [7:44:29<5:31:27, 11.84s/it][h264 @ 0x563547fd8f40] mmco: unref short failure
[h264 @ 0x563547fd8f40] mmco: unref short failure
[h264 @ 0x563552b52e80] mmco: unref short failure
 42%|████▏     | 1231/2910 [7:44:35<4:43:40, 10.14s/it][h264 @ 0x5635500b3780] mmco: unref short failure
[h264 @ 0x56354f8f9380] mmco: unref short failure
[h264 @ 0x56354f8f9380] mmco: unref short failure
[h264 @ 0x56354a93da00] mmco: unref short failure
[h264 @ 0x56354a93da00] mmco: unref short failure
[h264 @ 0x55864b50d940] mmco: unref short failure
[h264 @ 0x5556da11fc00] mmco: unref short failure
[h264 @ 0x5556da11fc00] mmco: unref short failure
[h264 @ 0x558639d76b40] mmco: unref short failure
[h264 @ 0x56355137c640] mmco: unref short failure
[h264 @ 0x56355137c640] mmco: unref short failure
[h264 @ 0x55863a66df00] mmco: unref short failure
[h264 @ 0x55863a66df00] mmco: unref short failure
[h264 @ 0x5556d99f67c0] mmco: unref short failure
 42%|████▏     | 1232/2910 [7:45:39<12:11:20, 26.15s/it][h264 @ 0x55863fc86340] mmco: unref short failure
[h264 @ 0x55863fc86340] mmco: unref short failure
 42%|████▏     | 1233/2910 [7:45:55<10:51:50, 23.32s/it][h264 @ 0x5556d99f6c40] mmco: unref short failure
[h264 @ 0x5556d99f6c40] mmco: unref short failure
[h264 @ 0x557723ed81c0] mmco: unref short failure
[h264 @ 0x563559761040] mmco: unref short failure
[h264 @ 0x563559761040] mmco: unref short failure
 42%|████▏     | 1234/2910 [7:46:30<12:28:31, 26.80s/it][h264 @ 0x55772adaba00] mmco: unref short failure
[h264 @ 0x55772adaba00] mmco: unref short failure
 42%|████▏     | 1235/2910 [7:46:37<9:37:13, 20.68s/it] [h264 @ 0x5556d6923740] mmco: unref short failure
[h264 @ 0x558636518d00] mmco: unref short failure
 42%|████▏     | 1236/2910 [7:46:44<7:46:19, 16.71s/it]09/17/2024 07:42:43 - INFO - __main__ -   current idx AP5rCSSlwrk.27 from finetune_area returns wrong image/video, use 139502 instead.
[h264 @ 0x5556c605cf00] mmco: unref short failure
[h264 @ 0x5556c605cf00] mmco: unref short failure
 43%|████▎     | 1237/2910 [7:46:55<6:56:42, 14.94s/it] 43%|████▎     | 1238/2910 [7:47:02<5:54:33, 12.72s/it][h264 @ 0x5556c8490380] mmco: unref short failure
[h264 @ 0x5556c8490380] mmco: unref short failure
09/17/2024 07:43:02 - INFO - __main__ -   current idx 14WUuya94QE.50 from finetune_area returns wrong image/video, use 125031 instead.
 43%|████▎     | 1239/2910 [7:47:09<5:04:49, 10.95s/it][h264 @ 0x5556c5c66900] mmco: unref short failure
[h264 @ 0x5556d217a380] mmco: unref short failure
[h264 @ 0x5556d217a380] mmco: unref short failure
[h264 @ 0x558645a172c0] mmco: unref short failure
[h264 @ 0x55864749dec0] mmco: unref short failure
[h264 @ 0x55863651cdc0] mmco: unref short failure
[h264 @ 0x55863b491ac0] mmco: unref short failure
[h264 @ 0x55863b491ac0] mmco: unref short failure
[h264 @ 0x557729267340] mmco: unref short failure
[h264 @ 0x557729267340] mmco: unref short failure
[h264 @ 0x558648112f00] mmco: unref short failure
[h264 @ 0x558648112f00] mmco: unref short failure
[h264 @ 0x5586335710c0] mmco: unref short failure
[h264 @ 0x5586335710c0] mmco: unref short failure
[h264 @ 0x56355325fec0] mmco: unref short failure
[h264 @ 0x56355325fec0] mmco: unref short failure
[h264 @ 0x558649c38d00] mmco: unref short failure
[h264 @ 0x55771875a340] mmco: unref short failure
[h264 @ 0x55771875a340] mmco: unref short failure
 43%|████▎     | 1240/2910 [7:48:12<12:14:05, 26.37s/it][h264 @ 0x5556c3e183c0] mmco: unref short failure
[h264 @ 0x5556c3e183c0] mmco: unref short failure
[h264 @ 0x563550c6a9c0] mmco: unref short failure
[h264 @ 0x558649ed4ec0] mmco: unref short failure
[h264 @ 0x558649ed4ec0] mmco: unref short failure
 43%|████▎     | 1241/2910 [7:48:23<10:05:08, 21.75s/it][h264 @ 0x563552138280] mmco: unref short failure
[h264 @ 0x563552138280] mmco: unref short failure
[h264 @ 0x563547ab9340] mmco: unref short failure
[h264 @ 0x563547ab9340] mmco: unref short failure
[h264 @ 0x563557fc4400] mmco: unref short failure
[h264 @ 0x563557fc4400] mmco: unref short failure
[h264 @ 0x558648e61280] mmco: unref short failure
[h264 @ 0x55864d5d3200] mmco: unref short failure
[h264 @ 0x55773087b900] mmco: unref short failure
[h264 @ 0x55772d361fc0] mmco: unref short failure
[h264 @ 0x55772d361fc0] mmco: unref short failure
[h264 @ 0x557725c82bc0] mmco: unref short failure
[h264 @ 0x557725c82bc0] mmco: unref short failure
[h264 @ 0x5556d3d01b40] mmco: unref short failure
[h264 @ 0x5556dd08c9c0] mmco: unref short failure
 43%|████▎     | 1242/2910 [7:49:22<15:19:48, 33.09s/it][h264 @ 0x5556d6d5a880] mmco: unref short failure
 43%|████▎     | 1243/2910 [7:49:28<11:36:27, 25.07s/it] 43%|████▎     | 1244/2910 [7:49:35<9:02:25, 19.54s/it] [h264 @ 0x5556cb771300] mmco: unref short failure
[h264 @ 0x5556cb771300] mmco: unref short failure
[h264 @ 0x55771d521040] mmco: unref short failure
[h264 @ 0x563554fac680] mmco: unref short failure
[h264 @ 0x563554fac680] mmco: unref short failure
 43%|████▎     | 1245/2910 [7:49:42<7:16:37, 15.73s/it][h264 @ 0x5586322e2540] mmco: unref short failure
 43%|████▎     | 1246/2910 [7:49:49<6:03:46, 13.12s/it] 43%|████▎     | 1247/2910 [7:49:56<5:16:23, 11.42s/it][h264 @ 0x55865114ddc0] mmco: unref short failure
[h264 @ 0x55865114ddc0] mmco: unref short failure
[h264 @ 0x5586336186c0] mmco: unref short failure
[h264 @ 0x5586336186c0] mmco: unref short failure
[h264 @ 0x558644de2800] mmco: unref short failure
[h264 @ 0x558644de2800] mmco: unref short failure
[h264 @ 0x558644de2800] mmco: unref short failure
[h264 @ 0x558644de2800] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558639d76900] mmco: unref short failure
[h264 @ 0x558642d5d9c0] mmco: unref short failure
[h264 @ 0x558642d5d9c0] mmco: unref short failure
[h264 @ 0x55863afc8c00] mmco: unref short failure
[h264 @ 0x55863afc8c00] mmco: unref short failure
[h264 @ 0x558636518880] mmco: unref short failure
[h264 @ 0x558636518880] mmco: unref short failure
[h264 @ 0x55771e6425c0] mmco: unref short failure
[h264 @ 0x55771e6425c0] mmco: unref short failure
 43%|████▎     | 1248/2910 [7:50:42<9:59:19, 21.64s/it][h264 @ 0x5577185a3a80] mmco: unref short failure
 43%|████▎     | 1249/2910 [7:50:49<7:56:23, 17.21s/it]09/17/2024 07:46:48 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 07:46:48 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x55863f771600] mmco: unref short failure
[h264 @ 0x558648caeb80] mmco: unref short failure
[h264 @ 0x558648caeb80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563552e48c40] mmco: unref short failure
[h264 @ 0x563552e48c40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556dad38f00] mmco: unref short failure
[h264 @ 0x5556dad38f00] mmco: unref short failure
[h264 @ 0x5577294baa40] mmco: unref short failure
[h264 @ 0x5577294baa40] mmco: unref short failure
[h264 @ 0x563555704580] mmco: unref short failure
[h264 @ 0x563555704580] mmco: unref short failure
[h264 @ 0x55771ecda6c0] mmco: unref short failure
[h264 @ 0x55772279ca00] mmco: unref short failure
[h264 @ 0x55772279ca00] mmco: unref short failure
[h264 @ 0x5556d0f64980] mmco: unref short failure
[h264 @ 0x5556db8d79c0] mmco: unref short failure
[h264 @ 0x5556db8d79c0] mmco: unref short failure
[h264 @ 0x5577345d6a40] mmco: unref short failure
09/17/2024 07:48:34 - INFO - __main__ -   current idx ULdsvnXj9Hc.89 from finetune_area returns wrong image/video, use 16956 instead.
[h264 @ 0x56355132e200] mmco: unref short failure
[h264 @ 0x5635510d8d40] mmco: unref short failure
[h264 @ 0x55568c100340] mmco: unref short failure
[h264 @ 0x55568c100340] mmco: unref short failure
[h264 @ 0x5556dca04f40] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:01,  1.81it/s][A
  1%|          | 2/221 [00:00<01:45,  2.07it/s][A
  1%|▏         | 3/221 [00:01<01:08,  3.17it/s][A
  2%|▏         | 4/221 [00:01<00:50,  4.33it/s][A
  2%|▏         | 5/221 [00:01<00:42,  5.14it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.76it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.09it/s][A
  4%|▎         | 8/221 [00:02<01:20,  2.65it/s][A
  4%|▍         | 9/221 [00:02<01:10,  2.99it/s][A
  5%|▍         | 10/221 [00:03<01:09,  3.03it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.36it/s][A
  5%|▌         | 12/221 [00:04<01:44,  2.01it/s][A
  6%|▌         | 13/221 [00:04<01:23,  2.49it/s][A
  6%|▋         | 14/221 [00:04<01:25,  2.43it/s][A
  7%|▋         | 15/221 [00:05<01:13,  2.81it/s][A
  7%|▋         | 16/221 [00:05<01:04,  3.18it/s][A[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure

  8%|▊         | 17/221 [00:05<00:56,  3.58it/s][A[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure

  8%|▊         | 18/221 [00:05<00:54,  3.74it/s][A[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure
[h264 @ 0x5556c5cc4b40] mmco: unref short failure

  9%|▊         | 19/221 [00:06<00:53,  3.79it/s][A
  9%|▉         | 20/221 [00:06<00:52,  3.84it/s][A
 10%|▉         | 21/221 [00:06<00:47,  4.21it/s][A
 10%|▉         | 22/221 [00:06<00:54,  3.65it/s][A
 10%|█         | 23/221 [00:06<00:44,  4.47it/s][A
 11%|█         | 24/221 [00:07<00:39,  5.00it/s][A
 11%|█▏        | 25/221 [00:07<00:35,  5.55it/s][A
 12%|█▏        | 26/221 [00:07<00:38,  5.12it/s][A
 13%|█▎        | 28/221 [00:07<00:41,  4.65it/s][A
 13%|█▎        | 29/221 [00:08<00:41,  4.68it/s][A
 14%|█▎        | 30/221 [00:08<00:37,  5.13it/s][A
 14%|█▍        | 31/221 [00:08<00:36,  5.25it/s][A
 14%|█▍        | 32/221 [00:08<00:31,  5.98it/s][A
 15%|█▍        | 33/221 [00:09<00:57,  3.26it/s][A
 15%|█▌        | 34/221 [00:09<00:49,  3.75it/s][A
 16%|█▌        | 35/221 [00:09<00:43,  4.31it/s][A
 16%|█▋        | 36/221 [00:09<00:46,  3.98it/s][A[h264 @ 0x5556db8cd4c0] mmco: unref short failure

 17%|█▋        | 37/221 [00:10<01:19,  2.30it/s][A
 17%|█▋        | 38/221 [00:10<01:10,  2.59it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.32it/s][A
 18%|█▊        | 40/221 [00:11<00:50,  3.59it/s][A
 19%|█▊        | 41/221 [00:11<00:42,  4.26it/s][A
 19%|█▉        | 42/221 [00:12<01:16,  2.34it/s][A
 19%|█▉        | 43/221 [00:12<01:01,  2.92it/s][A
 20%|█▉        | 44/221 [00:12<00:50,  3.53it/s][A
 20%|██        | 45/221 [00:13<01:20,  2.18it/s][A
 21%|██        | 46/221 [00:14<01:30,  1.94it/s][A[h264 @ 0x55863d393a00] mmco: unref short failure

 21%|██▏       | 47/221 [00:16<02:43,  1.06it/s][A
 22%|██▏       | 48/221 [00:16<02:09,  1.33it/s][A
 22%|██▏       | 49/221 [00:16<01:43,  1.66it/s][A
 23%|██▎       | 50/221 [00:16<01:23,  2.04it/s][A
 23%|██▎       | 51/221 [00:17<01:09,  2.45it/s][A
 24%|██▎       | 52/221 [00:17<00:58,  2.88it/s][A[h264 @ 0x558645fc5f00] mmco: unref short failure
[h264 @ 0x558645fc5f00] mmco: unref short failure

 24%|██▍       | 53/221 [00:17<00:59,  2.85it/s][A
 24%|██▍       | 54/221 [00:18<01:47,  1.55it/s][A
 25%|██▍       | 55/221 [00:19<01:30,  1.83it/s][A
 25%|██▌       | 56/221 [00:19<01:10,  2.33it/s][A
 26%|██▌       | 57/221 [00:19<01:10,  2.33it/s][A
 26%|██▌       | 58/221 [00:20<01:00,  2.68it/s][A
 27%|██▋       | 59/221 [00:20<00:49,  3.25it/s][A
 27%|██▋       | 60/221 [00:20<00:49,  3.25it/s][A
 28%|██▊       | 61/221 [00:20<00:44,  3.63it/s][A
 28%|██▊       | 62/221 [00:20<00:38,  4.16it/s][A
 29%|██▊       | 63/221 [00:21<00:32,  4.86it/s][A
 29%|██▉       | 64/221 [00:21<00:27,  5.71it/s][A
 29%|██▉       | 65/221 [00:21<00:24,  6.33it/s][A
 30%|██▉       | 66/221 [00:21<00:45,  3.43it/s][A
 30%|███       | 67/221 [00:22<00:42,  3.61it/s][A
 31%|███       | 68/221 [00:22<00:39,  3.90it/s][A
 31%|███       | 69/221 [00:22<00:48,  3.16it/s][A
 32%|███▏      | 70/221 [00:22<00:39,  3.86it/s][A[h264 @ 0x563541552600] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:38,  1.45s/it][A
 33%|███▎      | 72/221 [00:27<02:42,  1.09s/it][A
 33%|███▎      | 73/221 [00:27<02:09,  1.14it/s][A
 33%|███▎      | 74/221 [00:27<01:36,  1.53it/s][A
 34%|███▍      | 75/221 [00:28<01:18,  1.86it/s][A
 34%|███▍      | 76/221 [00:28<01:03,  2.29it/s][A
 35%|███▍      | 77/221 [00:28<00:53,  2.70it/s][A
 35%|███▌      | 78/221 [00:28<00:47,  2.98it/s][A
 36%|███▌      | 79/221 [00:29<01:02,  2.26it/s][A
 36%|███▌      | 80/221 [00:29<00:50,  2.77it/s][A
 37%|███▋      | 81/221 [00:30<00:50,  2.79it/s][A
 37%|███▋      | 82/221 [00:30<00:47,  2.92it/s][A
 38%|███▊      | 83/221 [00:30<00:39,  3.54it/s][A
 38%|███▊      | 84/221 [00:30<00:32,  4.26it/s][A
 38%|███▊      | 85/221 [00:30<00:27,  4.92it/s][A
 39%|███▉      | 86/221 [00:30<00:25,  5.34it/s][A
 39%|███▉      | 87/221 [00:31<00:32,  4.10it/s][A
 40%|███▉      | 88/221 [00:31<00:34,  3.90it/s][A
 40%|████      | 89/221 [00:35<02:41,  1.23s/it][A
 41%|████      | 90/221 [00:35<02:00,  1.08it/s][A
 41%|████      | 91/221 [00:35<01:36,  1.35it/s][A
 42%|████▏     | 92/221 [00:35<01:18,  1.64it/s][A
 42%|████▏     | 93/221 [00:36<01:22,  1.56it/s][A
 43%|████▎     | 94/221 [00:37<01:15,  1.69it/s][A
 43%|████▎     | 95/221 [00:37<00:56,  2.21it/s][A
 43%|████▎     | 96/221 [00:37<00:48,  2.56it/s][A
 44%|████▍     | 97/221 [00:37<00:38,  3.21it/s][A
 44%|████▍     | 98/221 [00:37<00:35,  3.44it/s][A
 45%|████▍     | 99/221 [00:38<00:35,  3.45it/s][A
 45%|████▌     | 100/221 [00:38<00:31,  3.87it/s][A
 46%|████▌     | 101/221 [00:38<00:34,  3.44it/s][A
 46%|████▌     | 102/221 [00:38<00:36,  3.29it/s][A
 47%|████▋     | 103/221 [00:39<00:33,  3.54it/s][A
 47%|████▋     | 104/221 [00:39<00:27,  4.33it/s][A
 48%|████▊     | 105/221 [00:39<00:29,  3.96it/s][A
 48%|████▊     | 106/221 [00:40<00:50,  2.27it/s][A[h264 @ 0x55863b336d80] mmco: unref short failure
[h264 @ 0x55863b336d80] mmco: unref short failure

 48%|████▊     | 107/221 [00:40<00:39,  2.86it/s][A
 49%|████▉     | 108/221 [00:40<00:33,  3.33it/s][A
 49%|████▉     | 109/221 [00:40<00:28,  3.89it/s][A
 50%|████▉     | 110/221 [00:41<00:24,  4.45it/s][A
 50%|█████     | 111/221 [00:41<00:34,  3.16it/s][A
 51%|█████     | 112/221 [00:41<00:30,  3.57it/s][A
 51%|█████     | 113/221 [00:42<00:32,  3.30it/s][A
 52%|█████▏    | 114/221 [00:42<00:25,  4.14it/s][A
 52%|█████▏    | 115/221 [00:42<00:21,  5.01it/s][A[h264 @ 0x563553afb600] mmco: unref short failure
[h264 @ 0x563553afb600] mmco: unref short failure

 52%|█████▏    | 116/221 [00:47<02:51,  1.63s/it][A
 53%|█████▎    | 117/221 [00:47<02:08,  1.24s/it][A
 53%|█████▎    | 118/221 [00:47<01:36,  1.07it/s][A
 54%|█████▍    | 119/221 [00:48<01:12,  1.41it/s][A
 54%|█████▍    | 120/221 [00:48<00:55,  1.81it/s][A
 55%|█████▍    | 121/221 [00:48<00:42,  2.36it/s][A
 55%|█████▌    | 122/221 [00:48<00:34,  2.85it/s][A
 56%|█████▌    | 123/221 [00:48<00:28,  3.46it/s][A
 56%|█████▌    | 124/221 [00:48<00:24,  3.88it/s][A
 57%|█████▋    | 125/221 [00:49<00:23,  4.04it/s][A
 57%|█████▋    | 126/221 [00:49<00:34,  2.75it/s][A
 57%|█████▋    | 127/221 [00:50<00:34,  2.70it/s][A
 58%|█████▊    | 128/221 [00:50<00:37,  2.48it/s][A
 58%|█████▊    | 129/221 [00:50<00:35,  2.62it/s][A
 59%|█████▉    | 130/221 [00:51<00:32,  2.84it/s][A
 59%|█████▉    | 131/221 [00:51<00:25,  3.49it/s][A
 60%|█████▉    | 132/221 [00:51<00:22,  4.02it/s][A
 60%|██████    | 133/221 [00:52<00:27,  3.16it/s][A
 61%|██████    | 134/221 [00:52<00:25,  3.35it/s][A
 61%|██████    | 135/221 [00:52<00:27,  3.14it/s][A
 62%|██████▏   | 136/221 [00:53<00:28,  2.95it/s][A
 62%|██████▏   | 137/221 [00:53<00:29,  2.89it/s][A
 62%|██████▏   | 138/221 [00:53<00:31,  2.63it/s][A
 63%|██████▎   | 139/221 [00:54<00:32,  2.50it/s][A
 63%|██████▎   | 140/221 [00:54<00:30,  2.69it/s][A[h264 @ 0x5556d5fddf40] mmco: unref short failure

 64%|██████▍   | 141/221 [00:54<00:26,  3.06it/s][A
 64%|██████▍   | 142/221 [00:55<00:28,  2.80it/s][A
 65%|██████▍   | 143/221 [00:55<00:27,  2.89it/s][A
 65%|██████▌   | 144/221 [00:55<00:21,  3.57it/s][A
 66%|██████▌   | 145/221 [00:55<00:17,  4.34it/s][A
 66%|██████▌   | 146/221 [00:55<00:14,  5.13it/s][A
 67%|██████▋   | 147/221 [00:56<00:12,  5.89it/s][A
 67%|██████▋   | 148/221 [00:56<00:15,  4.77it/s][A
 67%|██████▋   | 149/221 [00:56<00:13,  5.48it/s][A
 68%|██████▊   | 150/221 [00:56<00:13,  5.43it/s][A
 68%|██████▊   | 151/221 [00:57<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:57<00:22,  3.08it/s][A
 69%|██████▉   | 153/221 [00:57<00:21,  3.23it/s][A
 70%|██████▉   | 154/221 [00:58<00:32,  2.08it/s][A
 70%|███████   | 155/221 [00:58<00:24,  2.65it/s][A
 71%|███████   | 156/221 [00:59<00:19,  3.38it/s][A
 71%|███████   | 157/221 [01:03<01:43,  1.62s/it][A
 71%|███████▏  | 158/221 [01:03<01:14,  1.18s/it][A
 72%|███████▏  | 159/221 [01:04<00:55,  1.11it/s][A
 72%|███████▏  | 160/221 [01:04<00:42,  1.43it/s][A
 73%|███████▎  | 161/221 [01:04<00:31,  1.91it/s][A
 73%|███████▎  | 162/221 [01:04<00:24,  2.42it/s][A
 74%|███████▍  | 163/221 [01:04<00:19,  2.91it/s][A
 74%|███████▍  | 164/221 [01:05<00:17,  3.18it/s][A
 75%|███████▍  | 165/221 [01:05<00:14,  3.79it/s][A
 75%|███████▌  | 166/221 [01:05<00:15,  3.64it/s][A
 76%|███████▌  | 167/221 [01:05<00:12,  4.42it/s][A[h264 @ 0x55864eeaf5c0] mmco: unref short failure
[h264 @ 0x55864eeaf5c0] mmco: unref short failure

 76%|███████▌  | 168/221 [01:08<00:58,  1.10s/it][A
 76%|███████▋  | 169/221 [01:09<00:44,  1.17it/s][A
 77%|███████▋  | 170/221 [01:09<00:35,  1.45it/s][A
 77%|███████▋  | 171/221 [01:09<00:26,  1.87it/s][A
 78%|███████▊  | 172/221 [01:09<00:20,  2.45it/s][A
 78%|███████▊  | 173/221 [01:09<00:15,  3.11it/s][A
 79%|███████▊  | 174/221 [01:09<00:12,  3.77it/s][A
 79%|███████▉  | 175/221 [01:10<00:12,  3.76it/s][A
 80%|███████▉  | 176/221 [01:10<00:12,  3.55it/s][A
 80%|████████  | 177/221 [01:10<00:10,  4.19it/s][A
 81%|████████  | 178/221 [01:11<00:12,  3.49it/s][A
 81%|████████  | 179/221 [01:11<00:16,  2.56it/s][A[h264 @ 0x5556c56e5a80] mmco: unref short failure
[h264 @ 0x5556c56e5a80] mmco: unref short failure
[h264 @ 0x5556c56e5a80] mmco: unref short failure
[h264 @ 0x5556c56e5a80] mmco: unref short failure

 82%|████████▏ | 181/221 [01:11<00:10,  3.66it/s][A
 82%|████████▏ | 182/221 [01:12<00:09,  4.07it/s][A
 83%|████████▎ | 183/221 [01:12<00:09,  3.94it/s][A[h264 @ 0x5556d5f1d380] mmco: unref short failure
[h264 @ 0x5556d5f1d380] mmco: unref short failure

 83%|████████▎ | 184/221 [01:12<00:09,  3.78it/s][A
 84%|████████▎ | 185/221 [01:12<00:08,  4.44it/s][A
 84%|████████▍ | 186/221 [01:13<00:08,  4.29it/s][A
 85%|████████▍ | 187/221 [01:13<00:06,  4.98it/s][A
 85%|████████▌ | 188/221 [01:13<00:06,  4.72it/s][A
 86%|████████▌ | 189/221 [01:13<00:08,  3.67it/s][A
 86%|████████▌ | 190/221 [01:14<00:08,  3.72it/s][A
 86%|████████▋ | 191/221 [01:14<00:06,  4.54it/s][A
 87%|████████▋ | 192/221 [01:14<00:07,  3.91it/s][A
 87%|████████▋ | 193/221 [01:14<00:06,  4.43it/s][A
 88%|████████▊ | 194/221 [01:15<00:13,  2.05it/s][A
 88%|████████▊ | 195/221 [01:15<00:10,  2.59it/s][A
 89%|████████▊ | 196/221 [01:16<00:07,  3.13it/s][A
 89%|████████▉ | 197/221 [01:16<00:06,  3.52it/s][A
 90%|████████▉ | 198/221 [01:16<00:05,  3.92it/s][A
 90%|█████████ | 199/221 [01:16<00:05,  3.82it/s][A
 90%|█████████ | 200/221 [01:17<00:06,  3.24it/s][A
 91%|█████████ | 201/221 [01:17<00:05,  3.35it/s][A
 91%|█████████▏| 202/221 [01:17<00:05,  3.35it/s][A
 92%|█████████▏| 203/221 [01:18<00:05,  3.18it/s][A
 92%|█████████▏| 204/221 [01:18<00:04,  3.88it/s][A
 93%|█████████▎| 205/221 [01:18<00:03,  4.19it/s][A
 93%|█████████▎| 206/221 [01:18<00:03,  4.16it/s][A
 94%|█████████▎| 207/221 [01:18<00:02,  4.78it/s][A
 94%|█████████▍| 208/221 [01:18<00:02,  5.18it/s][A
 95%|█████████▍| 209/221 [01:19<00:02,  5.34it/s][A
 95%|█████████▌| 210/221 [01:19<00:01,  5.51it/s][A
 95%|█████████▌| 211/221 [01:19<00:02,  3.62it/s][A[h264 @ 0x558640456200] mmco: unref short failure

 96%|█████████▌| 212/221 [01:20<00:02,  3.74it/s][A
 96%|█████████▋| 213/221 [01:20<00:02,  3.78it/s][A
 97%|█████████▋| 214/221 [01:21<00:03,  1.84it/s][A
 97%|█████████▋| 215/221 [01:21<00:02,  2.17it/s][A
 98%|█████████▊| 216/221 [01:21<00:01,  2.64it/s][A
 98%|█████████▊| 217/221 [01:22<00:01,  2.03it/s][A
 99%|█████████▊| 218/221 [01:23<00:01,  1.71it/s][A
 99%|█████████▉| 219/221 [01:23<00:00,  2.02it/s][A
100%|█████████▉| 220/221 [01:28<00:01,  1.84s/it][A
100%|██████████| 221/221 [01:28<00:00,  1.32s/it][A100%|██████████| 221/221 [01:28<00:00,  2.49it/s]
[h264 @ 0x55863c33b780] mmco: unref short failure
[h264 @ 0x5556cad0a6c0] mmco: unref short failure
[h264 @ 0x5556cad0a6c0] mmco: unref short failure
[h264 @ 0x5556d8821e80] mmco: unref short failure
[h264 @ 0x5556d8821e80] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:05,  3.38it/s][A
  1%|          | 2/221 [00:00<01:07,  3.26it/s][A
  1%|▏         | 3/221 [00:00<01:06,  3.27it/s][A
  2%|▏         | 4/221 [00:01<01:08,  3.18it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.14it/s][A
  3%|▎         | 6/221 [00:01<01:08,  3.14it/s][A
  3%|▎         | 7/221 [00:02<01:09,  3.08it/s][A
  4%|▎         | 8/221 [00:02<01:13,  2.88it/s][A
  4%|▍         | 9/221 [00:02<01:10,  3.00it/s][A
  5%|▍         | 10/221 [00:03<01:09,  3.04it/s][A[h264 @ 0x5577226e1240] mmco: unref short failure

  5%|▍         | 11/221 [00:03<01:07,  3.10it/s][A
  5%|▌         | 12/221 [00:03<01:05,  3.18it/s][A
  6%|▌         | 13/221 [00:04<01:04,  3.25it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.25it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.27it/s][A
  7%|▋         | 16/221 [00:05<01:03,  3.22it/s][A
  8%|▊         | 17/221 [00:05<01:03,  3.22it/s][A
  8%|▊         | 18/221 [00:05<01:02,  3.27it/s][A
  9%|▊         | 19/221 [00:05<01:01,  3.29it/s][A
  9%|▉         | 20/221 [00:06<01:03,  3.15it/s][A
 10%|▉         | 21/221 [00:06<01:03,  3.16it/s][A
 10%|▉         | 22/221 [00:06<01:02,  3.18it/s][A
 10%|█         | 23/221 [00:07<01:01,  3.24it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.29it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.32it/s][A
 12%|█▏        | 26/221 [00:08<00:58,  3.34it/s][A
 12%|█▏        | 27/221 [00:08<00:59,  3.26it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:09<00:58,  3.29it/s][A
 14%|█▎        | 30/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.32it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.35it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.33it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.35it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.36it/s][A
 16%|█▋        | 36/221 [00:11<00:55,  3.34it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:12<00:53,  3.38it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.39it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.36it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.35it/s][A
 19%|█▉        | 43/221 [00:13<00:52,  3.37it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.35it/s][A
 20%|██        | 45/221 [00:13<00:54,  3.25it/s][A
 21%|██        | 46/221 [00:14<00:53,  3.29it/s][A
 21%|██▏       | 47/221 [00:14<00:53,  3.24it/s][A
 22%|██▏       | 48/221 [00:14<00:53,  3.20it/s][A
 22%|██▏       | 49/221 [00:15<00:53,  3.20it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.26it/s][A
 23%|██▎       | 51/221 [00:15<00:52,  3.26it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.28it/s][A
 24%|██▍       | 53/221 [00:16<00:51,  3.28it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.32it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.33it/s][A
 25%|██▌       | 56/221 [00:17<00:50,  3.29it/s][A
 26%|██▌       | 57/221 [00:17<00:49,  3.30it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.33it/s][A
 27%|██▋       | 59/221 [00:18<00:52,  3.07it/s][A
 27%|██▋       | 60/221 [00:18<00:50,  3.16it/s][A
 28%|██▊       | 61/221 [00:18<00:50,  3.19it/s][A
 28%|██▊       | 62/221 [00:19<00:49,  3.24it/s][A
 29%|██▊       | 63/221 [00:19<00:48,  3.28it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.31it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.34it/s][A
 30%|██▉       | 66/221 [00:20<00:47,  3.29it/s][A
 30%|███       | 67/221 [00:20<00:47,  3.25it/s][A
 31%|███       | 68/221 [00:20<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:21<00:45,  3.32it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.30it/s][A[h264 @ 0x563552bdbf40] mmco: unref short failure
[h264 @ 0x563552bdbf40] mmco: unref short failure
[h264 @ 0x56355ba97080] mmco: unref short failure

 32%|███▏      | 71/221 [00:21<00:48,  3.06it/s][A
 33%|███▎      | 72/221 [00:22<00:47,  3.14it/s][A
 33%|███▎      | 73/221 [00:22<00:46,  3.21it/s][A
 33%|███▎      | 74/221 [00:22<00:44,  3.27it/s][A
 34%|███▍      | 75/221 [00:23<00:44,  3.31it/s][A
 34%|███▍      | 76/221 [00:23<00:43,  3.33it/s][A
 35%|███▍      | 77/221 [00:23<00:43,  3.34it/s][A
 35%|███▌      | 78/221 [00:23<00:43,  3.29it/s][A
 36%|███▌      | 79/221 [00:24<00:43,  3.25it/s][A
 36%|███▌      | 80/221 [00:24<00:43,  3.27it/s][A[h264 @ 0x56355691b2c0] mmco: unref short failure

 37%|███▋      | 81/221 [00:24<00:42,  3.28it/s][A
 37%|███▋      | 82/221 [00:25<00:41,  3.32it/s][A
 38%|███▊      | 83/221 [00:25<00:41,  3.34it/s][A
 38%|███▊      | 84/221 [00:25<00:41,  3.30it/s][A
 38%|███▊      | 85/221 [00:26<00:40,  3.33it/s][A
 39%|███▉      | 86/221 [00:26<00:40,  3.34it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.36it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.36it/s][A
 40%|████      | 89/221 [00:27<00:39,  3.32it/s][A
 41%|████      | 90/221 [00:27<00:39,  3.34it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.36it/s][A
 42%|████▏     | 92/221 [00:28<00:38,  3.36it/s][A
 42%|████▏     | 93/221 [00:28<00:38,  3.35it/s][A
 43%|████▎     | 94/221 [00:28<00:39,  3.25it/s][A
 43%|████▎     | 95/221 [00:29<00:38,  3.30it/s][A
 43%|████▎     | 96/221 [00:29<00:37,  3.33it/s][A
 44%|████▍     | 97/221 [00:29<00:37,  3.31it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.34it/s][A[h264 @ 0x56355ba97500] mmco: unref short failure
[h264 @ 0x56355ba97500] mmco: unref short failure

 45%|████▍     | 99/221 [00:30<00:36,  3.36it/s][A
 45%|████▌     | 100/221 [00:30<00:36,  3.33it/s][A[h264 @ 0x563543868400] mmco: unref short failure
[h264 @ 0x563543868400] mmco: unref short failure

 46%|████▌     | 101/221 [00:30<00:35,  3.35it/s][A
 46%|████▌     | 102/221 [00:31<00:35,  3.33it/s][A
 47%|████▋     | 103/221 [00:31<00:35,  3.35it/s][A
 47%|████▋     | 104/221 [00:31<00:35,  3.32it/s][A
 48%|████▊     | 105/221 [00:32<00:34,  3.34it/s][A
 48%|████▊     | 106/221 [00:32<00:34,  3.34it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.36it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.37it/s][A
 49%|████▉     | 109/221 [00:33<00:33,  3.38it/s][A
 50%|████▉     | 110/221 [00:33<00:32,  3.39it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.40it/s][A
 51%|█████     | 112/221 [00:34<00:32,  3.40it/s][A
 51%|█████     | 113/221 [00:34<00:31,  3.40it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.41it/s][A
 52%|█████▏    | 115/221 [00:35<00:31,  3.41it/s][A
 52%|█████▏    | 116/221 [00:35<00:30,  3.41it/s][A
 53%|█████▎    | 117/221 [00:35<00:30,  3.41it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.41it/s][A
 54%|█████▍    | 119/221 [00:36<00:29,  3.41it/s][A
 54%|█████▍    | 120/221 [00:36<00:29,  3.41it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:37<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:38<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:39<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:40<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:42<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:42<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:43<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:45<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:46<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:48<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:49<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:49<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:49<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:50<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:51<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:52<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:52<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:53<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:54<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:55<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:55<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:57<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:58<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:04<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.35it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:37,  5.86it/s][A
  1%|          | 2/221 [00:00<00:50,  4.33it/s][A
  1%|▏         | 3/221 [00:00<01:00,  3.58it/s][A
  2%|▏         | 4/221 [00:00<00:51,  4.21it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.66it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.01it/s][A
  3%|▎         | 7/221 [00:01<00:53,  4.04it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.39it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.54it/s][A
  5%|▍         | 10/221 [00:02<00:53,  3.94it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.90it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.24it/s][A
  6%|▌         | 13/221 [00:03<01:17,  2.68it/s][A
  6%|▋         | 14/221 [00:03<01:08,  3.02it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.90it/s][A
  7%|▋         | 16/221 [00:04<01:13,  2.80it/s][A
  8%|▊         | 17/221 [00:05<01:18,  2.60it/s][A
  8%|▊         | 18/221 [00:05<01:14,  2.71it/s][A
  9%|▉         | 20/221 [00:05<00:52,  3.82it/s][A
 10%|▉         | 21/221 [00:05<00:48,  4.15it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.32it/s][A
 10%|█         | 23/221 [00:06<00:39,  4.98it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.25it/s][A
 11%|█▏        | 25/221 [00:06<00:47,  4.11it/s][A
 12%|█▏        | 26/221 [00:06<00:46,  4.18it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  3.99it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.83it/s][A
 13%|█▎        | 29/221 [00:07<00:51,  3.74it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.67it/s][A
 14%|█▍        | 31/221 [00:08<00:50,  3.77it/s][A
 14%|█▍        | 32/221 [00:08<00:48,  3.88it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.82it/s][A
 15%|█▌        | 34/221 [00:09<00:58,  3.21it/s][A
 16%|█▌        | 35/221 [00:09<00:56,  3.27it/s][A
 16%|█▋        | 36/221 [00:09<00:56,  3.27it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.57it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.55it/s][A
 18%|█▊        | 39/221 [00:10<00:51,  3.57it/s][A
 18%|█▊        | 40/221 [00:11<00:55,  3.24it/s][A
 19%|█▊        | 41/221 [00:11<00:55,  3.25it/s][A
 19%|█▉        | 42/221 [00:11<00:50,  3.56it/s][A
 19%|█▉        | 43/221 [00:11<00:54,  3.28it/s][A
 20%|█▉        | 44/221 [00:12<00:54,  3.24it/s][A
 20%|██        | 45/221 [00:12<01:04,  2.72it/s][A
 21%|██        | 46/221 [00:13<01:01,  2.83it/s][A
 21%|██▏       | 47/221 [00:13<00:56,  3.09it/s][A
 22%|██▏       | 48/221 [00:13<00:48,  3.57it/s][A
 23%|██▎       | 50/221 [00:13<00:42,  4.05it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.82it/s][A
 24%|██▍       | 53/221 [00:14<00:43,  3.83it/s][A
 24%|██▍       | 54/221 [00:15<00:44,  3.77it/s][A
 25%|██▍       | 55/221 [00:15<00:53,  3.11it/s][A
 25%|██▌       | 56/221 [00:15<00:53,  3.07it/s][A
 26%|██▌       | 57/221 [00:16<00:53,  3.09it/s][A
 26%|██▌       | 58/221 [00:16<00:45,  3.59it/s][A
 27%|██▋       | 59/221 [00:16<00:44,  3.66it/s][A
 27%|██▋       | 60/221 [00:16<00:39,  4.07it/s][A
 28%|██▊       | 61/221 [00:16<00:38,  4.20it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.84it/s][A
 29%|██▉       | 64/221 [00:17<00:34,  4.59it/s][A
 29%|██▉       | 65/221 [00:17<00:34,  4.47it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.64it/s][A
 30%|███       | 67/221 [00:18<00:47,  3.26it/s][A
 31%|███       | 68/221 [00:18<00:45,  3.34it/s][A
 31%|███       | 69/221 [00:19<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:19<00:54,  2.75it/s][A
 32%|███▏      | 71/221 [00:20<00:56,  2.68it/s][A
 33%|███▎      | 72/221 [00:20<00:56,  2.63it/s][A
 33%|███▎      | 73/221 [00:20<00:53,  2.79it/s][A
 33%|███▎      | 74/221 [00:21<00:46,  3.15it/s][A
 34%|███▍      | 75/221 [00:21<00:43,  3.34it/s][A
 34%|███▍      | 76/221 [00:21<00:40,  3.57it/s][A
 35%|███▍      | 77/221 [00:21<00:36,  3.98it/s][A
 35%|███▌      | 78/221 [00:22<00:39,  3.61it/s][A
 36%|███▌      | 79/221 [00:22<00:39,  3.61it/s][A
 36%|███▌      | 80/221 [00:22<00:33,  4.19it/s][A
 37%|███▋      | 81/221 [00:22<00:31,  4.38it/s][A
 37%|███▋      | 82/221 [00:23<00:41,  3.34it/s][A
 38%|███▊      | 83/221 [00:23<00:33,  4.15it/s][A
 38%|███▊      | 84/221 [00:24<00:48,  2.82it/s][A
 38%|███▊      | 85/221 [00:24<00:49,  2.73it/s][A
 39%|███▉      | 86/221 [00:24<00:51,  2.60it/s][A
 39%|███▉      | 87/221 [00:25<00:54,  2.46it/s][A
 40%|███▉      | 88/221 [00:25<00:48,  2.73it/s][A
 40%|████      | 89/221 [00:25<00:48,  2.69it/s][A
 41%|████      | 90/221 [00:26<00:52,  2.51it/s][A
 41%|████      | 91/221 [00:26<00:45,  2.88it/s][A
 42%|████▏     | 92/221 [00:26<00:44,  2.90it/s][A
 42%|████▏     | 93/221 [00:27<00:52,  2.42it/s][A
 43%|████▎     | 94/221 [00:27<00:48,  2.61it/s][A
 43%|████▎     | 95/221 [00:28<00:53,  2.37it/s][A
 43%|████▎     | 96/221 [00:28<00:51,  2.44it/s][A
 44%|████▍     | 97/221 [00:29<00:47,  2.60it/s][A
 44%|████▍     | 98/221 [00:29<00:47,  2.56it/s][A
 45%|████▍     | 99/221 [00:29<00:45,  2.67it/s][A
 45%|████▌     | 100/221 [00:30<00:38,  3.14it/s][A
 46%|████▌     | 101/221 [00:30<00:33,  3.55it/s][A
 46%|████▌     | 102/221 [00:30<00:33,  3.57it/s][A
 47%|████▋     | 103/221 [00:30<00:31,  3.73it/s][A
 47%|████▋     | 104/221 [00:30<00:26,  4.49it/s][A
 48%|████▊     | 105/221 [00:31<00:31,  3.70it/s][A
 48%|████▊     | 106/221 [00:31<00:35,  3.23it/s][A
 48%|████▊     | 107/221 [00:31<00:35,  3.24it/s][A
 49%|████▉     | 108/221 [00:32<00:31,  3.63it/s][A
 49%|████▉     | 109/221 [00:32<00:29,  3.78it/s][A
 50%|████▉     | 110/221 [00:32<00:29,  3.71it/s][A
 50%|█████     | 111/221 [00:32<00:31,  3.50it/s][A
 51%|█████     | 112/221 [00:33<00:30,  3.61it/s][A
 51%|█████     | 113/221 [00:33<00:30,  3.57it/s][A
 52%|█████▏    | 114/221 [00:33<00:24,  4.34it/s][A
 52%|█████▏    | 115/221 [00:33<00:23,  4.59it/s][A
 52%|█████▏    | 116/221 [00:34<00:23,  4.49it/s][A
 53%|█████▎    | 117/221 [00:34<00:24,  4.31it/s][A
 53%|█████▎    | 118/221 [00:34<00:26,  3.90it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.43it/s][A
 54%|█████▍    | 120/221 [00:35<00:31,  3.25it/s][A
 55%|█████▍    | 121/221 [00:35<00:33,  3.02it/s][A
 55%|█████▌    | 122/221 [00:35<00:29,  3.33it/s][A
 56%|█████▌    | 123/221 [00:36<00:32,  3.02it/s][A
 56%|█████▌    | 124/221 [00:36<00:32,  2.94it/s][A
 57%|█████▋    | 125/221 [00:37<00:36,  2.65it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.88it/s][A
 57%|█████▋    | 127/221 [00:37<00:35,  2.65it/s][A
 58%|█████▊    | 128/221 [00:38<00:31,  2.95it/s][A
 58%|█████▊    | 129/221 [00:38<00:27,  3.40it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.48it/s][A
 59%|█████▉    | 131/221 [00:38<00:27,  3.23it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.40it/s][A
 60%|██████    | 133/221 [00:39<00:28,  3.08it/s][A
 61%|██████    | 134/221 [00:40<00:32,  2.69it/s][A
 61%|██████    | 135/221 [00:40<00:28,  3.02it/s][A
 62%|██████▏   | 136/221 [00:40<00:27,  3.07it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.38it/s][A
 62%|██████▏   | 138/221 [00:41<00:23,  3.53it/s][A
 63%|██████▎   | 139/221 [00:41<00:25,  3.26it/s][A
 63%|██████▎   | 140/221 [00:41<00:21,  3.68it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.96it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.37it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.44it/s][A
 65%|██████▌   | 144/221 [00:42<00:19,  3.91it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.40it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.46it/s][A
 67%|██████▋   | 147/221 [00:43<00:18,  4.09it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.99it/s][A
 67%|██████▋   | 149/221 [00:44<00:22,  3.27it/s][A
 68%|██████▊   | 150/221 [00:44<00:22,  3.13it/s][A
 68%|██████▊   | 151/221 [00:45<00:23,  2.95it/s][A
 69%|██████▉   | 152/221 [00:45<00:31,  2.17it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.45it/s][A
 70%|██████▉   | 154/221 [00:46<00:27,  2.47it/s][A
 70%|███████   | 155/221 [00:46<00:24,  2.67it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.13it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.34it/s][A
 71%|███████▏  | 158/221 [00:47<00:21,  2.89it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.08it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.49it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.15it/s][A
 73%|███████▎  | 162/221 [00:48<00:12,  4.82it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.60it/s][A
 74%|███████▍  | 164/221 [00:48<00:12,  4.75it/s][A
 75%|███████▍  | 165/221 [00:49<00:13,  4.10it/s][A
 75%|███████▌  | 166/221 [00:49<00:15,  3.66it/s][A
 76%|███████▌  | 167/221 [00:49<00:12,  4.16it/s][A
 76%|███████▌  | 168/221 [00:50<00:13,  3.85it/s][A
 77%|███████▋  | 170/221 [00:50<00:13,  3.81it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.56it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.43it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.20it/s][A
 79%|███████▊  | 174/221 [00:51<00:14,  3.26it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.17it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.74it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.55it/s][A
 81%|████████  | 178/221 [00:53<00:18,  2.29it/s][A
 81%|████████  | 179/221 [00:53<00:16,  2.62it/s][A
 81%|████████▏ | 180/221 [00:53<00:13,  3.12it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.69it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.00it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  2.98it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  2.99it/s][A
 84%|████████▍ | 186/221 [00:56<00:11,  3.12it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.43it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.26it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.49it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.31it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.63it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  4.02it/s][A
 87%|████████▋ | 193/221 [00:57<00:07,  3.66it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.29it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.69it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.52it/s][A
 89%|████████▉ | 197/221 [00:59<00:08,  2.97it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  2.97it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.22it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.20it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.57it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.38it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.77it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.72it/s][A
 93%|█████████▎| 205/221 [01:01<00:05,  3.16it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.60it/s][A
 94%|█████████▎| 207/221 [01:02<00:05,  2.73it/s][A
 94%|█████████▍| 208/221 [01:02<00:03,  3.32it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.76it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.34it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.56it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.51it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.63it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.73it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.66it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.69it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.98it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.21it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.13it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.46it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.11it/s][A100%|██████████| 221/221 [01:06<00:00,  3.31it/s]
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'area_r1': 40.3, 'area_recall': '40.3/64.9/73.9', 'area_ravg': 59.7}
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'forward_r1': 37.6, 'forward_recall': '37.6/67.5/78.6', 'forward_ravg': 61.2}
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'area_video_r1': 38.5, 'area_video_recall': '38.5/67.9/78.6', 'area_video_ravg': 61.7}
09/17/2024 07:52:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 07:52:57 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'area_video_r1': 52.5, 'area_video_recall': '52.5/75.3/81.7', 'area_video_ravg': 69.8, 'area_video_back_r1': 48.0, 'area_video_back_recall': '48.0/74.5/82.4', 'area_video_back_ravg': 68.3}
09/17/2024 07:52:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1149=======

09/17/2024 07:52:57 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.1/82.2', 'area_video_ravg': 70.1, 'area_video_back_r1': 49.0, 'area_video_back_recall': '49.0/74.2/82.5', 'area_video_back_ravg': 68.6}
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'video_r1': 37.2, 'video_recall': '37.2/63.9/74.0', 'video_ravg': 58.4}
09/17/2024 07:52:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 07:52:57 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 07:52:57 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1249--===========

09/17/2024 07:52:57 - INFO - __main__ -   {'video_r1': 51.6, 'video_recall': '51.6/74.3/80.9', 'video_ravg': 68.9}
09/17/2024 07:52:57 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 07:52:57 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 07:53:19 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.006819312460720539, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0879805088043213, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 1.9774409532546997, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.0722408294677734}
 43%|████▎     | 1250/2910 [7:57:22<59:59:31, 130.10s/it][h264 @ 0x56354a25be00] mmco: unref short failure
 43%|████▎     | 1251/2910 [7:57:26<42:29:52, 92.22s/it]  43%|████▎     | 1252/2910 [7:57:30<30:20:05, 65.87s/it][h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x56354f44af40] mmco: unref short failure
[h264 @ 0x5556dea4b1c0] mmco: unref short failure
[h264 @ 0x5556dea4b1c0] mmco: unref short failure
 43%|████▎     | 1253/2910 [7:57:36<21:55:35, 47.64s/it][h264 @ 0x558652058b40] mmco: unref short failure
[h264 @ 0x558652058b40] mmco: unref short failure
[h264 @ 0x558652058b40] mmco: unref short failure
[h264 @ 0x558652058b40] mmco: unref short failure
[h264 @ 0x56354ecb1d00] mmco: unref short failure
[h264 @ 0x56354856d9c0] mmco: unref short failure
[h264 @ 0x56354856d9c0] mmco: unref short failure
[h264 @ 0x563554036d00] mmco: unref short failure
[h264 @ 0x563554036d00] mmco: unref short failure
 43%|████▎     | 1254/2910 [7:57:41<16:08:02, 35.07s/it][h264 @ 0x55772b225380] mmco: unref short failure
09/17/2024 07:53:45 - INFO - __main__ -   current idx g0isRLf0U2E.7 from finetune_area returns wrong image/video, use 75631 instead.
 43%|████▎     | 1255/2910 [7:57:47<12:05:28, 26.30s/it] 43%|████▎     | 1256/2910 [7:57:53<9:20:02, 20.32s/it] [h264 @ 0x55568bd1b480] mmco: unref short failure
 43%|████▎     | 1257/2910 [7:58:01<7:32:15, 16.42s/it][h264 @ 0x558634e971c0] mmco: unref short failure
[h264 @ 0x558634e971c0] mmco: unref short failure
 43%|████▎     | 1258/2910 [7:58:07<6:07:38, 13.35s/it] 43%|████▎     | 1259/2910 [7:58:15<5:20:30, 11.65s/it][h264 @ 0x563558e35e00] mmco: unref short failure
[h264 @ 0x563558e35e00] mmco: unref short failure
[h264 @ 0x563543f62a40] mmco: unref short failure
 43%|████▎     | 1260/2910 [7:58:22<4:44:57, 10.36s/it][h264 @ 0x5556dd349b80] mmco: unref short failure
 43%|████▎     | 1261/2910 [7:58:29<4:14:14,  9.25s/it][h264 @ 0x5556c73a3600] mmco: unref short failure
[h264 @ 0x5556df0b5b00] mmco: unref short failure
 43%|████▎     | 1262/2910 [7:58:36<3:53:57,  8.52s/it][h264 @ 0x558651f46340] mmco: unref short failure
[h264 @ 0x558651f46340] mmco: unref short failure
[h264 @ 0x55771c6559c0] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5577318d8980] mmco: unref short failure
[h264 @ 0x5556c4516fc0] mmco: unref short failure
 43%|████▎     | 1263/2910 [7:58:42<3:37:15,  7.91s/it][h264 @ 0x5586362e61c0] mmco: unref short failure
[h264 @ 0x563548bfd100] mmco: unref short failure
 43%|████▎     | 1264/2910 [7:58:49<3:25:31,  7.49s/it][h264 @ 0x5556dd2b6d40] mmco: unref short failure
[h264 @ 0x5556dd2b6d40] mmco: unref short failure
[h264 @ 0x55864c496b00] mmco: unref short failure
 43%|████▎     | 1265/2910 [7:58:56<3:23:11,  7.41s/it][h264 @ 0x557730d33740] mmco: unref short failure
[h264 @ 0x557730d33740] mmco: unref short failure
[h264 @ 0x557726b4f7c0] mmco: unref short failure
[h264 @ 0x557726b4f7c0] mmco: unref short failure
[h264 @ 0x563543f50d00] mmco: unref short failure
[h264 @ 0x5556d05275c0] mmco: unref short failure
[h264 @ 0x563546b52fc0] mmco: unref short failure
[h264 @ 0x558644cfee00] mmco: unref short failure
[h264 @ 0x558644cfee00] mmco: unref short failure
09/17/2024 07:55:16 - INFO - __main__ -   current idx 3B1z5s6SZbQ.15 from finetune_area returns wrong image/video, use 103907 instead.
[h264 @ 0x5576de650ec0] mmco: unref short failure
[h264 @ 0x5576de650ec0] mmco: unref short failure
[h264 @ 0x557721304940] mmco: unref short failure
[h264 @ 0x557721304940] mmco: unref short failure
 44%|████▎     | 1266/2910 [7:59:29<6:57:00, 15.22s/it][h264 @ 0x5556c45171c0] mmco: unref short failure
[h264 @ 0x55864ec16a40] mmco: unref short failure
[h264 @ 0x557725856e40] mmco: unref short failure
[h264 @ 0x557725856e40] mmco: unref short failure
 44%|████▎     | 1267/2910 [7:59:46<7:12:21, 15.79s/it][h264 @ 0x5586423c0e00] mmco: unref short failure
[h264 @ 0x5586423c0e00] mmco: unref short failure
[h264 @ 0x56354c0d7200] mmco: unref short failure
[h264 @ 0x56354c0d7200] mmco: unref short failure
 44%|████▎     | 1268/2910 [7:59:54<6:04:36, 13.32s/it][h264 @ 0x56354c0f7c00] mmco: unref short failure
09/17/2024 07:55:59 - INFO - __main__ -   current idx A-E7Tr5PbZI.14 from finetune_area returns wrong image/video, use 131236 instead.
[h264 @ 0x558632eaba00] mmco: unref short failure
[h264 @ 0x558632eaba00] mmco: unref short failure
not have audios GAwav3sZcGw.4
[h264 @ 0x55864d40fd40] mmco: unref short failure
 44%|████▎     | 1269/2910 [8:00:06<5:53:20, 12.92s/it][h264 @ 0x56354a8c9000] mmco: unref short failure
[h264 @ 0x5556d93df600] mmco: unref short failure
[h264 @ 0x5556d93df600] mmco: unref short failure
[h264 @ 0x5556c7096680] mmco: unref short failure
[h264 @ 0x5556c7096680] mmco: unref short failure
 44%|████▎     | 1270/2910 [8:00:25<6:47:28, 14.91s/it][h264 @ 0x55864c53e940] mmco: unref short failure
 44%|████▎     | 1271/2910 [8:00:32<5:40:57, 12.48s/it][h264 @ 0x5556dc218f00] mmco: unref short failure
 44%|████▎     | 1272/2910 [8:00:39<4:53:46, 10.76s/it] 44%|████▎     | 1273/2910 [8:00:46<4:21:01,  9.57s/it][h264 @ 0x55864d40fd40] mmco: unref short failure
[h264 @ 0x55864d40fd40] mmco: unref short failure
[h264 @ 0x56354f7a7e40] mmco: unref short failure
[h264 @ 0x56354f7a7e40] mmco: unref short failure
[h264 @ 0x56355291b340] mmco: unref short failure
[h264 @ 0x56355291b340] mmco: unref short failure
09/17/2024 07:56:50 - INFO - __main__ -   current idx aKaIctkC1IU.24 from finetune_area returns wrong image/video, use 100476 instead.
[h264 @ 0x55568cd168c0] mmco: unref short failure
[h264 @ 0x55568cd168c0] mmco: unref short failure
[h264 @ 0x55568c1158c0] mmco: unref short failure
[h264 @ 0x55568c1158c0] mmco: unref short failure
[h264 @ 0x55568c1158c0] mmco: unref short failure
[h264 @ 0x557720e14280] mmco: unref short failure
[h264 @ 0x557720e14280] mmco: unref short failure
[h264 @ 0x55865074e240] mmco: unref short failure
[h264 @ 0x55865074e240] mmco: unref short failure
[h264 @ 0x5577327f8880] mmco: unref short failure
[h264 @ 0x5577327f8880] mmco: unref short failure
[h264 @ 0x5577327f8880] mmco: unref short failure
[h264 @ 0x5577327f8880] mmco: unref short failure
[h264 @ 0x557722927840] mmco: unref short failure
[h264 @ 0x557722927840] mmco: unref short failure
[h264 @ 0x557722927840] mmco: unref short failure
[h264 @ 0x557722927840] mmco: unref short failure
[h264 @ 0x55864d39e600] mmco: unref short failure
[h264 @ 0x55864d39e600] mmco: unref short failure
[h264 @ 0x5556ca4f4840] mmco: unref short failure
[h264 @ 0x5556ca4f4840] mmco: unref short failure
[h264 @ 0x5556cd486e40] mmco: unref short failure
[h264 @ 0x5556cd486e40] mmco: unref short failure
[h264 @ 0x563546b53480] mmco: unref short failure
[h264 @ 0x5635562ae680] mmco: unref short failure
[h264 @ 0x5635562ae680] mmco: unref short failure
[h264 @ 0x56355613efc0] mmco: unref short failure
[h264 @ 0x56355613efc0] mmco: unref short failure
[h264 @ 0x55864c4e9dc0] mmco: unref short failure
[h264 @ 0x558653179b80] mmco: unref short failure
[h264 @ 0x55864fc3c980] mmco: unref short failure
[h264 @ 0x55864fc3c980] mmco: unref short failure
 44%|████▍     | 1274/2910 [8:02:02<13:28:01, 29.63s/it][h264 @ 0x5577185e94c0] mmco: unref short failure
[h264 @ 0x5577185e94c0] mmco: unref short failure
[h264 @ 0x5556c90b1e40] mmco: unref short failure
[h264 @ 0x558653d3c140] mmco: unref short failure
[h264 @ 0x558653d3c140] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
[h264 @ 0x5576deeeef00] mmco: unref short failure
 44%|████▍     | 1275/2910 [8:02:21<12:02:15, 26.50s/it][h264 @ 0x56355f685ec0] mmco: unref short failure
[h264 @ 0x56355f685ec0] mmco: unref short failure
[h264 @ 0x5556e1718f40] mmco: unref short failure
 44%|████▍     | 1276/2910 [8:02:29<9:23:48, 20.70s/it] [h264 @ 0x5556daeb7540] mmco: unref short failure
[h264 @ 0x5556daeb7540] mmco: unref short failure
[h264 @ 0x56355c3b2940] mmco: unref short failure
[h264 @ 0x5556da039300] mmco: unref short failure
[h264 @ 0x5556da039300] mmco: unref short failure
 44%|████▍     | 1277/2910 [8:02:51<9:36:55, 21.20s/it][h264 @ 0x558648279040] mmco: unref short failure
 44%|████▍     | 1278/2910 [8:02:58<7:41:57, 16.98s/it] 44%|████▍     | 1279/2910 [8:03:05<6:20:52, 14.01s/it][h264 @ 0x5556e03b1cc0] mmco: unref short failure
[h264 @ 0x5556e03b1cc0] mmco: unref short failure
[h264 @ 0x5556e03b1cc0] mmco: unref short failure
[h264 @ 0x5556e03b1cc0] mmco: unref short failure
[h264 @ 0x55864fa90a00] mmco: unref short failure
[h264 @ 0x55864fa90a00] mmco: unref short failure
[h264 @ 0x55864fa90a00] mmco: unref short failure
[h264 @ 0x55864fa90a00] mmco: unref short failure
[h264 @ 0x5556c7274480] mmco: unref short failure
 44%|████▍     | 1280/2910 [8:03:12<5:19:22, 11.76s/it][h264 @ 0x557732cf8600] mmco: unref short failure
[h264 @ 0x557732cf8600] mmco: unref short failure
[h264 @ 0x56355a743040] mmco: unref short failure
[h264 @ 0x56355a743040] mmco: unref short failure
[h264 @ 0x5556d5239340] mmco: unref short failure
[h264 @ 0x5556d5239340] mmco: unref short failure
[h264 @ 0x5556d5239340] mmco: unref short failure
[h264 @ 0x5556d5239340] mmco: unref short failure
 44%|████▍     | 1281/2910 [8:03:19<4:40:01, 10.31s/it][h264 @ 0x5556c7148000] mmco: unref short failure
[h264 @ 0x5556c7148000] mmco: unref short failure
09/17/2024 07:59:24 - INFO - __main__ -   current idx Z9v3A-MeZGQ.15 from finetune_area returns wrong image/video, use 36851 instead.
[h264 @ 0x5556c3dfe8c0] mmco: unref short failure
[h264 @ 0x5556c3dfe8c0] mmco: unref short failure
[h264 @ 0x5556c773ddc0] mmco: unref short failure
[h264 @ 0x5586548cdb00] mmco: unref short failure
[h264 @ 0x56355fef9f40] mmco: unref short failure
[h264 @ 0x56355fef9f40] mmco: unref short failure
[h264 @ 0x55772d48ce40] mmco: unref short failure
[h264 @ 0x55772d5b0400] mmco: unref short failure
[h264 @ 0x5635601e7e00] mmco: unref short failure
[h264 @ 0x5635601e7e00] mmco: unref short failure
09/17/2024 08:00:03 - INFO - __main__ -   current idx QRr-nFmU9s8.3 from finetune_area returns wrong image/video, use 122977 instead.
[h264 @ 0x5556dae45700] mmco: unref short failure
[h264 @ 0x5556c59dc080] mmco: unref short failure
[h264 @ 0x5586461ffbc0] mmco: unref short failure
[h264 @ 0x5586461ffbc0] mmco: unref short failure
[h264 @ 0x56355b369ec0] mmco: unref short failure
[h264 @ 0x56355b369ec0] mmco: unref short failure
 44%|████▍     | 1282/2910 [8:04:32<13:13:58, 29.26s/it][h264 @ 0x55771c96f640] mmco: unref short failure
 44%|████▍     | 1283/2910 [8:04:45<11:00:54, 24.37s/it][h264 @ 0x5556e0a6a3c0] mmco: unref short failure
[h264 @ 0x5556e0a6a3c0] mmco: unref short failure
 44%|████▍     | 1284/2910 [8:04:56<9:10:12, 20.30s/it] [h264 @ 0x5576dedb0c40] mmco: unref short failure
[h264 @ 0x5576dedb0c40] mmco: unref short failure
[h264 @ 0x56354e238100] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x5556dea4b640] mmco: unref short failure
[h264 @ 0x56355df06b80] mmco: unref short failure
[h264 @ 0x56355df06b80] mmco: unref short failure
[h264 @ 0x56355df06b80] mmco: unref short failure
[h264 @ 0x56355df06b80] mmco: unref short failure
[h264 @ 0x55771babf580] mmco: unref short failure
[h264 @ 0x55771babf580] mmco: unref short failure
[h264 @ 0x55771babf580] mmco: unref short failure
[h264 @ 0x55771babf580] mmco: unref short failure
[h264 @ 0x55863cf30840] mmco: unref short failure
[h264 @ 0x55863cf30840] mmco: unref short failure
[h264 @ 0x55864c36d480] mmco: unref short failure
 44%|████▍     | 1285/2910 [8:05:23<10:08:33, 22.47s/it][h264 @ 0x563551458c00] mmco: unref short failure
[h264 @ 0x563551458c00] mmco: unref short failure
[h264 @ 0x558647457c00] mmco: unref short failure
[h264 @ 0x558647457c00] mmco: unref short failure
[h264 @ 0x5556dfa70a80] mmco: unref short failure
 44%|████▍     | 1286/2910 [8:05:30<7:58:29, 17.68s/it] [h264 @ 0x5556d96e0d00] mmco: unref short failure
 44%|████▍     | 1287/2910 [8:05:37<6:30:48, 14.45s/it][h264 @ 0x5556c6d03b00] mmco: unref short failure
[h264 @ 0x5556c6d03b00] mmco: unref short failure
[h264 @ 0x563564f4d840] mmco: unref short failure
 44%|████▍     | 1288/2910 [8:05:43<5:24:59, 12.02s/it][h264 @ 0x5576df2e0c00] mmco: unref short failure
[h264 @ 0x5576df2e0c00] mmco: unref short failure
[h264 @ 0x558652bfcd00] mmco: unref short failure
 44%|████▍     | 1289/2910 [8:05:50<4:42:13, 10.45s/it][h264 @ 0x55864597dc40] mmco: unref short failure
[h264 @ 0x55864597dc40] mmco: unref short failure
[h264 @ 0x55772efd6340] mmco: unref short failure
[h264 @ 0x55772efd6340] mmco: unref short failure
[h264 @ 0x55772efd6340] mmco: unref short failure
[h264 @ 0x55772efd6340] mmco: unref short failure
09/17/2024 08:02:04 - INFO - __main__ -   current idx D5HFB_qydCY.50 from finetune_area returns wrong image/video, use 18127 instead.
[h264 @ 0x55864f53ff80] mmco: unref short failure
[h264 @ 0x55864f53ff80] mmco: unref short failure
[h264 @ 0x56355428ebc0] mmco: unref short failure
[h264 @ 0x56355428ebc0] mmco: unref short failure
[h264 @ 0x56355428ebc0] mmco: unref short failure
[h264 @ 0x56355428ebc0] mmco: unref short failure
[h264 @ 0x563560035580] mmco: unref short failure
[h264 @ 0x563560035580] mmco: unref short failure
[h264 @ 0x55772c8341c0] mmco: unref short failure
[h264 @ 0x55772c8341c0] mmco: unref short failure
[h264 @ 0x55568c064280] mmco: unref short failure
[h264 @ 0x5556da725940] mmco: unref short failure
09/17/2024 08:02:45 - INFO - __main__ -   current idx PXm6mn8_9zE.31 from finetune_area returns wrong image/video, use 16184 instead.
[h264 @ 0x5556d86d8f40] mmco: unref short failure
[h264 @ 0x55771c63dc00] mmco: unref short failure
[h264 @ 0x55773447d240] mmco: unref short failure
[h264 @ 0x5586395ccf00] mmco: unref short failure
[h264 @ 0x5586395ccf00] mmco: unref short failure
 44%|████▍     | 1290/2910 [8:07:03<13:06:25, 29.13s/it][h264 @ 0x557732b22480] mmco: unref short failure
[h264 @ 0x557732b22480] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
[h264 @ 0x5556e21d8880] mmco: unref short failure
 44%|████▍     | 1291/2910 [8:07:10<10:07:32, 22.52s/it][h264 @ 0x558634835900] mmco: unref short failure
[h264 @ 0x558634835900] mmco: unref short failure
 44%|████▍     | 1292/2910 [8:07:21<8:35:27, 19.11s/it] [h264 @ 0x5635575f7680] mmco: unref short failure
[h264 @ 0x5635575f7680] mmco: unref short failure
[h264 @ 0x5577284e0840] mmco: unref short failure
[h264 @ 0x5577284e0840] mmco: unref short failure
[h264 @ 0x557732112000] mmco: unref short failure
[h264 @ 0x557732112000] mmco: unref short failure
[h264 @ 0x563549bb2d40] mmco: unref short failure
[h264 @ 0x563549bb2d40] mmco: unref short failure
[h264 @ 0x5556d389ea80] mmco: unref short failure
[h264 @ 0x5556d389ea80] mmco: unref short failure
 44%|████▍     | 1293/2910 [8:07:47<9:32:24, 21.24s/it][h264 @ 0x5556e02c4680] mmco: unref short failure
[h264 @ 0x5556e02c4680] mmco: unref short failure
 44%|████▍     | 1294/2910 [8:08:03<8:46:35, 19.55s/it] 45%|████▍     | 1295/2910 [8:08:09<7:02:08, 15.68s/it][h264 @ 0x5556cf28bb00] mmco: unref short failure
[h264 @ 0x5556cf28bb00] mmco: unref short failure
 45%|████▍     | 1296/2910 [8:08:16<5:49:22, 12.99s/it][h264 @ 0x5586357376c0] mmco: unref short failure
 45%|████▍     | 1297/2910 [8:08:22<4:54:10, 10.94s/it][h264 @ 0x5556daec8800] mmco: unref short failure
[h264 @ 0x55772bca7400] mmco: unref short failure
[h264 @ 0x55772bca7400] mmco: unref short failure
[h264 @ 0x5577377bf180] mmco: unref short failure
[h264 @ 0x5577377bf180] mmco: unref short failure
09/17/2024 08:04:33 - INFO - __main__ -   current idx YAXaCmky4Hw.31 from finetune_area returns wrong image/video, use 70706 instead.
[h264 @ 0x5635479d86c0] mmco: unref short failure
[h264 @ 0x5635479d86c0] mmco: unref short failure
[h264 @ 0x55863b17c340] mmco: unref short failure
[h264 @ 0x55863b17c340] mmco: unref short failure
[h264 @ 0x563551d58900] mmco: unref short failure
[h264 @ 0x563551d58900] mmco: unref short failure
[h264 @ 0x55771d337380] mmco: unref short failure
[h264 @ 0x55771d337380] mmco: unref short failure
[h264 @ 0x563541775f40] mmco: unref short failure
[h264 @ 0x563541775f40] mmco: unref short failure
[h264 @ 0x563541775f40] mmco: unref short failure
[h264 @ 0x563541775f40] mmco: unref short failure
[h264 @ 0x5635625a1d00] mmco: unref short failure
[h264 @ 0x5635625a1d00] mmco: unref short failure
[h264 @ 0x5576de43c140] mmco: unref short failure
[h264 @ 0x55863b17bec0] mmco: unref short failure
09/17/2024 08:05:12 - INFO - __main__ -   current idx 7tqvfeOf2ug.2 from finetune_area returns wrong image/video, use 99459 instead.
[h264 @ 0x558642644e00] mmco: unref short failure
[h264 @ 0x5577319ed280] mmco: unref short failure
[h264 @ 0x5577319ed280] mmco: unref short failure
 45%|████▍     | 1298/2910 [8:09:33<12:58:32, 28.98s/it] 45%|████▍     | 1299/2910 [8:09:41<10:08:26, 22.66s/it]09/17/2024 08:05:40 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 08:05:40 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x563543f66a80] mmco: unref short failure
[h264 @ 0x563543f66a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563564974940] mmco: unref short failure
[h264 @ 0x563564974940] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55771fa8b740] mmco: unref short failure
[h264 @ 0x55771fa8b740] mmco: unref short failure
[h264 @ 0x55772dfc6440] mmco: unref short failure
[h264 @ 0x55772dfc6440] mmco: unref short failure
[h264 @ 0x55772dfc6440] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772c62fdc0] mmco: unref short failure
[h264 @ 0x55772c62fdc0] mmco: unref short failure
[h264 @ 0x56355bb20180] mmco: unref short failure
[h264 @ 0x56355bb20180] mmco: unref short failure
09/17/2024 08:07:19 - INFO - __main__ -   current idx eB3AXJxM634.13 from finetune_area returns wrong image/video, use 48373 instead.
[h264 @ 0x5556dd3122c0] mmco: unref short failure
[h264 @ 0x55771a78f240] mmco: unref short failure
[h264 @ 0x55771a78f240] mmco: unref short failure
[h264 @ 0x5577257c0640] mmco: unref short failure
[h264 @ 0x5577257c0640] mmco: unref short failure
[h264 @ 0x5577257c0640] mmco: unref short failure
[h264 @ 0x5577257c0640] mmco: unref short failure
[h264 @ 0x5577257c0640] mmco: unref short failure
[h264 @ 0x5556c6ccbc40] mmco: unref short failure
[h264 @ 0x55863310c300] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:37,  1.40it/s][A
  1%|          | 2/221 [00:01<02:13,  1.64it/s][A
  1%|▏         | 3/221 [00:01<01:28,  2.46it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.43it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.46it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.23it/s][A
  3%|▎         | 7/221 [00:02<00:48,  4.39it/s][A
  4%|▎         | 8/221 [00:02<01:20,  2.64it/s][A
  4%|▍         | 9/221 [00:03<01:11,  2.96it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A
  5%|▍         | 11/221 [00:03<01:01,  3.42it/s][A
  5%|▌         | 12/221 [00:04<01:13,  2.83it/s][A
  6%|▌         | 13/221 [00:04<00:58,  3.53it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.37it/s][A
  7%|▋         | 15/221 [00:04<00:53,  3.83it/s][A
  7%|▋         | 16/221 [00:04<00:51,  4.02it/s][A
  8%|▊         | 17/221 [00:05<00:47,  4.31it/s][A
  8%|▊         | 18/221 [00:05<00:50,  4.02it/s][A
  9%|▊         | 19/221 [00:05<00:42,  4.72it/s][A
  9%|▉         | 20/221 [00:05<00:36,  5.58it/s][A
 10%|▉         | 21/221 [00:05<00:32,  6.23it/s][A
 10%|▉         | 22/221 [00:05<00:37,  5.26it/s][A
 10%|█         | 23/221 [00:06<00:36,  5.45it/s][A
 11%|█         | 24/221 [00:06<00:34,  5.75it/s][A
 11%|█▏        | 25/221 [00:06<00:33,  5.87it/s][A[h264 @ 0x5586518056c0] mmco: unref short failure

 12%|█▏        | 26/221 [00:06<00:37,  5.22it/s][A
 12%|█▏        | 27/221 [00:06<00:32,  5.97it/s][A
 13%|█▎        | 28/221 [00:07<00:41,  4.69it/s][A
 13%|█▎        | 29/221 [00:07<00:35,  5.35it/s][A
 14%|█▎        | 30/221 [00:07<00:37,  5.03it/s][A
 14%|█▍        | 31/221 [00:07<00:33,  5.72it/s][A
 14%|█▍        | 32/221 [00:07<00:31,  5.96it/s][A
 15%|█▍        | 33/221 [00:08<01:06,  2.82it/s][A
 15%|█▌        | 34/221 [00:08<00:52,  3.56it/s][A
 16%|█▌        | 35/221 [00:08<00:43,  4.28it/s][A
 16%|█▋        | 36/221 [00:09<00:42,  4.36it/s][A
 17%|█▋        | 37/221 [00:09<00:56,  3.26it/s][A
 17%|█▋        | 38/221 [00:09<00:57,  3.19it/s][A
 18%|█▊        | 39/221 [00:10<00:50,  3.64it/s][A
 18%|█▊        | 40/221 [00:10<00:53,  3.41it/s][A
 19%|█▊        | 41/221 [00:10<00:46,  3.83it/s][A
 19%|█▉        | 42/221 [00:11<01:31,  1.96it/s][A
 19%|█▉        | 43/221 [00:11<01:10,  2.52it/s][A
 20%|█▉        | 44/221 [00:11<00:55,  3.17it/s][A
 20%|██        | 45/221 [00:12<01:29,  1.97it/s][A
 21%|██        | 46/221 [00:13<01:40,  1.73it/s][A
 21%|██▏       | 47/221 [00:15<02:33,  1.13it/s][A
 22%|██▏       | 48/221 [00:15<01:53,  1.52it/s][A
 22%|██▏       | 49/221 [00:15<01:28,  1.94it/s][A
 23%|██▎       | 50/221 [00:15<01:06,  2.55it/s][A
 24%|██▎       | 52/221 [00:15<00:42,  4.01it/s][A
 24%|██▍       | 53/221 [00:15<00:38,  4.40it/s][A
 24%|██▍       | 54/221 [00:17<01:15,  2.20it/s][A
 25%|██▍       | 55/221 [00:17<01:10,  2.35it/s][A
 25%|██▌       | 56/221 [00:17<01:00,  2.71it/s][A
 26%|██▌       | 57/221 [00:17<01:01,  2.67it/s][A[h264 @ 0x558636a69ac0] mmco: unref short failure
[h264 @ 0x558636a69ac0] mmco: unref short failure

 26%|██▌       | 58/221 [00:18<00:56,  2.87it/s][A
 27%|██▋       | 59/221 [00:18<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:18<00:45,  3.56it/s][A
 28%|██▊       | 61/221 [00:18<00:41,  3.88it/s][A
 28%|██▊       | 62/221 [00:19<00:36,  4.34it/s][A
 29%|██▊       | 63/221 [00:19<00:30,  5.14it/s][A
 29%|██▉       | 64/221 [00:19<00:26,  5.96it/s][A
 29%|██▉       | 65/221 [00:19<00:24,  6.29it/s][A
 30%|██▉       | 66/221 [00:19<00:44,  3.50it/s][A
 30%|███       | 67/221 [00:20<00:39,  3.89it/s][A
 31%|███       | 68/221 [00:20<00:48,  3.12it/s][A
 31%|███       | 69/221 [00:21<00:54,  2.77it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.43it/s][A
 32%|███▏      | 71/221 [00:25<03:54,  1.57s/it][A
 33%|███▎      | 72/221 [00:25<02:52,  1.16s/it][A
 33%|███▎      | 73/221 [00:26<02:17,  1.08it/s][A
 33%|███▎      | 74/221 [00:26<01:44,  1.41it/s][A
 34%|███▍      | 75/221 [00:26<01:26,  1.69it/s][A
 34%|███▍      | 76/221 [00:27<01:07,  2.14it/s][A
 35%|███▍      | 77/221 [00:27<00:55,  2.61it/s][A
 35%|███▌      | 78/221 [00:27<00:50,  2.84it/s][A
 36%|███▌      | 79/221 [00:28<01:02,  2.28it/s][A
 36%|███▌      | 80/221 [00:28<00:48,  2.94it/s][A
 37%|███▋      | 81/221 [00:28<00:42,  3.27it/s][A
 37%|███▋      | 82/221 [00:28<00:41,  3.39it/s][A
 38%|███▊      | 83/221 [00:29<00:38,  3.54it/s][A
 38%|███▊      | 84/221 [00:29<00:31,  4.31it/s][A
 38%|███▊      | 85/221 [00:29<00:27,  5.01it/s][A
 39%|███▉      | 86/221 [00:29<00:24,  5.57it/s][A
 39%|███▉      | 87/221 [00:29<00:30,  4.35it/s][A
 40%|███▉      | 88/221 [00:30<00:32,  4.08it/s][A
 40%|████      | 89/221 [00:33<02:43,  1.24s/it][A
 41%|████      | 90/221 [00:33<02:00,  1.09it/s][A
 41%|████      | 91/221 [00:33<01:28,  1.46it/s][A
 42%|████▏     | 92/221 [00:34<01:07,  1.91it/s][A
 42%|████▏     | 93/221 [00:34<01:09,  1.84it/s][A
 43%|████▎     | 94/221 [00:35<01:09,  1.82it/s][A
 43%|████▎     | 95/221 [00:35<00:53,  2.34it/s][A
 43%|████▎     | 96/221 [00:35<00:45,  2.76it/s][A
 44%|████▍     | 97/221 [00:35<00:35,  3.50it/s][A
 44%|████▍     | 98/221 [00:35<00:32,  3.75it/s][A
 45%|████▍     | 99/221 [00:36<00:29,  4.14it/s][A
 45%|████▌     | 100/221 [00:36<00:29,  4.15it/s][A
 46%|████▌     | 101/221 [00:36<00:34,  3.49it/s][A[h264 @ 0x5556d30bb800] mmco: unref short failure

 46%|████▌     | 102/221 [00:36<00:34,  3.48it/s][A
 47%|████▋     | 103/221 [00:37<00:30,  3.88it/s][A
 47%|████▋     | 104/221 [00:37<00:26,  4.49it/s][A
 48%|████▊     | 105/221 [00:37<00:27,  4.17it/s][A
 48%|████▊     | 106/221 [00:38<00:46,  2.46it/s][A
 48%|████▊     | 107/221 [00:38<00:36,  3.13it/s][A
 49%|████▉     | 108/221 [00:38<00:31,  3.56it/s][A
 49%|████▉     | 109/221 [00:38<00:27,  4.03it/s][A
 50%|████▉     | 110/221 [00:39<00:25,  4.29it/s][A
 50%|█████     | 111/221 [00:39<00:34,  3.22it/s][A
 51%|█████     | 112/221 [00:39<00:29,  3.73it/s][A
 51%|█████     | 113/221 [00:40<00:31,  3.48it/s][A
 52%|█████▏    | 114/221 [00:40<00:27,  3.85it/s][A
 52%|█████▏    | 115/221 [00:40<00:24,  4.39it/s][A[h264 @ 0x55864e979a80] mmco: unref short failure
[h264 @ 0x55864e979a80] mmco: unref short failure
[h264 @ 0x558632a17400] mmco: unref short failure
[h264 @ 0x558632a17400] mmco: unref short failure
[h264 @ 0x55863cdd9b40] mmco: unref short failure
[h264 @ 0x55863cdd9b40] mmco: unref short failure
[h264 @ 0x55863cdd9b40] mmco: unref short failure
[h264 @ 0x55863cdd9b40] mmco: unref short failure

 52%|█████▏    | 116/221 [00:45<02:55,  1.67s/it][A
 53%|█████▎    | 117/221 [00:45<02:11,  1.27s/it][A
 53%|█████▎    | 118/221 [00:46<01:41,  1.01it/s][A
 54%|█████▍    | 119/221 [00:46<01:16,  1.34it/s][A
 54%|█████▍    | 120/221 [00:46<00:58,  1.74it/s][A
 55%|█████▍    | 121/221 [00:46<00:45,  2.20it/s][A
 55%|█████▌    | 122/221 [00:46<00:40,  2.44it/s][A
 56%|█████▌    | 123/221 [00:47<00:32,  3.01it/s][A
 56%|█████▌    | 124/221 [00:47<00:27,  3.56it/s][A
 57%|█████▋    | 125/221 [00:47<00:25,  3.76it/s][A
 57%|█████▋    | 126/221 [00:48<00:40,  2.33it/s][A
 57%|█████▋    | 127/221 [00:48<00:38,  2.46it/s][A
 58%|█████▊    | 128/221 [00:49<00:41,  2.26it/s][A
 58%|█████▊    | 129/221 [00:49<00:37,  2.47it/s][A
 59%|█████▉    | 130/221 [00:49<00:31,  2.86it/s][A
 59%|█████▉    | 131/221 [00:49<00:27,  3.30it/s][A
 60%|█████▉    | 132/221 [00:50<00:23,  3.84it/s][A
 60%|██████    | 133/221 [00:50<00:25,  3.49it/s][A
 61%|██████    | 134/221 [00:50<00:22,  3.82it/s][A
 61%|██████    | 135/221 [00:50<00:23,  3.73it/s][A
 62%|██████▏   | 136/221 [00:51<00:26,  3.24it/s][A
 62%|██████▏   | 137/221 [00:51<00:26,  3.19it/s][A
 62%|██████▏   | 138/221 [00:52<00:28,  2.86it/s][A
 63%|██████▎   | 139/221 [00:52<00:30,  2.66it/s][A
 63%|██████▎   | 140/221 [00:52<00:28,  2.81it/s][A
 64%|██████▍   | 141/221 [00:53<00:25,  3.17it/s][A
 64%|██████▍   | 142/221 [00:53<00:27,  2.90it/s][A
 65%|██████▍   | 143/221 [00:53<00:27,  2.83it/s][A
 65%|██████▌   | 144/221 [00:53<00:22,  3.49it/s][A
 66%|██████▌   | 145/221 [00:54<00:18,  4.17it/s][A
 67%|██████▋   | 147/221 [00:54<00:12,  5.89it/s][A
 67%|██████▋   | 148/221 [00:54<00:14,  5.08it/s][A
 68%|██████▊   | 150/221 [00:54<00:11,  6.16it/s][A
 68%|██████▊   | 151/221 [00:55<00:20,  3.45it/s][A
 69%|██████▉   | 152/221 [00:55<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [00:56<00:20,  3.24it/s][A
 70%|██████▉   | 154/221 [00:57<00:30,  2.20it/s][A
 70%|███████   | 155/221 [00:57<00:25,  2.61it/s][A
 71%|███████   | 156/221 [00:57<00:22,  2.84it/s][A
 71%|███████   | 157/221 [01:01<01:39,  1.56s/it][A
 71%|███████▏  | 158/221 [01:02<01:12,  1.15s/it][A
 72%|███████▏  | 159/221 [01:02<00:54,  1.14it/s][A
 72%|███████▏  | 160/221 [01:02<00:40,  1.50it/s][A
 73%|███████▎  | 162/221 [01:02<00:23,  2.49it/s][A
 74%|███████▍  | 163/221 [01:02<00:20,  2.86it/s][A
 74%|███████▍  | 164/221 [01:03<00:17,  3.17it/s][A
 75%|███████▍  | 165/221 [01:03<00:15,  3.71it/s][A
 75%|███████▌  | 166/221 [01:03<00:16,  3.37it/s][A
 76%|███████▌  | 167/221 [01:03<00:13,  4.10it/s][A[h264 @ 0x56355842a300] mmco: unref short failure
[h264 @ 0x56355842a300] mmco: unref short failure

 76%|███████▌  | 168/221 [01:06<00:51,  1.03it/s][A
 76%|███████▋  | 169/221 [01:06<00:41,  1.25it/s][A
 77%|███████▋  | 170/221 [01:07<00:32,  1.57it/s][A
 77%|███████▋  | 171/221 [01:07<00:24,  2.04it/s][A
 78%|███████▊  | 172/221 [01:07<00:18,  2.61it/s][A
 78%|███████▊  | 173/221 [01:07<00:16,  2.96it/s][A
 79%|███████▊  | 174/221 [01:07<00:13,  3.49it/s][A
 79%|███████▉  | 175/221 [01:08<00:13,  3.44it/s][A
 80%|███████▉  | 176/221 [01:08<00:13,  3.37it/s][A
 80%|████████  | 177/221 [01:08<00:10,  4.09it/s][A
 81%|████████  | 178/221 [01:08<00:11,  3.80it/s][A
 81%|████████  | 179/221 [01:09<00:17,  2.42it/s][A
 82%|████████▏ | 181/221 [01:09<00:11,  3.54it/s][A
 82%|████████▏ | 182/221 [01:09<00:09,  4.06it/s][A
 83%|████████▎ | 183/221 [01:10<00:09,  3.94it/s][A
 83%|████████▎ | 184/221 [01:10<00:09,  3.81it/s][A
 84%|████████▎ | 185/221 [01:10<00:08,  4.43it/s][A
 84%|████████▍ | 186/221 [01:10<00:07,  4.46it/s][A
 85%|████████▍ | 187/221 [01:11<00:06,  5.24it/s][A
 85%|████████▌ | 188/221 [01:11<00:06,  4.82it/s][A
 86%|████████▌ | 189/221 [01:11<00:08,  3.82it/s][A
 86%|████████▌ | 190/221 [01:11<00:07,  3.96it/s][A
 87%|████████▋ | 192/221 [01:12<00:06,  4.78it/s][A[h264 @ 0x563553f81740] mmco: unref short failure

 88%|████████▊ | 194/221 [01:13<00:07,  3.41it/s][A
 88%|████████▊ | 195/221 [01:13<00:06,  3.85it/s][A
 89%|████████▊ | 196/221 [01:13<00:05,  4.18it/s][A
 89%|████████▉ | 197/221 [01:13<00:05,  4.52it/s][A
 90%|████████▉ | 198/221 [01:13<00:04,  4.79it/s][A
 90%|█████████ | 199/221 [01:13<00:04,  4.49it/s][A
 90%|█████████ | 200/221 [01:14<00:05,  3.82it/s][A
 91%|█████████ | 201/221 [01:14<00:05,  3.97it/s][A
 91%|█████████▏| 202/221 [01:14<00:04,  4.61it/s][A
 92%|█████████▏| 203/221 [01:15<00:04,  3.78it/s][A
 92%|█████████▏| 204/221 [01:15<00:03,  4.32it/s][A
 93%|█████████▎| 205/221 [01:15<00:03,  4.98it/s][A
 93%|█████████▎| 206/221 [01:15<00:03,  4.66it/s][A
 94%|█████████▍| 208/221 [01:15<00:02,  6.33it/s][A
 95%|█████████▌| 210/221 [01:15<00:01,  8.14it/s][A[h264 @ 0x557722631e80] mmco: unref short failure

 95%|█████████▌| 211/221 [01:16<00:01,  5.24it/s][A
 96%|█████████▌| 212/221 [01:16<00:01,  5.19it/s][A
 97%|█████████▋| 214/221 [01:17<00:02,  2.61it/s][A
 97%|█████████▋| 215/221 [01:18<00:02,  2.91it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  3.39it/s][A
 98%|█████████▊| 217/221 [01:18<00:01,  2.88it/s][A
 99%|█████████▊| 218/221 [01:19<00:01,  2.37it/s][A
 99%|█████████▉| 219/221 [01:19<00:00,  2.76it/s][A
100%|█████████▉| 220/221 [01:24<00:01,  1.68s/it][A
100%|██████████| 221/221 [01:24<00:00,  1.25s/it][A100%|██████████| 221/221 [01:24<00:00,  2.61it/s]
09/17/2024 08:09:29 - INFO - __main__ -   current idx TUTUj9BQYwU.13 from finetune_area returns wrong image/video, use 65466 instead.
[h264 @ 0x55864c2aec00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:04,  3.41it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.39it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.40it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.40it/s][A
  3%|▎         | 6/221 [00:01<01:03,  3.40it/s][A
  3%|▎         | 7/221 [00:02<01:05,  3.25it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.28it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.32it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.31it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.34it/s][A[h264 @ 0x558650c01b40] mmco: unref short failure

  6%|▌         | 13/221 [00:03<01:01,  3.36it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.33it/s][A[h264 @ 0x558637e5d500] mmco: unref short failure
[h264 @ 0x558637e5d500] mmco: unref short failure

  7%|▋         | 16/221 [00:04<01:01,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.32it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.35it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.37it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.37it/s][A
 10%|▉         | 21/221 [00:06<00:59,  3.38it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.34it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.32it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.32it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.33it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.30it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.32it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.28it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.34it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.33it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.32it/s][A[h264 @ 0x56355f295cc0] mmco: unref short failure
[h264 @ 0x56355f295cc0] mmco: unref short failure

 16%|█▌        | 35/221 [00:10<00:56,  3.32it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.35it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.38it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.38it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.39it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.40it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.40it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.40it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:55,  3.14it/s][A
 22%|██▏       | 48/221 [00:14<00:53,  3.22it/s][A
 22%|██▏       | 49/221 [00:14<00:52,  3.26it/s][A
 23%|██▎       | 50/221 [00:15<00:52,  3.23it/s][A
 23%|██▎       | 51/221 [00:15<00:52,  3.22it/s][A
 24%|██▎       | 52/221 [00:15<00:55,  3.06it/s][A
 24%|██▍       | 53/221 [00:15<00:53,  3.15it/s][A
 24%|██▍       | 54/221 [00:16<00:52,  3.21it/s][A
 25%|██▍       | 55/221 [00:16<00:51,  3.25it/s][A
 25%|██▌       | 56/221 [00:16<00:50,  3.27it/s][A
 26%|██▌       | 57/221 [00:17<00:50,  3.27it/s][A
 26%|██▌       | 58/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.27it/s][A
 27%|██▋       | 60/221 [00:18<00:49,  3.28it/s][A
 28%|██▊       | 61/221 [00:18<00:48,  3.29it/s][A
 28%|██▊       | 62/221 [00:18<00:48,  3.30it/s][A
 29%|██▊       | 63/221 [00:19<00:48,  3.29it/s][A
 29%|██▉       | 64/221 [00:19<00:47,  3.29it/s][A
 29%|██▉       | 65/221 [00:19<00:47,  3.29it/s][A
 30%|██▉       | 66/221 [00:19<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:20<00:48,  3.17it/s][A
 31%|███       | 68/221 [00:20<00:47,  3.24it/s][A
 31%|███       | 69/221 [00:20<00:46,  3.25it/s][A
 32%|███▏      | 70/221 [00:21<00:45,  3.29it/s][A
 32%|███▏      | 71/221 [00:21<00:45,  3.32it/s][A
 33%|███▎      | 72/221 [00:21<00:44,  3.35it/s][A
 33%|███▎      | 73/221 [00:22<00:43,  3.37it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.38it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.39it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.39it/s][A
 35%|███▍      | 77/221 [00:23<00:45,  3.14it/s][A
 35%|███▌      | 78/221 [00:23<00:44,  3.22it/s][A
 36%|███▌      | 79/221 [00:23<00:43,  3.27it/s][A
 36%|███▌      | 80/221 [00:24<00:42,  3.32it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.34it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.37it/s][A
 38%|███▊      | 83/221 [00:25<00:40,  3.38it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.39it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.40it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.40it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.41it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.41it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:27<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:29<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:34<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:41<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:44<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:46<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:48<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:53<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [01:00<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:05<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.38it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:37,  5.86it/s][A
  1%|          | 2/221 [00:00<00:48,  4.50it/s][A
  1%|▏         | 3/221 [00:00<00:59,  3.67it/s][A
  2%|▏         | 4/221 [00:00<00:55,  3.89it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.43it/s][A
  3%|▎         | 6/221 [00:01<00:45,  4.77it/s][A
  3%|▎         | 7/221 [00:01<00:54,  3.95it/s][A
  4%|▎         | 8/221 [00:02<01:01,  3.46it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.59it/s][A
  5%|▍         | 10/221 [00:02<00:51,  4.07it/s][A
  5%|▍         | 11/221 [00:02<00:52,  3.99it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.25it/s][A
  6%|▌         | 13/221 [00:03<01:20,  2.59it/s][A
  6%|▋         | 14/221 [00:03<01:11,  2.89it/s][A
  7%|▋         | 15/221 [00:04<01:12,  2.85it/s][A
  7%|▋         | 16/221 [00:04<01:14,  2.74it/s][A
  8%|▊         | 17/221 [00:05<01:20,  2.53it/s][A
  8%|▊         | 18/221 [00:05<01:15,  2.68it/s][A
  9%|▉         | 20/221 [00:05<00:53,  3.77it/s][A
 10%|▉         | 21/221 [00:05<00:49,  4.06it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.30it/s][A
 10%|█         | 23/221 [00:06<00:40,  4.89it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.10it/s][A
 11%|█▏        | 25/221 [00:06<00:47,  4.16it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.12it/s][A
 12%|█▏        | 27/221 [00:07<00:46,  4.14it/s][A
 13%|█▎        | 28/221 [00:07<00:48,  3.94it/s][A
 13%|█▎        | 29/221 [00:07<00:45,  4.21it/s][A
 14%|█▎        | 30/221 [00:08<00:53,  3.56it/s][A
 14%|█▍        | 31/221 [00:08<00:52,  3.65it/s][A
 14%|█▍        | 32/221 [00:08<00:49,  3.82it/s][A
 15%|█▍        | 33/221 [00:08<00:49,  3.82it/s][A
 15%|█▌        | 34/221 [00:09<00:57,  3.25it/s][A
 16%|█▌        | 35/221 [00:09<00:52,  3.55it/s][A
 16%|█▋        | 36/221 [00:09<00:52,  3.51it/s][A
 17%|█▋        | 37/221 [00:10<00:49,  3.73it/s][A
 17%|█▋        | 38/221 [00:10<00:51,  3.54it/s][A
 18%|█▊        | 39/221 [00:10<00:50,  3.57it/s][A
 18%|█▊        | 40/221 [00:10<00:52,  3.45it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.47it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.74it/s][A
 19%|█▉        | 43/221 [00:11<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:12<00:56,  3.13it/s][A
 20%|██        | 45/221 [00:12<01:04,  2.72it/s][A
 21%|██        | 46/221 [00:13<01:04,  2.72it/s][A
 21%|██▏       | 47/221 [00:13<00:58,  2.98it/s][A
 22%|██▏       | 48/221 [00:13<00:49,  3.49it/s][A
 22%|██▏       | 49/221 [00:13<00:39,  4.31it/s][A
 23%|██▎       | 50/221 [00:13<00:46,  3.69it/s][A
 23%|██▎       | 51/221 [00:14<00:45,  3.73it/s][A
 24%|██▍       | 53/221 [00:14<00:47,  3.51it/s][A
 24%|██▍       | 54/221 [00:15<00:46,  3.58it/s][A
 25%|██▍       | 55/221 [00:15<00:54,  3.04it/s][A
 25%|██▌       | 56/221 [00:15<00:55,  2.95it/s][A
 26%|██▌       | 57/221 [00:16<00:51,  3.17it/s][A
 26%|██▌       | 58/221 [00:16<00:45,  3.62it/s][A
 27%|██▋       | 59/221 [00:16<00:43,  3.71it/s][A
 27%|██▋       | 60/221 [00:16<00:39,  4.06it/s][A
 28%|██▊       | 61/221 [00:17<00:38,  4.14it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.84it/s][A
 29%|██▉       | 64/221 [00:17<00:35,  4.45it/s][A
 29%|██▉       | 65/221 [00:17<00:35,  4.39it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.65it/s][A
 30%|███       | 67/221 [00:18<00:47,  3.23it/s][A
 31%|███       | 68/221 [00:19<00:48,  3.14it/s][A
 31%|███       | 69/221 [00:19<00:58,  2.61it/s][A
 32%|███▏      | 70/221 [00:19<00:55,  2.71it/s][A
 32%|███▏      | 71/221 [00:20<00:55,  2.72it/s][A
 33%|███▎      | 72/221 [00:20<00:56,  2.66it/s][A
 33%|███▎      | 73/221 [00:21<00:52,  2.84it/s][A
 33%|███▎      | 74/221 [00:21<00:45,  3.24it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:21<00:39,  3.68it/s][A
 35%|███▍      | 77/221 [00:21<00:35,  4.10it/s][A
 35%|███▌      | 78/221 [00:22<00:36,  3.87it/s][A
 36%|███▌      | 79/221 [00:22<00:40,  3.53it/s][A
 36%|███▌      | 80/221 [00:22<00:35,  4.01it/s][A
 37%|███▋      | 81/221 [00:22<00:34,  4.05it/s][A
 37%|███▋      | 82/221 [00:23<00:43,  3.17it/s][A
 38%|███▊      | 84/221 [00:24<00:44,  3.09it/s][A
 38%|███▊      | 85/221 [00:24<00:47,  2.88it/s][A
 39%|███▉      | 86/221 [00:24<00:49,  2.70it/s][A
 39%|███▉      | 87/221 [00:25<00:50,  2.66it/s][A
 40%|███▉      | 88/221 [00:25<00:45,  2.93it/s][A
 40%|████      | 89/221 [00:25<00:46,  2.83it/s][A
 41%|████      | 90/221 [00:26<00:49,  2.67it/s][A
 41%|████      | 91/221 [00:26<00:42,  3.09it/s][A
 42%|████▏     | 92/221 [00:26<00:43,  2.95it/s][A
 42%|████▏     | 93/221 [00:27<00:48,  2.62it/s][A
 43%|████▎     | 94/221 [00:27<00:44,  2.84it/s][A
 43%|████▎     | 95/221 [00:28<00:50,  2.49it/s][A
 43%|████▎     | 96/221 [00:28<00:52,  2.39it/s][A
 44%|████▍     | 97/221 [00:29<00:48,  2.54it/s][A
 44%|████▍     | 98/221 [00:29<00:48,  2.56it/s][A
 45%|████▍     | 99/221 [00:29<00:46,  2.64it/s][A
 45%|████▌     | 100/221 [00:29<00:38,  3.13it/s][A
 46%|████▌     | 101/221 [00:30<00:33,  3.57it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.45it/s][A
 47%|████▋     | 103/221 [00:30<00:32,  3.58it/s][A
 47%|████▋     | 104/221 [00:30<00:29,  4.02it/s][A
 48%|████▊     | 105/221 [00:31<00:32,  3.61it/s][A
 48%|████▊     | 106/221 [00:31<00:36,  3.18it/s][A
 48%|████▊     | 107/221 [00:31<00:34,  3.27it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.67it/s][A
 49%|████▉     | 109/221 [00:32<00:29,  3.85it/s][A
 50%|████▉     | 110/221 [00:32<00:31,  3.50it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.34it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.41it/s][A
 51%|█████     | 113/221 [00:33<00:32,  3.34it/s][A
 52%|█████▏    | 114/221 [00:33<00:26,  3.98it/s][A
 52%|█████▏    | 115/221 [00:33<00:25,  4.19it/s][A
 52%|█████▏    | 116/221 [00:34<00:25,  4.18it/s][A
 53%|█████▎    | 117/221 [00:34<00:24,  4.17it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.70it/s][A
 54%|█████▍    | 119/221 [00:35<00:30,  3.31it/s][A
 54%|█████▍    | 120/221 [00:35<00:32,  3.11it/s][A
 55%|█████▍    | 121/221 [00:35<00:34,  2.86it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.22it/s][A
 56%|█████▌    | 123/221 [00:36<00:33,  2.96it/s][A
 56%|█████▌    | 124/221 [00:36<00:32,  2.98it/s][A
 57%|█████▋    | 125/221 [00:37<00:37,  2.56it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.80it/s][A
 57%|█████▋    | 127/221 [00:38<00:35,  2.67it/s][A
 58%|█████▊    | 128/221 [00:38<00:31,  2.93it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.53it/s][A
 59%|█████▉    | 131/221 [00:39<00:25,  3.55it/s][A
 60%|█████▉    | 132/221 [00:39<00:23,  3.81it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.46it/s][A
 61%|██████    | 134/221 [00:40<00:27,  3.11it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.49it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.20it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.48it/s][A
 62%|██████▏   | 138/221 [00:41<00:23,  3.52it/s][A
 63%|██████▎   | 139/221 [00:41<00:25,  3.21it/s][A
 63%|██████▎   | 140/221 [00:41<00:22,  3.56it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.86it/s][A
 64%|██████▍   | 142/221 [00:42<00:24,  3.28it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.39it/s][A
 65%|██████▌   | 144/221 [00:42<00:20,  3.80it/s][A
 66%|██████▌   | 145/221 [00:43<00:23,  3.24it/s][A
 66%|██████▌   | 146/221 [00:43<00:22,  3.39it/s][A
 67%|██████▋   | 147/221 [00:43<00:19,  3.87it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.97it/s][A
 67%|██████▋   | 149/221 [00:44<00:20,  3.44it/s][A
 68%|██████▊   | 150/221 [00:44<00:21,  3.28it/s][A
 68%|██████▊   | 151/221 [00:45<00:22,  3.11it/s][A
 69%|██████▉   | 152/221 [00:45<00:30,  2.23it/s][A
 69%|██████▉   | 153/221 [00:46<00:28,  2.42it/s][A
 70%|██████▉   | 154/221 [00:46<00:26,  2.51it/s][A
 70%|███████   | 155/221 [00:46<00:24,  2.67it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.11it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.23it/s][A
 71%|███████▏  | 158/221 [00:47<00:22,  2.84it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.02it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.49it/s][A
 73%|███████▎  | 161/221 [00:48<00:15,  3.93it/s][A
 73%|███████▎  | 162/221 [00:48<00:13,  4.49it/s][A
 74%|███████▍  | 163/221 [00:48<00:13,  4.28it/s][A
 74%|███████▍  | 164/221 [00:49<00:13,  4.30it/s][A
 75%|███████▍  | 165/221 [00:49<00:14,  3.75it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.24it/s][A
 76%|███████▌  | 167/221 [00:50<00:14,  3.84it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.44it/s][A
 77%|███████▋  | 170/221 [00:50<00:13,  3.70it/s][A
 77%|███████▋  | 171/221 [00:51<00:14,  3.56it/s][A
 78%|███████▊  | 172/221 [00:51<00:13,  3.55it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.40it/s][A
 79%|███████▊  | 174/221 [00:52<00:14,  3.25it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.16it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.74it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.56it/s][A
 81%|████████  | 178/221 [00:53<00:18,  2.34it/s][A
 81%|████████  | 179/221 [00:53<00:16,  2.59it/s][A
 81%|████████▏ | 180/221 [00:54<00:13,  3.07it/s][A
 82%|████████▏ | 181/221 [00:54<00:15,  2.61it/s][A
 82%|████████▏ | 182/221 [00:54<00:13,  2.91it/s][A
 83%|████████▎ | 183/221 [00:55<00:13,  2.90it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  2.91it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.65it/s][A
 84%|████████▍ | 186/221 [00:56<00:11,  3.04it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.36it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.12it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.39it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.30it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.58it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  4.09it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.62it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.26it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.65it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.48it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.17it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.10it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.39it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.30it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.70it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.48it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.79it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.54it/s][A
 93%|█████████▎| 205/221 [01:01<00:05,  3.09it/s][A
 93%|█████████▎| 206/221 [01:02<00:06,  2.46it/s][A
 94%|█████████▎| 207/221 [01:02<00:05,  2.56it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  3.15it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.66it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.29it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.51it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.61it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.67it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.77it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.70it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.62it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.90it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.15it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  2.97it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.36it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.26it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'area_r1': 40.2, 'area_recall': '40.2/65.3/73.2', 'area_ravg': 59.5}
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'forward_r1': 38.5, 'forward_recall': '38.5/67.8/78.1', 'forward_ravg': 61.4}
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/68.4/79.2', 'area_video_ravg': 62.2}
09/17/2024 08:11:45 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 08:11:45 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'area_video_r1': 52.9, 'area_video_recall': '52.9/75.5/82.2', 'area_video_ravg': 70.2, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/74.4/82.7', 'area_video_back_ravg': 68.7}
09/17/2024 08:11:45 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1299=======

09/17/2024 08:11:45 - INFO - __main__ -   {'area_video_r1': 52.9, 'area_video_recall': '52.9/75.5/82.2', 'area_video_ravg': 70.2, 'area_video_back_r1': 48.9, 'area_video_back_recall': '48.9/74.4/82.7', 'area_video_back_ravg': 68.7}
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'video_r1': 37.0, 'video_recall': '37.0/64.9/74.8', 'video_ravg': 58.9}
09/17/2024 08:11:45 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 08:11:45 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 08:11:45 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1299--===========

09/17/2024 08:11:45 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/74.5/81.6', 'video_ravg': 69.5}
09/17/2024 08:11:45 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 08:11:45 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
[h264 @ 0x55568b9d1d40] mmco: unref short failure
09/17/2024 08:12:12 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.004651387222111225, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0794644355773926, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.1748931407928467, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2590088844299316}
 45%|████▍     | 1300/2910 [8:16:15<59:57:32, 134.07s/it][h264 @ 0x5556c6ccb7c0] mmco: unref short failure
[h264 @ 0x557733009180] mmco: unref short failure
 45%|████▍     | 1301/2910 [8:16:19<42:27:33, 95.00s/it]  45%|████▍     | 1302/2910 [8:16:24<30:19:49, 67.90s/it] 45%|████▍     | 1303/2910 [8:16:28<21:50:59, 48.95s/it][h264 @ 0x5576de9bce80] mmco: unref short failure
[h264 @ 0x5576de9bce80] mmco: unref short failure
09/17/2024 08:12:32 - INFO - __main__ -   current idx TTR3lV4sfVY.61 from finetune_area returns wrong image/video, use 44447 instead.
 45%|████▍     | 1304/2910 [8:16:34<15:59:06, 35.83s/it][h264 @ 0x563563395740] mmco: unref short failure
[h264 @ 0x563563395740] mmco: unref short failure
 45%|████▍     | 1305/2910 [8:16:39<11:55:50, 26.76s/it] 45%|████▍     | 1306/2910 [8:16:46<9:13:19, 20.70s/it]  45%|████▍     | 1307/2910 [8:16:53<7:22:40, 16.57s/it][h264 @ 0x55771a87f1c0] mmco: unref short failure
[h264 @ 0x55568ca01000] mmco: unref short failure
 45%|████▍     | 1308/2910 [8:16:59<5:59:47, 13.48s/it][h264 @ 0x5586540c39c0] mmco: unref short failure
[h264 @ 0x563558d9eac0] mmco: unref short failure
[h264 @ 0x563558d9eac0] mmco: unref short failure
 45%|████▍     | 1309/2910 [8:17:06<5:05:33, 11.45s/it][h264 @ 0x5556e4eca240] mmco: unref short failure
[h264 @ 0x5576de3389c0] mmco: unref short failure
[h264 @ 0x5576de3389c0] mmco: unref short failure
[h264 @ 0x55568c2c7e00] mmco: unref short failure
[h264 @ 0x55568c2c7e00] mmco: unref short failure
 45%|████▌     | 1310/2910 [8:17:13<4:32:22, 10.21s/it][h264 @ 0x55568bed66c0] mmco: unref short failure
[h264 @ 0x55568bed66c0] mmco: unref short failure
[h264 @ 0x55568bed66c0] mmco: unref short failure
[h264 @ 0x55568bed66c0] mmco: unref short failure
 45%|████▌     | 1311/2910 [8:17:20<4:07:21,  9.28s/it] 45%|████▌     | 1312/2910 [8:17:28<3:56:29,  8.88s/it] 45%|████▌     | 1313/2910 [8:17:35<3:43:21,  8.39s/it][h264 @ 0x56355f295ec0] mmco: unref short failure
[h264 @ 0x56355f295ec0] mmco: unref short failure
 45%|████▌     | 1314/2910 [8:17:41<3:24:58,  7.71s/it][h264 @ 0x5556dfb1f740] mmco: unref short failure
[h264 @ 0x5556dfb1f740] mmco: unref short failure
[h264 @ 0x5556dfb1f740] mmco: unref short failure
[h264 @ 0x5556dfb1f740] mmco: unref short failure
[h264 @ 0x56354e309c80] mmco: unref short failure
 45%|████▌     | 1315/2910 [8:17:48<3:17:40,  7.44s/it][h264 @ 0x5635632e5540] mmco: unref short failure
[h264 @ 0x5635632e5540] mmco: unref short failure
[h264 @ 0x55772315da80] mmco: unref short failure
[h264 @ 0x55772315da80] mmco: unref short failure
[h264 @ 0x55772315da80] mmco: unref short failure
[h264 @ 0x55772315da80] mmco: unref short failure
[h264 @ 0x55772931b880] mmco: unref short failure
[h264 @ 0x55772931b880] mmco: unref short failure
[h264 @ 0x5586341c7e40] mmco: unref short failure
[h264 @ 0x5586341c7e40] mmco: unref short failure
[h264 @ 0x55772c6cc780] mmco: unref short failure
[h264 @ 0x55772c6cc780] mmco: unref short failure
[h264 @ 0x55863ad2a940] mmco: unref short failure
[h264 @ 0x5556c459d9c0] mmco: unref short failure
[h264 @ 0x5556c459d9c0] mmco: unref short failure
 45%|████▌     | 1316/2910 [8:18:21<6:36:37, 14.93s/it][h264 @ 0x5577319faa40] mmco: unref short failure
[h264 @ 0x56355e48dc40] mmco: unref short failure
[h264 @ 0x56355e48dc40] mmco: unref short failure
[h264 @ 0x5556e4fd5200] mmco: unref short failure
 45%|████▌     | 1317/2910 [8:18:40<7:08:42, 16.15s/it][h264 @ 0x5556ca34a040] mmco: unref short failure
[h264 @ 0x5556ca34a040] mmco: unref short failure
 45%|████▌     | 1318/2910 [8:18:47<6:00:55, 13.60s/it][h264 @ 0x55568bfd3040] mmco: unref short failure
[h264 @ 0x56355842aa40] mmco: unref short failure
[h264 @ 0x56355842aa40] mmco: unref short failure
 45%|████▌     | 1319/2910 [8:18:55<5:13:26, 11.82s/it][h264 @ 0x5586515a6080] mmco: unref short failure
[h264 @ 0x5635403d6ac0] mmco: unref short failure
[h264 @ 0x5635403d6ac0] mmco: unref short failure
 45%|████▌     | 1320/2910 [8:19:11<5:43:53, 12.98s/it][h264 @ 0x5577363d78c0] mmco: unref short failure
[h264 @ 0x5577363d78c0] mmco: unref short failure
[h264 @ 0x5576e00cb240] mmco: unref short failure
[h264 @ 0x5576e00cb240] mmco: unref short failure
 45%|████▌     | 1321/2910 [8:19:17<4:53:26, 11.08s/it][h264 @ 0x563553fe6540] mmco: unref short failure
[h264 @ 0x55771e6dce40] mmco: unref short failure
 45%|████▌     | 1322/2910 [8:19:24<4:14:39,  9.62s/it][h264 @ 0x5577334bfac0] mmco: unref short failure
[h264 @ 0x5577334bfac0] mmco: unref short failure
 45%|████▌     | 1323/2910 [8:19:35<4:26:45, 10.09s/it][h264 @ 0x5586549f9700] mmco: unref short failure
[h264 @ 0x5586549f9700] mmco: unref short failure
[h264 @ 0x563549016b80] mmco: unref short failure
[h264 @ 0x5556daca14c0] mmco: unref short failure
[h264 @ 0x5576df250c80] mmco: unref short failure
[h264 @ 0x55771c124dc0] mmco: unref short failure
[h264 @ 0x55771c124dc0] mmco: unref short failure
[h264 @ 0x563544d5e6c0] mmco: unref short failure
[h264 @ 0x563544d5e6c0] mmco: unref short failure
[h264 @ 0x5577267c6400] mmco: unref short failure
09/17/2024 08:16:31 - INFO - __main__ -   current idx -Gh2S5bmJFk.26 from finetune_area returns wrong image/video, use 4411 instead.
[h264 @ 0x5635632e5080] mmco: unref short failure
[h264 @ 0x5635632e5080] mmco: unref short failure
[h264 @ 0x557733009400] mmco: unref short failure
[h264 @ 0x557732c51280] mmco: unref short failure
[h264 @ 0x557732c51280] mmco: unref short failure
 45%|████▌     | 1324/2910 [8:20:45<12:27:35, 28.28s/it][h264 @ 0x5556d1476580] mmco: unref short failure
[h264 @ 0x56354abf5c80] mmco: unref short failure
[h264 @ 0x56354abf5c80] mmco: unref short failure
[h264 @ 0x5586558e6780] mmco: unref short failure
[h264 @ 0x5586558e6780] mmco: unref short failure
 46%|████▌     | 1325/2910 [8:21:06<11:28:53, 26.08s/it] 46%|████▌     | 1326/2910 [8:21:17<9:25:26, 21.42s/it] [h264 @ 0x5556c3e1ddc0] mmco: unref short failure
 46%|████▌     | 1327/2910 [8:21:24<7:29:59, 17.06s/it][h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x557717f00d00] mmco: unref short failure
[h264 @ 0x5586480d5ec0] mmco: unref short failure
[h264 @ 0x563557e3a100] mmco: unref short failure
[h264 @ 0x563557e3a100] mmco: unref short failure
[h264 @ 0x5576ded0ccc0] mmco: unref short failure
 46%|████▌     | 1328/2910 [8:21:40<7:25:28, 16.90s/it][h264 @ 0x5556e02ef440] mmco: unref short failure
[h264 @ 0x55863a587740] mmco: unref short failure
 46%|████▌     | 1329/2910 [8:21:47<6:07:08, 13.93s/it][h264 @ 0x5635463db680] mmco: unref short failure
[h264 @ 0x5635463db680] mmco: unref short failure
 46%|████▌     | 1330/2910 [8:21:54<5:08:16, 11.71s/it][h264 @ 0x563545818c00] mmco: unref short failure
[h264 @ 0x563545818c00] mmco: unref short failure
[h264 @ 0x563558fccbc0] mmco: unref short failure
 46%|████▌     | 1331/2910 [8:22:06<5:12:41, 11.88s/it][h264 @ 0x56355a060240] mmco: unref short failure
[h264 @ 0x5556dcc03b40] mmco: unref short failure
[h264 @ 0x5556c9448b40] mmco: unref short failure
[h264 @ 0x5556c9448b40] mmco: unref short failure
[h264 @ 0x55568b70ec40] mmco: unref short failure
[h264 @ 0x55568b70ec40] mmco: unref short failure
[h264 @ 0x55863de44200] mmco: unref short failure
[h264 @ 0x55863de44200] mmco: unref short failure
[h264 @ 0x5586332ffcc0] mmco: unref short failure
[h264 @ 0x5586332ffcc0] mmco: unref short failure
[h264 @ 0x56354aa8a640] mmco: unref short failure
[h264 @ 0x5556e4eca4c0] mmco: unref short failure
[h264 @ 0x5556e4eca4c0] mmco: unref short failure
[h264 @ 0x55568c5f26c0] mmco: unref short failure
[h264 @ 0x55568c5f26c0] mmco: unref short failure
[h264 @ 0x563559f9a780] mmco: unref short failure
[h264 @ 0x563559f9a780] mmco: unref short failure
[h264 @ 0x558632050840] mmco: unref short failure
[h264 @ 0x563548147f00] mmco: unref short failure
[h264 @ 0x563548147f00] mmco: unref short failure
[h264 @ 0x5556c4ab5080] mmco: unref short failure
[h264 @ 0x5556c4ab5080] mmco: unref short failure
[h264 @ 0x55864ba81280] mmco: unref short failure
[h264 @ 0x5556df4f7900] mmco: unref short failure
[h264 @ 0x5556df4f7900] mmco: unref short failure
not have audios 8-qwaveiHMM.3
[h264 @ 0x5635464d4780] mmco: unref short failure
[h264 @ 0x5635464d4780] mmco: unref short failure
 46%|████▌     | 1332/2910 [8:23:20<13:21:44, 30.48s/it][h264 @ 0x563542e10b00] mmco: unref short failure
[h264 @ 0x5635443a7cc0] mmco: unref short failure
[h264 @ 0x5635443a7cc0] mmco: unref short failure
 46%|████▌     | 1333/2910 [8:23:31<10:49:31, 24.71s/it][h264 @ 0x55863d90ff80] mmco: unref short failure
[h264 @ 0x55863d90ff80] mmco: unref short failure
[h264 @ 0x563547440840] mmco: unref short failure
[h264 @ 0x563547440840] mmco: unref short failure
[h264 @ 0x56354a0fb340] mmco: unref short failure
[h264 @ 0x56354a0fb340] mmco: unref short failure
[h264 @ 0x55568be2ea80] mmco: unref short failure
[h264 @ 0x55568be2ea80] mmco: unref short failure
 46%|████▌     | 1334/2910 [8:23:50<10:01:43, 22.91s/it][h264 @ 0x563551097880] mmco: unref short failure
[h264 @ 0x563551097880] mmco: unref short failure
 46%|████▌     | 1335/2910 [8:23:57<7:56:54, 18.17s/it]  46%|████▌     | 1336/2910 [8:24:09<7:10:33, 16.41s/it][h264 @ 0x55771aeb4240] mmco: unref short failure
[h264 @ 0x55771aeb4240] mmco: unref short failure
 46%|████▌     | 1337/2910 [8:24:16<5:51:32, 13.41s/it][h264 @ 0x557732aeb600] mmco: unref short failure
[h264 @ 0x557732aeb600] mmco: unref short failure
[h264 @ 0x5576e077e480] mmco: unref short failure
 46%|████▌     | 1338/2910 [8:24:27<5:31:53, 12.67s/it]09/17/2024 08:20:27 - INFO - __main__ -   current idx 6wN4IYAiKIg.50 from finetune_area returns wrong image/video, use 69123 instead.
 46%|████▌     | 1339/2910 [8:24:35<4:58:01, 11.38s/it][h264 @ 0x55863c848740] mmco: unref short failure
[h264 @ 0x55863c848740] mmco: unref short failure
[h264 @ 0x563541478640] mmco: unref short failure
[h264 @ 0x563541478640] mmco: unref short failure
[h264 @ 0x563558432400] mmco: unref short failure
[h264 @ 0x5577216d5d80] mmco: unref short failure
[h264 @ 0x5577216d5d80] mmco: unref short failure
[h264 @ 0x5556df54ac00] mmco: unref short failure
[h264 @ 0x5556cb607000] mmco: unref short failure
[h264 @ 0x5556cb607000] mmco: unref short failure
[h264 @ 0x55772764a700] mmco: unref short failure
[h264 @ 0x55772764a700] mmco: unref short failure
[h264 @ 0x5577250380c0] mmco: unref short failure
[h264 @ 0x5577250380c0] mmco: unref short failure
[h264 @ 0x557718ba6000] mmco: unref short failure
[h264 @ 0x558651596bc0] mmco: unref short failure
[h264 @ 0x558651596bc0] mmco: unref short failure
[h264 @ 0x558651596bc0] mmco: unref short failure
[h264 @ 0x558651596bc0] mmco: unref short failure
[h264 @ 0x557731a8e240] mmco: unref short failure
[h264 @ 0x557731a8e240] mmco: unref short failure
 46%|████▌     | 1340/2910 [8:25:58<14:20:56, 32.90s/it][h264 @ 0x55864832f100] mmco: unref short failure
[h264 @ 0x55864832f100] mmco: unref short failure
[h264 @ 0x5576de913b00] mmco: unref short failure
[h264 @ 0x5576de913b00] mmco: unref short failure
09/17/2024 08:22:03 - INFO - __main__ -   current idx WdVJ8VSAKso.55 from finetune_area returns wrong image/video, use 88693 instead.
[h264 @ 0x56355f58f4c0] mmco: unref short failure
[h264 @ 0x56355f58f4c0] mmco: unref short failure
[h264 @ 0x56355f58f4c0] mmco: unref short failure
[h264 @ 0x56355f58f4c0] mmco: unref short failure
 46%|████▌     | 1341/2910 [8:26:09<11:26:26, 26.25s/it][h264 @ 0x5556c9171140] mmco: unref short failure
[h264 @ 0x5556c9171140] mmco: unref short failure
[h264 @ 0x5635463db240] mmco: unref short failure
[h264 @ 0x5635463db240] mmco: unref short failure
[h264 @ 0x5635463db240] mmco: unref short failure
[h264 @ 0x5635463db240] mmco: unref short failure
 46%|████▌     | 1342/2910 [8:26:20<9:29:29, 21.79s/it]  46%|████▌     | 1343/2910 [8:26:28<7:35:40, 17.45s/it][h264 @ 0x56355c315ec0] mmco: unref short failure
 46%|████▌     | 1344/2910 [8:26:39<6:48:01, 15.63s/it]09/17/2024 08:22:42 - INFO - __main__ -   current idx 1-hr71oylIM.38 from finetune_area returns wrong image/video, use 48515 instead.
 46%|████▌     | 1345/2910 [8:26:46<5:40:45, 13.06s/it][h264 @ 0x5586340cfac0] mmco: unref short failure
 46%|████▋     | 1346/2910 [8:26:52<4:47:42, 11.04s/it] 46%|████▋     | 1347/2910 [8:27:03<4:45:19, 10.95s/it][h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x558633c85440] mmco: unref short failure
[h264 @ 0x558633c85440] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x55772abd36c0] mmco: unref short failure
[h264 @ 0x5556c9160f80] mmco: unref short failure
[h264 @ 0x5556c9160f80] mmco: unref short failure
[h264 @ 0x55568ca00940] mmco: unref short failure
[h264 @ 0x5577363d78c0] mmco: unref short failure
[h264 @ 0x5556c48be200] mmco: unref short failure
[h264 @ 0x5556d21a69c0] mmco: unref short failure
[h264 @ 0x5556d21a69c0] mmco: unref short failure
[h264 @ 0x55568a7d2280] mmco: unref short failure
[h264 @ 0x563541881f40] mmco: unref short failure
[h264 @ 0x563557d6bec0] mmco: unref short failure
[h264 @ 0x55771a1c0440] mmco: unref short failure
[h264 @ 0x55771a1c0440] mmco: unref short failure
[h264 @ 0x558638e99cc0] mmco: unref short failure
[h264 @ 0x563541324440] mmco: unref short failure
[h264 @ 0x563541324440] mmco: unref short failure
[h264 @ 0x5586320d6580] mmco: unref short failure
[h264 @ 0x5586340cfac0] mmco: unref short failure
[h264 @ 0x5556ddbb9240] mmco: unref short failure
[h264 @ 0x558637c3b480] mmco: unref short failure
[h264 @ 0x558637c3b480] mmco: unref short failure
[h264 @ 0x5556c5e72240] mmco: unref short failure
[h264 @ 0x5556c5e72240] mmco: unref short failure
[h264 @ 0x55771b9c0f00] mmco: unref short failure
[h264 @ 0x557726abce00] mmco: unref short failure
[h264 @ 0x557731785380] mmco: unref short failure
[h264 @ 0x557731785380] mmco: unref short failure
[h264 @ 0x563555ada480] mmco: unref short failure
[h264 @ 0x5576deb70ac0] mmco: unref short failure
[h264 @ 0x5576deb70ac0] mmco: unref short failure
[h264 @ 0x5576deb70ac0] mmco: unref short failure
 46%|████▋     | 1348/2910 [8:28:30<14:39:47, 33.79s/it][h264 @ 0x5586329142c0] mmco: unref short failure
[h264 @ 0x5586329142c0] mmco: unref short failure
[h264 @ 0x5586329142c0] mmco: unref short failure
[h264 @ 0x5586329142c0] mmco: unref short failure
 46%|████▋     | 1349/2910 [8:28:38<11:17:18, 26.03s/it]09/17/2024 08:24:37 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 08:24:37 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x557728f56d00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55771a1c0680] mmco: unref short failure
[h264 @ 0x55771fdaa280] mmco: unref short failure
[h264 @ 0x55771fdaa280] mmco: unref short failure
[h264 @ 0x563540f21700] mmco: unref short failure
[h264 @ 0x563540f21700] mmco: unref short failure
[h264 @ 0x55773398b580] mmco: unref short failure
[h264 @ 0x55773398b580] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556d2949740] mmco: unref short failure
[h264 @ 0x5556d2949740] mmco: unref short failure
[h264 @ 0x558635e6ae40] mmco: unref short failure
[h264 @ 0x558635e6ae40] mmco: unref short failure
[h264 @ 0x5635419c1840] mmco: unref short failure
[h264 @ 0x5576e00cb6c0] mmco: unref short failure
[h264 @ 0x5576e00cb6c0] mmco: unref short failure
[h264 @ 0x5576e00cb6c0] mmco: unref short failure
[h264 @ 0x5576e00cb6c0] mmco: unref short failure
[h264 @ 0x563551122800] mmco: unref short failure
[h264 @ 0x563551122800] mmco: unref short failure
[h264 @ 0x558633ff0500] mmco: unref short failure
[h264 @ 0x558634a43b00] mmco: unref short failure
[h264 @ 0x558634a43b00] mmco: unref short failure
[h264 @ 0x56354a965800] mmco: unref short failure
[h264 @ 0x55771b2fb640] mmco: unref short failure
[h264 @ 0x55771b2fb640] mmco: unref short failure
09/17/2024 08:26:41 - INFO - __main__ -   current idx TvUQDltj3Vw.16 from finetune_area returns wrong image/video, use 76883 instead.
[h264 @ 0x563541980900] mmco: unref short failure
[h264 @ 0x563541980900] mmco: unref short failure
[h264 @ 0x55568c2c7740] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A[h264 @ 0x55568cf96b00] mmco: unref short failure

  0%|          | 1/221 [00:00<03:15,  1.13it/s][A
  1%|          | 2/221 [00:01<02:16,  1.60it/s][A
  1%|▏         | 3/221 [00:01<01:27,  2.49it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.40it/s][A
  3%|▎         | 7/221 [00:01<00:42,  5.03it/s][A
  4%|▎         | 8/221 [00:02<01:05,  3.24it/s][A
  4%|▍         | 9/221 [00:02<00:56,  3.76it/s][A
  5%|▍         | 10/221 [00:03<00:56,  3.73it/s][A
  5%|▌         | 12/221 [00:03<00:55,  3.79it/s][A
  6%|▌         | 13/221 [00:03<00:47,  4.36it/s][A
  6%|▋         | 14/221 [00:03<00:49,  4.22it/s][A
  7%|▋         | 15/221 [00:04<00:44,  4.61it/s][A
  7%|▋         | 16/221 [00:04<00:46,  4.41it/s][A
  8%|▊         | 17/221 [00:04<00:43,  4.70it/s][A
  8%|▊         | 18/221 [00:04<00:43,  4.68it/s][A
  9%|▊         | 19/221 [00:04<00:38,  5.27it/s][A
  9%|▉         | 20/221 [00:04<00:33,  6.05it/s][A
 10%|▉         | 21/221 [00:05<00:31,  6.42it/s][A[h264 @ 0x563550ec0240] mmco: unref short failure
[h264 @ 0x563550ec0240] mmco: unref short failure

 10%|▉         | 22/221 [00:05<00:35,  5.56it/s][A
 10%|█         | 23/221 [00:05<00:32,  6.11it/s][A
 11%|█         | 24/221 [00:05<00:29,  6.58it/s][A
 11%|█▏        | 25/221 [00:05<00:28,  6.79it/s][A
 12%|█▏        | 26/221 [00:05<00:33,  5.78it/s][A
 12%|█▏        | 27/221 [00:06<00:29,  6.57it/s][A[h264 @ 0x55863320b180] mmco: unref short failure
[h264 @ 0x55863320b180] mmco: unref short failure

 13%|█▎        | 28/221 [00:06<00:38,  5.05it/s][A
 13%|█▎        | 29/221 [00:06<00:34,  5.60it/s][A
 14%|█▎        | 30/221 [00:06<00:31,  6.05it/s][A[h264 @ 0x5556ca0018c0] mmco: unref short failure
[h264 @ 0x5556ca0018c0] mmco: unref short failure

 14%|█▍        | 31/221 [00:06<00:29,  6.40it/s][A
 15%|█▍        | 33/221 [00:07<00:35,  5.35it/s][A
 15%|█▌        | 34/221 [00:07<00:31,  5.92it/s][A
 16%|█▌        | 35/221 [00:07<00:29,  6.34it/s][A
 16%|█▋        | 36/221 [00:07<00:31,  5.84it/s][A
 17%|█▋        | 37/221 [00:08<00:45,  4.03it/s][A
 17%|█▋        | 38/221 [00:08<00:48,  3.75it/s][A
 18%|█▊        | 39/221 [00:08<00:41,  4.43it/s][A
 18%|█▊        | 40/221 [00:08<00:40,  4.45it/s][A
 19%|█▊        | 41/221 [00:08<00:36,  4.99it/s][A
 19%|█▉        | 42/221 [00:10<01:22,  2.17it/s][A
 19%|█▉        | 43/221 [00:10<01:03,  2.79it/s][A
 20%|█▉        | 44/221 [00:10<00:51,  3.44it/s][A
 20%|██        | 45/221 [00:10<01:11,  2.47it/s][A
 21%|██        | 46/221 [00:11<01:24,  2.07it/s][A
 21%|██▏       | 47/221 [00:13<02:53,  1.00it/s][A
 22%|██▏       | 48/221 [00:14<02:11,  1.31it/s][A
 22%|██▏       | 49/221 [00:14<01:42,  1.69it/s][A
 23%|██▎       | 50/221 [00:14<01:19,  2.16it/s][A
 23%|██▎       | 51/221 [00:14<01:00,  2.82it/s][A
 24%|██▍       | 53/221 [00:14<00:42,  3.93it/s][A
 24%|██▍       | 54/221 [00:15<01:18,  2.12it/s][A
 25%|██▍       | 55/221 [00:16<01:10,  2.36it/s][A
 25%|██▌       | 56/221 [00:16<00:57,  2.85it/s][A
 26%|██▌       | 57/221 [00:16<01:01,  2.66it/s][A
 26%|██▌       | 58/221 [00:16<00:54,  2.97it/s][A
 27%|██▋       | 59/221 [00:17<00:49,  3.31it/s][A
 27%|██▋       | 60/221 [00:17<00:48,  3.33it/s][A
 28%|██▊       | 61/221 [00:17<00:42,  3.76it/s][A
 28%|██▊       | 62/221 [00:17<00:37,  4.29it/s][A
 29%|██▊       | 63/221 [00:17<00:32,  4.89it/s][A
 29%|██▉       | 64/221 [00:18<00:27,  5.64it/s][A
 29%|██▉       | 65/221 [00:18<00:25,  6.12it/s][A
 30%|██▉       | 66/221 [00:18<00:45,  3.37it/s][A
 30%|███       | 67/221 [00:19<00:41,  3.72it/s][A
 31%|███       | 68/221 [00:19<00:40,  3.82it/s][A
 31%|███       | 69/221 [00:19<00:50,  2.99it/s][A
 32%|███▏      | 70/221 [00:19<00:43,  3.50it/s][A
 32%|███▏      | 71/221 [00:24<04:14,  1.70s/it][A
 33%|███▎      | 72/221 [00:25<03:07,  1.26s/it][A
 33%|███▎      | 73/221 [00:25<02:24,  1.02it/s][A
 33%|███▎      | 74/221 [00:25<01:46,  1.38it/s][A
 34%|███▍      | 75/221 [00:25<01:23,  1.75it/s][A
 34%|███▍      | 76/221 [00:26<01:06,  2.19it/s][A
 35%|███▍      | 77/221 [00:26<00:55,  2.58it/s][A
 35%|███▌      | 78/221 [00:26<00:50,  2.84it/s][A
 36%|███▌      | 79/221 [00:27<01:12,  1.95it/s][A
 36%|███▌      | 80/221 [00:27<00:59,  2.39it/s][A
 37%|███▋      | 81/221 [00:27<00:48,  2.89it/s][A
 37%|███▋      | 82/221 [00:28<00:44,  3.15it/s][A
 38%|███▊      | 83/221 [00:28<00:38,  3.55it/s][A
 38%|███▊      | 84/221 [00:28<00:36,  3.77it/s][A
 38%|███▊      | 85/221 [00:28<00:37,  3.63it/s][A
 39%|███▉      | 86/221 [00:29<00:35,  3.82it/s][A
 39%|███▉      | 87/221 [00:29<00:39,  3.43it/s][A
 40%|███▉      | 88/221 [00:29<00:38,  3.44it/s][A[h264 @ 0x558636957580] mmco: unref short failure
[h264 @ 0x558636957580] mmco: unref short failure
[h264 @ 0x5586327eb200] mmco: unref short failure
[h264 @ 0x5586327eb200] mmco: unref short failure
[h264 @ 0x5586327eb200] mmco: unref short failure
[h264 @ 0x5586327eb200] mmco: unref short failure

 40%|████      | 89/221 [00:33<03:00,  1.37s/it][A
 41%|████      | 90/221 [00:33<02:12,  1.01s/it][A
 41%|████      | 91/221 [00:33<01:36,  1.35it/s][A
 42%|████▏     | 92/221 [00:34<01:14,  1.73it/s][A
 42%|████▏     | 93/221 [00:34<01:22,  1.56it/s][A
 43%|████▎     | 94/221 [00:35<01:21,  1.56it/s][A
 43%|████▎     | 95/221 [00:35<01:01,  2.05it/s][A
 43%|████▎     | 96/221 [00:35<00:51,  2.43it/s][A
 44%|████▍     | 97/221 [00:35<00:41,  2.97it/s][A
 44%|████▍     | 98/221 [00:36<00:36,  3.36it/s][A
 45%|████▍     | 99/221 [00:36<00:30,  4.00it/s][A
 45%|████▌     | 100/221 [00:36<00:30,  4.00it/s][A
 46%|████▌     | 101/221 [00:36<00:33,  3.61it/s][A[h264 @ 0x55863f54f5c0] mmco: unref short failure
[h264 @ 0x55863f54f5c0] mmco: unref short failure
[h264 @ 0x55863f54f5c0] mmco: unref short failure

 46%|████▌     | 102/221 [00:37<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:37<00:28,  4.15it/s][A
 48%|████▊     | 105/221 [00:37<00:26,  4.42it/s][A
 48%|████▊     | 106/221 [00:38<00:42,  2.71it/s][A
 48%|████▊     | 107/221 [00:38<00:34,  3.29it/s][A[h264 @ 0x5556cc0598c0] mmco: unref short failure
[h264 @ 0x5556cc0598c0] mmco: unref short failure

 49%|████▉     | 108/221 [00:38<00:30,  3.69it/s][A
 49%|████▉     | 109/221 [00:39<00:26,  4.24it/s][A
 50%|████▉     | 110/221 [00:39<00:22,  5.00it/s][A[h264 @ 0x5635403d9980] mmco: unref short failure
[h264 @ 0x5635403d9980] mmco: unref short failure
[h264 @ 0x5635403d9980] mmco: unref short failure
[h264 @ 0x5635403d9980] mmco: unref short failure

 50%|█████     | 111/221 [00:39<00:30,  3.60it/s][A
 51%|█████     | 112/221 [00:39<00:28,  3.78it/s][A
 51%|█████     | 113/221 [00:40<00:29,  3.69it/s][A
 52%|█████▏    | 115/221 [00:40<00:20,  5.30it/s][A[h264 @ 0x5556d319f840] mmco: unref short failure

 52%|█████▏    | 116/221 [00:45<02:25,  1.38s/it][A
 53%|█████▎    | 117/221 [00:45<01:53,  1.09s/it][A
 53%|█████▎    | 118/221 [00:45<01:28,  1.17it/s][A
 54%|█████▍    | 119/221 [00:46<01:08,  1.49it/s][A
 54%|█████▍    | 120/221 [00:46<00:53,  1.88it/s][A
 55%|█████▍    | 121/221 [00:46<00:43,  2.31it/s][A
 55%|█████▌    | 122/221 [00:46<00:43,  2.30it/s][A
 56%|█████▌    | 123/221 [00:47<00:35,  2.79it/s][A
 56%|█████▌    | 124/221 [00:47<00:29,  3.32it/s][A
 57%|█████▋    | 125/221 [00:47<00:27,  3.55it/s][A[h264 @ 0x55864c0803c0] mmco: unref short failure

 57%|█████▋    | 126/221 [00:48<00:44,  2.11it/s][A
 57%|█████▋    | 127/221 [00:48<00:44,  2.12it/s][A
 58%|█████▊    | 128/221 [00:49<00:48,  1.91it/s][A
 58%|█████▊    | 129/221 [00:49<00:40,  2.25it/s][A
 59%|█████▉    | 130/221 [00:49<00:32,  2.80it/s][A
 60%|█████▉    | 132/221 [00:50<00:22,  4.03it/s][A
 60%|██████    | 133/221 [00:50<00:24,  3.54it/s][A
 61%|██████    | 134/221 [00:50<00:25,  3.38it/s][A
 61%|██████    | 135/221 [00:51<00:24,  3.45it/s][A
 62%|██████▏   | 136/221 [00:51<00:31,  2.72it/s][A
 62%|██████▏   | 137/221 [00:52<00:31,  2.70it/s][A
 62%|██████▏   | 138/221 [00:52<00:36,  2.30it/s][A
 63%|██████▎   | 139/221 [00:53<00:34,  2.37it/s][A
 63%|██████▎   | 140/221 [00:53<00:30,  2.63it/s][A
 64%|██████▍   | 141/221 [00:53<00:28,  2.80it/s][A
 64%|██████▍   | 142/221 [00:54<00:29,  2.68it/s][A
 65%|██████▍   | 143/221 [00:54<00:28,  2.78it/s][A
 65%|██████▌   | 144/221 [00:54<00:22,  3.45it/s][A
 66%|██████▌   | 145/221 [00:54<00:21,  3.61it/s][A
 67%|██████▋   | 147/221 [00:54<00:14,  5.08it/s][A
 67%|██████▋   | 148/221 [00:55<00:15,  4.61it/s][A
 68%|██████▊   | 150/221 [00:55<00:12,  5.71it/s][A
 68%|██████▊   | 151/221 [00:56<00:21,  3.26it/s][A
 69%|██████▉   | 152/221 [00:56<00:21,  3.22it/s][A[h264 @ 0x55771ddedfc0] mmco: unref short failure

 69%|██████▉   | 153/221 [00:56<00:20,  3.27it/s][A
 70%|██████▉   | 154/221 [00:57<00:31,  2.13it/s][A
 71%|███████   | 156/221 [00:57<00:20,  3.22it/s][A
 71%|███████   | 157/221 [01:02<01:28,  1.38s/it][A
 71%|███████▏  | 158/221 [01:02<01:07,  1.07s/it][A
 72%|███████▏  | 159/221 [01:03<00:51,  1.19it/s][A
 72%|███████▏  | 160/221 [01:03<00:40,  1.51it/s][A
 73%|███████▎  | 162/221 [01:03<00:24,  2.42it/s][A
 74%|███████▍  | 163/221 [01:03<00:20,  2.87it/s][A
 74%|███████▍  | 164/221 [01:03<00:18,  3.08it/s][A
 75%|███████▌  | 166/221 [01:04<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [01:04<00:13,  3.86it/s][A09/17/2024 08:28:10 - INFO - __main__ -   current idx vMl-g-GJ1Ac.24 from finetune_area returns wrong image/video, use 103236 instead.

 76%|███████▌  | 168/221 [01:07<00:48,  1.09it/s][A
 76%|███████▋  | 169/221 [01:07<00:40,  1.29it/s][A
 77%|███████▋  | 170/221 [01:08<00:32,  1.56it/s][A
 77%|███████▋  | 171/221 [01:08<00:25,  1.98it/s][A
 78%|███████▊  | 172/221 [01:08<00:20,  2.43it/s][A
 78%|███████▊  | 173/221 [01:08<00:15,  3.04it/s][A
 79%|███████▉  | 175/221 [01:08<00:11,  3.92it/s][A
 80%|███████▉  | 176/221 [01:09<00:11,  3.77it/s][A
 80%|████████  | 177/221 [01:09<00:10,  4.32it/s][A
 81%|████████  | 178/221 [01:09<00:10,  3.95it/s][A
 81%|████████  | 179/221 [01:10<00:22,  1.89it/s][A
 82%|████████▏ | 181/221 [01:11<00:13,  2.98it/s][A
 82%|████████▏ | 182/221 [01:11<00:11,  3.51it/s][A
 83%|████████▎ | 183/221 [01:11<00:09,  4.01it/s][A
 83%|████████▎ | 184/221 [01:11<00:09,  3.83it/s][A
 84%|████████▎ | 185/221 [01:11<00:08,  4.46it/s][A
 84%|████████▍ | 186/221 [01:11<00:07,  4.44it/s][A
 85%|████████▍ | 187/221 [01:12<00:06,  5.21it/s][A
 85%|████████▌ | 188/221 [01:12<00:06,  5.10it/s][A
 86%|████████▌ | 189/221 [01:12<00:07,  4.23it/s][A
 86%|████████▌ | 190/221 [01:12<00:07,  4.40it/s][A
 87%|████████▋ | 192/221 [01:13<00:05,  5.17it/s][A
 88%|████████▊ | 194/221 [01:14<00:09,  2.96it/s][A
 89%|████████▊ | 196/221 [01:14<00:06,  4.12it/s][A
 90%|████████▉ | 198/221 [01:14<00:04,  5.06it/s][A
 90%|█████████ | 199/221 [01:14<00:04,  4.66it/s][A[h264 @ 0x55864c53fd00] mmco: unref short failure
[h264 @ 0x55864c53fd00] mmco: unref short failure
[h264 @ 0x55864c53fd00] mmco: unref short failure

 90%|█████████ | 200/221 [01:15<00:05,  4.17it/s][A
 91%|█████████ | 201/221 [01:15<00:04,  4.29it/s][A
 91%|█████████▏| 202/221 [01:15<00:03,  4.94it/s][A
 92%|█████████▏| 203/221 [01:15<00:03,  4.88it/s][A
 93%|█████████▎| 205/221 [01:15<00:02,  6.59it/s][A
 93%|█████████▎| 206/221 [01:16<00:02,  5.86it/s][A
 94%|█████████▍| 208/221 [01:16<00:01,  7.92it/s][A
 95%|█████████▌| 211/221 [01:16<00:01,  6.07it/s][A
 96%|█████████▌| 212/221 [01:17<00:01,  5.88it/s][A
 96%|█████████▋| 213/221 [01:17<00:01,  6.04it/s][A
 97%|█████████▋| 214/221 [01:18<00:02,  2.42it/s][A
 97%|█████████▋| 215/221 [01:18<00:02,  2.77it/s][A
 98%|█████████▊| 216/221 [01:18<00:01,  3.29it/s][A
 98%|█████████▊| 217/221 [01:19<00:01,  2.48it/s][A
 99%|█████████▊| 218/221 [01:20<00:01,  2.20it/s][A
 99%|█████████▉| 219/221 [01:20<00:00,  2.62it/s][A[h264 @ 0x55863b16d540] mmco: unref short failure
[h264 @ 0x5556cc05f540] mmco: unref short failure

100%|█████████▉| 220/221 [01:25<00:01,  1.70s/it][A100%|██████████| 221/221 [01:25<00:00,  2.59it/s]
[h264 @ 0x563541c6cfc0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:06,  3.29it/s][A
  1%|          | 2/221 [00:00<01:05,  3.34it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.37it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.38it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.37it/s][A
  3%|▎         | 6/221 [00:01<01:03,  3.38it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.39it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.39it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.33it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.35it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.30it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.33it/s][A[h264 @ 0x55863a626980] mmco: unref short failure

  6%|▋         | 14/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.32it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.34it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.32it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.34it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.36it/s][A[h264 @ 0x55863e335c40] mmco: unref short failure

 10%|▉         | 21/221 [00:06<00:59,  3.37it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.38it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.32it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.35it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.36it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.38it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.39it/s][A
 13%|█▎        | 29/221 [00:08<00:58,  3.30it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.28it/s][A[h264 @ 0x563565081ac0] mmco: unref short failure

 14%|█▍        | 31/221 [00:09<00:58,  3.23it/s][A
 14%|█▍        | 32/221 [00:09<00:57,  3.28it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.34it/s][A
 16%|█▌        | 35/221 [00:10<00:55,  3.35it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.36it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.38it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.38it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.39it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.40it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.41it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.38it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.39it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.39it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.40it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.40it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.40it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.40it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.40it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.41it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 74/221 [00:21<00:43,  3.41it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.41it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:39,  3.17it/s][A
 43%|████▎     | 96/221 [00:28<00:38,  3.24it/s][A
 44%|████▍     | 97/221 [00:28<00:37,  3.29it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.33it/s][A
 45%|████▍     | 99/221 [00:29<00:36,  3.36it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.38it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.39it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.40it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.41it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.41it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:26,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:38,  5.75it/s][A
  1%|          | 2/221 [00:00<00:46,  4.72it/s][A
  1%|▏         | 3/221 [00:00<00:59,  3.66it/s][A
  2%|▏         | 4/221 [00:00<00:52,  4.09it/s][A
  2%|▏         | 5/221 [00:01<00:45,  4.76it/s][A
  3%|▎         | 6/221 [00:01<00:43,  4.89it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.12it/s][A
  4%|▎         | 8/221 [00:01<00:57,  3.69it/s][A
  4%|▍         | 9/221 [00:02<00:58,  3.63it/s][A
  5%|▍         | 10/221 [00:02<01:14,  2.81it/s][A
  5%|▍         | 11/221 [00:03<01:07,  3.12it/s][A
  5%|▌         | 12/221 [00:03<00:59,  3.49it/s][A
  6%|▌         | 13/221 [00:03<01:26,  2.41it/s][A
  6%|▋         | 14/221 [00:04<01:18,  2.65it/s][A
  7%|▋         | 15/221 [00:04<01:16,  2.68it/s][A
  7%|▋         | 16/221 [00:04<01:18,  2.62it/s][A
  8%|▊         | 17/221 [00:05<01:27,  2.33it/s][A
  8%|▊         | 18/221 [00:05<01:21,  2.49it/s][A
  9%|▉         | 20/221 [00:06<00:55,  3.59it/s][A
 10%|▉         | 21/221 [00:06<00:51,  3.90it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.12it/s][A
 10%|█         | 23/221 [00:06<00:42,  4.66it/s][A
 11%|█         | 24/221 [00:06<00:42,  4.60it/s][A
 11%|█▏        | 25/221 [00:07<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.74it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.78it/s][A
 13%|█▎        | 28/221 [00:08<00:52,  3.71it/s][A
 13%|█▎        | 29/221 [00:08<00:49,  3.86it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.66it/s][A
 14%|█▍        | 31/221 [00:08<00:51,  3.66it/s][A
 14%|█▍        | 32/221 [00:09<00:48,  3.89it/s][A
 15%|█▍        | 33/221 [00:09<00:51,  3.68it/s][A
 15%|█▌        | 34/221 [00:09<01:01,  3.02it/s][A
 16%|█▌        | 35/221 [00:10<00:58,  3.18it/s][A
 16%|█▋        | 36/221 [00:10<00:58,  3.18it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.55it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.41it/s][A
 18%|█▊        | 39/221 [00:11<00:52,  3.45it/s][A
 18%|█▊        | 40/221 [00:11<00:51,  3.49it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.40it/s][A
 19%|█▉        | 42/221 [00:12<00:49,  3.62it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.36it/s][A
 20%|█▉        | 44/221 [00:12<00:54,  3.27it/s][A
 20%|██        | 45/221 [00:13<01:00,  2.90it/s][A
 21%|██        | 46/221 [00:13<01:01,  2.83it/s][A
 21%|██▏       | 47/221 [00:13<00:56,  3.07it/s][A
 22%|██▏       | 48/221 [00:14<00:49,  3.53it/s][A
 23%|██▎       | 50/221 [00:14<00:42,  4.04it/s][A
 23%|██▎       | 51/221 [00:14<00:41,  4.08it/s][A
 24%|██▍       | 53/221 [00:15<00:44,  3.79it/s][A
 24%|██▍       | 54/221 [00:15<00:43,  3.87it/s][A
 25%|██▍       | 55/221 [00:16<00:52,  3.18it/s][A
 25%|██▌       | 56/221 [00:16<00:54,  3.03it/s][A
 26%|██▌       | 57/221 [00:16<00:53,  3.06it/s][A
 26%|██▌       | 58/221 [00:16<00:46,  3.53it/s][A
 27%|██▋       | 59/221 [00:17<00:45,  3.55it/s][A
 27%|██▋       | 60/221 [00:17<00:41,  3.90it/s][A
 28%|██▊       | 61/221 [00:17<00:39,  4.02it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.83it/s][A
 29%|██▉       | 64/221 [00:18<00:33,  4.63it/s][A
 29%|██▉       | 65/221 [00:18<00:34,  4.46it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.63it/s][A
 30%|███       | 67/221 [00:19<00:46,  3.28it/s][A
 31%|███       | 68/221 [00:19<00:47,  3.23it/s][A
 31%|███       | 69/221 [00:20<01:00,  2.52it/s][A
 32%|███▏      | 70/221 [00:20<00:58,  2.57it/s][A
 32%|███▏      | 71/221 [00:20<00:57,  2.59it/s][A
 33%|███▎      | 72/221 [00:21<00:55,  2.67it/s][A
 33%|███▎      | 73/221 [00:21<00:52,  2.82it/s][A
 33%|███▎      | 74/221 [00:21<00:46,  3.15it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.37it/s][A
 34%|███▍      | 76/221 [00:22<00:38,  3.76it/s][A
 35%|███▍      | 77/221 [00:22<00:34,  4.17it/s][A
 35%|███▌      | 78/221 [00:22<00:36,  3.91it/s][A
 36%|███▌      | 79/221 [00:23<00:37,  3.79it/s][A
 36%|███▌      | 80/221 [00:23<00:33,  4.22it/s][A
 37%|███▋      | 81/221 [00:23<00:31,  4.38it/s][A
 37%|███▋      | 82/221 [00:23<00:42,  3.28it/s][A
 38%|███▊      | 84/221 [00:24<00:45,  3.02it/s][A
 38%|███▊      | 85/221 [00:24<00:45,  2.98it/s][A
 39%|███▉      | 86/221 [00:25<00:49,  2.74it/s][A
 39%|███▉      | 87/221 [00:25<00:50,  2.63it/s][A
 40%|███▉      | 88/221 [00:26<00:46,  2.88it/s][A
 40%|████      | 89/221 [00:26<00:45,  2.93it/s][A
 41%|████      | 90/221 [00:26<00:50,  2.60it/s][A
 41%|████      | 91/221 [00:27<00:44,  2.95it/s][A
 42%|████▏     | 92/221 [00:27<00:45,  2.81it/s][A
 42%|████▏     | 93/221 [00:27<00:49,  2.59it/s][A
 43%|████▎     | 94/221 [00:28<00:44,  2.87it/s][A
 43%|████▎     | 95/221 [00:28<00:50,  2.49it/s][A
 43%|████▎     | 96/221 [00:29<00:52,  2.39it/s][A
 44%|████▍     | 97/221 [00:29<00:47,  2.63it/s][A
 44%|████▍     | 98/221 [00:29<00:47,  2.61it/s][A
 45%|████▍     | 99/221 [00:30<00:44,  2.75it/s][A
 45%|████▌     | 100/221 [00:30<00:37,  3.19it/s][A
 46%|████▌     | 101/221 [00:30<00:32,  3.67it/s][A
 46%|████▌     | 102/221 [00:30<00:33,  3.59it/s][A
 47%|████▋     | 103/221 [00:31<00:30,  3.83it/s][A
 47%|████▋     | 104/221 [00:31<00:27,  4.32it/s][A
 48%|████▊     | 105/221 [00:31<00:30,  3.76it/s][A
 48%|████▊     | 106/221 [00:32<00:36,  3.12it/s][A
 48%|████▊     | 107/221 [00:32<00:36,  3.16it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.75it/s][A
 49%|████▉     | 109/221 [00:32<00:28,  3.90it/s][A
 50%|████▉     | 110/221 [00:33<00:30,  3.64it/s][A
 50%|█████     | 111/221 [00:33<00:30,  3.57it/s][A
 51%|█████     | 112/221 [00:33<00:30,  3.58it/s][A
 51%|█████     | 113/221 [00:33<00:30,  3.56it/s][A
 52%|█████▏    | 114/221 [00:34<00:25,  4.18it/s][A
 52%|█████▏    | 115/221 [00:34<00:22,  4.75it/s][A
 52%|█████▏    | 116/221 [00:34<00:23,  4.51it/s][A
 53%|█████▎    | 117/221 [00:34<00:23,  4.39it/s][A
 53%|█████▎    | 118/221 [00:35<00:26,  3.91it/s][A
 54%|█████▍    | 119/221 [00:35<00:30,  3.33it/s][A
 54%|█████▍    | 120/221 [00:35<00:35,  2.86it/s][A
 55%|█████▍    | 121/221 [00:36<00:34,  2.93it/s][A
 55%|█████▌    | 122/221 [00:36<00:29,  3.32it/s][A
 56%|█████▌    | 123/221 [00:36<00:32,  3.02it/s][A
 56%|█████▌    | 124/221 [00:37<00:32,  2.96it/s][A
 57%|█████▋    | 125/221 [00:37<00:36,  2.64it/s][A
 57%|█████▋    | 126/221 [00:37<00:33,  2.83it/s][A
 57%|█████▋    | 127/221 [00:38<00:34,  2.72it/s][A
 58%|█████▊    | 128/221 [00:38<00:31,  2.98it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.48it/s][A
 59%|█████▉    | 130/221 [00:39<00:25,  3.58it/s][A
 59%|█████▉    | 131/221 [00:39<00:25,  3.48it/s][A
 60%|█████▉    | 132/221 [00:39<00:23,  3.72it/s][A
 60%|██████    | 133/221 [00:39<00:26,  3.27it/s][A
 61%|██████    | 134/221 [00:40<00:29,  2.99it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:25,  3.27it/s][A
 62%|██████▏   | 137/221 [00:41<00:23,  3.56it/s][A
 62%|██████▏   | 138/221 [00:41<00:22,  3.68it/s][A
 63%|██████▎   | 139/221 [00:41<00:24,  3.28it/s][A
 63%|██████▎   | 140/221 [00:41<00:21,  3.68it/s][A
 64%|██████▍   | 141/221 [00:42<00:28,  2.77it/s][A
 64%|██████▍   | 142/221 [00:42<00:24,  3.19it/s][A
 65%|██████▍   | 143/221 [00:43<00:24,  3.21it/s][A
 65%|██████▌   | 144/221 [00:43<00:21,  3.58it/s][A
 66%|██████▌   | 145/221 [00:43<00:24,  3.09it/s][A
 66%|██████▌   | 146/221 [00:43<00:23,  3.24it/s][A
 67%|██████▋   | 147/221 [00:44<00:19,  3.77it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  3.04it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.36it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.25it/s][A
 68%|██████▊   | 151/221 [00:45<00:22,  3.11it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.25it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.48it/s][A
 70%|██████▉   | 154/221 [00:46<00:25,  2.60it/s][A
 70%|███████   | 155/221 [00:47<00:23,  2.82it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.12it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.31it/s][A
 71%|███████▏  | 158/221 [00:48<00:21,  2.96it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.01it/s][A
 72%|███████▏  | 160/221 [00:48<00:17,  3.40it/s][A
 73%|███████▎  | 161/221 [00:48<00:14,  4.04it/s][A
 73%|███████▎  | 162/221 [00:48<00:12,  4.65it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.49it/s][A
 74%|███████▍  | 164/221 [00:49<00:12,  4.67it/s][A
 75%|███████▍  | 165/221 [00:49<00:14,  3.98it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.36it/s][A
 76%|███████▌  | 167/221 [00:50<00:13,  4.00it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.60it/s][A
 77%|███████▋  | 170/221 [00:50<00:13,  3.88it/s][A
 77%|███████▋  | 171/221 [00:51<00:13,  3.59it/s][A
 78%|███████▊  | 172/221 [00:51<00:14,  3.45it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.27it/s][A
 79%|███████▊  | 174/221 [00:52<00:15,  2.95it/s][A
 79%|███████▉  | 175/221 [00:52<00:15,  2.98it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.48it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.53it/s][A
 81%|████████  | 178/221 [00:53<00:17,  2.43it/s][A
 81%|████████  | 179/221 [00:54<00:15,  2.74it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.23it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.71it/s][A
 82%|████████▏ | 182/221 [00:55<00:12,  3.11it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  3.16it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  3.00it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.77it/s][A
 84%|████████▍ | 186/221 [00:56<00:11,  3.05it/s][A
 85%|████████▍ | 187/221 [00:56<00:10,  3.37it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.10it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.39it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.28it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.68it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  3.96it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.54it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.17it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.47it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.19it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.21it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.21it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.45it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.37it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.74it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.66it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  3.99it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.80it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.31it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.53it/s][A
 94%|█████████▎| 207/221 [01:02<00:05,  2.53it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  3.04it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.25it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.03it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.34it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.50it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.62it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.83it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.68it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.63it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.86it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.09it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.07it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.46it/s][A
100%|██████████| 221/221 [01:07<00:00,  3.25it/s][A100%|██████████| 221/221 [01:07<00:00,  3.29it/s]
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'area_r1': 39.4, 'area_recall': '39.4/63.9/72.5', 'area_ravg': 58.6}
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'forward_r1': 37.9, 'forward_recall': '37.9/67.0/77.1', 'forward_ravg': 60.7}
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'area_video_r1': 39.1, 'area_video_recall': '39.1/68.4/78.7', 'area_video_ravg': 62.1}
09/17/2024 08:30:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 08:30:44 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'area_video_r1': 53.1, 'area_video_recall': '53.1/75.8/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 47.7, 'area_video_back_recall': '47.7/73.9/82.7', 'area_video_back_ravg': 68.1}
09/17/2024 08:30:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1349=======

09/17/2024 08:30:44 - INFO - __main__ -   {'area_video_r1': 53.1, 'area_video_recall': '53.1/75.8/82.6', 'area_video_ravg': 70.5, 'area_video_back_r1': 47.7, 'area_video_back_recall': '47.7/73.9/82.7', 'area_video_back_ravg': 68.1}
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'video_r1': 36.1, 'video_recall': '36.1/64.5/74.3', 'video_ravg': 58.3}
09/17/2024 08:30:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 08:30:44 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 08:30:44 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1349--===========

09/17/2024 08:30:44 - INFO - __main__ -   {'video_r1': 52.3, 'video_recall': '52.3/74.2/81.3', 'video_ravg': 69.3}
09/17/2024 08:30:44 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 08:30:44 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 08:31:09 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007367804180830717, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0326437950134277, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.3192498683929443, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.3592615127563477}
 46%|████▋     | 1350/2910 [8:35:13<59:12:17, 136.63s/it][h264 @ 0x55863f4382c0] mmco: unref short failure
[h264 @ 0x55863f4382c0] mmco: unref short failure
 46%|████▋     | 1351/2910 [8:35:17<41:56:32, 96.85s/it] [h264 @ 0x558631ea0980] mmco: unref short failure
[h264 @ 0x558631ea0980] mmco: unref short failure
[h264 @ 0x558631ea0980] mmco: unref short failure
[h264 @ 0x558631ea0980] mmco: unref short failure
 46%|████▋     | 1352/2910 [8:35:22<29:56:00, 69.17s/it] 46%|████▋     | 1353/2910 [8:35:27<21:36:25, 49.96s/it] 47%|████▋     | 1354/2910 [8:35:32<15:49:39, 36.62s/it][h264 @ 0x5577339e53c0] mmco: unref short failure
[h264 @ 0x5577339e53c0] mmco: unref short failure
 47%|████▋     | 1355/2910 [8:35:39<11:55:53, 27.62s/it][h264 @ 0x5635401f2c40] mmco: unref short failure
 47%|████▋     | 1356/2910 [8:35:45<9:10:17, 21.25s/it] [h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
[h264 @ 0x5556c75fba00] mmco: unref short failure
 47%|████▋     | 1357/2910 [8:35:53<7:25:52, 17.23s/it] 47%|████▋     | 1358/2910 [8:36:00<6:03:56, 14.07s/it][h264 @ 0x5556ca349740] mmco: unref short failure
[h264 @ 0x5556ca349740] mmco: unref short failure
 47%|████▋     | 1359/2910 [8:36:06<5:06:45, 11.87s/it]09/17/2024 08:32:07 - INFO - __main__ -   current idx JX1V1Vr8KcE.96 from finetune_area returns wrong image/video, use 25260 instead.
[h264 @ 0x55771b9c5540] mmco: unref short failure
 47%|████▋     | 1360/2910 [8:36:14<4:33:12, 10.58s/it][h264 @ 0x558635bbb740] mmco: unref short failure
[h264 @ 0x558635bbb740] mmco: unref short failure
[h264 @ 0x563546bc74c0] mmco: unref short failure
[h264 @ 0x55863b16d2c0] mmco: unref short failure
[h264 @ 0x55863b16d2c0] mmco: unref short failure
[h264 @ 0x563541647b40] mmco: unref short failure
[h264 @ 0x563541647b40] mmco: unref short failure
 47%|████▋     | 1361/2910 [8:36:21<4:05:14,  9.50s/it][h264 @ 0x5556ca349dc0] mmco: unref short failure
[h264 @ 0x5556c415c240] mmco: unref short failure
09/17/2024 08:32:25 - INFO - __main__ -   current idx VedQGAhjkEM.4 from finetune_area returns wrong image/video, use 97285 instead.
 47%|████▋     | 1362/2910 [8:36:28<3:43:20,  8.66s/it] 47%|████▋     | 1363/2910 [8:36:34<3:21:16,  7.81s/it][h264 @ 0x55771a23b8c0] mmco: unref short failure
[h264 @ 0x55771a23b8c0] mmco: unref short failure
[h264 @ 0x5635428f7fc0] mmco: unref short failure
[h264 @ 0x5635428f7fc0] mmco: unref short failure
 47%|████▋     | 1364/2910 [8:36:40<3:11:13,  7.42s/it] 47%|████▋     | 1365/2910 [8:36:48<3:12:16,  7.47s/it][h264 @ 0x55771c716080] mmco: unref short failure
[h264 @ 0x55771c716080] mmco: unref short failure
[h264 @ 0x5586365f0100] mmco: unref short failure
[h264 @ 0x5586365f0100] mmco: unref short failure
[h264 @ 0x5635414783c0] mmco: unref short failure
[h264 @ 0x5635414783c0] mmco: unref short failure
[h264 @ 0x558644c7c680] mmco: unref short failure
[h264 @ 0x55772a0aa480] mmco: unref short failure
[h264 @ 0x55772a0aa480] mmco: unref short failure
[h264 @ 0x557735b86a00] mmco: unref short failure
[h264 @ 0x557735b86a00] mmco: unref short failure
[h264 @ 0x56354b3980c0] mmco: unref short failure
 47%|████▋     | 1366/2910 [8:37:11<5:12:54, 12.16s/it][h264 @ 0x5556dc528300] mmco: unref short failure
[h264 @ 0x5556dc528300] mmco: unref short failure
[h264 @ 0x55771e262e00] mmco: unref short failure
[h264 @ 0x55863b318740] mmco: unref short failure
 47%|████▋     | 1367/2910 [8:37:31<6:13:05, 14.51s/it][h264 @ 0x5576df1c4c00] mmco: unref short failure
[h264 @ 0x5576df1c4c00] mmco: unref short failure
[h264 @ 0x5576df1c4c00] mmco: unref short failure
[h264 @ 0x5576df1c4c00] mmco: unref short failure
 47%|████▋     | 1368/2910 [8:37:46<6:15:44, 14.62s/it][h264 @ 0x5556c5dfc040] mmco: unref short failure
[h264 @ 0x5556c5dfc040] mmco: unref short failure
09/17/2024 08:33:55 - INFO - __main__ -   current idx Uy2GKmZtj5Y.37 from finetune_area returns wrong image/video, use 3167 instead.
 47%|████▋     | 1369/2910 [8:37:59<6:08:08, 14.33s/it] 47%|████▋     | 1370/2910 [8:38:08<5:24:34, 12.65s/it] 47%|████▋     | 1371/2910 [8:38:15<4:42:38, 11.02s/it][h264 @ 0x5577232c3500] mmco: unref short failure
09/17/2024 08:34:19 - INFO - __main__ -   current idx TlZDDACt8Nw.3 from finetune_area returns wrong image/video, use 127321 instead.
 47%|████▋     | 1372/2910 [8:38:23<4:17:39, 10.05s/it][h264 @ 0x5576e014c240] mmco: unref short failure
[h264 @ 0x5576e014c240] mmco: unref short failure
[h264 @ 0x563541629a80] mmco: unref short failure
[h264 @ 0x5556cb0cedc0] mmco: unref short failure
[h264 @ 0x5556cb0cedc0] mmco: unref short failure
[h264 @ 0x5556cb0cedc0] mmco: unref short failure
[h264 @ 0x5556cb0cedc0] mmco: unref short failure
 47%|████▋     | 1373/2910 [8:38:30<3:56:47,  9.24s/it][h264 @ 0x563556311ac0] mmco: unref short failure
[h264 @ 0x563556311ac0] mmco: unref short failure
[h264 @ 0x563556311ac0] mmco: unref short failure
[h264 @ 0x563556311ac0] mmco: unref short failure
09/17/2024 08:34:49 - INFO - __main__ -   current idx FqNEx17crMI.14 from finetune_area returns wrong image/video, use 45105 instead.
[h264 @ 0x55771a19d600] mmco: unref short failure
[h264 @ 0x55771a19d600] mmco: unref short failure
[h264 @ 0x5556cc059ac0] mmco: unref short failure
[h264 @ 0x5556cc059ac0] mmco: unref short failure
[h264 @ 0x5556cc059ac0] mmco: unref short failure
[h264 @ 0x5556cc059ac0] mmco: unref short failure
09/17/2024 08:34:58 - INFO - __main__ -   current idx 37nPbMq5QY0.46 from finetune_area returns wrong image/video, use 119519 instead.
[h264 @ 0x558632c37300] mmco: unref short failure
[h264 @ 0x55773398aec0] mmco: unref short failure
[h264 @ 0x55773398aec0] mmco: unref short failure
[h264 @ 0x55772a775cc0] mmco: unref short failure
[h264 @ 0x55772a775cc0] mmco: unref short failure
[h264 @ 0x56355ea1df40] mmco: unref short failure
[h264 @ 0x55568d80e580] mmco: unref short failure
[h264 @ 0x55568bcc9f80] mmco: unref short failure
[h264 @ 0x557721c55a00] mmco: unref short failure
[h264 @ 0x557721c55a00] mmco: unref short failure
[h264 @ 0x5556c94488c0] mmco: unref short failure
[h264 @ 0x5556c94488c0] mmco: unref short failure
[h264 @ 0x5556c94488c0] mmco: unref short failure
[h264 @ 0x5556c94488c0] mmco: unref short failure
[h264 @ 0x5556c75fbc00] mmco: unref short failure
 47%|████▋     | 1374/2910 [8:39:45<12:15:30, 28.73s/it][h264 @ 0x55772bdc4100] mmco: unref short failure
[h264 @ 0x55772bdc4100] mmco: unref short failure
[h264 @ 0x5556d03a4fc0] mmco: unref short failure
[h264 @ 0x5556d03a4fc0] mmco: unref short failure
[h264 @ 0x5556cf418e00] mmco: unref short failure
[h264 @ 0x5556cf418e00] mmco: unref short failure
[h264 @ 0x5556c777b3c0] mmco: unref short failure
 47%|████▋     | 1375/2910 [8:40:04<11:05:28, 26.01s/it][h264 @ 0x56354a0e9f40] mmco: unref short failure
 47%|████▋     | 1376/2910 [8:40:11<8:38:13, 20.27s/it] [h264 @ 0x5577178d3340] mmco: unref short failure
[h264 @ 0x558634704840] mmco: unref short failure
[h264 @ 0x563559813240] mmco: unref short failure
[h264 @ 0x563559813240] mmco: unref short failure
[h264 @ 0x563559813240] mmco: unref short failure
[h264 @ 0x563559813240] mmco: unref short failure
[h264 @ 0x558632d72f80] mmco: unref short failure
[h264 @ 0x558632d72f80] mmco: unref short failure
[h264 @ 0x558632d72f80] mmco: unref short failure
[h264 @ 0x558632d72f80] mmco: unref short failure
 47%|████▋     | 1377/2910 [8:40:28<8:15:46, 19.40s/it][h264 @ 0x5577232c3bc0] mmco: unref short failure
[h264 @ 0x5577232c3bc0] mmco: unref short failure
[h264 @ 0x5556d706b140] mmco: unref short failure
[h264 @ 0x5556d706b140] mmco: unref short failure
 47%|████▋     | 1378/2910 [8:40:35<6:39:17, 15.64s/it][h264 @ 0x5556e1e79400] mmco: unref short failure
[h264 @ 0x5556e1e79400] mmco: unref short failure
[h264 @ 0x56355a85b480] mmco: unref short failure
[h264 @ 0x56355a85b480] mmco: unref short failure
[h264 @ 0x558632c37780] mmco: unref short failure
 47%|████▋     | 1379/2910 [8:40:47<6:10:54, 14.54s/it] 47%|████▋     | 1380/2910 [8:40:54<5:12:06, 12.24s/it][h264 @ 0x55568b796e40] mmco: unref short failure
[h264 @ 0x5576dff4ee80] mmco: unref short failure
[h264 @ 0x55863e97ee40] mmco: unref short failure
[h264 @ 0x55863e97ee40] mmco: unref short failure
 47%|████▋     | 1381/2910 [8:41:01<4:31:43, 10.66s/it][h264 @ 0x55771e21bac0] mmco: unref short failure
[h264 @ 0x55772c1e1f00] mmco: unref short failure
[h264 @ 0x55772c1e1f00] mmco: unref short failure
[h264 @ 0x55568bcbb840] mmco: unref short failure
[h264 @ 0x55568c3a7bc0] mmco: unref short failure
[h264 @ 0x55771a19d880] mmco: unref short failure
[h264 @ 0x55771a19d880] mmco: unref short failure
[h264 @ 0x55772485a440] mmco: unref short failure
[h264 @ 0x55772485a440] mmco: unref short failure
[h264 @ 0x5635485c8cc0] mmco: unref short failure
[h264 @ 0x55771a19d600] mmco: unref short failure
[h264 @ 0x55771a19d600] mmco: unref short failure
[h264 @ 0x5556d28f0700] mmco: unref short failure
[h264 @ 0x5556d28f0700] mmco: unref short failure
[h264 @ 0x558646eaf380] mmco: unref short failure
[h264 @ 0x558646eaf380] mmco: unref short failure
[h264 @ 0x5556dea4b880] mmco: unref short failure
[h264 @ 0x5556dea4b880] mmco: unref short failure
[h264 @ 0x55771ae4ce40] mmco: unref short failure
[h264 @ 0x557732f77b40] mmco: unref short failure
[h264 @ 0x557733a76bc0] mmco: unref short failure
[h264 @ 0x557733a76bc0] mmco: unref short failure
[h264 @ 0x55771858c8c0] mmco: unref short failure
[h264 @ 0x55771858c8c0] mmco: unref short failure
[h264 @ 0x5556c6d749c0] mmco: unref short failure
[h264 @ 0x5556c6d749c0] mmco: unref short failure
[h264 @ 0x55771858c8c0] mmco: unref short failure
 47%|████▋     | 1382/2910 [8:42:24<13:41:15, 32.25s/it][h264 @ 0x56356141e4c0] mmco: unref short failure
[h264 @ 0x563565a50680] mmco: unref short failure
[h264 @ 0x563565a50680] mmco: unref short failure
[h264 @ 0x563565a50680] mmco: unref short failure
 48%|████▊     | 1383/2910 [8:42:31<10:28:56, 24.71s/it] 48%|████▊     | 1384/2910 [8:42:41<8:36:33, 20.31s/it]  48%|████▊     | 1385/2910 [8:42:52<7:25:55, 17.54s/it][h264 @ 0x557721fb2f80] mmco: unref short failure
[h264 @ 0x557721fb2f80] mmco: unref short failure
[h264 @ 0x557732f0dc80] mmco: unref short failure
 48%|████▊     | 1386/2910 [8:42:59<6:02:34, 14.27s/it][h264 @ 0x55568be709c0] mmco: unref short failure
[h264 @ 0x5556dd5f4540] mmco: unref short failure
09/17/2024 08:39:07 - INFO - __main__ -   current idx c-OFuj2DzPc.20 from finetune_area returns wrong image/video, use 143786 instead.
 48%|████▊     | 1387/2910 [8:43:11<5:46:16, 13.64s/it][h264 @ 0x56354a965800] mmco: unref short failure
[h264 @ 0x5556c4a91600] mmco: unref short failure
[h264 @ 0x5556c4a91600] mmco: unref short failure
[h264 @ 0x5586483a8ec0] mmco: unref short failure
[h264 @ 0x5586483a8ec0] mmco: unref short failure
 48%|████▊     | 1388/2910 [8:43:23<5:36:10, 13.25s/it]09/17/2024 08:39:27 - INFO - __main__ -   current idx hZOgYFh5bYI.55 from finetune_area returns wrong image/video, use 82035 instead.
 48%|████▊     | 1389/2910 [8:43:30<4:43:18, 11.18s/it][h264 @ 0x55772485a640] mmco: unref short failure
[h264 @ 0x55772485a640] mmco: unref short failure
[h264 @ 0x56354286c700] mmco: unref short failure
[h264 @ 0x56354c2cb840] mmco: unref short failure
[h264 @ 0x55864261d080] mmco: unref short failure
[h264 @ 0x55864261d080] mmco: unref short failure
[h264 @ 0x5556c5597b40] mmco: unref short failure
[h264 @ 0x55771ebffc80] mmco: unref short failure
[h264 @ 0x56354410f400] mmco: unref short failure
[h264 @ 0x5556ce006940] mmco: unref short failure
[h264 @ 0x5556ce006940] mmco: unref short failure
[h264 @ 0x5556ce006940] mmco: unref short failure
[h264 @ 0x5556ce006940] mmco: unref short failure
[h264 @ 0x5556ce006940] mmco: unref short failure
[h264 @ 0x5556c4992940] mmco: unref short failure
09/17/2024 08:40:30 - INFO - __main__ -   current idx GdCloC04v0E.24 from finetune_area returns wrong image/video, use 105128 instead.
[h264 @ 0x55771eaaac80] mmco: unref short failure
[h264 @ 0x55771eaaac80] mmco: unref short failure
09/17/2024 08:40:35 - INFO - __main__ -   current idx iVsSItydo2I.31 from finetune_area returns wrong image/video, use 77362 instead.
[h264 @ 0x563561d9a780] mmco: unref short failure
[h264 @ 0x563561d9a780] mmco: unref short failure
[h264 @ 0x563561d9a780] mmco: unref short failure
[h264 @ 0x5556ca70f040] mmco: unref short failure
[h264 @ 0x55773345fbc0] mmco: unref short failure
[h264 @ 0x55773345fbc0] mmco: unref short failure
[h264 @ 0x557729447640] mmco: unref short failure
[h264 @ 0x557729447640] mmco: unref short failure
[h264 @ 0x55772c77ce00] mmco: unref short failure
[h264 @ 0x55772c77ce00] mmco: unref short failure
[h264 @ 0x5576df8d0500] mmco: unref short failure
[h264 @ 0x5576defee240] mmco: unref short failure
 48%|████▊     | 1390/2910 [8:44:53<13:54:47, 32.95s/it] 48%|████▊     | 1391/2910 [8:45:01<10:43:42, 25.43s/it] 48%|████▊     | 1392/2910 [8:45:08<8:19:00, 19.72s/it] [h264 @ 0x5576df8d0300] mmco: unref short failure
[h264 @ 0x5576df8d0300] mmco: unref short failure
[h264 @ 0x56354d60e8c0] mmco: unref short failure
[h264 @ 0x56354d60e8c0] mmco: unref short failure
[h264 @ 0x56354d60e8c0] mmco: unref short failure
[h264 @ 0x56354d60e8c0] mmco: unref short failure
09/17/2024 08:41:19 - INFO - __main__ -   current idx hYUBfT385zc.4 from finetune_area returns wrong image/video, use 96206 instead.
 48%|████▊     | 1393/2910 [8:45:25<7:57:50, 18.90s/it][h264 @ 0x55771a40cd00] mmco: unref short failure
[h264 @ 0x55771a40cd00] mmco: unref short failure
[h264 @ 0x557717e6d740] mmco: unref short failure
[h264 @ 0x557717e6d740] mmco: unref short failure
[h264 @ 0x563549054380] mmco: unref short failure
[h264 @ 0x563549054380] mmco: unref short failure
[h264 @ 0x5556ce664000] mmco: unref short failure
[h264 @ 0x5556ce664000] mmco: unref short failure
 48%|████▊     | 1394/2910 [8:45:39<7:21:26, 17.47s/it][h264 @ 0x5635421c5bc0] mmco: unref short failure
[h264 @ 0x56354ad92600] mmco: unref short failure
[h264 @ 0x5576de927b00] mmco: unref short failure
[h264 @ 0x5576de927b00] mmco: unref short failure
[h264 @ 0x5576de927b00] mmco: unref short failure
[h264 @ 0x5576de927b00] mmco: unref short failure
 48%|████▊     | 1395/2910 [8:45:45<5:59:06, 14.22s/it][h264 @ 0x5576e0fa78c0] mmco: unref short failure
[h264 @ 0x5576e0fa78c0] mmco: unref short failure
[h264 @ 0x5576e0fa78c0] mmco: unref short failure
[h264 @ 0x5556df24dec0] mmco: unref short failure
[h264 @ 0x5556df24dec0] mmco: unref short failure
[h264 @ 0x5556df24dec0] mmco: unref short failure
[h264 @ 0x5556df24dec0] mmco: unref short failure
[h264 @ 0x5556c991f540] mmco: unref short failure
[h264 @ 0x5556c991f540] mmco: unref short failure
[h264 @ 0x563562775600] mmco: unref short failure
 48%|████▊     | 1396/2910 [8:45:53<5:07:53, 12.20s/it][h264 @ 0x563550323200] mmco: unref short failure
[h264 @ 0x563550323200] mmco: unref short failure
[h264 @ 0x5586358da100] mmco: unref short failure
[h264 @ 0x5586358da100] mmco: unref short failure
[h264 @ 0x55771d33ed80] mmco: unref short failure
[h264 @ 0x55771d33ed80] mmco: unref short failure
 48%|████▊     | 1397/2910 [8:46:04<4:56:32, 11.76s/it][h264 @ 0x558632dbd700] mmco: unref short failure
[h264 @ 0x558632dbd700] mmco: unref short failure
[h264 @ 0x563541915fc0] mmco: unref short failure
[h264 @ 0x563541915fc0] mmco: unref short failure
[h264 @ 0x55568d3cae40] mmco: unref short failure
[h264 @ 0x558645109180] mmco: unref short failure
[h264 @ 0x558645109180] mmco: unref short failure
[h264 @ 0x558645109180] mmco: unref short failure
[h264 @ 0x558645109180] mmco: unref short failure
[h264 @ 0x55863debee40] mmco: unref short failure
[h264 @ 0x55863debee40] mmco: unref short failure
[h264 @ 0x5576e0994880] mmco: unref short failure
[h264 @ 0x5576e0994880] mmco: unref short failure
[h264 @ 0x5556c99277c0] mmco: unref short failure
[h264 @ 0x5586496784c0] mmco: unref short failure
[h264 @ 0x5586496784c0] mmco: unref short failure
[h264 @ 0x5556d8a02880] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x5577221d1a40] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x558655145740] mmco: unref short failure
[h264 @ 0x563544611080] mmco: unref short failure
[h264 @ 0x5635418e9900] mmco: unref short failure
[h264 @ 0x5576e0993500] mmco: unref short failure
[h264 @ 0x5576e0993500] mmco: unref short failure
[h264 @ 0x55771ffca440] mmco: unref short failure
[h264 @ 0x55771ffca440] mmco: unref short failure
[h264 @ 0x563547aa5dc0] mmco: unref short failure
[h264 @ 0x563547aa5dc0] mmco: unref short failure
[h264 @ 0x5576df90a280] mmco: unref short failure
 48%|████▊     | 1398/2910 [8:47:19<13:01:03, 30.99s/it][h264 @ 0x5576dede4a80] mmco: unref short failure
[h264 @ 0x5576dede4a80] mmco: unref short failure
[h264 @ 0x5576dede4a80] mmco: unref short failure
[h264 @ 0x563552d8a8c0] mmco: unref short failure
[h264 @ 0x55568bda2500] mmco: unref short failure
[h264 @ 0x55568bda2500] mmco: unref short failure
[h264 @ 0x558647f8c9c0] mmco: unref short failure
 48%|████▊     | 1399/2910 [8:47:37<11:19:53, 27.00s/it]09/17/2024 08:43:36 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 08:43:36 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x5556dd414a80] mmco: unref short failure
[h264 @ 0x5556dd414a80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556cd1e3100] mmco: unref short failure
[h264 @ 0x5556cd1e3100] mmco: unref short failure
[h264 @ 0x55863555a680] mmco: unref short failure
[h264 @ 0x55863555a680] mmco: unref short failure
[h264 @ 0x5556cd1e3100] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56354410ef80] mmco: unref short failure
[h264 @ 0x56354410ef80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56355d04c6c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55863202d640] mmco: unref short failure
[h264 @ 0x55863202d640] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556dbc1a4c0] mmco: unref short failure
[h264 @ 0x563551eb6c00] mmco: unref short failure
[h264 @ 0x563551eb6c00] mmco: unref short failure
[h264 @ 0x5576dfeaed40] mmco: unref short failure
[h264 @ 0x5576dfeaed40] mmco: unref short failure
09/17/2024 08:45:34 - INFO - __main__ -   current idx dYEsNlBENWc.3 from finetune_area returns wrong image/video, use 96268 instead.
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x557722469d00] mmco: unref short failure
[h264 @ 0x558632a1c700] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<02:43,  1.34it/s][A
  1%|          | 2/221 [00:01<01:55,  1.90it/s][A
  1%|▏         | 3/221 [00:01<01:13,  2.96it/s][A
  2%|▏         | 4/221 [00:01<00:54,  3.95it/s][A
  2%|▏         | 5/221 [00:01<00:44,  4.85it/s][A
  3%|▎         | 6/221 [00:01<00:37,  5.80it/s][A
  3%|▎         | 7/221 [00:01<00:44,  4.79it/s][A
  4%|▎         | 8/221 [00:02<01:10,  3.03it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.38it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.36it/s][A
  5%|▍         | 11/221 [00:03<00:54,  3.84it/s][A
  5%|▌         | 12/221 [00:03<01:27,  2.39it/s][A
  6%|▌         | 13/221 [00:04<01:08,  3.03it/s][A
  6%|▋         | 14/221 [00:04<01:08,  3.04it/s][A
  7%|▋         | 15/221 [00:04<00:58,  3.52it/s][A
  7%|▋         | 16/221 [00:04<00:54,  3.77it/s][A
  8%|▊         | 17/221 [00:04<00:48,  4.23it/s][A
  8%|▊         | 18/221 [00:05<00:46,  4.34it/s][A
  9%|▊         | 19/221 [00:05<00:40,  4.98it/s][A
  9%|▉         | 20/221 [00:05<00:35,  5.68it/s][A
 10%|▉         | 21/221 [00:05<00:31,  6.30it/s][A
 10%|▉         | 22/221 [00:05<00:45,  4.39it/s][A
 10%|█         | 23/221 [00:06<00:38,  5.10it/s][A
 11%|█         | 24/221 [00:06<00:37,  5.32it/s][A
 11%|█▏        | 25/221 [00:06<00:33,  5.92it/s][A
 12%|█▏        | 26/221 [00:06<00:36,  5.30it/s][A
 12%|█▏        | 27/221 [00:06<00:32,  6.03it/s][A
 13%|█▎        | 28/221 [00:06<00:38,  4.98it/s][A
 13%|█▎        | 29/221 [00:07<00:32,  5.84it/s][A
 14%|█▎        | 30/221 [00:07<00:31,  6.12it/s][A
 14%|█▍        | 32/221 [00:07<00:25,  7.34it/s][A[h264 @ 0x563546070c00] mmco: unref short failure
[h264 @ 0x563546070c00] mmco: unref short failure

 15%|█▍        | 33/221 [00:07<00:42,  4.39it/s][A
 15%|█▌        | 34/221 [00:08<00:45,  4.08it/s][A
 16%|█▌        | 35/221 [00:08<00:47,  3.94it/s][A
 16%|█▋        | 36/221 [00:08<00:51,  3.59it/s][A
 17%|█▋        | 37/221 [00:09<01:06,  2.77it/s][A
 17%|█▋        | 38/221 [00:09<01:02,  2.93it/s][A
 18%|█▊        | 39/221 [00:09<00:50,  3.64it/s][A
 18%|█▊        | 40/221 [00:10<00:47,  3.79it/s][A
 19%|█▊        | 41/221 [00:10<00:41,  4.37it/s][A
 19%|█▉        | 42/221 [00:11<01:30,  1.98it/s][A
 19%|█▉        | 43/221 [00:11<01:10,  2.53it/s][A
 20%|█▉        | 44/221 [00:11<00:57,  3.10it/s][A
 20%|██        | 45/221 [00:12<01:22,  2.13it/s][A
 21%|██        | 46/221 [00:13<01:34,  1.85it/s][A[h264 @ 0x5556d31d7180] mmco: unref short failure
[h264 @ 0x5556d31d7180] mmco: unref short failure

 21%|██▏       | 47/221 [00:15<03:01,  1.04s/it][A
 22%|██▏       | 48/221 [00:15<02:13,  1.29it/s][A
 22%|██▏       | 49/221 [00:15<01:39,  1.73it/s][A
 23%|██▎       | 50/221 [00:15<01:15,  2.27it/s][A
 23%|██▎       | 51/221 [00:15<00:58,  2.89it/s][A
 24%|██▎       | 52/221 [00:16<00:50,  3.37it/s][A
 24%|██▍       | 53/221 [00:16<00:43,  3.85it/s][A
 24%|██▍       | 54/221 [00:17<01:20,  2.07it/s][A
 25%|██▍       | 55/221 [00:17<01:08,  2.44it/s][A
 25%|██▌       | 56/221 [00:17<00:55,  2.97it/s][A
 26%|██▌       | 57/221 [00:18<01:01,  2.68it/s][A[h264 @ 0x55863c83ae40] mmco: unref short failure

 26%|██▌       | 58/221 [00:18<00:48,  3.40it/s][A
 27%|██▋       | 59/221 [00:18<00:40,  4.01it/s][A
 27%|██▋       | 60/221 [00:18<00:42,  3.78it/s][A
 28%|██▊       | 61/221 [00:18<00:39,  4.01it/s][A
 28%|██▊       | 62/221 [00:19<00:33,  4.70it/s][A
 29%|██▊       | 63/221 [00:19<00:29,  5.36it/s][A
 29%|██▉       | 64/221 [00:19<00:25,  6.19it/s][A
 29%|██▉       | 65/221 [00:19<00:23,  6.65it/s][A
 30%|██▉       | 66/221 [00:19<00:42,  3.64it/s][A
 30%|███       | 67/221 [00:20<00:37,  4.06it/s][A[h264 @ 0x55865080ea00] mmco: unref short failure

 31%|███       | 68/221 [00:20<00:38,  3.97it/s][A
 31%|███       | 69/221 [00:20<00:51,  2.98it/s][A
 32%|███▏      | 70/221 [00:21<00:43,  3.48it/s][A
 32%|███▏      | 71/221 [00:25<03:55,  1.57s/it][A
 33%|███▎      | 72/221 [00:25<02:54,  1.17s/it][A
 33%|███▎      | 73/221 [00:26<02:16,  1.08it/s][A
 33%|███▎      | 74/221 [00:26<01:40,  1.46it/s][A
 34%|███▍      | 75/221 [00:26<01:21,  1.79it/s][A
 34%|███▍      | 76/221 [00:26<01:11,  2.04it/s][A
 35%|███▍      | 77/221 [00:27<01:03,  2.28it/s][A[h264 @ 0x5586331f9100] mmco: unref short failure

 35%|███▌      | 78/221 [00:27<00:54,  2.61it/s][A
 36%|███▌      | 79/221 [00:28<01:16,  1.85it/s][A
 36%|███▌      | 80/221 [00:28<01:02,  2.26it/s][A
 37%|███▋      | 81/221 [00:28<00:50,  2.76it/s][A
 37%|███▋      | 82/221 [00:29<00:44,  3.10it/s][A
 38%|███▊      | 83/221 [00:29<00:36,  3.78it/s][A
 38%|███▊      | 84/221 [00:29<00:36,  3.77it/s][A
 39%|███▉      | 86/221 [00:29<00:26,  5.18it/s][A
 39%|███▉      | 87/221 [00:30<00:32,  4.09it/s][A
 40%|███▉      | 88/221 [00:30<00:34,  3.86it/s][A[h264 @ 0x5586515a6680] mmco: unref short failure
[h264 @ 0x557721611b80] mmco: unref short failure
[h264 @ 0x557721611b80] mmco: unref short failure
[h264 @ 0x557721611b80] mmco: unref short failure
[h264 @ 0x557721611b80] mmco: unref short failure

 40%|████      | 89/221 [00:34<02:43,  1.24s/it][A
 41%|████      | 90/221 [00:34<02:05,  1.04it/s][A
 41%|████      | 91/221 [00:34<01:37,  1.33it/s][A
 42%|████▏     | 92/221 [00:34<01:16,  1.69it/s][A
 42%|████▏     | 93/221 [00:35<01:23,  1.53it/s][A
 43%|████▎     | 94/221 [00:36<01:21,  1.56it/s][A
 43%|████▎     | 95/221 [00:36<01:02,  2.01it/s][A
 43%|████▎     | 96/221 [00:36<00:51,  2.43it/s][A
 44%|████▍     | 97/221 [00:36<00:40,  3.09it/s][A
 44%|████▍     | 98/221 [00:37<00:35,  3.44it/s][A
 45%|████▍     | 99/221 [00:37<00:29,  4.07it/s][A
 45%|████▌     | 100/221 [00:37<00:28,  4.21it/s][A
 46%|████▌     | 101/221 [00:37<00:34,  3.44it/s][A
 46%|████▌     | 102/221 [00:38<00:38,  3.12it/s][A
 47%|████▋     | 103/221 [00:38<00:31,  3.70it/s][A
 47%|████▋     | 104/221 [00:38<00:25,  4.54it/s][A
 48%|████▊     | 105/221 [00:38<00:27,  4.24it/s][A
 48%|████▊     | 106/221 [00:39<00:38,  2.95it/s][A
 48%|████▊     | 107/221 [00:39<00:30,  3.69it/s][A
 49%|████▉     | 108/221 [00:39<00:29,  3.87it/s][A
 49%|████▉     | 109/221 [00:39<00:27,  4.11it/s][A
 50%|████▉     | 110/221 [00:40<00:27,  4.07it/s][A
 50%|█████     | 111/221 [00:40<00:32,  3.36it/s][A
 51%|█████     | 112/221 [00:40<00:28,  3.77it/s][A
 51%|█████     | 113/221 [00:41<00:32,  3.29it/s][A
 52%|█████▏    | 114/221 [00:41<00:25,  4.12it/s][A
 52%|█████▏    | 115/221 [00:41<00:21,  4.84it/s][A[h264 @ 0x55568bf8eb40] mmco: unref short failure

 52%|█████▏    | 116/221 [00:46<02:53,  1.66s/it][A
 53%|█████▎    | 117/221 [00:46<02:09,  1.25s/it][A
 53%|█████▎    | 118/221 [00:46<01:37,  1.06it/s][A
 54%|█████▍    | 119/221 [00:47<01:11,  1.42it/s][A
 54%|█████▍    | 120/221 [00:47<00:56,  1.79it/s][A
 55%|█████▍    | 121/221 [00:47<00:44,  2.27it/s][A
 55%|█████▌    | 122/221 [00:47<00:37,  2.67it/s][A
 56%|█████▌    | 123/221 [00:47<00:29,  3.29it/s][A
 56%|█████▌    | 124/221 [00:47<00:25,  3.81it/s][A
 57%|█████▋    | 125/221 [00:48<00:25,  3.78it/s][A
 57%|█████▋    | 126/221 [00:49<00:51,  1.83it/s][A
 57%|█████▋    | 127/221 [00:49<00:46,  2.01it/s][A
 58%|█████▊    | 128/221 [00:50<00:54,  1.72it/s][A
 58%|█████▊    | 129/221 [00:50<00:46,  1.99it/s][A
 59%|█████▉    | 130/221 [00:51<00:36,  2.46it/s][A
 59%|█████▉    | 131/221 [00:51<00:31,  2.86it/s][A
 60%|█████▉    | 132/221 [00:51<00:31,  2.84it/s][A
 60%|██████    | 133/221 [00:52<00:31,  2.76it/s][A
 61%|██████    | 134/221 [00:52<00:27,  3.13it/s][A
 61%|██████    | 135/221 [00:52<00:27,  3.11it/s][A
 62%|██████▏   | 136/221 [00:53<00:31,  2.68it/s][A
 62%|██████▏   | 137/221 [00:53<00:32,  2.61it/s][A
 62%|██████▏   | 138/221 [00:53<00:34,  2.41it/s][A
 63%|██████▎   | 139/221 [00:54<00:34,  2.40it/s][A[h264 @ 0x5577364ee680] mmco: unref short failure
[h264 @ 0x5577364ee680] mmco: unref short failure

 63%|██████▎   | 140/221 [00:54<00:30,  2.63it/s][A
 64%|██████▍   | 141/221 [00:54<00:28,  2.82it/s][A
 64%|██████▍   | 142/221 [00:55<00:28,  2.76it/s][A
 65%|██████▍   | 143/221 [00:55<00:27,  2.85it/s][A
 65%|██████▌   | 144/221 [00:55<00:22,  3.50it/s][A
 66%|██████▌   | 146/221 [00:56<00:15,  4.92it/s][A
 67%|██████▋   | 147/221 [00:56<00:13,  5.42it/s][A
 67%|██████▋   | 148/221 [00:56<00:15,  4.72it/s][A
 68%|██████▊   | 150/221 [00:56<00:12,  5.50it/s][A
 68%|██████▊   | 151/221 [00:57<00:23,  2.99it/s][A
 69%|██████▉   | 152/221 [00:57<00:22,  3.00it/s][A
 69%|██████▉   | 153/221 [00:58<00:22,  2.98it/s][A
 70%|██████▉   | 154/221 [00:59<00:31,  2.14it/s][A
 70%|███████   | 155/221 [00:59<00:24,  2.69it/s][A
 71%|███████   | 156/221 [00:59<00:19,  3.34it/s][A
 71%|███████   | 157/221 [01:04<01:43,  1.61s/it][A
 71%|███████▏  | 158/221 [01:04<01:14,  1.18s/it][A
 72%|███████▏  | 159/221 [01:04<00:54,  1.13it/s][A
 72%|███████▏  | 160/221 [01:04<00:42,  1.44it/s][A[h264 @ 0x5556cf791d40] mmco: unref short failure
[h264 @ 0x5556cf791d40] mmco: unref short failure
[h264 @ 0x5556cf791d40] mmco: unref short failure
[h264 @ 0x5556cf791d40] mmco: unref short failure
[h264 @ 0x5556cf791d40] mmco: unref short failure
[h264 @ 0x5556cf791d40] mmco: unref short failure

 73%|███████▎  | 162/221 [01:04<00:25,  2.33it/s][A
 74%|███████▍  | 163/221 [01:05<00:20,  2.78it/s][A
 74%|███████▍  | 164/221 [01:05<00:18,  3.10it/s][A
 75%|███████▍  | 165/221 [01:05<00:16,  3.50it/s][A
 75%|███████▌  | 166/221 [01:05<00:17,  3.08it/s][A
 76%|███████▌  | 167/221 [01:06<00:14,  3.76it/s][A
 76%|███████▌  | 168/221 [01:09<01:00,  1.14s/it][A
 76%|███████▋  | 169/221 [01:09<00:47,  1.10it/s][A
 77%|███████▋  | 170/221 [01:09<00:37,  1.37it/s][A
 77%|███████▋  | 171/221 [01:10<00:28,  1.79it/s][A
 78%|███████▊  | 172/221 [01:10<00:21,  2.25it/s][A[h264 @ 0x563556311f40] mmco: unref short failure

 78%|███████▊  | 173/221 [01:10<00:17,  2.79it/s][A
 79%|███████▉  | 175/221 [01:10<00:11,  3.86it/s][A
 80%|███████▉  | 176/221 [01:11<00:11,  3.80it/s][A
 80%|████████  | 177/221 [01:11<00:10,  4.33it/s][A
 81%|████████  | 178/221 [01:11<00:10,  4.23it/s][A
 81%|████████  | 179/221 [01:12<00:24,  1.71it/s][A
 82%|████████▏ | 181/221 [01:13<00:15,  2.65it/s][A
 82%|████████▏ | 182/221 [01:13<00:12,  3.10it/s][A
 83%|████████▎ | 183/221 [01:13<00:10,  3.57it/s][A
 83%|████████▎ | 184/221 [01:13<00:10,  3.60it/s][A
 84%|████████▍ | 186/221 [01:14<00:07,  4.43it/s][A
 85%|████████▍ | 187/221 [01:14<00:06,  4.98it/s][A
 85%|████████▌ | 188/221 [01:14<00:06,  4.82it/s][A[h264 @ 0x558644079180] mmco: unref short failure

 86%|████████▌ | 189/221 [01:14<00:08,  3.85it/s][A
 86%|████████▌ | 190/221 [01:15<00:08,  3.77it/s][A
 87%|████████▋ | 192/221 [01:15<00:06,  4.64it/s][A
 88%|████████▊ | 194/221 [01:16<00:09,  2.77it/s][A
 88%|████████▊ | 195/221 [01:16<00:08,  3.24it/s][A
 89%|████████▉ | 197/221 [01:16<00:05,  4.39it/s][A
 90%|████████▉ | 198/221 [01:17<00:04,  4.68it/s][A
 90%|█████████ | 199/221 [01:17<00:05,  4.23it/s][A
 90%|█████████ | 200/221 [01:17<00:06,  3.47it/s][A
 91%|█████████ | 201/221 [01:18<00:05,  3.43it/s][A
 91%|█████████▏| 202/221 [01:18<00:04,  4.00it/s][A
 92%|█████████▏| 203/221 [01:18<00:04,  4.13it/s][A
 93%|█████████▎| 205/221 [01:18<00:02,  5.46it/s][A
 93%|█████████▎| 206/221 [01:18<00:02,  5.15it/s][A
 94%|█████████▍| 208/221 [01:19<00:01,  6.50it/s][A
 95%|█████████▌| 210/221 [01:19<00:01,  7.69it/s][A
 95%|█████████▌| 211/221 [01:19<00:02,  4.43it/s][A
 96%|█████████▌| 212/221 [01:20<00:01,  4.59it/s][A
 97%|█████████▋| 214/221 [01:21<00:02,  2.63it/s][A
 97%|█████████▋| 215/221 [01:21<00:02,  2.89it/s][A
 98%|█████████▊| 216/221 [01:21<00:01,  3.27it/s][A
 98%|█████████▊| 217/221 [01:22<00:02,  1.97it/s][A
 99%|█████████▊| 218/221 [01:23<00:01,  1.76it/s][A
 99%|█████████▉| 219/221 [01:23<00:00,  2.14it/s][A
100%|█████████▉| 220/221 [01:28<00:01,  1.74s/it][A
100%|██████████| 221/221 [01:28<00:00,  1.28s/it][A100%|██████████| 221/221 [01:28<00:00,  2.49it/s]
[h264 @ 0x5635416fd780] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:21,  2.71it/s][A
  1%|          | 2/221 [00:00<01:12,  3.00it/s][A
  1%|▏         | 3/221 [00:00<01:08,  3.17it/s][A
  2%|▏         | 4/221 [00:01<01:07,  3.22it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.28it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.32it/s][A[h264 @ 0x55863b20a600] mmco: unref short failure

  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A[h264 @ 0x56355f7f78c0] mmco: unref short failure

  4%|▎         | 8/221 [00:02<01:04,  3.29it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.31it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.26it/s][A09/17/2024 08:47:29 - INFO - __main__ -   current idx X5zUC2bqWt4.23 from finetune_area returns wrong image/video, use 35067 instead.

  5%|▍         | 11/221 [00:03<01:03,  3.30it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.29it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.32it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.35it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.34it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.35it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.36it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.34it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.33it/s][A
 10%|▉         | 21/221 [00:06<01:01,  3.28it/s][A
 10%|▉         | 22/221 [00:06<01:00,  3.32it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.35it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.33it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.31it/s][A
 12%|█▏        | 27/221 [00:08<00:58,  3.31it/s][A[h264 @ 0x5586379a0140] mmco: unref short failure
[h264 @ 0x5586379a0140] mmco: unref short failure

 13%|█▎        | 28/221 [00:08<00:57,  3.33it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.35it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.31it/s][A[h264 @ 0x563545ccacc0] mmco: unref short failure

 14%|█▍        | 32/221 [00:09<00:56,  3.34it/s][A
 15%|█▍        | 33/221 [00:10<00:56,  3.31it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.24it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.29it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.32it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.29it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.31it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.33it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.35it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 43/221 [00:13<00:53,  3.33it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.36it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.37it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.34it/s][A
 21%|██▏       | 47/221 [00:14<00:52,  3.33it/s][A
 22%|██▏       | 48/221 [00:14<00:52,  3.29it/s][A
 22%|██▏       | 49/221 [00:14<00:51,  3.32it/s][A
 23%|██▎       | 50/221 [00:15<00:51,  3.35it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.36it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.31it/s][A
 24%|██▍       | 53/221 [00:16<00:50,  3.30it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.33it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.35it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.37it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.38it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.39it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.38it/s][A
 27%|██▋       | 60/221 [00:18<00:47,  3.39it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.38it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.39it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.39it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.40it/s][A
 29%|██▉       | 65/221 [00:19<00:46,  3.39it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.39it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.40it/s][A
 31%|███       | 68/221 [00:20<00:45,  3.40it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.40it/s][A
 32%|███▏      | 70/221 [00:21<00:44,  3.40it/s][A
 32%|███▏      | 71/221 [00:21<00:44,  3.40it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.40it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.39it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.39it/s][A
 34%|███▍      | 75/221 [00:22<00:43,  3.34it/s][A
 34%|███▍      | 76/221 [00:22<00:43,  3.36it/s][A[h264 @ 0x563546ecbe00] mmco: unref short failure

 35%|███▍      | 77/221 [00:23<00:42,  3.37it/s][A
 35%|███▌      | 78/221 [00:23<00:42,  3.36it/s][A
 36%|███▌      | 79/221 [00:23<00:42,  3.36it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.37it/s][A
 37%|███▋      | 81/221 [00:24<00:41,  3.38it/s][A
 37%|███▋      | 82/221 [00:24<00:41,  3.37it/s][A
 38%|███▊      | 83/221 [00:24<00:41,  3.35it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.36it/s][A
 38%|███▊      | 85/221 [00:25<00:40,  3.37it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.38it/s][A
 39%|███▉      | 87/221 [00:26<00:39,  3.39it/s][A
 40%|███▉      | 88/221 [00:26<00:39,  3.39it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.40it/s][A[h264 @ 0x5635451e6b00] mmco: unref short failure
[h264 @ 0x5635451e6b00] mmco: unref short failure

 41%|████      | 90/221 [00:26<00:38,  3.40it/s][A
 41%|████      | 91/221 [00:27<00:38,  3.41it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.41it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.41it/s][A
 43%|████▎     | 94/221 [00:28<00:37,  3.41it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.41it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.41it/s][A
 44%|████▍     | 98/221 [00:29<00:36,  3.41it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.41it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:31<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.41it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:35<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:36<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:38<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:40<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:43<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:45<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:47<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:50<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:52<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:54<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:59<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:01<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:02<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:04<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.39it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.43it/s][A
  1%|          | 2/221 [00:00<00:49,  4.44it/s][A
  1%|▏         | 3/221 [00:00<00:58,  3.72it/s][A
  2%|▏         | 4/221 [00:00<00:51,  4.25it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.61it/s][A
  3%|▎         | 6/221 [00:01<00:44,  4.86it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.13it/s][A
  4%|▎         | 8/221 [00:01<01:00,  3.55it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.40it/s][A
  5%|▍         | 10/221 [00:02<00:54,  3.84it/s][A
  5%|▍         | 11/221 [00:02<00:53,  3.90it/s][A
  5%|▌         | 12/221 [00:02<00:49,  4.23it/s][A
  6%|▌         | 13/221 [00:03<01:22,  2.52it/s][A
  6%|▋         | 14/221 [00:03<01:13,  2.82it/s][A
  7%|▋         | 15/221 [00:04<01:13,  2.80it/s][A
  7%|▋         | 16/221 [00:04<01:14,  2.74it/s][A
  8%|▊         | 17/221 [00:05<01:23,  2.46it/s][A
  8%|▊         | 18/221 [00:05<01:19,  2.56it/s][A
  9%|▉         | 20/221 [00:05<00:55,  3.62it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.00it/s][A
 10%|▉         | 22/221 [00:06<00:47,  4.21it/s][A
 10%|█         | 23/221 [00:06<00:43,  4.56it/s][A
 11%|█         | 24/221 [00:06<00:42,  4.65it/s][A
 11%|█▏        | 25/221 [00:06<00:49,  3.94it/s][A
 12%|█▏        | 26/221 [00:07<00:48,  4.00it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  3.98it/s][A
 13%|█▎        | 28/221 [00:07<00:48,  3.97it/s][A
 13%|█▎        | 29/221 [00:08<00:51,  3.70it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.64it/s][A
 14%|█▍        | 31/221 [00:08<00:51,  3.72it/s][A
 14%|█▍        | 32/221 [00:08<00:46,  4.06it/s][A
 15%|█▍        | 33/221 [00:09<00:49,  3.79it/s][A
 15%|█▌        | 34/221 [00:09<01:00,  3.10it/s][A
 16%|█▌        | 35/221 [00:09<00:57,  3.25it/s][A
 16%|█▋        | 36/221 [00:10<00:58,  3.16it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.46it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:10<00:54,  3.33it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.39it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.40it/s][A
 19%|█▉        | 42/221 [00:11<00:47,  3.77it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.35it/s][A
 20%|█▉        | 44/221 [00:12<00:59,  2.98it/s][A
 20%|██        | 45/221 [00:12<01:05,  2.69it/s][A
 21%|██        | 46/221 [00:13<01:03,  2.74it/s][A
 21%|██▏       | 47/221 [00:13<00:58,  2.96it/s][A
 22%|██▏       | 48/221 [00:13<00:49,  3.47it/s][A
 23%|██▎       | 50/221 [00:14<00:43,  3.95it/s][A
 23%|██▎       | 51/221 [00:14<00:42,  4.00it/s][A
 24%|██▍       | 53/221 [00:15<00:45,  3.72it/s][A
 24%|██▍       | 54/221 [00:15<00:44,  3.75it/s][A
 25%|██▍       | 55/221 [00:15<00:51,  3.25it/s][A
 25%|██▌       | 56/221 [00:16<00:53,  3.07it/s][A
 26%|██▌       | 57/221 [00:16<00:52,  3.10it/s][A
 26%|██▌       | 58/221 [00:16<00:46,  3.47it/s][A
 27%|██▋       | 59/221 [00:16<00:45,  3.57it/s][A
 27%|██▋       | 60/221 [00:17<00:40,  3.99it/s][A
 28%|██▊       | 61/221 [00:17<00:39,  4.05it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.84it/s][A
 29%|██▉       | 64/221 [00:17<00:32,  4.82it/s][A
 29%|██▉       | 65/221 [00:18<00:33,  4.67it/s][A
 30%|██▉       | 66/221 [00:18<00:41,  3.71it/s][A
 30%|███       | 67/221 [00:18<00:46,  3.29it/s][A
 31%|███       | 68/221 [00:19<00:46,  3.32it/s][A
 31%|███       | 69/221 [00:19<01:01,  2.46it/s][A
 32%|███▏      | 70/221 [00:20<00:58,  2.56it/s][A
 32%|███▏      | 71/221 [00:20<00:57,  2.59it/s][A
 33%|███▎      | 72/221 [00:21<00:57,  2.59it/s][A
 33%|███▎      | 73/221 [00:21<00:52,  2.79it/s][A
 33%|███▎      | 74/221 [00:21<00:47,  3.07it/s][A
 34%|███▍      | 75/221 [00:21<00:44,  3.31it/s][A
 34%|███▍      | 76/221 [00:22<00:39,  3.70it/s][A
 35%|███▍      | 77/221 [00:22<00:34,  4.14it/s][A
 35%|███▌      | 78/221 [00:22<00:37,  3.83it/s][A
 36%|███▌      | 79/221 [00:22<00:39,  3.60it/s][A
 36%|███▌      | 80/221 [00:22<00:33,  4.22it/s][A
 37%|███▋      | 81/221 [00:23<00:31,  4.40it/s][A
 37%|███▋      | 82/221 [00:23<00:42,  3.28it/s][A
 38%|███▊      | 84/221 [00:24<00:44,  3.09it/s][A
 38%|███▊      | 85/221 [00:24<00:44,  3.05it/s][A
 39%|███▉      | 86/221 [00:25<00:47,  2.83it/s][A
 39%|███▉      | 87/221 [00:25<00:48,  2.74it/s][A
 40%|███▉      | 88/221 [00:25<00:44,  3.00it/s][A
 40%|████      | 89/221 [00:26<00:43,  3.02it/s][A
 41%|████      | 90/221 [00:26<00:53,  2.45it/s][A
 41%|████      | 91/221 [00:26<00:46,  2.81it/s][A
 42%|████▏     | 92/221 [00:27<00:47,  2.72it/s][A
 42%|████▏     | 93/221 [00:27<00:51,  2.48it/s][A
 43%|████▎     | 94/221 [00:28<00:46,  2.72it/s][A
 43%|████▎     | 95/221 [00:28<00:53,  2.34it/s][A
 43%|████▎     | 96/221 [00:29<00:54,  2.30it/s][A
 44%|████▍     | 97/221 [00:29<00:50,  2.47it/s][A
 44%|████▍     | 98/221 [00:29<00:49,  2.47it/s][A
 45%|████▍     | 99/221 [00:30<00:45,  2.69it/s][A
 45%|████▌     | 100/221 [00:30<00:38,  3.13it/s][A
 46%|████▌     | 101/221 [00:30<00:32,  3.67it/s][A
 46%|████▌     | 102/221 [00:30<00:33,  3.54it/s][A
 47%|████▋     | 103/221 [00:31<00:31,  3.71it/s][A
 47%|████▋     | 104/221 [00:31<00:27,  4.28it/s][A
 48%|████▊     | 105/221 [00:31<00:31,  3.68it/s][A
 48%|████▊     | 106/221 [00:31<00:37,  3.06it/s][A
 48%|████▊     | 107/221 [00:32<00:34,  3.28it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.74it/s][A
 49%|████▉     | 109/221 [00:32<00:28,  3.96it/s][A
 50%|████▉     | 110/221 [00:32<00:29,  3.72it/s][A
 50%|█████     | 111/221 [00:33<00:30,  3.65it/s][A
 51%|█████     | 112/221 [00:33<00:29,  3.64it/s][A
 51%|█████     | 113/221 [00:33<00:29,  3.61it/s][A
 52%|█████▏    | 114/221 [00:33<00:26,  4.04it/s][A
 52%|█████▏    | 115/221 [00:34<00:23,  4.59it/s][A
 52%|█████▏    | 116/221 [00:34<00:24,  4.37it/s][A
 53%|█████▎    | 117/221 [00:34<00:24,  4.30it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.77it/s][A
 54%|█████▍    | 119/221 [00:35<00:31,  3.28it/s][A
 54%|█████▍    | 120/221 [00:35<00:35,  2.87it/s][A
 55%|█████▍    | 121/221 [00:36<00:34,  2.88it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.24it/s][A
 56%|█████▌    | 123/221 [00:36<00:33,  2.92it/s][A
 56%|█████▌    | 124/221 [00:37<00:33,  2.86it/s][A
 57%|█████▋    | 125/221 [00:37<00:38,  2.52it/s][A
 57%|█████▋    | 126/221 [00:37<00:35,  2.69it/s][A
 57%|█████▋    | 127/221 [00:38<00:35,  2.64it/s][A
 58%|█████▊    | 128/221 [00:38<00:31,  2.93it/s][A
 58%|█████▊    | 129/221 [00:38<00:27,  3.38it/s][A
 59%|█████▉    | 130/221 [00:39<00:25,  3.61it/s][A
 59%|█████▉    | 131/221 [00:39<00:26,  3.44it/s][A
 60%|█████▉    | 132/221 [00:39<00:23,  3.76it/s][A
 60%|██████    | 133/221 [00:40<00:27,  3.18it/s][A
 61%|██████    | 134/221 [00:40<00:31,  2.80it/s][A
 61%|██████    | 135/221 [00:40<00:26,  3.24it/s][A
 62%|██████▏   | 136/221 [00:40<00:26,  3.20it/s][A
 62%|██████▏   | 137/221 [00:41<00:24,  3.48it/s][A
 62%|██████▏   | 138/221 [00:41<00:22,  3.62it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.15it/s][A
 63%|██████▎   | 140/221 [00:42<00:22,  3.54it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.90it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.31it/s][A
 65%|██████▍   | 143/221 [00:43<00:24,  3.25it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.32it/s][A
 66%|██████▌   | 145/221 [00:43<00:27,  2.75it/s][A
 66%|██████▌   | 146/221 [00:44<00:24,  3.00it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.49it/s][A
 67%|██████▋   | 148/221 [00:44<00:25,  2.90it/s][A
 67%|██████▋   | 149/221 [00:45<00:22,  3.26it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.30it/s][A
 68%|██████▊   | 151/221 [00:45<00:23,  3.01it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.23it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.44it/s][A
 70%|██████▉   | 154/221 [00:47<00:26,  2.51it/s][A
 70%|███████   | 155/221 [00:47<00:24,  2.68it/s][A
 71%|███████   | 156/221 [00:47<00:21,  3.02it/s][A
 71%|███████   | 157/221 [00:47<00:20,  3.19it/s][A
 71%|███████▏  | 158/221 [00:48<00:21,  2.91it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.08it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.37it/s][A
 73%|███████▎  | 161/221 [00:49<00:15,  3.96it/s][A
 73%|███████▎  | 162/221 [00:49<00:12,  4.55it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.49it/s][A
 74%|███████▍  | 164/221 [00:49<00:11,  4.83it/s][A
 75%|███████▍  | 165/221 [00:49<00:15,  3.69it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.31it/s][A
 76%|███████▌  | 167/221 [00:50<00:13,  3.97it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.68it/s][A
 77%|███████▋  | 170/221 [00:51<00:13,  3.79it/s][A
 77%|███████▋  | 171/221 [00:51<00:13,  3.74it/s][A
 78%|███████▊  | 172/221 [00:51<00:13,  3.57it/s][A
 78%|███████▊  | 173/221 [00:52<00:14,  3.35it/s][A
 79%|███████▊  | 174/221 [00:52<00:16,  2.89it/s][A
 79%|███████▉  | 175/221 [00:53<00:15,  2.95it/s][A
 80%|███████▉  | 176/221 [00:53<00:12,  3.52it/s][A
 80%|████████  | 177/221 [00:53<00:12,  3.61it/s][A
 81%|████████  | 178/221 [00:54<00:17,  2.52it/s][A
 81%|████████  | 179/221 [00:54<00:14,  2.82it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.29it/s][A
 82%|████████▏ | 181/221 [00:55<00:15,  2.51it/s][A
 82%|████████▏ | 182/221 [00:55<00:13,  2.84it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  2.96it/s][A
 83%|████████▎ | 184/221 [00:56<00:12,  3.02it/s][A
 84%|████████▎ | 185/221 [00:56<00:09,  3.80it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.34it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.69it/s][A
 85%|████████▌ | 188/221 [00:57<00:10,  3.24it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.50it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.29it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.55it/s][A
 87%|████████▋ | 192/221 [00:58<00:07,  4.03it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.64it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.32it/s][A
 88%|████████▊ | 195/221 [00:59<00:06,  3.74it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.33it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.17it/s][A
 90%|████████▉ | 198/221 [01:00<00:07,  3.10it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.47it/s][A
 90%|█████████ | 200/221 [01:00<00:05,  3.53it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.87it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.57it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  3.80it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.52it/s][A
 93%|█████████▎| 205/221 [01:02<00:05,  3.13it/s][A
 93%|█████████▎| 206/221 [01:02<00:06,  2.49it/s][A
 94%|█████████▎| 207/221 [01:03<00:05,  2.54it/s][A
 94%|█████████▍| 208/221 [01:03<00:04,  3.14it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.36it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.14it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.54it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.63it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  2.90it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.72it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.70it/s][A
 98%|█████████▊| 217/221 [01:06<00:01,  2.93it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.08it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.09it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.48it/s][A
100%|██████████| 221/221 [01:07<00:00,  3.31it/s][A100%|██████████| 221/221 [01:07<00:00,  3.29it/s]
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'area_r1': 39.4, 'area_recall': '39.4/64.5/72.9', 'area_ravg': 58.9}
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'forward_r1': 37.9, 'forward_recall': '37.9/67.3/77.3', 'forward_ravg': 60.8}
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'area_video_r1': 38.3, 'area_video_recall': '38.3/68.1/77.9', 'area_video_ravg': 61.5}
09/17/2024 08:49:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 08:49:40 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 08:49:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 08:49:40 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'video_r1': 36.7, 'video_recall': '36.7/64.5/73.6', 'video_ravg': 58.3}
09/17/2024 08:49:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 08:49:40 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 08:49:40 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1399--===========

09/17/2024 08:49:40 - INFO - __main__ -   {'video_r1': 52.5, 'video_recall': '52.5/74.7/81.2', 'video_ravg': 69.5}
09/17/2024 08:49:40 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 08:49:40 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 08:50:09 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007910363376140594, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0696837902069092, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.2171268463134766, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2947211265563965}
[h264 @ 0x55863a5ba1c0] mmco: unref short failure
[h264 @ 0x55863a5ba1c0] mmco: unref short failure
 48%|████▊     | 1400/2910 [8:54:13<57:44:18, 137.65s/it][h264 @ 0x55568bf8eb40] mmco: unref short failure
[h264 @ 0x55568bf8eb40] mmco: unref short failure
 48%|████▊     | 1401/2910 [8:54:17<40:52:22, 97.51s/it] [h264 @ 0x5586331f9300] mmco: unref short failure
 48%|████▊     | 1402/2910 [8:54:21<29:10:25, 69.65s/it] 48%|████▊     | 1403/2910 [8:54:27<21:05:30, 50.39s/it][h264 @ 0x55568d4fb4c0] mmco: unref short failure
 48%|████▊     | 1404/2910 [8:54:33<15:28:28, 36.99s/it][h264 @ 0x55863f461940] mmco: unref short failure
[h264 @ 0x55863f461940] mmco: unref short failure
[h264 @ 0x5556c5e1f9c0] mmco: unref short failure
[h264 @ 0x5556c5e1f9c0] mmco: unref short failure
[h264 @ 0x563540e43080] mmco: unref short failure
[h264 @ 0x563540e43080] mmco: unref short failure
[h264 @ 0x563540e43080] mmco: unref short failure
[h264 @ 0x563540e43080] mmco: unref short failure
[h264 @ 0x563540e43080] mmco: unref short failure
[h264 @ 0x5635443a8180] mmco: unref short failure
[h264 @ 0x5635443a8180] mmco: unref short failure
 48%|████▊     | 1405/2910 [8:54:38<11:32:31, 27.61s/it][h264 @ 0x5576df83cb00] mmco: unref short failure
[h264 @ 0x5576df83cb00] mmco: unref short failure
[h264 @ 0x558634c952c0] mmco: unref short failure
[h264 @ 0x558634c952c0] mmco: unref short failure
 48%|████▊     | 1406/2910 [8:54:45<8:54:41, 21.33s/it] [h264 @ 0x5635631e6cc0] mmco: unref short failure
[h264 @ 0x5635631e6cc0] mmco: unref short failure
[h264 @ 0x5556c9b53dc0] mmco: unref short failure
 48%|████▊     | 1407/2910 [8:54:52<7:09:12, 17.13s/it][h264 @ 0x558641f959c0] mmco: unref short failure
[h264 @ 0x558641f959c0] mmco: unref short failure
[h264 @ 0x558641f959c0] mmco: unref short failure
[h264 @ 0x558641f959c0] mmco: unref short failure
[h264 @ 0x56355f7f78c0] mmco: unref short failure
[h264 @ 0x56355f7f78c0] mmco: unref short failure
 48%|████▊     | 1408/2910 [8:54:59<5:47:43, 13.89s/it] 48%|████▊     | 1409/2910 [8:55:06<4:55:03, 11.79s/it][h264 @ 0x5556d5de6d80] mmco: unref short failure
 48%|████▊     | 1410/2910 [8:55:12<4:14:03, 10.16s/it][h264 @ 0x5586552cd5c0] mmco: unref short failure
[h264 @ 0x563540bca540] mmco: unref short failure
[h264 @ 0x5576deb64180] mmco: unref short failure
 48%|████▊     | 1411/2910 [8:55:18<3:45:03,  9.01s/it][h264 @ 0x56354a6c5b00] mmco: unref short failure
[h264 @ 0x56354a6c5b00] mmco: unref short failure
 49%|████▊     | 1412/2910 [8:55:24<3:23:24,  8.15s/it] 49%|████▊     | 1413/2910 [8:55:31<3:11:49,  7.69s/it][h264 @ 0x55771cff6a00] mmco: unref short failure
09/17/2024 08:51:31 - INFO - __main__ -   current idx hI-_iZaM-ZY.36 from finetune_area returns wrong image/video, use 141131 instead.
[h264 @ 0x55773150ec00] mmco: unref short failure
[h264 @ 0x55773150ec00] mmco: unref short failure
 49%|████▊     | 1414/2910 [8:55:38<3:08:14,  7.55s/it] 49%|████▊     | 1415/2910 [8:55:45<3:03:18,  7.36s/it][h264 @ 0x5586335855c0] mmco: unref short failure
[h264 @ 0x5586335855c0] mmco: unref short failure
[h264 @ 0x55771c836b80] mmco: unref short failure
[h264 @ 0x5586348416c0] mmco: unref short failure
[h264 @ 0x558632130dc0] mmco: unref short failure
[h264 @ 0x5576e05b1d00] mmco: unref short failure
[h264 @ 0x5556cac2d9c0] mmco: unref short failure
[h264 @ 0x55863f54fa40] mmco: unref short failure
 49%|████▊     | 1416/2910 [8:56:24<6:57:57, 16.79s/it][h264 @ 0x558632a1cd80] mmco: unref short failure
[h264 @ 0x558632a1cd80] mmco: unref short failure
[h264 @ 0x563546ce0140] mmco: unref short failure
 49%|████▊     | 1417/2910 [8:56:39<6:44:09, 16.24s/it] 49%|████▊     | 1418/2910 [8:56:46<5:33:57, 13.43s/it][h264 @ 0x563560ce0cc0] mmco: unref short failure
[h264 @ 0x563560ce0cc0] mmco: unref short failure
 49%|████▉     | 1419/2910 [8:56:54<4:53:26, 11.81s/it][h264 @ 0x55864c7d5640] mmco: unref short failure
[h264 @ 0x563559f51140] mmco: unref short failure
[h264 @ 0x55863714b700] mmco: unref short failure
[h264 @ 0x55863714b700] mmco: unref short failure
09/17/2024 08:52:59 - INFO - __main__ -   current idx 6oFC5O_u-SI.107 from finetune_area returns wrong image/video, use 84597 instead.
 49%|████▉     | 1420/2910 [8:57:01<4:19:15, 10.44s/it] 49%|████▉     | 1421/2910 [8:57:20<5:23:56, 13.05s/it] 49%|████▉     | 1422/2910 [8:57:26<4:31:08, 10.93s/it]09/17/2024 08:53:26 - INFO - __main__ -   current idx eR5wj0_pF4o.77 from finetune_area returns wrong image/video, use 21760 instead.
09/17/2024 08:53:27 - INFO - __main__ -   current idx EDyva2crZas.40 from finetune_area returns wrong image/video, use 70413 instead.
 49%|████▉     | 1423/2910 [8:57:35<4:12:25, 10.19s/it][h264 @ 0x557718983c00] mmco: unref short failure
[h264 @ 0x557718983c00] mmco: unref short failure
[h264 @ 0x558647fe9600] mmco: unref short failure
[h264 @ 0x558647fe9600] mmco: unref short failure
[h264 @ 0x5556ca71fbc0] mmco: unref short failure
[h264 @ 0x5556c5ed33c0] mmco: unref short failure
[h264 @ 0x5556c5ed33c0] mmco: unref short failure
09/17/2024 08:54:01 - INFO - __main__ -   current idx WI5csPawDEg.3 from finetune_area returns wrong image/video, use 71471 instead.
[h264 @ 0x5556c7349300] mmco: unref short failure
[h264 @ 0x5556d54d0600] mmco: unref short failure
[h264 @ 0x5556d54d0600] mmco: unref short failure
[h264 @ 0x5556e3675f00] mmco: unref short failure
[h264 @ 0x5556e3675f00] mmco: unref short failure
[h264 @ 0x558655158f00] mmco: unref short failure
[h264 @ 0x5556e2cf8080] mmco: unref short failure
[h264 @ 0x5586379a0600] mmco: unref short failure
[h264 @ 0x5586379a0600] mmco: unref short failure
[h264 @ 0x563555b8b080] mmco: unref short failure
[h264 @ 0x5556de10d680] mmco: unref short failure
[h264 @ 0x55771d8f8ac0] mmco: unref short failure
[h264 @ 0x558647fe9800] mmco: unref short failure
[h264 @ 0x558647fe9800] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x55863f4616c0] mmco: unref short failure
[h264 @ 0x558634704d00] mmco: unref short failure
[h264 @ 0x557726abd200] mmco: unref short failure
[h264 @ 0x557726abd200] mmco: unref short failure
 49%|████▉     | 1424/2910 [8:58:58<13:13:55, 32.06s/it]09/17/2024 08:54:59 - INFO - __main__ -   current idx 7rNZakrnk74.48 from finetune_area returns wrong image/video, use 53687 instead.
[h264 @ 0x5556d185dd40] mmco: unref short failure
[h264 @ 0x5556d185dd40] mmco: unref short failure
 49%|████▉     | 1425/2910 [8:59:18<11:45:12, 28.49s/it][h264 @ 0x5556c7043a40] mmco: unref short failure
[h264 @ 0x5556c7043a40] mmco: unref short failure
[h264 @ 0x557724280200] mmco: unref short failure
[h264 @ 0x557724280200] mmco: unref short failure
 49%|████▉     | 1426/2910 [8:59:26<9:15:20, 22.45s/it]  49%|████▉     | 1427/2910 [8:59:34<7:25:47, 18.04s/it][h264 @ 0x563556182980] mmco: unref short failure
[h264 @ 0x563556182980] mmco: unref short failure
 49%|████▉     | 1428/2910 [8:59:43<6:18:20, 15.32s/it][h264 @ 0x5576e0bd4180] mmco: unref short failure
[h264 @ 0x5576e0bd4180] mmco: unref short failure
[h264 @ 0x5556da599f00] mmco: unref short failure
[h264 @ 0x557720814c80] mmco: unref short failure
[h264 @ 0x557720814c80] mmco: unref short failure
[h264 @ 0x557720814c80] mmco: unref short failure
[h264 @ 0x557720814c80] mmco: unref short failure
[h264 @ 0x5556da59a100] mmco: unref short failure
[h264 @ 0x5577237f1fc0] mmco: unref short failure
[h264 @ 0x5577237f1fc0] mmco: unref short failure
[h264 @ 0x5577237f1fc0] mmco: unref short failure
[h264 @ 0x5577237f1fc0] mmco: unref short failure
[h264 @ 0x5556dbb3c540] mmco: unref short failure
[h264 @ 0x5577251a8d00] mmco: unref short failure
09/17/2024 08:56:24 - INFO - __main__ -   current idx 5rnI-j8aqCQ.17 from finetune_area returns wrong image/video, use 101277 instead.
[h264 @ 0x5577330776c0] mmco: unref short failure
09/17/2024 08:56:36 - INFO - __main__ -   current idx 6D_ahpoF_r4.148 from finetune_area returns wrong image/video, use 82007 instead.
[h264 @ 0x5556e5e40e80] mmco: unref short failure
[h264 @ 0x563545ccacc0] mmco: unref short failure
[h264 @ 0x563555b8ae80] mmco: unref short failure
[h264 @ 0x55863d6a72c0] mmco: unref short failure
[h264 @ 0x55863d6a72c0] mmco: unref short failure
[h264 @ 0x55771832a440] mmco: unref short failure
[h264 @ 0x56354e925100] mmco: unref short failure
[h264 @ 0x558632903f40] mmco: unref short failure
09/17/2024 08:57:18 - INFO - __main__ -   current idx 9pLQwa6SyZc.17 from finetune_area returns wrong image/video, use 42509 instead.
[h264 @ 0x55864f51fc00] mmco: unref short failure
[h264 @ 0x56355a3c95c0] mmco: unref short failure
[h264 @ 0x56355a3c95c0] mmco: unref short failure
[h264 @ 0x563564091e80] mmco: unref short failure
[h264 @ 0x563564091e80] mmco: unref short failure
[h264 @ 0x5586556a2a80] mmco: unref short failure
[h264 @ 0x5586556a2a80] mmco: unref short failure
[h264 @ 0x558640e633c0] mmco: unref short failure
[h264 @ 0x558640e633c0] mmco: unref short failure
[h264 @ 0x558645108f80] mmco: unref short failure
[h264 @ 0x55771b55aa00] mmco: unref short failure
[h264 @ 0x55771b55aa00] mmco: unref short failure
[h264 @ 0x55771b55aa00] mmco: unref short failure
[h264 @ 0x5556d30c2cc0] mmco: unref short failure
[h264 @ 0x5556d30c2cc0] mmco: unref short failure
[h264 @ 0x563551501000] mmco: unref short failure
[h264 @ 0x5635603b0e80] mmco: unref short failure
[h264 @ 0x5635603b0e80] mmco: unref short failure
09/17/2024 08:58:00 - INFO - __main__ -   current idx 3xMq89jLDYE.29 from finetune_area returns wrong image/video, use 104327 instead.
[h264 @ 0x558632c37500] mmco: unref short failure
[h264 @ 0x558632c37500] mmco: unref short failure
[h264 @ 0x563555b8ae80] mmco: unref short failure
[h264 @ 0x56355d3fd7c0] mmco: unref short failure
[h264 @ 0x56355d3fd7c0] mmco: unref short failure
[h264 @ 0x55864e85fa80] mmco: unref short failure
[h264 @ 0x55864e85fa80] mmco: unref short failure
[h264 @ 0x5556d8890d00] mmco: unref short failure
[h264 @ 0x5556c9e82a80] mmco: unref short failure
[h264 @ 0x56355a3c9380] mmco: unref short failure
[h264 @ 0x5556d54d0600] mmco: unref short failure
 49%|████▉     | 1429/2910 [9:02:54<27:56:00, 67.90s/it] 49%|████▉     | 1430/2910 [9:03:01<20:26:59, 49.74s/it][h264 @ 0x5556e0cd1380] mmco: unref short failure
[h264 @ 0x5556e0cd1380] mmco: unref short failure
 49%|████▉     | 1431/2910 [9:03:07<15:03:59, 36.67s/it]09/17/2024 08:59:09 - INFO - __main__ -   current idx 2xMe1diCHmI.53 from finetune_area returns wrong image/video, use 75092 instead.
 49%|████▉     | 1432/2910 [9:03:13<11:19:51, 27.60s/it] 49%|████▉     | 1433/2910 [9:03:21<8:50:00, 21.53s/it]  49%|████▉     | 1434/2910 [9:03:27<6:59:29, 17.05s/it]09/17/2024 08:59:32 - INFO - __main__ -   current idx BPR07crK0oA.66 from finetune_area returns wrong image/video, use 29373 instead.
[h264 @ 0x5635504ffc00] mmco: unref short failure
[h264 @ 0x5635504ffc00] mmco: unref short failure
[h264 @ 0x5635439ebac0] mmco: unref short failure
not have audios ua_Kowav7hg.20
 49%|████▉     | 1435/2910 [9:03:35<5:48:46, 14.19s/it] 49%|████▉     | 1436/2910 [9:03:41<4:49:40, 11.79s/it][h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556c942ea40] mmco: unref short failure
[h264 @ 0x5556d4bdd200] mmco: unref short failure
[h264 @ 0x558650119940] mmco: unref short failure
[h264 @ 0x558650119940] mmco: unref short failure
[h264 @ 0x55772e80eec0] mmco: unref short failure
[h264 @ 0x55772e80eec0] mmco: unref short failure
[h264 @ 0x558655acef00] mmco: unref short failure
[h264 @ 0x56355b812440] mmco: unref short failure
[h264 @ 0x5556dd40c640] mmco: unref short failure
[h264 @ 0x557719632400] mmco: unref short failure
[h264 @ 0x557719632400] mmco: unref short failure
[h264 @ 0x5586448b6e40] mmco: unref short failure
[h264 @ 0x56354d07eb00] mmco: unref short failure
[h264 @ 0x56354d07eb00] mmco: unref short failure
09/17/2024 09:01:09 - INFO - __main__ -   current idx WplYsFZXXk0.6 from finetune_area returns wrong image/video, use 73373 instead.
[h264 @ 0x55771c5b90c0] mmco: unref short failure
 49%|████▉     | 1437/2910 [9:05:17<15:09:00, 37.03s/it][h264 @ 0x56354e88e140] mmco: unref short failure
[h264 @ 0x56354e88e140] mmco: unref short failure
 49%|████▉     | 1438/2910 [9:05:24<11:30:04, 28.13s/it]09/17/2024 09:01:24 - INFO - __main__ -   current idx VNq_KDwhBKQ.15 from finetune_area returns wrong image/video, use 100190 instead.
 49%|████▉     | 1439/2910 [9:05:32<8:55:54, 21.86s/it] [h264 @ 0x55772427fd80] mmco: unref short failure
[h264 @ 0x55863b184340] mmco: unref short failure
[h264 @ 0x55863b184340] mmco: unref short failure
 49%|████▉     | 1440/2910 [9:05:39<7:07:05, 17.43s/it]09/17/2024 09:01:40 - INFO - __main__ -   current idx COB-O5fAcEY.0 from finetune_area returns wrong image/video, use 65334 instead.
[h264 @ 0x56354d07eb00] mmco: unref short failure
[h264 @ 0x56354d07eb00] mmco: unref short failure
[h264 @ 0x5556c8a24180] mmco: unref short failure
 50%|████▉     | 1441/2910 [9:05:46<5:49:13, 14.26s/it][h264 @ 0x55568cb46640] mmco: unref short failure
[h264 @ 0x55568cb46640] mmco: unref short failure
[h264 @ 0x55863555a280] mmco: unref short failure
[h264 @ 0x55863555a280] mmco: unref short failure
 50%|████▉     | 1442/2910 [9:05:53<4:55:00, 12.06s/it][h264 @ 0x5556cfebb940] mmco: unref short failure
[h264 @ 0x5556cfebb940] mmco: unref short failure
[h264 @ 0x5556cfebb940] mmco: unref short failure
[h264 @ 0x563554307300] mmco: unref short failure
[h264 @ 0x563554307300] mmco: unref short failure
[h264 @ 0x563554307300] mmco: unref short failure
[h264 @ 0x563554307300] mmco: unref short failure
[h264 @ 0x5556df19ed80] mmco: unref short failure
[h264 @ 0x557733952780] mmco: unref short failure
[h264 @ 0x557733952780] mmco: unref short failure
 50%|████▉     | 1443/2910 [9:05:59<4:16:45, 10.50s/it][h264 @ 0x558654f15dc0] mmco: unref short failure
[h264 @ 0x5556df9ff2c0] mmco: unref short failure
[h264 @ 0x5556df9ff2c0] mmco: unref short failure
 50%|████▉     | 1444/2910 [9:06:07<3:57:18,  9.71s/it][h264 @ 0x56354d07eb00] mmco: unref short failure
[h264 @ 0x557720285c00] mmco: unref short failure
[h264 @ 0x557720285c00] mmco: unref short failure
[h264 @ 0x557725cc2040] mmco: unref short failure
[h264 @ 0x557725cc2040] mmco: unref short failure
[h264 @ 0x56355da93840] mmco: unref short failure
[h264 @ 0x56355da93840] mmco: unref short failure
[h264 @ 0x563557232380] mmco: unref short failure
[h264 @ 0x563557232380] mmco: unref short failure
[h264 @ 0x563555468080] mmco: unref short failure
[h264 @ 0x563555468080] mmco: unref short failure
[h264 @ 0x558645133980] mmco: unref short failure
[h264 @ 0x558645133980] mmco: unref short failure
[h264 @ 0x56354a956300] mmco: unref short failure
[h264 @ 0x55771a0dba80] mmco: unref short failure
[h264 @ 0x56355b2c9800] mmco: unref short failure
[h264 @ 0x5556d5cc3900] mmco: unref short failure
[h264 @ 0x5556d5cc3900] mmco: unref short failure
[h264 @ 0x5556de713c80] mmco: unref short failure
[h264 @ 0x5556de713c80] mmco: unref short failure
[h264 @ 0x558655acf100] mmco: unref short failure
[h264 @ 0x558655acf100] mmco: unref short failure
[h264 @ 0x5556c418e080] mmco: unref short failure
[h264 @ 0x5556c418de80] mmco: unref short failure
[h264 @ 0x5556c418de80] mmco: unref short failure
[h264 @ 0x5556c418de80] mmco: unref short failure
[h264 @ 0x5556c418de80] mmco: unref short failure
[h264 @ 0x5556d3273b00] mmco: unref short failure
[h264 @ 0x5556d3273b00] mmco: unref short failure
[h264 @ 0x56355514f540] mmco: unref short failure
 50%|████▉     | 1445/2910 [9:07:42<14:17:40, 35.13s/it][h264 @ 0x56354e88dd40] mmco: unref short failure
 50%|████▉     | 1446/2910 [9:07:49<10:52:56, 26.76s/it][h264 @ 0x5586348acf40] mmco: unref short failure
[h264 @ 0x5586348acf40] mmco: unref short failure
 50%|████▉     | 1447/2910 [9:07:56<8:26:22, 20.77s/it]  50%|████▉     | 1448/2910 [9:08:02<6:39:26, 16.39s/it] 50%|████▉     | 1449/2910 [9:08:09<5:29:14, 13.52s/it]09/17/2024 09:04:08 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 09:04:08 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 09:04:22 - INFO - __main__ -   current idx 0BgzFFln3QI.33 from finetune_area returns wrong image/video, use 33285 instead.
[h264 @ 0x5635440def80] mmco: unref short failure
[h264 @ 0x5635440def80] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556e18989c0] mmco: unref short failure
[h264 @ 0x5556e18989c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556e18989c0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55863de34b00] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772000cfc0] mmco: unref short failure
[h264 @ 0x55772000cfc0] mmco: unref short failure
[h264 @ 0x563552cee200] mmco: unref short failure
[h264 @ 0x55772a841ac0] mmco: unref short failure
[h264 @ 0x55772a841ac0] mmco: unref short failure
[h264 @ 0x56354be30880] mmco: unref short failure
[h264 @ 0x56354be30880] mmco: unref short failure
[h264 @ 0x55864e912340] mmco: unref short failure
[h264 @ 0x5556c411fbc0] mmco: unref short failure
[h264 @ 0x5556c411fbc0] mmco: unref short failure
[h264 @ 0x5586430e7e40] mmco: unref short failure
09/17/2024 09:06:00 - INFO - __main__ -   current idx 98mW2i9a2kU.41 from finetune_area returns wrong image/video, use 78475 instead.
[h264 @ 0x55864bc9ed00] mmco: unref short failure
[h264 @ 0x55864bc9ed00] mmco: unref short failure
[h264 @ 0x55864bc9ed00] mmco: unref short failure
[h264 @ 0x55864bc9ed00] mmco: unref short failure
[h264 @ 0x5635467f1080] mmco: unref short failure
[h264 @ 0x5635467f1080] mmco: unref short failure
[h264 @ 0x56354a6c5900] mmco: unref short failure
[h264 @ 0x56354a6c5900] mmco: unref short failure
[h264 @ 0x5576deb63cc0] mmco: unref short failure
[h264 @ 0x5576deb63cc0] mmco: unref short failure
[h264 @ 0x5586320d5600] mmco: unref short failure
[h264 @ 0x5586320d5600] mmco: unref short failure
[h264 @ 0x5556e0dce680] mmco: unref short failure
[h264 @ 0x5556e0dce680] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:15,  1.12it/s][A
  1%|          | 2/221 [00:01<02:21,  1.54it/s][A
  1%|▏         | 3/221 [00:01<01:27,  2.50it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.67it/s][A[h264 @ 0x563558611840] mmco: unref short failure
[h264 @ 0x563558611840] mmco: unref short failure

  3%|▎         | 7/221 [00:01<00:40,  5.29it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.32it/s][A
  4%|▍         | 9/221 [00:02<00:59,  3.56it/s][A
  5%|▍         | 10/221 [00:03<00:58,  3.61it/s][A
  5%|▌         | 12/221 [00:03<01:08,  3.07it/s][A
  6%|▋         | 14/221 [00:04<00:54,  3.79it/s][A
  7%|▋         | 15/221 [00:04<00:51,  3.97it/s][A
  7%|▋         | 16/221 [00:04<00:47,  4.34it/s][A
  8%|▊         | 17/221 [00:04<00:45,  4.49it/s][A
  8%|▊         | 18/221 [00:05<00:47,  4.26it/s][A
  9%|▊         | 19/221 [00:05<00:41,  4.92it/s][A
  9%|▉         | 20/221 [00:05<00:35,  5.72it/s][A
 10%|▉         | 21/221 [00:05<00:31,  6.39it/s][A
 10%|▉         | 22/221 [00:05<00:35,  5.63it/s][A
 11%|█         | 24/221 [00:05<00:26,  7.50it/s][A
 11%|█▏        | 25/221 [00:05<00:24,  7.93it/s][A
 12%|█▏        | 26/221 [00:06<00:28,  6.90it/s][A
 13%|█▎        | 28/221 [00:06<00:28,  6.74it/s][A
 13%|█▎        | 29/221 [00:06<00:28,  6.74it/s][A
 14%|█▎        | 30/221 [00:06<00:27,  6.84it/s][A
 14%|█▍        | 32/221 [00:06<00:22,  8.42it/s][A
 15%|█▍        | 33/221 [00:07<00:35,  5.33it/s][A
 16%|█▌        | 35/221 [00:07<00:29,  6.22it/s][A
 16%|█▋        | 36/221 [00:07<00:33,  5.49it/s][A
 17%|█▋        | 37/221 [00:08<01:00,  3.05it/s][A
 17%|█▋        | 38/221 [00:08<00:59,  3.09it/s][A
 18%|█▊        | 39/221 [00:09<00:54,  3.33it/s][A
 18%|█▊        | 40/221 [00:09<00:49,  3.64it/s][A
 19%|█▊        | 41/221 [00:09<00:42,  4.20it/s][A
 19%|█▉        | 42/221 [00:10<01:40,  1.78it/s][A
 20%|█▉        | 44/221 [00:10<01:01,  2.86it/s][A[h264 @ 0x5556d566f880] mmco: unref short failure
[h264 @ 0x5556d566f880] mmco: unref short failure
[h264 @ 0x558638e64880] mmco: unref short failure

 20%|██        | 45/221 [00:11<01:19,  2.21it/s][A
 21%|██        | 46/221 [00:12<01:21,  2.15it/s][A[h264 @ 0x5556c411f500] mmco: unref short failure
[h264 @ 0x5556c411f500] mmco: unref short failure

 21%|██▏       | 47/221 [00:15<03:19,  1.15s/it][A
 22%|██▏       | 48/221 [00:15<02:30,  1.15it/s][A
 22%|██▏       | 49/221 [00:15<01:52,  1.53it/s][A
 23%|██▎       | 51/221 [00:15<01:08,  2.50it/s][A
 24%|██▎       | 52/221 [00:15<00:55,  3.04it/s][A
 24%|██▍       | 53/221 [00:15<00:47,  3.57it/s][A
 24%|██▍       | 54/221 [00:16<01:17,  2.16it/s][A
 25%|██▍       | 55/221 [00:17<01:05,  2.54it/s][A
 25%|██▌       | 56/221 [00:17<00:54,  3.04it/s][A
 26%|██▌       | 57/221 [00:17<00:57,  2.85it/s][A
 27%|██▋       | 59/221 [00:17<00:36,  4.42it/s][A
 27%|██▋       | 60/221 [00:18<00:36,  4.39it/s][A
 28%|██▊       | 61/221 [00:18<00:37,  4.22it/s][A
 28%|██▊       | 62/221 [00:18<00:33,  4.68it/s][A
 29%|██▊       | 63/221 [00:18<00:30,  5.20it/s][A
 29%|██▉       | 64/221 [00:18<00:29,  5.37it/s][A
 29%|██▉       | 65/221 [00:18<00:27,  5.58it/s][A
 30%|██▉       | 66/221 [00:19<00:43,  3.58it/s][A
 30%|███       | 67/221 [00:19<00:36,  4.18it/s][A
 31%|███       | 68/221 [00:19<00:36,  4.16it/s][A
 31%|███       | 69/221 [00:20<00:47,  3.22it/s][A
 32%|███▏      | 70/221 [00:20<00:38,  3.88it/s][A[h264 @ 0x55772ea1a400] mmco: unref short failure
[h264 @ 0x55772ea1a400] mmco: unref short failure

 32%|███▏      | 71/221 [00:24<03:43,  1.49s/it][A
 33%|███▎      | 72/221 [00:24<02:43,  1.10s/it][A
 33%|███▎      | 73/221 [00:25<02:09,  1.15it/s][A
 33%|███▎      | 74/221 [00:25<01:35,  1.53it/s][A
 34%|███▍      | 75/221 [00:25<01:16,  1.91it/s][A
 34%|███▍      | 76/221 [00:25<00:59,  2.44it/s][A
 35%|███▍      | 77/221 [00:26<00:49,  2.93it/s][A
 35%|███▌      | 78/221 [00:26<00:42,  3.36it/s][A
 36%|███▌      | 79/221 [00:27<01:07,  2.12it/s][A
 37%|███▋      | 81/221 [00:27<00:43,  3.24it/s][A
 37%|███▋      | 82/221 [00:27<00:40,  3.40it/s][A
 38%|███▊      | 84/221 [00:27<00:29,  4.64it/s][A
 39%|███▉      | 86/221 [00:27<00:21,  6.15it/s][A
 39%|███▉      | 87/221 [00:28<00:26,  5.09it/s][A
 40%|███▉      | 88/221 [00:28<00:27,  4.91it/s][A
 40%|████      | 89/221 [00:32<02:23,  1.09s/it][A
 41%|████      | 90/221 [00:32<01:51,  1.18it/s][A
 42%|████▏     | 92/221 [00:32<01:07,  1.90it/s][A
 42%|████▏     | 93/221 [00:33<01:09,  1.83it/s][A
 43%|████▎     | 94/221 [00:33<01:12,  1.76it/s][A
 43%|████▎     | 95/221 [00:33<00:56,  2.23it/s][A
 43%|████▎     | 96/221 [00:34<00:45,  2.74it/s][A
 44%|████▍     | 98/221 [00:34<00:32,  3.77it/s][A
 45%|████▍     | 99/221 [00:34<00:27,  4.36it/s][A
 45%|████▌     | 100/221 [00:34<00:25,  4.77it/s][A
 46%|████▌     | 101/221 [00:34<00:26,  4.57it/s][A
 46%|████▌     | 102/221 [00:35<00:27,  4.37it/s][A
 47%|████▋     | 104/221 [00:35<00:18,  6.37it/s][A
 48%|████▊     | 105/221 [00:35<00:20,  5.72it/s][A
 48%|████▊     | 106/221 [00:36<00:32,  3.52it/s][A
 48%|████▊     | 107/221 [00:36<00:29,  3.89it/s][A
 49%|████▉     | 108/221 [00:36<00:27,  4.11it/s][A
 49%|████▉     | 109/221 [00:36<00:24,  4.60it/s][A
 50%|█████     | 111/221 [00:37<00:24,  4.44it/s][A
 51%|█████     | 112/221 [00:37<00:23,  4.72it/s][A
 51%|█████     | 113/221 [00:37<00:24,  4.44it/s][A[h264 @ 0x557725f35f40] mmco: unref short failure

 52%|█████▏    | 116/221 [00:42<01:42,  1.03it/s][A
 53%|█████▎    | 117/221 [00:42<01:26,  1.21it/s][A
 53%|█████▎    | 118/221 [00:43<01:11,  1.44it/s][A
 54%|█████▍    | 119/221 [00:43<00:56,  1.80it/s][A
 54%|█████▍    | 120/221 [00:43<00:45,  2.22it/s][A
 55%|█████▌    | 122/221 [00:43<00:31,  3.18it/s][A
 56%|█████▌    | 123/221 [00:43<00:26,  3.75it/s][A
 56%|█████▌    | 124/221 [00:43<00:22,  4.27it/s][A
 57%|█████▋    | 125/221 [00:43<00:20,  4.63it/s][A
 57%|█████▋    | 126/221 [00:45<00:43,  2.16it/s][A
 57%|█████▋    | 127/221 [00:45<00:38,  2.42it/s][A
 58%|█████▊    | 128/221 [00:46<00:45,  2.06it/s][A
 58%|█████▊    | 129/221 [00:46<00:36,  2.50it/s][A
 59%|█████▉    | 130/221 [00:46<00:29,  3.10it/s][A
 60%|█████▉    | 132/221 [00:46<00:20,  4.33it/s][A
 60%|██████    | 133/221 [00:46<00:22,  3.91it/s][A
 61%|██████    | 134/221 [00:47<00:20,  4.17it/s][A
 61%|██████    | 135/221 [00:47<00:21,  4.01it/s][A
 62%|██████▏   | 136/221 [00:47<00:25,  3.32it/s][A
 62%|██████▏   | 137/221 [00:48<00:26,  3.12it/s][A[h264 @ 0x5576dee93380] mmco: unref short failure
[h264 @ 0x5576dee93380] mmco: unref short failure

 62%|██████▏   | 138/221 [00:48<00:31,  2.65it/s][A
 63%|██████▎   | 139/221 [00:49<00:29,  2.74it/s][A
 63%|██████▎   | 140/221 [00:49<00:26,  3.07it/s][A
 64%|██████▍   | 141/221 [00:49<00:23,  3.47it/s][A
 64%|██████▍   | 142/221 [00:49<00:23,  3.35it/s][A
 65%|██████▍   | 143/221 [00:50<00:21,  3.56it/s][A
 66%|██████▌   | 145/221 [00:50<00:13,  5.47it/s][A
 67%|██████▋   | 147/221 [00:50<00:09,  7.40it/s][A
 67%|██████▋   | 148/221 [00:50<00:11,  6.45it/s][A
 68%|██████▊   | 150/221 [00:50<00:09,  7.74it/s][A[h264 @ 0x563543eab540] mmco: unref short failure
[h264 @ 0x563543eab540] mmco: unref short failure

 68%|██████▊   | 151/221 [00:51<00:14,  4.80it/s][A
 69%|██████▉   | 152/221 [00:51<00:14,  4.66it/s][A
 69%|██████▉   | 153/221 [00:51<00:16,  4.09it/s][A
 70%|██████▉   | 154/221 [00:52<00:31,  2.13it/s][A
 71%|███████   | 156/221 [00:52<00:19,  3.40it/s][A
 71%|███████   | 157/221 [00:57<01:27,  1.36s/it][A
 72%|███████▏  | 159/221 [00:58<00:53,  1.16it/s][A
 72%|███████▏  | 160/221 [00:58<00:43,  1.41it/s][A
 73%|███████▎  | 162/221 [00:58<00:26,  2.20it/s][A
 74%|███████▍  | 164/221 [00:58<00:21,  2.69it/s][A
 75%|███████▌  | 166/221 [00:59<00:17,  3.09it/s][A
 76%|███████▌  | 168/221 [01:03<00:45,  1.16it/s][A
 76%|███████▋  | 169/221 [01:03<00:38,  1.34it/s][A
 77%|███████▋  | 170/221 [01:03<00:32,  1.57it/s][A
 77%|███████▋  | 171/221 [01:03<00:25,  1.94it/s][A
 78%|███████▊  | 173/221 [01:03<00:16,  2.85it/s][A
 79%|███████▉  | 175/221 [01:04<00:12,  3.80it/s][A
 80%|███████▉  | 176/221 [01:04<00:11,  3.75it/s][A
 81%|████████  | 178/221 [01:04<00:09,  4.38it/s][A
 81%|████████  | 179/221 [01:06<00:24,  1.68it/s][A
 82%|████████▏ | 181/221 [01:06<00:15,  2.51it/s][A
 82%|████████▏ | 182/221 [01:07<00:13,  2.93it/s][A
 83%|████████▎ | 183/221 [01:07<00:11,  3.31it/s][A
 83%|████████▎ | 184/221 [01:07<00:10,  3.51it/s][A
 84%|████████▍ | 186/221 [01:07<00:07,  4.45it/s][A
 85%|████████▌ | 188/221 [01:08<00:06,  5.18it/s][A
 86%|████████▌ | 189/221 [01:08<00:06,  4.68it/s][A
 86%|████████▌ | 190/221 [01:08<00:06,  4.83it/s][A
 87%|████████▋ | 192/221 [01:08<00:05,  5.77it/s][A
 88%|████████▊ | 194/221 [01:10<00:10,  2.61it/s][A
 88%|████████▊ | 195/221 [01:10<00:08,  3.06it/s][A
 89%|████████▉ | 197/221 [01:10<00:05,  4.30it/s][A
 90%|████████▉ | 198/221 [01:10<00:04,  4.81it/s][A
 90%|█████████ | 199/221 [01:10<00:05,  4.25it/s][A
 90%|█████████ | 200/221 [01:11<00:05,  3.84it/s][A
 91%|█████████ | 201/221 [01:11<00:05,  3.96it/s][A
 91%|█████████▏| 202/221 [01:11<00:04,  4.70it/s][A
 92%|█████████▏| 203/221 [01:11<00:03,  4.54it/s][A
 93%|█████████▎| 205/221 [01:12<00:02,  6.27it/s][A
 93%|█████████▎| 206/221 [01:12<00:02,  5.83it/s][A
 95%|█████████▍| 209/221 [01:12<00:01,  9.29it/s][A
 95%|█████████▌| 211/221 [01:12<00:01,  5.99it/s][A
 96%|█████████▌| 212/221 [01:13<00:01,  5.75it/s][A
 97%|█████████▋| 214/221 [01:14<00:02,  2.96it/s][A
 97%|█████████▋| 215/221 [01:14<00:01,  3.25it/s][A
 98%|█████████▊| 216/221 [01:14<00:01,  3.71it/s][A
 98%|█████████▊| 217/221 [01:15<00:01,  2.38it/s][A
 99%|█████████▊| 218/221 [01:16<00:01,  2.03it/s][A
 99%|█████████▉| 219/221 [01:16<00:00,  2.45it/s][A
100%|█████████▉| 220/221 [01:21<00:01,  1.65s/it][A100%|██████████| 221/221 [01:21<00:00,  2.71it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:04,  3.42it/s][A
  1%|▏         | 3/221 [00:00<01:03,  3.42it/s][A
  2%|▏         | 4/221 [00:01<01:03,  3.42it/s][A
  2%|▏         | 5/221 [00:01<01:03,  3.42it/s][A
  3%|▎         | 6/221 [00:01<01:02,  3.42it/s][A
  3%|▎         | 7/221 [00:02<01:02,  3.42it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.42it/s][A
  4%|▍         | 9/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 11/221 [00:03<01:01,  3.42it/s][A
  5%|▌         | 12/221 [00:03<01:01,  3.42it/s][A
  6%|▌         | 13/221 [00:03<01:00,  3.42it/s][A
  6%|▋         | 14/221 [00:04<01:00,  3.42it/s][A
  7%|▋         | 15/221 [00:04<01:00,  3.42it/s][A
  7%|▋         | 16/221 [00:04<00:59,  3.42it/s][A
  8%|▊         | 17/221 [00:04<00:59,  3.42it/s][A
  8%|▊         | 18/221 [00:05<00:59,  3.42it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.42it/s][A
  9%|▉         | 20/221 [00:05<00:58,  3.42it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.42it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.42it/s][A
 10%|█         | 23/221 [00:06<00:57,  3.42it/s][A
 11%|█         | 24/221 [00:07<00:57,  3.42it/s][A
 11%|█▏        | 25/221 [00:07<00:57,  3.42it/s][A
 12%|█▏        | 26/221 [00:07<00:56,  3.42it/s][A
 12%|█▏        | 27/221 [00:07<00:56,  3.42it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.42it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.42it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.42it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.42it/s][A
 15%|█▍        | 33/221 [00:09<00:54,  3.42it/s][A
 15%|█▌        | 34/221 [00:09<00:54,  3.42it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.42it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.42it/s][A
 17%|█▋        | 37/221 [00:10<00:53,  3.42it/s][A
 17%|█▋        | 38/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.42it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.42it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:12<00:51,  3.42it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.42it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.42it/s][A
 21%|██▏       | 47/221 [00:13<00:50,  3.42it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.42it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.42it/s][A
 23%|██▎       | 50/221 [00:14<00:49,  3.42it/s][A
 23%|██▎       | 51/221 [00:14<00:49,  3.42it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.42it/s][A
 24%|██▍       | 54/221 [00:15<00:48,  3.42it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.42it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.42it/s][A
 26%|██▌       | 57/221 [00:16<00:47,  3.42it/s][A
 26%|██▌       | 58/221 [00:16<00:47,  3.42it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.42it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.42it/s][A
 28%|██▊       | 61/221 [00:17<00:46,  3.42it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.42it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.42it/s][A
 29%|██▉       | 64/221 [00:18<00:45,  3.42it/s][A
 29%|██▉       | 65/221 [00:18<00:45,  3.42it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.42it/s][A
 30%|███       | 67/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 68/221 [00:19<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:20<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:22<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:23<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:23<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:24<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:25<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:27<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:28<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:29<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:30<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:31<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:32<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:33<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:34<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:36<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:37<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:38<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:39<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:40<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:41<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:42<00:21,  3.41it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:43<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:44<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:44<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:45<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:46<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:47<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:48<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:49<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:49<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:50<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:51<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:53<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:54<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:55<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:56<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:56<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:57<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:58<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:00<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:02<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:03<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:03<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.42it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:39,  5.59it/s][A
  1%|          | 2/221 [00:00<00:48,  4.48it/s][A
  1%|▏         | 3/221 [00:00<01:00,  3.60it/s][A
  2%|▏         | 4/221 [00:00<00:52,  4.12it/s][A
  2%|▏         | 5/221 [00:01<00:44,  4.87it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.00it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.12it/s][A
  4%|▎         | 8/221 [00:01<01:00,  3.54it/s][A
  4%|▍         | 9/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 10/221 [00:02<00:58,  3.58it/s][A
  5%|▍         | 11/221 [00:02<00:55,  3.81it/s][A
  5%|▌         | 12/221 [00:02<00:50,  4.17it/s][A
  6%|▌         | 13/221 [00:03<01:15,  2.74it/s][A
  6%|▋         | 14/221 [00:03<01:11,  2.91it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.91it/s][A
  7%|▋         | 16/221 [00:04<01:14,  2.74it/s][A
  8%|▊         | 17/221 [00:05<01:28,  2.31it/s][A
  8%|▊         | 18/221 [00:05<01:22,  2.46it/s][A
  9%|▉         | 20/221 [00:05<00:57,  3.50it/s][A
 10%|▉         | 21/221 [00:06<00:51,  3.89it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.11it/s][A
 10%|█         | 23/221 [00:06<00:42,  4.66it/s][A
 11%|█         | 24/221 [00:06<00:41,  4.78it/s][A
 11%|█▏        | 25/221 [00:07<00:51,  3.83it/s][A
 12%|█▏        | 26/221 [00:07<00:51,  3.76it/s][A
 12%|█▏        | 27/221 [00:07<00:50,  3.88it/s][A
 13%|█▎        | 28/221 [00:07<00:50,  3.86it/s][A
 13%|█▎        | 29/221 [00:08<00:48,  3.98it/s][A
 14%|█▎        | 30/221 [00:08<00:50,  3.79it/s][A
 14%|█▍        | 31/221 [00:08<00:49,  3.80it/s][A
 14%|█▍        | 32/221 [00:08<00:44,  4.23it/s][A
 15%|█▍        | 33/221 [00:09<00:48,  3.84it/s][A
 15%|█▌        | 34/221 [00:09<00:55,  3.39it/s][A
 16%|█▌        | 35/221 [00:09<00:54,  3.42it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.25it/s][A
 17%|█▋        | 37/221 [00:10<00:51,  3.60it/s][A
 17%|█▋        | 38/221 [00:10<00:55,  3.28it/s][A
 18%|█▊        | 39/221 [00:10<00:53,  3.39it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.42it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.42it/s][A
 19%|█▉        | 42/221 [00:11<00:48,  3.66it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:12<00:58,  3.05it/s][A
 20%|██        | 45/221 [00:13<01:08,  2.56it/s][A
 21%|██        | 46/221 [00:13<01:06,  2.62it/s][A
 21%|██▏       | 47/221 [00:13<00:59,  2.90it/s][A
 22%|██▏       | 48/221 [00:13<00:51,  3.37it/s][A
 23%|██▎       | 50/221 [00:14<00:47,  3.58it/s][A
 23%|██▎       | 51/221 [00:14<00:47,  3.59it/s][A
 24%|██▍       | 53/221 [00:15<00:48,  3.50it/s][A
 24%|██▍       | 54/221 [00:15<00:45,  3.65it/s][A
 25%|██▍       | 55/221 [00:15<00:51,  3.21it/s][A
 25%|██▌       | 56/221 [00:16<00:53,  3.06it/s][A
 26%|██▌       | 57/221 [00:16<00:50,  3.25it/s][A
 26%|██▌       | 58/221 [00:16<00:44,  3.68it/s][A
 27%|██▋       | 59/221 [00:16<00:43,  3.72it/s][A
 27%|██▋       | 60/221 [00:17<00:38,  4.16it/s][A
 28%|██▊       | 61/221 [00:17<00:38,  4.20it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.83it/s][A
 29%|██▉       | 64/221 [00:17<00:32,  4.83it/s][A
 29%|██▉       | 65/221 [00:18<00:35,  4.43it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.67it/s][A
 30%|███       | 67/221 [00:18<00:44,  3.45it/s][A
 31%|███       | 68/221 [00:19<00:46,  3.26it/s][A
 31%|███       | 69/221 [00:19<01:03,  2.40it/s][A
 32%|███▏      | 70/221 [00:20<01:00,  2.48it/s][A
 32%|███▏      | 71/221 [00:20<00:56,  2.63it/s][A
 33%|███▎      | 72/221 [00:21<00:54,  2.73it/s][A
 33%|███▎      | 73/221 [00:21<00:51,  2.85it/s][A
 33%|███▎      | 74/221 [00:21<00:49,  2.94it/s][A
 34%|███▍      | 75/221 [00:21<00:44,  3.25it/s][A
 34%|███▍      | 76/221 [00:22<00:38,  3.73it/s][A
 35%|███▍      | 77/221 [00:22<00:34,  4.19it/s][A
 35%|███▌      | 78/221 [00:22<00:35,  3.99it/s][A
 36%|███▌      | 79/221 [00:22<00:36,  3.87it/s][A
 36%|███▌      | 80/221 [00:22<00:31,  4.43it/s][A
 37%|███▋      | 81/221 [00:23<00:30,  4.53it/s][A
 37%|███▋      | 82/221 [00:23<00:43,  3.20it/s][A
 38%|███▊      | 84/221 [00:24<00:46,  2.92it/s][A
 38%|███▊      | 85/221 [00:24<00:45,  3.00it/s][A
 39%|███▉      | 86/221 [00:25<00:50,  2.69it/s][A
 39%|███▉      | 87/221 [00:25<00:53,  2.51it/s][A
 40%|███▉      | 88/221 [00:25<00:48,  2.75it/s][A
 40%|████      | 89/221 [00:26<00:46,  2.86it/s][A
 41%|████      | 90/221 [00:26<00:52,  2.48it/s][A
 41%|████      | 91/221 [00:27<00:47,  2.76it/s][A
 42%|████▏     | 92/221 [00:27<00:47,  2.72it/s][A
 42%|████▏     | 93/221 [00:27<00:51,  2.50it/s][A
 43%|████▎     | 94/221 [00:28<00:46,  2.74it/s][A
 43%|████▎     | 95/221 [00:28<00:53,  2.33it/s][A
 43%|████▎     | 96/221 [00:29<00:52,  2.37it/s][A
 44%|████▍     | 97/221 [00:29<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:29<00:48,  2.53it/s][A
 45%|████▍     | 99/221 [00:30<00:43,  2.81it/s][A
 45%|████▌     | 100/221 [00:30<00:37,  3.24it/s][A
 46%|████▌     | 101/221 [00:30<00:31,  3.77it/s][A
 46%|████▌     | 102/221 [00:30<00:32,  3.66it/s][A
 47%|████▋     | 103/221 [00:31<00:30,  3.83it/s][A
 47%|████▋     | 104/221 [00:31<00:27,  4.23it/s][A
 48%|████▊     | 105/221 [00:31<00:30,  3.79it/s][A
 48%|████▊     | 106/221 [00:32<00:37,  3.03it/s][A
 48%|████▊     | 107/221 [00:32<00:37,  3.04it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.66it/s][A
 49%|████▉     | 109/221 [00:32<00:29,  3.81it/s][A
 50%|████▉     | 110/221 [00:33<00:31,  3.55it/s][A
 50%|█████     | 111/221 [00:33<00:31,  3.51it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.43it/s][A
 51%|█████     | 113/221 [00:34<00:32,  3.31it/s][A
 52%|█████▏    | 114/221 [00:34<00:26,  3.97it/s][A
 52%|█████▏    | 115/221 [00:34<00:23,  4.57it/s][A
 52%|█████▏    | 116/221 [00:34<00:23,  4.43it/s][A
 53%|█████▎    | 117/221 [00:34<00:25,  4.11it/s][A
 53%|█████▎    | 118/221 [00:35<00:28,  3.66it/s][A
 54%|█████▍    | 119/221 [00:35<00:33,  3.07it/s][A
 54%|█████▍    | 120/221 [00:36<00:36,  2.74it/s][A
 55%|█████▍    | 121/221 [00:36<00:34,  2.91it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.27it/s][A
 56%|█████▌    | 123/221 [00:36<00:32,  3.00it/s][A
 56%|█████▌    | 124/221 [00:37<00:33,  2.89it/s][A
 57%|█████▋    | 125/221 [00:37<00:38,  2.50it/s][A
 57%|█████▋    | 126/221 [00:38<00:35,  2.67it/s][A
 57%|█████▋    | 127/221 [00:38<00:36,  2.58it/s][A
 58%|█████▊    | 128/221 [00:38<00:32,  2.86it/s][A
 58%|█████▊    | 129/221 [00:39<00:26,  3.46it/s][A
 59%|█████▉    | 130/221 [00:39<00:25,  3.56it/s][A
 59%|█████▉    | 131/221 [00:39<00:24,  3.66it/s][A
 60%|█████▉    | 132/221 [00:39<00:22,  3.97it/s][A
 60%|██████    | 133/221 [00:40<00:25,  3.49it/s][A
 61%|██████    | 134/221 [00:40<00:27,  3.13it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.49it/s][A
 62%|██████▏   | 136/221 [00:41<00:25,  3.33it/s][A
 62%|██████▏   | 137/221 [00:41<00:23,  3.61it/s][A
 62%|██████▏   | 138/221 [00:41<00:22,  3.70it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.04it/s][A
 63%|██████▎   | 140/221 [00:42<00:23,  3.45it/s][A
 64%|██████▍   | 141/221 [00:42<00:28,  2.79it/s][A
 64%|██████▍   | 142/221 [00:42<00:24,  3.20it/s][A
 65%|██████▍   | 143/221 [00:43<00:24,  3.20it/s][A
 65%|██████▌   | 144/221 [00:43<00:24,  3.16it/s][A
 66%|██████▌   | 145/221 [00:44<00:27,  2.81it/s][A
 66%|██████▌   | 146/221 [00:44<00:24,  3.07it/s][A
 67%|██████▋   | 147/221 [00:44<00:20,  3.57it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  3.00it/s][A
 67%|██████▋   | 149/221 [00:45<00:20,  3.45it/s][A
 68%|██████▊   | 150/221 [00:45<00:20,  3.48it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.18it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.29it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.43it/s][A
 70%|██████▉   | 154/221 [00:47<00:27,  2.47it/s][A
 70%|███████   | 155/221 [00:47<00:24,  2.69it/s][A
 71%|███████   | 156/221 [00:47<00:21,  2.99it/s][A
 71%|███████   | 157/221 [00:48<00:20,  3.16it/s][A
 71%|███████▏  | 158/221 [00:48<00:21,  2.87it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  2.96it/s][A
 72%|███████▏  | 160/221 [00:49<00:18,  3.21it/s][A
 73%|███████▎  | 161/221 [00:49<00:15,  3.87it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.67it/s][A
 74%|███████▍  | 164/221 [00:49<00:11,  4.78it/s][A
 75%|███████▍  | 165/221 [00:50<00:14,  3.93it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.31it/s][A
 76%|███████▌  | 167/221 [00:50<00:13,  4.00it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.64it/s][A
 77%|███████▋  | 170/221 [00:51<00:12,  4.03it/s][A
 77%|███████▋  | 171/221 [00:51<00:12,  3.91it/s][A
 78%|███████▊  | 172/221 [00:51<00:12,  3.77it/s][A
 78%|███████▊  | 173/221 [00:52<00:13,  3.55it/s][A
 79%|███████▊  | 174/221 [00:52<00:15,  3.05it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.20it/s][A
 80%|███████▉  | 176/221 [00:53<00:12,  3.69it/s][A
 80%|████████  | 177/221 [00:53<00:11,  3.68it/s][A
 81%|████████  | 178/221 [00:54<00:16,  2.58it/s][A
 81%|████████  | 179/221 [00:54<00:14,  2.85it/s][A
 81%|████████▏ | 180/221 [00:54<00:12,  3.34it/s][A
 82%|████████▏ | 181/221 [00:55<00:15,  2.56it/s][A
 82%|████████▏ | 182/221 [00:55<00:13,  2.89it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  2.94it/s][A
 83%|████████▎ | 184/221 [00:56<00:12,  2.94it/s][A
 84%|████████▎ | 185/221 [00:56<00:09,  3.70it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.19it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.43it/s][A
 85%|████████▌ | 188/221 [00:57<00:10,  3.18it/s][A
 86%|████████▌ | 189/221 [00:57<00:09,  3.46it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.21it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.48it/s][A
 87%|████████▋ | 192/221 [00:58<00:07,  4.06it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.75it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.25it/s][A
 88%|████████▊ | 195/221 [00:59<00:07,  3.67it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.41it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.13it/s][A
 90%|████████▉ | 198/221 [01:00<00:07,  3.12it/s][A
 90%|█████████ | 199/221 [01:00<00:06,  3.41it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.48it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.84it/s][A
 91%|█████████▏| 202/221 [01:01<00:05,  3.59it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  3.92it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.76it/s][A
 93%|█████████▎| 205/221 [01:02<00:04,  3.28it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.51it/s][A
 94%|█████████▎| 207/221 [01:03<00:05,  2.47it/s][A
 94%|█████████▍| 208/221 [01:03<00:04,  2.99it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.26it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.17it/s][A
 95%|█████████▌| 211/221 [01:04<00:02,  3.41it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.44it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.49it/s][A
 97%|█████████▋| 214/221 [01:05<00:02,  2.88it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.72it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.70it/s][A
 98%|█████████▊| 217/221 [01:06<00:01,  2.92it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.17it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.12it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.56it/s][A
100%|██████████| 221/221 [01:07<00:00,  3.44it/s][A100%|██████████| 221/221 [01:07<00:00,  3.29it/s]
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'area_r1': 39.7, 'area_recall': '39.7/65.0/73.2', 'area_ravg': 59.3}
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'forward_r1': 38.2, 'forward_recall': '38.2/68.1/77.7', 'forward_ravg': 61.3}
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'area_video_r1': 38.8, 'area_video_recall': '38.8/67.8/78.2', 'area_video_ravg': 61.6}
09/17/2024 09:09:59 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 09:09:59 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'area_video_r1': 52.9, 'area_video_recall': '52.9/75.6/81.7', 'area_video_ravg': 70.1, 'area_video_back_r1': 48.0, 'area_video_back_recall': '48.0/74.5/82.0', 'area_video_back_ravg': 68.2}
09/17/2024 09:09:59 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 09:09:59 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'video_r1': 36.1, 'video_recall': '36.1/64.8/73.4', 'video_ravg': 58.1}
09/17/2024 09:09:59 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 09:09:59 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 09:09:59 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1449--===========

09/17/2024 09:09:59 - INFO - __main__ -   {'video_r1': 52.0, 'video_recall': '52.0/75.0/81.3', 'video_ravg': 69.5}
09/17/2024 09:09:59 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 09:09:59 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 09:10:20 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.006779925897717476, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0586186647415161, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.215106248855591, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2805047035217285}
 50%|████▉     | 1450/2910 [9:14:23<49:24:07, 121.81s/it] 50%|████▉     | 1451/2910 [9:14:27<35:01:14, 86.41s/it]  50%|████▉     | 1452/2910 [9:14:31<24:59:06, 61.69s/it]09/17/2024 09:10:35 - INFO - __main__ -   current idx cXoOWKkZ_K0.13 from finetune_area returns wrong image/video, use 148773 instead.
 50%|████▉     | 1453/2910 [9:14:37<18:08:49, 44.84s/it] 50%|████▉     | 1454/2910 [9:14:43<13:25:58, 33.21s/it][h264 @ 0x5586515a6280] mmco: unref short failure
 50%|█████     | 1455/2910 [9:14:48<10:05:35, 24.97s/it] 50%|█████     | 1456/2910 [9:14:54<7:47:49, 19.30s/it]  50%|█████     | 1457/2910 [9:15:01<6:13:25, 15.42s/it][h264 @ 0x5556df856080] mmco: unref short failure
[h264 @ 0x5556df856080] mmco: unref short failure
 50%|█████     | 1458/2910 [9:15:08<5:16:13, 13.07s/it][h264 @ 0x56355eb42840] mmco: unref short failure
 50%|█████     | 1459/2910 [9:15:15<4:31:30, 11.23s/it] 50%|█████     | 1460/2910 [9:15:21<3:53:06,  9.65s/it] 50%|█████     | 1461/2910 [9:15:28<3:31:30,  8.76s/it][h264 @ 0x5635419b8400] mmco: unref short failure
[h264 @ 0x5635419b8400] mmco: unref short failure
09/17/2024 09:11:31 - INFO - __main__ -   current idx 8W9D8fiNodQ.9 from finetune_area returns wrong image/video, use 84717 instead.
 50%|█████     | 1462/2910 [9:15:34<3:13:32,  8.02s/it] 50%|█████     | 1463/2910 [9:15:41<3:04:32,  7.65s/it][h264 @ 0x5556ca176880] mmco: unref short failure
[h264 @ 0x5556ca176880] mmco: unref short failure
[h264 @ 0x5556ccdee200] mmco: unref short failure
[h264 @ 0x5556ccdee200] mmco: unref short failure
 50%|█████     | 1464/2910 [9:15:48<2:58:31,  7.41s/it] 50%|█████     | 1465/2910 [9:15:54<2:49:38,  7.04s/it][h264 @ 0x55772f017900] mmco: unref short failure
[h264 @ 0x55772f017900] mmco: unref short failure
[h264 @ 0x55772f017900] mmco: unref short failure
[h264 @ 0x55772f017900] mmco: unref short failure
[h264 @ 0x5556c855ab40] mmco: unref short failure
[h264 @ 0x5556c855ab40] mmco: unref short failure
[h264 @ 0x5556db502900] mmco: unref short failure
[h264 @ 0x5556db502900] mmco: unref short failure
[h264 @ 0x563553fdf740] mmco: unref short failure
[h264 @ 0x563553fdf740] mmco: unref short failure
 50%|█████     | 1466/2910 [9:16:27<5:56:11, 14.80s/it][h264 @ 0x56355f317680] mmco: unref short failure
[h264 @ 0x56355b596b40] mmco: unref short failure
[h264 @ 0x56355b596b40] mmco: unref short failure
[h264 @ 0x56355a85aec0] mmco: unref short failure
[h264 @ 0x56355a85aec0] mmco: unref short failure
[h264 @ 0x563545d08400] mmco: unref short failure
[h264 @ 0x558633ec8140] mmco: unref short failure
[h264 @ 0x558633ec8140] mmco: unref short failure
[h264 @ 0x5556c47d5740] mmco: unref short failure
[h264 @ 0x5556c47d5740] mmco: unref short failure
 50%|█████     | 1467/2910 [9:16:53<7:15:39, 18.11s/it][h264 @ 0x55772dffb900] mmco: unref short failure
[h264 @ 0x55772dffb900] mmco: unref short failure
[h264 @ 0x5635584d6a00] mmco: unref short failure
 50%|█████     | 1468/2910 [9:17:06<6:42:04, 16.73s/it][h264 @ 0x563548e3d840] mmco: unref short failure
[h264 @ 0x563548e3d840] mmco: unref short failure
[h264 @ 0x56354873d700] mmco: unref short failure
[h264 @ 0x56354873d700] mmco: unref short failure
 50%|█████     | 1469/2910 [9:17:13<5:31:32, 13.80s/it] 51%|█████     | 1470/2910 [9:17:20<4:39:06, 11.63s/it] 51%|█████     | 1471/2910 [9:17:26<4:01:17, 10.06s/it][h264 @ 0x55773253a4c0] mmco: unref short failure
[h264 @ 0x55773253a4c0] mmco: unref short failure
 51%|█████     | 1472/2910 [9:17:34<3:42:29,  9.28s/it][h264 @ 0x55864f7ea900] mmco: unref short failure
[h264 @ 0x55864f7ea900] mmco: unref short failure
 51%|█████     | 1473/2910 [9:17:41<3:30:53,  8.81s/it][h264 @ 0x558643a247c0] mmco: unref short failure
[h264 @ 0x558643a247c0] mmco: unref short failure
09/17/2024 09:13:53 - INFO - __main__ -   current idx 4ZmeUj7cFu4.36 from finetune_area returns wrong image/video, use 64490 instead.
[h264 @ 0x5556da9a0cc0] mmco: unref short failure
[h264 @ 0x5556da9a0cc0] mmco: unref short failure
[h264 @ 0x5556da9a0cc0] mmco: unref short failure
[h264 @ 0x5556da9a0cc0] mmco: unref short failure
[h264 @ 0x558641f32500] mmco: unref short failure
[h264 @ 0x558641f32500] mmco: unref short failure
[h264 @ 0x56355bc58e40] mmco: unref short failure
[h264 @ 0x55771999ae40] mmco: unref short failure
[h264 @ 0x5635416266c0] mmco: unref short failure
[h264 @ 0x5635416266c0] mmco: unref short failure
[h264 @ 0x5635416266c0] mmco: unref short failure
[h264 @ 0x5635416266c0] mmco: unref short failure
[h264 @ 0x55772bbc0440] mmco: unref short failure
[h264 @ 0x55772bbc0440] mmco: unref short failure
[h264 @ 0x55863b679000] mmco: unref short failure
[h264 @ 0x55863b679000] mmco: unref short failure
[h264 @ 0x55863b679000] mmco: unref short failure
[h264 @ 0x55863b679000] mmco: unref short failure
[h264 @ 0x557728d6d280] mmco: unref short failure
[h264 @ 0x557728d6d280] mmco: unref short failure
[h264 @ 0x5556e27d8580] mmco: unref short failure
[h264 @ 0x5556e27d8580] mmco: unref short failure
[h264 @ 0x55864ae5c400] mmco: unref short failure
[h264 @ 0x55864ae5c400] mmco: unref short failure
[h264 @ 0x55863e25be80] mmco: unref short failure
[h264 @ 0x55863e25be80] mmco: unref short failure
[h264 @ 0x55863e25be80] mmco: unref short failure
[h264 @ 0x55863e25be80] mmco: unref short failure
[h264 @ 0x56355e97be40] mmco: unref short failure
[h264 @ 0x56355e97be40] mmco: unref short failure
[h264 @ 0x55863aff6000] mmco: unref short failure
[h264 @ 0x557726bae300] mmco: unref short failure
[h264 @ 0x5576dfe4f080] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
[h264 @ 0x5556dfb92e00] mmco: unref short failure
 51%|█████     | 1474/2910 [9:18:58<11:40:09, 29.25s/it][h264 @ 0x557736b77300] mmco: unref short failure
[h264 @ 0x557736b77300] mmco: unref short failure
[h264 @ 0x5556c5e6fc80] mmco: unref short failure
[h264 @ 0x5556c5e6fc80] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x5556d1fa7e40] mmco: unref short failure
[h264 @ 0x56355e53d600] mmco: unref short failure
[h264 @ 0x56355e53d600] mmco: unref short failure
[h264 @ 0x5635651994c0] mmco: unref short failure
[h264 @ 0x563543eec7c0] mmco: unref short failure
[h264 @ 0x563543eec7c0] mmco: unref short failure
 51%|█████     | 1475/2910 [9:19:21<10:50:18, 27.19s/it]09/17/2024 09:15:24 - INFO - __main__ -   current idx j2qj01KI9hk.13 from finetune_area returns wrong image/video, use 40045 instead.
09/17/2024 09:15:29 - INFO - __main__ -   current idx etzSHiVFPL8.12 from finetune_area returns wrong image/video, use 2409 instead.
[h264 @ 0x55772bbbed80] mmco: unref short failure
[h264 @ 0x55772bbbed80] mmco: unref short failure
 51%|█████     | 1476/2910 [9:19:33<9:03:41, 22.75s/it] [h264 @ 0x557717ab5040] mmco: unref short failure
[h264 @ 0x557717ab5040] mmco: unref short failure
[h264 @ 0x5586339bb000] mmco: unref short failure
[h264 @ 0x5586339bb000] mmco: unref short failure
 51%|█████     | 1477/2910 [9:19:44<7:39:32, 19.24s/it][h264 @ 0x55772bbc4540] mmco: unref short failure
 51%|█████     | 1478/2910 [9:19:52<6:15:18, 15.73s/it][h264 @ 0x55772489a7c0] mmco: unref short failure
 51%|█████     | 1479/2910 [9:19:58<5:09:21, 12.97s/it] 51%|█████     | 1480/2910 [9:20:06<4:30:56, 11.37s/it][h264 @ 0x5586467402c0] mmco: unref short failure
[h264 @ 0x55772d5b7b00] mmco: unref short failure
[h264 @ 0x5577366fa380] mmco: unref short failure
[h264 @ 0x5577366fa380] mmco: unref short failure
 51%|█████     | 1481/2910 [9:20:12<3:55:44,  9.90s/it][h264 @ 0x5556d27cb300] mmco: unref short failure
[h264 @ 0x55863c2f0800] mmco: unref short failure
[h264 @ 0x55865456b800] mmco: unref short failure
[h264 @ 0x55865456b800] mmco: unref short failure
[h264 @ 0x558632737e40] mmco: unref short failure
[h264 @ 0x558632737e40] mmco: unref short failure
[h264 @ 0x558632737e40] mmco: unref short failure
[h264 @ 0x558632737e40] mmco: unref short failure
[h264 @ 0x5556e28c4340] mmco: unref short failure
[h264 @ 0x5556e28c4340] mmco: unref short failure
[h264 @ 0x558654e52500] mmco: unref short failure
[h264 @ 0x558654e52500] mmco: unref short failure
[h264 @ 0x5556c41c0740] mmco: unref short failure
[h264 @ 0x5556deb78d80] mmco: unref short failure
[h264 @ 0x5556deb78d80] mmco: unref short failure
[h264 @ 0x5556dc53b8c0] mmco: unref short failure
[h264 @ 0x5556dc53b8c0] mmco: unref short failure
[h264 @ 0x5556dc53b8c0] mmco: unref short failure
[h264 @ 0x5556dbcaf580] mmco: unref short failure
[h264 @ 0x5556dbcaf580] mmco: unref short failure
[h264 @ 0x55863c459cc0] mmco: unref short failure
[h264 @ 0x5635571d1e40] mmco: unref short failure
[h264 @ 0x5635571d1e40] mmco: unref short failure
[h264 @ 0x55863310b540] mmco: unref short failure
[h264 @ 0x55863310b540] mmco: unref short failure
[h264 @ 0x55863310b540] mmco: unref short failure
[h264 @ 0x55863310b540] mmco: unref short failure
[h264 @ 0x557729c17e00] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x55865459be80] mmco: unref short failure
[h264 @ 0x5556ccf65dc0] mmco: unref short failure
[h264 @ 0x5556e2114640] mmco: unref short failure
[h264 @ 0x5556d3710880] mmco: unref short failure
[h264 @ 0x5556d3710880] mmco: unref short failure
 51%|█████     | 1482/2910 [9:21:33<12:17:20, 30.98s/it][h264 @ 0x5577310e80c0] mmco: unref short failure
[h264 @ 0x55773388ad80] mmco: unref short failure
[h264 @ 0x5556d3f70a40] mmco: unref short failure
[h264 @ 0x55773388ad80] mmco: unref short failure
 51%|█████     | 1483/2910 [9:21:47<10:16:33, 25.92s/it][h264 @ 0x55771ce8be80] mmco: unref short failure
 51%|█████     | 1484/2910 [9:22:02<8:57:30, 22.62s/it] [h264 @ 0x55863eb5a540] mmco: unref short failure
[h264 @ 0x55863eb5a540] mmco: unref short failure
[h264 @ 0x5576dee93380] mmco: unref short failure
 51%|█████     | 1485/2910 [9:22:11<7:23:51, 18.69s/it][h264 @ 0x5556ceec8b80] mmco: unref short failure
 51%|█████     | 1486/2910 [9:22:19<6:04:26, 15.36s/it][h264 @ 0x5556dfa18f00] mmco: unref short failure
[h264 @ 0x5556dfa18f00] mmco: unref short failure
[h264 @ 0x5556dfa18f00] mmco: unref short failure
[h264 @ 0x5556dfa18f00] mmco: unref short failure
[h264 @ 0x5635572f3880] mmco: unref short failure
[h264 @ 0x5635572f3880] mmco: unref short failure
[h264 @ 0x55864d1ad600] mmco: unref short failure
[h264 @ 0x55864d1ad600] mmco: unref short failure
[h264 @ 0x55772c6b7dc0] mmco: unref short failure
[h264 @ 0x56355441ec80] mmco: unref short failure
[h264 @ 0x56355441ec80] mmco: unref short failure
[h264 @ 0x563560dd0d80] mmco: unref short failure
[h264 @ 0x563560dd0d80] mmco: unref short failure
[h264 @ 0x55772ab06840] mmco: unref short failure
[h264 @ 0x55772ab06840] mmco: unref short failure
 51%|█████     | 1487/2910 [9:22:30<5:36:07, 14.17s/it][h264 @ 0x5556df2e3740] mmco: unref short failure
[h264 @ 0x5556df2e3740] mmco: unref short failure
 51%|█████     | 1488/2910 [9:22:38<4:49:54, 12.23s/it][h264 @ 0x5556cddf5700] mmco: unref short failure
[h264 @ 0x55863a77b3c0] mmco: unref short failure
[h264 @ 0x56355b58c4c0] mmco: unref short failure
[h264 @ 0x56355b58c4c0] mmco: unref short failure
 51%|█████     | 1489/2910 [9:22:44<4:09:58, 10.56s/it][h264 @ 0x55568c070b80] mmco: unref short failure
[h264 @ 0x55568c070b80] mmco: unref short failure
[h264 @ 0x558645fa9b40] mmco: unref short failure
[h264 @ 0x558645fa9b40] mmco: unref short failure
[h264 @ 0x56354cfcff00] mmco: unref short failure
[h264 @ 0x56354cfcff00] mmco: unref short failure
[h264 @ 0x5556cacfc3c0] mmco: unref short failure
[h264 @ 0x55568c4ffc40] mmco: unref short failure
[h264 @ 0x55568c4ffc40] mmco: unref short failure
[h264 @ 0x55568bd34e40] mmco: unref short failure
[h264 @ 0x55568bd34e40] mmco: unref short failure
[h264 @ 0x56354de40d00] mmco: unref short failure
[h264 @ 0x56354de40d00] mmco: unref short failure
[h264 @ 0x558640c4d540] mmco: unref short failure
[h264 @ 0x558640c4d540] mmco: unref short failure
09/17/2024 09:19:20 - INFO - __main__ -   current idx MmDkvBFAU-o.42 from finetune_area returns wrong image/video, use 22670 instead.
[h264 @ 0x5576de8c5d40] mmco: unref short failure
[h264 @ 0x5576de33ca40] mmco: unref short failure
[h264 @ 0x563557925840] mmco: unref short failure
[h264 @ 0x563557925840] mmco: unref short failure
[h264 @ 0x56354342d4c0] mmco: unref short failure
[h264 @ 0x56354342d4c0] mmco: unref short failure
[h264 @ 0x55772922bc00] mmco: unref short failure
[h264 @ 0x55772922bc00] mmco: unref short failure
[h264 @ 0x55771ba8a940] mmco: unref short failure
[h264 @ 0x55771ba8a940] mmco: unref short failure
[h264 @ 0x5586511c5c80] mmco: unref short failure
[h264 @ 0x5586511c5c80] mmco: unref short failure
09/17/2024 09:19:46 - INFO - __main__ -   current idx LinP-eK5Rvc.47 from finetune_area returns wrong image/video, use 97324 instead.
[h264 @ 0x557732ea8380] mmco: unref short failure
 51%|█████     | 1490/2910 [9:24:06<12:36:03, 31.95s/it][h264 @ 0x5556c6bf1a40] mmco: unref short failure
 51%|█████     | 1491/2910 [9:24:16<9:56:31, 25.22s/it]  51%|█████▏    | 1492/2910 [9:24:27<8:15:29, 20.97s/it][h264 @ 0x55864d20db40] mmco: unref short failure
[h264 @ 0x55864d20db40] mmco: unref short failure
[h264 @ 0x5576df01a780] mmco: unref short failure
[h264 @ 0x558648ecc600] mmco: unref short failure
[h264 @ 0x558648ecc600] mmco: unref short failure
 51%|█████▏    | 1493/2910 [9:24:42<7:36:41, 19.34s/it][h264 @ 0x5556cc71c140] mmco: unref short failure
[h264 @ 0x5556cc71c140] mmco: unref short failure
 51%|█████▏    | 1494/2910 [9:24:50<6:15:50, 15.93s/it][h264 @ 0x5556c471dc80] mmco: unref short failure
[h264 @ 0x5556d8fcac80] mmco: unref short failure
[h264 @ 0x5556d8fcac80] mmco: unref short failure
[h264 @ 0x56354c7df2c0] mmco: unref short failure
[h264 @ 0x56354c7df2c0] mmco: unref short failure
 51%|█████▏    | 1495/2910 [9:25:02<5:47:13, 14.72s/it][h264 @ 0x5556c5c20d80] mmco: unref short failure
 51%|█████▏    | 1496/2910 [9:25:10<4:56:12, 12.57s/it][h264 @ 0x55863cdd4cc0] mmco: unref short failure
[h264 @ 0x55864ae72840] mmco: unref short failure
[h264 @ 0x5556ceec8b80] mmco: unref short failure
[h264 @ 0x5556ceec8b80] mmco: unref short failure
 51%|█████▏    | 1497/2910 [9:25:21<4:46:28, 12.16s/it]09/17/2024 09:21:28 - INFO - __main__ -   current idx EMPLLx_tfq8.250 from finetune_area returns wrong image/video, use 90458 instead.
[h264 @ 0x55772cfc3780] mmco: unref short failure
[h264 @ 0x5576df1e4b40] mmco: unref short failure
[h264 @ 0x5576df1e4b40] mmco: unref short failure
[h264 @ 0x5576df1e4b40] mmco: unref short failure
[h264 @ 0x5576df1e4b40] mmco: unref short failure
[h264 @ 0x558633de8c00] mmco: unref short failure
[h264 @ 0x558633de8c00] mmco: unref short failure
[h264 @ 0x55771ad13480] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x558640362180] mmco: unref short failure
[h264 @ 0x563547c848c0] mmco: unref short failure
[h264 @ 0x557736564200] mmco: unref short failure
[h264 @ 0x55568cbd6a80] mmco: unref short failure
[h264 @ 0x5576de8c5cc0] mmco: unref short failure
[h264 @ 0x5556cc6c0c40] mmco: unref short failure
[h264 @ 0x558656f27f80] mmco: unref short failure
[h264 @ 0x558656f27f80] mmco: unref short failure
[h264 @ 0x5556d1d19bc0] mmco: unref short failure
[h264 @ 0x5556d1d19bc0] mmco: unref short failure
[h264 @ 0x55773510f680] mmco: unref short failure
[h264 @ 0x55773510f680] mmco: unref short failure
[h264 @ 0x558639f0c640] mmco: unref short failure
[h264 @ 0x558639f0c640] mmco: unref short failure
[h264 @ 0x558639f0c640] mmco: unref short failure
[h264 @ 0x558639f0c640] mmco: unref short failure
[h264 @ 0x558635741a40] mmco: unref short failure
[h264 @ 0x563546c6d380] mmco: unref short failure
 51%|█████▏    | 1498/2910 [9:26:42<12:55:04, 32.94s/it] 52%|█████▏    | 1499/2910 [9:26:49<9:51:24, 25.15s/it] 09/17/2024 09:22:48 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 09:22:48 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x55771ed65f40] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772e047dc0] mmco: unref short failure
[h264 @ 0x55772e047dc0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x558645860e80] mmco: unref short failure
[h264 @ 0x558645860e80] mmco: unref short failure
[h264 @ 0x55772cbb5440] mmco: unref short failure
[h264 @ 0x55772cbb5440] mmco: unref short failure
[h264 @ 0x55772cbb5440] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556cdf7c4c0] mmco: unref short failure
[h264 @ 0x563547c848c0] mmco: unref short failure
[h264 @ 0x5556cf1bd540] mmco: unref short failure
09/17/2024 09:24:22 - INFO - __main__ -   current idx -bLVFJgtJwI.0 from finetune_area returns wrong image/video, use 137540 instead.
[h264 @ 0x56354817d240] mmco: unref short failure
[h264 @ 0x56354817d240] mmco: unref short failure
[h264 @ 0x557725f65b00] mmco: unref short failure
[h264 @ 0x557725f65b00] mmco: unref short failure
[h264 @ 0x557725f65b00] mmco: unref short failure
[h264 @ 0x557725f65b00] mmco: unref short failure
[h264 @ 0x5556d7ce2200] mmco: unref short failure
[h264 @ 0x5556d7ce2200] mmco: unref short failure
[h264 @ 0x563554e5b640] mmco: unref short failure
[h264 @ 0x563554e5b640] mmco: unref short failure
[h264 @ 0x56356204dd80] mmco: unref short failure
[h264 @ 0x55773640bd40] mmco: unref short failure
[h264 @ 0x55773640bd40] mmco: unref short failure
[h264 @ 0x55772c550140] mmco: unref short failure
[h264 @ 0x56354ad5f1c0] mmco: unref short failure
[h264 @ 0x56354ad5f1c0] mmco: unref short failure
[h264 @ 0x563558aa6740] mmco: unref short failure
[h264 @ 0x563558aa6740] mmco: unref short failure
[h264 @ 0x563558aa6740] mmco: unref short failure
[h264 @ 0x563558aa6740] mmco: unref short failure
[h264 @ 0x5556c9b08a00] mmco: unref short failure
[h264 @ 0x5556c9b08a00] mmco: unref short failure
[h264 @ 0x557736dfc040] mmco: unref short failure
[h264 @ 0x557736dfc040] mmco: unref short failure
[h264 @ 0x55568ceddd00] mmco: unref short failure
[h264 @ 0x55568ceddd00] mmco: unref short failure
[h264 @ 0x5586371aa700] mmco: unref short failure
[h264 @ 0x5586371aa700] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:38,  1.01it/s][A
  1%|          | 2/221 [00:01<02:23,  1.53it/s][A
  1%|▏         | 3/221 [00:01<01:30,  2.42it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.38it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.27it/s][A
  3%|▎         | 6/221 [00:01<00:42,  5.08it/s][A
  3%|▎         | 7/221 [00:02<00:41,  5.19it/s][A
  4%|▎         | 8/221 [00:02<01:05,  3.23it/s][A
  4%|▍         | 9/221 [00:03<01:21,  2.60it/s][A
  5%|▍         | 10/221 [00:03<01:13,  2.89it/s][A[h264 @ 0x55771c4c4fc0] mmco: unref short failure

  5%|▌         | 12/221 [00:04<01:32,  2.26it/s][A
  6%|▌         | 13/221 [00:04<01:18,  2.64it/s][A
  6%|▋         | 14/221 [00:05<01:11,  2.88it/s][A
  7%|▋         | 15/221 [00:05<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:05<00:55,  3.72it/s][A
  8%|▊         | 17/221 [00:05<00:52,  3.88it/s][A
  8%|▊         | 18/221 [00:05<00:49,  4.14it/s][A
  9%|▊         | 19/221 [00:05<00:43,  4.63it/s][A
  9%|▉         | 20/221 [00:06<00:39,  5.15it/s][A
 10%|▉         | 21/221 [00:06<00:34,  5.72it/s][A
 10%|▉         | 22/221 [00:06<00:41,  4.82it/s][A
 10%|█         | 23/221 [00:06<00:39,  4.98it/s][A
 11%|█         | 24/221 [00:06<00:40,  4.90it/s][A
 11%|█▏        | 25/221 [00:07<00:36,  5.41it/s][A
 12%|█▏        | 26/221 [00:07<00:38,  5.00it/s][A
 12%|█▏        | 27/221 [00:07<00:33,  5.83it/s][A
 13%|█▎        | 28/221 [00:07<00:41,  4.70it/s][A
 13%|█▎        | 29/221 [00:07<00:34,  5.55it/s][A
 14%|█▎        | 30/221 [00:07<00:31,  6.00it/s][A
 14%|█▍        | 31/221 [00:08<00:29,  6.47it/s][A
 14%|█▍        | 32/221 [00:08<00:26,  7.09it/s][A
 15%|█▍        | 33/221 [00:08<00:38,  4.86it/s][A
 15%|█▌        | 34/221 [00:08<00:38,  4.87it/s][A
 16%|█▌        | 35/221 [00:08<00:41,  4.53it/s][A
 16%|█▋        | 36/221 [00:09<00:38,  4.76it/s][A
 17%|█▋        | 37/221 [00:09<01:05,  2.81it/s][A
 17%|█▋        | 38/221 [00:10<01:03,  2.86it/s][A
 18%|█▊        | 39/221 [00:10<00:50,  3.60it/s][A
 18%|█▊        | 40/221 [00:10<00:46,  3.87it/s][A
 19%|█▊        | 41/221 [00:10<00:40,  4.45it/s][A[h264 @ 0x557732152480] mmco: unref short failure
[h264 @ 0x557732152480] mmco: unref short failure

 19%|█▉        | 42/221 [00:12<01:44,  1.71it/s][A
 19%|█▉        | 43/221 [00:12<01:19,  2.24it/s][A
 20%|█▉        | 44/221 [00:12<01:01,  2.86it/s][A
 20%|██        | 45/221 [00:13<01:29,  1.97it/s][A
 21%|██        | 46/221 [00:13<01:23,  2.09it/s][A[h264 @ 0x55568ceddd00] mmco: unref short failure

 21%|██▏       | 47/221 [00:17<04:05,  1.41s/it][A
 22%|██▏       | 48/221 [00:17<02:57,  1.02s/it][A
 22%|██▏       | 49/221 [00:17<02:10,  1.32it/s][A
 23%|██▎       | 50/221 [00:17<01:35,  1.78it/s][A
 24%|██▎       | 52/221 [00:17<01:02,  2.71it/s][A
 24%|██▍       | 53/221 [00:18<00:55,  3.03it/s][A
 24%|██▍       | 54/221 [00:19<01:21,  2.05it/s][A
 25%|██▍       | 55/221 [00:19<01:08,  2.43it/s][A
 25%|██▌       | 56/221 [00:19<00:55,  2.95it/s][A
 26%|██▌       | 57/221 [00:19<00:59,  2.75it/s][A
 26%|██▌       | 58/221 [00:19<00:48,  3.35it/s][A
 27%|██▋       | 59/221 [00:20<00:49,  3.27it/s][A
 27%|██▋       | 60/221 [00:20<00:47,  3.39it/s][A
 28%|██▊       | 61/221 [00:20<00:40,  3.96it/s][A
 28%|██▊       | 62/221 [00:20<00:34,  4.67it/s][A
 29%|██▊       | 63/221 [00:20<00:29,  5.32it/s][A
 29%|██▉       | 64/221 [00:21<00:25,  6.16it/s][A
 29%|██▉       | 65/221 [00:21<00:24,  6.38it/s][A
 30%|██▉       | 66/221 [00:21<00:41,  3.71it/s][A
 30%|███       | 67/221 [00:21<00:37,  4.11it/s][A
 31%|███       | 68/221 [00:22<00:38,  3.97it/s][A
 31%|███       | 69/221 [00:22<00:48,  3.10it/s][A
 32%|███▏      | 70/221 [00:22<00:40,  3.73it/s][A[h264 @ 0x55864cb58d00] mmco: unref short failure
[h264 @ 0x55864cb58d00] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:51,  1.54s/it][A
 33%|███▎      | 72/221 [00:27<02:52,  1.16s/it][A
 33%|███▎      | 73/221 [00:28<02:19,  1.06it/s][A
 33%|███▎      | 74/221 [00:28<01:44,  1.41it/s][A
 34%|███▍      | 75/221 [00:28<01:23,  1.76it/s][A
 34%|███▍      | 76/221 [00:28<01:06,  2.18it/s][A[h264 @ 0x563540bbdfc0] mmco: unref short failure

 35%|███▍      | 77/221 [00:28<00:59,  2.44it/s][A
 35%|███▌      | 78/221 [00:29<00:55,  2.58it/s][A
 36%|███▌      | 79/221 [00:30<01:13,  1.94it/s][A
 36%|███▌      | 80/221 [00:30<01:00,  2.32it/s][A
 37%|███▋      | 81/221 [00:30<00:49,  2.82it/s][A
 37%|███▋      | 82/221 [00:30<00:48,  2.84it/s][A
 38%|███▊      | 83/221 [00:31<00:44,  3.13it/s][A
 38%|███▊      | 84/221 [00:31<00:35,  3.84it/s][A
 38%|███▊      | 85/221 [00:31<00:30,  4.50it/s][A
 39%|███▉      | 86/221 [00:31<00:26,  5.12it/s][A
 39%|███▉      | 87/221 [00:31<00:32,  4.17it/s][A
 40%|███▉      | 88/221 [00:32<00:33,  3.94it/s][A
 40%|████      | 89/221 [00:36<03:02,  1.38s/it][A
 41%|████      | 90/221 [00:36<02:13,  1.02s/it][A
 42%|████▏     | 92/221 [00:36<01:17,  1.66it/s][A[h264 @ 0x55771b875d40] mmco: unref short failure
[h264 @ 0x55771b875d40] mmco: unref short failure

 42%|████▏     | 93/221 [00:37<01:21,  1.57it/s][A[h264 @ 0x55863f742b80] mmco: unref short failure
[h264 @ 0x55863f742b80] mmco: unref short failure

 43%|████▎     | 94/221 [00:38<01:25,  1.49it/s][A09/17/2024 09:25:51 - INFO - __main__ -   current idx Vz8EcN1saps.11 from finetune_area returns wrong image/video, use 67874 instead.

 43%|████▎     | 95/221 [00:38<01:06,  1.88it/s][A
 43%|████▎     | 96/221 [00:38<00:54,  2.31it/s][A
 44%|████▍     | 97/221 [00:38<00:42,  2.93it/s][A
 44%|████▍     | 98/221 [00:38<00:38,  3.21it/s][A
 45%|████▍     | 99/221 [00:38<00:36,  3.36it/s][A
 45%|████▌     | 100/221 [00:39<00:33,  3.65it/s][A
 46%|████▌     | 101/221 [00:39<00:33,  3.54it/s][A
 46%|████▌     | 102/221 [00:39<00:34,  3.44it/s][A
 47%|████▋     | 103/221 [00:39<00:27,  4.22it/s][A
 48%|████▊     | 105/221 [00:40<00:23,  4.88it/s][A
 48%|████▊     | 106/221 [00:40<00:34,  3.35it/s][A
 48%|████▊     | 107/221 [00:40<00:28,  3.96it/s][A
 49%|████▉     | 108/221 [00:41<00:26,  4.23it/s][A
 49%|████▉     | 109/221 [00:41<00:26,  4.25it/s][A
 50%|████▉     | 110/221 [00:41<00:22,  5.02it/s][A
 50%|█████     | 111/221 [00:41<00:29,  3.67it/s][A
 51%|█████     | 112/221 [00:42<00:26,  4.09it/s][A
 51%|█████     | 113/221 [00:42<00:27,  3.98it/s][A
 52%|█████▏    | 114/221 [00:42<00:22,  4.79it/s][A
 52%|█████▏    | 115/221 [00:42<00:18,  5.61it/s][A
 52%|█████▏    | 116/221 [00:47<02:50,  1.62s/it][A
 53%|█████▎    | 117/221 [00:47<02:06,  1.22s/it][A
 53%|█████▎    | 118/221 [00:48<01:38,  1.05it/s][A
[h264 @ 0x558657debf00] mmco: unref short failure
 54%|█████▍    | 119/221 [00:48<01:12,  1.40it/s][A[h264 @ 0x558657debf00] mmco: unref short failure

 54%|█████▍    | 120/221 [00:48<00:55,  1.83it/s][A
 55%|█████▍    | 121/221 [00:48<00:42,  2.36it/s][A09/17/2024 09:26:02 - INFO - __main__ -   current idx KjsaG0MFq-8.4 from finetune_area returns wrong image/video, use 89536 instead.

 55%|█████▌    | 122/221 [00:48<00:35,  2.78it/s][A
 56%|█████▌    | 123/221 [00:49<00:29,  3.36it/s][A
 56%|█████▌    | 124/221 [00:49<00:24,  3.94it/s][A
 57%|█████▋    | 125/221 [00:49<00:23,  4.10it/s][A
 57%|█████▋    | 126/221 [00:50<00:45,  2.10it/s][A
 57%|█████▋    | 127/221 [00:50<00:41,  2.27it/s][A
 58%|█████▊    | 128/221 [00:52<01:04,  1.44it/s][A[h264 @ 0x5635599c0740] mmco: unref short failure
[h264 @ 0x5635599c0740] mmco: unref short failure

 58%|█████▊    | 129/221 [00:52<00:53,  1.71it/s][A
 59%|█████▉    | 130/221 [00:52<00:42,  2.14it/s][A
 60%|█████▉    | 132/221 [00:52<00:28,  3.16it/s][A[h264 @ 0x5635456f1a80] mmco: unref short failure

 60%|██████    | 133/221 [00:53<00:28,  3.14it/s][A
 61%|██████    | 134/221 [00:53<00:25,  3.47it/s][A
 61%|██████    | 135/221 [00:53<00:24,  3.45it/s][A
 62%|██████▏   | 136/221 [00:54<00:33,  2.54it/s][A
 62%|██████▏   | 137/221 [00:55<00:40,  2.09it/s][A[mov,mp4,m4a,3gp,3g2,mj2 @ 0x56354b911f40] moov atom not found

 62%|██████▏   | 138/221 [00:56<01:00,  1.38it/s][A[h264 @ 0x5556dbc30f00] mmco: unref short failure
[h264 @ 0x5556dbc30f00] mmco: unref short failure
[h264 @ 0x5556dbc30f00] mmco: unref short failure

 63%|██████▎   | 139/221 [00:56<00:50,  1.62it/s][A
 63%|██████▎   | 140/221 [00:56<00:41,  1.96it/s][A
 64%|██████▍   | 141/221 [00:57<00:34,  2.31it/s][A
 64%|██████▍   | 142/221 [00:57<00:33,  2.38it/s][A
 65%|██████▍   | 143/221 [00:57<00:29,  2.62it/s][A
 65%|██████▌   | 144/221 [00:58<00:23,  3.26it/s][A
 66%|██████▌   | 145/221 [00:58<00:19,  3.97it/s][A
 66%|██████▌   | 146/221 [00:58<00:16,  4.63it/s][A
 67%|██████▋   | 147/221 [00:58<00:13,  5.43it/s][A
 67%|██████▋   | 148/221 [00:58<00:16,  4.43it/s][A
 67%|██████▋   | 149/221 [00:58<00:15,  4.79it/s][A
 68%|██████▊   | 150/221 [00:59<00:14,  4.76it/s][A
 68%|██████▊   | 151/221 [00:59<00:21,  3.26it/s][A
 69%|██████▉   | 152/221 [00:59<00:20,  3.30it/s][A
 69%|██████▉   | 153/221 [01:00<00:22,  2.98it/s][A
 70%|██████▉   | 154/221 [01:01<00:33,  2.01it/s][A
 70%|███████   | 155/221 [01:01<00:24,  2.64it/s][A[h264 @ 0x5556c6e19f80] mmco: unref short failure
[h264 @ 0x5556c6e19f80] mmco: unref short failure

 71%|███████   | 157/221 [01:06<01:28,  1.38s/it][A
 71%|███████▏  | 158/221 [01:06<01:07,  1.07s/it][A
 72%|███████▏  | 159/221 [01:06<00:51,  1.20it/s][A
 72%|███████▏  | 160/221 [01:06<00:40,  1.52it/s][A
 73%|███████▎  | 161/221 [01:07<00:32,  1.86it/s][A
 73%|███████▎  | 162/221 [01:07<00:24,  2.37it/s][A
 74%|███████▍  | 163/221 [01:07<00:21,  2.75it/s][A
 74%|███████▍  | 164/221 [01:07<00:19,  2.92it/s][A
 75%|███████▍  | 165/221 [01:07<00:15,  3.61it/s][A
 75%|███████▌  | 166/221 [01:08<00:17,  3.20it/s][A[h264 @ 0x5556cc905280] mmco: unref short failure
[h264 @ 0x5556cebddac0] mmco: unref short failure
[h264 @ 0x5556cc905280] mmco: unref short failure
[h264 @ 0x5635422a8440] mmco: unref short failure

 76%|███████▌  | 168/221 [01:12<01:02,  1.19s/it][A
 76%|███████▋  | 169/221 [01:13<00:50,  1.03it/s][A
 77%|███████▋  | 170/221 [01:13<00:40,  1.26it/s][A
 77%|███████▋  | 171/221 [01:13<00:31,  1.61it/s][A
 78%|███████▊  | 172/221 [01:13<00:23,  2.07it/s][A
 78%|███████▊  | 173/221 [01:13<00:18,  2.54it/s][A
 79%|███████▉  | 175/221 [01:14<00:12,  3.59it/s][A
 80%|███████▉  | 176/221 [01:14<00:12,  3.58it/s][A
 80%|████████  | 177/221 [01:14<00:10,  4.17it/s][A
 81%|████████  | 178/221 [01:14<00:10,  4.13it/s][A
 81%|████████  | 179/221 [01:17<00:40,  1.03it/s][A
 82%|████████▏ | 181/221 [01:17<00:23,  1.68it/s][A
 82%|████████▏ | 182/221 [01:17<00:18,  2.06it/s][A
 83%|████████▎ | 183/221 [01:18<00:15,  2.46it/s][A
 83%|████████▎ | 184/221 [01:18<00:12,  2.87it/s][A[h264 @ 0x5556e4b6c8c0] mmco: unref short failure

 84%|████████▎ | 185/221 [01:18<00:10,  3.44it/s][A[h264 @ 0x557728c42780] mmco: unref short failure
[h264 @ 0x557728c42780] mmco: unref short failure

 84%|████████▍ | 186/221 [01:18<00:09,  3.56it/s][A
 85%|████████▍ | 187/221 [01:18<00:07,  4.31it/s][A
 85%|████████▌ | 188/221 [01:19<00:07,  4.43it/s][A[h264 @ 0x55568bd86840] mmco: unref short failure

 86%|████████▌ | 189/221 [01:19<00:07,  4.04it/s][A
 86%|████████▌ | 190/221 [01:19<00:07,  4.34it/s][A
 87%|████████▋ | 192/221 [01:19<00:05,  5.75it/s][A
 87%|████████▋ | 193/221 [01:19<00:04,  5.64it/s][A
 88%|████████▊ | 194/221 [01:21<00:11,  2.37it/s][A
 88%|████████▊ | 195/221 [01:21<00:08,  2.89it/s][A
 89%|████████▉ | 197/221 [01:21<00:05,  4.41it/s][A
 90%|█████████ | 199/221 [01:21<00:04,  4.66it/s][A
 90%|█████████ | 200/221 [01:22<00:05,  4.13it/s][A
 91%|█████████ | 201/221 [01:22<00:04,  4.22it/s][A
 91%|█████████▏| 202/221 [01:22<00:03,  4.88it/s][A
 92%|█████████▏| 203/221 [01:22<00:03,  4.88it/s][A
 93%|█████████▎| 205/221 [01:22<00:02,  6.26it/s][A
 93%|█████████▎| 206/221 [01:23<00:02,  5.80it/s][A
 94%|█████████▍| 208/221 [01:23<00:01,  7.90it/s][A
 95%|█████████▌| 210/221 [01:23<00:01,  9.59it/s][A
 96%|█████████▌| 212/221 [01:24<00:02,  4.32it/s][A
 97%|█████████▋| 214/221 [01:25<00:02,  2.67it/s][A
 97%|█████████▋| 215/221 [01:25<00:02,  2.95it/s][A
 98%|█████████▊| 216/221 [01:25<00:01,  3.21it/s][A
 98%|█████████▊| 217/221 [01:27<00:02,  1.65it/s][A
 99%|█████████▊| 218/221 [01:28<00:01,  1.55it/s][A
 99%|█████████▉| 219/221 [01:28<00:01,  1.93it/s][A[h264 @ 0x5556e4b6c8c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:33<00:01,  1.73s/it][A100%|██████████| 221/221 [01:33<00:00,  2.36it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:05,  3.35it/s][A
  1%|          | 2/221 [00:00<01:04,  3.38it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.33it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.35it/s][A
  2%|▏         | 5/221 [00:01<01:08,  3.14it/s][A
  3%|▎         | 6/221 [00:01<01:06,  3.22it/s][A
  3%|▎         | 7/221 [00:02<01:06,  3.23it/s][A
  4%|▎         | 8/221 [00:02<01:05,  3.26it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:05,  3.20it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.26it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.30it/s][A
  6%|▌         | 13/221 [00:03<01:03,  3.27it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.27it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:04<01:01,  3.31it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.28it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.31it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.33it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.36it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.30it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.32it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.34it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.36it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.37it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.37it/s][A[h264 @ 0x55771feb1bc0] mmco: unref short failure
[h264 @ 0x55771feb1bc0] mmco: unref short failure

 12%|█▏        | 27/221 [00:08<00:57,  3.38it/s][A
 13%|█▎        | 28/221 [00:08<00:56,  3.39it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.39it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.37it/s][A[h264 @ 0x55771b492dc0] mmco: unref short failure
[h264 @ 0x55771b492dc0] mmco: unref short failure

 14%|█▍        | 32/221 [00:09<00:56,  3.36it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.38it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.38it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.39it/s][A
 16%|█▋        | 36/221 [00:10<00:54,  3.39it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 39/221 [00:11<00:53,  3.38it/s][A
 18%|█▊        | 40/221 [00:12<00:54,  3.33it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.35it/s][A
 19%|█▉        | 42/221 [00:12<00:54,  3.27it/s][A
 19%|█▉        | 43/221 [00:12<00:56,  3.17it/s][A
 20%|█▉        | 44/221 [00:13<00:54,  3.24it/s][A
 20%|██        | 45/221 [00:13<00:53,  3.29it/s][A
 21%|██        | 46/221 [00:13<00:52,  3.32it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.35it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.36it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.37it/s][A
 23%|██▎       | 50/221 [00:15<00:50,  3.38it/s][A
 23%|██▎       | 51/221 [00:15<00:50,  3.39it/s][A
 24%|██▎       | 52/221 [00:15<00:50,  3.35it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.36it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.37it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.38it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.38it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.37it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.35it/s][A
 27%|██▋       | 59/221 [00:17<00:48,  3.37it/s][A
 27%|██▋       | 60/221 [00:18<00:47,  3.38it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.39it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.39it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.40it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.40it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.40it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.40it/s][A
 30%|███       | 67/221 [00:20<00:45,  3.40it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.41it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:25<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:30<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:32<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:34<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:37<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:39<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:46<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:51<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:58<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:03<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:05<00:00,  3.42it/s][A100%|██████████| 221/221 [01:05<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.42it/s][A
  1%|          | 2/221 [00:00<00:44,  4.88it/s][A
  1%|▏         | 3/221 [00:00<01:01,  3.53it/s][A
  2%|▏         | 4/221 [00:00<00:52,  4.17it/s][A
  2%|▏         | 5/221 [00:01<00:44,  4.82it/s][A
  3%|▎         | 6/221 [00:01<00:43,  4.97it/s][A
  3%|▎         | 7/221 [00:01<00:51,  4.13it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.43it/s][A
  4%|▍         | 9/221 [00:02<01:05,  3.25it/s][A
  5%|▍         | 10/221 [00:02<01:01,  3.42it/s][A
  5%|▍         | 11/221 [00:02<00:56,  3.75it/s][A
  5%|▌         | 12/221 [00:03<00:50,  4.11it/s][A
  6%|▌         | 13/221 [00:03<01:16,  2.73it/s][A
  6%|▋         | 14/221 [00:03<01:12,  2.85it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.91it/s][A
  7%|▋         | 16/221 [00:04<01:15,  2.71it/s][A
  8%|▊         | 17/221 [00:05<01:24,  2.40it/s][A
  8%|▊         | 18/221 [00:05<01:18,  2.57it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.68it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.04it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.31it/s][A
 10%|█         | 23/221 [00:06<00:41,  4.77it/s][A
 11%|█         | 24/221 [00:06<00:41,  4.78it/s][A
 11%|█▏        | 25/221 [00:06<00:51,  3.78it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.70it/s][A
 12%|█▏        | 27/221 [00:07<00:51,  3.77it/s][A
 13%|█▎        | 28/221 [00:07<00:52,  3.70it/s][A
 13%|█▎        | 29/221 [00:08<00:51,  3.75it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.42it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.47it/s][A
 14%|█▍        | 32/221 [00:08<00:47,  3.94it/s][A
 15%|█▍        | 33/221 [00:09<00:49,  3.77it/s][A
 15%|█▌        | 34/221 [00:09<00:55,  3.35it/s][A
 16%|█▌        | 35/221 [00:09<00:52,  3.53it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.29it/s][A
 17%|█▋        | 37/221 [00:10<00:50,  3.63it/s][A
 17%|█▋        | 38/221 [00:10<00:52,  3.46it/s][A
 18%|█▊        | 39/221 [00:10<00:51,  3.56it/s][A
 18%|█▊        | 40/221 [00:11<00:50,  3.55it/s][A
 19%|█▊        | 41/221 [00:11<00:50,  3.55it/s][A
 19%|█▉        | 42/221 [00:11<00:46,  3.87it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.42it/s][A
 20%|█▉        | 44/221 [00:12<00:57,  3.10it/s][A
 20%|██        | 45/221 [00:12<01:04,  2.72it/s][A
 21%|██        | 46/221 [00:13<01:06,  2.64it/s][A
 21%|██▏       | 47/221 [00:13<00:59,  2.93it/s][A
 22%|██▏       | 48/221 [00:13<00:50,  3.43it/s][A
 23%|██▎       | 50/221 [00:14<00:47,  3.62it/s][A
 23%|██▎       | 51/221 [00:14<00:48,  3.52it/s][A
 24%|██▍       | 53/221 [00:15<00:48,  3.46it/s][A
 24%|██▍       | 54/221 [00:15<00:45,  3.63it/s][A
 25%|██▍       | 55/221 [00:15<00:52,  3.18it/s][A
 25%|██▌       | 56/221 [00:16<00:54,  3.05it/s][A
 26%|██▌       | 57/221 [00:16<00:51,  3.18it/s][A
 26%|██▌       | 58/221 [00:16<00:45,  3.56it/s][A
 27%|██▋       | 59/221 [00:16<00:43,  3.71it/s][A
 27%|██▋       | 60/221 [00:17<00:38,  4.15it/s][A
 28%|██▊       | 61/221 [00:17<00:37,  4.24it/s][A
 28%|██▊       | 62/221 [00:17<00:39,  4.03it/s][A
 29%|██▉       | 64/221 [00:17<00:30,  5.13it/s][A
 29%|██▉       | 65/221 [00:18<00:31,  4.89it/s][A
 30%|██▉       | 66/221 [00:18<00:39,  3.90it/s][A
 30%|███       | 67/221 [00:18<00:42,  3.59it/s][A
 31%|███       | 68/221 [00:19<00:45,  3.35it/s][A
 31%|███       | 69/221 [00:19<00:59,  2.55it/s][A
 32%|███▏      | 70/221 [00:20<00:56,  2.68it/s][A
 32%|███▏      | 71/221 [00:20<00:52,  2.87it/s][A
 33%|███▎      | 72/221 [00:20<00:51,  2.91it/s][A
 33%|███▎      | 73/221 [00:21<00:49,  2.97it/s][A
 33%|███▎      | 74/221 [00:21<00:45,  3.24it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.47it/s][A
 34%|███▍      | 76/221 [00:21<00:37,  3.84it/s][A
 35%|███▍      | 77/221 [00:21<00:32,  4.41it/s][A
 35%|███▌      | 78/221 [00:22<00:36,  3.94it/s][A
 36%|███▌      | 79/221 [00:22<00:37,  3.77it/s][A
 36%|███▌      | 80/221 [00:22<00:31,  4.45it/s][A
 37%|███▋      | 81/221 [00:22<00:30,  4.61it/s][A
 37%|███▋      | 82/221 [00:23<00:43,  3.17it/s][A
 38%|███▊      | 84/221 [00:24<00:48,  2.85it/s][A
 38%|███▊      | 85/221 [00:24<00:46,  2.90it/s][A
 39%|███▉      | 86/221 [00:24<00:51,  2.65it/s][A
 39%|███▉      | 87/221 [00:25<00:51,  2.60it/s][A
 40%|███▉      | 88/221 [00:25<00:48,  2.75it/s][A
 40%|████      | 89/221 [00:25<00:45,  2.93it/s][A
 41%|████      | 90/221 [00:26<00:51,  2.55it/s][A
 41%|████      | 91/221 [00:26<00:43,  2.96it/s][A
 42%|████▏     | 92/221 [00:27<00:45,  2.81it/s][A
 42%|████▏     | 93/221 [00:27<00:49,  2.57it/s][A
 43%|████▎     | 94/221 [00:27<00:45,  2.77it/s][A
 43%|████▎     | 95/221 [00:28<00:51,  2.42it/s][A
 43%|████▎     | 96/221 [00:28<00:51,  2.44it/s][A
 44%|████▍     | 97/221 [00:29<00:47,  2.58it/s][A
 44%|████▍     | 98/221 [00:29<00:47,  2.57it/s][A
 45%|████▍     | 99/221 [00:29<00:42,  2.84it/s][A
 45%|████▌     | 100/221 [00:29<00:37,  3.25it/s][A
 46%|████▌     | 101/221 [00:30<00:33,  3.60it/s][A
 46%|████▌     | 102/221 [00:30<00:32,  3.66it/s][A
 47%|████▋     | 103/221 [00:30<00:30,  3.85it/s][A
 47%|████▋     | 104/221 [00:30<00:26,  4.45it/s][A
 48%|████▊     | 105/221 [00:31<00:29,  3.89it/s][A
 48%|████▊     | 106/221 [00:31<00:37,  3.05it/s][A
 48%|████▊     | 107/221 [00:31<00:37,  3.07it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.70it/s][A
 49%|████▉     | 109/221 [00:32<00:28,  3.92it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.45it/s][A
 50%|█████     | 111/221 [00:33<00:32,  3.39it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.45it/s][A
 51%|█████     | 113/221 [00:33<00:33,  3.26it/s][A
 52%|█████▏    | 114/221 [00:33<00:27,  3.88it/s][A
 52%|█████▏    | 115/221 [00:33<00:24,  4.36it/s][A
 52%|█████▏    | 116/221 [00:34<00:24,  4.30it/s][A
 53%|█████▎    | 117/221 [00:34<00:25,  4.04it/s][A
 53%|█████▎    | 118/221 [00:34<00:27,  3.71it/s][A
 54%|█████▍    | 119/221 [00:35<00:32,  3.13it/s][A
 54%|█████▍    | 120/221 [00:35<00:37,  2.67it/s][A
 55%|█████▍    | 121/221 [00:36<00:34,  2.88it/s][A
 55%|█████▌    | 122/221 [00:36<00:30,  3.19it/s][A
 56%|█████▌    | 123/221 [00:36<00:32,  2.97it/s][A
 56%|█████▌    | 124/221 [00:37<00:34,  2.82it/s][A
 57%|█████▋    | 125/221 [00:37<00:39,  2.44it/s][A
 57%|█████▋    | 126/221 [00:37<00:36,  2.61it/s][A
 57%|█████▋    | 127/221 [00:38<00:35,  2.64it/s][A
 58%|█████▊    | 128/221 [00:38<00:31,  2.91it/s][A
 58%|█████▊    | 129/221 [00:38<00:25,  3.58it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.57it/s][A
 59%|█████▉    | 131/221 [00:39<00:24,  3.64it/s][A
 60%|█████▉    | 132/221 [00:39<00:22,  4.02it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.46it/s][A
 61%|██████    | 134/221 [00:40<00:27,  3.20it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.56it/s][A
 62%|██████▏   | 136/221 [00:40<00:23,  3.55it/s][A
 62%|██████▏   | 137/221 [00:40<00:22,  3.75it/s][A
 62%|██████▏   | 138/221 [00:41<00:21,  3.78it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.05it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.48it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.87it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.33it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.36it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.23it/s][A
 66%|██████▌   | 145/221 [00:43<00:26,  2.83it/s][A
 66%|██████▌   | 146/221 [00:43<00:24,  3.09it/s][A
 67%|██████▋   | 147/221 [00:43<00:20,  3.57it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.95it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:19,  3.56it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.26it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.27it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.43it/s][A
 70%|██████▉   | 154/221 [00:46<00:28,  2.35it/s][A
 70%|███████   | 155/221 [00:47<00:25,  2.57it/s][A
 71%|███████   | 156/221 [00:47<00:22,  2.90it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.31it/s][A
 71%|███████▏  | 158/221 [00:48<00:21,  2.92it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.10it/s][A
 72%|███████▏  | 160/221 [00:48<00:18,  3.28it/s][A
 73%|███████▎  | 161/221 [00:48<00:15,  3.94it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.62it/s][A
 74%|███████▍  | 164/221 [00:49<00:12,  4.55it/s][A
 75%|███████▍  | 165/221 [00:49<00:15,  3.62it/s][A
 75%|███████▌  | 166/221 [00:50<00:18,  2.98it/s][A
 76%|███████▌  | 167/221 [00:50<00:14,  3.67it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.54it/s][A
 77%|███████▋  | 170/221 [00:51<00:13,  3.92it/s][A
 77%|███████▋  | 171/221 [00:51<00:12,  3.89it/s][A
 78%|███████▊  | 172/221 [00:51<00:12,  3.83it/s][A
 78%|███████▊  | 173/221 [00:51<00:13,  3.52it/s][A
 79%|███████▊  | 174/221 [00:52<00:15,  3.09it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.28it/s][A
 80%|███████▉  | 176/221 [00:52<00:11,  3.79it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.99it/s][A
 81%|████████  | 178/221 [00:53<00:16,  2.61it/s][A
 81%|████████  | 179/221 [00:53<00:14,  2.93it/s][A
 81%|████████▏ | 180/221 [00:54<00:11,  3.44it/s][A
 82%|████████▏ | 181/221 [00:54<00:15,  2.57it/s][A
 82%|████████▏ | 182/221 [00:54<00:13,  2.85it/s][A
 83%|████████▎ | 183/221 [00:55<00:13,  2.91it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  2.99it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.73it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.28it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.54it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.20it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.44it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.19it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.51it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  3.99it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.50it/s][A
 88%|████████▊ | 194/221 [00:58<00:08,  3.05it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.52it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.33it/s][A
 89%|████████▉ | 197/221 [00:59<00:07,  3.14it/s][A
 90%|████████▉ | 198/221 [00:59<00:07,  3.15it/s][A
 90%|█████████ | 199/221 [00:59<00:06,  3.53it/s][A
 90%|█████████ | 200/221 [01:00<00:06,  3.50it/s][A
 91%|█████████ | 201/221 [01:00<00:05,  3.85it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.55it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.92it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.75it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.32it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.62it/s][A
 94%|█████████▎| 207/221 [01:02<00:05,  2.48it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  2.98it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.26it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.18it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.46it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.59it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.57it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.98it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.86it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.91it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.15it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.23it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.04it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.49it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.37it/s][A100%|██████████| 221/221 [01:06<00:00,  3.31it/s]
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'area_r1': 39.3, 'area_recall': '39.3/64.1/72.6', 'area_ravg': 58.7}
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'forward_r1': 37.6, 'forward_recall': '37.6/68.6/77.6', 'forward_ravg': 61.2}
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'area_video_r1': 38.7, 'area_video_recall': '38.7/68.4/78.8', 'area_video_ravg': 62.0}
09/17/2024 09:29:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 09:29:02 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'area_video_r1': 52.6, 'area_video_recall': '52.6/75.0/81.4', 'area_video_ravg': 69.7, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.4/82.2', 'area_video_back_ravg': 68.2}
09/17/2024 09:29:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 09:29:02 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'video_r1': 36.3, 'video_recall': '36.3/64.7/73.6', 'video_ravg': 58.2}
09/17/2024 09:29:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 09:29:02 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 09:29:02 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1499--===========

09/17/2024 09:29:02 - INFO - __main__ -   {'video_r1': 51.8, 'video_recall': '51.8/74.1/81.2', 'video_ravg': 69.0}
09/17/2024 09:29:02 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 09:29:02 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 09:29:22 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007656642235815525, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1080292463302612, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.125739336013794, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.2414252758026123}
[h264 @ 0x563546778040] mmco: unref short failure
[h264 @ 0x563546778040] mmco: unref short failure
[h264 @ 0x56355b767580] mmco: unref short failure
 52%|█████▏    | 1500/2910 [9:33:26<53:29:26, 136.57s/it] 52%|█████▏    | 1501/2910 [9:33:30<37:53:13, 96.80s/it] [h264 @ 0x55771c700a80] mmco: unref short failure
[h264 @ 0x55771c700a80] mmco: unref short failure
[h264 @ 0x55771c700a80] mmco: unref short failure
[h264 @ 0x55771c700a80] mmco: unref short failure
[h264 @ 0x55771c700a80] mmco: unref short failure
[h264 @ 0x55771c700a80] mmco: unref short failure
 52%|█████▏    | 1502/2910 [9:33:35<27:01:40, 69.11s/it][h264 @ 0x5556c4432300] mmco: unref short failure
[h264 @ 0x5577201e3280] mmco: unref short failure
[h264 @ 0x5577201e3280] mmco: unref short failure
 52%|█████▏    | 1503/2910 [9:33:39<19:28:23, 49.82s/it] 52%|█████▏    | 1504/2910 [9:33:45<14:14:18, 36.46s/it] 52%|█████▏    | 1505/2910 [9:33:50<10:38:44, 27.28s/it] 52%|█████▏    | 1506/2910 [9:33:56<8:06:41, 20.80s/it] [h264 @ 0x5586376ff880] mmco: unref short failure
[h264 @ 0x5586376ff880] mmco: unref short failure
[h264 @ 0x558631e957c0] mmco: unref short failure
[h264 @ 0x55864d20db40] mmco: unref short failure
 52%|█████▏    | 1507/2910 [9:34:03<6:29:42, 16.67s/it] 52%|█████▏    | 1508/2910 [9:34:10<5:22:47, 13.81s/it][h264 @ 0x55864d0eaf80] mmco: unref short failure
[h264 @ 0x55864d0eaf80] mmco: unref short failure
 52%|█████▏    | 1509/2910 [9:34:16<4:28:18, 11.49s/it][h264 @ 0x557730c350c0] mmco: unref short failure
[h264 @ 0x558643b48880] mmco: unref short failure
 52%|█████▏    | 1510/2910 [9:34:23<3:51:13,  9.91s/it][h264 @ 0x56355cd24780] mmco: unref short failure
 52%|█████▏    | 1511/2910 [9:34:29<3:28:31,  8.94s/it][h264 @ 0x55864c63cb80] mmco: unref short failure
 52%|█████▏    | 1512/2910 [9:34:37<3:16:37,  8.44s/it][h264 @ 0x5556c3f9c7c0] mmco: unref short failure
[h264 @ 0x5576de8e7f00] mmco: unref short failure
[h264 @ 0x5576de8e7f00] mmco: unref short failure
[h264 @ 0x5576de8e7f00] mmco: unref short failure
 52%|█████▏    | 1513/2910 [9:34:44<3:09:06,  8.12s/it][h264 @ 0x5577221365c0] mmco: unref short failure
[h264 @ 0x5577221365c0] mmco: unref short failure
 52%|█████▏    | 1514/2910 [9:34:51<3:01:05,  7.78s/it]09/17/2024 09:30:55 - INFO - __main__ -   current idx 1HAnFYVSFkk.3 from finetune_area returns wrong image/video, use 113944 instead.
 52%|█████▏    | 1515/2910 [9:34:57<2:50:44,  7.34s/it][h264 @ 0x563540dbb980] mmco: unref short failure
[h264 @ 0x563540dbb980] mmco: unref short failure
[h264 @ 0x55864d20db40] mmco: unref short failure
[h264 @ 0x56355ee38580] mmco: unref short failure
[h264 @ 0x5556cdeb2540] mmco: unref short failure
[h264 @ 0x563541883a40] mmco: unref short failure
 52%|█████▏    | 1516/2910 [9:35:23<4:56:13, 12.75s/it][h264 @ 0x558644cb9a00] mmco: unref short failure
[h264 @ 0x558644cb9a00] mmco: unref short failure
[h264 @ 0x55773640bd40] mmco: unref short failure
[h264 @ 0x55771f5a8e00] mmco: unref short failure
[h264 @ 0x55771f5a8e00] mmco: unref short failure
[h264 @ 0x55771f5a8e00] mmco: unref short failure
[h264 @ 0x55771f5a8e00] mmco: unref short failure
[h264 @ 0x55771f5a8e00] mmco: unref short failure
[h264 @ 0x557726ee1400] mmco: unref short failure
[h264 @ 0x557726ee1400] mmco: unref short failure
[h264 @ 0x55863dcb7600] mmco: unref short failure
[h264 @ 0x55863dcb7600] mmco: unref short failure
[h264 @ 0x5556dccaa140] mmco: unref short failure
[h264 @ 0x5556dccaa140] mmco: unref short failure
 52%|█████▏    | 1517/2910 [9:35:47<6:17:40, 16.27s/it][h264 @ 0x5556d3f70a40] mmco: unref short failure
[h264 @ 0x56354a8efc40] mmco: unref short failure
 52%|█████▏    | 1518/2910 [9:35:53<5:07:42, 13.26s/it][h264 @ 0x5577181c9b80] mmco: unref short failure
[h264 @ 0x5577181c9b80] mmco: unref short failure
[h264 @ 0x5556d9edc540] mmco: unref short failure
[h264 @ 0x5556d9edc540] mmco: unref short failure
[h264 @ 0x55772708b280] mmco: unref short failure
 52%|█████▏    | 1519/2910 [9:36:06<5:00:13, 12.95s/it] 52%|█████▏    | 1520/2910 [9:36:13<4:20:27, 11.24s/it][h264 @ 0x557727dbd340] mmco: unref short failure
[h264 @ 0x55771a4a5d00] mmco: unref short failure
 52%|█████▏    | 1521/2910 [9:36:23<4:15:43, 11.05s/it][h264 @ 0x55863ff7aa00] mmco: unref short failure
[h264 @ 0x55864cb58d00] mmco: unref short failure
[h264 @ 0x55864cb58d00] mmco: unref short failure
 52%|█████▏    | 1522/2910 [9:36:32<3:56:30, 10.22s/it][h264 @ 0x55772c732040] mmco: unref short failure
 52%|█████▏    | 1523/2910 [9:36:41<3:53:01, 10.08s/it][h264 @ 0x558632752380] mmco: unref short failure
[h264 @ 0x5586376fb540] mmco: unref short failure
[h264 @ 0x5586376fb540] mmco: unref short failure
[h264 @ 0x55771f096900] mmco: unref short failure
[h264 @ 0x55771f096900] mmco: unref short failure
[h264 @ 0x5556dfcd5980] mmco: unref short failure
[h264 @ 0x5556dfcd5980] mmco: unref short failure
[h264 @ 0x5556dfcd5980] mmco: unref short failure
[h264 @ 0x557721383400] mmco: unref short failure
[h264 @ 0x563546c88700] mmco: unref short failure
[h264 @ 0x56354ecd5800] mmco: unref short failure
[h264 @ 0x557718747280] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x5577213d5980] mmco: unref short failure
[h264 @ 0x5577213d5980] mmco: unref short failure
[h264 @ 0x56354a8efc40] mmco: unref short failure
[h264 @ 0x56354602fb80] mmco: unref short failure
[h264 @ 0x56354602fb80] mmco: unref short failure
[h264 @ 0x558634ed4500] mmco: unref short failure
[h264 @ 0x558634ed4500] mmco: unref short failure
[h264 @ 0x557722631d80] mmco: unref short failure
[h264 @ 0x557722631d80] mmco: unref short failure
 52%|█████▏    | 1524/2910 [9:37:47<10:15:58, 26.67s/it][h264 @ 0x5556d9edc540] mmco: unref short failure
[h264 @ 0x55772f11d6c0] mmco: unref short failure
[h264 @ 0x56354b102640] mmco: unref short failure
[h264 @ 0x56354b102640] mmco: unref short failure
[h264 @ 0x5635413d13c0] mmco: unref short failure
[av1 @ 0x5635412cb9c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635412cb9c0] Failed to get pixel format.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635412cb9c0] Failed to get pixel format.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635412cb9c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[av1 @ 0x5635413d13c0] Missing Sequence Header.
[av1 @ 0x5635413d13c0] Your platform doesn't suppport hardware accelerated AV1 decoding.
[av1 @ 0x5635413d13c0] Failed to get pixel format.
[h264 @ 0x563541321000] mmco: unref short failure
[h264 @ 0x563541321000] mmco: unref short failure
[h264 @ 0x5556d5c44240] mmco: unref short failure
[h264 @ 0x5556d790e840] mmco: unref short failure
[h264 @ 0x5556d790e840] mmco: unref short failure
[h264 @ 0x56355b767580] mmco: unref short failure
[h264 @ 0x5556ce4bffc0] mmco: unref short failure
[h264 @ 0x5556ce4bffc0] mmco: unref short failure
[h264 @ 0x5556ce6f1980] mmco: unref short failure
[h264 @ 0x5556ce6f1980] mmco: unref short failure
 52%|█████▏    | 1525/2910 [9:38:28<11:54:00, 30.93s/it][h264 @ 0x563549abdf40] mmco: unref short failure
[h264 @ 0x563549abdf40] mmco: unref short failure
[h264 @ 0x5635468d7500] mmco: unref short failure
[h264 @ 0x5635468d7500] mmco: unref short failure
[h264 @ 0x5635468d7500] mmco: unref short failure
[h264 @ 0x5556d92ac7c0] mmco: unref short failure
[h264 @ 0x5556d92ac7c0] mmco: unref short failure
 52%|█████▏    | 1526/2910 [9:38:34<9:00:49, 23.45s/it] [h264 @ 0x55771839a080] mmco: unref short failure
[h264 @ 0x55771839a080] mmco: unref short failure
[h264 @ 0x55771839a080] mmco: unref short failure
[h264 @ 0x55771839a080] mmco: unref short failure
 52%|█████▏    | 1527/2910 [9:38:40<7:00:41, 18.25s/it][h264 @ 0x5556dc5d9100] mmco: unref short failure
[h264 @ 0x55863c27eb00] mmco: unref short failure
[h264 @ 0x55864fc10b80] mmco: unref short failure
[h264 @ 0x55864fc10b80] mmco: unref short failure
[h264 @ 0x55864fc10b80] mmco: unref short failure
[h264 @ 0x55864fc10b80] mmco: unref short failure
 53%|█████▎    | 1528/2910 [9:38:48<5:50:02, 15.20s/it] 53%|█████▎    | 1529/2910 [9:38:55<4:50:55, 12.64s/it] 53%|█████▎    | 1530/2910 [9:39:01<4:09:38, 10.85s/it][h264 @ 0x5577296e4b40] mmco: unref short failure
[h264 @ 0x5577296e4b40] mmco: unref short failure
 53%|█████▎    | 1531/2910 [9:39:15<4:28:47, 11.70s/it][h264 @ 0x5586353ad380] mmco: unref short failure
[h264 @ 0x5586353ad380] mmco: unref short failure
[h264 @ 0x5556cd64b6c0] mmco: unref short failure
[h264 @ 0x563543f3b480] mmco: unref short failure
[h264 @ 0x563543f3b480] mmco: unref short failure
[h264 @ 0x5556e3638440] mmco: unref short failure
[h264 @ 0x558636edba00] mmco: unref short failure
[h264 @ 0x55863ef54400] mmco: unref short failure
[h264 @ 0x55864c898f80] mmco: unref short failure
[h264 @ 0x55772328a640] mmco: unref short failure
[h264 @ 0x55772328a640] mmco: unref short failure
[h264 @ 0x5635441495c0] mmco: unref short failure
[h264 @ 0x5635441495c0] mmco: unref short failure
 53%|█████▎    | 1532/2910 [9:40:19<10:27:33, 27.32s/it][h264 @ 0x5556d0db4480] mmco: unref short failure
[h264 @ 0x5556d0db4480] mmco: unref short failure
[h264 @ 0x5586476df2c0] mmco: unref short failure
[h264 @ 0x5556cc905280] mmco: unref short failure
[h264 @ 0x55864697e4c0] mmco: unref short failure
[h264 @ 0x563565718200] mmco: unref short failure
[h264 @ 0x563565718200] mmco: unref short failure
[h264 @ 0x563554404000] mmco: unref short failure
[h264 @ 0x563554404000] mmco: unref short failure
[h264 @ 0x563565718200] mmco: unref short failure
[h264 @ 0x563565718200] mmco: unref short failure
 53%|█████▎    | 1533/2910 [9:40:52<11:08:49, 29.14s/it][h264 @ 0x5577296fac40] mmco: unref short failure
[h264 @ 0x5577296fac40] mmco: unref short failure
[h264 @ 0x5556c4059c00] mmco: unref short failure
[h264 @ 0x5556c4059c00] mmco: unref short failure
[h264 @ 0x5556c4059c00] mmco: unref short failure
[h264 @ 0x5556c4059c00] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
 53%|█████▎    | 1534/2910 [9:40:58<8:30:35, 22.26s/it]  53%|█████▎    | 1535/2910 [9:41:05<6:45:18, 17.69s/it][h264 @ 0x55568c024700] mmco: unref short failure
[h264 @ 0x5556ca77c3c0] mmco: unref short failure
[h264 @ 0x5556ca77c3c0] mmco: unref short failure
[h264 @ 0x55863a755540] mmco: unref short failure
[h264 @ 0x55863a755540] mmco: unref short failure
[h264 @ 0x55863a755540] mmco: unref short failure
[h264 @ 0x55863a755540] mmco: unref short failure
 53%|█████▎    | 1536/2910 [9:41:23<6:48:21, 17.83s/it][h264 @ 0x563563330900] mmco: unref short failure
[h264 @ 0x563563330900] mmco: unref short failure
 53%|█████▎    | 1537/2910 [9:41:30<5:27:33, 14.31s/it] 53%|█████▎    | 1538/2910 [9:41:36<4:35:02, 12.03s/it][h264 @ 0x5635434c9440] mmco: unref short failure
[h264 @ 0x5577316c7e40] mmco: unref short failure
 53%|█████▎    | 1539/2910 [9:41:48<4:36:01, 12.08s/it][h264 @ 0x5576de5215c0] mmco: unref short failure
[h264 @ 0x55771d3c9d80] mmco: unref short failure
[h264 @ 0x55771d3c9d80] mmco: unref short failure
[h264 @ 0x55771d3c9d80] mmco: unref short failure
[h264 @ 0x55771d3c9d80] mmco: unref short failure
[h264 @ 0x56354817d240] mmco: unref short failure
[h264 @ 0x56354817d240] mmco: unref short failure
[h264 @ 0x563541bc66c0] mmco: unref short failure
[h264 @ 0x563541bc66c0] mmco: unref short failure
[h264 @ 0x55771a1a2000] mmco: unref short failure
[h264 @ 0x55771a1a2000] mmco: unref short failure
[h264 @ 0x557719ce5ec0] mmco: unref short failure
[h264 @ 0x557719ce5ec0] mmco: unref short failure
[h264 @ 0x5556c87d5f00] mmco: unref short failure
 53%|█████▎    | 1540/2910 [9:42:46<9:49:40, 25.82s/it][h264 @ 0x5556d6b4fac0] mmco: unref short failure
[h264 @ 0x5556d6b4fac0] mmco: unref short failure
[h264 @ 0x5576de373740] mmco: unref short failure
[h264 @ 0x56355aae8c80] mmco: unref short failure
[h264 @ 0x56355aae8c80] mmco: unref short failure
[h264 @ 0x5556d1e6a000] mmco: unref short failure
[h264 @ 0x5556d1e6a000] mmco: unref short failure
09/17/2024 09:38:56 - INFO - __main__ -   current idx -kIbHN7PmWQ.113 from finetune_area returns wrong image/video, use 32532 instead.
 53%|█████▎    | 1541/2910 [9:43:16<10:18:18, 27.10s/it][h264 @ 0x5576de3388c0] mmco: unref short failure
[h264 @ 0x5576de3388c0] mmco: unref short failure
 53%|█████▎    | 1542/2910 [9:43:24<8:03:59, 21.23s/it] [h264 @ 0x558643b40040] mmco: unref short failure
 53%|█████▎    | 1543/2910 [9:43:37<7:07:58, 18.78s/it][h264 @ 0x5556c6a2b7c0] mmco: unref short failure
[h264 @ 0x5556cddf5700] mmco: unref short failure
[h264 @ 0x5577246694c0] mmco: unref short failure
[h264 @ 0x5577246694c0] mmco: unref short failure
 53%|█████▎    | 1544/2910 [9:43:51<6:36:27, 17.41s/it][h264 @ 0x56354596de80] mmco: unref short failure
[h264 @ 0x56354596de80] mmco: unref short failure
 53%|█████▎    | 1545/2910 [9:43:58<5:20:33, 14.09s/it][h264 @ 0x558643b40040] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
[h264 @ 0x563552e4b8c0] mmco: unref short failure
[h264 @ 0x563552e4b8c0] mmco: unref short failure
 53%|█████▎    | 1546/2910 [9:44:04<4:29:51, 11.87s/it][h264 @ 0x5556d27c8a80] mmco: unref short failure
[h264 @ 0x5556d27c8a80] mmco: unref short failure
 53%|█████▎    | 1547/2910 [9:44:17<4:35:43, 12.14s/it][h264 @ 0x563550613a40] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
[h264 @ 0x56354ade9ac0] mmco: unref short failure
[h264 @ 0x56354ade9ac0] mmco: unref short failure
[h264 @ 0x5577343da6c0] mmco: unref short failure
[h264 @ 0x563547c376c0] mmco: unref short failure
[h264 @ 0x563547c376c0] mmco: unref short failure
[h264 @ 0x55771ad92440] mmco: unref short failure
[h264 @ 0x55771ad92440] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x5556c418a000] mmco: unref short failure
[h264 @ 0x5556c418a000] mmco: unref short failure
[h264 @ 0x55568c024700] mmco: unref short failure
[h264 @ 0x55568c024700] mmco: unref short failure
[h264 @ 0x55568c024700] mmco: unref short failure
[h264 @ 0x55568c024700] mmco: unref short failure
[h264 @ 0x563544ec7840] mmco: unref short failure
[h264 @ 0x5556e101d440] mmco: unref short failure
[h264 @ 0x5556e101d440] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x557724152f00] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
 53%|█████▎    | 1548/2910 [9:45:32<11:43:00, 30.97s/it][h264 @ 0x55568c21a740] mmco: unref short failure
[h264 @ 0x558653329700] mmco: unref short failure
[h264 @ 0x5556c6a2b7c0] mmco: unref short failure
[h264 @ 0x56355be25f40] mmco: unref short failure
[h264 @ 0x5577317c3700] mmco: unref short failure
[h264 @ 0x5577317c3700] mmco: unref short failure
 53%|█████▎    | 1549/2910 [9:45:51<10:21:41, 27.41s/it]09/17/2024 09:41:50 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 09:41:50 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772000a480] mmco: unref short failure
[h264 @ 0x55772000a480] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5556da3f1000] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 09:42:40 - INFO - __main__ -   current idx fbYRdF_tz_Y.57 from finetune_area returns wrong image/video, use 57260 instead.
[h264 @ 0x5556e0a45e40] mmco: unref short failure
[h264 @ 0x5556e0a45e40] mmco: unref short failure
[h264 @ 0x5556e0a45e40] mmco: unref short failure
09/17/2024 09:43:03 - INFO - __main__ -   current idx AqyH6qo2WI0.9 from finetune_area returns wrong image/video, use 108881 instead.
[h264 @ 0x5556d3dcca80] mmco: unref short failure
[h264 @ 0x5556d3dcca80] mmco: unref short failure
09/17/2024 09:43:40 - INFO - __main__ -   current idx hq2NNhzo-Lg.4 from finetune_area returns wrong image/video, use 13274 instead.
[h264 @ 0x55772657d540] mmco: unref short failure
[h264 @ 0x55864ce37780] mmco: unref short failure
[h264 @ 0x55864ce37780] mmco: unref short failure
09/17/2024 09:44:08 - INFO - __main__ -   current idx Ktryr_1EhKk.51 from finetune_area returns wrong image/video, use 127382 instead.
[h264 @ 0x5556de249240] mmco: unref short failure
[h264 @ 0x5556d4cc52c0] mmco: unref short failure
[h264 @ 0x5556d4cc52c0] mmco: unref short failure
[h264 @ 0x5556dd18a100] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:01<04:26,  1.21s/it][A
  1%|          | 2/221 [00:01<02:53,  1.26it/s][A
  1%|▏         | 3/221 [00:01<01:47,  2.02it/s][A
  2%|▏         | 5/221 [00:02<00:56,  3.84it/s][A
  3%|▎         | 6/221 [00:02<00:49,  4.35it/s][A
  3%|▎         | 7/221 [00:02<00:52,  4.10it/s][A
  4%|▎         | 8/221 [00:03<01:13,  2.89it/s][A
  4%|▍         | 9/221 [00:03<01:06,  3.20it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.27it/s][A
  5%|▍         | 11/221 [00:03<00:52,  4.00it/s][A
  5%|▌         | 12/221 [00:04<01:25,  2.45it/s][A
  6%|▌         | 13/221 [00:04<01:15,  2.77it/s][A
  6%|▋         | 14/221 [00:04<01:08,  3.01it/s][A
  7%|▋         | 15/221 [00:05<00:58,  3.53it/s][A
  7%|▋         | 16/221 [00:05<00:51,  4.02it/s][A
  8%|▊         | 17/221 [00:05<00:50,  4.01it/s][A
  8%|▊         | 18/221 [00:05<00:46,  4.40it/s][A
  9%|▊         | 19/221 [00:05<00:40,  4.96it/s][A
  9%|▉         | 20/221 [00:06<00:37,  5.40it/s][A
 10%|▉         | 21/221 [00:06<00:34,  5.85it/s][A
 10%|▉         | 22/221 [00:06<00:43,  4.53it/s][A
 10%|█         | 23/221 [00:06<00:37,  5.27it/s][A
 11%|█         | 24/221 [00:07<00:53,  3.70it/s][A
 11%|█▏        | 25/221 [00:07<00:47,  4.15it/s][A
 12%|█▏        | 26/221 [00:07<00:47,  4.09it/s][A
 12%|█▏        | 27/221 [00:07<00:43,  4.47it/s][A
 13%|█▎        | 28/221 [00:07<00:47,  4.06it/s][A
 13%|█▎        | 29/221 [00:08<00:42,  4.51it/s][A
 14%|█▎        | 30/221 [00:08<00:40,  4.73it/s][A
 14%|█▍        | 31/221 [00:08<00:36,  5.21it/s][A
 14%|█▍        | 32/221 [00:08<00:34,  5.51it/s][A
 15%|█▍        | 33/221 [00:09<00:44,  4.20it/s][A
 15%|█▌        | 34/221 [00:09<00:39,  4.71it/s][A
 16%|█▌        | 35/221 [00:09<00:40,  4.55it/s][A
 16%|█▋        | 36/221 [00:09<00:39,  4.67it/s][A
 17%|█▋        | 37/221 [00:10<01:00,  3.02it/s][A
 17%|█▋        | 38/221 [00:10<01:02,  2.95it/s][A
 18%|█▊        | 39/221 [00:10<00:49,  3.71it/s][A
 18%|█▊        | 40/221 [00:11<00:52,  3.44it/s][A
 19%|█▊        | 41/221 [00:11<00:46,  3.85it/s][A
 19%|█▉        | 42/221 [00:12<01:49,  1.63it/s][A
 19%|█▉        | 43/221 [00:12<01:30,  1.96it/s][A
 20%|█▉        | 44/221 [00:13<01:09,  2.54it/s][A
 20%|██        | 45/221 [00:13<01:37,  1.81it/s][A
 21%|██        | 46/221 [00:14<01:34,  1.86it/s][A[h264 @ 0x558636362300] mmco: unref short failure
[h264 @ 0x557722631d80] mmco: unref short failure
[h264 @ 0x557722631d80] mmco: unref short failure

 21%|██▏       | 47/221 [00:17<03:53,  1.34s/it][A
 22%|██▏       | 48/221 [00:17<02:51,  1.01it/s][A
 22%|██▏       | 49/221 [00:17<02:05,  1.37it/s][A
 23%|██▎       | 51/221 [00:18<01:13,  2.31it/s][A
 24%|██▎       | 52/221 [00:18<01:00,  2.78it/s][A
 24%|██▍       | 53/221 [00:18<00:53,  3.12it/s][A
 24%|██▍       | 54/221 [00:19<01:17,  2.16it/s][A
 25%|██▍       | 55/221 [00:19<01:05,  2.53it/s][A
 25%|██▌       | 56/221 [00:19<00:53,  3.10it/s][A
 26%|██▌       | 57/221 [00:20<01:00,  2.72it/s][A
 26%|██▌       | 58/221 [00:20<00:47,  3.44it/s][A
 27%|██▋       | 59/221 [00:20<00:46,  3.48it/s][A
 27%|██▋       | 60/221 [00:20<00:45,  3.56it/s][A
 28%|██▊       | 61/221 [00:20<00:40,  3.98it/s][A
 28%|██▊       | 62/221 [00:21<00:38,  4.17it/s][A
 29%|██▊       | 63/221 [00:21<00:32,  4.79it/s][A
 29%|██▉       | 64/221 [00:21<00:27,  5.67it/s][A
 29%|██▉       | 65/221 [00:21<00:25,  6.15it/s][A
 30%|██▉       | 66/221 [00:22<00:44,  3.49it/s][A
 30%|███       | 67/221 [00:22<00:42,  3.61it/s][A
 31%|███       | 68/221 [00:22<00:40,  3.79it/s][A
 31%|███       | 69/221 [00:23<00:51,  2.96it/s][A
 32%|███▏      | 70/221 [00:23<00:47,  3.21it/s][A[h264 @ 0x563547c376c0] mmco: unref short failure
[h264 @ 0x563547c376c0] mmco: unref short failure
[h264 @ 0x55771ce55e40] mmco: unref short failure

 32%|███▏      | 71/221 [00:27<03:33,  1.42s/it][A
 33%|███▎      | 72/221 [00:27<02:36,  1.05s/it][A[h264 @ 0x5556cad560c0] mmco: unref short failure

 33%|███▎      | 73/221 [00:28<02:06,  1.17it/s][A
 33%|███▎      | 74/221 [00:28<01:38,  1.49it/s][A
 34%|███▍      | 75/221 [00:28<01:25,  1.71it/s][A
 34%|███▍      | 76/221 [00:28<01:11,  2.03it/s][A
 35%|███▍      | 77/221 [00:29<01:00,  2.36it/s][A
 35%|███▌      | 78/221 [00:29<00:54,  2.60it/s][A[h264 @ 0x557724cabcc0] mmco: unref short failure
[h264 @ 0x557724cabcc0] mmco: unref short failure

 36%|███▌      | 79/221 [00:30<01:08,  2.06it/s][A
 36%|███▌      | 80/221 [00:30<00:54,  2.60it/s][A
 37%|███▋      | 81/221 [00:30<00:46,  3.02it/s][A
 37%|███▋      | 82/221 [00:31<00:51,  2.71it/s][A
 38%|███▊      | 83/221 [00:31<00:42,  3.21it/s][A
 38%|███▊      | 84/221 [00:31<00:34,  3.93it/s][A
 39%|███▉      | 86/221 [00:31<00:25,  5.21it/s][A
 39%|███▉      | 87/221 [00:31<00:31,  4.22it/s][A[h264 @ 0x5576e0d8d600] mmco: unref short failure

 40%|███▉      | 88/221 [00:32<00:33,  3.93it/s][A[h264 @ 0x55568c02eb00] mmco: unref short failure
[h264 @ 0x55568c02eb00] mmco: unref short failure
[h264 @ 0x55568c02eb00] mmco: unref short failure
[h264 @ 0x55568c02eb00] mmco: unref short failure
[h264 @ 0x5556dc21c300] mmco: unref short failure
[h264 @ 0x5556dc21c300] mmco: unref short failure
[h264 @ 0x5556dc21c300] mmco: unref short failure
[h264 @ 0x5556dc21c300] mmco: unref short failure

 40%|████      | 89/221 [00:35<02:29,  1.13s/it][A
 41%|████      | 90/221 [00:35<01:57,  1.11it/s][A
 41%|████      | 91/221 [00:36<01:27,  1.49it/s][A
 42%|████▏     | 92/221 [00:36<01:08,  1.88it/s][A[h264 @ 0x5556d6937080] mmco: unref short failure
[h264 @ 0x5556d6937080] mmco: unref short failure

 42%|████▏     | 93/221 [00:36<01:14,  1.71it/s][A
 43%|████▎     | 94/221 [00:37<01:17,  1.63it/s][A
 43%|████▎     | 95/221 [00:37<00:59,  2.13it/s][A
 43%|████▎     | 96/221 [00:38<00:50,  2.48it/s][A
 44%|████▍     | 97/221 [00:38<00:40,  3.05it/s][A
 44%|████▍     | 98/221 [00:38<00:37,  3.27it/s][A
 45%|████▍     | 99/221 [00:38<00:35,  3.41it/s][A
 45%|████▌     | 100/221 [00:39<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:39<00:34,  3.43it/s][A
 46%|████▌     | 102/221 [00:39<00:39,  3.03it/s][A
 47%|████▋     | 103/221 [00:39<00:35,  3.34it/s][A
 47%|████▋     | 104/221 [00:40<00:33,  3.53it/s][A
 48%|████▊     | 105/221 [00:40<00:32,  3.54it/s][A
 48%|████▊     | 106/221 [00:41<00:47,  2.42it/s][A
 48%|████▊     | 107/221 [00:41<00:37,  3.05it/s][A
 49%|████▉     | 108/221 [00:41<00:31,  3.59it/s][A
 49%|████▉     | 109/221 [00:41<00:27,  4.07it/s][A
 50%|████▉     | 110/221 [00:41<00:22,  4.91it/s][A
 50%|█████     | 111/221 [00:42<00:32,  3.40it/s][A
 51%|█████     | 112/221 [00:42<00:28,  3.83it/s][A
 51%|█████     | 113/221 [00:42<00:29,  3.62it/s][A
 52%|█████▏    | 114/221 [00:42<00:27,  3.89it/s][A
 52%|█████▏    | 116/221 [00:47<02:14,  1.28s/it][A
 53%|█████▎    | 117/221 [00:48<01:47,  1.03s/it][A
 53%|█████▎    | 118/221 [00:48<01:26,  1.20it/s][A
 54%|█████▍    | 119/221 [00:48<01:05,  1.55it/s][A
 54%|█████▍    | 120/221 [00:48<00:52,  1.92it/s][A
 55%|█████▍    | 121/221 [00:48<00:40,  2.44it/s][A
 55%|█████▌    | 122/221 [00:49<00:34,  2.86it/s][A
 56%|█████▌    | 123/221 [00:49<00:28,  3.40it/s][A
 56%|█████▌    | 124/221 [00:49<00:24,  3.95it/s][A
 57%|█████▋    | 125/221 [00:49<00:22,  4.20it/s][A
 57%|█████▋    | 126/221 [00:50<00:45,  2.07it/s][A
 57%|█████▋    | 127/221 [00:51<00:40,  2.31it/s][A
 58%|█████▊    | 128/221 [00:52<01:00,  1.55it/s][A
 58%|█████▊    | 129/221 [00:52<00:48,  1.90it/s][A
 59%|█████▉    | 130/221 [00:52<00:39,  2.28it/s][A
 59%|█████▉    | 131/221 [00:52<00:30,  2.91it/s][A
 60%|█████▉    | 132/221 [00:53<00:27,  3.26it/s][A
 60%|██████    | 133/221 [00:53<00:30,  2.89it/s][A
 61%|██████    | 134/221 [00:53<00:26,  3.28it/s][A
 61%|██████    | 135/221 [00:53<00:25,  3.33it/s][A
 62%|██████▏   | 136/221 [00:54<00:32,  2.62it/s][A
 62%|██████▏   | 137/221 [00:55<00:38,  2.20it/s][A
 62%|██████▏   | 138/221 [00:55<00:44,  1.88it/s][A
 63%|██████▎   | 139/221 [00:56<00:39,  2.09it/s][A
 63%|██████▎   | 140/221 [00:56<00:34,  2.32it/s][A
 64%|██████▍   | 141/221 [00:56<00:29,  2.74it/s][A
 64%|██████▍   | 142/221 [00:57<00:28,  2.76it/s][A[h264 @ 0x56354088cf00] mmco: unref short failure

 65%|██████▍   | 143/221 [00:57<00:25,  3.00it/s][A
 65%|██████▌   | 144/221 [00:57<00:21,  3.65it/s][A
 66%|██████▌   | 145/221 [00:57<00:20,  3.70it/s][A
 66%|██████▌   | 146/221 [00:58<00:19,  3.84it/s][A
 67%|██████▋   | 147/221 [00:58<00:17,  4.24it/s][A
 67%|██████▋   | 148/221 [00:58<00:18,  3.95it/s][A
 68%|██████▊   | 150/221 [00:58<00:13,  5.18it/s][A[h264 @ 0x563547c376c0] mmco: unref short failure

 68%|██████▊   | 151/221 [00:59<00:18,  3.81it/s][A
 69%|██████▉   | 152/221 [00:59<00:18,  3.75it/s][A
 69%|██████▉   | 153/221 [00:59<00:19,  3.56it/s][A[h264 @ 0x56354777cf40] mmco: unref short failure

 70%|██████▉   | 154/221 [01:00<00:28,  2.33it/s][A
 70%|███████   | 155/221 [01:00<00:23,  2.82it/s][A
 71%|███████   | 156/221 [01:00<00:18,  3.44it/s][A[h264 @ 0x5556dbb6bf40] mmco: unref short failure

 71%|███████   | 157/221 [01:05<01:44,  1.64s/it][A
 71%|███████▏  | 158/221 [01:05<01:15,  1.20s/it][A
 72%|███████▏  | 159/221 [01:06<00:55,  1.12it/s][A
 72%|███████▏  | 160/221 [01:06<00:43,  1.41it/s][A
 73%|███████▎  | 162/221 [01:06<00:24,  2.38it/s][A
 74%|███████▍  | 163/221 [01:06<00:20,  2.77it/s][A
 74%|███████▍  | 164/221 [01:06<00:18,  3.01it/s][A
 75%|███████▍  | 165/221 [01:07<00:15,  3.61it/s][A
 75%|███████▌  | 166/221 [01:07<00:17,  3.19it/s][A
 76%|███████▌  | 167/221 [01:07<00:14,  3.82it/s][A[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x5556d2604d80] mmco: unref short failure
[h264 @ 0x5556d2604d80] mmco: unref short failure
[h264 @ 0x5556d2604d80] mmco: unref short failure
[h264 @ 0x5556d2604d80] mmco: unref short failure
[h264 @ 0x558636362300] mmco: unref short failure
[h264 @ 0x558636362300] mmco: unref short failure
[h264 @ 0x563563b039c0] mmco: unref short failure

 76%|███████▌  | 168/221 [01:11<01:13,  1.38s/it][A
 76%|███████▋  | 169/221 [01:12<00:55,  1.07s/it][A
 77%|███████▋  | 170/221 [01:12<00:42,  1.20it/s][A
 77%|███████▋  | 171/221 [01:12<00:31,  1.60it/s][A
 78%|███████▊  | 172/221 [01:12<00:23,  2.10it/s][A
 78%|███████▊  | 173/221 [01:12<00:18,  2.63it/s][A
 79%|███████▉  | 175/221 [01:13<00:12,  3.65it/s][A
 80%|███████▉  | 176/221 [01:13<00:12,  3.58it/s][A
 80%|████████  | 177/221 [01:13<00:10,  4.19it/s][A
 81%|████████  | 178/221 [01:13<00:10,  4.13it/s][A[h264 @ 0x56354d758400] mmco: unref short failure

 81%|████████  | 179/221 [01:16<00:34,  1.20it/s][A
 82%|████████▏ | 181/221 [01:16<00:20,  1.97it/s][A
 82%|████████▏ | 182/221 [01:16<00:17,  2.25it/s][A
 83%|████████▎ | 183/221 [01:16<00:14,  2.65it/s][A
 83%|████████▎ | 184/221 [01:16<00:12,  2.94it/s][A
 84%|████████▍ | 186/221 [01:17<00:09,  3.81it/s][A
 85%|████████▌ | 188/221 [01:17<00:07,  4.46it/s][A
 86%|████████▌ | 189/221 [01:17<00:07,  4.28it/s][A
 86%|████████▌ | 190/221 [01:18<00:06,  4.50it/s][A
 87%|████████▋ | 192/221 [01:18<00:05,  5.44it/s][A
 88%|████████▊ | 194/221 [01:19<00:07,  3.40it/s][A
 88%|████████▊ | 195/221 [01:19<00:06,  3.84it/s][A
 89%|████████▊ | 196/221 [01:19<00:05,  4.44it/s][A
 89%|████████▉ | 197/221 [01:19<00:04,  4.92it/s][A
 90%|████████▉ | 198/221 [01:19<00:04,  5.50it/s][A
 90%|█████████ | 199/221 [01:20<00:04,  4.53it/s][A
 90%|█████████ | 200/221 [01:20<00:05,  3.58it/s][A
 91%|█████████ | 201/221 [01:20<00:05,  3.65it/s][A
 91%|█████████▏| 202/221 [01:20<00:04,  4.38it/s][A
 92%|█████████▏| 203/221 [01:21<00:04,  3.99it/s][A
 93%|█████████▎| 205/221 [01:21<00:03,  5.30it/s][A
 93%|█████████▎| 206/221 [01:21<00:02,  5.01it/s][A
 94%|█████████▍| 208/221 [01:21<00:01,  6.77it/s][A
 95%|█████████▌| 210/221 [01:21<00:01,  8.64it/s][A
 96%|█████████▌| 212/221 [01:22<00:02,  4.34it/s][A
 97%|█████████▋| 214/221 [01:24<00:02,  2.78it/s][A
 97%|█████████▋| 215/221 [01:24<00:01,  3.07it/s][A
 98%|█████████▊| 216/221 [01:24<00:01,  3.46it/s][A
 98%|█████████▊| 217/221 [01:25<00:01,  2.41it/s][A
 99%|█████████▊| 218/221 [01:25<00:01,  2.08it/s][A
 99%|█████████▉| 219/221 [01:26<00:00,  2.41it/s][A
100%|█████████▉| 220/221 [01:31<00:01,  1.64s/it][A[h264 @ 0x563540b96dc0] mmco: unref short failure
[h264 @ 0x563540b96dc0] mmco: unref short failure
100%|██████████| 221/221 [01:31<00:00,  2.42it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:04,  3.42it/s][A
  1%|          | 2/221 [00:00<01:07,  3.25it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.32it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.33it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.35it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.34it/s][A
  3%|▎         | 7/221 [00:02<01:03,  3.36it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.32it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.33it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.29it/s][A
  5%|▍         | 11/221 [00:03<01:03,  3.32it/s][A
  5%|▌         | 12/221 [00:03<01:02,  3.35it/s][A
  6%|▌         | 13/221 [00:03<01:01,  3.37it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.38it/s][A
  7%|▋         | 15/221 [00:04<01:01,  3.37it/s][A
  7%|▋         | 16/221 [00:04<01:00,  3.38it/s][A
  8%|▊         | 17/221 [00:05<01:00,  3.39it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.38it/s][A
  9%|▊         | 19/221 [00:05<00:59,  3.38it/s][A
  9%|▉         | 20/221 [00:05<00:59,  3.39it/s][A
 10%|▉         | 21/221 [00:06<00:58,  3.39it/s][A
 10%|▉         | 22/221 [00:06<00:58,  3.38it/s][A
 10%|█         | 23/221 [00:06<00:59,  3.32it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.32it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 27/221 [00:08<00:59,  3.27it/s][A
 13%|█▎        | 28/221 [00:08<00:58,  3.31it/s][A
 13%|█▎        | 29/221 [00:08<00:57,  3.33it/s][A
 14%|█▎        | 30/221 [00:08<00:58,  3.26it/s][A
 14%|█▍        | 31/221 [00:09<00:57,  3.30it/s][A
 14%|█▍        | 32/221 [00:09<00:58,  3.25it/s][A
 15%|█▍        | 33/221 [00:09<00:57,  3.26it/s][A
 15%|█▌        | 34/221 [00:10<00:56,  3.30it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.29it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.32it/s][A
 17%|█▋        | 37/221 [00:11<00:55,  3.29it/s][A
 17%|█▋        | 38/221 [00:11<00:55,  3.32it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.34it/s][A
 18%|█▊        | 40/221 [00:12<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.38it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.39it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A[h264 @ 0x55864b7a5680] mmco: unref short failure

 20%|█▉        | 44/221 [00:13<00:52,  3.40it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.41it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.41it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.40it/s][A09/17/2024 09:46:01 - INFO - __main__ -   current idx n_JhqA-mYac.3 from finetune_area returns wrong image/video, use 4248 instead.

 24%|██▍       | 54/221 [00:16<00:49,  3.41it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 57/221 [00:16<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.41it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.41it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.41it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.41it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.41it/s][A[h264 @ 0x55771e6da080] mmco: unref short failure
[h264 @ 0x55771e6da080] mmco: unref short failure

 30%|███       | 67/221 [00:19<00:45,  3.42it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:35<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:42<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.43it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.43it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.43it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:01<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.43it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.41it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:42,  5.15it/s][A
  1%|          | 2/221 [00:00<00:49,  4.42it/s][A
  1%|▏         | 3/221 [00:00<01:02,  3.47it/s][A
  2%|▏         | 4/221 [00:01<00:55,  3.92it/s][A
  2%|▏         | 5/221 [00:01<00:46,  4.61it/s][A
  3%|▎         | 6/221 [00:01<00:41,  5.16it/s][A
  3%|▎         | 7/221 [00:01<00:49,  4.30it/s][A
  4%|▎         | 8/221 [00:01<00:59,  3.59it/s][A
  4%|▍         | 9/221 [00:02<01:05,  3.25it/s][A
  5%|▍         | 10/221 [00:02<01:06,  3.16it/s][A
  5%|▍         | 11/221 [00:02<00:59,  3.52it/s][A
  5%|▌         | 12/221 [00:03<00:53,  3.92it/s][A
  6%|▌         | 13/221 [00:03<01:18,  2.65it/s][A
  6%|▋         | 14/221 [00:04<01:15,  2.73it/s][A
  7%|▋         | 15/221 [00:04<01:10,  2.92it/s][A
  7%|▋         | 16/221 [00:04<01:17,  2.65it/s][A
  8%|▊         | 17/221 [00:05<01:29,  2.28it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.51it/s][A
  9%|▉         | 20/221 [00:05<00:55,  3.65it/s][A
 10%|▉         | 21/221 [00:06<00:50,  4.00it/s][A
 10%|▉         | 22/221 [00:06<00:48,  4.07it/s][A
 10%|█         | 23/221 [00:06<00:44,  4.44it/s][A
 11%|█         | 24/221 [00:06<00:42,  4.65it/s][A
 11%|█▏        | 25/221 [00:07<00:52,  3.73it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.71it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  4.00it/s][A
 13%|█▎        | 28/221 [00:07<00:49,  3.89it/s][A
 13%|█▎        | 29/221 [00:08<00:46,  4.12it/s][A
 14%|█▎        | 30/221 [00:08<00:55,  3.47it/s][A
 14%|█▍        | 31/221 [00:08<00:54,  3.49it/s][A
 14%|█▍        | 32/221 [00:08<00:48,  3.89it/s][A
 15%|█▍        | 33/221 [00:09<00:47,  3.96it/s][A
 15%|█▌        | 34/221 [00:09<00:53,  3.47it/s][A
 16%|█▌        | 35/221 [00:09<00:50,  3.66it/s][A
 16%|█▋        | 36/221 [00:10<00:56,  3.26it/s][A
 17%|█▋        | 37/221 [00:10<00:50,  3.67it/s][A
 17%|█▋        | 38/221 [00:10<00:52,  3.46it/s][A
 18%|█▊        | 39/221 [00:11<00:52,  3.49it/s][A
 18%|█▊        | 40/221 [00:11<00:51,  3.49it/s][A
 19%|█▊        | 41/221 [00:11<00:50,  3.58it/s][A
 19%|█▉        | 42/221 [00:11<00:45,  3.92it/s][A
 19%|█▉        | 43/221 [00:12<00:50,  3.52it/s][A
 20%|█▉        | 44/221 [00:12<00:55,  3.16it/s][A
 20%|██        | 45/221 [00:13<01:06,  2.66it/s][A
 21%|██        | 46/221 [00:13<01:08,  2.57it/s][A
 21%|██▏       | 47/221 [00:13<00:59,  2.90it/s][A
 22%|██▏       | 48/221 [00:13<00:50,  3.41it/s][A
 23%|██▎       | 50/221 [00:14<00:46,  3.68it/s][A
 23%|██▎       | 51/221 [00:14<00:45,  3.73it/s][A
 24%|██▍       | 53/221 [00:15<00:47,  3.57it/s][A
 24%|██▍       | 54/221 [00:15<00:46,  3.58it/s][A
 25%|██▍       | 55/221 [00:15<00:52,  3.17it/s][A
 25%|██▌       | 56/221 [00:16<00:54,  3.02it/s][A
 26%|██▌       | 57/221 [00:16<00:51,  3.17it/s][A
 26%|██▌       | 58/221 [00:16<00:43,  3.72it/s][A
 27%|██▋       | 59/221 [00:16<00:44,  3.67it/s][A
 27%|██▋       | 60/221 [00:17<00:40,  4.00it/s][A
 28%|██▊       | 61/221 [00:17<00:38,  4.13it/s][A
 28%|██▊       | 62/221 [00:17<00:43,  3.68it/s][A
 29%|██▉       | 64/221 [00:18<00:33,  4.71it/s][A
 29%|██▉       | 65/221 [00:18<00:34,  4.56it/s][A
 30%|██▉       | 66/221 [00:18<00:41,  3.74it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:19<00:47,  3.23it/s][A
 31%|███       | 69/221 [00:20<01:03,  2.39it/s][A
 32%|███▏      | 70/221 [00:20<01:00,  2.51it/s][A
 32%|███▏      | 71/221 [00:20<00:57,  2.63it/s][A
 33%|███▎      | 72/221 [00:21<00:54,  2.74it/s][A
 33%|███▎      | 73/221 [00:21<00:53,  2.79it/s][A
 33%|███▎      | 74/221 [00:21<00:47,  3.13it/s][A
 34%|███▍      | 75/221 [00:21<00:44,  3.30it/s][A
 34%|███▍      | 76/221 [00:22<00:38,  3.79it/s][A
 35%|███▍      | 77/221 [00:22<00:33,  4.35it/s][A
 35%|███▌      | 78/221 [00:22<00:35,  4.06it/s][A
 36%|███▌      | 79/221 [00:22<00:36,  3.91it/s][A
 36%|███▌      | 80/221 [00:22<00:31,  4.47it/s][A
 37%|███▋      | 81/221 [00:23<00:31,  4.47it/s][A
 37%|███▋      | 82/221 [00:23<00:42,  3.28it/s][A
 38%|███▊      | 84/221 [00:24<00:47,  2.89it/s][A
 38%|███▊      | 85/221 [00:24<00:43,  3.12it/s][A
 39%|███▉      | 86/221 [00:25<00:48,  2.76it/s][A
 39%|███▉      | 87/221 [00:25<00:49,  2.68it/s][A
 40%|███▉      | 88/221 [00:25<00:48,  2.75it/s][A
 40%|████      | 89/221 [00:26<00:44,  2.93it/s][A
 41%|████      | 90/221 [00:26<00:51,  2.54it/s][A
 41%|████      | 91/221 [00:26<00:44,  2.89it/s][A
 42%|████▏     | 92/221 [00:27<00:46,  2.75it/s][A
 42%|████▏     | 93/221 [00:27<00:53,  2.41it/s][A
 43%|████▎     | 94/221 [00:28<00:46,  2.72it/s][A
 43%|████▎     | 95/221 [00:28<00:51,  2.44it/s][A
 43%|████▎     | 96/221 [00:29<00:52,  2.36it/s][A
 44%|████▍     | 97/221 [00:29<00:49,  2.52it/s][A
 44%|████▍     | 98/221 [00:29<00:48,  2.55it/s][A
 45%|████▍     | 99/221 [00:30<00:44,  2.76it/s][A
 45%|████▌     | 100/221 [00:30<00:38,  3.18it/s][A
 46%|████▌     | 101/221 [00:30<00:32,  3.65it/s][A
 46%|████▌     | 102/221 [00:30<00:32,  3.66it/s][A
 47%|████▋     | 103/221 [00:30<00:29,  4.01it/s][A
 47%|████▋     | 104/221 [00:31<00:25,  4.56it/s][A
 48%|████▊     | 105/221 [00:31<00:29,  3.95it/s][A
 48%|████▊     | 106/221 [00:31<00:36,  3.13it/s][A
 48%|████▊     | 107/221 [00:32<00:37,  3.08it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.75it/s][A
 49%|████▉     | 109/221 [00:32<00:27,  4.02it/s][A
 50%|████▉     | 110/221 [00:32<00:30,  3.65it/s][A
 50%|█████     | 111/221 [00:33<00:30,  3.62it/s][A
 51%|█████     | 112/221 [00:33<00:29,  3.63it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.48it/s][A
 52%|█████▏    | 114/221 [00:34<00:27,  3.96it/s][A
 52%|█████▏    | 115/221 [00:34<00:23,  4.43it/s][A
 52%|█████▏    | 116/221 [00:34<00:24,  4.35it/s][A
 53%|█████▎    | 117/221 [00:34<00:25,  4.05it/s][A
 53%|█████▎    | 118/221 [00:34<00:26,  3.87it/s][A
 54%|█████▍    | 119/221 [00:35<00:31,  3.26it/s][A
 54%|█████▍    | 120/221 [00:35<00:36,  2.78it/s][A
 55%|█████▍    | 121/221 [00:36<00:35,  2.80it/s][A
 55%|█████▌    | 122/221 [00:36<00:31,  3.11it/s][A
 56%|█████▌    | 123/221 [00:36<00:34,  2.81it/s][A
 56%|█████▌    | 124/221 [00:37<00:35,  2.73it/s][A
 57%|█████▋    | 125/221 [00:37<00:40,  2.36it/s][A
 57%|█████▋    | 126/221 [00:38<00:37,  2.56it/s][A
 57%|█████▋    | 127/221 [00:38<00:36,  2.55it/s][A
 58%|█████▊    | 128/221 [00:38<00:33,  2.78it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.44it/s][A
 59%|█████▉    | 130/221 [00:39<00:25,  3.58it/s][A
 59%|█████▉    | 131/221 [00:39<00:24,  3.70it/s][A
 60%|█████▉    | 132/221 [00:39<00:22,  4.00it/s][A
 60%|██████    | 133/221 [00:40<00:24,  3.52it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.24it/s][A
 61%|██████    | 135/221 [00:40<00:23,  3.59it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.41it/s][A
 62%|██████▏   | 137/221 [00:41<00:23,  3.63it/s][A
 62%|██████▏   | 138/221 [00:41<00:22,  3.70it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.05it/s][A
 63%|██████▎   | 140/221 [00:42<00:22,  3.53it/s][A
 64%|██████▍   | 141/221 [00:42<00:27,  2.90it/s][A
 64%|██████▍   | 142/221 [00:42<00:23,  3.33it/s][A
 65%|██████▍   | 143/221 [00:43<00:23,  3.31it/s][A
 65%|██████▌   | 144/221 [00:43<00:23,  3.28it/s][A
 66%|██████▌   | 145/221 [00:43<00:25,  2.99it/s][A
 66%|██████▌   | 146/221 [00:44<00:22,  3.29it/s][A
 67%|██████▋   | 147/221 [00:44<00:19,  3.71it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.93it/s][A
 67%|██████▋   | 149/221 [00:44<00:22,  3.25it/s][A
 68%|██████▊   | 150/221 [00:45<00:21,  3.32it/s][A
 68%|██████▊   | 151/221 [00:45<00:22,  3.16it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.26it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.47it/s][A
 70%|██████▉   | 154/221 [00:47<00:27,  2.44it/s][A
 70%|███████   | 155/221 [00:47<00:24,  2.70it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.13it/s][A
 71%|███████   | 157/221 [00:47<00:19,  3.35it/s][A
 71%|███████▏  | 158/221 [00:48<00:22,  2.85it/s][A
 72%|███████▏  | 159/221 [00:48<00:20,  3.02it/s][A
 72%|███████▏  | 160/221 [00:48<00:19,  3.09it/s][A
 73%|███████▎  | 161/221 [00:48<00:15,  3.76it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.52it/s][A
 74%|███████▍  | 164/221 [00:49<00:12,  4.64it/s][A
 75%|███████▍  | 165/221 [00:49<00:14,  3.90it/s][A
 75%|███████▌  | 166/221 [00:50<00:17,  3.12it/s][A
 76%|███████▌  | 167/221 [00:50<00:14,  3.80it/s][A
 76%|███████▌  | 168/221 [00:50<00:15,  3.50it/s][A
 77%|███████▋  | 170/221 [00:51<00:12,  3.94it/s][A
 77%|███████▋  | 171/221 [00:51<00:12,  3.85it/s][A
 78%|███████▊  | 172/221 [00:51<00:12,  3.79it/s][A
 78%|███████▊  | 173/221 [00:52<00:13,  3.58it/s][A
 79%|███████▊  | 174/221 [00:52<00:15,  3.03it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.16it/s][A
 80%|███████▉  | 176/221 [00:53<00:12,  3.64it/s][A
 80%|████████  | 177/221 [00:53<00:11,  3.87it/s][A
 81%|████████  | 178/221 [00:53<00:16,  2.55it/s][A
 81%|████████  | 179/221 [00:54<00:14,  2.85it/s][A
 81%|████████▏ | 180/221 [00:54<00:11,  3.44it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.69it/s][A
 82%|████████▏ | 182/221 [00:55<00:13,  2.95it/s][A
 83%|████████▎ | 183/221 [00:55<00:12,  2.98it/s][A
 83%|████████▎ | 184/221 [00:55<00:12,  2.95it/s][A
 84%|████████▎ | 185/221 [00:56<00:09,  3.72it/s][A
 84%|████████▍ | 186/221 [00:56<00:10,  3.32it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.50it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.29it/s][A
 86%|████████▌ | 189/221 [00:57<00:08,  3.59it/s][A
 86%|████████▌ | 190/221 [00:57<00:08,  3.45it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.72it/s][A
 87%|████████▋ | 192/221 [00:57<00:06,  4.18it/s][A
 87%|████████▋ | 193/221 [00:58<00:07,  3.60it/s][A
 88%|████████▊ | 194/221 [00:58<00:09,  3.00it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.54it/s][A
 89%|████████▊ | 196/221 [00:59<00:07,  3.40it/s][A
 89%|████████▉ | 197/221 [00:59<00:06,  3.60it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.57it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  3.86it/s][A
 90%|█████████ | 200/221 [01:00<00:05,  3.72it/s][A
 91%|█████████ | 201/221 [01:00<00:04,  4.01it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.61it/s][A
 92%|█████████▏| 203/221 [01:01<00:04,  3.76it/s][A
 92%|█████████▏| 204/221 [01:01<00:04,  3.83it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.37it/s][A
 93%|█████████▎| 206/221 [01:02<00:05,  2.59it/s][A
 94%|█████████▎| 207/221 [01:02<00:06,  2.29it/s][A
 94%|█████████▍| 208/221 [01:03<00:04,  2.66it/s][A
 95%|█████████▍| 209/221 [01:03<00:03,  3.00it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.06it/s][A
 95%|█████████▌| 211/221 [01:03<00:03,  3.28it/s][A
 96%|█████████▌| 212/221 [01:04<00:02,  3.51it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.38it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.89it/s][A
 97%|█████████▋| 215/221 [01:05<00:02,  2.81it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.86it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.09it/s][A
 99%|█████████▊| 218/221 [01:06<00:00,  3.31it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  3.00it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.43it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.55it/s][A100%|██████████| 221/221 [01:06<00:00,  3.30it/s]
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'area_r1': 39.5, 'area_recall': '39.5/64.9/73.1', 'area_ravg': 59.2}
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'forward_r1': 37.4, 'forward_recall': '37.4/67.5/76.9', 'forward_ravg': 60.6}
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'area_video_r1': 38.6, 'area_video_recall': '38.6/68.1/78.7', 'area_video_ravg': 61.8}
09/17/2024 09:47:58 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 09:47:58 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'area_video_r1': 53.1, 'area_video_recall': '53.1/75.1/81.4', 'area_video_ravg': 69.9, 'area_video_back_r1': 48.0, 'area_video_back_recall': '48.0/74.5/82.5', 'area_video_back_ravg': 68.3}
09/17/2024 09:47:58 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 09:47:58 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'video_r1': 35.7, 'video_recall': '35.7/65.0/74.1', 'video_ravg': 58.3}
09/17/2024 09:47:58 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 09:47:58 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 09:47:58 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1549--===========

09/17/2024 09:47:58 - INFO - __main__ -   {'video_r1': 52.4, 'video_recall': '52.4/74.4/81.6', 'video_ravg': 69.5}
09/17/2024 09:47:58 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 09:47:58 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 09:48:19 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.006201649084687233, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.058272123336792, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.076709270477295, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.1411828994750977}
 53%|█████▎    | 1550/2910 [9:52:22<51:34:54, 136.54s/it] 53%|█████▎    | 1551/2910 [9:52:26<36:31:36, 96.76s/it]  53%|█████▎    | 1552/2910 [9:52:31<26:03:00, 69.06s/it] 53%|█████▎    | 1553/2910 [9:52:35<18:46:09, 49.79s/it] 53%|█████▎    | 1554/2910 [9:52:41<13:42:33, 36.40s/it][h264 @ 0x55863678ad40] mmco: unref short failure
[h264 @ 0x55863678ad40] mmco: unref short failure
[h264 @ 0x55863678ad40] mmco: unref short failure
[h264 @ 0x55863678ad40] mmco: unref short failure
[h264 @ 0x557724cabcc0] mmco: unref short failure
[h264 @ 0x557724cabcc0] mmco: unref short failure
 53%|█████▎    | 1555/2910 [9:52:46<10:12:08, 27.11s/it] 53%|█████▎    | 1556/2910 [9:52:52<7:48:52, 20.78s/it]  54%|█████▎    | 1557/2910 [9:52:59<6:13:27, 16.56s/it][h264 @ 0x5635521afec0] mmco: unref short failure
 54%|█████▎    | 1558/2910 [9:53:05<5:06:37, 13.61s/it] 54%|█████▎    | 1559/2910 [9:53:12<4:19:27, 11.52s/it][h264 @ 0x5556dc5d9100] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
 54%|█████▎    | 1560/2910 [9:53:19<3:48:24, 10.15s/it][h264 @ 0x563545a9a280] mmco: unref short failure
[h264 @ 0x563545a9a280] mmco: unref short failure
[h264 @ 0x563545a9a280] mmco: unref short failure
[h264 @ 0x563545a9a280] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
[h264 @ 0x558643b40040] mmco: unref short failure
 54%|█████▎    | 1561/2910 [9:53:26<3:26:44,  9.20s/it][h264 @ 0x563540bbe480] mmco: unref short failure
[h264 @ 0x563540bbe480] mmco: unref short failure
[h264 @ 0x55771882d500] mmco: unref short failure
[h264 @ 0x55863e136040] mmco: unref short failure
[h264 @ 0x55863e136040] mmco: unref short failure
[h264 @ 0x55771fec88c0] mmco: unref short failure
[h264 @ 0x55771fec88c0] mmco: unref short failure
 54%|█████▎    | 1562/2910 [9:53:32<3:06:33,  8.30s/it][h264 @ 0x5556c8f50200] mmco: unref short failure
[h264 @ 0x5556c8f50200] mmco: unref short failure
[h264 @ 0x5556c8f50200] mmco: unref short failure
[h264 @ 0x5556c8f50200] mmco: unref short failure
[h264 @ 0x5556cb3ce000] mmco: unref short failure
[h264 @ 0x5556cb3ce000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x55771dc49000] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
[h264 @ 0x558633033940] mmco: unref short failure
[h264 @ 0x55771fec88c0] mmco: unref short failure
 54%|█████▎    | 1563/2910 [9:53:39<2:57:35,  7.91s/it][h264 @ 0x55568c5bfcc0] mmco: unref short failure
[h264 @ 0x5577296f3fc0] mmco: unref short failure
[h264 @ 0x563548cc1240] mmco: unref short failure
[h264 @ 0x563548cc1240] mmco: unref short failure
 54%|█████▎    | 1564/2910 [9:53:46<2:51:28,  7.64s/it][h264 @ 0x557718891080] mmco: unref short failure
[h264 @ 0x5556e093d1c0] mmco: unref short failure
 54%|█████▍    | 1565/2910 [9:53:53<2:45:15,  7.37s/it][h264 @ 0x5556d2ef6500] mmco: unref short failure
[h264 @ 0x563550d006c0] mmco: unref short failure
[h264 @ 0x563550d006c0] mmco: unref short failure
[h264 @ 0x5556d9181f40] mmco: unref short failure
[h264 @ 0x5556d9181f40] mmco: unref short failure
[h264 @ 0x557717e42740] mmco: unref short failure
[h264 @ 0x557717e42740] mmco: unref short failure
[h264 @ 0x557730110f80] mmco: unref short failure
[h264 @ 0x557730110f80] mmco: unref short failure
 54%|█████▍    | 1566/2910 [9:54:26<5:37:29, 15.07s/it][h264 @ 0x5556e093d1c0] mmco: unref short failure
[h264 @ 0x56356259ad80] mmco: unref short failure
[h264 @ 0x56356259ad80] mmco: unref short failure
[h264 @ 0x558649c23880] mmco: unref short failure
[h264 @ 0x558649c23880] mmco: unref short failure
[h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x563555794180] mmco: unref short failure
[h264 @ 0x5556d8f9ef80] mmco: unref short failure
 54%|█████▍    | 1567/2910 [9:54:41<5:34:25, 14.94s/it][h264 @ 0x55864b955e00] mmco: unref short failure
[h264 @ 0x55864b955e00] mmco: unref short failure
[h264 @ 0x55864b955e00] mmco: unref short failure
[h264 @ 0x55864b955e00] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
 54%|█████▍    | 1568/2910 [9:54:50<4:58:07, 13.33s/it][h264 @ 0x55864ec5a240] mmco: unref short failure
[h264 @ 0x55864ec5a240] mmco: unref short failure
09/17/2024 09:50:53 - INFO - __main__ -   current idx uFCptSipOAs.53 from finetune_area returns wrong image/video, use 84483 instead.
[h264 @ 0x563547fc5180] mmco: unref short failure
[h264 @ 0x563547fc5180] mmco: unref short failure
 54%|█████▍    | 1569/2910 [9:55:01<4:37:54, 12.43s/it][h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x557717edbc00] mmco: unref short failure
[h264 @ 0x5556ce0ac340] mmco: unref short failure
[h264 @ 0x5556ce0ac340] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x563558c1f340] mmco: unref short failure
[h264 @ 0x558638680a00] mmco: unref short failure
[h264 @ 0x558638680a00] mmco: unref short failure
 54%|█████▍    | 1570/2910 [9:55:19<5:19:36, 14.31s/it][h264 @ 0x563545c80780] mmco: unref short failure
[h264 @ 0x563545c80780] mmco: unref short failure
[h264 @ 0x5556e093d1c0] mmco: unref short failure
[h264 @ 0x5556e093d1c0] mmco: unref short failure
[h264 @ 0x55864894d540] mmco: unref short failure
 54%|█████▍    | 1571/2910 [9:55:29<4:45:35, 12.80s/it][h264 @ 0x558639dcc3c0] mmco: unref short failure
[h264 @ 0x558639dcc3c0] mmco: unref short failure
 54%|█████▍    | 1572/2910 [9:55:37<4:13:36, 11.37s/it][h264 @ 0x558643b1fa00] mmco: unref short failure
09/17/2024 09:51:38 - INFO - __main__ -   current idx bLVzqC3fftg.6 from finetune_area returns wrong image/video, use 117261 instead.
[h264 @ 0x557732ea4740] mmco: unref short failure
[h264 @ 0x557732ea4740] mmco: unref short failure
 54%|█████▍    | 1573/2910 [9:55:45<3:51:09, 10.37s/it][h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
09/17/2024 09:51:49 - INFO - __main__ -   current idx Ba46lyNCRP8.22 from finetune_area returns wrong image/video, use 32957 instead.
[h264 @ 0x558643b1fa00] mmco: unref short failure
[h264 @ 0x558643b1fa00] mmco: unref short failure
[h264 @ 0x558643b1fa00] mmco: unref short failure
[h264 @ 0x558643b1fa00] mmco: unref short failure
[h264 @ 0x557719b41f80] mmco: unref short failure
[h264 @ 0x558638680a00] mmco: unref short failure
[h264 @ 0x55864ce37780] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x557732f8b300] mmco: unref short failure
[h264 @ 0x55863d112e40] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x557730ca2d00] mmco: unref short failure
[h264 @ 0x557730ca2d00] mmco: unref short failure
[h264 @ 0x558639da6f80] mmco: unref short failure
[h264 @ 0x5556e279d740] mmco: unref short failure
[h264 @ 0x5556e279d740] mmco: unref short failure
[h264 @ 0x557726f7f9c0] mmco: unref short failure
[h264 @ 0x557726f7f9c0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
 54%|█████▍    | 1574/2910 [9:57:05<11:39:30, 31.42s/it][h264 @ 0x5586376ff880] mmco: unref short failure
[h264 @ 0x56354a674800] mmco: unref short failure
 54%|█████▍    | 1575/2910 [9:57:15<9:13:52, 24.89s/it] [h264 @ 0x5577306c7100] mmco: unref short failure
[h264 @ 0x5577306c7100] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x55568ca55580] mmco: unref short failure
[h264 @ 0x55568ca55580] mmco: unref short failure
[h264 @ 0x557730110f80] mmco: unref short failure
[h264 @ 0x557730110f80] mmco: unref short failure
[h264 @ 0x55863d4e9740] mmco: unref short failure
[h264 @ 0x563563c32000] mmco: unref short failure
[h264 @ 0x563563c32000] mmco: unref short failure
[h264 @ 0x557723140b80] mmco: unref short failure
09/17/2024 09:53:27 - INFO - __main__ -   current idx My9wyuAl8zM.76 from finetune_area returns wrong image/video, use 73502 instead.
 54%|█████▍    | 1576/2910 [9:57:30<8:07:49, 21.94s/it] 54%|█████▍    | 1577/2910 [9:57:36<6:24:01, 17.29s/it][h264 @ 0x56356331b800] mmco: unref short failure
 54%|█████▍    | 1578/2910 [9:57:54<6:26:38, 17.42s/it] 54%|█████▍    | 1579/2910 [9:58:01<5:20:04, 14.43s/it][h264 @ 0x558647494500] mmco: unref short failure
[h264 @ 0x558647494500] mmco: unref short failure
not have audios CqzowavAOpc.38
 54%|█████▍    | 1580/2910 [9:58:15<5:12:22, 14.09s/it][h264 @ 0x5556cb98c880] mmco: unref short failure
 54%|█████▍    | 1581/2910 [9:58:21<4:20:06, 11.74s/it][h264 @ 0x558639e73700] mmco: unref short failure
[h264 @ 0x558639e73700] mmco: unref short failure
09/17/2024 09:54:26 - INFO - __main__ -   current idx CG32SuNky54.5 from finetune_area returns wrong image/video, use 30145 instead.
[h264 @ 0x558631e9e0c0] mmco: unref short failure
[h264 @ 0x5556d1526480] mmco: unref short failure
[h264 @ 0x5556d1526480] mmco: unref short failure
[h264 @ 0x5556e1d28ac0] mmco: unref short failure
[h264 @ 0x55863455bc80] mmco: unref short failure
[h264 @ 0x55863455bc80] mmco: unref short failure
[h264 @ 0x5556dccc1980] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x5556dc1fc640] mmco: unref short failure
[h264 @ 0x5556dc1fc640] mmco: unref short failure
[h264 @ 0x5576de33af00] mmco: unref short failure
[h264 @ 0x5576de33af00] mmco: unref short failure
[h264 @ 0x5556dd349580] mmco: unref short failure
[h264 @ 0x563547fc5180] mmco: unref short failure
[h264 @ 0x563547fc5180] mmco: unref short failure
[h264 @ 0x5556c719a340] mmco: unref short failure
[h264 @ 0x5556c719a340] mmco: unref short failure
[h264 @ 0x5556c719a340] mmco: unref short failure
[h264 @ 0x5556c719a340] mmco: unref short failure
[h264 @ 0x5576df088e80] mmco: unref short failure
[h264 @ 0x5576df088e80] mmco: unref short failure
[h264 @ 0x5576df088e80] mmco: unref short failure
[h264 @ 0x558635c39e40] mmco: unref short failure
[h264 @ 0x55771e60d000] mmco: unref short failure
[h264 @ 0x5556ca59ea80] mmco: unref short failure
[h264 @ 0x5556ca59ea80] mmco: unref short failure
 54%|█████▍    | 1582/2910 [9:59:31<10:43:52, 29.09s/it][h264 @ 0x5556cad560c0] mmco: unref short failure
[h264 @ 0x5586370c4b80] mmco: unref short failure
[h264 @ 0x5577337e1400] mmco: unref short failure
[h264 @ 0x55772f0149c0] mmco: unref short failure
[h264 @ 0x55772f0149c0] mmco: unref short failure
 54%|█████▍    | 1583/2910 [9:59:43<8:52:16, 24.07s/it] [h264 @ 0x55771a24c780] mmco: unref short failure
[h264 @ 0x5586466cfe80] mmco: unref short failure
[h264 @ 0x5586466cfe80] mmco: unref short failure
[h264 @ 0x5586466cfe80] mmco: unref short failure
[h264 @ 0x5586466cfe80] mmco: unref short failure
[h264 @ 0x55568bd66140] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x5556d7cea980] mmco: unref short failure
[h264 @ 0x5556d3b6e000] mmco: unref short failure
[h264 @ 0x5556d3b6e000] mmco: unref short failure
 54%|█████▍    | 1584/2910 [10:00:11<9:17:32, 25.23s/it][h264 @ 0x558639e73700] mmco: unref short failure
[h264 @ 0x558639e73700] mmco: unref short failure
[h264 @ 0x558639e73700] mmco: unref short failure
[h264 @ 0x558639e73700] mmco: unref short failure
 54%|█████▍    | 1585/2910 [10:00:17<7:13:16, 19.62s/it] 55%|█████▍    | 1586/2910 [10:00:24<5:47:59, 15.77s/it][h264 @ 0x5635408ec440] mmco: unref short failure
[h264 @ 0x5635408ec440] mmco: unref short failure
 55%|█████▍    | 1587/2910 [10:00:30<4:43:41, 12.87s/it][h264 @ 0x558649c1f640] mmco: unref short failure
[h264 @ 0x5556d95e1740] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5556d95e1740] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5556cb98c880] mmco: unref short failure
[h264 @ 0x55771a24c780] mmco: unref short failure
[h264 @ 0x55771a24c780] mmco: unref short failure
 55%|█████▍    | 1588/2910 [10:00:51<5:35:33, 15.23s/it][h264 @ 0x558649c1f640] mmco: unref short failure
 55%|█████▍    | 1589/2910 [10:01:00<4:56:31, 13.47s/it][h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x558634f913c0] mmco: unref short failure
[h264 @ 0x557723fab0c0] mmco: unref short failure
[h264 @ 0x558649e9be80] mmco: unref short failure
[h264 @ 0x55771e60d000] mmco: unref short failure
[h264 @ 0x55772850b100] mmco: unref short failure
[h264 @ 0x55772850b100] mmco: unref short failure
[h264 @ 0x557725c02b00] mmco: unref short failure
[h264 @ 0x557725c02b00] mmco: unref short failure
[h264 @ 0x557725c02b00] mmco: unref short failure
[h264 @ 0x557725c02b00] mmco: unref short failure
09/17/2024 09:58:00 - INFO - __main__ -   current idx JOgG5komufg.1 from finetune_area returns wrong image/video, use 37808 instead.
[h264 @ 0x55771b7cf680] mmco: unref short failure
 55%|█████▍    | 1590/2910 [10:02:01<10:09:52, 27.72s/it][h264 @ 0x5556c73f2bc0] mmco: unref short failure
[h264 @ 0x5556c73f2bc0] mmco: unref short failure
 55%|█████▍    | 1591/2910 [10:02:11<8:10:15, 22.30s/it] [h264 @ 0x5577306c7100] mmco: unref short failure
[h264 @ 0x563543441300] mmco: unref short failure
[h264 @ 0x563543441300] mmco: unref short failure
[h264 @ 0x563543441300] mmco: unref short failure
[h264 @ 0x563543441300] mmco: unref short failure
[h264 @ 0x558639665ac0] mmco: unref short failure
09/17/2024 09:58:34 - INFO - __main__ -   current idx NplowkZTvc0.7 from finetune_area returns wrong image/video, use 94700 instead.
[h264 @ 0x5577316b2b40] mmco: unref short failure
[h264 @ 0x5577316b2b40] mmco: unref short failure
[h264 @ 0x56355d4b9180] mmco: unref short failure
 55%|█████▍    | 1592/2910 [10:02:53<10:17:45, 28.12s/it][h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x55863741a8c0] mmco: unref short failure
 55%|█████▍    | 1593/2910 [10:03:00<7:59:51, 21.86s/it]  55%|█████▍    | 1594/2910 [10:03:06<6:13:51, 17.05s/it][h264 @ 0x55771875a380] mmco: unref short failure
 55%|█████▍    | 1595/2910 [10:03:12<5:03:39, 13.86s/it][h264 @ 0x56355ee45700] mmco: unref short failure
 55%|█████▍    | 1596/2910 [10:03:27<5:10:24, 14.17s/it][h264 @ 0x5635575901c0] mmco: unref short failure
[h264 @ 0x5635575901c0] mmco: unref short failure
 55%|█████▍    | 1597/2910 [10:03:34<4:24:49, 12.10s/it][h264 @ 0x558652c81400] mmco: unref short failure
[h264 @ 0x558652c81400] mmco: unref short failure
[h264 @ 0x5556c53447c0] mmco: unref short failure
[h264 @ 0x5556c9b08a00] mmco: unref short failure
[h264 @ 0x5556c9b08a00] mmco: unref short failure
[h264 @ 0x56356313af80] mmco: unref short failure
[h264 @ 0x56356313af80] mmco: unref short failure
[h264 @ 0x56356313af80] mmco: unref short failure
[h264 @ 0x56356313af80] mmco: unref short failure
[h264 @ 0x56354a92bfc0] mmco: unref short failure
[h264 @ 0x558649454380] mmco: unref short failure
[h264 @ 0x558649454380] mmco: unref short failure
[h264 @ 0x55771a24c780] mmco: unref short failure
 55%|█████▍    | 1598/2910 [10:04:37<9:57:07, 27.31s/it][h264 @ 0x55772cb816c0] mmco: unref short failure
[h264 @ 0x5556c57ae200] mmco: unref short failure
[h264 @ 0x5556c57ae200] mmco: unref short failure
[h264 @ 0x5556c57ae200] mmco: unref short failure
[h264 @ 0x5556c57ae200] mmco: unref short failure
 55%|█████▍    | 1599/2910 [10:04:49<8:17:59, 22.79s/it]09/17/2024 10:00:48 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 10:00:48 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x5577344c67c0] mmco: unref short failure
[h264 @ 0x5577344c67c0] mmco: unref short failure
[h264 @ 0x5556c432e700] mmco: unref short failure
[h264 @ 0x558649c1f640] mmco: unref short failure
[h264 @ 0x557721b89440] mmco: unref short failure
[h264 @ 0x557721b89440] mmco: unref short failure
[h264 @ 0x55863c2afac0] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56354be2f140] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 10:01:48 - INFO - __main__ -   current idx KkwmYlgkOhU.38 from finetune_area returns wrong image/video, use 6033 instead.
[h264 @ 0x5635452e6040] mmco: unref short failure
[h264 @ 0x5635452e6040] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x56354ae547c0] mmco: unref short failure
[h264 @ 0x5556c5111f00] mmco: unref short failure
[h264 @ 0x5556e1b7e100] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x5556cf15a400] mmco: unref short failure
[h264 @ 0x5556cf15a400] mmco: unref short failure
[h264 @ 0x557727dbc000] mmco: unref short failure
[h264 @ 0x557727dbc000] mmco: unref short failure
[h264 @ 0x558636a1c480] mmco: unref short failure
09/17/2024 10:03:00 - INFO - __main__ -   current idx DnpQpBpq4-8.30 from finetune_area returns wrong image/video, use 102528 instead.
[h264 @ 0x557723446440] mmco: unref short failure
[h264 @ 0x5556ce6f58c0] mmco: unref short failure
[h264 @ 0x5556ce6f58c0] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:01<03:54,  1.07s/it][A
  1%|          | 2/221 [00:01<03:03,  1.20it/s][A
  1%|▏         | 3/221 [00:01<01:50,  1.97it/s][A
  2%|▏         | 5/221 [00:02<00:58,  3.67it/s][A
  3%|▎         | 6/221 [00:02<00:51,  4.20it/s][A
  3%|▎         | 7/221 [00:02<00:53,  4.01it/s][A
  4%|▎         | 8/221 [00:03<01:11,  2.99it/s][A
  4%|▍         | 9/221 [00:03<00:57,  3.68it/s][A
  5%|▍         | 10/221 [00:03<00:57,  3.67it/s][A
  5%|▍         | 11/221 [00:03<00:53,  3.91it/s][A
  5%|▌         | 12/221 [00:04<01:19,  2.63it/s][A
  6%|▋         | 14/221 [00:04<01:02,  3.33it/s][A
  7%|▋         | 15/221 [00:04<00:55,  3.72it/s][A
  7%|▋         | 16/221 [00:05<00:52,  3.91it/s][A
  8%|▊         | 17/221 [00:05<00:55,  3.66it/s][A
  8%|▊         | 18/221 [00:05<00:54,  3.73it/s][A
  9%|▊         | 19/221 [00:05<00:47,  4.24it/s][A
  9%|▉         | 20/221 [00:06<00:47,  4.24it/s][A
 10%|▉         | 21/221 [00:06<00:46,  4.26it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.24it/s][A
 10%|█         | 23/221 [00:06<00:40,  4.92it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.54it/s][A
 11%|█▏        | 25/221 [00:06<00:33,  5.89it/s][A
 12%|█▏        | 26/221 [00:07<00:36,  5.32it/s][A
 12%|█▏        | 27/221 [00:07<00:32,  5.91it/s][A
 13%|█▎        | 28/221 [00:07<00:38,  4.97it/s][A
 14%|█▎        | 30/221 [00:07<00:32,  5.93it/s][A
 14%|█▍        | 31/221 [00:07<00:30,  6.31it/s][A
 14%|█▍        | 32/221 [00:08<00:29,  6.39it/s][A
 15%|█▍        | 33/221 [00:08<00:43,  4.31it/s][A
 15%|█▌        | 34/221 [00:08<00:37,  4.97it/s][A
 16%|█▌        | 35/221 [00:08<00:33,  5.51it/s][A
 16%|█▋        | 36/221 [00:09<00:35,  5.18it/s][A
 17%|█▋        | 37/221 [00:09<00:56,  3.27it/s][A
 17%|█▋        | 38/221 [00:09<00:55,  3.29it/s][A
 18%|█▊        | 39/221 [00:10<00:47,  3.80it/s][A
 18%|█▊        | 40/221 [00:11<00:48,  3.69it/s][A
 19%|█▊        | 41/221 [00:11<01:23,  2.17it/s][A
 19%|█▉        | 42/221 [00:12<01:59,  1.50it/s][A
 19%|█▉        | 43/221 [00:12<01:34,  1.87it/s][A
 20%|█▉        | 44/221 [00:12<01:14,  2.39it/s][A
 20%|██        | 45/221 [00:13<01:39,  1.77it/s][A
 21%|██        | 46/221 [00:14<01:42,  1.71it/s][A[h264 @ 0x5556de7334c0] mmco: unref short failure
[h264 @ 0x5556de7334c0] mmco: unref short failure
[h264 @ 0x5586423b1040] mmco: unref short failure
[h264 @ 0x5586423b1040] mmco: unref short failure

 21%|██▏       | 47/221 [00:17<04:07,  1.42s/it][A
 22%|██▏       | 48/221 [00:18<03:08,  1.09s/it][A
 22%|██▏       | 49/221 [00:18<02:21,  1.21it/s][A
 23%|██▎       | 50/221 [00:18<01:45,  1.61it/s][A
 23%|██▎       | 51/221 [00:18<01:20,  2.12it/s][A
 24%|██▎       | 52/221 [00:18<01:01,  2.75it/s][A
 24%|██▍       | 53/221 [00:18<00:53,  3.16it/s][A
 24%|██▍       | 54/221 [00:19<01:09,  2.42it/s][A
 25%|██▍       | 55/221 [00:19<00:58,  2.85it/s][A
 25%|██▌       | 56/221 [00:19<00:49,  3.35it/s][A
 26%|██▌       | 57/221 [00:20<01:02,  2.62it/s][A
 26%|██▌       | 58/221 [00:20<00:49,  3.31it/s][A
 27%|██▋       | 59/221 [00:20<00:39,  4.10it/s][A
 27%|██▋       | 60/221 [00:21<00:46,  3.47it/s][A
 28%|██▊       | 61/221 [00:21<00:42,  3.80it/s][A
 28%|██▊       | 62/221 [00:21<00:36,  4.30it/s][A
 29%|██▊       | 63/221 [00:21<00:32,  4.89it/s][A
 29%|██▉       | 64/221 [00:21<00:32,  4.83it/s][A
 29%|██▉       | 65/221 [00:21<00:33,  4.65it/s][A
 30%|██▉       | 66/221 [00:22<00:54,  2.86it/s][A
 30%|███       | 67/221 [00:22<00:47,  3.25it/s][A
 31%|███       | 68/221 [00:23<00:42,  3.60it/s][A
 31%|███       | 69/221 [00:23<00:51,  2.95it/s][A
 32%|███▏      | 70/221 [00:23<00:43,  3.43it/s][A
 32%|███▏      | 71/221 [00:27<03:07,  1.25s/it][A
 33%|███▎      | 72/221 [00:27<02:17,  1.08it/s][A
 33%|███▎      | 73/221 [00:27<01:54,  1.29it/s][A
 33%|███▎      | 74/221 [00:27<01:28,  1.67it/s][A
 34%|███▍      | 75/221 [00:28<01:18,  1.86it/s][A
 34%|███▍      | 76/221 [00:28<01:05,  2.22it/s][A
 35%|███▍      | 77/221 [00:28<00:53,  2.67it/s][A
 35%|███▌      | 78/221 [00:29<00:50,  2.85it/s][A
 36%|███▌      | 79/221 [00:29<01:11,  2.00it/s][A
 36%|███▌      | 80/221 [00:30<01:00,  2.32it/s][A
 37%|███▋      | 81/221 [00:30<00:52,  2.66it/s][A[h264 @ 0x55863f6a7e40] mmco: unref short failure

 37%|███▋      | 82/221 [00:31<00:58,  2.38it/s][A
 38%|███▊      | 83/221 [00:31<00:51,  2.68it/s][A
 38%|███▊      | 84/221 [00:31<00:40,  3.36it/s][A
 39%|███▉      | 86/221 [00:31<00:28,  4.78it/s][A
 39%|███▉      | 87/221 [00:31<00:32,  4.08it/s][A
 40%|███▉      | 88/221 [00:32<00:35,  3.72it/s][A
 40%|████      | 89/221 [00:35<02:27,  1.12s/it][A
 41%|████      | 90/221 [00:35<01:54,  1.15it/s][A
 41%|████      | 91/221 [00:36<01:25,  1.52it/s][A
 42%|████▏     | 92/221 [00:36<01:08,  1.88it/s][A
 42%|████▏     | 93/221 [00:36<01:12,  1.77it/s][A[h264 @ 0x557723ddb1c0] mmco: unref short failure
[h264 @ 0x557723ddb1c0] mmco: unref short failure

 43%|████▎     | 94/221 [00:37<01:23,  1.52it/s][A
 43%|████▎     | 95/221 [00:37<01:03,  1.99it/s][A
 43%|████▎     | 96/221 [00:38<00:50,  2.49it/s][A
 44%|████▍     | 97/221 [00:38<00:40,  3.09it/s][A
 44%|████▍     | 98/221 [00:38<00:42,  2.87it/s][A
 45%|████▍     | 99/221 [00:38<00:39,  3.12it/s][A
 45%|████▌     | 100/221 [00:39<00:41,  2.93it/s][A
 46%|████▌     | 101/221 [00:39<00:37,  3.17it/s][A
 46%|████▌     | 102/221 [00:39<00:38,  3.08it/s][A
 47%|████▋     | 103/221 [00:40<00:30,  3.82it/s][A
 47%|████▋     | 104/221 [00:40<00:25,  4.59it/s][A
 48%|████▊     | 105/221 [00:40<00:27,  4.21it/s][A[h264 @ 0x5586456a3bc0] mmco: unref short failure
[h264 @ 0x5556cf0c66c0] mmco: unref short failure
[h264 @ 0x5556cf0c66c0] mmco: unref short failure

 48%|████▊     | 106/221 [00:43<02:17,  1.20s/it][A
 48%|████▊     | 107/221 [00:44<01:43,  1.10it/s][A
 49%|████▉     | 108/221 [00:44<01:17,  1.45it/s][A
 49%|████▉     | 109/221 [00:44<01:02,  1.79it/s][A
 50%|████▉     | 110/221 [00:44<00:47,  2.32it/s][A
 50%|█████     | 111/221 [00:45<00:49,  2.20it/s][A[h264 @ 0x56354b9268c0] mmco: unref short failure
[h264 @ 0x56354b9268c0] mmco: unref short failure

 51%|█████     | 112/221 [00:45<00:41,  2.63it/s][A
 51%|█████     | 113/221 [00:45<00:39,  2.74it/s][A
 52%|█████▏    | 115/221 [00:45<00:26,  4.02it/s][A
 52%|█████▏    | 116/221 [00:50<02:29,  1.42s/it][A
 53%|█████▎    | 117/221 [00:51<01:59,  1.14s/it][A[h264 @ 0x5635629e5b00] mmco: unref short failure
[h264 @ 0x5635629e5b00] mmco: unref short failure

 53%|█████▎    | 118/221 [00:51<01:32,  1.11it/s][A
 54%|█████▍    | 119/221 [00:51<01:10,  1.45it/s][A
 54%|█████▍    | 120/221 [00:51<00:55,  1.84it/s][A
 55%|█████▍    | 121/221 [00:52<00:43,  2.30it/s][A
 55%|█████▌    | 122/221 [00:52<00:36,  2.71it/s][A
 56%|█████▌    | 123/221 [00:52<00:30,  3.20it/s][A
 56%|█████▌    | 124/221 [00:52<00:25,  3.78it/s][A
 57%|█████▋    | 125/221 [00:52<00:27,  3.54it/s][A[h264 @ 0x5635632e9640] mmco: unref short failure

 57%|█████▋    | 126/221 [00:53<00:43,  2.16it/s][A
 57%|█████▋    | 127/221 [00:54<00:40,  2.33it/s][A
 58%|█████▊    | 128/221 [00:55<00:56,  1.65it/s][A
 58%|█████▊    | 129/221 [00:55<00:45,  2.02it/s][A
 59%|█████▉    | 130/221 [00:55<00:37,  2.45it/s][A
 59%|█████▉    | 131/221 [00:55<00:29,  3.06it/s][A
 60%|█████▉    | 132/221 [00:56<00:28,  3.17it/s][A
 60%|██████    | 133/221 [00:56<00:32,  2.75it/s][A
 61%|██████    | 134/221 [00:56<00:28,  3.05it/s][A[h264 @ 0x5556d08fdd80] mmco: unref short failure
[h264 @ 0x5556d08fdd80] mmco: unref short failure

 61%|██████    | 135/221 [00:57<00:29,  2.89it/s][A
 62%|██████▏   | 136/221 [00:57<00:34,  2.50it/s][A
 62%|██████▏   | 137/221 [00:58<00:44,  1.91it/s][A
 62%|██████▏   | 138/221 [00:59<00:44,  1.85it/s][A
 63%|██████▎   | 139/221 [00:59<00:41,  1.99it/s][A
 63%|██████▎   | 140/221 [00:59<00:34,  2.34it/s][A
 64%|██████▍   | 141/221 [00:59<00:28,  2.78it/s][A
 64%|██████▍   | 142/221 [01:00<00:30,  2.57it/s][A
 65%|██████▍   | 143/221 [01:00<00:28,  2.76it/s][A
 65%|██████▌   | 144/221 [01:00<00:25,  3.07it/s][A
 66%|██████▌   | 145/221 [01:01<00:24,  3.09it/s][A
 66%|██████▌   | 146/221 [01:01<00:23,  3.19it/s][A
 67%|██████▋   | 147/221 [01:01<00:21,  3.37it/s][A
 67%|██████▋   | 148/221 [01:02<00:22,  3.21it/s][A
 67%|██████▋   | 149/221 [01:02<00:18,  3.92it/s][A
 68%|██████▊   | 150/221 [01:02<00:16,  4.22it/s][A
 68%|██████▊   | 151/221 [01:02<00:22,  3.16it/s][A
 69%|██████▉   | 152/221 [01:03<00:22,  3.10it/s][A
 69%|██████▉   | 153/221 [01:03<00:23,  2.87it/s][A
 70%|██████▉   | 154/221 [01:04<00:33,  1.99it/s][A
 70%|███████   | 155/221 [01:04<00:26,  2.48it/s][A
 71%|███████   | 156/221 [01:04<00:20,  3.10it/s][A
 71%|███████   | 157/221 [01:09<01:49,  1.72s/it][A
 71%|███████▏  | 158/221 [01:09<01:18,  1.24s/it][A
 72%|███████▏  | 159/221 [01:10<00:57,  1.08it/s][A
 72%|███████▏  | 160/221 [01:10<00:43,  1.39it/s][A
 73%|███████▎  | 162/221 [01:10<00:25,  2.36it/s][A
 74%|███████▍  | 163/221 [01:10<00:21,  2.73it/s][A
 74%|███████▍  | 164/221 [01:10<00:19,  2.87it/s][A
 75%|███████▍  | 165/221 [01:11<00:17,  3.20it/s][A
 75%|███████▌  | 166/221 [01:11<00:20,  2.72it/s][A
 76%|███████▌  | 167/221 [01:11<00:16,  3.23it/s][A[h264 @ 0x5586342bfc00] mmco: unref short failure
[h264 @ 0x56355ec1be00] mmco: unref short failure
[h264 @ 0x56355ec1be00] mmco: unref short failure
[h264 @ 0x55771a24c780] mmco: unref short failure
[h264 @ 0x55771a24c780] mmco: unref short failure

 76%|███████▌  | 168/221 [01:15<01:12,  1.37s/it][A
 76%|███████▋  | 169/221 [01:16<00:54,  1.05s/it][A
 77%|███████▋  | 170/221 [01:16<00:41,  1.22it/s][A
 77%|███████▋  | 171/221 [01:16<00:30,  1.61it/s][A
 78%|███████▊  | 172/221 [01:16<00:22,  2.14it/s][A
 78%|███████▊  | 173/221 [01:16<00:19,  2.47it/s][A
 79%|███████▊  | 174/221 [01:17<00:15,  3.09it/s][A[h264 @ 0x5556df0aca40] mmco: unref short failure

 79%|███████▉  | 175/221 [01:17<00:13,  3.47it/s][A[h264 @ 0x5556df0aca40] mmco: unref short failure

 80%|███████▉  | 176/221 [01:17<00:12,  3.48it/s][A
 80%|████████  | 177/221 [01:17<00:10,  4.01it/s][A
 81%|████████  | 178/221 [01:17<00:10,  3.92it/s][A
 81%|████████  | 179/221 [01:19<00:32,  1.27it/s][A
 81%|████████▏ | 180/221 [01:20<00:23,  1.72it/s][A
 82%|████████▏ | 182/221 [01:20<00:14,  2.76it/s][A[h264 @ 0x5577226db2c0] mmco: unref short failure
[h264 @ 0x5577226db2c0] mmco: unref short failure

 83%|████████▎ | 183/221 [01:20<00:11,  3.18it/s][A
 83%|████████▎ | 184/221 [01:20<00:11,  3.28it/s][A
 84%|████████▎ | 185/221 [01:20<00:09,  3.68it/s][A
 84%|████████▍ | 186/221 [01:21<00:09,  3.84it/s][A
 85%|████████▍ | 187/221 [01:21<00:07,  4.60it/s][A[h264 @ 0x5635497c6700] mmco: unref short failure
[h264 @ 0x5556ce0ac340] mmco: unref short failure

 85%|████████▌ | 188/221 [01:21<00:07,  4.37it/s][A
 86%|████████▌ | 189/221 [01:21<00:07,  4.19it/s][A
 86%|████████▌ | 190/221 [01:21<00:06,  4.50it/s][A
 87%|████████▋ | 192/221 [01:22<00:05,  5.57it/s][A
 87%|████████▋ | 193/221 [01:22<00:04,  6.21it/s][A
 88%|████████▊ | 194/221 [01:23<00:10,  2.65it/s][A
 88%|████████▊ | 195/221 [01:23<00:08,  3.18it/s][A
 89%|████████▉ | 197/221 [01:23<00:05,  4.73it/s][A
 90%|████████▉ | 198/221 [01:23<00:04,  5.16it/s][A
 90%|█████████ | 199/221 [01:24<00:05,  4.34it/s][A
 90%|█████████ | 200/221 [01:24<00:06,  3.37it/s][A
 91%|█████████ | 201/221 [01:24<00:05,  3.54it/s][A
 91%|█████████▏| 202/221 [01:24<00:04,  4.22it/s][A
 92%|█████████▏| 203/221 [01:25<00:04,  3.96it/s][A
 93%|█████████▎| 205/221 [01:25<00:02,  5.46it/s][A
 93%|█████████▎| 206/221 [01:25<00:03,  4.70it/s][A
 94%|█████████▍| 208/221 [01:25<00:02,  6.50it/s][A
 95%|█████████▌| 210/221 [01:26<00:01,  8.47it/s][A[h264 @ 0x56355753bb40] mmco: unref short failure
[h264 @ 0x56355753bb40] mmco: unref short failure

 96%|█████████▌| 212/221 [01:27<00:02,  3.90it/s][A
 96%|█████████▋| 213/221 [01:27<00:01,  4.09it/s][A
 97%|█████████▋| 214/221 [01:28<00:02,  2.38it/s][A
 97%|█████████▋| 215/221 [01:28<00:02,  2.73it/s][A
 98%|█████████▊| 216/221 [01:28<00:01,  3.23it/s][A
 98%|█████████▊| 217/221 [01:30<00:02,  1.66it/s][A
 99%|█████████▊| 218/221 [01:30<00:01,  1.62it/s][A
 99%|█████████▉| 219/221 [01:30<00:00,  2.06it/s][A[h264 @ 0x563543358d80] mmco: unref short failure
[h264 @ 0x563543358d80] mmco: unref short failure

100%|█████████▉| 220/221 [01:35<00:01,  1.77s/it][A100%|██████████| 221/221 [01:35<00:00,  2.30it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:09,  3.16it/s][A
  1%|          | 2/221 [00:00<01:06,  3.29it/s][A
  1%|▏         | 3/221 [00:00<01:05,  3.34it/s][A
  2%|▏         | 4/221 [00:01<01:05,  3.31it/s][A
  2%|▏         | 5/221 [00:01<01:04,  3.34it/s][A[h264 @ 0x558649e9be80] mmco: unref short failure
[h264 @ 0x558649e9be80] mmco: unref short failure

  3%|▎         | 6/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.30it/s][A
  4%|▎         | 8/221 [00:02<01:04,  3.32it/s][A
  4%|▍         | 9/221 [00:02<01:04,  3.30it/s][A
  5%|▍         | 10/221 [00:03<01:04,  3.26it/s][A
  5%|▍         | 11/221 [00:03<01:04,  3.28it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.32it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.32it/s][A
  6%|▋         | 14/221 [00:04<01:01,  3.34it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.24it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.28it/s][A
  8%|▊         | 17/221 [00:05<01:01,  3.32it/s][A
  8%|▊         | 18/221 [00:05<01:00,  3.34it/s][A
  9%|▊         | 19/221 [00:05<01:00,  3.34it/s][A
  9%|▉         | 20/221 [00:06<00:59,  3.36it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.33it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.34it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.36it/s][A
 11%|█         | 24/221 [00:07<00:58,  3.37it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.36it/s][A
 12%|█▏        | 26/221 [00:07<00:57,  3.37it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.37it/s][A
 14%|█▎        | 30/221 [00:09<00:56,  3.38it/s][A
 14%|█▍        | 31/221 [00:09<00:56,  3.37it/s][A
 14%|█▍        | 32/221 [00:09<00:55,  3.38it/s][A
 15%|█▍        | 33/221 [00:09<00:55,  3.39it/s][A
 15%|█▌        | 34/221 [00:10<00:55,  3.38it/s][A
 16%|█▌        | 35/221 [00:10<00:54,  3.39it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.35it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.36it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.38it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.34it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.36it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.37it/s][A
 19%|█▉        | 42/221 [00:12<00:52,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:13<00:52,  3.39it/s][A
 20%|██        | 45/221 [00:13<00:51,  3.40it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.40it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.40it/s][A
 22%|██▏       | 48/221 [00:14<00:50,  3.40it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 51/221 [00:15<00:51,  3.28it/s][A
 24%|██▎       | 52/221 [00:15<00:51,  3.30it/s][A
 24%|██▍       | 53/221 [00:15<00:50,  3.32it/s][A
 24%|██▍       | 54/221 [00:16<00:50,  3.33it/s][A
 25%|██▍       | 55/221 [00:16<00:49,  3.35it/s][A
 25%|██▌       | 56/221 [00:16<00:49,  3.37it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.38it/s][A
 26%|██▌       | 58/221 [00:17<00:48,  3.39it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.38it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.38it/s][A
 28%|██▊       | 61/221 [00:18<00:47,  3.39it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.39it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.40it/s][A
 29%|██▉       | 64/221 [00:19<00:46,  3.40it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.40it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.40it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.41it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.41it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.41it/s][A
 33%|███▎      | 74/221 [00:22<00:43,  3.41it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.41it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.41it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.41it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.41it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:29<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:41<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:48<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:40,  5.44it/s][A
  1%|          | 2/221 [00:00<00:42,  5.18it/s][A
  1%|▏         | 3/221 [00:00<00:59,  3.63it/s][A
  2%|▏         | 4/221 [00:00<00:54,  3.95it/s][A
  2%|▏         | 5/221 [00:01<00:48,  4.42it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.38it/s][A
  3%|▎         | 7/221 [00:01<00:52,  4.05it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.41it/s][A
  4%|▍         | 9/221 [00:02<01:08,  3.11it/s][A
  5%|▍         | 10/221 [00:02<01:05,  3.20it/s][A
  5%|▍         | 11/221 [00:02<00:58,  3.60it/s][A
  5%|▌         | 12/221 [00:03<00:52,  3.96it/s][A
  6%|▌         | 13/221 [00:03<01:15,  2.74it/s][A
  6%|▋         | 14/221 [00:04<01:14,  2.77it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.89it/s][A
  7%|▋         | 16/221 [00:04<01:15,  2.71it/s][A
  8%|▊         | 17/221 [00:05<01:27,  2.33it/s][A
  8%|▊         | 18/221 [00:05<01:20,  2.51it/s][A
  9%|▉         | 20/221 [00:05<00:54,  3.71it/s][A
 10%|▉         | 21/221 [00:06<00:49,  4.05it/s][A
 10%|▉         | 22/221 [00:06<00:46,  4.27it/s][A
 10%|█         | 23/221 [00:06<00:43,  4.50it/s][A
 11%|█         | 24/221 [00:06<00:41,  4.80it/s][A
 11%|█▏        | 25/221 [00:07<00:52,  3.72it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.68it/s][A
 12%|█▏        | 27/221 [00:07<00:48,  4.00it/s][A
 13%|█▎        | 28/221 [00:07<00:45,  4.20it/s][A
 13%|█▎        | 29/221 [00:08<00:44,  4.30it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.62it/s][A
 14%|█▍        | 31/221 [00:08<00:55,  3.41it/s][A
 14%|█▍        | 32/221 [00:08<00:48,  3.90it/s][A
 15%|█▍        | 33/221 [00:09<00:48,  3.91it/s][A
 15%|█▌        | 34/221 [00:09<00:52,  3.59it/s][A
 16%|█▌        | 35/221 [00:09<00:53,  3.45it/s][A
 16%|█▋        | 36/221 [00:10<01:01,  3.03it/s][A
 17%|█▋        | 37/221 [00:10<00:54,  3.37it/s][A
 17%|█▋        | 38/221 [00:10<00:55,  3.31it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.30it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:11<00:52,  3.43it/s][A
 19%|█▉        | 42/221 [00:11<00:46,  3.81it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.38it/s][A
 20%|█▉        | 44/221 [00:12<00:56,  3.13it/s][A
 20%|██        | 45/221 [00:13<01:01,  2.85it/s][A
 21%|██        | 46/221 [00:13<01:05,  2.69it/s][A
 21%|██▏       | 47/221 [00:13<00:57,  3.03it/s][A
 22%|██▏       | 48/221 [00:13<00:50,  3.45it/s][A
 23%|██▎       | 50/221 [00:14<00:46,  3.70it/s][A
 23%|██▎       | 51/221 [00:14<00:46,  3.69it/s][A
 24%|██▍       | 53/221 [00:15<00:43,  3.84it/s][A
 24%|██▍       | 54/221 [00:15<00:43,  3.80it/s][A
 25%|██▍       | 55/221 [00:15<00:48,  3.44it/s][A
 25%|██▌       | 56/221 [00:16<00:52,  3.13it/s][A
 26%|██▌       | 57/221 [00:16<00:49,  3.29it/s][A
 26%|██▌       | 58/221 [00:16<00:41,  3.89it/s][A
 27%|██▋       | 59/221 [00:16<00:42,  3.83it/s][A
 27%|██▋       | 60/221 [00:17<00:39,  4.09it/s][A
 28%|██▊       | 61/221 [00:17<00:38,  4.14it/s][A
 28%|██▊       | 62/221 [00:17<00:41,  3.81it/s][A
 29%|██▉       | 64/221 [00:17<00:32,  4.77it/s][A
 29%|██▉       | 65/221 [00:18<00:33,  4.64it/s][A
 30%|██▉       | 66/221 [00:18<00:42,  3.62it/s][A
 30%|███       | 67/221 [00:18<00:45,  3.40it/s][A
 31%|███       | 68/221 [00:19<00:46,  3.30it/s][A
 31%|███       | 69/221 [00:19<00:57,  2.62it/s][A
 32%|███▏      | 70/221 [00:20<00:54,  2.76it/s][A
 32%|███▏      | 71/221 [00:20<00:52,  2.84it/s][A
 33%|███▎      | 72/221 [00:20<00:49,  3.03it/s][A
 33%|███▎      | 73/221 [00:21<00:48,  3.04it/s][A
 33%|███▎      | 74/221 [00:21<00:44,  3.34it/s][A
 34%|███▍      | 75/221 [00:21<00:42,  3.43it/s][A
 34%|███▍      | 76/221 [00:21<00:38,  3.81it/s][A
 35%|███▍      | 77/221 [00:21<00:33,  4.30it/s][A
 35%|███▌      | 78/221 [00:22<00:36,  3.93it/s][A
 36%|███▌      | 79/221 [00:22<00:38,  3.70it/s][A
 36%|███▌      | 80/221 [00:22<00:32,  4.31it/s][A
 37%|███▋      | 81/221 [00:22<00:31,  4.45it/s][A
 37%|███▋      | 82/221 [00:23<00:42,  3.24it/s][A
 38%|███▊      | 84/221 [00:24<00:46,  2.93it/s][A
 38%|███▊      | 85/221 [00:24<00:41,  3.25it/s][A
 39%|███▉      | 86/221 [00:24<00:48,  2.81it/s][A
 39%|███▉      | 87/221 [00:25<00:49,  2.69it/s][A
 40%|███▉      | 88/221 [00:25<00:46,  2.88it/s][A
 40%|████      | 89/221 [00:25<00:44,  2.98it/s][A
 41%|████      | 90/221 [00:26<00:52,  2.52it/s][A
 41%|████      | 91/221 [00:26<00:46,  2.80it/s][A
 42%|████▏     | 92/221 [00:27<00:45,  2.84it/s][A
 42%|████▏     | 93/221 [00:27<00:54,  2.35it/s][A
 43%|████▎     | 94/221 [00:27<00:47,  2.67it/s][A
 43%|████▎     | 95/221 [00:28<00:52,  2.41it/s][A
 43%|████▎     | 96/221 [00:28<00:52,  2.38it/s][A
 44%|████▍     | 97/221 [00:29<00:49,  2.51it/s][A
 44%|████▍     | 98/221 [00:29<00:48,  2.56it/s][A
 45%|████▍     | 99/221 [00:29<00:42,  2.87it/s][A
 45%|████▌     | 100/221 [00:29<00:37,  3.21it/s][A
 46%|████▌     | 101/221 [00:30<00:34,  3.49it/s][A
 46%|████▌     | 102/221 [00:30<00:33,  3.54it/s][A
 47%|████▋     | 103/221 [00:30<00:30,  3.91it/s][A
 47%|████▋     | 104/221 [00:30<00:27,  4.30it/s][A
 48%|████▊     | 105/221 [00:31<00:29,  3.88it/s][A
 48%|████▊     | 106/221 [00:31<00:38,  2.97it/s][A
 48%|████▊     | 107/221 [00:32<00:37,  3.01it/s][A
 49%|████▉     | 108/221 [00:32<00:30,  3.65it/s][A
 49%|████▉     | 109/221 [00:32<00:29,  3.86it/s][A
 50%|████▉     | 110/221 [00:32<00:30,  3.60it/s][A
 50%|█████     | 111/221 [00:33<00:31,  3.54it/s][A
 51%|█████     | 112/221 [00:33<00:30,  3.53it/s][A
 51%|█████     | 113/221 [00:33<00:34,  3.15it/s][A
 52%|█████▏    | 114/221 [00:33<00:28,  3.69it/s][A
 52%|█████▏    | 115/221 [00:33<00:24,  4.32it/s][A
 52%|█████▏    | 116/221 [00:34<00:24,  4.22it/s][A
 53%|█████▎    | 117/221 [00:34<00:25,  4.02it/s][A
 53%|█████▎    | 118/221 [00:34<00:28,  3.65it/s][A
 54%|█████▍    | 119/221 [00:35<00:31,  3.20it/s][A
 54%|█████▍    | 120/221 [00:35<00:36,  2.74it/s][A
 55%|█████▍    | 121/221 [00:36<00:35,  2.78it/s][A
 55%|█████▌    | 122/221 [00:36<00:31,  3.11it/s][A
 56%|█████▌    | 123/221 [00:36<00:35,  2.76it/s][A
 56%|█████▌    | 124/221 [00:37<00:33,  2.87it/s][A
 57%|█████▋    | 125/221 [00:37<00:38,  2.49it/s][A
 57%|█████▋    | 126/221 [00:37<00:35,  2.65it/s][A
 57%|█████▋    | 127/221 [00:38<00:35,  2.62it/s][A
 58%|█████▊    | 128/221 [00:38<00:32,  2.89it/s][A
 58%|█████▊    | 129/221 [00:38<00:25,  3.56it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.63it/s][A
 59%|█████▉    | 131/221 [00:39<00:24,  3.72it/s][A
 60%|█████▉    | 132/221 [00:39<00:22,  4.01it/s][A
 60%|██████    | 133/221 [00:39<00:24,  3.59it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.25it/s][A
 61%|██████    | 135/221 [00:40<00:24,  3.52it/s][A
 62%|██████▏   | 136/221 [00:40<00:25,  3.37it/s][A
 62%|██████▏   | 137/221 [00:40<00:22,  3.65it/s][A
 62%|██████▏   | 138/221 [00:41<00:21,  3.82it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.11it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.52it/s][A
 64%|██████▍   | 141/221 [00:42<00:26,  3.07it/s][A
 64%|██████▍   | 142/221 [00:42<00:22,  3.50it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.40it/s][A
 65%|██████▌   | 144/221 [00:43<00:25,  3.08it/s][A
 66%|██████▌   | 145/221 [00:43<00:26,  2.82it/s][A
 66%|██████▌   | 146/221 [00:43<00:24,  3.08it/s][A
 67%|██████▋   | 147/221 [00:44<00:21,  3.50it/s][A
 67%|██████▋   | 148/221 [00:44<00:25,  2.81it/s][A
 67%|██████▋   | 149/221 [00:44<00:21,  3.33it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.51it/s][A
 68%|██████▊   | 151/221 [00:45<00:22,  3.09it/s][A
 69%|██████▉   | 152/221 [00:46<00:30,  2.27it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.46it/s][A
 70%|██████▉   | 154/221 [00:46<00:27,  2.47it/s][A
 70%|███████   | 155/221 [00:47<00:24,  2.70it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.15it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.43it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.03it/s][A
 72%|███████▏  | 159/221 [00:48<00:19,  3.16it/s][A
 72%|███████▏  | 160/221 [00:48<00:20,  3.01it/s][A
 73%|███████▎  | 161/221 [00:48<00:16,  3.65it/s][A
 74%|███████▍  | 163/221 [00:49<00:12,  4.52it/s][A
 74%|███████▍  | 164/221 [00:49<00:12,  4.46it/s][A
 75%|███████▍  | 165/221 [00:49<00:14,  3.82it/s][A
 75%|███████▌  | 166/221 [00:50<00:16,  3.37it/s][A
 76%|███████▌  | 167/221 [00:50<00:13,  4.00it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.68it/s][A
 76%|███████▋  | 169/221 [00:50<00:11,  4.47it/s][A
 77%|███████▋  | 170/221 [00:50<00:12,  4.15it/s][A
 77%|███████▋  | 171/221 [00:51<00:12,  3.95it/s][A
 78%|███████▊  | 172/221 [00:51<00:12,  4.04it/s][A
 78%|███████▊  | 173/221 [00:51<00:13,  3.51it/s][A
 79%|███████▊  | 174/221 [00:52<00:16,  2.89it/s][A
 79%|███████▉  | 175/221 [00:52<00:15,  3.03it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.50it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.80it/s][A
 81%|████████  | 178/221 [00:53<00:16,  2.58it/s][A
 81%|████████  | 179/221 [00:53<00:14,  2.89it/s][A
 81%|████████▏ | 180/221 [00:54<00:11,  3.49it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.79it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.15it/s][A
 83%|████████▎ | 183/221 [00:55<00:11,  3.22it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.14it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.78it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.46it/s][A
 85%|████████▍ | 187/221 [00:56<00:09,  3.67it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.29it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.48it/s][A
 86%|████████▌ | 190/221 [00:57<00:09,  3.36it/s][A
 86%|████████▋ | 191/221 [00:57<00:08,  3.61it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  4.01it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.33it/s][A
 88%|████████▊ | 194/221 [00:58<00:09,  2.80it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.51it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.43it/s][A
 89%|████████▉ | 197/221 [00:59<00:06,  3.43it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.33it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  3.68it/s][A
 90%|█████████ | 200/221 [00:59<00:05,  3.66it/s][A
 91%|█████████ | 201/221 [01:00<00:04,  4.01it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.59it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  3.88it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.76it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.28it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.60it/s][A
 94%|█████████▎| 207/221 [01:02<00:06,  2.29it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  2.68it/s][A
 95%|█████████▍| 209/221 [01:02<00:03,  3.01it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.12it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.43it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.59it/s][A
 96%|█████████▋| 213/221 [01:04<00:02,  3.43it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.77it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.67it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.78it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  3.06it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.35it/s][A
 99%|█████████▉| 219/221 [01:06<00:00,  2.96it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.38it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.51it/s][A100%|██████████| 221/221 [01:06<00:00,  3.32it/s]
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'area_r1': 39.4, 'area_recall': '39.4/65.0/73.1', 'area_ravg': 59.2}
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'forward_r1': 37.4, 'forward_recall': '37.4/66.9/77.4', 'forward_ravg': 60.6}
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'area_video_r1': 38.9, 'area_video_recall': '38.9/68.0/77.7', 'area_video_ravg': 61.5}
09/17/2024 10:07:04 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 10:07:04 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'area_video_r1': 52.8, 'area_video_recall': '52.8/75.1/81.4', 'area_video_ravg': 69.8, 'area_video_back_r1': 47.6, 'area_video_back_recall': '47.6/74.7/82.9', 'area_video_back_ravg': 68.4}
09/17/2024 10:07:04 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 10:07:04 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'video_r1': 36.2, 'video_recall': '36.2/64.4/74.0', 'video_ravg': 58.2}
09/17/2024 10:07:04 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 10:07:04 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 10:07:04 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1599--===========

09/17/2024 10:07:04 - INFO - __main__ -   {'video_r1': 52.1, 'video_recall': '52.1/74.2/81.4', 'video_ravg': 69.3}
09/17/2024 10:07:04 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 10:07:04 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 10:07:26 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.006029707845300436, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.0439276695251465, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.323998212814331, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.373955726623535}
 55%|█████▍    | 1600/2910 [10:11:30<49:31:47, 136.11s/it][h264 @ 0x558645e00d40] mmco: unref short failure
[h264 @ 0x558645e00d40] mmco: unref short failure
 55%|█████▌    | 1601/2910 [10:11:34<35:04:07, 96.45s/it]  55%|█████▌    | 1602/2910 [10:11:38<25:01:38, 68.88s/it][h264 @ 0x56356358d8c0] mmco: unref short failure
[h264 @ 0x56354174e580] mmco: unref short failure
[h264 @ 0x56354174e580] mmco: unref short failure
 55%|█████▌    | 1603/2910 [10:11:43<18:02:40, 49.70s/it][h264 @ 0x558634fbf500] mmco: unref short failure
[h264 @ 0x5635562a2580] mmco: unref short failure
[h264 @ 0x5635562a2580] mmco: unref short failure
 55%|█████▌    | 1604/2910 [10:11:48<13:10:28, 36.32s/it] 55%|█████▌    | 1605/2910 [10:11:56<9:59:50, 27.58s/it]  55%|█████▌    | 1606/2910 [10:12:02<7:39:44, 21.15s/it] 55%|█████▌    | 1607/2910 [10:12:09<6:07:24, 16.92s/it] 55%|█████▌    | 1608/2910 [10:12:16<5:01:34, 13.90s/it][h264 @ 0x5556d87de800] mmco: unref short failure
[h264 @ 0x5556d87de800] mmco: unref short failure
[h264 @ 0x5556d87de800] mmco: unref short failure
[h264 @ 0x5556d87de800] mmco: unref short failure
 55%|█████▌    | 1609/2910 [10:12:22<4:12:54, 11.66s/it][h264 @ 0x5576de33af00] mmco: unref short failure
[h264 @ 0x563560757600] mmco: unref short failure
 55%|█████▌    | 1610/2910 [10:12:29<3:42:23, 10.26s/it][h264 @ 0x55771cd5e300] mmco: unref short failure
 55%|█████▌    | 1611/2910 [10:12:36<3:20:52,  9.28s/it][h264 @ 0x563541e89040] mmco: unref short failure
[h264 @ 0x558633f868c0] mmco: unref short failure
 55%|█████▌    | 1612/2910 [10:12:43<3:04:29,  8.53s/it][h264 @ 0x56354ca2c9c0] mmco: unref short failure
[h264 @ 0x56354ca2c9c0] mmco: unref short failure
[h264 @ 0x55863cede240] mmco: unref short failure
 55%|█████▌    | 1613/2910 [10:12:50<2:56:58,  8.19s/it][h264 @ 0x5556e232f440] mmco: unref short failure
[h264 @ 0x5556e232f440] mmco: unref short failure
[h264 @ 0x5556e39cc5c0] mmco: unref short failure
 55%|█████▌    | 1614/2910 [10:12:56<2:42:27,  7.52s/it][h264 @ 0x5556e39cc5c0] mmco: unref short failure
 55%|█████▌    | 1615/2910 [10:13:02<2:32:47,  7.08s/it][h264 @ 0x55863f866e00] mmco: unref short failure
[h264 @ 0x55863f866e00] mmco: unref short failure
[h264 @ 0x5576e0d9b380] mmco: unref short failure
[h264 @ 0x5556dfd64cc0] mmco: unref short failure
[h264 @ 0x5556dfd64cc0] mmco: unref short failure
[h264 @ 0x5556d5c4e280] mmco: unref short failure
 56%|█████▌    | 1616/2910 [10:13:38<5:39:33, 15.74s/it][h264 @ 0x558646209340] mmco: unref short failure
[h264 @ 0x5556c49951c0] mmco: unref short failure
[h264 @ 0x5556c49951c0] mmco: unref short failure
[h264 @ 0x56354a0f6e80] mmco: unref short failure
[h264 @ 0x563554821000] mmco: unref short failure
[h264 @ 0x563554821000] mmco: unref short failure
 56%|█████▌    | 1617/2910 [10:13:48<5:03:09, 14.07s/it][h264 @ 0x55771f5140c0] mmco: unref short failure
[h264 @ 0x55771f5140c0] mmco: unref short failure
09/17/2024 10:09:52 - INFO - __main__ -   current idx Qvo7ULfoowQ.43 from finetune_area returns wrong image/video, use 75306 instead.
[h264 @ 0x55771ae4ddc0] mmco: unref short failure
[h264 @ 0x558639e73700] mmco: unref short failure
09/17/2024 10:09:56 - INFO - __main__ -   current idx 6_p3rXnYE3Y.137 from finetune_area returns wrong image/video, use 138798 instead.
[h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x55772cb816c0] mmco: unref short failure
09/17/2024 10:10:04 - INFO - __main__ -   current idx UCtNQJ_a3ws.2 from finetune_area returns wrong image/video, use 85606 instead.
[h264 @ 0x5556dc7591c0] mmco: unref short failure
 56%|█████▌    | 1618/2910 [10:14:07<5:30:24, 15.34s/it][h264 @ 0x55771e024e00] mmco: unref short failure
[h264 @ 0x55771e024e00] mmco: unref short failure
[h264 @ 0x55771e024e00] mmco: unref short failure
[h264 @ 0x55771e024e00] mmco: unref short failure
[h264 @ 0x558634fbf500] mmco: unref short failure
[h264 @ 0x558634fbf500] mmco: unref short failure
[h264 @ 0x558634fbf500] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
 56%|█████▌    | 1619/2910 [10:14:17<4:57:22, 13.82s/it][h264 @ 0x5576de5215c0] mmco: unref short failure
[h264 @ 0x5556d01b6480] mmco: unref short failure
 56%|█████▌    | 1620/2910 [10:14:26<4:26:05, 12.38s/it][h264 @ 0x56355be5a480] mmco: unref short failure
 56%|█████▌    | 1621/2910 [10:14:32<3:46:23, 10.54s/it][h264 @ 0x5556d7467480] mmco: unref short failure
[h264 @ 0x558636473a00] mmco: unref short failure
 56%|█████▌    | 1622/2910 [10:14:49<4:28:01, 12.49s/it] 56%|█████▌    | 1623/2910 [10:14:56<3:50:44, 10.76s/it][h264 @ 0x5556dd45dd00] mmco: unref short failure
[h264 @ 0x56355973e300] mmco: unref short failure
[h264 @ 0x56355973e300] mmco: unref short failure
[h264 @ 0x5586555a1400] mmco: unref short failure
[h264 @ 0x558648f70300] mmco: unref short failure
[h264 @ 0x5556dd0f11c0] mmco: unref short failure
[h264 @ 0x5556dd0f11c0] mmco: unref short failure
[h264 @ 0x56354b916900] mmco: unref short failure
[h264 @ 0x5556e19a4780] mmco: unref short failure
[h264 @ 0x5556e19a4780] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5635518e5e40] mmco: unref short failure
[h264 @ 0x5635518e5e40] mmco: unref short failure
[h264 @ 0x5556e19a4780] mmco: unref short failure
[h264 @ 0x5556e19a4780] mmco: unref short failure
 56%|█████▌    | 1624/2910 [10:16:09<10:30:11, 29.40s/it][h264 @ 0x563549ef71c0] mmco: unref short failure
09/17/2024 10:12:30 - INFO - __main__ -   current idx a8wASxyNybI.7 from finetune_area returns wrong image/video, use 43350 instead.
 56%|█████▌    | 1625/2910 [10:16:34<10:04:40, 28.23s/it][h264 @ 0x5586423b1040] mmco: unref short failure
[h264 @ 0x557730110f80] mmco: unref short failure
 56%|█████▌    | 1626/2910 [10:16:44<8:03:42, 22.60s/it] [h264 @ 0x55771875a380] mmco: unref short failure
[h264 @ 0x55771875a380] mmco: unref short failure
[h264 @ 0x55771875a380] mmco: unref short failure
 56%|█████▌    | 1627/2910 [10:16:51<6:21:59, 17.86s/it] 56%|█████▌    | 1628/2910 [10:16:58<5:10:36, 14.54s/it] 56%|█████▌    | 1629/2910 [10:17:05<4:23:26, 12.34s/it][h264 @ 0x563542fd1dc0] mmco: unref short failure
[h264 @ 0x5635444f4cc0] mmco: unref short failure
[h264 @ 0x5635444f4cc0] mmco: unref short failure
 56%|█████▌    | 1630/2910 [10:17:20<4:42:33, 13.25s/it][h264 @ 0x5556c53447c0] mmco: unref short failure
 56%|█████▌    | 1631/2910 [10:17:27<3:58:45, 11.20s/it][h264 @ 0x55772c73ca80] mmco: unref short failure
[h264 @ 0x55772c73ca80] mmco: unref short failure
[h264 @ 0x5556d5ac2dc0] mmco: unref short failure
[h264 @ 0x56354d4c5180] mmco: unref short failure
[h264 @ 0x56354d4c5180] mmco: unref short failure
09/17/2024 10:13:40 - INFO - __main__ -   current idx UGjfq2kyBqs.34 from finetune_area returns wrong image/video, use 19489 instead.
[h264 @ 0x563545f1ae00] mmco: unref short failure
[h264 @ 0x563550ce8a00] mmco: unref short failure
[h264 @ 0x563550ce8a00] mmco: unref short failure
[h264 @ 0x5586404d4a40] mmco: unref short failure
[h264 @ 0x5576dec886c0] mmco: unref short failure
[h264 @ 0x56355cd552c0] mmco: unref short failure
[h264 @ 0x56355cd552c0] mmco: unref short failure
[h264 @ 0x56355cd552c0] mmco: unref short failure
[h264 @ 0x56355cd552c0] mmco: unref short failure
[h264 @ 0x55771e5506c0] mmco: unref short failure
09/17/2024 10:14:18 - INFO - __main__ -   current idx 5sMXR7rK40U.41 from finetune_area returns wrong image/video, use 39568 instead.
[h264 @ 0x563553e97cc0] mmco: unref short failure
[h264 @ 0x563553e97cc0] mmco: unref short failure
[h264 @ 0x5586399faa40] mmco: unref short failure
[h264 @ 0x5586399faa40] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
 56%|█████▌    | 1632/2910 [10:18:39<10:29:44, 29.56s/it] 56%|█████▌    | 1633/2910 [10:19:07<10:17:05, 28.99s/it] 56%|█████▌    | 1634/2910 [10:19:14<7:55:47, 22.37s/it] [h264 @ 0x55772e465d80] mmco: unref short failure
[h264 @ 0x55772e465d80] mmco: unref short failure
[h264 @ 0x563542fd1dc0] mmco: unref short failure
[h264 @ 0x563542fd1dc0] mmco: unref short failure
 56%|█████▌    | 1635/2910 [10:19:31<7:26:42, 21.02s/it][h264 @ 0x558637680b40] mmco: unref short failure
 56%|█████▌    | 1636/2910 [10:19:39<5:58:09, 16.87s/it] 56%|█████▋    | 1637/2910 [10:19:45<4:51:06, 13.72s/it] 56%|█████▋    | 1638/2910 [10:19:52<4:10:47, 11.83s/it] 56%|█████▋    | 1639/2910 [10:19:59<3:37:13, 10.25s/it][h264 @ 0x557732f02740] mmco: unref short failure
[h264 @ 0x557732f02740] mmco: unref short failure
[h264 @ 0x5586476e9c00] mmco: unref short failure
[h264 @ 0x5586476e9c00] mmco: unref short failure
[h264 @ 0x5556c53447c0] mmco: unref short failure
[h264 @ 0x5556c53447c0] mmco: unref short failure
[h264 @ 0x5556cc219840] mmco: unref short failure
[h264 @ 0x5556cc219840] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5576deca3ec0] mmco: unref short failure
[h264 @ 0x5556cd418c40] mmco: unref short failure
[h264 @ 0x55771c3d4a80] mmco: unref short failure
[h264 @ 0x55771c3d4a80] mmco: unref short failure
[h264 @ 0x5556dffafdc0] mmco: unref short failure
[h264 @ 0x5556dffafdc0] mmco: unref short failure
[h264 @ 0x5556dffafdc0] mmco: unref short failure
[h264 @ 0x5556dffafdc0] mmco: unref short failure
[h264 @ 0x557726128800] mmco: unref short failure
[h264 @ 0x557726128800] mmco: unref short failure
[h264 @ 0x5556cc908e80] mmco: unref short failure
[h264 @ 0x5556cc908e80] mmco: unref short failure
[h264 @ 0x5576deaa6e00] mmco: unref short failure
[h264 @ 0x5576deaa6e00] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
[h264 @ 0x5576dfe37080] mmco: unref short failure
 56%|█████▋    | 1640/2910 [10:21:09<9:58:39, 28.28s/it][h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x5556dc7591c0] mmco: unref short failure
[h264 @ 0x563542fd1dc0] mmco: unref short failure
[h264 @ 0x5635490c5740] mmco: unref short failure
[h264 @ 0x5635490c5740] mmco: unref short failure
[h264 @ 0x56354c9347c0] mmco: unref short failure
[h264 @ 0x56354c9347c0] mmco: unref short failure
 56%|█████▋    | 1641/2910 [10:21:46<10:54:13, 30.93s/it][h264 @ 0x557721b89440] mmco: unref short failure
[h264 @ 0x55772da5e900] mmco: unref short failure
09/17/2024 10:17:52 - INFO - __main__ -   current idx JVZwoLZgrRs.3 from finetune_area returns wrong image/video, use 38270 instead.
 56%|█████▋    | 1642/2910 [10:21:54<8:24:01, 23.85s/it] [h264 @ 0x557721b89440] mmco: unref short failure
 56%|█████▋    | 1643/2910 [10:22:01<6:37:16, 18.81s/it] 56%|█████▋    | 1644/2910 [10:22:07<5:17:26, 15.04s/it][h264 @ 0x5635551347c0] mmco: unref short failure
 57%|█████▋    | 1645/2910 [10:22:14<4:25:07, 12.57s/it][h264 @ 0x5576e04e4e40] mmco: unref short failure
[h264 @ 0x5576e04e4e40] mmco: unref short failure
[h264 @ 0x5576e04e4e40] mmco: unref short failure
[h264 @ 0x5576e04e4e40] mmco: unref short failure
[h264 @ 0x5576e04e4e40] mmco: unref short failure
[h264 @ 0x5576e04e4e40] mmco: unref short failure
 57%|█████▋    | 1646/2910 [10:22:21<3:47:32, 10.80s/it] 57%|█████▋    | 1647/2910 [10:22:27<3:20:57,  9.55s/it][h264 @ 0x5556d43cbac0] mmco: unref short failure
[h264 @ 0x5556cc1d0240] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x55864c3852c0] mmco: unref short failure
[h264 @ 0x563541614240] mmco: unref short failure
[h264 @ 0x563541614240] mmco: unref short failure
[h264 @ 0x55863f6a7e40] mmco: unref short failure
[h264 @ 0x557723446440] mmco: unref short failure
[h264 @ 0x557723446440] mmco: unref short failure
[h264 @ 0x558640fafd40] mmco: unref short failure
[h264 @ 0x558640fafd40] mmco: unref short failure
[h264 @ 0x558640fafd40] mmco: unref short failure
[h264 @ 0x558640fafd40] mmco: unref short failure
[h264 @ 0x5586471ab5c0] mmco: unref short failure
[h264 @ 0x5586471ab5c0] mmco: unref short failure
[h264 @ 0x5586471ab5c0] mmco: unref short failure
[h264 @ 0x5586471ab5c0] mmco: unref short failure
[h264 @ 0x5576deaa6e00] mmco: unref short failure
[h264 @ 0x56355be5a480] mmco: unref short failure
[h264 @ 0x56355be5a480] mmco: unref short failure
[h264 @ 0x558641527080] mmco: unref short failure
[h264 @ 0x558641527080] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
 57%|█████▋    | 1648/2910 [10:23:34<9:22:37, 26.75s/it][h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5556cdde1b00] mmco: unref short failure
[h264 @ 0x5556cdde1b00] mmco: unref short failure
[h264 @ 0x55865778b600] mmco: unref short failure
[h264 @ 0x55865778b600] mmco: unref short failure
[h264 @ 0x55865778b600] mmco: unref short failure
[h264 @ 0x55865778b600] mmco: unref short failure
[h264 @ 0x55772d0ba8c0] mmco: unref short failure
[h264 @ 0x55568d053a40] mmco: unref short failure
[h264 @ 0x55568d053a40] mmco: unref short failure
[h264 @ 0x55568d053a40] mmco: unref short failure
[h264 @ 0x557734a0da40] mmco: unref short failure
[h264 @ 0x557734a0da40] mmco: unref short failure
[h264 @ 0x55568d053a40] mmco: unref short failure
[h264 @ 0x55772f707380] mmco: unref short failure
[h264 @ 0x55772f707380] mmco: unref short failure
[h264 @ 0x56354e764680] mmco: unref short failure
[h264 @ 0x5556c82a65c0] mmco: unref short failure
[h264 @ 0x5556c82a65c0] mmco: unref short failure
[h264 @ 0x5556dccda4c0] mmco: unref short failure
[h264 @ 0x5556dccda4c0] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x55864ceb5380] mmco: unref short failure
[h264 @ 0x55864ceb5380] mmco: unref short failure
[h264 @ 0x55864ceb5380] mmco: unref short failure
[h264 @ 0x55864ceb5380] mmco: unref short failure
 57%|█████▋    | 1649/2910 [10:24:13<10:38:45, 30.39s/it]09/17/2024 10:20:12 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 10:20:12 - INFO - __main__ -   start running ret%tva validation...
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
09/17/2024 10:20:22 - INFO - __main__ -   current idx D-BwWXYxliE.54 from finetune_area returns wrong image/video, use 6936 instead.
[h264 @ 0x55772fc8be00] mmco: unref short failure
[h264 @ 0x55772fc8be00] mmco: unref short failure
[h264 @ 0x55773605f1c0] mmco: unref short failure
[h264 @ 0x56354ad65e40] mmco: unref short failure
[h264 @ 0x56354ad65e40] mmco: unref short failure
[h264 @ 0x563540a10780] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x56354d1eb580] mmco: unref short failure
[h264 @ 0x56354d1eb580] mmco: unref short failure
[h264 @ 0x5556d95e1740] mmco: unref short failure
[h264 @ 0x5556d95e1740] mmco: unref short failure
[h264 @ 0x5556d5f55340] mmco: unref short failure
[h264 @ 0x5556d5f55340] mmco: unref short failure
[h264 @ 0x563562090240] mmco: unref short failure
[h264 @ 0x563562090240] mmco: unref short failure
[h264 @ 0x5556cd418c40] mmco: unref short failure
[h264 @ 0x55771fd9dc40] mmco: unref short failure
[h264 @ 0x55771fd9dc40] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x56355be5a480] mmco: unref short failure
[h264 @ 0x56355be5a480] mmco: unref short failure
[h264 @ 0x558645546bc0] mmco: unref short failure
[h264 @ 0x558645546bc0] mmco: unref short failure
[h264 @ 0x56354690b9c0] mmco: unref short failure
[h264 @ 0x56354690b9c0] mmco: unref short failure
[h264 @ 0x5556de5d4300] mmco: unref short failure
[h264 @ 0x5556de5d4300] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:07,  1.17it/s][A[h264 @ 0x55863355ef00] mmco: unref short failure

  1%|          | 2/221 [00:01<02:39,  1.37it/s][A
  1%|▏         | 3/221 [00:01<01:39,  2.19it/s][A
  2%|▏         | 4/221 [00:01<01:09,  3.11it/s][A
  2%|▏         | 5/221 [00:01<00:54,  3.96it/s][A
  3%|▎         | 6/221 [00:01<00:44,  4.84it/s][A
  3%|▎         | 7/221 [00:02<00:47,  4.49it/s][A
  4%|▎         | 8/221 [00:02<01:08,  3.12it/s][A
  4%|▍         | 9/221 [00:02<00:54,  3.88it/s][A
  5%|▍         | 10/221 [00:03<00:54,  3.87it/s][A[h264 @ 0x5556caca5e80] mmco: unref short failure

  5%|▍         | 11/221 [00:03<00:46,  4.52it/s][A[h264 @ 0x5556caca5e80] mmco: unref short failure

  5%|▌         | 12/221 [00:04<01:20,  2.60it/s][A
  6%|▌         | 13/221 [00:04<01:11,  2.91it/s][A
  6%|▋         | 14/221 [00:04<01:14,  2.79it/s][A
  7%|▋         | 15/221 [00:04<01:02,  3.31it/s][A
  7%|▋         | 16/221 [00:05<00:56,  3.64it/s][A
  8%|▊         | 17/221 [00:05<00:52,  3.85it/s][A
  8%|▊         | 18/221 [00:05<00:51,  3.93it/s][A
  9%|▊         | 19/221 [00:05<00:47,  4.29it/s][A
  9%|▉         | 20/221 [00:05<00:39,  5.10it/s][A
 10%|▉         | 21/221 [00:05<00:36,  5.48it/s][A
 10%|▉         | 22/221 [00:06<00:38,  5.13it/s][A
 10%|█         | 23/221 [00:06<00:39,  5.06it/s][A
not have audios xrsV4ybwavc.40
 11%|█         | 24/221 [00:06<00:39,  4.96it/s][A
 11%|█▏        | 25/221 [00:06<00:35,  5.46it/s][A
 12%|█▏        | 26/221 [00:07<00:39,  4.92it/s][A
 12%|█▏        | 27/221 [00:07<00:33,  5.73it/s][A[h264 @ 0x5556df558e80] mmco: unref short failure
[h264 @ 0x5556df558e80] mmco: unref short failure

 13%|█▎        | 28/221 [00:07<00:39,  4.93it/s][A[h264 @ 0x5556df558e80] mmco: unref short failure
[h264 @ 0x5556df558e80] mmco: unref short failure

 13%|█▎        | 29/221 [00:07<00:38,  5.04it/s][A
 14%|█▎        | 30/221 [00:07<00:36,  5.31it/s][A
 14%|█▍        | 31/221 [00:07<00:35,  5.43it/s][A[h264 @ 0x5556c9189d00] mmco: unref short failure
[h264 @ 0x5556c9189d00] mmco: unref short failure

 15%|█▍        | 33/221 [00:08<00:36,  5.10it/s][A
 16%|█▌        | 35/221 [00:08<00:30,  6.07it/s][A
 16%|█▋        | 36/221 [00:08<00:32,  5.76it/s][A
 17%|█▋        | 37/221 [00:09<00:47,  3.91it/s][A
 17%|█▋        | 38/221 [00:09<00:50,  3.66it/s][A
 18%|█▊        | 39/221 [00:09<00:41,  4.36it/s][A
 18%|█▊        | 40/221 [00:09<00:40,  4.45it/s][A
 19%|█▊        | 41/221 [00:10<00:37,  4.85it/s][A
 19%|█▉        | 42/221 [00:11<01:21,  2.20it/s][A
 19%|█▉        | 43/221 [00:11<01:06,  2.68it/s][A
 20%|█▉        | 44/221 [00:11<00:53,  3.31it/s][A
 20%|██        | 45/221 [00:12<01:29,  1.98it/s][A
 21%|██        | 46/221 [00:12<01:27,  2.01it/s][A
 21%|██▏       | 47/221 [00:16<03:48,  1.31s/it][A
 22%|██▏       | 48/221 [00:16<02:47,  1.03it/s][A[h264 @ 0x5577177f4980] mmco: unref short failure
[h264 @ 0x5577177f4980] mmco: unref short failure

 22%|██▏       | 49/221 [00:16<02:27,  1.17it/s][A
 23%|██▎       | 50/221 [00:17<01:50,  1.54it/s][A
 24%|██▎       | 52/221 [00:17<01:05,  2.58it/s][A
 24%|██▍       | 53/221 [00:17<00:56,  2.98it/s][A
 24%|██▍       | 54/221 [00:18<01:08,  2.44it/s][A
 25%|██▍       | 55/221 [00:18<01:00,  2.76it/s][A
 25%|██▌       | 56/221 [00:18<00:56,  2.93it/s][A
 26%|██▌       | 57/221 [00:19<01:12,  2.25it/s][A
 26%|██▌       | 58/221 [00:19<00:59,  2.75it/s][A
 27%|██▋       | 59/221 [00:19<00:46,  3.47it/s][A
 27%|██▋       | 60/221 [00:19<00:51,  3.12it/s][A
 28%|██▊       | 61/221 [00:20<00:46,  3.47it/s][A
 28%|██▊       | 62/221 [00:20<00:39,  4.00it/s][A
 29%|██▊       | 63/221 [00:20<00:33,  4.66it/s][A
 29%|██▉       | 64/221 [00:20<00:29,  5.27it/s][A
 29%|██▉       | 65/221 [00:20<00:26,  5.88it/s][A
 30%|██▉       | 66/221 [00:21<00:44,  3.49it/s][A
 30%|███       | 67/221 [00:21<00:38,  4.01it/s][A
 31%|███       | 68/221 [00:21<00:40,  3.74it/s][A
 31%|███       | 69/221 [00:22<00:54,  2.79it/s][A
 32%|███▏      | 70/221 [00:22<00:46,  3.25it/s][A09/17/2024 10:22:56 - INFO - __main__ -   current idx MVC6nKCrOgI.12 from finetune_area returns wrong image/video, use 99200 instead.

 32%|███▏      | 71/221 [00:25<03:03,  1.22s/it][A
 33%|███▎      | 72/221 [00:26<02:14,  1.11it/s][A
 33%|███▎      | 73/221 [00:26<01:50,  1.33it/s][A
 33%|███▎      | 74/221 [00:26<01:23,  1.77it/s][A
 34%|███▍      | 75/221 [00:26<01:11,  2.05it/s][A
 34%|███▍      | 76/221 [00:26<00:56,  2.58it/s][A
 35%|███▍      | 77/221 [00:27<00:53,  2.71it/s][A
 35%|███▌      | 78/221 [00:27<00:53,  2.67it/s][A
 36%|███▌      | 79/221 [00:28<01:21,  1.75it/s][A
 36%|███▌      | 80/221 [00:28<01:04,  2.19it/s][A
 37%|███▋      | 81/221 [00:29<00:56,  2.47it/s][A[h264 @ 0x55772c6c2f40] mmco: unref short failure

 37%|███▋      | 82/221 [00:29<00:55,  2.49it/s][A
 38%|███▊      | 83/221 [00:29<00:46,  2.98it/s][A
 38%|███▊      | 84/221 [00:29<00:40,  3.40it/s][A
 38%|███▊      | 85/221 [00:30<00:36,  3.77it/s][A
 39%|███▉      | 86/221 [00:30<00:31,  4.24it/s][A
 39%|███▉      | 87/221 [00:30<00:33,  3.94it/s][A
 40%|███▉      | 88/221 [00:30<00:34,  3.88it/s][A[h264 @ 0x557730ca2d00] mmco: unref short failure
[h264 @ 0x557730ca2d00] mmco: unref short failure

 40%|████      | 89/221 [00:34<02:29,  1.13s/it][A[h264 @ 0x558645546bc0] mmco: unref short failure
[h264 @ 0x558645546bc0] mmco: unref short failure
[h264 @ 0x55863355ef00] mmco: unref short failure

 41%|████      | 90/221 [00:34<01:53,  1.15it/s][A
 42%|████▏     | 92/221 [00:34<01:06,  1.93it/s][A
 42%|████▏     | 93/221 [00:35<01:11,  1.78it/s][A
 43%|████▎     | 94/221 [00:36<01:19,  1.60it/s][A
 43%|████▎     | 95/221 [00:36<01:01,  2.04it/s][A
 43%|████▎     | 96/221 [00:36<00:50,  2.46it/s][A
 44%|████▍     | 97/221 [00:36<00:40,  3.06it/s][A
 44%|████▍     | 98/221 [00:36<00:37,  3.32it/s][A
 45%|████▍     | 99/221 [00:36<00:30,  3.94it/s][A
 45%|████▌     | 100/221 [00:37<00:29,  4.16it/s][A
 46%|████▌     | 101/221 [00:37<00:29,  4.11it/s][A
 46%|████▌     | 102/221 [00:37<00:30,  3.88it/s][A
 47%|████▋     | 103/221 [00:37<00:27,  4.28it/s][A
 47%|████▋     | 104/221 [00:38<00:26,  4.43it/s][A
 48%|████▊     | 105/221 [00:38<00:30,  3.78it/s][A
 48%|████▊     | 106/221 [00:38<00:42,  2.73it/s][A
 48%|████▊     | 107/221 [00:39<00:34,  3.35it/s][A
 49%|████▉     | 108/221 [00:39<00:29,  3.79it/s][A
 49%|████▉     | 109/221 [00:39<00:25,  4.36it/s][A
 50%|████▉     | 110/221 [00:39<00:21,  5.13it/s][A
 50%|█████     | 111/221 [00:40<00:31,  3.51it/s][A
 51%|█████     | 112/221 [00:40<00:27,  3.96it/s][A
 51%|█████     | 113/221 [00:40<00:29,  3.71it/s][A
 52%|█████▏    | 115/221 [00:40<00:22,  4.71it/s][A[h264 @ 0x558644ba77c0] mmco: unref short failure
[h264 @ 0x558644ba77c0] mmco: unref short failure

 52%|█████▏    | 116/221 [00:45<02:28,  1.42s/it][A
 53%|█████▎    | 117/221 [00:46<01:56,  1.12s/it][A
 53%|█████▎    | 118/221 [00:46<01:31,  1.13it/s][A
 54%|█████▍    | 119/221 [00:46<01:13,  1.40it/s][A
 54%|█████▍    | 120/221 [00:46<00:56,  1.79it/s][A
 55%|█████▍    | 121/221 [00:47<00:44,  2.26it/s][A
 55%|█████▌    | 122/221 [00:47<00:37,  2.65it/s][A
 56%|█████▌    | 123/221 [00:47<00:30,  3.19it/s][A
 56%|█████▌    | 124/221 [00:47<00:26,  3.72it/s][A[h264 @ 0x563541c8bd40] mmco: unref short failure
[h264 @ 0x563541c8bd40] mmco: unref short failure

 57%|█████▋    | 125/221 [00:47<00:24,  3.92it/s][A
 57%|█████▋    | 126/221 [00:48<00:38,  2.44it/s][A
 57%|█████▋    | 127/221 [00:48<00:36,  2.56it/s][A
 58%|█████▊    | 128/221 [00:49<00:50,  1.84it/s][A
 58%|█████▊    | 129/221 [00:50<00:41,  2.20it/s][A
 59%|█████▉    | 130/221 [00:50<00:33,  2.70it/s][A
 60%|█████▉    | 132/221 [00:50<00:23,  3.79it/s][A
 60%|██████    | 133/221 [00:50<00:27,  3.23it/s][A
 61%|██████    | 134/221 [00:51<00:24,  3.57it/s][A
 61%|██████    | 135/221 [00:51<00:23,  3.62it/s][A
 62%|██████▏   | 136/221 [00:51<00:29,  2.91it/s][A
 62%|██████▏   | 137/221 [00:52<00:35,  2.37it/s][A
 62%|██████▏   | 138/221 [00:53<00:39,  2.09it/s][A
 63%|██████▎   | 139/221 [00:53<00:36,  2.25it/s][A
 63%|██████▎   | 140/221 [00:53<00:31,  2.61it/s][A
 64%|██████▍   | 141/221 [00:54<00:26,  2.99it/s][A
 64%|██████▍   | 142/221 [00:54<00:26,  3.02it/s][A
 65%|██████▍   | 143/221 [00:54<00:24,  3.20it/s][A
 65%|██████▌   | 144/221 [00:54<00:20,  3.75it/s][A
 66%|██████▌   | 146/221 [00:54<00:13,  5.44it/s][A
 67%|██████▋   | 147/221 [00:55<00:12,  5.99it/s][A
 67%|██████▋   | 148/221 [00:55<00:13,  5.41it/s][A
 67%|██████▋   | 149/221 [00:55<00:12,  5.90it/s][A
 68%|██████▊   | 150/221 [00:55<00:11,  5.98it/s][A[h264 @ 0x558637b15980] mmco: unref short failure

 68%|██████▊   | 151/221 [00:56<00:18,  3.74it/s][A
 69%|██████▉   | 152/221 [00:56<00:18,  3.74it/s][A
 69%|██████▉   | 153/221 [00:56<00:20,  3.36it/s][A
 70%|██████▉   | 154/221 [00:57<00:29,  2.25it/s][A
 70%|███████   | 155/221 [00:57<00:22,  2.91it/s][A[h264 @ 0x558643f96c40] mmco: unref short failure
[h264 @ 0x558643f96c40] mmco: unref short failure
[h264 @ 0x558643f96c40] mmco: unref short failure
[h264 @ 0x558643f96c40] mmco: unref short failure

 71%|███████   | 157/221 [01:02<01:24,  1.33s/it][A
 71%|███████▏  | 158/221 [01:02<01:05,  1.03s/it][A
 72%|███████▏  | 159/221 [01:02<00:49,  1.25it/s][A
 72%|███████▏  | 160/221 [01:03<00:38,  1.58it/s][A
 73%|███████▎  | 162/221 [01:03<00:22,  2.58it/s][A
 74%|███████▍  | 163/221 [01:03<00:19,  2.95it/s][A
 74%|███████▍  | 164/221 [01:03<00:17,  3.18it/s][A
 75%|███████▍  | 165/221 [01:03<00:15,  3.66it/s][A
 75%|███████▌  | 166/221 [01:04<00:17,  3.14it/s][A
 76%|███████▌  | 168/221 [01:08<00:55,  1.05s/it][A
 76%|███████▋  | 169/221 [01:08<00:46,  1.13it/s][A
 77%|███████▋  | 170/221 [01:08<00:37,  1.35it/s][A
 77%|███████▋  | 171/221 [01:08<00:28,  1.74it/s][A[h264 @ 0x5556de5d4300] mmco: unref short failure

 78%|███████▊  | 172/221 [01:09<00:23,  2.08it/s][A
 78%|███████▊  | 173/221 [01:09<00:19,  2.47it/s][A
 79%|███████▉  | 175/221 [01:09<00:13,  3.46it/s][A
 80%|███████▉  | 176/221 [01:09<00:12,  3.54it/s][A
 80%|████████  | 177/221 [01:10<00:11,  3.99it/s][A
 81%|████████  | 178/221 [01:10<00:10,  4.04it/s][A[h264 @ 0x55864303dec0] mmco: unref short failure
[h264 @ 0x55864303dec0] mmco: unref short failure
[h264 @ 0x55864303dec0] mmco: unref short failure
[h264 @ 0x55864303dec0] mmco: unref short failure
[h264 @ 0x5577319ece80] mmco: unref short failure
[h264 @ 0x5577319ece80] mmco: unref short failure

 81%|████████  | 179/221 [01:12<00:28,  1.48it/s][A
 82%|████████▏ | 181/221 [01:12<00:16,  2.38it/s][A
 82%|████████▏ | 182/221 [01:12<00:13,  2.83it/s][A
 83%|████████▎ | 183/221 [01:12<00:11,  3.33it/s][A
 83%|████████▎ | 184/221 [01:12<00:10,  3.41it/s][A
 84%|████████▎ | 185/221 [01:13<00:08,  4.05it/s][A
 84%|████████▍ | 186/221 [01:13<00:08,  4.27it/s][A
 85%|████████▌ | 188/221 [01:13<00:06,  4.94it/s][A
 86%|████████▌ | 189/221 [01:13<00:06,  4.74it/s][A
 86%|████████▌ | 190/221 [01:14<00:06,  4.81it/s][A
 87%|████████▋ | 192/221 [01:14<00:05,  5.67it/s][A
 87%|████████▋ | 193/221 [01:14<00:04,  5.97it/s][A
 88%|████████▊ | 194/221 [01:15<00:09,  3.00it/s][A
 88%|████████▊ | 195/221 [01:15<00:07,  3.61it/s][A
 89%|████████▉ | 197/221 [01:15<00:04,  5.10it/s][A
 90%|████████▉ | 198/221 [01:15<00:04,  5.62it/s][A[h264 @ 0x56355d4d8600] mmco: unref short failure

 90%|█████████ | 199/221 [01:16<00:04,  4.61it/s][A
 90%|█████████ | 200/221 [01:16<00:05,  3.86it/s][A
 91%|█████████ | 201/221 [01:16<00:05,  3.87it/s][A
 91%|█████████▏| 202/221 [01:16<00:04,  4.31it/s][A
 92%|█████████▏| 203/221 [01:17<00:04,  3.61it/s][A
 93%|█████████▎| 205/221 [01:17<00:03,  5.00it/s][A
 93%|█████████▎| 206/221 [01:17<00:03,  4.52it/s][A
 94%|█████████▍| 208/221 [01:17<00:02,  6.41it/s][A
 95%|█████████▌| 210/221 [01:17<00:01,  8.46it/s][A
 96%|█████████▌| 212/221 [01:18<00:02,  3.83it/s][A
 97%|█████████▋| 214/221 [01:19<00:02,  3.13it/s][A
 97%|█████████▋| 215/221 [01:20<00:01,  3.50it/s][A
 98%|█████████▊| 216/221 [01:20<00:01,  3.88it/s][A
 98%|█████████▊| 217/221 [01:21<00:01,  2.03it/s][A
 99%|█████████▊| 218/221 [01:22<00:01,  1.90it/s][A
 99%|█████████▉| 219/221 [01:22<00:00,  2.31it/s][A[h264 @ 0x55772896b4c0] mmco: unref short failure
[h264 @ 0x55772896b4c0] mmco: unref short failure

100%|█████████▉| 220/221 [01:27<00:01,  1.67s/it][A
100%|██████████| 221/221 [01:27<00:00,  1.23s/it][A100%|██████████| 221/221 [01:27<00:00,  2.53it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<01:07,  3.27it/s][A
  1%|          | 2/221 [00:00<01:05,  3.35it/s][A
  1%|▏         | 3/221 [00:00<01:04,  3.37it/s][A
  2%|▏         | 4/221 [00:01<01:04,  3.38it/s][A
  2%|▏         | 5/221 [00:01<01:05,  3.29it/s][A
  3%|▎         | 6/221 [00:01<01:04,  3.33it/s][A
  3%|▎         | 7/221 [00:02<01:04,  3.31it/s][A
  4%|▎         | 8/221 [00:02<01:03,  3.33it/s][A
  4%|▍         | 9/221 [00:02<01:03,  3.35it/s][A
  5%|▍         | 10/221 [00:02<01:02,  3.37it/s][A
  5%|▍         | 11/221 [00:03<01:02,  3.35it/s][A
  5%|▌         | 12/221 [00:03<01:03,  3.31it/s][A
  6%|▌         | 13/221 [00:03<01:02,  3.31it/s][A
  6%|▋         | 14/221 [00:04<01:03,  3.26it/s][A
  7%|▋         | 15/221 [00:04<01:03,  3.27it/s][A
  7%|▋         | 16/221 [00:04<01:02,  3.29it/s][A
  8%|▊         | 17/221 [00:05<01:02,  3.28it/s][A
  8%|▊         | 18/221 [00:05<01:01,  3.31it/s][A[h264 @ 0x5556cc219840] mmco: unref short failure
[h264 @ 0x5556cc219840] mmco: unref short failure

  9%|▊         | 19/221 [00:05<01:00,  3.34it/s][A
  9%|▉         | 20/221 [00:06<01:00,  3.34it/s][A
 10%|▉         | 21/221 [00:06<01:00,  3.32it/s][A
 10%|▉         | 22/221 [00:06<00:59,  3.35it/s][A
 10%|█         | 23/221 [00:06<00:58,  3.36it/s][A
 11%|█         | 24/221 [00:07<00:59,  3.32it/s][A
 11%|█▏        | 25/221 [00:07<00:58,  3.34it/s][A
 12%|█▏        | 26/221 [00:07<00:58,  3.36it/s][A
 12%|█▏        | 27/221 [00:08<00:57,  3.37it/s][A
 13%|█▎        | 28/221 [00:08<00:57,  3.38it/s][A
 13%|█▎        | 29/221 [00:08<00:56,  3.38it/s][A
 14%|█▎        | 30/221 [00:08<00:56,  3.39it/s][A
 14%|█▍        | 31/221 [00:09<00:55,  3.39it/s][A
 14%|█▍        | 32/221 [00:09<00:56,  3.32it/s][A
 15%|█▍        | 33/221 [00:09<00:56,  3.33it/s][A
 15%|█▌        | 34/221 [00:10<00:57,  3.26it/s][A
 16%|█▌        | 35/221 [00:10<00:56,  3.30it/s][A
 16%|█▋        | 36/221 [00:10<00:55,  3.33it/s][A
 17%|█▋        | 37/221 [00:11<00:54,  3.35it/s][A
 17%|█▋        | 38/221 [00:11<00:54,  3.36it/s][A
 18%|█▊        | 39/221 [00:11<00:54,  3.37it/s][A
 18%|█▊        | 40/221 [00:11<00:53,  3.38it/s][A
 19%|█▊        | 41/221 [00:12<00:53,  3.39it/s][A
 19%|█▉        | 42/221 [00:12<00:53,  3.38it/s][A
 19%|█▉        | 43/221 [00:12<00:53,  3.32it/s][A
 20%|█▉        | 44/221 [00:13<00:53,  3.34it/s][A
 20%|██        | 45/221 [00:13<00:52,  3.35it/s][A
 21%|██        | 46/221 [00:13<00:51,  3.37it/s][A
 21%|██▏       | 47/221 [00:14<00:51,  3.38it/s][A
 22%|██▏       | 48/221 [00:14<00:51,  3.39it/s][A
 22%|██▏       | 49/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 50/221 [00:14<00:50,  3.40it/s][A
 23%|██▎       | 51/221 [00:15<00:49,  3.40it/s][A
 24%|██▎       | 52/221 [00:15<00:49,  3.40it/s][A
 24%|██▍       | 53/221 [00:15<00:49,  3.41it/s][A
 24%|██▍       | 54/221 [00:16<00:49,  3.40it/s][A
 25%|██▍       | 55/221 [00:16<00:48,  3.40it/s][A
 25%|██▌       | 56/221 [00:16<00:48,  3.40it/s][A
 26%|██▌       | 57/221 [00:17<00:48,  3.41it/s][A
 26%|██▌       | 58/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 59/221 [00:17<00:47,  3.41it/s][A
 27%|██▋       | 60/221 [00:17<00:47,  3.41it/s][A
 28%|██▊       | 61/221 [00:18<00:46,  3.41it/s][A
 28%|██▊       | 62/221 [00:18<00:46,  3.41it/s][A
 29%|██▊       | 63/221 [00:18<00:46,  3.41it/s][A
 29%|██▉       | 64/221 [00:19<00:45,  3.41it/s][A
 29%|██▉       | 65/221 [00:19<00:45,  3.41it/s][A
 30%|██▉       | 66/221 [00:19<00:45,  3.41it/s][A
 30%|███       | 67/221 [00:19<00:45,  3.41it/s][A
 31%|███       | 68/221 [00:20<00:44,  3.42it/s][A
 31%|███       | 69/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 70/221 [00:20<00:44,  3.42it/s][A
 32%|███▏      | 71/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 72/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 73/221 [00:21<00:43,  3.42it/s][A
 33%|███▎      | 74/221 [00:21<00:42,  3.42it/s][A
 34%|███▍      | 75/221 [00:22<00:42,  3.42it/s][A
 34%|███▍      | 76/221 [00:22<00:42,  3.42it/s][A
 35%|███▍      | 77/221 [00:22<00:42,  3.42it/s][A
 35%|███▌      | 78/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 79/221 [00:23<00:41,  3.42it/s][A
 36%|███▌      | 80/221 [00:23<00:41,  3.42it/s][A
 37%|███▋      | 81/221 [00:24<00:40,  3.42it/s][A
 37%|███▋      | 82/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 83/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 84/221 [00:24<00:40,  3.42it/s][A
 38%|███▊      | 85/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 86/221 [00:25<00:39,  3.42it/s][A
 39%|███▉      | 87/221 [00:25<00:39,  3.42it/s][A
 40%|███▉      | 88/221 [00:26<00:38,  3.42it/s][A
 40%|████      | 89/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 90/221 [00:26<00:38,  3.42it/s][A
 41%|████      | 91/221 [00:26<00:37,  3.42it/s][A
 42%|████▏     | 92/221 [00:27<00:37,  3.42it/s][A
 42%|████▏     | 93/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 94/221 [00:27<00:37,  3.42it/s][A
 43%|████▎     | 95/221 [00:28<00:36,  3.42it/s][A
 43%|████▎     | 96/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 97/221 [00:28<00:36,  3.42it/s][A
 44%|████▍     | 98/221 [00:28<00:35,  3.42it/s][A
 45%|████▍     | 99/221 [00:29<00:35,  3.42it/s][A
 45%|████▌     | 100/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 101/221 [00:29<00:35,  3.42it/s][A
 46%|████▌     | 102/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 103/221 [00:30<00:34,  3.42it/s][A
 47%|████▋     | 104/221 [00:30<00:34,  3.42it/s][A
 48%|████▊     | 105/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 106/221 [00:31<00:33,  3.42it/s][A
 48%|████▊     | 107/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 108/221 [00:31<00:33,  3.42it/s][A
 49%|████▉     | 109/221 [00:32<00:32,  3.42it/s][A
 50%|████▉     | 110/221 [00:32<00:32,  3.42it/s][A
 50%|█████     | 111/221 [00:32<00:32,  3.42it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.42it/s][A
 51%|█████     | 113/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 114/221 [00:33<00:31,  3.42it/s][A
 52%|█████▏    | 115/221 [00:33<00:30,  3.42it/s][A
 52%|█████▏    | 116/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 117/221 [00:34<00:30,  3.42it/s][A
 53%|█████▎    | 118/221 [00:34<00:30,  3.42it/s][A
 54%|█████▍    | 119/221 [00:35<00:29,  3.42it/s][A
 54%|█████▍    | 120/221 [00:35<00:29,  3.42it/s][A
 55%|█████▍    | 121/221 [00:35<00:29,  3.42it/s][A
 55%|█████▌    | 122/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 123/221 [00:36<00:28,  3.42it/s][A
 56%|█████▌    | 124/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 125/221 [00:36<00:28,  3.42it/s][A
 57%|█████▋    | 126/221 [00:37<00:27,  3.42it/s][A
 57%|█████▋    | 127/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 128/221 [00:37<00:27,  3.42it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 130/221 [00:38<00:26,  3.42it/s][A
 59%|█████▉    | 131/221 [00:38<00:26,  3.42it/s][A
 60%|█████▉    | 132/221 [00:38<00:25,  3.42it/s][A
 60%|██████    | 133/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 134/221 [00:39<00:25,  3.42it/s][A
 61%|██████    | 135/221 [00:39<00:25,  3.42it/s][A
 62%|██████▏   | 136/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 137/221 [00:40<00:24,  3.42it/s][A
 62%|██████▏   | 138/221 [00:40<00:24,  3.42it/s][A
 63%|██████▎   | 139/221 [00:40<00:23,  3.42it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 141/221 [00:41<00:23,  3.42it/s][A
 64%|██████▍   | 142/221 [00:41<00:23,  3.42it/s][A
 65%|██████▍   | 143/221 [00:42<00:22,  3.42it/s][A
 65%|██████▌   | 144/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 145/221 [00:42<00:22,  3.42it/s][A
 66%|██████▌   | 146/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 147/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 148/221 [00:43<00:21,  3.42it/s][A
 67%|██████▋   | 149/221 [00:43<00:21,  3.42it/s][A
 68%|██████▊   | 150/221 [00:44<00:20,  3.42it/s][A
 68%|██████▊   | 151/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 152/221 [00:44<00:20,  3.42it/s][A
 69%|██████▉   | 153/221 [00:45<00:19,  3.42it/s][A
 70%|██████▉   | 154/221 [00:45<00:19,  3.42it/s][A
 70%|███████   | 155/221 [00:45<00:19,  3.42it/s][A
 71%|███████   | 156/221 [00:45<00:18,  3.42it/s][A
 71%|███████   | 157/221 [00:46<00:18,  3.42it/s][A
 71%|███████▏  | 158/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 159/221 [00:46<00:18,  3.42it/s][A
 72%|███████▏  | 160/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 161/221 [00:47<00:17,  3.42it/s][A
 73%|███████▎  | 162/221 [00:47<00:17,  3.42it/s][A
 74%|███████▍  | 163/221 [00:47<00:16,  3.42it/s][A
 74%|███████▍  | 164/221 [00:48<00:16,  3.42it/s][A
 75%|███████▍  | 165/221 [00:48<00:16,  3.42it/s][A
 75%|███████▌  | 166/221 [00:48<00:16,  3.42it/s][A
 76%|███████▌  | 167/221 [00:49<00:15,  3.42it/s][A
 76%|███████▌  | 168/221 [00:49<00:15,  3.42it/s][A
 76%|███████▋  | 169/221 [00:49<00:15,  3.42it/s][A
 77%|███████▋  | 170/221 [00:50<00:14,  3.42it/s][A
 77%|███████▋  | 171/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 172/221 [00:50<00:14,  3.42it/s][A
 78%|███████▊  | 173/221 [00:50<00:14,  3.42it/s][A
 79%|███████▊  | 174/221 [00:51<00:13,  3.42it/s][A
 79%|███████▉  | 175/221 [00:51<00:13,  3.42it/s][A
 80%|███████▉  | 176/221 [00:51<00:13,  3.42it/s][A
 80%|████████  | 177/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 178/221 [00:52<00:12,  3.42it/s][A
 81%|████████  | 179/221 [00:52<00:12,  3.42it/s][A
 81%|████████▏ | 180/221 [00:52<00:11,  3.42it/s][A
 82%|████████▏ | 181/221 [00:53<00:11,  3.42it/s][A
 82%|████████▏ | 182/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 183/221 [00:53<00:11,  3.42it/s][A
 83%|████████▎ | 184/221 [00:54<00:10,  3.42it/s][A
 84%|████████▎ | 185/221 [00:54<00:10,  3.42it/s][A
 84%|████████▍ | 186/221 [00:54<00:10,  3.42it/s][A
 85%|████████▍ | 187/221 [00:54<00:09,  3.42it/s][A
 85%|████████▌ | 188/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 189/221 [00:55<00:09,  3.42it/s][A
 86%|████████▌ | 190/221 [00:55<00:09,  3.42it/s][A
 86%|████████▋ | 191/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 192/221 [00:56<00:08,  3.42it/s][A
 87%|████████▋ | 193/221 [00:56<00:08,  3.42it/s][A
 88%|████████▊ | 194/221 [00:57<00:07,  3.42it/s][A
 88%|████████▊ | 195/221 [00:57<00:07,  3.42it/s][A
 89%|████████▊ | 196/221 [00:57<00:07,  3.42it/s][A
 89%|████████▉ | 197/221 [00:57<00:07,  3.42it/s][A
 90%|████████▉ | 198/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 199/221 [00:58<00:06,  3.42it/s][A
 90%|█████████ | 200/221 [00:58<00:06,  3.42it/s][A
 91%|█████████ | 201/221 [00:59<00:05,  3.42it/s][A
 91%|█████████▏| 202/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 203/221 [00:59<00:05,  3.42it/s][A
 92%|█████████▏| 204/221 [00:59<00:04,  3.42it/s][A
 93%|█████████▎| 205/221 [01:00<00:04,  3.42it/s][A
 93%|█████████▎| 206/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▎| 207/221 [01:00<00:04,  3.42it/s][A
 94%|█████████▍| 208/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▍| 209/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 210/221 [01:01<00:03,  3.42it/s][A
 95%|█████████▌| 211/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▌| 212/221 [01:02<00:02,  3.42it/s][A
 96%|█████████▋| 213/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 214/221 [01:02<00:02,  3.42it/s][A
 97%|█████████▋| 215/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 216/221 [01:03<00:01,  3.42it/s][A
 98%|█████████▊| 217/221 [01:03<00:01,  3.42it/s][A
 99%|█████████▊| 218/221 [01:04<00:00,  3.42it/s][A
 99%|█████████▉| 219/221 [01:04<00:00,  3.42it/s][A
100%|█████████▉| 220/221 [01:04<00:00,  3.42it/s][A
100%|██████████| 221/221 [01:04<00:00,  3.42it/s][A100%|██████████| 221/221 [01:04<00:00,  3.40it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<00:39,  5.60it/s][A
  1%|          | 2/221 [00:00<00:41,  5.32it/s][A
  1%|▏         | 3/221 [00:00<01:01,  3.53it/s][A
  2%|▏         | 4/221 [00:00<00:54,  3.97it/s][A
  2%|▏         | 5/221 [00:01<00:49,  4.33it/s][A
  3%|▎         | 6/221 [00:01<00:49,  4.37it/s][A
  3%|▎         | 7/221 [00:01<00:50,  4.25it/s][A
  4%|▎         | 8/221 [00:02<01:01,  3.49it/s][A
  4%|▍         | 9/221 [00:02<01:07,  3.15it/s][A
  5%|▍         | 10/221 [00:02<01:08,  3.09it/s][A
  5%|▍         | 11/221 [00:02<01:00,  3.49it/s][A
  5%|▌         | 12/221 [00:03<00:54,  3.85it/s][A
  6%|▌         | 13/221 [00:03<01:13,  2.82it/s][A
  6%|▋         | 14/221 [00:04<01:15,  2.76it/s][A
  7%|▋         | 15/221 [00:04<01:11,  2.90it/s][A
  7%|▋         | 16/221 [00:04<01:15,  2.73it/s][A
  8%|▊         | 17/221 [00:05<01:30,  2.26it/s][A
  8%|▊         | 18/221 [00:05<01:25,  2.38it/s][A
  9%|▊         | 19/221 [00:05<01:06,  3.06it/s][A
  9%|▉         | 20/221 [00:06<00:53,  3.78it/s][A
 10%|▉         | 21/221 [00:06<00:46,  4.27it/s][A
 10%|▉         | 22/221 [00:06<00:44,  4.47it/s][A
 10%|█         | 23/221 [00:06<00:40,  4.87it/s][A
 11%|█         | 24/221 [00:06<00:38,  5.13it/s][A
 11%|█▏        | 25/221 [00:07<00:48,  4.08it/s][A
 12%|█▏        | 26/221 [00:07<00:53,  3.63it/s][A
 12%|█▏        | 27/221 [00:07<00:50,  3.87it/s][A
 13%|█▎        | 28/221 [00:07<00:48,  3.95it/s][A
 13%|█▎        | 29/221 [00:08<00:47,  4.02it/s][A
 14%|█▎        | 30/221 [00:08<00:52,  3.63it/s][A
 14%|█▍        | 31/221 [00:08<00:56,  3.37it/s][A
 14%|█▍        | 32/221 [00:08<00:47,  3.99it/s][A
 15%|█▍        | 33/221 [00:09<00:46,  4.00it/s][A
 15%|█▌        | 34/221 [00:09<00:48,  3.84it/s][A
 16%|█▌        | 35/221 [00:09<00:51,  3.60it/s][A
 16%|█▋        | 36/221 [00:10<00:58,  3.14it/s][A
 17%|█▋        | 37/221 [00:10<00:52,  3.50it/s][A
 17%|█▋        | 38/221 [00:10<00:54,  3.35it/s][A
 18%|█▊        | 39/221 [00:11<00:55,  3.28it/s][A
 18%|█▊        | 40/221 [00:11<00:54,  3.34it/s][A
 19%|█▊        | 41/221 [00:11<00:51,  3.52it/s][A
 19%|█▉        | 42/221 [00:11<00:46,  3.87it/s][A
 19%|█▉        | 43/221 [00:12<00:52,  3.39it/s][A
 20%|█▉        | 44/221 [00:12<00:56,  3.13it/s][A
 20%|██        | 45/221 [00:13<01:03,  2.77it/s][A
 21%|██        | 46/221 [00:13<01:05,  2.67it/s][A
 21%|██▏       | 47/221 [00:13<00:58,  2.99it/s][A
 22%|██▏       | 48/221 [00:13<00:50,  3.44it/s][A
 23%|██▎       | 50/221 [00:14<00:44,  3.83it/s][A
 23%|██▎       | 51/221 [00:14<00:44,  3.79it/s][A
 24%|██▍       | 53/221 [00:15<00:43,  3.88it/s][A
 24%|██▍       | 54/221 [00:15<00:43,  3.83it/s][A
 25%|██▍       | 55/221 [00:15<00:48,  3.41it/s][A
 25%|██▌       | 56/221 [00:16<00:52,  3.12it/s][A
 26%|██▌       | 57/221 [00:16<00:51,  3.20it/s][A
 26%|██▌       | 58/221 [00:16<00:43,  3.78it/s][A
 27%|██▋       | 59/221 [00:16<00:42,  3.79it/s][A
 27%|██▋       | 60/221 [00:17<00:39,  4.06it/s][A
 28%|██▊       | 61/221 [00:17<00:39,  4.09it/s][A
 28%|██▊       | 62/221 [00:17<00:44,  3.58it/s][A
 29%|██▊       | 63/221 [00:17<00:37,  4.19it/s][A
 29%|██▉       | 64/221 [00:17<00:33,  4.63it/s][A
 29%|██▉       | 65/221 [00:18<00:35,  4.37it/s][A
 30%|██▉       | 66/221 [00:18<00:46,  3.31it/s][A
 30%|███       | 67/221 [00:19<00:47,  3.26it/s][A
 31%|███       | 68/221 [00:19<00:48,  3.18it/s][A
 31%|███       | 69/221 [00:19<01:02,  2.44it/s][A
 32%|███▏      | 70/221 [00:20<00:58,  2.58it/s][A
 32%|███▏      | 71/221 [00:20<00:56,  2.67it/s][A
 33%|███▎      | 72/221 [00:20<00:49,  3.00it/s][A
 33%|███▎      | 73/221 [00:21<00:48,  3.05it/s][A
 33%|███▎      | 74/221 [00:21<00:43,  3.35it/s][A
 34%|███▍      | 75/221 [00:21<00:43,  3.37it/s][A
 34%|███▍      | 76/221 [00:21<00:39,  3.70it/s][A
 35%|███▍      | 77/221 [00:22<00:34,  4.20it/s][A
 35%|███▌      | 78/221 [00:22<00:36,  3.97it/s][A
 36%|███▌      | 79/221 [00:22<00:36,  3.92it/s][A
 36%|███▌      | 80/221 [00:22<00:32,  4.39it/s][A
 37%|███▋      | 81/221 [00:23<00:31,  4.42it/s][A
 37%|███▋      | 82/221 [00:23<00:44,  3.14it/s][A
 38%|███▊      | 84/221 [00:24<00:47,  2.91it/s][A
 38%|███▊      | 85/221 [00:24<00:40,  3.33it/s][A
 39%|███▉      | 86/221 [00:24<00:45,  2.95it/s][A
 39%|███▉      | 87/221 [00:25<00:47,  2.81it/s][A
 40%|███▉      | 88/221 [00:25<00:43,  3.03it/s][A
 40%|████      | 89/221 [00:25<00:42,  3.08it/s][A
 41%|████      | 90/221 [00:26<00:48,  2.69it/s][A
 41%|████      | 91/221 [00:26<00:43,  3.00it/s][A
 42%|████▏     | 92/221 [00:27<00:45,  2.85it/s][A
 42%|████▏     | 93/221 [00:27<00:52,  2.46it/s][A
 43%|████▎     | 94/221 [00:27<00:46,  2.71it/s][A
 43%|████▎     | 95/221 [00:28<00:51,  2.46it/s][A
 43%|████▎     | 96/221 [00:28<00:51,  2.43it/s][A
 44%|████▍     | 97/221 [00:29<00:48,  2.56it/s][A
 44%|████▍     | 98/221 [00:29<00:47,  2.59it/s][A
 45%|████▍     | 99/221 [00:29<00:41,  2.93it/s][A
 45%|████▌     | 100/221 [00:29<00:37,  3.26it/s][A
 46%|████▌     | 101/221 [00:30<00:34,  3.53it/s][A
 46%|████▌     | 102/221 [00:30<00:33,  3.52it/s][A
 47%|████▋     | 103/221 [00:30<00:30,  3.85it/s][A
 47%|████▋     | 104/221 [00:30<00:25,  4.59it/s][A
 48%|████▊     | 105/221 [00:31<00:29,  3.90it/s][A
 48%|████▊     | 106/221 [00:31<00:38,  2.96it/s][A
 48%|████▊     | 107/221 [00:31<00:34,  3.28it/s][A
 49%|████▉     | 108/221 [00:32<00:28,  3.96it/s][A
 49%|████▉     | 109/221 [00:32<00:27,  4.12it/s][A
 50%|████▉     | 110/221 [00:32<00:29,  3.71it/s][A
 50%|█████     | 111/221 [00:32<00:31,  3.49it/s][A
 51%|█████     | 112/221 [00:33<00:31,  3.47it/s][A
 51%|█████     | 113/221 [00:33<00:34,  3.10it/s][A
 52%|█████▏    | 114/221 [00:33<00:29,  3.61it/s][A
 52%|█████▏    | 115/221 [00:33<00:24,  4.25it/s][A
 52%|█████▏    | 116/221 [00:34<00:25,  4.18it/s][A
 53%|█████▎    | 117/221 [00:34<00:25,  4.01it/s][A
 53%|█████▎    | 118/221 [00:34<00:28,  3.67it/s][A
 54%|█████▍    | 119/221 [00:35<00:32,  3.13it/s][A
 54%|█████▍    | 120/221 [00:35<00:36,  2.74it/s][A
 55%|█████▍    | 121/221 [00:35<00:35,  2.80it/s][A
 55%|█████▌    | 122/221 [00:36<00:31,  3.11it/s][A
 56%|█████▌    | 123/221 [00:36<00:34,  2.83it/s][A
 56%|█████▌    | 124/221 [00:37<00:34,  2.78it/s][A
 57%|█████▋    | 125/221 [00:37<00:40,  2.39it/s][A
 57%|█████▋    | 126/221 [00:37<00:37,  2.53it/s][A
 57%|█████▋    | 127/221 [00:38<00:36,  2.57it/s][A
 58%|█████▊    | 128/221 [00:38<00:32,  2.85it/s][A
 58%|█████▊    | 129/221 [00:38<00:26,  3.51it/s][A
 59%|█████▉    | 130/221 [00:38<00:25,  3.63it/s][A
 59%|█████▉    | 131/221 [00:39<00:23,  3.81it/s][A
 60%|█████▉    | 132/221 [00:39<00:21,  4.16it/s][A
 60%|██████    | 133/221 [00:39<00:24,  3.53it/s][A
 61%|██████    | 134/221 [00:40<00:26,  3.29it/s][A
 61%|██████    | 135/221 [00:40<00:22,  3.76it/s][A
 62%|██████▏   | 136/221 [00:40<00:23,  3.57it/s][A
 62%|██████▏   | 137/221 [00:40<00:22,  3.82it/s][A
 62%|██████▏   | 138/221 [00:41<00:21,  3.91it/s][A
 63%|██████▎   | 139/221 [00:41<00:26,  3.13it/s][A
 63%|██████▎   | 140/221 [00:41<00:23,  3.51it/s][A
 64%|██████▍   | 141/221 [00:42<00:26,  2.96it/s][A
 64%|██████▍   | 142/221 [00:42<00:22,  3.45it/s][A
 65%|██████▍   | 143/221 [00:42<00:23,  3.34it/s][A
 65%|██████▌   | 144/221 [00:43<00:25,  3.06it/s][A
 66%|██████▌   | 145/221 [00:43<00:26,  2.82it/s][A
 66%|██████▌   | 146/221 [00:43<00:23,  3.15it/s][A
 67%|██████▋   | 147/221 [00:43<00:20,  3.55it/s][A
 67%|██████▋   | 148/221 [00:44<00:24,  2.93it/s][A
 67%|██████▋   | 149/221 [00:44<00:20,  3.52it/s][A
 68%|██████▊   | 150/221 [00:44<00:19,  3.70it/s][A
 68%|██████▊   | 151/221 [00:45<00:21,  3.31it/s][A
 69%|██████▉   | 152/221 [00:45<00:29,  2.36it/s][A
 69%|██████▉   | 153/221 [00:46<00:27,  2.46it/s][A
 70%|██████▉   | 154/221 [00:46<00:26,  2.50it/s][A
 70%|███████   | 155/221 [00:46<00:24,  2.69it/s][A
 71%|███████   | 156/221 [00:47<00:20,  3.10it/s][A
 71%|███████   | 157/221 [00:47<00:18,  3.39it/s][A
 71%|███████▏  | 158/221 [00:47<00:20,  3.06it/s][A
 72%|███████▏  | 159/221 [00:48<00:19,  3.18it/s][A
 72%|███████▏  | 160/221 [00:48<00:20,  2.99it/s][A
 73%|███████▎  | 161/221 [00:48<00:16,  3.71it/s][A
 74%|███████▍  | 163/221 [00:48<00:12,  4.51it/s][A
 74%|███████▍  | 164/221 [00:49<00:13,  4.36it/s][A
 75%|███████▍  | 165/221 [00:49<00:15,  3.68it/s][A
 75%|███████▌  | 166/221 [00:49<00:16,  3.27it/s][A
 76%|███████▌  | 167/221 [00:50<00:13,  3.88it/s][A
 76%|███████▌  | 168/221 [00:50<00:14,  3.57it/s][A
 77%|███████▋  | 170/221 [00:50<00:12,  4.21it/s][A
 77%|███████▋  | 171/221 [00:51<00:12,  4.11it/s][A
 78%|███████▊  | 172/221 [00:51<00:11,  4.13it/s][A
 78%|███████▊  | 173/221 [00:51<00:13,  3.63it/s][A
 79%|███████▊  | 174/221 [00:52<00:15,  3.05it/s][A
 79%|███████▉  | 175/221 [00:52<00:14,  3.09it/s][A
 80%|███████▉  | 176/221 [00:52<00:12,  3.66it/s][A
 80%|████████  | 177/221 [00:52<00:11,  3.97it/s][A
 81%|████████  | 178/221 [00:53<00:15,  2.81it/s][A
 81%|████████  | 179/221 [00:53<00:13,  3.08it/s][A
 81%|████████▏ | 180/221 [00:53<00:11,  3.71it/s][A
 82%|████████▏ | 181/221 [00:54<00:14,  2.77it/s][A
 82%|████████▏ | 182/221 [00:54<00:12,  3.05it/s][A
 83%|████████▎ | 183/221 [00:54<00:12,  3.15it/s][A
 83%|████████▎ | 184/221 [00:55<00:11,  3.15it/s][A
 84%|████████▎ | 185/221 [00:55<00:09,  3.83it/s][A
 84%|████████▍ | 186/221 [00:55<00:10,  3.36it/s][A
 85%|████████▍ | 187/221 [00:55<00:09,  3.63it/s][A
 85%|████████▌ | 188/221 [00:56<00:10,  3.22it/s][A
 86%|████████▌ | 189/221 [00:56<00:09,  3.51it/s][A
 86%|████████▌ | 190/221 [00:56<00:09,  3.21it/s][A
 86%|████████▋ | 191/221 [00:57<00:09,  3.31it/s][A
 87%|████████▋ | 192/221 [00:57<00:07,  3.73it/s][A
 87%|████████▋ | 193/221 [00:57<00:08,  3.34it/s][A
 88%|████████▊ | 194/221 [00:58<00:09,  2.72it/s][A
 88%|████████▊ | 195/221 [00:58<00:07,  3.46it/s][A
 89%|████████▊ | 196/221 [00:58<00:07,  3.35it/s][A
 89%|████████▉ | 197/221 [00:58<00:06,  3.57it/s][A
 90%|████████▉ | 198/221 [00:59<00:06,  3.44it/s][A
 90%|█████████ | 199/221 [00:59<00:05,  3.92it/s][A
 90%|█████████ | 200/221 [00:59<00:05,  3.75it/s][A
 91%|█████████ | 201/221 [00:59<00:04,  4.04it/s][A
 91%|█████████▏| 202/221 [01:00<00:05,  3.73it/s][A
 92%|█████████▏| 203/221 [01:00<00:04,  4.06it/s][A
 92%|█████████▏| 204/221 [01:00<00:04,  3.94it/s][A
 93%|█████████▎| 205/221 [01:01<00:04,  3.61it/s][A
 93%|█████████▎| 206/221 [01:01<00:05,  2.66it/s][A
 94%|█████████▎| 207/221 [01:02<00:06,  2.30it/s][A
 94%|█████████▍| 208/221 [01:02<00:04,  2.62it/s][A
 95%|█████████▍| 209/221 [01:02<00:04,  2.95it/s][A
 95%|█████████▌| 210/221 [01:03<00:03,  3.02it/s][A
 95%|█████████▌| 211/221 [01:03<00:02,  3.34it/s][A
 96%|█████████▌| 212/221 [01:03<00:02,  3.49it/s][A
 96%|█████████▋| 213/221 [01:03<00:02,  3.27it/s][A
 97%|█████████▋| 214/221 [01:04<00:02,  2.78it/s][A
 97%|█████████▋| 215/221 [01:04<00:02,  2.70it/s][A
 98%|█████████▊| 216/221 [01:05<00:01,  2.77it/s][A
 98%|█████████▊| 217/221 [01:05<00:01,  2.99it/s][A
 99%|█████████▊| 218/221 [01:05<00:00,  3.37it/s][A
 99%|█████████▉| 219/221 [01:05<00:00,  3.04it/s][A
100%|█████████▉| 220/221 [01:06<00:00,  3.43it/s][A
100%|██████████| 221/221 [01:06<00:00,  3.54it/s][A100%|██████████| 221/221 [01:06<00:00,  3.33it/s]
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_forward=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'area_r1': 39.1, 'area_recall': '39.1/64.6/72.5', 'area_ravg': 58.7}
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_backard=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'forward_r1': 37.7, 'forward_recall': '37.7/66.5/77.3', 'forward_ravg': 60.5}
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'area_video_r1': 39.3, 'area_video_recall': '39.3/68.3/78.4', 'area_video_ravg': 62.0}
09/17/2024 10:26:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_area_back_with_video====history best step: 349=======

09/17/2024 10:26:13 - INFO - __main__ -   {'area_video_r1': 41.4, 'area_video_recall': '41.4/68.3/78.3', 'area_video_ravg': 62.7}
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_area=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'area_video_r1': 52.7, 'area_video_recall': '52.7/74.9/81.4', 'area_video_ravg': 69.7, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.9/83.0', 'area_video_back_ravg': 68.6}
09/17/2024 10:26:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_area====history best step: 1399=======

09/17/2024 10:26:13 - INFO - __main__ -   {'area_video_r1': 53.4, 'area_video_recall': '53.4/75.6/82.1', 'area_video_ravg': 70.4, 'area_video_back_r1': 47.9, 'area_video_back_recall': '47.9/74.1/81.9', 'area_video_back_ravg': 67.9}
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itc_tva=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'video_r1': 36.1, 'video_recall': '36.1/64.4/73.4', 'video_ravg': 58.0}
09/17/2024 10:26:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itc_tva====history best step: 1099=======

09/17/2024 10:26:13 - INFO - __main__ -   {'video_r1': 38.3, 'video_recall': '38.3/64.5/74.2', 'video_ravg': 59.0}
09/17/2024 10:26:13 - INFO - __main__ -   ====-evaluation--ret%tva--msrvtt_ret_ret_itm_tva=====step 1649--===========

09/17/2024 10:26:13 - INFO - __main__ -   {'video_r1': 51.7, 'video_recall': '51.7/73.9/81.2', 'video_ravg': 68.9}
09/17/2024 10:26:13 - INFO - __main__ -   ======evaluation--ret%tva--msrvtt_ret_ret_itm_tva====history best step: 449=======

09/17/2024 10:26:13 - INFO - __main__ -   {'video_r1': 52.8, 'video_recall': '52.8/75.9/82.2', 'video_ravg': 70.3}
09/17/2024 10:26:34 - INFO - __main__ -   {'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itc': 0.0, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_itm': 0.007234080694615841, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_area': 1.1110506057739258, 'loss_ret%tv%ta_cap%tvas--finetune_area/loss_cap': 2.2277157306671143, 'loss_ret%tv%ta_cap%tvas--finetune_area/total_loss': 3.3460004329681396}
 57%|█████▋    | 1650/2910 [10:30:38<47:50:48, 136.71s/it][h264 @ 0x5556c77d7840] mmco: unref short failure
 57%|█████▋    | 1651/2910 [10:30:42<33:52:10, 96.85s/it]  57%|█████▋    | 1652/2910 [10:30:46<24:06:46, 69.00s/it][h264 @ 0x558639f163c0] mmco: unref short failure
[h264 @ 0x558639f163c0] mmco: unref short failure
 57%|█████▋    | 1653/2910 [10:30:51<17:23:07, 49.79s/it][h264 @ 0x5576dfcd1f80] mmco: unref short failure
[h264 @ 0x5576dfcd1f80] mmco: unref short failure
[h264 @ 0x5586333cb5c0] mmco: unref short failure
[h264 @ 0x5586333cb5c0] mmco: unref short failure
 57%|█████▋    | 1654/2910 [10:30:56<12:41:54, 36.40s/it] 57%|█████▋    | 1655/2910 [10:31:01<9:29:25, 27.22s/it] [h264 @ 0x558631f493c0] mmco: unref short failure
[h264 @ 0x558631f493c0] mmco: unref short failure
[h264 @ 0x558631f493c0] mmco: unref short failure
 57%|█████▋    | 1656/2910 [10:31:08<7:17:37, 20.94s/it][h264 @ 0x55568c84f080] mmco: unref short failure
[h264 @ 0x558649a48680] mmco: unref short failure
 57%|█████▋    | 1657/2910 [10:31:14<5:46:40, 16.60s/it][h264 @ 0x55863c27eb40] mmco: unref short failure
[h264 @ 0x55863c27eb40] mmco: unref short failure
 57%|█████▋    | 1658/2910 [10:31:21<4:43:03, 13.56s/it][h264 @ 0x5577258d2c40] mmco: unref short failure
[h264 @ 0x5577258d2c40] mmco: unref short failure
 57%|█████▋    | 1659/2910 [10:31:28<4:05:31, 11.78s/it][h264 @ 0x5576e057e840] mmco: unref short failure
[h264 @ 0x5576e057e840] mmco: unref short failure
 57%|█████▋    | 1660/2910 [10:31:35<3:35:38, 10.35s/it][h264 @ 0x5577333ee3c0] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
[h264 @ 0x55771aaf3840] mmco: unref short failure
 57%|█████▋    | 1661/2910 [10:31:43<3:17:22,  9.48s/it][h264 @ 0x55771848ec00] mmco: unref short failure
 57%|█████▋    | 1662/2910 [10:31:51<3:11:38,  9.21s/it][h264 @ 0x557720dd9b40] mmco: unref short failure
[h264 @ 0x557720dd9b40] mmco: unref short failure
 57%|█████▋    | 1663/2910 [10:31:59<2:58:54,  8.61s/it] 57%|█████▋    | 1664/2910 [10:32:05<2:43:53,  7.89s/it] 57%|█████▋    | 1665/2910 [10:32:12<2:36:36,  7.55s/it][h264 @ 0x56354295a280] mmco: unref short failure
[h264 @ 0x563542fd1dc0] mmco: unref short failure
[h264 @ 0x557717fae7c0] mmco: unref short failure
[h264 @ 0x55771eed9e40] mmco: unref short failure
[h264 @ 0x557717fae7c0] mmco: unref short failure
[h264 @ 0x5556c95e7440] mmco: unref short failure
[h264 @ 0x5556c95e7440] mmco: unref short failure
[h264 @ 0x5577258d2c40] mmco: unref short failure
[h264 @ 0x5577258d2c40] mmco: unref short failure
[h264 @ 0x5556d6890700] mmco: unref short failure
[h264 @ 0x5556d6890700] mmco: unref short failure
[h264 @ 0x5556d6890700] mmco: unref short failure
[h264 @ 0x55772a60f800] mmco: unref short failure
[h264 @ 0x55772a60f800] mmco: unref short failure
 57%|█████▋    | 1666/2910 [10:32:40<4:46:39, 13.83s/it][h264 @ 0x563562090240] mmco: unref short failure
[h264 @ 0x563562090240] mmco: unref short failure
[h264 @ 0x55568c925840] mmco: unref short failure
[h264 @ 0x55568c925840] mmco: unref short failure
[h264 @ 0x55863cb45400] mmco: unref short failure
[h264 @ 0x55863cb45400] mmco: unref short failure
[h264 @ 0x55863cb45400] mmco: unref short failure
[h264 @ 0x55863cb45400] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x557735b725c0] mmco: unref short failure
[h264 @ 0x55771f073700] mmco: unref short failure
[h264 @ 0x56355c913500] mmco: unref short failure
[h264 @ 0x56355c913500] mmco: unref short failure
[h264 @ 0x55864d293480] mmco: unref short failure
[h264 @ 0x55864d293480] mmco: unref short failure
[h264 @ 0x55864d293480] mmco: unref short failure
[h264 @ 0x563564310500] mmco: unref short failure
[h264 @ 0x563564310500] mmco: unref short failure
 57%|█████▋    | 1667/2910 [10:33:00<5:26:25, 15.76s/it][h264 @ 0x5556dec5b140] mmco: unref short failure
[h264 @ 0x55772f179280] mmco: unref short failure
[h264 @ 0x55772f179280] mmco: unref short failure
 57%|█████▋    | 1668/2910 [10:33:07<4:28:55, 12.99s/it][h264 @ 0x55863f6a7e40] mmco: unref short failure
[h264 @ 0x56354690b9c0] mmco: unref short failure
[h264 @ 0x56354690b9c0] mmco: unref short failure
[h264 @ 0x5586529d9680] mmco: unref short failure
[h264 @ 0x55771ef36380] mmco: unref short failure
[h264 @ 0x558646714f80] mmco: unref short failure
 57%|█████▋    | 1669/2910 [10:33:19<4:23:58, 12.76s/it] 57%|█████▋    | 1670/2910 [10:33:26<3:47:36, 11.01s/it][h264 @ 0x55772f179280] mmco: unref short failure
[h264 @ 0x55772f179280] mmco: unref short failure
[h264 @ 0x55772f179280] mmco: unref short failure
[h264 @ 0x5556d43cbac0] mmco: unref short failure
[h264 @ 0x5556d43cbac0] mmco: unref short failure
[h264 @ 0x5556df8e5400] mmco: unref short failure
 57%|█████▋    | 1671/2910 [10:33:35<3:37:29, 10.53s/it][h264 @ 0x55864bb2eb00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x56354ece8200] mmco: unref short failure
[h264 @ 0x55864c6f5ec0] mmco: unref short failure
[h264 @ 0x55864c6f5ec0] mmco: unref short failure
[h264 @ 0x55864c6f5ec0] mmco: unref short failure
[h264 @ 0x55864c6f5ec0] mmco: unref short failure
 57%|█████▋    | 1672/2910 [10:33:44<3:25:28,  9.96s/it][h264 @ 0x55772ed91380] mmco: unref short failure
[h264 @ 0x55772ed91380] mmco: unref short failure
[h264 @ 0x558647087540] mmco: unref short failure
[h264 @ 0x558647087540] mmco: unref short failure
[h264 @ 0x56355130d580] mmco: unref short failure
[h264 @ 0x56355130d580] mmco: unref short failure
[h264 @ 0x56354d79f980] mmco: unref short failure
 57%|█████▋    | 1673/2910 [10:33:57<3:41:34, 10.75s/it]09/17/2024 10:29:56 - INFO - __main__ -   current idx 9Ralave0cFg.16 from finetune_area returns wrong image/video, use 83277 instead.
[h264 @ 0x5556df8e5400] mmco: unref short failure
[h264 @ 0x5556df8e5400] mmco: unref short failure
[h264 @ 0x5577257971c0] mmco: unref short failure
[h264 @ 0x5577319ece80] mmco: unref short failure
[h264 @ 0x5577319ece80] mmco: unref short failure
[h264 @ 0x5576df46bf40] mmco: unref short failure
[h264 @ 0x5576df46bf40] mmco: unref short failure
[h264 @ 0x5556d9ca2980] mmco: unref short failure
[h264 @ 0x563559f01440] mmco: unref short failure
[h264 @ 0x558650c2c3c0] mmco: unref short failure
[h264 @ 0x558650c2c3c0] mmco: unref short failure
[h264 @ 0x5556c824a900] mmco: unref short failure
[h264 @ 0x5576dee475c0] mmco: unref short failure
[h264 @ 0x5576dee475c0] mmco: unref short failure
[h264 @ 0x558658fc9f40] mmco: unref short failure
[h264 @ 0x558658fc9f40] mmco: unref short failure
09/17/2024 10:30:41 - INFO - __main__ -   current idx 988Ksd7axRY.8 from finetune_area returns wrong image/video, use 42320 instead.
[h264 @ 0x5586529d9680] mmco: unref short failure
[h264 @ 0x55771d549380] mmco: unref short failure
[h264 @ 0x55771d549380] mmco: unref short failure
[h264 @ 0x56354d88eb00] mmco: unref short failure
[h264 @ 0x56354d88eb00] mmco: unref short failure
[h264 @ 0x56354d88eb00] mmco: unref short failure
[h264 @ 0x56354d88eb00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x5556c4b2ba00] mmco: unref short failure
[h264 @ 0x55771a5a5800] mmco: unref short failure
[h264 @ 0x55771a5a5800] mmco: unref short failure
[h264 @ 0x5556cc219840] mmco: unref short failure
[h264 @ 0x5556cfd38f40] mmco: unref short failure
[h264 @ 0x5556cfd38f40] mmco: unref short failure
[h264 @ 0x56355d4e6b40] mmco: unref short failure
[h264 @ 0x56355d4e6b40] mmco: unref short failure
[h264 @ 0x55864c5ee540] mmco: unref short failure
 58%|█████▊    | 1674/2910 [10:35:09<10:01:57, 29.22s/it][h264 @ 0x56355389ab80] mmco: unref short failure
[h264 @ 0x56355389ab80] mmco: unref short failure
[h264 @ 0x5556c6106d00] mmco: unref short failure
[h264 @ 0x5556c6106d00] mmco: unref short failure
[h264 @ 0x56356040e3c0] mmco: unref short failure
09/17/2024 10:31:19 - INFO - __main__ -   current idx vync8meSeVE.209 from finetune_area returns wrong image/video, use 37342 instead.
[h264 @ 0x558632af3200] mmco: unref short failure
[h264 @ 0x5556df88af80] mmco: unref short failure
[h264 @ 0x5556df88af80] mmco: unref short failure
[h264 @ 0x558641c04d00] mmco: unref short failure
[h264 @ 0x5556df88af80] mmco: unref short failure
[h264 @ 0x56356144ae40] mmco: unref short failure
[h264 @ 0x56356144ae40] mmco: unref short failure
 58%|█████▊    | 1675/2910 [10:35:46<10:49:17, 31.54s/it][h264 @ 0x558631ef03c0] mmco: unref short failure
[h264 @ 0x558631ef03c0] mmco: unref short failure
[h264 @ 0x5635490c5740] mmco: unref short failure
[h264 @ 0x5635490c5740] mmco: unref short failure
[h264 @ 0x56355b2abc80] mmco: unref short failure
[h264 @ 0x56355b2abc80] mmco: unref short failure
[h264 @ 0x56355b2abc80] mmco: unref short failure
[h264 @ 0x56355b2abc80] mmco: unref short failure
[h264 @ 0x5556c6ccbac0] mmco: unref short failure
[h264 @ 0x5556c6ccbac0] mmco: unref short failure
 58%|█████▊    | 1676/2910 [10:35:52<8:12:50, 23.96s/it] [h264 @ 0x5556dca16340] mmco: unref short failure
 58%|█████▊    | 1677/2910 [10:35:59<6:24:53, 18.73s/it] 58%|█████▊    | 1678/2910 [10:36:05<5:09:41, 15.08s/it][h264 @ 0x558647087540] mmco: unref short failure
[h264 @ 0x558647087540] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x56354176e780] mmco: unref short failure
 58%|█████▊    | 1679/2910 [10:36:12<4:18:50, 12.62s/it][h264 @ 0x5556cc219840] mmco: unref short failure
[h264 @ 0x5556cc219840] mmco: unref short failure
 58%|█████▊    | 1680/2910 [10:36:19<3:40:59, 10.78s/it] 58%|█████▊    | 1681/2910 [10:36:30<3:47:17, 11.10s/it]09/17/2024 10:32:33 - INFO - __main__ -   current idx cl9b9Azw3_o.28 from finetune_area returns wrong image/video, use 117789 instead.
[h264 @ 0x5556c5f82340] mmco: unref short failure
[h264 @ 0x5556c5f82340] mmco: unref short failure
[h264 @ 0x5556c9189d00] mmco: unref short failure
[h264 @ 0x5556c9189d00] mmco: unref short failure
[h264 @ 0x5556d0f0d500] mmco: unref short failure
[h264 @ 0x5556d0f0d500] mmco: unref short failure
[h264 @ 0x5556d43cbac0] mmco: unref short failure
[h264 @ 0x5556d43cbac0] mmco: unref short failure
[h264 @ 0x55773379e380] mmco: unref short failure
[h264 @ 0x55773379e380] mmco: unref short failure
[h264 @ 0x558633921100] mmco: unref short failure
[h264 @ 0x5556d01b6480] mmco: unref short failure
[h264 @ 0x55864e661e40] mmco: unref short failure
[h264 @ 0x55864e661e40] mmco: unref short failure
[h264 @ 0x5586375b8fc0] mmco: unref short failure
[h264 @ 0x5586375b8fc0] mmco: unref short failure
[h264 @ 0x5556d0f0d500] mmco: unref short failure
[h264 @ 0x5556d0f0d500] mmco: unref short failure
[h264 @ 0x5556dca16340] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
[h264 @ 0x55863651c940] mmco: unref short failure
[h264 @ 0x56354c422780] mmco: unref short failure
[h264 @ 0x56354c422780] mmco: unref short failure
[h264 @ 0x56354c422780] mmco: unref short failure
[h264 @ 0x56354c422780] mmco: unref short failure
[h264 @ 0x558647087540] mmco: unref short failure
[h264 @ 0x558647087540] mmco: unref short failure
 58%|█████▊    | 1682/2910 [10:37:43<10:06:19, 29.63s/it][h264 @ 0x563546668940] mmco: unref short failure
[h264 @ 0x5556df2944c0] mmco: unref short failure
[h264 @ 0x55864b469840] mmco: unref short failure
[h264 @ 0x55864b469840] mmco: unref short failure
[h264 @ 0x5556c7fa7d40] mmco: unref short failure
 58%|█████▊    | 1683/2910 [10:38:24<11:14:50, 33.00s/it][h264 @ 0x5556d09ad480] mmco: unref short failure
[h264 @ 0x5556d09ad480] mmco: unref short failure
[h264 @ 0x5556d09ad480] mmco: unref short failure
[h264 @ 0x5556d09ad480] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
[h264 @ 0x55863a987600] mmco: unref short failure
 58%|█████▊    | 1684/2910 [10:38:31<8:35:07, 25.21s/it]  58%|█████▊    | 1685/2910 [10:38:37<6:38:36, 19.52s/it][h264 @ 0x563547d81800] mmco: unref short failure
[h264 @ 0x563547d81800] mmco: unref short failure
 58%|█████▊    | 1686/2910 [10:38:44<5:17:15, 15.55s/it][h264 @ 0x5556c53447c0] mmco: unref short failure
[h264 @ 0x5556c53447c0] mmco: unref short failure
 58%|█████▊    | 1687/2910 [10:38:52<4:29:30, 13.22s/it] 58%|█████▊    | 1688/2910 [10:38:58<3:48:47, 11.23s/it][h264 @ 0x5635575074c0] mmco: unref short failure
[h264 @ 0x5635575074c0] mmco: unref short failure
[h264 @ 0x5635575074c0] mmco: unref short failure
 58%|█████▊    | 1689/2910 [10:39:06<3:25:08, 10.08s/it][h264 @ 0x5576deaaebc0] mmco: unref short failure
[h264 @ 0x558632b0d640] mmco: unref short failure
[h264 @ 0x558635446580] mmco: unref short failure
[h264 @ 0x558635446580] mmco: unref short failure
[h264 @ 0x557732c97280] mmco: unref short failure
[h264 @ 0x55864c27d0c0] mmco: unref short failure
[h264 @ 0x558634ee5ac0] mmco: unref short failure
[h264 @ 0x558634ee5ac0] mmco: unref short failure
[h264 @ 0x558634ee5ac0] mmco: unref short failure
[h264 @ 0x558634ee5ac0] mmco: unref short failure
09/17/2024 10:35:29 - INFO - __main__ -   current idx E5AiD_Mrdg0.56 from finetune_area returns wrong image/video, use 96122 instead.
[h264 @ 0x5635514b8d80] mmco: unref short failure
[h264 @ 0x56354f4727c0] mmco: unref short failure
[h264 @ 0x56354f4727c0] mmco: unref short failure
[h264 @ 0x56354f4727c0] mmco: unref short failure
[h264 @ 0x56354f4727c0] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x563549376800] mmco: unref short failure
[h264 @ 0x558632af3200] mmco: unref short failure
[h264 @ 0x558632af3200] mmco: unref short failure
[h264 @ 0x558632af3200] mmco: unref short failure
[h264 @ 0x558632af3200] mmco: unref short failure
09/17/2024 10:35:54 - INFO - __main__ -   current idx AgoN8MYT-D8.22 from finetune_area returns wrong image/video, use 25059 instead.
[h264 @ 0x56356277c300] mmco: unref short failure
[h264 @ 0x56356277c300] mmco: unref short failure
[h264 @ 0x55568ca31480] mmco: unref short failure
[h264 @ 0x55568ca31480] mmco: unref short failure
[h264 @ 0x55771a921e80] mmco: unref short failure
 58%|█████▊    | 1690/2910 [10:40:16<9:36:19, 28.34s/it][h264 @ 0x55568c02bd80] mmco: unref short failure
[h264 @ 0x55568c02bd80] mmco: unref short failure
[h264 @ 0x557727c5d4c0] mmco: unref short failure
[h264 @ 0x55771b2a0a40] mmco: unref short failure
[h264 @ 0x55771b2a0a40] mmco: unref short failure
 58%|█████▊    | 1691/2910 [10:40:53<10:24:52, 30.76s/it][h264 @ 0x55771a201c00] mmco: unref short failure
[h264 @ 0x55772d960600] mmco: unref short failure
 58%|█████▊    | 1692/2910 [10:41:01<8:03:33, 23.82s/it] [h264 @ 0x5556c6106d00] mmco: unref short failure
[h264 @ 0x5556c6106d00] mmco: unref short failure
[h264 @ 0x5556df1e7c00] mmco: unref short failure
[h264 @ 0x5556df1e7c00] mmco: unref short failure
 58%|█████▊    | 1693/2910 [10:41:09<6:29:07, 19.18s/it] 58%|█████▊    | 1694/2910 [10:41:18<5:27:34, 16.16s/it][h264 @ 0x55864eeb3e40] mmco: unref short failure
 58%|█████▊    | 1695/2910 [10:41:25<4:32:54, 13.48s/it]09/17/2024 10:37:29 - INFO - __main__ -   current idx 8NE4fE0X3Es.50 from finetune_area returns wrong image/video, use 122799 instead.
 58%|█████▊    | 1696/2910 [10:41:33<3:57:19, 11.73s/it][h264 @ 0x55771ae91f80] mmco: unref short failure
[h264 @ 0x55771ae91f80] mmco: unref short failure
[h264 @ 0x56355b6b32c0] mmco: unref short failure
[h264 @ 0x5576de89e200] mmco: unref short failure
 58%|█████▊    | 1697/2910 [10:41:41<3:37:02, 10.74s/it][h264 @ 0x5556ca0d1240] mmco: unref short failure
[h264 @ 0x55864cc2b4c0] mmco: unref short failure
[h264 @ 0x5576e0c4e340] mmco: unref short failure
[h264 @ 0x5576e0c4e340] mmco: unref short failure
[h264 @ 0x5635427ce440] mmco: unref short failure
[h264 @ 0x5635427ce440] mmco: unref short failure
[h264 @ 0x558648685580] mmco: unref short failure
[h264 @ 0x558648685580] mmco: unref short failure
[h264 @ 0x558648685580] mmco: unref short failure
[h264 @ 0x558648685580] mmco: unref short failure
[h264 @ 0x55772c7530c0] mmco: unref short failure
[h264 @ 0x55772c7530c0] mmco: unref short failure
[h264 @ 0x55772c7530c0] mmco: unref short failure
[h264 @ 0x55772c7530c0] mmco: unref short failure
09/17/2024 10:38:33 - INFO - __main__ -   current idx 1wKPYAWLNkA.112 from finetune_area returns wrong image/video, use 32501 instead.
 58%|█████▊    | 1698/2910 [10:42:43<8:44:41, 25.98s/it]09/17/2024 10:38:50 - INFO - __main__ -   current idx DLKCFjbzRWc.28 from finetune_area returns wrong image/video, use 123840 instead.
09/17/2024 10:39:01 - INFO - __main__ -   current idx Uy2r4NrZSnM.11 from finetune_area returns wrong image/video, use 140467 instead.
09/17/2024 10:39:04 - INFO - __main__ -   current idx 7A9jWLnjoRo.51 from finetune_area returns wrong image/video, use 134805 instead.
[h264 @ 0x55864142de40] mmco: unref short failure
[h264 @ 0x55864142de40] mmco: unref short failure
[h264 @ 0x55864142de40] mmco: unref short failure
[h264 @ 0x55864142de40] mmco: unref short failure
[h264 @ 0x55771d874540] mmco: unref short failure
[h264 @ 0x55771d874540] mmco: unref short failure
[h264 @ 0x55863f641040] mmco: unref short failure
[h264 @ 0x5586358c9880] mmco: unref short failure
 58%|█████▊    | 1699/2910 [10:43:24<10:16:02, 30.52s/it]09/17/2024 10:39:23 - INFO - __main__ -   evaluate on ret%tva--msrvtt_ret task
09/17/2024 10:39:23 - INFO - __main__ -   start running ret%tva validation...
[h264 @ 0x558658bed900] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x55772a7d0940] mmco: unref short failure
[h264 @ 0x55772a7d0940] mmco: unref short failure
[h264 @ 0x55772a601240] mmco: unref short failure
[h264 @ 0x55771d874540] mmco: unref short failure
[h264 @ 0x55771d874540] mmco: unref short failure
[h264 @ 0x55864be86380] mmco: unref short failure
[h264 @ 0x55864be86380] mmco: unref short failure
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
/leonardo/home/userexternal/gcicchet/.conda/envs/vast/lib/python3.9/site-packages/torchvision/transforms/functional.py:1603: UserWarning: The default value of the antialias parameter of all the resizing transforms (Resize(), RandomResizedCrop(), etc.) will change from None to True in v0.17, in order to be consistent across the PIL and Tensor backends. To suppress this warning, directly pass antialias=True (recommended, future default), antialias=None (current default, which means False for Tensors and True for PIL), or antialias=False (only works on Tensors - PIL will still use antialiasing). This also applies if you are using the inference transforms from the models weights: update the call to weights.transforms(antialias=True).
  warnings.warn(
[h264 @ 0x563558d14380] mmco: unref short failure
[h264 @ 0x5577233f1e40] mmco: unref short failure
[h264 @ 0x5577233f1e40] mmco: unref short failure
[h264 @ 0x55568ca31480] mmco: unref short failure
[h264 @ 0x55568ca31480] mmco: unref short failure
[h264 @ 0x5586358c9880] mmco: unref short failure
[h264 @ 0x55863d917900] mmco: unref short failure
[h264 @ 0x55863d917900] mmco: unref short failure
[h264 @ 0x55865609c600] mmco: unref short failure
[h264 @ 0x55865609c600] mmco: unref short failure
[h264 @ 0x558649550380] mmco: unref short failure
[h264 @ 0x5556c54eaf00] mmco: unref short failure
[h264 @ 0x5556c54eaf00] mmco: unref short failure
[h264 @ 0x5556dc9a4340] mmco: unref short failure
[h264 @ 0x5556dc9a4340] mmco: unref short failure
[h264 @ 0x5635482c7580] mmco: unref short failure
[h264 @ 0x5635482c7580] mmco: unref short failure
[h264 @ 0x55568ca31480] mmco: unref short failure
[h264 @ 0x5556d1720e00] mmco: unref short failure
[h264 @ 0x5556d1720e00] mmco: unref short failure

  0%|          | 0/221 [00:00<?, ?it/s][A
  0%|          | 1/221 [00:00<03:01,  1.21it/s][A
  1%|          | 2/221 [00:01<02:21,  1.55it/s][A
  1%|▏         | 3/221 [00:01<01:28,  2.46it/s][A
  2%|▏         | 5/221 [00:01<00:50,  4.29it/s][A
  3%|▎         | 6/221 [00:01<00:43,  4.91it/s][A
  3%|▎         | 7/221 [00:01<00:42,  5.07it/s][A
  4%|▎         | 8/221 [00:02<01:02,  3.39it/s][A
  4%|▍         | 9/221 [00:02<00:57,  3.69it/s][A
  5%|▍         | 10/221 [00:03<00:57,  3.66it/s][A
  5%|▍         | 11/221 [00:03<00:50,  4.17it/s][A
  5%|▌         | 12/221 [00:04<01:32,  2.26it/s][A
  6%|▌         | 13/221 [00:04<01:14,  2.81it/s][A
  6%|▋         | 14/221 [00:04<01:15,  2.76it/s][A
  7%|▋         | 15/221 [00:04<01:04,  3.17it/s][A
  7%|▋         | 16/221 [00:05<00:58,  3.51it/s][A
  8%|▊         | 17/221 [00:05<00:53,  3.82it/s][A
  8%|▊         | 18/221 [00:05<00:52,  3.89it/s][A
  9%|▊         | 19/221 [00:05<00:45,  4.48it/s][A
  9%|▉         | 20/221 [00:05<00:37,  5.31it/s][A
 10%|▉         | 21/221 [00:05<00:33,  5.91it/s][A
 10%|▉         | 22/221 [00:06<00:35,  5.54it/s][A
 11%|█         | 24/221 [00:06<00:35,  5.59it/s][A
 11%|█▏        | 25/221 [00:06<00:49,  3.97it/s][A
 12%|█▏        | 26/221 [00:07<00:52,  3.74it/s][A
 12%|█▏        | 27/221 [00:07<00:45,  4.27it/s][A
 13%|█▎        | 28/221 [00:07<00:46,  4.18it/s][A
 13%|█▎        | 29/221 [00:07<00:39,  4.85it/s][A
 14%|█▎        | 30/221 [00:07<00:36,  5.25it/s][A
 14%|█▍        | 31/221 [00:08<00:34,  5.52it/s][A
 14%|█▍        | 32/221 [00:08<00:31,  5.93it/s][A
 15%|█▍        | 33/221 [00:08<00:40,  4.63it/s][A
 15%|█▌        | 34/221 [00:08<00:35,  5.31it/s][A
 16%|█▌        | 35/221 [00:08<00:34,  5.40it/s][A
 16%|█▋        | 36/221 [00:09<00:35,  5.17it/s][A
 17%|█▋        | 37/221 [00:09<00:57,  3.22it/s][A
 17%|█▋        | 38/221 [00:09<00:56,  3.25it/s][A
 18%|█▊        | 39/221 [00:10<00:46,  3.92it/s][A
 18%|█▊        | 40/221 [00:10<00:42,  4.26it/s][A
 19%|█▊        | 41/221 [00:10<00:40,  4.50it/s][A
 19%|█▉        | 42/221 [00:11<01:41,  1.76it/s][A
 19%|█▉        | 43/221 [00:11<01:16,  2.33it/s][A
 20%|█▉        | 44/221 [00:12<01:01,  2.88it/s][A
 20%|██        | 45/221 [00:12<01:17,  2.27it/s][A
 21%|██        | 46/221 [00:13<01:23,  2.09it/s][A[h264 @ 0x55863d754d40] mmco: unref short failure

 21%|██▏       | 47/221 [00:16<03:57,  1.37s/it][A
 22%|██▏       | 48/221 [00:17<03:01,  1.05s/it][A
 22%|██▏       | 49/221 [00:17<02:13,  1.29it/s][A
 23%|██▎       | 50/221 [00:17<01:39,  1.72it/s][A
 23%|██▎       | 51/221 [00:17<01:15,  2.24it/s][A
 24%|██▎       | 52/221 [00:17<00:59,  2.85it/s][A
 24%|██▍       | 53/221 [00:17<00:49,  3.39it/s][A
 24%|██▍       | 54/221 [00:18<01:00,  2.78it/s][A
 25%|██▍       | 55/221 [00:18<00:57,  2.90it/s][A
 25%|██▌       | 56/221 [00:18<00:48,  3.40it/s][A
 26%|██▌       | 57/221 [00:19<01:06,  2.47it/s][A
 26%|██▌       | 58/221 [00:19<00:58,  2.80it/s][A
 27%|██▋       | 59/221 [00:19<00:51,  3.12it/s][A
 27%|██▋       | 60/221 [00:20<00:52,  3.09it/s][A
 28%|██▊       | 61/221 [00:20<00:44,  3.59it/s][A
 28%|██▊       | 62/221 [00:20<00:37,  4.28it/s][A
 29%|██▊       | 63/221 [00:21<00:32,  4.91it/s][A
 29%|██▉       | 64/221 [00:21<00:54,  2.91it/s][A
 29%|██▉       | 65/221 [00:21<00:44,  3.47it/s][A
 30%|██▉       | 66/221 [00:22<00:57,  2.69it/s][A
 30%|███       | 67/221 [00:22<00:48,  3.19it/s][A
 31%|███       | 68/221 [00:22<00:45,  3.33it/s][A
 31%|███       | 69/221 [00:22<00:51,  2.95it/s][A
 32%|███▏      | 70/221 [00:23<00:41,  3.65it/s][A
 32%|███▏      | 71/221 [00:25<02:40,  1.07s/it][A
 33%|███▎      | 72/221 [00:26<02:06,  1.18it/s][A
 33%|███▎      | 73/221 [00:26<01:45,  1.41it/s][A
 33%|███▎      | 74/221 [00:26<01:19,  1.86it/s][A
 34%|███▍      | 75/221 [00:27<01:09,  2.09it/s][A
 34%|███▍      | 76/221 [00:27<00:56,  2.58it/s][A
 35%|███▍      | 77/221 [00:27<00:49,  2.90it/s][A
 35%|███▌      | 78/221 [00:27<00:46,  3.09it/s][A
 36%|███▌      | 79/221 [00:28<01:10,  2.02it/s][A
 36%|███▌      | 80/221 [00:28<00:55,  2.56it/s][A
 37%|███▋      | 81/221 [00:29<00:45,  3.07it/s][A
 37%|███▋      | 82/221 [00:29<00:48,  2.89it/s][A
 38%|███▊      | 83/221 [00:29<00:38,  3.59it/s][A
 38%|███▊      | 84/221 [00:29<00:35,  3.91it/s][A
 38%|███▊      | 85/221 [00:29<00:31,  4.34it/s][A
 39%|███▉      | 86/221 [00:30<00:30,  4.47it/s][A
 39%|███▉      | 87/221 [00:30<00:36,  3.63it/s][A
 40%|███▉      | 88/221 [00:30<00:38,  3.46it/s][A
 40%|████      | 89/221 [00:34<02:32,  1.15s/it][A
 41%|████      | 90/221 [00:34<01:54,  1.14it/s][A
 42%|████▏     | 92/221 [00:34<01:07,  1.91it/s][A
 42%|████▏     | 93/221 [00:35<01:12,  1.78it/s][A
 43%|████▎     | 94/221 [00:36<01:24,  1.50it/s][A
 43%|████▎     | 95/221 [00:36<01:04,  1.94it/s][A
 43%|████▎     | 96/221 [00:36<00:52,  2.38it/s][A[h264 @ 0x55568be941c0] mmco: unref short failure
[h264 @ 0x55568be941c0] mmco: unref short failure

 44%|████▍     | 98/221 [00:36<00:36,  3.33it/s][A
 45%|████▍     | 99/221 [00:36<00:35,  3.48it/s][A
 45%|████▌     | 100/221 [00:37<00:33,  3.57it/s][A
 46%|████▌     | 101/221 [00:37<00:33,  3.53it/s][A
 46%|████▌     | 102/221 [00:37<00:34,  3.43it/s][A
 47%|████▋     | 103/221 [00:37<00:28,  4.19it/s][A
 48%|████▊     | 105/221 [00:38<00:23,  4.92it/s][A
 48%|████▊     | 106/221 [00:38<00:36,  3.13it/s][A
 48%|████▊     | 107/221 [00:39<00:32,  3.49it/s][A
 49%|████▉     | 108/221 [00:39<00:28,  3.91it/s][A
 49%|████▉     | 109/221 [00:39<00:25,  4.44it/s][A
 50%|████▉     | 110/221 [00:39<00:21,  5.26it/s][A
 50%|█████     | 111/221 [00:40<00:31,  3.50it/s][A
 51%|█████     | 112/221 [00:40<00:28,  3.82it/s][A
 51%|█████     | 113/221 [00:40<00:30,  3.50it/s][A
 52%|█████▏    | 115/221 [00:40<00:19,  5.36it/s][A
 52%|█████▏    | 116/221 [00:45<02:23,  1.36s/it][A
 53%|█████▎    | 117/221 [00:46<01:55,  1.11s/it][A
 53%|█████▎    | 118/221 [00:46<01:29,  1.15it/s][A
 54%|█████▍    | 119/221 [00:46<01:08,  1.49it/s][A
 54%|█████▍    | 120/221 [00:46<00:52,  1.91it/s][A
 55%|█████▍    | 121/221 [00:46<00:41,  2.40it/s][A
 55%|█████▌    | 122/221 [00:47<00:35,  2.81it/s][A
 56%|█████▌    | 123/221 [00:47<00:29,  3.35it/s][A
 56%|█████▌    | 124/221 [00:47<00:26,  3.72it/s][A
 57%|█████▋    | 125/221 [00:47<00:26,  3.65it/s][A
 57%|█████▋    | 126/221 [00:48<00:44,  2.15it/s][A[h264 @ 0x5556d8a4eb00] mmco: unref short failure

 57%|█████▋    | 127/221 [00:48<00:39,  2.37it/s][A
 58%|█████▊    | 128/221 [00:49<00:55,  1.68it/s][A
 58%|█████▊    | 129/221 [00:50<00:44,  2.05it/s][A
 59%|█████▉    | 130/221 [00:50<00:36,  2.50it/s][A
 59%|█████▉    | 131/221 [00:50<00:28,  3.14it/s][A
 60%|█████▉    | 132/221 [00:50<00:26,  3.37it/s][A[h264 @ 0x56354ca2c9c0] mmco: unref short failure
[h264 @ 0x56354ca2c9c0] mmco: unref short failure

 60%|██████    | 133/221 [00:51<00:29,  2.95it/s][A
 61%|██████    | 134/221 [00:51<00:26,  3.26it/s][A[h264 @ 0x563554821000] mmco: unref short failure
[h264 @ 0x563554821000] mmco: unref short failure

 61%|██████    | 135/221 [00:51<00:27,  3.13it/s][A
 62%|██████▏   | 136/221 [00:52<00:29,  2.84it/s][A
 62%|██████▏   | 137/221 [00:52<00:39,  2.15it/s][A
 62%|██████▏   | 138/221 [00:53<00:44,  1.88it/s][A
 63%|██████▎   | 139/221 [00:53<00:41,  1.98it/s][A
 63%|██████▎   | 140/221 [00:54<00:34,  2.33it/s][A
 64%|██████▍   | 141/221 [00:54<00:29,  2.74it/s][A
 64%|██████▍   | 142/221 [00:54<00:29,  2.67it/s][A
 65%|██████▍   | 143/221 [00:55<00:27,  2.86it/s][A
 65%|██████▌   | 144/221 [00:55<00:24,  3.14it/s][A
 66%|██████▌   | 146/221 [00:55<00:15,  4.83it/s][A
 67%|██████▋   | 147/221 [00:55<00:13,  5.46it/s][A
 67%|██████▋   | 148/221 [00:55<00:14,  4.97it/s][A
 68%|██████▊   | 150/221 [00:56<00:11,  6.17it/s][A
 68%|██████▊   | 151/221 [00:56<00:16,  4.21it/s][A
 69%|██████▉   | 152/221 [00:56<00:16,  4.17it/s][A
 69%|██████▉   | 153/221 [00:57<00:18,  3.73it/s][A
 70%|██████▉   | 154/221 [00:58<00:28,  2.36it/s][A
 70%|███████   | 155/221 [00:58<00:22,  2.93it/s][A
 71%|███████   | 157/221 [01:03<01:24,  1.32s/it][A
 71%|███████▏  | 158/221 [01:03<01:04,  1.03s/it][A
 72%|███████▏  | 159/221 [01:03<00:49,  1.25it/s][A
 72%|███████▏  | 160/221 [01:03<00:39,  1.54it/s][A
 73%|███████▎  | 162/221 [01:03<00:23,  2.53it/s][A
 74%|███████▍  | 163/221 [01:04<00:20,  2.89it/s][A
 74%|███████▍  | 164/221 [01:04<00:17,  3.23it/s][A
 75%|███████▍  | 165/221 [01:04<00:14,  3.84it/s][A
 75%|███████▌  | 166/221 [01:04<00:16,  3.32it/s][A
 76%|███████▌  | 168/221 [01:08<00:54,  1.02s/it][A
 76%|███████▋  | 169/221 [01:08<00:43,  1.21it/s][A
 77%|███████▋  | 170/221 [01:09<00:34,  1.46it/s][A
 77%|███████▋  | 171/221 [01:09<00:26,  1.88it/s][A
 78%|███████▊  | 172/221 [01:09<00:20,  2.42it/s][A
 78%|███████▊  | 173/221 [01:09<00:16,  2.89it/s][A
 79%|███████▊  | 174/221 [01:09<00:13,  3.50it/s][A
 79%|███████▉  | 175/221 [01:09<00:11,  3.84it/s][A
 80%|███████▉  | 176/221 [01:10<00:11,  3.81it/s][A
 80%|████████  | 177/221 [01:10<00:09,  4.63it/s][A
 81%|████████  | 178/221 [01:10<00:09,  4.50it/s][A
 81%|████████  | 179/221 [01:12<00:26,  1.56it/s][A
 82%|████████▏ | 181/221 [01:12<00:15,  2.66it/s][A
 82%|████████▏ | 182/221 [01:12<00:12,  3.14it/s][A
 83%|████████▎ | 183/221 [01:12<00:10,  3.63it/s][A
 83%|████████▎ | 184/221 [01:12<00:09,  3.73it/s][A
 84%|████████▍ | 186/221 [01:13<00:07,  4.93it/s][A
 85%|████████▌ | 188/221 [01:13<00:06,  5.41it/s][A
 86%|████████▌ | 189/221 [01:13<00:05,  5.34it/s][A
 86%|████████▌ | 190/221 [01:13<00:05,  5.23it/s][A
 87%|████████▋ | 192/221 [01:14<00:05,  5.79it/s][A
 88%|████████▊ | 194/221 [01:15<00:08,  3.12it/s][A
 88%|████████▊ | 195/221 [01:15<00:07,  3.60it/s][A
 89%|████████▉ | 197/221 [01:15<00:04,  5.03it/s][A
 90%|█████████ | 199/221 [01:15<00:04,  5.00it/s][A
 90%|█████████ | 200/221 [01:16<00:05,  4.14it/s][A
 91%|█████████ | 201/221 [01:16<00:04,  4.06it/s][A
 91%|█████████▏| 202/221 [01:16<00:04,  4.63it/s][A
 92%|█████████▏| 203/221 [01:17<00:04,  3.69it/s][A
 93%|█████████▎| 205/221 [01:17<00:03,  4.96it/s][A
 93%|█████████▎| 206/221 [01:17<00:03,  4.67it/s][A
 94%|█████████▍| 208/221 [01:17<00:01,  6.59it/s][A
 95%|█████████▌| 210/221 [01:17<00:01,  8.63it/s][A09/17/2024 10:43:01 - INFO - __main__ -   current idx _9yTXjXc3Ko.34 from finetune_area returns wrong image/video, use 90344 instead.

 96%|█████████▌| 212/221 [01:18<00:02,  3.95it/s][A
 97%|█████████▋| 214/221 [01:19<00:02,  3.33it/s][A
 97%|█████████▋| 215/221 [01:19<00:01,  3.57it/s][A
 98%|█████████▊| 216/221 [01:19<00:01,  3.99it/s][A
 98%|█████████▊| 217/221 [01:20<00:01,  2.54it/s][A
 99%|█████████▊| 218/221 [01:21<00:01,  2.11it/s][A
 99%|█████████▉| 219/221 [01:21<00:00,  2.53it/s][A[h264 @ 0x5556d38fa480] mmco: unref short failure
[h264 @ 0x5556e2ba1f80] mmco: unref short failure

100%|█████████▉| 220/221 [01:26<00:01,  1.65s/it][A
100%|██████████| 221/221 [01:26<00:00,  1.22s/it][A100%|██████████| 221/221 [01:26<00:00,  2.55it/s]

  0%|          | 0/221 [00:00<?, ?it/s][A
srun: Job step aborted: Waiting up to 92 seconds for job step to finish.
  0%|          | 1/221 [00:00<01:08,  3.21it/s][Aslurmstepd: error: *** STEP 7731977.0 ON lrdn3182 CANCELLED AT 2024-09-17T10:43:12 ***
slurmstepd: error: *** JOB 7731977 ON lrdn3182 CANCELLED AT 2024-09-17T10:43:12 ***
WARNING:torch.distributed.elastic.agent.server.api:Received 15 death signal, shutting down workers
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 4159870 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 4159871 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 4159872 closing signal SIGTERM
WARNING:torch.distributed.elastic.multiprocessing.api:Sending process 4159873 closing signal SIGTERM
